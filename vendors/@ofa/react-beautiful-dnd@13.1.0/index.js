System.register(['react', 'react-dom'], (function (exports) {
	'use strict';
	var React$1, useLayoutEffect, useEffect, useMemo$1, useContext, useReducer, useRef, useDebugValue, useState, unstable_batchedUpdates, require$$9;
	return {
		setters: [function (module) {
			React$1 = module["default"];
			useLayoutEffect = module.useLayoutEffect;
			useEffect = module.useEffect;
			useMemo$1 = module.useMemo;
			useContext = module.useContext;
			useReducer = module.useReducer;
			useRef = module.useRef;
			useDebugValue = module.useDebugValue;
			useState = module.useState;
		}, function (module) {
			unstable_batchedUpdates = module.unstable_batchedUpdates;
			require$$9 = module["default"];
		}],
		execute: (function () {

			function getAugmentedNamespace(n) {
				if (n.__esModule) return n;
				var a = Object.defineProperty({}, '__esModule', {value: true});
				Object.keys(n).forEach(function (k) {
					var d = Object.getOwnPropertyDescriptor(n, k);
					Object.defineProperty(a, k, d.get ? d : {
						enumerable: true,
						get: function () {
							return n[k];
						}
					});
				});
				return a;
			}

			var reactBeautifulDnd_cjs = exports('default', {});

			var inheritsLoose = {exports: {}};

			var setPrototypeOf = {exports: {}};

			(function (module) {
			function _setPrototypeOf(o, p) {
			  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
			    o.__proto__ = p;
			    return o;
			  };

			  module.exports["default"] = module.exports, module.exports.__esModule = true;
			  return _setPrototypeOf(o, p);
			}

			module.exports = _setPrototypeOf;
			module.exports["default"] = module.exports, module.exports.__esModule = true;
			}(setPrototypeOf));

			(function (module) {
			var setPrototypeOf$1 = setPrototypeOf.exports;

			function _inheritsLoose(subClass, superClass) {
			  subClass.prototype = Object.create(superClass.prototype);
			  subClass.prototype.constructor = subClass;
			  setPrototypeOf$1(subClass, superClass);
			}

			module.exports = _inheritsLoose;
			module.exports["default"] = module.exports, module.exports.__esModule = true;
			}(inheritsLoose));

			var _extends$2 = {exports: {}};

			(function (module) {
			function _extends() {
			  module.exports = _extends = Object.assign || function (target) {
			    for (var i = 1; i < arguments.length; i++) {
			      var source = arguments[i];

			      for (var key in source) {
			        if (Object.prototype.hasOwnProperty.call(source, key)) {
			          target[key] = source[key];
			        }
			      }
			    }

			    return target;
			  };

			  module.exports["default"] = module.exports, module.exports.__esModule = true;
			  return _extends.apply(this, arguments);
			}

			module.exports = _extends;
			module.exports["default"] = module.exports, module.exports.__esModule = true;
			}(_extends$2));

			function _defineProperty(obj, key, value) {
			  if (key in obj) {
			    Object.defineProperty(obj, key, {
			      value: value,
			      enumerable: true,
			      configurable: true,
			      writable: true
			    });
			  } else {
			    obj[key] = value;
			  }

			  return obj;
			}

			function ownKeys(object, enumerableOnly) {
			  var keys = Object.keys(object);

			  if (Object.getOwnPropertySymbols) {
			    var symbols = Object.getOwnPropertySymbols(object);

			    if (enumerableOnly) {
			      symbols = symbols.filter(function (sym) {
			        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
			      });
			    }

			    keys.push.apply(keys, symbols);
			  }

			  return keys;
			}

			function _objectSpread2(target) {
			  for (var i = 1; i < arguments.length; i++) {
			    var source = arguments[i] != null ? arguments[i] : {};

			    if (i % 2) {
			      ownKeys(Object(source), true).forEach(function (key) {
			        _defineProperty(target, key, source[key]);
			      });
			    } else if (Object.getOwnPropertyDescriptors) {
			      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
			    } else {
			      ownKeys(Object(source)).forEach(function (key) {
			        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
			      });
			    }
			  }

			  return target;
			}

			/**
			 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
			 *
			 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
			 * during build.
			 * @param {number} code
			 */
			function formatProdErrorMessage(code) {
			  return "Minified Redux error #" + code + "; visit https://redux.js.org/Errors?code=" + code + " for the full message or " + 'use the non-minified dev environment for full errors. ';
			}

			// Inlined version of the `symbol-observable` polyfill
			var $$observable = (function () {
			  return typeof Symbol === 'function' && Symbol.observable || '@@observable';
			})();

			/**
			 * These are private action types reserved by Redux.
			 * For any unknown actions, you must return the current state.
			 * If the current state is undefined, you must return the initial state.
			 * Do not reference these action types directly in your code.
			 */
			var randomString = function randomString() {
			  return Math.random().toString(36).substring(7).split('').join('.');
			};

			var ActionTypes = {
			  INIT: "@@redux/INIT" + randomString(),
			  REPLACE: "@@redux/REPLACE" + randomString(),
			  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
			    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
			  }
			};

			/**
			 * @param {any} obj The object to inspect.
			 * @returns {boolean} True if the argument appears to be a plain object.
			 */
			function isPlainObject(obj) {
			  if (typeof obj !== 'object' || obj === null) return false;
			  var proto = obj;

			  while (Object.getPrototypeOf(proto) !== null) {
			    proto = Object.getPrototypeOf(proto);
			  }

			  return Object.getPrototypeOf(obj) === proto;
			}

			/**
			 * Creates a Redux store that holds the state tree.
			 * The only way to change the data in the store is to call `dispatch()` on it.
			 *
			 * There should only be a single store in your app. To specify how different
			 * parts of the state tree respond to actions, you may combine several reducers
			 * into a single reducer function by using `combineReducers`.
			 *
			 * @param {Function} reducer A function that returns the next state tree, given
			 * the current state tree and the action to handle.
			 *
			 * @param {any} [preloadedState] The initial state. You may optionally specify it
			 * to hydrate the state from the server in universal apps, or to restore a
			 * previously serialized user session.
			 * If you use `combineReducers` to produce the root reducer function, this must be
			 * an object with the same shape as `combineReducers` keys.
			 *
			 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
			 * to enhance the store with third-party capabilities such as middleware,
			 * time travel, persistence, etc. The only store enhancer that ships with Redux
			 * is `applyMiddleware()`.
			 *
			 * @returns {Store} A Redux store that lets you read the state, dispatch actions
			 * and subscribe to changes.
			 */

			function createStore$1(reducer, preloadedState, enhancer) {
			  var _ref2;

			  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
			    throw new Error(formatProdErrorMessage(0) );
			  }

			  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
			    enhancer = preloadedState;
			    preloadedState = undefined;
			  }

			  if (typeof enhancer !== 'undefined') {
			    if (typeof enhancer !== 'function') {
			      throw new Error(formatProdErrorMessage(1) );
			    }

			    return enhancer(createStore$1)(reducer, preloadedState);
			  }

			  if (typeof reducer !== 'function') {
			    throw new Error(formatProdErrorMessage(2) );
			  }

			  var currentReducer = reducer;
			  var currentState = preloadedState;
			  var currentListeners = [];
			  var nextListeners = currentListeners;
			  var isDispatching = false;
			  /**
			   * This makes a shallow copy of currentListeners so we can use
			   * nextListeners as a temporary list while dispatching.
			   *
			   * This prevents any bugs around consumers calling
			   * subscribe/unsubscribe in the middle of a dispatch.
			   */

			  function ensureCanMutateNextListeners() {
			    if (nextListeners === currentListeners) {
			      nextListeners = currentListeners.slice();
			    }
			  }
			  /**
			   * Reads the state tree managed by the store.
			   *
			   * @returns {any} The current state tree of your application.
			   */


			  function getState() {
			    if (isDispatching) {
			      throw new Error(formatProdErrorMessage(3) );
			    }

			    return currentState;
			  }
			  /**
			   * Adds a change listener. It will be called any time an action is dispatched,
			   * and some part of the state tree may potentially have changed. You may then
			   * call `getState()` to read the current state tree inside the callback.
			   *
			   * You may call `dispatch()` from a change listener, with the following
			   * caveats:
			   *
			   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
			   * If you subscribe or unsubscribe while the listeners are being invoked, this
			   * will not have any effect on the `dispatch()` that is currently in progress.
			   * However, the next `dispatch()` call, whether nested or not, will use a more
			   * recent snapshot of the subscription list.
			   *
			   * 2. The listener should not expect to see all state changes, as the state
			   * might have been updated multiple times during a nested `dispatch()` before
			   * the listener is called. It is, however, guaranteed that all subscribers
			   * registered before the `dispatch()` started will be called with the latest
			   * state by the time it exits.
			   *
			   * @param {Function} listener A callback to be invoked on every dispatch.
			   * @returns {Function} A function to remove this change listener.
			   */


			  function subscribe(listener) {
			    if (typeof listener !== 'function') {
			      throw new Error(formatProdErrorMessage(4) );
			    }

			    if (isDispatching) {
			      throw new Error(formatProdErrorMessage(5) );
			    }

			    var isSubscribed = true;
			    ensureCanMutateNextListeners();
			    nextListeners.push(listener);
			    return function unsubscribe() {
			      if (!isSubscribed) {
			        return;
			      }

			      if (isDispatching) {
			        throw new Error(formatProdErrorMessage(6) );
			      }

			      isSubscribed = false;
			      ensureCanMutateNextListeners();
			      var index = nextListeners.indexOf(listener);
			      nextListeners.splice(index, 1);
			      currentListeners = null;
			    };
			  }
			  /**
			   * Dispatches an action. It is the only way to trigger a state change.
			   *
			   * The `reducer` function, used to create the store, will be called with the
			   * current state tree and the given `action`. Its return value will
			   * be considered the **next** state of the tree, and the change listeners
			   * will be notified.
			   *
			   * The base implementation only supports plain object actions. If you want to
			   * dispatch a Promise, an Observable, a thunk, or something else, you need to
			   * wrap your store creating function into the corresponding middleware. For
			   * example, see the documentation for the `redux-thunk` package. Even the
			   * middleware will eventually dispatch plain object actions using this method.
			   *
			   * @param {Object} action A plain object representing “what changed”. It is
			   * a good idea to keep actions serializable so you can record and replay user
			   * sessions, or use the time travelling `redux-devtools`. An action must have
			   * a `type` property which may not be `undefined`. It is a good idea to use
			   * string constants for action types.
			   *
			   * @returns {Object} For convenience, the same action object you dispatched.
			   *
			   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
			   * return something else (for example, a Promise you can await).
			   */


			  function dispatch(action) {
			    if (!isPlainObject(action)) {
			      throw new Error(formatProdErrorMessage(7) );
			    }

			    if (typeof action.type === 'undefined') {
			      throw new Error(formatProdErrorMessage(8) );
			    }

			    if (isDispatching) {
			      throw new Error(formatProdErrorMessage(9) );
			    }

			    try {
			      isDispatching = true;
			      currentState = currentReducer(currentState, action);
			    } finally {
			      isDispatching = false;
			    }

			    var listeners = currentListeners = nextListeners;

			    for (var i = 0; i < listeners.length; i++) {
			      var listener = listeners[i];
			      listener();
			    }

			    return action;
			  }
			  /**
			   * Replaces the reducer currently used by the store to calculate the state.
			   *
			   * You might need this if your app implements code splitting and you want to
			   * load some of the reducers dynamically. You might also need this if you
			   * implement a hot reloading mechanism for Redux.
			   *
			   * @param {Function} nextReducer The reducer for the store to use instead.
			   * @returns {void}
			   */


			  function replaceReducer(nextReducer) {
			    if (typeof nextReducer !== 'function') {
			      throw new Error(formatProdErrorMessage(10) );
			    }

			    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
			    // Any reducers that existed in both the new and old rootReducer
			    // will receive the previous state. This effectively populates
			    // the new state tree with any relevant data from the old one.

			    dispatch({
			      type: ActionTypes.REPLACE
			    });
			  }
			  /**
			   * Interoperability point for observable/reactive libraries.
			   * @returns {observable} A minimal observable of state changes.
			   * For more information, see the observable proposal:
			   * https://github.com/tc39/proposal-observable
			   */


			  function observable() {
			    var _ref;

			    var outerSubscribe = subscribe;
			    return _ref = {
			      /**
			       * The minimal observable subscription method.
			       * @param {Object} observer Any object that can be used as an observer.
			       * The observer object should have a `next` method.
			       * @returns {subscription} An object with an `unsubscribe` method that can
			       * be used to unsubscribe the observable from the store, and prevent further
			       * emission of values from the observable.
			       */
			      subscribe: function subscribe(observer) {
			        if (typeof observer !== 'object' || observer === null) {
			          throw new Error(formatProdErrorMessage(11) );
			        }

			        function observeState() {
			          if (observer.next) {
			            observer.next(getState());
			          }
			        }

			        observeState();
			        var unsubscribe = outerSubscribe(observeState);
			        return {
			          unsubscribe: unsubscribe
			        };
			      }
			    }, _ref[$$observable] = function () {
			      return this;
			    }, _ref;
			  } // When a store is created, an "INIT" action is dispatched so that every
			  // reducer returns their initial state. This effectively populates
			  // the initial state tree.


			  dispatch({
			    type: ActionTypes.INIT
			  });
			  return _ref2 = {
			    dispatch: dispatch,
			    subscribe: subscribe,
			    getState: getState,
			    replaceReducer: replaceReducer
			  }, _ref2[$$observable] = observable, _ref2;
			}

			function assertReducerShape(reducers) {
			  Object.keys(reducers).forEach(function (key) {
			    var reducer = reducers[key];
			    var initialState = reducer(undefined, {
			      type: ActionTypes.INIT
			    });

			    if (typeof initialState === 'undefined') {
			      throw new Error(formatProdErrorMessage(12) );
			    }

			    if (typeof reducer(undefined, {
			      type: ActionTypes.PROBE_UNKNOWN_ACTION()
			    }) === 'undefined') {
			      throw new Error(formatProdErrorMessage(13) );
			    }
			  });
			}
			/**
			 * Turns an object whose values are different reducer functions, into a single
			 * reducer function. It will call every child reducer, and gather their results
			 * into a single state object, whose keys correspond to the keys of the passed
			 * reducer functions.
			 *
			 * @param {Object} reducers An object whose values correspond to different
			 * reducer functions that need to be combined into one. One handy way to obtain
			 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
			 * undefined for any action. Instead, they should return their initial state
			 * if the state passed to them was undefined, and the current state for any
			 * unrecognized action.
			 *
			 * @returns {Function} A reducer function that invokes every reducer inside the
			 * passed object, and builds a state object with the same shape.
			 */


			function combineReducers(reducers) {
			  var reducerKeys = Object.keys(reducers);
			  var finalReducers = {};

			  for (var i = 0; i < reducerKeys.length; i++) {
			    var key = reducerKeys[i];

			    if (typeof reducers[key] === 'function') {
			      finalReducers[key] = reducers[key];
			    }
			  }

			  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same

			  var shapeAssertionError;

			  try {
			    assertReducerShape(finalReducers);
			  } catch (e) {
			    shapeAssertionError = e;
			  }

			  return function combination(state, action) {
			    if (state === void 0) {
			      state = {};
			    }

			    if (shapeAssertionError) {
			      throw shapeAssertionError;
			    }

			    var hasChanged = false;
			    var nextState = {};

			    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
			      var _key = finalReducerKeys[_i];
			      var reducer = finalReducers[_key];
			      var previousStateForKey = state[_key];
			      var nextStateForKey = reducer(previousStateForKey, action);

			      if (typeof nextStateForKey === 'undefined') {
			        action && action.type;
			        throw new Error(formatProdErrorMessage(14) );
			      }

			      nextState[_key] = nextStateForKey;
			      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
			    }

			    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
			    return hasChanged ? nextState : state;
			  };
			}

			function bindActionCreator(actionCreator, dispatch) {
			  return function () {
			    return dispatch(actionCreator.apply(this, arguments));
			  };
			}
			/**
			 * Turns an object whose values are action creators, into an object with the
			 * same keys, but with every function wrapped into a `dispatch` call so they
			 * may be invoked directly. This is just a convenience method, as you can call
			 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
			 *
			 * For convenience, you can also pass an action creator as the first argument,
			 * and get a dispatch wrapped function in return.
			 *
			 * @param {Function|Object} actionCreators An object whose values are action
			 * creator functions. One handy way to obtain it is to use ES6 `import * as`
			 * syntax. You may also pass a single function.
			 *
			 * @param {Function} dispatch The `dispatch` function available on your Redux
			 * store.
			 *
			 * @returns {Function|Object} The object mimicking the original object, but with
			 * every action creator wrapped into the `dispatch` call. If you passed a
			 * function as `actionCreators`, the return value will also be a single
			 * function.
			 */


			function bindActionCreators$1(actionCreators, dispatch) {
			  if (typeof actionCreators === 'function') {
			    return bindActionCreator(actionCreators, dispatch);
			  }

			  if (typeof actionCreators !== 'object' || actionCreators === null) {
			    throw new Error(formatProdErrorMessage(16) );
			  }

			  var boundActionCreators = {};

			  for (var key in actionCreators) {
			    var actionCreator = actionCreators[key];

			    if (typeof actionCreator === 'function') {
			      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
			    }
			  }

			  return boundActionCreators;
			}

			/**
			 * Composes single-argument functions from right to left. The rightmost
			 * function can take multiple arguments as it provides the signature for
			 * the resulting composite function.
			 *
			 * @param {...Function} funcs The functions to compose.
			 * @returns {Function} A function obtained by composing the argument functions
			 * from right to left. For example, compose(f, g, h) is identical to doing
			 * (...args) => f(g(h(...args))).
			 */
			function compose() {
			  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
			    funcs[_key] = arguments[_key];
			  }

			  if (funcs.length === 0) {
			    return function (arg) {
			      return arg;
			    };
			  }

			  if (funcs.length === 1) {
			    return funcs[0];
			  }

			  return funcs.reduce(function (a, b) {
			    return function () {
			      return a(b.apply(void 0, arguments));
			    };
			  });
			}

			/**
			 * Creates a store enhancer that applies middleware to the dispatch method
			 * of the Redux store. This is handy for a variety of tasks, such as expressing
			 * asynchronous actions in a concise manner, or logging every action payload.
			 *
			 * See `redux-thunk` package as an example of the Redux middleware.
			 *
			 * Because middleware is potentially asynchronous, this should be the first
			 * store enhancer in the composition chain.
			 *
			 * Note that each middleware will be given the `dispatch` and `getState` functions
			 * as named arguments.
			 *
			 * @param {...Function} middlewares The middleware chain to be applied.
			 * @returns {Function} A store enhancer applying the middleware.
			 */

			function applyMiddleware() {
			  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
			    middlewares[_key] = arguments[_key];
			  }

			  return function (createStore) {
			    return function () {
			      var store = createStore.apply(void 0, arguments);

			      var _dispatch = function dispatch() {
			        throw new Error(formatProdErrorMessage(15) );
			      };

			      var middlewareAPI = {
			        getState: store.getState,
			        dispatch: function dispatch() {
			          return _dispatch.apply(void 0, arguments);
			        }
			      };
			      var chain = middlewares.map(function (middleware) {
			        return middleware(middlewareAPI);
			      });
			      _dispatch = compose.apply(void 0, chain)(store.dispatch);
			      return _objectSpread2(_objectSpread2({}, store), {}, {
			        dispatch: _dispatch
			      });
			    };
			  };
			}

			var redux$1 = /*#__PURE__*/Object.freeze({
				__proto__: null,
				__DO_NOT_USE__ActionTypes: ActionTypes,
				applyMiddleware: applyMiddleware,
				bindActionCreators: bindActionCreators$1,
				combineReducers: combineReducers,
				compose: compose,
				createStore: createStore$1
			});

			var require$$3 = /*@__PURE__*/getAugmentedNamespace(redux$1);

			var reactIs_production_min$2 = {};

			/** @license React v16.13.1
			 * react-is.production.min.js
			 *
			 * Copyright (c) Facebook, Inc. and its affiliates.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */
			var b$2="function"===typeof Symbol&&Symbol.for,c$2=b$2?Symbol.for("react.element"):60103,d$2=b$2?Symbol.for("react.portal"):60106,e$2=b$2?Symbol.for("react.fragment"):60107,f$2=b$2?Symbol.for("react.strict_mode"):60108,g$2=b$2?Symbol.for("react.profiler"):60114,h$2=b$2?Symbol.for("react.provider"):60109,k$2=b$2?Symbol.for("react.context"):60110,l$2=b$2?Symbol.for("react.async_mode"):60111,m$2=b$2?Symbol.for("react.concurrent_mode"):60111,n$2=b$2?Symbol.for("react.forward_ref"):60112,p$2=b$2?Symbol.for("react.suspense"):60113,q$2=b$2?
			Symbol.for("react.suspense_list"):60120,r$2=b$2?Symbol.for("react.memo"):60115,t$1=b$2?Symbol.for("react.lazy"):60116,v$2=b$2?Symbol.for("react.block"):60121,w$2=b$2?Symbol.for("react.fundamental"):60117,x$2=b$2?Symbol.for("react.responder"):60118,y$2=b$2?Symbol.for("react.scope"):60119;
			function z$2(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c$2:switch(a=a.type,a){case l$2:case m$2:case e$2:case g$2:case f$2:case p$2:return a;default:switch(a=a&&a.$$typeof,a){case k$2:case n$2:case t$1:case r$2:case h$2:return a;default:return u}}case d$2:return u}}}function A$2(a){return z$2(a)===m$2}reactIs_production_min$2.AsyncMode=l$2;reactIs_production_min$2.ConcurrentMode=m$2;reactIs_production_min$2.ContextConsumer=k$2;reactIs_production_min$2.ContextProvider=h$2;reactIs_production_min$2.Element=c$2;reactIs_production_min$2.ForwardRef=n$2;reactIs_production_min$2.Fragment=e$2;reactIs_production_min$2.Lazy=t$1;reactIs_production_min$2.Memo=r$2;reactIs_production_min$2.Portal=d$2;
			reactIs_production_min$2.Profiler=g$2;reactIs_production_min$2.StrictMode=f$2;reactIs_production_min$2.Suspense=p$2;reactIs_production_min$2.isAsyncMode=function(a){return A$2(a)||z$2(a)===l$2};reactIs_production_min$2.isConcurrentMode=A$2;reactIs_production_min$2.isContextConsumer=function(a){return z$2(a)===k$2};reactIs_production_min$2.isContextProvider=function(a){return z$2(a)===h$2};reactIs_production_min$2.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c$2};reactIs_production_min$2.isForwardRef=function(a){return z$2(a)===n$2};reactIs_production_min$2.isFragment=function(a){return z$2(a)===e$2};reactIs_production_min$2.isLazy=function(a){return z$2(a)===t$1};
			reactIs_production_min$2.isMemo=function(a){return z$2(a)===r$2};reactIs_production_min$2.isPortal=function(a){return z$2(a)===d$2};reactIs_production_min$2.isProfiler=function(a){return z$2(a)===g$2};reactIs_production_min$2.isStrictMode=function(a){return z$2(a)===f$2};reactIs_production_min$2.isSuspense=function(a){return z$2(a)===p$2};
			reactIs_production_min$2.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e$2||a===m$2||a===g$2||a===f$2||a===p$2||a===q$2||"object"===typeof a&&null!==a&&(a.$$typeof===t$1||a.$$typeof===r$2||a.$$typeof===h$2||a.$$typeof===k$2||a.$$typeof===n$2||a.$$typeof===w$2||a.$$typeof===x$2||a.$$typeof===y$2||a.$$typeof===v$2)};reactIs_production_min$2.typeOf=z$2;

			/*
			object-assign
			(c) Sindre Sorhus
			@license MIT
			*/
			/* eslint-disable no-unused-vars */
			var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
			var hasOwnProperty = Object.prototype.hasOwnProperty;
			var propIsEnumerable = Object.prototype.propertyIsEnumerable;

			function toObject(val) {
				if (val === null || val === undefined) {
					throw new TypeError('Object.assign cannot be called with null or undefined');
				}

				return Object(val);
			}

			function shouldUseNative() {
				try {
					if (!Object.assign) {
						return false;
					}

					// Detect buggy property enumeration order in older V8 versions.

					// https://bugs.chromium.org/p/v8/issues/detail?id=4118
					var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
					test1[5] = 'de';
					if (Object.getOwnPropertyNames(test1)[0] === '5') {
						return false;
					}

					// https://bugs.chromium.org/p/v8/issues/detail?id=3056
					var test2 = {};
					for (var i = 0; i < 10; i++) {
						test2['_' + String.fromCharCode(i)] = i;
					}
					var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
						return test2[n];
					});
					if (order2.join('') !== '0123456789') {
						return false;
					}

					// https://bugs.chromium.org/p/v8/issues/detail?id=3056
					var test3 = {};
					'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
						test3[letter] = letter;
					});
					if (Object.keys(Object.assign({}, test3)).join('') !==
							'abcdefghijklmnopqrst') {
						return false;
					}

					return true;
				} catch (err) {
					// We don't expect any of the above to throw, but better to be safe.
					return false;
				}
			}

			shouldUseNative() ? Object.assign : function (target, source) {
				var from;
				var to = toObject(target);
				var symbols;

				for (var s = 1; s < arguments.length; s++) {
					from = Object(arguments[s]);

					for (var key in from) {
						if (hasOwnProperty.call(from, key)) {
							to[key] = from[key];
						}
					}

					if (getOwnPropertySymbols$1) {
						symbols = getOwnPropertySymbols$1(from);
						for (var i = 0; i < symbols.length; i++) {
							if (propIsEnumerable.call(from, symbols[i])) {
								to[symbols[i]] = from[symbols[i]];
							}
						}
					}
				}

				return to;
			};

			/**
			 * Copyright (c) 2013-present, Facebook, Inc.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */

			var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

			var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;

			/**
			 * Copyright (c) 2013-present, Facebook, Inc.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */

			Function.call.bind(Object.prototype.hasOwnProperty);

			/**
			 * Copyright (c) 2013-present, Facebook, Inc.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */

			var ReactPropTypesSecret = ReactPropTypesSecret_1;

			function emptyFunction() {}
			function emptyFunctionWithReset() {}
			emptyFunctionWithReset.resetWarningCache = emptyFunction;

			var factoryWithThrowingShims = function() {
			  function shim(props, propName, componentName, location, propFullName, secret) {
			    if (secret === ReactPropTypesSecret) {
			      // It is still safe when called from React.
			      return;
			    }
			    var err = new Error(
			      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
			      'Use PropTypes.checkPropTypes() to call them. ' +
			      'Read more at http://fb.me/use-check-prop-types'
			    );
			    err.name = 'Invariant Violation';
			    throw err;
			  }  shim.isRequired = shim;
			  function getShim() {
			    return shim;
			  }  // Important!
			  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
			  var ReactPropTypes = {
			    array: shim,
			    bool: shim,
			    func: shim,
			    number: shim,
			    object: shim,
			    string: shim,
			    symbol: shim,

			    any: shim,
			    arrayOf: getShim,
			    element: shim,
			    elementType: shim,
			    instanceOf: getShim,
			    node: shim,
			    objectOf: getShim,
			    oneOf: getShim,
			    oneOfType: getShim,
			    shape: getShim,
			    exact: getShim,

			    checkPropTypes: emptyFunctionWithReset,
			    resetWarningCache: emptyFunction
			  };

			  ReactPropTypes.PropTypes = ReactPropTypes;

			  return ReactPropTypes;
			};

			/**
			 * Copyright (c) 2013-present, Facebook, Inc.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */

			{
			  // By explicitly using `prop-types` you are opting into new production behavior.
			  // http://fb.me/prop-types-in-prod
			  factoryWithThrowingShims();
			}

			var ReactReduxContext = /*#__PURE__*/React$1.createContext(null);

			// Default to a dummy "batch" implementation that just runs the callback
			function defaultNoopBatch(callback) {
			  callback();
			}

			var batch = defaultNoopBatch; // Allow injecting another batching function later

			var setBatch = function setBatch(newBatch) {
			  return batch = newBatch;
			}; // Supply a getter just to skip dealing with ESM bindings

			var getBatch = function getBatch() {
			  return batch;
			};

			// well as nesting subscriptions of descendant components, so that we can ensure the
			// ancestor components re-render before descendants

			function createListenerCollection() {
			  var batch = getBatch();
			  var first = null;
			  var last = null;
			  return {
			    clear: function clear() {
			      first = null;
			      last = null;
			    },
			    notify: function notify() {
			      batch(function () {
			        var listener = first;

			        while (listener) {
			          listener.callback();
			          listener = listener.next;
			        }
			      });
			    },
			    get: function get() {
			      var listeners = [];
			      var listener = first;

			      while (listener) {
			        listeners.push(listener);
			        listener = listener.next;
			      }

			      return listeners;
			    },
			    subscribe: function subscribe(callback) {
			      var isSubscribed = true;
			      var listener = last = {
			        callback: callback,
			        next: null,
			        prev: last
			      };

			      if (listener.prev) {
			        listener.prev.next = listener;
			      } else {
			        first = listener;
			      }

			      return function unsubscribe() {
			        if (!isSubscribed || first === null) return;
			        isSubscribed = false;

			        if (listener.next) {
			          listener.next.prev = listener.prev;
			        } else {
			          last = listener.prev;
			        }

			        if (listener.prev) {
			          listener.prev.next = listener.next;
			        } else {
			          first = listener.next;
			        }
			      };
			    }
			  };
			}

			var nullListeners = {
			  notify: function notify() {},
			  get: function get() {
			    return [];
			  }
			};
			function createSubscription(store, parentSub) {
			  var unsubscribe;
			  var listeners = nullListeners;

			  function addNestedSub(listener) {
			    trySubscribe();
			    return listeners.subscribe(listener);
			  }

			  function notifyNestedSubs() {
			    listeners.notify();
			  }

			  function handleChangeWrapper() {
			    if (subscription.onStateChange) {
			      subscription.onStateChange();
			    }
			  }

			  function isSubscribed() {
			    return Boolean(unsubscribe);
			  }

			  function trySubscribe() {
			    if (!unsubscribe) {
			      unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
			      listeners = createListenerCollection();
			    }
			  }

			  function tryUnsubscribe() {
			    if (unsubscribe) {
			      unsubscribe();
			      unsubscribe = undefined;
			      listeners.clear();
			      listeners = nullListeners;
			    }
			  }

			  var subscription = {
			    addNestedSub: addNestedSub,
			    notifyNestedSubs: notifyNestedSubs,
			    handleChangeWrapper: handleChangeWrapper,
			    isSubscribed: isSubscribed,
			    trySubscribe: trySubscribe,
			    tryUnsubscribe: tryUnsubscribe,
			    getListeners: function getListeners() {
			      return listeners;
			    }
			  };
			  return subscription;
			}

			// To get around it, we can conditionally useEffect on the server (no-op) and
			// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store
			// subscription callback always has the selector from the latest render commit
			// available, otherwise a store update may happen between render and the effect,
			// which may cause missed updates; we also must ensure the store subscription
			// is created synchronously, otherwise a store update may occur before the
			// subscription is created and an inconsistent state may be observed

			var useIsomorphicLayoutEffect$1 = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? useLayoutEffect : useEffect;

			function Provider(_ref) {
			  var store = _ref.store,
			      context = _ref.context,
			      children = _ref.children;
			  var contextValue = useMemo$1(function () {
			    var subscription = createSubscription(store);
			    subscription.onStateChange = subscription.notifyNestedSubs;
			    return {
			      store: store,
			      subscription: subscription
			    };
			  }, [store]);
			  var previousState = useMemo$1(function () {
			    return store.getState();
			  }, [store]);
			  useIsomorphicLayoutEffect$1(function () {
			    var subscription = contextValue.subscription;
			    subscription.trySubscribe();

			    if (previousState !== store.getState()) {
			      subscription.notifyNestedSubs();
			    }

			    return function () {
			      subscription.tryUnsubscribe();
			      subscription.onStateChange = null;
			    };
			  }, [contextValue, previousState]);
			  var Context = context || ReactReduxContext;
			  return /*#__PURE__*/React$1.createElement(Context.Provider, {
			    value: contextValue
			  }, children);
			}

			function _extends$1() {
			  _extends$1 = Object.assign || function (target) {
			    for (var i = 1; i < arguments.length; i++) {
			      var source = arguments[i];

			      for (var key in source) {
			        if (Object.prototype.hasOwnProperty.call(source, key)) {
			          target[key] = source[key];
			        }
			      }
			    }

			    return target;
			  };

			  return _extends$1.apply(this, arguments);
			}

			function _objectWithoutPropertiesLoose(source, excluded) {
			  if (source == null) return {};
			  var target = {};
			  var sourceKeys = Object.keys(source);
			  var key, i;

			  for (i = 0; i < sourceKeys.length; i++) {
			    key = sourceKeys[i];
			    if (excluded.indexOf(key) >= 0) continue;
			    target[key] = source[key];
			  }

			  return target;
			}

			var reactIs$2 = {exports: {}};

			var reactIs_production_min$1 = {};

			/** @license React v16.13.1
			 * react-is.production.min.js
			 *
			 * Copyright (c) Facebook, Inc. and its affiliates.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */
			var b$1="function"===typeof Symbol&&Symbol.for,c$1=b$1?Symbol.for("react.element"):60103,d$1=b$1?Symbol.for("react.portal"):60106,e$1=b$1?Symbol.for("react.fragment"):60107,f$1=b$1?Symbol.for("react.strict_mode"):60108,g$1=b$1?Symbol.for("react.profiler"):60114,h$1=b$1?Symbol.for("react.provider"):60109,k$1=b$1?Symbol.for("react.context"):60110,l$1=b$1?Symbol.for("react.async_mode"):60111,m$1=b$1?Symbol.for("react.concurrent_mode"):60111,n$1=b$1?Symbol.for("react.forward_ref"):60112,p$1=b$1?Symbol.for("react.suspense"):60113,q$1=b$1?
			Symbol.for("react.suspense_list"):60120,r$1=b$1?Symbol.for("react.memo"):60115,t=b$1?Symbol.for("react.lazy"):60116,v$1=b$1?Symbol.for("react.block"):60121,w$1=b$1?Symbol.for("react.fundamental"):60117,x$1=b$1?Symbol.for("react.responder"):60118,y$1=b$1?Symbol.for("react.scope"):60119;
			function z$1(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c$1:switch(a=a.type,a){case l$1:case m$1:case e$1:case g$1:case f$1:case p$1:return a;default:switch(a=a&&a.$$typeof,a){case k$1:case n$1:case t:case r$1:case h$1:return a;default:return u}}case d$1:return u}}}function A$1(a){return z$1(a)===m$1}reactIs_production_min$1.AsyncMode=l$1;reactIs_production_min$1.ConcurrentMode=m$1;reactIs_production_min$1.ContextConsumer=k$1;reactIs_production_min$1.ContextProvider=h$1;reactIs_production_min$1.Element=c$1;reactIs_production_min$1.ForwardRef=n$1;reactIs_production_min$1.Fragment=e$1;reactIs_production_min$1.Lazy=t;reactIs_production_min$1.Memo=r$1;reactIs_production_min$1.Portal=d$1;
			reactIs_production_min$1.Profiler=g$1;reactIs_production_min$1.StrictMode=f$1;reactIs_production_min$1.Suspense=p$1;reactIs_production_min$1.isAsyncMode=function(a){return A$1(a)||z$1(a)===l$1};reactIs_production_min$1.isConcurrentMode=A$1;reactIs_production_min$1.isContextConsumer=function(a){return z$1(a)===k$1};reactIs_production_min$1.isContextProvider=function(a){return z$1(a)===h$1};reactIs_production_min$1.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c$1};reactIs_production_min$1.isForwardRef=function(a){return z$1(a)===n$1};reactIs_production_min$1.isFragment=function(a){return z$1(a)===e$1};reactIs_production_min$1.isLazy=function(a){return z$1(a)===t};
			reactIs_production_min$1.isMemo=function(a){return z$1(a)===r$1};reactIs_production_min$1.isPortal=function(a){return z$1(a)===d$1};reactIs_production_min$1.isProfiler=function(a){return z$1(a)===g$1};reactIs_production_min$1.isStrictMode=function(a){return z$1(a)===f$1};reactIs_production_min$1.isSuspense=function(a){return z$1(a)===p$1};
			reactIs_production_min$1.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e$1||a===m$1||a===g$1||a===f$1||a===p$1||a===q$1||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r$1||a.$$typeof===h$1||a.$$typeof===k$1||a.$$typeof===n$1||a.$$typeof===w$1||a.$$typeof===x$1||a.$$typeof===y$1||a.$$typeof===v$1)};reactIs_production_min$1.typeOf=z$1;

			{
			  reactIs$2.exports = reactIs_production_min$1;
			}

			var reactIs$1 = reactIs$2.exports;

			/**
			 * Copyright 2015, Yahoo! Inc.
			 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
			 */
			var REACT_STATICS = {
			  childContextTypes: true,
			  contextType: true,
			  contextTypes: true,
			  defaultProps: true,
			  displayName: true,
			  getDefaultProps: true,
			  getDerivedStateFromError: true,
			  getDerivedStateFromProps: true,
			  mixins: true,
			  propTypes: true,
			  type: true
			};
			var KNOWN_STATICS = {
			  name: true,
			  length: true,
			  prototype: true,
			  caller: true,
			  callee: true,
			  arguments: true,
			  arity: true
			};
			var FORWARD_REF_STATICS = {
			  '$$typeof': true,
			  render: true,
			  defaultProps: true,
			  displayName: true,
			  propTypes: true
			};
			var MEMO_STATICS = {
			  '$$typeof': true,
			  compare: true,
			  defaultProps: true,
			  displayName: true,
			  propTypes: true,
			  type: true
			};
			var TYPE_STATICS = {};
			TYPE_STATICS[reactIs$1.ForwardRef] = FORWARD_REF_STATICS;
			TYPE_STATICS[reactIs$1.Memo] = MEMO_STATICS;

			function getStatics(component) {
			  // React v16.11 and below
			  if (reactIs$1.isMemo(component)) {
			    return MEMO_STATICS;
			  } // React v16.12 and above


			  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
			}

			var defineProperty = Object.defineProperty;
			var getOwnPropertyNames = Object.getOwnPropertyNames;
			var getOwnPropertySymbols = Object.getOwnPropertySymbols;
			var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
			var getPrototypeOf = Object.getPrototypeOf;
			var objectPrototype = Object.prototype;
			function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
			  if (typeof sourceComponent !== 'string') {
			    // don't hoist over string (html) components
			    if (objectPrototype) {
			      var inheritedComponent = getPrototypeOf(sourceComponent);

			      if (inheritedComponent && inheritedComponent !== objectPrototype) {
			        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
			      }
			    }

			    var keys = getOwnPropertyNames(sourceComponent);

			    if (getOwnPropertySymbols) {
			      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
			    }

			    var targetStatics = getStatics(targetComponent);
			    var sourceStatics = getStatics(sourceComponent);

			    for (var i = 0; i < keys.length; ++i) {
			      var key = keys[i];

			      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
			        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

			        try {
			          // Avoid failures from read-only properties
			          defineProperty(targetComponent, key, descriptor);
			        } catch (e) {}
			      }
			    }
			  }

			  return targetComponent;
			}

			var hoistNonReactStatics_cjs = hoistNonReactStatics;

			var reactIs = {exports: {}};

			var reactIs_production_min = {};

			/** @license React v17.0.2
			 * react-is.production.min.js
			 *
			 * Copyright (c) Facebook, Inc. and its affiliates.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */
			var b=60103,c=60106,d=60107,e=60108,f=60114,g=60109,h=60110,k=60112,l=60113,m=60120,n=60115,p=60116,q=60121,r=60122,u=60117,v=60129,w=60131;
			if("function"===typeof Symbol&&Symbol.for){var x=Symbol.for;b=x("react.element");c=x("react.portal");d=x("react.fragment");e=x("react.strict_mode");f=x("react.profiler");g=x("react.provider");h=x("react.context");k=x("react.forward_ref");l=x("react.suspense");m=x("react.suspense_list");n=x("react.memo");p=x("react.lazy");q=x("react.block");r=x("react.server.block");u=x("react.fundamental");v=x("react.debug_trace_mode");w=x("react.legacy_hidden");}
			function y(a){if("object"===typeof a&&null!==a){var t=a.$$typeof;switch(t){case b:switch(a=a.type,a){case d:case f:case e:case l:case m:return a;default:switch(a=a&&a.$$typeof,a){case h:case k:case p:case n:case g:return a;default:return t}}case c:return t}}}var z=g,A=b,B=k,C=d,D=p,E=n,F=c,G=f,H=e,I=l;reactIs_production_min.ContextConsumer=h;reactIs_production_min.ContextProvider=z;reactIs_production_min.Element=A;reactIs_production_min.ForwardRef=B;reactIs_production_min.Fragment=C;reactIs_production_min.Lazy=D;reactIs_production_min.Memo=E;reactIs_production_min.Portal=F;reactIs_production_min.Profiler=G;reactIs_production_min.StrictMode=H;
			reactIs_production_min.Suspense=I;reactIs_production_min.isAsyncMode=function(){return !1};reactIs_production_min.isConcurrentMode=function(){return !1};reactIs_production_min.isContextConsumer=function(a){return y(a)===h};reactIs_production_min.isContextProvider=function(a){return y(a)===g};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===b};reactIs_production_min.isForwardRef=function(a){return y(a)===k};reactIs_production_min.isFragment=function(a){return y(a)===d};reactIs_production_min.isLazy=function(a){return y(a)===p};reactIs_production_min.isMemo=function(a){return y(a)===n};
			reactIs_production_min.isPortal=function(a){return y(a)===c};reactIs_production_min.isProfiler=function(a){return y(a)===f};reactIs_production_min.isStrictMode=function(a){return y(a)===e};reactIs_production_min.isSuspense=function(a){return y(a)===l};reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===d||a===f||a===v||a===e||a===l||a===m||a===w||"object"===typeof a&&null!==a&&(a.$$typeof===p||a.$$typeof===n||a.$$typeof===g||a.$$typeof===h||a.$$typeof===k||a.$$typeof===u||a.$$typeof===q||a[0]===r)?!0:!1};
			reactIs_production_min.typeOf=y;

			{
			  reactIs.exports = reactIs_production_min;
			}

			var _excluded$2 = ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"],
			    _excluded2 = ["reactReduxForwardedRef"];

			var EMPTY_ARRAY = [];
			var NO_SUBSCRIPTION_ARRAY = [null, null];

			function storeStateUpdatesReducer(state, action) {
			  var updateCount = state[1];
			  return [action.payload, updateCount + 1];
			}

			function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
			  useIsomorphicLayoutEffect$1(function () {
			    return effectFunc.apply(void 0, effectArgs);
			  }, dependencies);
			}

			function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {
			  // We want to capture the wrapper props and child props we used for later comparisons
			  lastWrapperProps.current = wrapperProps;
			  lastChildProps.current = actualChildProps;
			  renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update

			  if (childPropsFromStoreUpdate.current) {
			    childPropsFromStoreUpdate.current = null;
			    notifyNestedSubs();
			  }
			}

			function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {
			  // If we're not subscribed to the store, nothing to do here
			  if (!shouldHandleStateChanges) return; // Capture values for checking if and when this component unmounts

			  var didUnsubscribe = false;
			  var lastThrownError = null; // We'll run this callback every time a store subscription update propagates to this component

			  var checkForUpdates = function checkForUpdates() {
			    if (didUnsubscribe) {
			      // Don't run stale listeners.
			      // Redux doesn't guarantee unsubscriptions happen until next dispatch.
			      return;
			    }

			    var latestStoreState = store.getState();
			    var newChildProps, error;

			    try {
			      // Actually run the selector with the most recent store state and wrapper props
			      // to determine what the child props should be
			      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
			    } catch (e) {
			      error = e;
			      lastThrownError = e;
			    }

			    if (!error) {
			      lastThrownError = null;
			    } // If the child props haven't changed, nothing to do here - cascade the subscription update


			    if (newChildProps === lastChildProps.current) {
			      if (!renderIsScheduled.current) {
			        notifyNestedSubs();
			      }
			    } else {
			      // Save references to the new child props.  Note that we track the "child props from store update"
			      // as a ref instead of a useState/useReducer because we need a way to determine if that value has
			      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without
			      // forcing another re-render, which we don't want.
			      lastChildProps.current = newChildProps;
			      childPropsFromStoreUpdate.current = newChildProps;
			      renderIsScheduled.current = true; // If the child props _did_ change (or we caught an error), this wrapper component needs to re-render

			      forceComponentUpdateDispatch({
			        type: 'STORE_UPDATED',
			        payload: {
			          error: error
			        }
			      });
			    }
			  }; // Actually subscribe to the nearest connected ancestor (or store)


			  subscription.onStateChange = checkForUpdates;
			  subscription.trySubscribe(); // Pull data from the store after first render in case the store has
			  // changed since we began.

			  checkForUpdates();

			  var unsubscribeWrapper = function unsubscribeWrapper() {
			    didUnsubscribe = true;
			    subscription.tryUnsubscribe();
			    subscription.onStateChange = null;

			    if (lastThrownError) {
			      // It's possible that we caught an error due to a bad mapState function, but the
			      // parent re-rendered without this component and we're about to unmount.
			      // This shouldn't happen as long as we do top-down subscriptions correctly, but
			      // if we ever do those wrong, this throw will surface the error in our tests.
			      // In that case, throw the error from here so it doesn't get lost.
			      throw lastThrownError;
			    }
			  };

			  return unsubscribeWrapper;
			}

			var initStateUpdates = function initStateUpdates() {
			  return [null, 0];
			};

			function connectAdvanced(
			/*
			  selectorFactory is a func that is responsible for returning the selector function used to
			  compute new props from state, props, and dispatch. For example:
			     export default connectAdvanced((dispatch, options) => (state, props) => ({
			      thing: state.things[props.thingId],
			      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
			    }))(YourComponent)
			   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
			  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
			  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
			   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
			  props. Do not use connectAdvanced directly without memoizing results between calls to your
			  selector, otherwise the Connect component will re-render on every state or props change.
			*/
			selectorFactory, // options object:
			_ref) {
			  if (_ref === void 0) {
			    _ref = {};
			  }

			  var _ref2 = _ref,
			      _ref2$getDisplayName = _ref2.getDisplayName,
			      getDisplayName = _ref2$getDisplayName === void 0 ? function (name) {
			    return "ConnectAdvanced(" + name + ")";
			  } : _ref2$getDisplayName,
			      _ref2$methodName = _ref2.methodName,
			      methodName = _ref2$methodName === void 0 ? 'connectAdvanced' : _ref2$methodName,
			      _ref2$renderCountProp = _ref2.renderCountProp,
			      renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp,
			      _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges,
			      shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta,
			      _ref2$storeKey = _ref2.storeKey,
			      storeKey = _ref2$storeKey === void 0 ? 'store' : _ref2$storeKey;
			      _ref2.withRef;
			      var _ref2$forwardRef = _ref2.forwardRef,
			      forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef,
			      _ref2$context = _ref2.context,
			      context = _ref2$context === void 0 ? ReactReduxContext : _ref2$context,
			      connectOptions = _objectWithoutPropertiesLoose(_ref2, _excluded$2);

			  var Context = context;
			  return function wrapWithConnect(WrappedComponent) {

			    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
			    var displayName = getDisplayName(wrappedComponentName);

			    var selectorFactoryOptions = _extends$1({}, connectOptions, {
			      getDisplayName: getDisplayName,
			      methodName: methodName,
			      renderCountProp: renderCountProp,
			      shouldHandleStateChanges: shouldHandleStateChanges,
			      storeKey: storeKey,
			      displayName: displayName,
			      wrappedComponentName: wrappedComponentName,
			      WrappedComponent: WrappedComponent
			    });

			    var pure = connectOptions.pure;

			    function createChildSelector(store) {
			      return selectorFactory(store.dispatch, selectorFactoryOptions);
			    } // If we aren't running in "pure" mode, we don't want to memoize values.
			    // To avoid conditionally calling hooks, we fall back to a tiny wrapper
			    // that just executes the given callback immediately.


			    var usePureOnlyMemo = pure ? useMemo$1 : function (callback) {
			      return callback();
			    };

			    function ConnectFunction(props) {
			      var _useMemo = useMemo$1(function () {
			        // Distinguish between actual "data" props that were passed to the wrapper component,
			        // and values needed to control behavior (forwarded refs, alternate context instances).
			        // To maintain the wrapperProps object reference, memoize this destructuring.
			        var reactReduxForwardedRef = props.reactReduxForwardedRef,
			            wrapperProps = _objectWithoutPropertiesLoose(props, _excluded2);

			        return [props.context, reactReduxForwardedRef, wrapperProps];
			      }, [props]),
			          propsContext = _useMemo[0],
			          reactReduxForwardedRef = _useMemo[1],
			          wrapperProps = _useMemo[2];

			      var ContextToUse = useMemo$1(function () {
			        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.
			        // Memoize the check that determines which context instance we should use.
			        return propsContext && propsContext.Consumer && reactIs.exports.isContextConsumer( /*#__PURE__*/React$1.createElement(propsContext.Consumer, null)) ? propsContext : Context;
			      }, [propsContext, Context]); // Retrieve the store and ancestor subscription via context, if available

			      var contextValue = useContext(ContextToUse); // The store _must_ exist as either a prop or in context.
			      // We'll check to see if it _looks_ like a Redux store first.
			      // This allows us to pass through a `store` prop that is just a plain value.

			      var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
			      Boolean(contextValue) && Boolean(contextValue.store);


			      var store = didStoreComeFromProps ? props.store : contextValue.store;
			      var childPropsSelector = useMemo$1(function () {
			        // The child props selector needs the store reference as an input.
			        // Re-create this selector whenever the store changes.
			        return createChildSelector(store);
			      }, [store]);

			      var _useMemo2 = useMemo$1(function () {
			        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription's source should match where store came from: props vs. context. A component
			        // connected to the store via props shouldn't use subscription from context, or vice versa.

			        // This Subscription's source should match where store came from: props vs. context. A component
			        // connected to the store via props shouldn't use subscription from context, or vice versa.
			        var subscription = createSubscription(store, didStoreComeFromProps ? null : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in
			        // the middle of the notification loop, where `subscription` will then be null. This can
			        // probably be avoided if Subscription's listeners logic is changed to not call listeners
			        // that have been unsubscribed in the  middle of the notification loop.

			        // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in
			        // the middle of the notification loop, where `subscription` will then be null. This can
			        // probably be avoided if Subscription's listeners logic is changed to not call listeners
			        // that have been unsubscribed in the  middle of the notification loop.
			        var notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);
			        return [subscription, notifyNestedSubs];
			      }, [store, didStoreComeFromProps, contextValue]),
			          subscription = _useMemo2[0],
			          notifyNestedSubs = _useMemo2[1]; // Determine what {store, subscription} value should be put into nested context, if necessary,
			      // and memoize that value to avoid unnecessary context updates.


			      var overriddenContextValue = useMemo$1(function () {
			        if (didStoreComeFromProps) {
			          // This component is directly subscribed to a store from props.
			          // We don't want descendants reading from this store - pass down whatever
			          // the existing context value is from the nearest connected ancestor.
			          return contextValue;
			        } // Otherwise, put this component's subscription instance into context, so that
			        // connected descendants won't update until after this component is done


			        return _extends$1({}, contextValue, {
			          subscription: subscription
			        });
			      }, [didStoreComeFromProps, contextValue, subscription]); // We need to force this wrapper component to re-render whenever a Redux store update
			      // causes a change to the calculated child component props (or we caught an error in mapState)

			      var _useReducer = useReducer(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates),
			          _useReducer$ = _useReducer[0],
			          previousStateUpdateResult = _useReducer$[0],
			          forceComponentUpdateDispatch = _useReducer[1]; // Propagate any mapState/mapDispatch errors upwards


			      if (previousStateUpdateResult && previousStateUpdateResult.error) {
			        throw previousStateUpdateResult.error;
			      } // Set up refs to coordinate values between the subscription effect and the render logic


			      var lastChildProps = useRef();
			      var lastWrapperProps = useRef(wrapperProps);
			      var childPropsFromStoreUpdate = useRef();
			      var renderIsScheduled = useRef(false);
			      var actualChildProps = usePureOnlyMemo(function () {
			        // Tricky logic here:
			        // - This render may have been triggered by a Redux store update that produced new child props
			        // - However, we may have gotten new wrapper props after that
			        // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.
			        // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.
			        // So, we'll use the child props from store update only if the wrapper props are the same as last time.
			        if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
			          return childPropsFromStoreUpdate.current;
			        } // TODO We're reading the store directly in render() here. Bad idea?
			        // This will likely cause Bad Things (TM) to happen in Concurrent Mode.
			        // Note that we do this because on renders _not_ caused by store updates, we need the latest store state
			        // to determine what the child props should be.


			        return childPropsSelector(store.getState(), wrapperProps);
			      }, [store, previousStateUpdateResult, wrapperProps]); // We need this to execute synchronously every time we re-render. However, React warns
			      // about useLayoutEffect in SSR, so we try to detect environment and fall back to
			      // just useEffect instead to avoid the warning, since neither will run anyway.

			      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]); // Our re-subscribe logic only runs when the store/subscription setup changes

			      useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]); // Now that all that's done, we can finally try to actually render the child component.
			      // We memoize the elements for the rendered child component as an optimization.

			      var renderedWrappedComponent = useMemo$1(function () {
			        return /*#__PURE__*/React$1.createElement(WrappedComponent, _extends$1({}, actualChildProps, {
			          ref: reactReduxForwardedRef
			        }));
			      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]); // If React sees the exact same element reference as last time, it bails out of re-rendering
			      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

			      var renderedChild = useMemo$1(function () {
			        if (shouldHandleStateChanges) {
			          // If this component is subscribed to store updates, we need to pass its own
			          // subscription instance down to our descendants. That means rendering the same
			          // Context instance, and putting a different value into the context.
			          return /*#__PURE__*/React$1.createElement(ContextToUse.Provider, {
			            value: overriddenContextValue
			          }, renderedWrappedComponent);
			        }

			        return renderedWrappedComponent;
			      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
			      return renderedChild;
			    } // If we're in "pure" mode, ensure our wrapper component only re-renders when incoming props have changed.


			    var Connect = pure ? React$1.memo(ConnectFunction) : ConnectFunction;
			    Connect.WrappedComponent = WrappedComponent;
			    Connect.displayName = ConnectFunction.displayName = displayName;

			    if (forwardRef) {
			      var forwarded = React$1.forwardRef(function forwardConnectRef(props, ref) {
			        return /*#__PURE__*/React$1.createElement(Connect, _extends$1({}, props, {
			          reactReduxForwardedRef: ref
			        }));
			      });
			      forwarded.displayName = displayName;
			      forwarded.WrappedComponent = WrappedComponent;
			      return hoistNonReactStatics_cjs(forwarded, WrappedComponent);
			    }

			    return hoistNonReactStatics_cjs(Connect, WrappedComponent);
			  };
			}

			function is(x, y) {
			  if (x === y) {
			    return x !== 0 || y !== 0 || 1 / x === 1 / y;
			  } else {
			    return x !== x && y !== y;
			  }
			}

			function shallowEqual(objA, objB) {
			  if (is(objA, objB)) return true;

			  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
			    return false;
			  }

			  var keysA = Object.keys(objA);
			  var keysB = Object.keys(objB);
			  if (keysA.length !== keysB.length) return false;

			  for (var i = 0; i < keysA.length; i++) {
			    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
			      return false;
			    }
			  }

			  return true;
			}

			function bindActionCreators(actionCreators, dispatch) {
			  var boundActionCreators = {};

			  var _loop = function _loop(key) {
			    var actionCreator = actionCreators[key];

			    if (typeof actionCreator === 'function') {
			      boundActionCreators[key] = function () {
			        return dispatch(actionCreator.apply(void 0, arguments));
			      };
			    }
			  };

			  for (var key in actionCreators) {
			    _loop(key);
			  }

			  return boundActionCreators;
			}

			function wrapMapToPropsConstant(getConstant) {
			  return function initConstantSelector(dispatch, options) {
			    var constant = getConstant(dispatch, options);

			    function constantSelector() {
			      return constant;
			    }

			    constantSelector.dependsOnOwnProps = false;
			    return constantSelector;
			  };
			} // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
			// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
			// whether mapToProps needs to be invoked when props have changed.
			//
			// A length of one signals that mapToProps does not depend on props from the parent component.
			// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
			// therefore not reporting its length accurately..

			function getDependsOnOwnProps(mapToProps) {
			  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
			} // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
			// this function wraps mapToProps in a proxy function which does several things:
			//
			//  * Detects whether the mapToProps function being called depends on props, which
			//    is used by selectorFactory to decide if it should reinvoke on props changes.
			//
			//  * On first call, handles mapToProps if returns another function, and treats that
			//    new function as the true mapToProps for subsequent calls.
			//
			//  * On first call, verifies the first result is a plain object, in order to warn
			//    the developer that their mapToProps function is not returning a valid result.
			//

			function wrapMapToPropsFunc(mapToProps, methodName) {
			  return function initProxySelector(dispatch, _ref) {
			    _ref.displayName;

			    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
			      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
			    }; // allow detectFactoryAndVerify to get ownProps


			    proxy.dependsOnOwnProps = true;

			    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
			      proxy.mapToProps = mapToProps;
			      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
			      var props = proxy(stateOrDispatch, ownProps);

			      if (typeof props === 'function') {
			        proxy.mapToProps = props;
			        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
			        props = proxy(stateOrDispatch, ownProps);
			      }
			      return props;
			    };

			    return proxy;
			  };
			}

			function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
			  return typeof mapDispatchToProps === 'function' ? wrapMapToPropsFunc(mapDispatchToProps) : undefined;
			}
			function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
			  return !mapDispatchToProps ? wrapMapToPropsConstant(function (dispatch) {
			    return {
			      dispatch: dispatch
			    };
			  }) : undefined;
			}
			function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
			  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? wrapMapToPropsConstant(function (dispatch) {
			    return bindActionCreators(mapDispatchToProps, dispatch);
			  }) : undefined;
			}
			var defaultMapDispatchToPropsFactories = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];

			function whenMapStateToPropsIsFunction(mapStateToProps) {
			  return typeof mapStateToProps === 'function' ? wrapMapToPropsFunc(mapStateToProps) : undefined;
			}
			function whenMapStateToPropsIsMissing(mapStateToProps) {
			  return !mapStateToProps ? wrapMapToPropsConstant(function () {
			    return {};
			  }) : undefined;
			}
			var defaultMapStateToPropsFactories = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];

			function defaultMergeProps(stateProps, dispatchProps, ownProps) {
			  return _extends$1({}, ownProps, stateProps, dispatchProps);
			}
			function wrapMergePropsFunc(mergeProps) {
			  return function initMergePropsProxy(dispatch, _ref) {
			    _ref.displayName;
			        var pure = _ref.pure,
			        areMergedPropsEqual = _ref.areMergedPropsEqual;
			    var hasRunOnce = false;
			    var mergedProps;
			    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
			      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

			      if (hasRunOnce) {
			        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
			      } else {
			        hasRunOnce = true;
			        mergedProps = nextMergedProps;
			      }

			      return mergedProps;
			    };
			  };
			}
			function whenMergePropsIsFunction(mergeProps) {
			  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
			}
			function whenMergePropsIsOmitted(mergeProps) {
			  return !mergeProps ? function () {
			    return defaultMergeProps;
			  } : undefined;
			}
			var defaultMergePropsFactories = [whenMergePropsIsFunction, whenMergePropsIsOmitted];

			var _excluded$1 = ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"];
			function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
			  return function impureFinalPropsSelector(state, ownProps) {
			    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
			  };
			}
			function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
			  var areStatesEqual = _ref.areStatesEqual,
			      areOwnPropsEqual = _ref.areOwnPropsEqual,
			      areStatePropsEqual = _ref.areStatePropsEqual;
			  var hasRunAtLeastOnce = false;
			  var state;
			  var ownProps;
			  var stateProps;
			  var dispatchProps;
			  var mergedProps;

			  function handleFirstCall(firstState, firstOwnProps) {
			    state = firstState;
			    ownProps = firstOwnProps;
			    stateProps = mapStateToProps(state, ownProps);
			    dispatchProps = mapDispatchToProps(dispatch, ownProps);
			    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
			    hasRunAtLeastOnce = true;
			    return mergedProps;
			  }

			  function handleNewPropsAndNewState() {
			    stateProps = mapStateToProps(state, ownProps);
			    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
			    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
			    return mergedProps;
			  }

			  function handleNewProps() {
			    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
			    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
			    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
			    return mergedProps;
			  }

			  function handleNewState() {
			    var nextStateProps = mapStateToProps(state, ownProps);
			    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
			    stateProps = nextStateProps;
			    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
			    return mergedProps;
			  }

			  function handleSubsequentCalls(nextState, nextOwnProps) {
			    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
			    var stateChanged = !areStatesEqual(nextState, state);
			    state = nextState;
			    ownProps = nextOwnProps;
			    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
			    if (propsChanged) return handleNewProps();
			    if (stateChanged) return handleNewState();
			    return mergedProps;
			  }

			  return function pureFinalPropsSelector(nextState, nextOwnProps) {
			    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
			  };
			} // TODO: Add more comments
			// If pure is true, the selector returned by selectorFactory will memoize its results,
			// allowing connectAdvanced's shouldComponentUpdate to return false if final
			// props have not changed. If false, the selector will always return a new
			// object and shouldComponentUpdate will always return true.

			function finalPropsSelectorFactory(dispatch, _ref2) {
			  var initMapStateToProps = _ref2.initMapStateToProps,
			      initMapDispatchToProps = _ref2.initMapDispatchToProps,
			      initMergeProps = _ref2.initMergeProps,
			      options = _objectWithoutPropertiesLoose(_ref2, _excluded$1);

			  var mapStateToProps = initMapStateToProps(dispatch, options);
			  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
			  var mergeProps = initMergeProps(dispatch, options);

			  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
			  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
			}

			var _excluded = ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"];
			/*
			  connect is a facade over connectAdvanced. It turns its args into a compatible
			  selectorFactory, which has the signature:

			    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
			  
			  connect passes its args to connectAdvanced as options, which will in turn pass them to
			  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

			  selectorFactory returns a final props selector from its mapStateToProps,
			  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
			  mergePropsFactories, and pure args.

			  The resulting final props selector is called by the Connect component instance whenever
			  it receives new props or store state.
			 */

			function match(arg, factories, name) {
			  for (var i = factories.length - 1; i >= 0; i--) {
			    var result = factories[i](arg);
			    if (result) return result;
			  }

			  return function (dispatch, options) {
			    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
			  };
			}

			function strictEqual(a, b) {
			  return a === b;
			} // createConnect with default args builds the 'official' connect behavior. Calling it with
			// different options opens up some testing and extensibility scenarios


			function createConnect(_temp) {
			  var _ref = _temp === void 0 ? {} : _temp,
			      _ref$connectHOC = _ref.connectHOC,
			      connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC,
			      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
			      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? defaultMapStateToPropsFactories : _ref$mapStateToPropsF,
			      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
			      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? defaultMapDispatchToPropsFactories : _ref$mapDispatchToPro,
			      _ref$mergePropsFactor = _ref.mergePropsFactories,
			      mergePropsFactories = _ref$mergePropsFactor === void 0 ? defaultMergePropsFactories : _ref$mergePropsFactor,
			      _ref$selectorFactory = _ref.selectorFactory,
			      selectorFactory = _ref$selectorFactory === void 0 ? finalPropsSelectorFactory : _ref$selectorFactory;

			  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
			    if (_ref2 === void 0) {
			      _ref2 = {};
			    }

			    var _ref3 = _ref2,
			        _ref3$pure = _ref3.pure,
			        pure = _ref3$pure === void 0 ? true : _ref3$pure,
			        _ref3$areStatesEqual = _ref3.areStatesEqual,
			        areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual,
			        _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,
			        areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual : _ref3$areOwnPropsEqua,
			        _ref3$areStatePropsEq = _ref3.areStatePropsEqual,
			        areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual : _ref3$areStatePropsEq,
			        _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,
			        areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual : _ref3$areMergedPropsE,
			        extraOptions = _objectWithoutPropertiesLoose(_ref3, _excluded);

			    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
			    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
			    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
			    return connectHOC(selectorFactory, _extends$1({
			      // used in error messages
			      methodName: 'connect',
			      // used to compute Connect's displayName from the wrapped component's displayName.
			      getDisplayName: function getDisplayName(name) {
			        return "Connect(" + name + ")";
			      },
			      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
			      shouldHandleStateChanges: Boolean(mapStateToProps),
			      // passed through to selectorFactory
			      initMapStateToProps: initMapStateToProps,
			      initMapDispatchToProps: initMapDispatchToProps,
			      initMergeProps: initMergeProps,
			      pure: pure,
			      areStatesEqual: areStatesEqual,
			      areOwnPropsEqual: areOwnPropsEqual,
			      areStatePropsEqual: areStatePropsEqual,
			      areMergedPropsEqual: areMergedPropsEqual
			    }, extraOptions));
			  };
			}
			var connect = /*#__PURE__*/createConnect();

			/**
			 * A hook to access the value of the `ReactReduxContext`. This is a low-level
			 * hook that you should usually not need to call directly.
			 *
			 * @returns {any} the value of the `ReactReduxContext`
			 *
			 * @example
			 *
			 * import React from 'react'
			 * import { useReduxContext } from 'react-redux'
			 *
			 * export const CounterComponent = ({ value }) => {
			 *   const { store } = useReduxContext()
			 *   return <div>{store.getState()}</div>
			 * }
			 */

			function useReduxContext() {
			  var contextValue = useContext(ReactReduxContext);

			  return contextValue;
			}

			/**
			 * Hook factory, which creates a `useStore` hook bound to a given context.
			 *
			 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
			 * @returns {Function} A `useStore` hook bound to the specified context.
			 */

			function createStoreHook(context) {
			  if (context === void 0) {
			    context = ReactReduxContext;
			  }

			  var useReduxContext$1 = context === ReactReduxContext ? useReduxContext : function () {
			    return useContext(context);
			  };
			  return function useStore() {
			    var _useReduxContext = useReduxContext$1(),
			        store = _useReduxContext.store;

			    return store;
			  };
			}
			/**
			 * A hook to access the redux store.
			 *
			 * @returns {any} the redux store
			 *
			 * @example
			 *
			 * import React from 'react'
			 * import { useStore } from 'react-redux'
			 *
			 * export const ExampleComponent = () => {
			 *   const store = useStore()
			 *   return <div>{store.getState()}</div>
			 * }
			 */

			var useStore = /*#__PURE__*/createStoreHook();

			/**
			 * Hook factory, which creates a `useDispatch` hook bound to a given context.
			 *
			 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
			 * @returns {Function} A `useDispatch` hook bound to the specified context.
			 */

			function createDispatchHook(context) {
			  if (context === void 0) {
			    context = ReactReduxContext;
			  }

			  var useStore$1 = context === ReactReduxContext ? useStore : createStoreHook(context);
			  return function useDispatch() {
			    var store = useStore$1();
			    return store.dispatch;
			  };
			}
			/**
			 * A hook to access the redux `dispatch` function.
			 *
			 * @returns {any|function} redux store's `dispatch` function
			 *
			 * @example
			 *
			 * import React, { useCallback } from 'react'
			 * import { useDispatch } from 'react-redux'
			 *
			 * export const CounterComponent = ({ value }) => {
			 *   const dispatch = useDispatch()
			 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
			 *   return (
			 *     <div>
			 *       <span>{value}</span>
			 *       <button onClick={increaseCounter}>Increase counter</button>
			 *     </div>
			 *   )
			 * }
			 */

			var useDispatch = /*#__PURE__*/createDispatchHook();

			var refEquality = function refEquality(a, b) {
			  return a === b;
			};

			function useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {
			  var _useReducer = useReducer(function (s) {
			    return s + 1;
			  }, 0),
			      forceRender = _useReducer[1];

			  var subscription = useMemo$1(function () {
			    return createSubscription(store, contextSub);
			  }, [store, contextSub]);
			  var latestSubscriptionCallbackError = useRef();
			  var latestSelector = useRef();
			  var latestStoreState = useRef();
			  var latestSelectedState = useRef();
			  var storeState = store.getState();
			  var selectedState;

			  try {
			    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {
			      var newSelectedState = selector(storeState); // ensure latest selected state is reused so that a custom equality function can result in identical references

			      if (latestSelectedState.current === undefined || !equalityFn(newSelectedState, latestSelectedState.current)) {
			        selectedState = newSelectedState;
			      } else {
			        selectedState = latestSelectedState.current;
			      }
			    } else {
			      selectedState = latestSelectedState.current;
			    }
			  } catch (err) {
			    if (latestSubscriptionCallbackError.current) {
			      err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
			    }

			    throw err;
			  }

			  useIsomorphicLayoutEffect$1(function () {
			    latestSelector.current = selector;
			    latestStoreState.current = storeState;
			    latestSelectedState.current = selectedState;
			    latestSubscriptionCallbackError.current = undefined;
			  });
			  useIsomorphicLayoutEffect$1(function () {
			    function checkForUpdates() {
			      try {
			        var newStoreState = store.getState(); // Avoid calling selector multiple times if the store's state has not changed

			        if (newStoreState === latestStoreState.current) {
			          return;
			        }

			        var _newSelectedState = latestSelector.current(newStoreState);

			        if (equalityFn(_newSelectedState, latestSelectedState.current)) {
			          return;
			        }

			        latestSelectedState.current = _newSelectedState;
			        latestStoreState.current = newStoreState;
			      } catch (err) {
			        // we ignore all errors here, since when the component
			        // is re-rendered, the selectors are called again, and
			        // will throw again, if neither props nor store state
			        // changed
			        latestSubscriptionCallbackError.current = err;
			      }

			      forceRender();
			    }

			    subscription.onStateChange = checkForUpdates;
			    subscription.trySubscribe();
			    checkForUpdates();
			    return function () {
			      return subscription.tryUnsubscribe();
			    };
			  }, [store, subscription]);
			  return selectedState;
			}
			/**
			 * Hook factory, which creates a `useSelector` hook bound to a given context.
			 *
			 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
			 * @returns {Function} A `useSelector` hook bound to the specified context.
			 */


			function createSelectorHook(context) {
			  if (context === void 0) {
			    context = ReactReduxContext;
			  }

			  var useReduxContext$1 = context === ReactReduxContext ? useReduxContext : function () {
			    return useContext(context);
			  };
			  return function useSelector(selector, equalityFn) {
			    if (equalityFn === void 0) {
			      equalityFn = refEquality;
			    }

			    var _useReduxContext = useReduxContext$1(),
			        store = _useReduxContext.store,
			        contextSub = _useReduxContext.subscription;

			    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);
			    useDebugValue(selectedState);
			    return selectedState;
			  };
			}
			/**
			 * A hook to access the redux store's state. This hook takes a selector function
			 * as an argument. The selector is called with the store state.
			 *
			 * This hook takes an optional equality comparison function as the second parameter
			 * that allows you to customize the way the selected state is compared to determine
			 * whether the component needs to be re-rendered.
			 *
			 * @param {Function} selector the selector function
			 * @param {Function=} equalityFn the function that will be used to determine equality
			 *
			 * @returns {any} the selected state
			 *
			 * @example
			 *
			 * import React from 'react'
			 * import { useSelector } from 'react-redux'
			 *
			 * export const CounterComponent = () => {
			 *   const counter = useSelector(state => state.counter)
			 *   return <div>{counter}</div>
			 * }
			 */

			var useSelector = /*#__PURE__*/createSelectorHook();

			// with standard React renderers (ReactDOM, React Native)

			setBatch(unstable_batchedUpdates);

			var es = /*#__PURE__*/Object.freeze({
				__proto__: null,
				batch: unstable_batchedUpdates,
				Provider: Provider,
				connectAdvanced: connectAdvanced,
				ReactReduxContext: ReactReduxContext,
				connect: connect,
				useDispatch: useDispatch,
				createDispatchHook: createDispatchHook,
				useSelector: useSelector,
				createSelectorHook: createSelectorHook,
				useStore: useStore,
				createStoreHook: createStoreHook,
				shallowEqual: shallowEqual
			});

			var require$$4 = /*@__PURE__*/getAugmentedNamespace(es);

			function areInputsEqual$1(newInputs, lastInputs) {
			  if (newInputs.length !== lastInputs.length) {
			    return false;
			  }

			  for (var i = 0; i < newInputs.length; i++) {
			    if (newInputs[i] !== lastInputs[i]) {
			      return false;
			    }
			  }

			  return true;
			}

			function useMemoOne$1(getResult, inputs) {
			  var initial = useState(function () {
			    return {
			      inputs: inputs,
			      result: getResult()
			    };
			  })[0];
			  var isFirstRun = useRef(true);
			  var committed = useRef(initial);
			  var useCache = isFirstRun.current || Boolean(inputs && committed.current.inputs && areInputsEqual$1(inputs, committed.current.inputs));
			  var cache = useCache ? committed.current : {
			    inputs: inputs,
			    result: getResult()
			  };
			  useEffect(function () {
			    isFirstRun.current = false;
			    committed.current = cache;
			  }, [cache]);
			  return cache.result;
			}
			function useCallbackOne(callback, inputs) {
			  return useMemoOne$1(function () {
			    return callback;
			  }, inputs);
			}
			var useMemo = useMemoOne$1;
			var useCallback = useCallbackOne;

			var useMemoOne_esm = /*#__PURE__*/Object.freeze({
				__proto__: null,
				useCallback: useCallback,
				useCallbackOne: useCallbackOne,
				useMemo: useMemo,
				useMemoOne: useMemoOne$1
			});

			var require$$5 = /*@__PURE__*/getAugmentedNamespace(useMemoOne_esm);

			var isProduction = "production" === 'production';
			var prefix$2 = 'Invariant failed';
			function invariant$1(condition, message) {
			    if (condition) {
			        return;
			    }
			    if (isProduction) {
			        throw new Error(prefix$2);
			    }
			    throw new Error(prefix$2 + ": " + (message || ''));
			}

			var getRect = function getRect(_ref) {
			  var top = _ref.top,
			      right = _ref.right,
			      bottom = _ref.bottom,
			      left = _ref.left;
			  var width = right - left;
			  var height = bottom - top;
			  var rect = {
			    top: top,
			    right: right,
			    bottom: bottom,
			    left: left,
			    width: width,
			    height: height,
			    x: left,
			    y: top,
			    center: {
			      x: (right + left) / 2,
			      y: (bottom + top) / 2
			    }
			  };
			  return rect;
			};
			var expand = function expand(target, expandBy) {
			  return {
			    top: target.top - expandBy.top,
			    left: target.left - expandBy.left,
			    bottom: target.bottom + expandBy.bottom,
			    right: target.right + expandBy.right
			  };
			};
			var shrink = function shrink(target, shrinkBy) {
			  return {
			    top: target.top + shrinkBy.top,
			    left: target.left + shrinkBy.left,
			    bottom: target.bottom - shrinkBy.bottom,
			    right: target.right - shrinkBy.right
			  };
			};

			var shift = function shift(target, shiftBy) {
			  return {
			    top: target.top + shiftBy.y,
			    left: target.left + shiftBy.x,
			    bottom: target.bottom + shiftBy.y,
			    right: target.right + shiftBy.x
			  };
			};

			var noSpacing$1 = {
			  top: 0,
			  right: 0,
			  bottom: 0,
			  left: 0
			};
			var createBox = function createBox(_ref2) {
			  var borderBox = _ref2.borderBox,
			      _ref2$margin = _ref2.margin,
			      margin = _ref2$margin === void 0 ? noSpacing$1 : _ref2$margin,
			      _ref2$border = _ref2.border,
			      border = _ref2$border === void 0 ? noSpacing$1 : _ref2$border,
			      _ref2$padding = _ref2.padding,
			      padding = _ref2$padding === void 0 ? noSpacing$1 : _ref2$padding;
			  var marginBox = getRect(expand(borderBox, margin));
			  var paddingBox = getRect(shrink(borderBox, border));
			  var contentBox = getRect(shrink(paddingBox, padding));
			  return {
			    marginBox: marginBox,
			    borderBox: getRect(borderBox),
			    paddingBox: paddingBox,
			    contentBox: contentBox,
			    margin: margin,
			    border: border,
			    padding: padding
			  };
			};

			var parse = function parse(raw) {
			  var value = raw.slice(0, -2);
			  var suffix = raw.slice(-2);

			  if (suffix !== 'px') {
			    return 0;
			  }

			  var result = Number(value);
			  !!isNaN(result) ? invariant$1(false) : void 0;
			  return result;
			};

			var getWindowScroll$1 = function getWindowScroll() {
			  return {
			    x: window.pageXOffset,
			    y: window.pageYOffset
			  };
			};

			var offset = function offset(original, change) {
			  var borderBox = original.borderBox,
			      border = original.border,
			      margin = original.margin,
			      padding = original.padding;
			  var shifted = shift(borderBox, change);
			  return createBox({
			    borderBox: shifted,
			    border: border,
			    margin: margin,
			    padding: padding
			  });
			};
			var withScroll = function withScroll(original, scroll) {
			  if (scroll === void 0) {
			    scroll = getWindowScroll$1();
			  }

			  return offset(original, scroll);
			};
			var calculateBox = function calculateBox(borderBox, styles) {
			  var margin = {
			    top: parse(styles.marginTop),
			    right: parse(styles.marginRight),
			    bottom: parse(styles.marginBottom),
			    left: parse(styles.marginLeft)
			  };
			  var padding = {
			    top: parse(styles.paddingTop),
			    right: parse(styles.paddingRight),
			    bottom: parse(styles.paddingBottom),
			    left: parse(styles.paddingLeft)
			  };
			  var border = {
			    top: parse(styles.borderTopWidth),
			    right: parse(styles.borderRightWidth),
			    bottom: parse(styles.borderBottomWidth),
			    left: parse(styles.borderLeftWidth)
			  };
			  return createBox({
			    borderBox: borderBox,
			    margin: margin,
			    padding: padding,
			    border: border
			  });
			};
			var getBox = function getBox(el) {
			  var borderBox = el.getBoundingClientRect();
			  var styles = window.getComputedStyle(el);
			  return calculateBox(borderBox, styles);
			};

			var cssBoxModel_esm = /*#__PURE__*/Object.freeze({
				__proto__: null,
				calculateBox: calculateBox,
				createBox: createBox,
				expand: expand,
				getBox: getBox,
				getRect: getRect,
				offset: offset,
				shrink: shrink,
				withScroll: withScroll
			});

			var require$$6 = /*@__PURE__*/getAugmentedNamespace(cssBoxModel_esm);

			var safeIsNaN = Number.isNaN ||
			    function ponyfill(value) {
			        return typeof value === 'number' && value !== value;
			    };
			function isEqual$2(first, second) {
			    if (first === second) {
			        return true;
			    }
			    if (safeIsNaN(first) && safeIsNaN(second)) {
			        return true;
			    }
			    return false;
			}
			function areInputsEqual(newInputs, lastInputs) {
			    if (newInputs.length !== lastInputs.length) {
			        return false;
			    }
			    for (var i = 0; i < newInputs.length; i++) {
			        if (!isEqual$2(newInputs[i], lastInputs[i])) {
			            return false;
			        }
			    }
			    return true;
			}

			function memoizeOne$1(resultFn, isEqual) {
			    if (isEqual === void 0) { isEqual = areInputsEqual; }
			    var lastThis;
			    var lastArgs = [];
			    var lastResult;
			    var calledOnce = false;
			    function memoized() {
			        var newArgs = [];
			        for (var _i = 0; _i < arguments.length; _i++) {
			            newArgs[_i] = arguments[_i];
			        }
			        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
			            return lastResult;
			        }
			        lastResult = resultFn.apply(this, newArgs);
			        calledOnce = true;
			        lastThis = this;
			        lastArgs = newArgs;
			        return lastResult;
			    }
			    return memoized;
			}

			var memoizeOne_esm = /*#__PURE__*/Object.freeze({
				__proto__: null,
				'default': memoizeOne$1
			});

			var require$$7 = /*@__PURE__*/getAugmentedNamespace(memoizeOne_esm);

			var rafSchd$1 = function rafSchd(fn) {
			  var lastArgs = [];
			  var frameId = null;

			  var wrapperFn = function wrapperFn() {
			    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
			      args[_key] = arguments[_key];
			    }

			    lastArgs = args;

			    if (frameId) {
			      return;
			    }

			    frameId = requestAnimationFrame(function () {
			      frameId = null;
			      fn.apply(void 0, lastArgs);
			    });
			  };

			  wrapperFn.cancel = function () {
			    if (!frameId) {
			      return;
			    }

			    cancelAnimationFrame(frameId);
			    frameId = null;
			  };

			  return wrapperFn;
			};

			var rafSchd_esm = /*#__PURE__*/Object.freeze({
				__proto__: null,
				'default': rafSchd$1
			});

			var require$$8 = /*@__PURE__*/getAugmentedNamespace(rafSchd_esm);

			Object.defineProperty(reactBeautifulDnd_cjs, '__esModule', { value: true });

			function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

			var React = React$1;
			var React__default = _interopDefault(React);
			var _inheritsLoose = _interopDefault(inheritsLoose.exports);
			var _extends = _interopDefault(_extends$2.exports);
			var redux = require$$3;
			var reactRedux = require$$4;
			var useMemoOne = require$$5;
			var cssBoxModel = require$$6;
			var memoizeOne = _interopDefault(require$$7);
			var rafSchd = _interopDefault(require$$8);
			var ReactDOM = _interopDefault(require$$9);
			function log(type, message) {

			  {
			    return;
			  }
			}
			log.bind(null, 'warn');
			log.bind(null, 'error');

			function noop() {}

			function getOptions(shared, fromBinding) {
			  return _extends({}, shared, {}, fromBinding);
			}

			function bindEvents(el, bindings, sharedOptions) {
			  var unbindings = bindings.map(function (binding) {
			    var options = getOptions(sharedOptions, binding.options);
			    el.addEventListener(binding.eventName, binding.fn, options);
			    return function unbind() {
			      el.removeEventListener(binding.eventName, binding.fn, options);
			    };
			  });
			  return function unbindAll() {
			    unbindings.forEach(function (unbind) {
			      unbind();
			    });
			  };
			}
			var prefix = 'Invariant failed';
			function RbdInvariant(message) {
			  this.message = message;
			}

			RbdInvariant.prototype.toString = function toString() {
			  return this.message;
			};

			function invariant(condition, message) {
			  if (condition) {
			    return;
			  }

			  {
			    throw new RbdInvariant(prefix);
			  }
			}

			var ErrorBoundary = function (_React$Component) {
			  _inheritsLoose(ErrorBoundary, _React$Component);

			  function ErrorBoundary() {
			    var _this;

			    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
			      args[_key] = arguments[_key];
			    }

			    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
			    _this.callbacks = null;
			    _this.unbind = noop;

			    _this.onWindowError = function (event) {
			      var callbacks = _this.getCallbacks();

			      if (callbacks.isDragging()) {
			        callbacks.tryAbort();
			      }

			      var err = event.error;

			      if (err instanceof RbdInvariant) {
			        event.preventDefault();
			      }
			    };

			    _this.getCallbacks = function () {
			      if (!_this.callbacks) {
			        throw new Error('Unable to find AppCallbacks in <ErrorBoundary/>');
			      }

			      return _this.callbacks;
			    };

			    _this.setCallbacks = function (callbacks) {
			      _this.callbacks = callbacks;
			    };

			    return _this;
			  }

			  var _proto = ErrorBoundary.prototype;

			  _proto.componentDidMount = function componentDidMount() {
			    this.unbind = bindEvents(window, [{
			      eventName: 'error',
			      fn: this.onWindowError
			    }]);
			  };

			  _proto.componentDidCatch = function componentDidCatch(err) {
			    if (err instanceof RbdInvariant) {

			      this.setState({});
			      return;
			    }

			    throw err;
			  };

			  _proto.componentWillUnmount = function componentWillUnmount() {
			    this.unbind();
			  };

			  _proto.render = function render() {
			    return this.props.children(this.setCallbacks);
			  };

			  return ErrorBoundary;
			}(React__default.Component);

			var dragHandleUsageInstructions = "\n  Press space bar to start a drag.\n  When dragging you can use the arrow keys to move the item around and escape to cancel.\n  Some screen readers may require you to be in focus mode or to use your pass through key\n";

			var position = function position(index) {
			  return index + 1;
			};

			var onDragStart = function onDragStart(start) {
			  return "\n  You have lifted an item in position " + position(start.source.index) + "\n";
			};

			var withLocation = function withLocation(source, destination) {
			  var isInHomeList = source.droppableId === destination.droppableId;
			  var startPosition = position(source.index);
			  var endPosition = position(destination.index);

			  if (isInHomeList) {
			    return "\n      You have moved the item from position " + startPosition + "\n      to position " + endPosition + "\n    ";
			  }

			  return "\n    You have moved the item from position " + startPosition + "\n    in list " + source.droppableId + "\n    to list " + destination.droppableId + "\n    in position " + endPosition + "\n  ";
			};

			var withCombine = function withCombine(id, source, combine) {
			  var inHomeList = source.droppableId === combine.droppableId;

			  if (inHomeList) {
			    return "\n      The item " + id + "\n      has been combined with " + combine.draggableId;
			  }

			  return "\n      The item " + id + "\n      in list " + source.droppableId + "\n      has been combined with " + combine.draggableId + "\n      in list " + combine.droppableId + "\n    ";
			};

			var onDragUpdate = function onDragUpdate(update) {
			  var location = update.destination;

			  if (location) {
			    return withLocation(update.source, location);
			  }

			  var combine = update.combine;

			  if (combine) {
			    return withCombine(update.draggableId, update.source, combine);
			  }

			  return 'You are over an area that cannot be dropped on';
			};

			var returnedToStart = function returnedToStart(source) {
			  return "\n  The item has returned to its starting position\n  of " + position(source.index) + "\n";
			};

			var onDragEnd = function onDragEnd(result) {
			  if (result.reason === 'CANCEL') {
			    return "\n      Movement cancelled.\n      " + returnedToStart(result.source) + "\n    ";
			  }

			  var location = result.destination;
			  var combine = result.combine;

			  if (location) {
			    return "\n      You have dropped the item.\n      " + withLocation(result.source, location) + "\n    ";
			  }

			  if (combine) {
			    return "\n      You have dropped the item.\n      " + withCombine(result.draggableId, result.source, combine) + "\n    ";
			  }

			  return "\n    The item has been dropped while not over a drop area.\n    " + returnedToStart(result.source) + "\n  ";
			};

			var preset = {
			  dragHandleUsageInstructions: dragHandleUsageInstructions,
			  onDragStart: onDragStart,
			  onDragUpdate: onDragUpdate,
			  onDragEnd: onDragEnd
			};

			var origin = {
			  x: 0,
			  y: 0
			};
			var add = function add(point1, point2) {
			  return {
			    x: point1.x + point2.x,
			    y: point1.y + point2.y
			  };
			};
			var subtract = function subtract(point1, point2) {
			  return {
			    x: point1.x - point2.x,
			    y: point1.y - point2.y
			  };
			};
			var isEqual = function isEqual(point1, point2) {
			  return point1.x === point2.x && point1.y === point2.y;
			};
			var negate = function negate(point) {
			  return {
			    x: point.x !== 0 ? -point.x : 0,
			    y: point.y !== 0 ? -point.y : 0
			  };
			};
			var patch = function patch(line, value, otherValue) {
			  var _ref;

			  if (otherValue === void 0) {
			    otherValue = 0;
			  }

			  return _ref = {}, _ref[line] = value, _ref[line === 'x' ? 'y' : 'x'] = otherValue, _ref;
			};
			var distance = function distance(point1, point2) {
			  return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
			};
			var closest = function closest(target, points) {
			  return Math.min.apply(Math, points.map(function (point) {
			    return distance(target, point);
			  }));
			};
			var apply = function apply(fn) {
			  return function (point) {
			    return {
			      x: fn(point.x),
			      y: fn(point.y)
			    };
			  };
			};

			var executeClip = (function (frame, subject) {
			  var result = cssBoxModel.getRect({
			    top: Math.max(subject.top, frame.top),
			    right: Math.min(subject.right, frame.right),
			    bottom: Math.min(subject.bottom, frame.bottom),
			    left: Math.max(subject.left, frame.left)
			  });

			  if (result.width <= 0 || result.height <= 0) {
			    return null;
			  }

			  return result;
			});

			var offsetByPosition = function offsetByPosition(spacing, point) {
			  return {
			    top: spacing.top + point.y,
			    left: spacing.left + point.x,
			    bottom: spacing.bottom + point.y,
			    right: spacing.right + point.x
			  };
			};
			var getCorners = function getCorners(spacing) {
			  return [{
			    x: spacing.left,
			    y: spacing.top
			  }, {
			    x: spacing.right,
			    y: spacing.top
			  }, {
			    x: spacing.left,
			    y: spacing.bottom
			  }, {
			    x: spacing.right,
			    y: spacing.bottom
			  }];
			};
			var noSpacing = {
			  top: 0,
			  right: 0,
			  bottom: 0,
			  left: 0
			};

			var scroll = function scroll(target, frame) {
			  if (!frame) {
			    return target;
			  }

			  return offsetByPosition(target, frame.scroll.diff.displacement);
			};

			var increase = function increase(target, axis, withPlaceholder) {
			  if (withPlaceholder && withPlaceholder.increasedBy) {
			    var _extends2;

			    return _extends({}, target, (_extends2 = {}, _extends2[axis.end] = target[axis.end] + withPlaceholder.increasedBy[axis.line], _extends2));
			  }

			  return target;
			};

			var clip = function clip(target, frame) {
			  if (frame && frame.shouldClipSubject) {
			    return executeClip(frame.pageMarginBox, target);
			  }

			  return cssBoxModel.getRect(target);
			};

			var getSubject = (function (_ref) {
			  var page = _ref.page,
			      withPlaceholder = _ref.withPlaceholder,
			      axis = _ref.axis,
			      frame = _ref.frame;
			  var scrolled = scroll(page.marginBox, frame);
			  var increased = increase(scrolled, axis, withPlaceholder);
			  var clipped = clip(increased, frame);
			  return {
			    page: page,
			    withPlaceholder: withPlaceholder,
			    active: clipped
			  };
			});

			var scrollDroppable = (function (droppable, newScroll) {
			  !droppable.frame ? invariant(false) : void 0;
			  var scrollable = droppable.frame;
			  var scrollDiff = subtract(newScroll, scrollable.scroll.initial);
			  var scrollDisplacement = negate(scrollDiff);

			  var frame = _extends({}, scrollable, {
			    scroll: {
			      initial: scrollable.scroll.initial,
			      current: newScroll,
			      diff: {
			        value: scrollDiff,
			        displacement: scrollDisplacement
			      },
			      max: scrollable.scroll.max
			    }
			  });

			  var subject = getSubject({
			    page: droppable.subject.page,
			    withPlaceholder: droppable.subject.withPlaceholder,
			    axis: droppable.axis,
			    frame: frame
			  });

			  var result = _extends({}, droppable, {
			    frame: frame,
			    subject: subject
			  });

			  return result;
			});
			function values(map) {
			  if (Object.values) {
			    return Object.values(map);
			  }

			  return Object.keys(map).map(function (key) {
			    return map[key];
			  });
			}
			function findIndex(list, predicate) {
			  if (list.findIndex) {
			    return list.findIndex(predicate);
			  }

			  for (var i = 0; i < list.length; i++) {
			    if (predicate(list[i])) {
			      return i;
			    }
			  }

			  return -1;
			}
			function find(list, predicate) {
			  if (list.find) {
			    return list.find(predicate);
			  }

			  var index = findIndex(list, predicate);

			  if (index !== -1) {
			    return list[index];
			  }

			  return undefined;
			}
			function toArray(list) {
			  return Array.prototype.slice.call(list);
			}

			var toDroppableMap = memoizeOne(function (droppables) {
			  return droppables.reduce(function (previous, current) {
			    previous[current.descriptor.id] = current;
			    return previous;
			  }, {});
			});
			var toDraggableMap = memoizeOne(function (draggables) {
			  return draggables.reduce(function (previous, current) {
			    previous[current.descriptor.id] = current;
			    return previous;
			  }, {});
			});
			var toDroppableList = memoizeOne(function (droppables) {
			  return values(droppables);
			});
			var toDraggableList = memoizeOne(function (draggables) {
			  return values(draggables);
			});

			var getDraggablesInsideDroppable = memoizeOne(function (droppableId, draggables) {
			  var result = toDraggableList(draggables).filter(function (draggable) {
			    return droppableId === draggable.descriptor.droppableId;
			  }).sort(function (a, b) {
			    return a.descriptor.index - b.descriptor.index;
			  });
			  return result;
			});

			function tryGetDestination(impact) {
			  if (impact.at && impact.at.type === 'REORDER') {
			    return impact.at.destination;
			  }

			  return null;
			}
			function tryGetCombine(impact) {
			  if (impact.at && impact.at.type === 'COMBINE') {
			    return impact.at.combine;
			  }

			  return null;
			}

			var removeDraggableFromList = memoizeOne(function (remove, list) {
			  return list.filter(function (item) {
			    return item.descriptor.id !== remove.descriptor.id;
			  });
			});

			var moveToNextCombine = (function (_ref) {
			  var isMovingForward = _ref.isMovingForward,
			      draggable = _ref.draggable,
			      destination = _ref.destination,
			      insideDestination = _ref.insideDestination,
			      previousImpact = _ref.previousImpact;

			  if (!destination.isCombineEnabled) {
			    return null;
			  }

			  var location = tryGetDestination(previousImpact);

			  if (!location) {
			    return null;
			  }

			  function getImpact(target) {
			    var at = {
			      type: 'COMBINE',
			      combine: {
			        draggableId: target,
			        droppableId: destination.descriptor.id
			      }
			    };
			    return _extends({}, previousImpact, {
			      at: at
			    });
			  }

			  var all = previousImpact.displaced.all;
			  var closestId = all.length ? all[0] : null;

			  if (isMovingForward) {
			    return closestId ? getImpact(closestId) : null;
			  }

			  var withoutDraggable = removeDraggableFromList(draggable, insideDestination);

			  if (!closestId) {
			    if (!withoutDraggable.length) {
			      return null;
			    }

			    var last = withoutDraggable[withoutDraggable.length - 1];
			    return getImpact(last.descriptor.id);
			  }

			  var indexOfClosest = findIndex(withoutDraggable, function (d) {
			    return d.descriptor.id === closestId;
			  });
			  !(indexOfClosest !== -1) ? invariant(false) : void 0;
			  var proposedIndex = indexOfClosest - 1;

			  if (proposedIndex < 0) {
			    return null;
			  }

			  var before = withoutDraggable[proposedIndex];
			  return getImpact(before.descriptor.id);
			});

			var isHomeOf = (function (draggable, destination) {
			  return draggable.descriptor.droppableId === destination.descriptor.id;
			});

			var noDisplacedBy = {
			  point: origin,
			  value: 0
			};
			var emptyGroups = {
			  invisible: {},
			  visible: {},
			  all: []
			};
			var noImpact = {
			  displaced: emptyGroups,
			  displacedBy: noDisplacedBy,
			  at: null
			};

			var isWithin = (function (lowerBound, upperBound) {
			  return function (value) {
			    return lowerBound <= value && value <= upperBound;
			  };
			});

			var isPartiallyVisibleThroughFrame = (function (frame) {
			  var isWithinVertical = isWithin(frame.top, frame.bottom);
			  var isWithinHorizontal = isWithin(frame.left, frame.right);
			  return function (subject) {
			    var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);

			    if (isContained) {
			      return true;
			    }

			    var isPartiallyVisibleVertically = isWithinVertical(subject.top) || isWithinVertical(subject.bottom);
			    var isPartiallyVisibleHorizontally = isWithinHorizontal(subject.left) || isWithinHorizontal(subject.right);
			    var isPartiallyContained = isPartiallyVisibleVertically && isPartiallyVisibleHorizontally;

			    if (isPartiallyContained) {
			      return true;
			    }

			    var isBiggerVertically = subject.top < frame.top && subject.bottom > frame.bottom;
			    var isBiggerHorizontally = subject.left < frame.left && subject.right > frame.right;
			    var isTargetBiggerThanFrame = isBiggerVertically && isBiggerHorizontally;

			    if (isTargetBiggerThanFrame) {
			      return true;
			    }

			    var isTargetBiggerOnOneAxis = isBiggerVertically && isPartiallyVisibleHorizontally || isBiggerHorizontally && isPartiallyVisibleVertically;
			    return isTargetBiggerOnOneAxis;
			  };
			});

			var isTotallyVisibleThroughFrame = (function (frame) {
			  var isWithinVertical = isWithin(frame.top, frame.bottom);
			  var isWithinHorizontal = isWithin(frame.left, frame.right);
			  return function (subject) {
			    var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
			    return isContained;
			  };
			});

			var vertical = {
			  direction: 'vertical',
			  line: 'y',
			  crossAxisLine: 'x',
			  start: 'top',
			  end: 'bottom',
			  size: 'height',
			  crossAxisStart: 'left',
			  crossAxisEnd: 'right',
			  crossAxisSize: 'width'
			};
			var horizontal = {
			  direction: 'horizontal',
			  line: 'x',
			  crossAxisLine: 'y',
			  start: 'left',
			  end: 'right',
			  size: 'width',
			  crossAxisStart: 'top',
			  crossAxisEnd: 'bottom',
			  crossAxisSize: 'height'
			};

			var isTotallyVisibleThroughFrameOnAxis = (function (axis) {
			  return function (frame) {
			    var isWithinVertical = isWithin(frame.top, frame.bottom);
			    var isWithinHorizontal = isWithin(frame.left, frame.right);
			    return function (subject) {
			      if (axis === vertical) {
			        return isWithinVertical(subject.top) && isWithinVertical(subject.bottom);
			      }

			      return isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
			    };
			  };
			});

			var getDroppableDisplaced = function getDroppableDisplaced(target, destination) {
			  var displacement = destination.frame ? destination.frame.scroll.diff.displacement : origin;
			  return offsetByPosition(target, displacement);
			};

			var isVisibleInDroppable = function isVisibleInDroppable(target, destination, isVisibleThroughFrameFn) {
			  if (!destination.subject.active) {
			    return false;
			  }

			  return isVisibleThroughFrameFn(destination.subject.active)(target);
			};

			var isVisibleInViewport = function isVisibleInViewport(target, viewport, isVisibleThroughFrameFn) {
			  return isVisibleThroughFrameFn(viewport)(target);
			};

			var isVisible = function isVisible(_ref) {
			  var toBeDisplaced = _ref.target,
			      destination = _ref.destination,
			      viewport = _ref.viewport,
			      withDroppableDisplacement = _ref.withDroppableDisplacement,
			      isVisibleThroughFrameFn = _ref.isVisibleThroughFrameFn;
			  var displacedTarget = withDroppableDisplacement ? getDroppableDisplaced(toBeDisplaced, destination) : toBeDisplaced;
			  return isVisibleInDroppable(displacedTarget, destination, isVisibleThroughFrameFn) && isVisibleInViewport(displacedTarget, viewport, isVisibleThroughFrameFn);
			};

			var isPartiallyVisible = function isPartiallyVisible(args) {
			  return isVisible(_extends({}, args, {
			    isVisibleThroughFrameFn: isPartiallyVisibleThroughFrame
			  }));
			};
			var isTotallyVisible = function isTotallyVisible(args) {
			  return isVisible(_extends({}, args, {
			    isVisibleThroughFrameFn: isTotallyVisibleThroughFrame
			  }));
			};
			var isTotallyVisibleOnAxis = function isTotallyVisibleOnAxis(args) {
			  return isVisible(_extends({}, args, {
			    isVisibleThroughFrameFn: isTotallyVisibleThroughFrameOnAxis(args.destination.axis)
			  }));
			};

			var getShouldAnimate = function getShouldAnimate(id, last, forceShouldAnimate) {
			  if (typeof forceShouldAnimate === 'boolean') {
			    return forceShouldAnimate;
			  }

			  if (!last) {
			    return true;
			  }

			  var invisible = last.invisible,
			      visible = last.visible;

			  if (invisible[id]) {
			    return false;
			  }

			  var previous = visible[id];
			  return previous ? previous.shouldAnimate : true;
			};

			function getTarget(draggable, displacedBy) {
			  var marginBox = draggable.page.marginBox;
			  var expandBy = {
			    top: displacedBy.point.y,
			    right: 0,
			    bottom: 0,
			    left: displacedBy.point.x
			  };
			  return cssBoxModel.getRect(cssBoxModel.expand(marginBox, expandBy));
			}

			function getDisplacementGroups(_ref) {
			  var afterDragging = _ref.afterDragging,
			      destination = _ref.destination,
			      displacedBy = _ref.displacedBy,
			      viewport = _ref.viewport,
			      forceShouldAnimate = _ref.forceShouldAnimate,
			      last = _ref.last;
			  return afterDragging.reduce(function process(groups, draggable) {
			    var target = getTarget(draggable, displacedBy);
			    var id = draggable.descriptor.id;
			    groups.all.push(id);
			    var isVisible = isPartiallyVisible({
			      target: target,
			      destination: destination,
			      viewport: viewport,
			      withDroppableDisplacement: true
			    });

			    if (!isVisible) {
			      groups.invisible[draggable.descriptor.id] = true;
			      return groups;
			    }

			    var shouldAnimate = getShouldAnimate(id, last, forceShouldAnimate);
			    var displacement = {
			      draggableId: id,
			      shouldAnimate: shouldAnimate
			    };
			    groups.visible[id] = displacement;
			    return groups;
			  }, {
			    all: [],
			    visible: {},
			    invisible: {}
			  });
			}

			function getIndexOfLastItem(draggables, options) {
			  if (!draggables.length) {
			    return 0;
			  }

			  var indexOfLastItem = draggables[draggables.length - 1].descriptor.index;
			  return options.inHomeList ? indexOfLastItem : indexOfLastItem + 1;
			}

			function goAtEnd(_ref) {
			  var insideDestination = _ref.insideDestination,
			      inHomeList = _ref.inHomeList,
			      displacedBy = _ref.displacedBy,
			      destination = _ref.destination;
			  var newIndex = getIndexOfLastItem(insideDestination, {
			    inHomeList: inHomeList
			  });
			  return {
			    displaced: emptyGroups,
			    displacedBy: displacedBy,
			    at: {
			      type: 'REORDER',
			      destination: {
			        droppableId: destination.descriptor.id,
			        index: newIndex
			      }
			    }
			  };
			}

			function calculateReorderImpact(_ref2) {
			  var draggable = _ref2.draggable,
			      insideDestination = _ref2.insideDestination,
			      destination = _ref2.destination,
			      viewport = _ref2.viewport,
			      displacedBy = _ref2.displacedBy,
			      last = _ref2.last,
			      index = _ref2.index,
			      forceShouldAnimate = _ref2.forceShouldAnimate;
			  var inHomeList = isHomeOf(draggable, destination);

			  if (index == null) {
			    return goAtEnd({
			      insideDestination: insideDestination,
			      inHomeList: inHomeList,
			      displacedBy: displacedBy,
			      destination: destination
			    });
			  }

			  var match = find(insideDestination, function (item) {
			    return item.descriptor.index === index;
			  });

			  if (!match) {
			    return goAtEnd({
			      insideDestination: insideDestination,
			      inHomeList: inHomeList,
			      displacedBy: displacedBy,
			      destination: destination
			    });
			  }

			  var withoutDragging = removeDraggableFromList(draggable, insideDestination);
			  var sliceFrom = insideDestination.indexOf(match);
			  var impacted = withoutDragging.slice(sliceFrom);
			  var displaced = getDisplacementGroups({
			    afterDragging: impacted,
			    destination: destination,
			    displacedBy: displacedBy,
			    last: last,
			    viewport: viewport.frame,
			    forceShouldAnimate: forceShouldAnimate
			  });
			  return {
			    displaced: displaced,
			    displacedBy: displacedBy,
			    at: {
			      type: 'REORDER',
			      destination: {
			        droppableId: destination.descriptor.id,
			        index: index
			      }
			    }
			  };
			}

			function didStartAfterCritical(draggableId, afterCritical) {
			  return Boolean(afterCritical.effected[draggableId]);
			}

			var fromCombine = (function (_ref) {
			  var isMovingForward = _ref.isMovingForward,
			      destination = _ref.destination,
			      draggables = _ref.draggables,
			      combine = _ref.combine,
			      afterCritical = _ref.afterCritical;

			  if (!destination.isCombineEnabled) {
			    return null;
			  }

			  var combineId = combine.draggableId;
			  var combineWith = draggables[combineId];
			  var combineWithIndex = combineWith.descriptor.index;
			  var didCombineWithStartAfterCritical = didStartAfterCritical(combineId, afterCritical);

			  if (didCombineWithStartAfterCritical) {
			    if (isMovingForward) {
			      return combineWithIndex;
			    }

			    return combineWithIndex - 1;
			  }

			  if (isMovingForward) {
			    return combineWithIndex + 1;
			  }

			  return combineWithIndex;
			});

			var fromReorder = (function (_ref) {
			  var isMovingForward = _ref.isMovingForward,
			      isInHomeList = _ref.isInHomeList,
			      insideDestination = _ref.insideDestination,
			      location = _ref.location;

			  if (!insideDestination.length) {
			    return null;
			  }

			  var currentIndex = location.index;
			  var proposedIndex = isMovingForward ? currentIndex + 1 : currentIndex - 1;
			  var firstIndex = insideDestination[0].descriptor.index;
			  var lastIndex = insideDestination[insideDestination.length - 1].descriptor.index;
			  var upperBound = isInHomeList ? lastIndex : lastIndex + 1;

			  if (proposedIndex < firstIndex) {
			    return null;
			  }

			  if (proposedIndex > upperBound) {
			    return null;
			  }

			  return proposedIndex;
			});

			var moveToNextIndex = (function (_ref) {
			  var isMovingForward = _ref.isMovingForward,
			      isInHomeList = _ref.isInHomeList,
			      draggable = _ref.draggable,
			      draggables = _ref.draggables,
			      destination = _ref.destination,
			      insideDestination = _ref.insideDestination,
			      previousImpact = _ref.previousImpact,
			      viewport = _ref.viewport,
			      afterCritical = _ref.afterCritical;
			  var wasAt = previousImpact.at;
			  !wasAt ? invariant(false) : void 0;

			  if (wasAt.type === 'REORDER') {
			    var _newIndex = fromReorder({
			      isMovingForward: isMovingForward,
			      isInHomeList: isInHomeList,
			      location: wasAt.destination,
			      insideDestination: insideDestination
			    });

			    if (_newIndex == null) {
			      return null;
			    }

			    return calculateReorderImpact({
			      draggable: draggable,
			      insideDestination: insideDestination,
			      destination: destination,
			      viewport: viewport,
			      last: previousImpact.displaced,
			      displacedBy: previousImpact.displacedBy,
			      index: _newIndex
			    });
			  }

			  var newIndex = fromCombine({
			    isMovingForward: isMovingForward,
			    destination: destination,
			    displaced: previousImpact.displaced,
			    draggables: draggables,
			    combine: wasAt.combine,
			    afterCritical: afterCritical
			  });

			  if (newIndex == null) {
			    return null;
			  }

			  return calculateReorderImpact({
			    draggable: draggable,
			    insideDestination: insideDestination,
			    destination: destination,
			    viewport: viewport,
			    last: previousImpact.displaced,
			    displacedBy: previousImpact.displacedBy,
			    index: newIndex
			  });
			});

			var getCombinedItemDisplacement = (function (_ref) {
			  var displaced = _ref.displaced,
			      afterCritical = _ref.afterCritical,
			      combineWith = _ref.combineWith,
			      displacedBy = _ref.displacedBy;
			  var isDisplaced = Boolean(displaced.visible[combineWith] || displaced.invisible[combineWith]);

			  if (didStartAfterCritical(combineWith, afterCritical)) {
			    return isDisplaced ? origin : negate(displacedBy.point);
			  }

			  return isDisplaced ? displacedBy.point : origin;
			});

			var whenCombining = (function (_ref) {
			  var afterCritical = _ref.afterCritical,
			      impact = _ref.impact,
			      draggables = _ref.draggables;
			  var combine = tryGetCombine(impact);
			  !combine ? invariant(false) : void 0;
			  var combineWith = combine.draggableId;
			  var center = draggables[combineWith].page.borderBox.center;
			  var displaceBy = getCombinedItemDisplacement({
			    displaced: impact.displaced,
			    afterCritical: afterCritical,
			    combineWith: combineWith,
			    displacedBy: impact.displacedBy
			  });
			  return add(center, displaceBy);
			});

			var distanceFromStartToBorderBoxCenter = function distanceFromStartToBorderBoxCenter(axis, box) {
			  return box.margin[axis.start] + box.borderBox[axis.size] / 2;
			};

			var distanceFromEndToBorderBoxCenter = function distanceFromEndToBorderBoxCenter(axis, box) {
			  return box.margin[axis.end] + box.borderBox[axis.size] / 2;
			};

			var getCrossAxisBorderBoxCenter = function getCrossAxisBorderBoxCenter(axis, target, isMoving) {
			  return target[axis.crossAxisStart] + isMoving.margin[axis.crossAxisStart] + isMoving.borderBox[axis.crossAxisSize] / 2;
			};

			var goAfter = function goAfter(_ref) {
			  var axis = _ref.axis,
			      moveRelativeTo = _ref.moveRelativeTo,
			      isMoving = _ref.isMoving;
			  return patch(axis.line, moveRelativeTo.marginBox[axis.end] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));
			};
			var goBefore = function goBefore(_ref2) {
			  var axis = _ref2.axis,
			      moveRelativeTo = _ref2.moveRelativeTo,
			      isMoving = _ref2.isMoving;
			  return patch(axis.line, moveRelativeTo.marginBox[axis.start] - distanceFromEndToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));
			};
			var goIntoStart = function goIntoStart(_ref3) {
			  var axis = _ref3.axis,
			      moveInto = _ref3.moveInto,
			      isMoving = _ref3.isMoving;
			  return patch(axis.line, moveInto.contentBox[axis.start] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveInto.contentBox, isMoving));
			};

			var whenReordering = (function (_ref) {
			  var impact = _ref.impact,
			      draggable = _ref.draggable,
			      draggables = _ref.draggables,
			      droppable = _ref.droppable,
			      afterCritical = _ref.afterCritical;
			  var insideDestination = getDraggablesInsideDroppable(droppable.descriptor.id, draggables);
			  var draggablePage = draggable.page;
			  var axis = droppable.axis;

			  if (!insideDestination.length) {
			    return goIntoStart({
			      axis: axis,
			      moveInto: droppable.page,
			      isMoving: draggablePage
			    });
			  }

			  var displaced = impact.displaced,
			      displacedBy = impact.displacedBy;
			  var closestAfter = displaced.all[0];

			  if (closestAfter) {
			    var closest = draggables[closestAfter];

			    if (didStartAfterCritical(closestAfter, afterCritical)) {
			      return goBefore({
			        axis: axis,
			        moveRelativeTo: closest.page,
			        isMoving: draggablePage
			      });
			    }

			    var withDisplacement = cssBoxModel.offset(closest.page, displacedBy.point);
			    return goBefore({
			      axis: axis,
			      moveRelativeTo: withDisplacement,
			      isMoving: draggablePage
			    });
			  }

			  var last = insideDestination[insideDestination.length - 1];

			  if (last.descriptor.id === draggable.descriptor.id) {
			    return draggablePage.borderBox.center;
			  }

			  if (didStartAfterCritical(last.descriptor.id, afterCritical)) {
			    var page = cssBoxModel.offset(last.page, negate(afterCritical.displacedBy.point));
			    return goAfter({
			      axis: axis,
			      moveRelativeTo: page,
			      isMoving: draggablePage
			    });
			  }

			  return goAfter({
			    axis: axis,
			    moveRelativeTo: last.page,
			    isMoving: draggablePage
			  });
			});

			var withDroppableDisplacement = (function (droppable, point) {
			  var frame = droppable.frame;

			  if (!frame) {
			    return point;
			  }

			  return add(point, frame.scroll.diff.displacement);
			});

			var getResultWithoutDroppableDisplacement = function getResultWithoutDroppableDisplacement(_ref) {
			  var impact = _ref.impact,
			      draggable = _ref.draggable,
			      droppable = _ref.droppable,
			      draggables = _ref.draggables,
			      afterCritical = _ref.afterCritical;
			  var original = draggable.page.borderBox.center;
			  var at = impact.at;

			  if (!droppable) {
			    return original;
			  }

			  if (!at) {
			    return original;
			  }

			  if (at.type === 'REORDER') {
			    return whenReordering({
			      impact: impact,
			      draggable: draggable,
			      draggables: draggables,
			      droppable: droppable,
			      afterCritical: afterCritical
			    });
			  }

			  return whenCombining({
			    impact: impact,
			    draggables: draggables,
			    afterCritical: afterCritical
			  });
			};

			var getPageBorderBoxCenterFromImpact = (function (args) {
			  var withoutDisplacement = getResultWithoutDroppableDisplacement(args);
			  var droppable = args.droppable;
			  var withDisplacement = droppable ? withDroppableDisplacement(droppable, withoutDisplacement) : withoutDisplacement;
			  return withDisplacement;
			});

			var scrollViewport = (function (viewport, newScroll) {
			  var diff = subtract(newScroll, viewport.scroll.initial);
			  var displacement = negate(diff);
			  var frame = cssBoxModel.getRect({
			    top: newScroll.y,
			    bottom: newScroll.y + viewport.frame.height,
			    left: newScroll.x,
			    right: newScroll.x + viewport.frame.width
			  });
			  var updated = {
			    frame: frame,
			    scroll: {
			      initial: viewport.scroll.initial,
			      max: viewport.scroll.max,
			      current: newScroll,
			      diff: {
			        value: diff,
			        displacement: displacement
			      }
			    }
			  };
			  return updated;
			});

			function getDraggables(ids, draggables) {
			  return ids.map(function (id) {
			    return draggables[id];
			  });
			}

			function tryGetVisible(id, groups) {
			  for (var i = 0; i < groups.length; i++) {
			    var displacement = groups[i].visible[id];

			    if (displacement) {
			      return displacement;
			    }
			  }

			  return null;
			}

			var speculativelyIncrease = (function (_ref) {
			  var impact = _ref.impact,
			      viewport = _ref.viewport,
			      destination = _ref.destination,
			      draggables = _ref.draggables,
			      maxScrollChange = _ref.maxScrollChange;
			  var scrolledViewport = scrollViewport(viewport, add(viewport.scroll.current, maxScrollChange));
			  var scrolledDroppable = destination.frame ? scrollDroppable(destination, add(destination.frame.scroll.current, maxScrollChange)) : destination;
			  var last = impact.displaced;
			  var withViewportScroll = getDisplacementGroups({
			    afterDragging: getDraggables(last.all, draggables),
			    destination: destination,
			    displacedBy: impact.displacedBy,
			    viewport: scrolledViewport.frame,
			    last: last,
			    forceShouldAnimate: false
			  });
			  var withDroppableScroll = getDisplacementGroups({
			    afterDragging: getDraggables(last.all, draggables),
			    destination: scrolledDroppable,
			    displacedBy: impact.displacedBy,
			    viewport: viewport.frame,
			    last: last,
			    forceShouldAnimate: false
			  });
			  var invisible = {};
			  var visible = {};
			  var groups = [last, withViewportScroll, withDroppableScroll];
			  last.all.forEach(function (id) {
			    var displacement = tryGetVisible(id, groups);

			    if (displacement) {
			      visible[id] = displacement;
			      return;
			    }

			    invisible[id] = true;
			  });

			  var newImpact = _extends({}, impact, {
			    displaced: {
			      all: last.all,
			      invisible: invisible,
			      visible: visible
			    }
			  });

			  return newImpact;
			});

			var withViewportDisplacement = (function (viewport, point) {
			  return add(viewport.scroll.diff.displacement, point);
			});

			var getClientFromPageBorderBoxCenter = (function (_ref) {
			  var pageBorderBoxCenter = _ref.pageBorderBoxCenter,
			      draggable = _ref.draggable,
			      viewport = _ref.viewport;
			  var withoutPageScrollChange = withViewportDisplacement(viewport, pageBorderBoxCenter);
			  var offset = subtract(withoutPageScrollChange, draggable.page.borderBox.center);
			  return add(draggable.client.borderBox.center, offset);
			});

			var isTotallyVisibleInNewLocation = (function (_ref) {
			  var draggable = _ref.draggable,
			      destination = _ref.destination,
			      newPageBorderBoxCenter = _ref.newPageBorderBoxCenter,
			      viewport = _ref.viewport,
			      withDroppableDisplacement = _ref.withDroppableDisplacement,
			      _ref$onlyOnMainAxis = _ref.onlyOnMainAxis,
			      onlyOnMainAxis = _ref$onlyOnMainAxis === void 0 ? false : _ref$onlyOnMainAxis;
			  var changeNeeded = subtract(newPageBorderBoxCenter, draggable.page.borderBox.center);
			  var shifted = offsetByPosition(draggable.page.borderBox, changeNeeded);
			  var args = {
			    target: shifted,
			    destination: destination,
			    withDroppableDisplacement: withDroppableDisplacement,
			    viewport: viewport
			  };
			  return onlyOnMainAxis ? isTotallyVisibleOnAxis(args) : isTotallyVisible(args);
			});

			var moveToNextPlace = (function (_ref) {
			  var isMovingForward = _ref.isMovingForward,
			      draggable = _ref.draggable,
			      destination = _ref.destination,
			      draggables = _ref.draggables,
			      previousImpact = _ref.previousImpact,
			      viewport = _ref.viewport,
			      previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter,
			      previousClientSelection = _ref.previousClientSelection,
			      afterCritical = _ref.afterCritical;

			  if (!destination.isEnabled) {
			    return null;
			  }

			  var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
			  var isInHomeList = isHomeOf(draggable, destination);
			  var impact = moveToNextCombine({
			    isMovingForward: isMovingForward,
			    draggable: draggable,
			    destination: destination,
			    insideDestination: insideDestination,
			    previousImpact: previousImpact
			  }) || moveToNextIndex({
			    isMovingForward: isMovingForward,
			    isInHomeList: isInHomeList,
			    draggable: draggable,
			    draggables: draggables,
			    destination: destination,
			    insideDestination: insideDestination,
			    previousImpact: previousImpact,
			    viewport: viewport,
			    afterCritical: afterCritical
			  });

			  if (!impact) {
			    return null;
			  }

			  var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
			    impact: impact,
			    draggable: draggable,
			    droppable: destination,
			    draggables: draggables,
			    afterCritical: afterCritical
			  });
			  var isVisibleInNewLocation = isTotallyVisibleInNewLocation({
			    draggable: draggable,
			    destination: destination,
			    newPageBorderBoxCenter: pageBorderBoxCenter,
			    viewport: viewport.frame,
			    withDroppableDisplacement: false,
			    onlyOnMainAxis: true
			  });

			  if (isVisibleInNewLocation) {
			    var clientSelection = getClientFromPageBorderBoxCenter({
			      pageBorderBoxCenter: pageBorderBoxCenter,
			      draggable: draggable,
			      viewport: viewport
			    });
			    return {
			      clientSelection: clientSelection,
			      impact: impact,
			      scrollJumpRequest: null
			    };
			  }

			  var distance = subtract(pageBorderBoxCenter, previousPageBorderBoxCenter);
			  var cautious = speculativelyIncrease({
			    impact: impact,
			    viewport: viewport,
			    destination: destination,
			    draggables: draggables,
			    maxScrollChange: distance
			  });
			  return {
			    clientSelection: previousClientSelection,
			    impact: cautious,
			    scrollJumpRequest: distance
			  };
			});

			var getKnownActive = function getKnownActive(droppable) {
			  var rect = droppable.subject.active;
			  !rect ? invariant(false) : void 0;
			  return rect;
			};

			var getBestCrossAxisDroppable = (function (_ref) {
			  var isMovingForward = _ref.isMovingForward,
			      pageBorderBoxCenter = _ref.pageBorderBoxCenter,
			      source = _ref.source,
			      droppables = _ref.droppables,
			      viewport = _ref.viewport;
			  var active = source.subject.active;

			  if (!active) {
			    return null;
			  }

			  var axis = source.axis;
			  var isBetweenSourceClipped = isWithin(active[axis.start], active[axis.end]);
			  var candidates = toDroppableList(droppables).filter(function (droppable) {
			    return droppable !== source;
			  }).filter(function (droppable) {
			    return droppable.isEnabled;
			  }).filter(function (droppable) {
			    return Boolean(droppable.subject.active);
			  }).filter(function (droppable) {
			    return isPartiallyVisibleThroughFrame(viewport.frame)(getKnownActive(droppable));
			  }).filter(function (droppable) {
			    var activeOfTarget = getKnownActive(droppable);

			    if (isMovingForward) {
			      return active[axis.crossAxisEnd] < activeOfTarget[axis.crossAxisEnd];
			    }

			    return activeOfTarget[axis.crossAxisStart] < active[axis.crossAxisStart];
			  }).filter(function (droppable) {
			    var activeOfTarget = getKnownActive(droppable);
			    var isBetweenDestinationClipped = isWithin(activeOfTarget[axis.start], activeOfTarget[axis.end]);
			    return isBetweenSourceClipped(activeOfTarget[axis.start]) || isBetweenSourceClipped(activeOfTarget[axis.end]) || isBetweenDestinationClipped(active[axis.start]) || isBetweenDestinationClipped(active[axis.end]);
			  }).sort(function (a, b) {
			    var first = getKnownActive(a)[axis.crossAxisStart];
			    var second = getKnownActive(b)[axis.crossAxisStart];

			    if (isMovingForward) {
			      return first - second;
			    }

			    return second - first;
			  }).filter(function (droppable, index, array) {
			    return getKnownActive(droppable)[axis.crossAxisStart] === getKnownActive(array[0])[axis.crossAxisStart];
			  });

			  if (!candidates.length) {
			    return null;
			  }

			  if (candidates.length === 1) {
			    return candidates[0];
			  }

			  var contains = candidates.filter(function (droppable) {
			    var isWithinDroppable = isWithin(getKnownActive(droppable)[axis.start], getKnownActive(droppable)[axis.end]);
			    return isWithinDroppable(pageBorderBoxCenter[axis.line]);
			  });

			  if (contains.length === 1) {
			    return contains[0];
			  }

			  if (contains.length > 1) {
			    return contains.sort(function (a, b) {
			      return getKnownActive(a)[axis.start] - getKnownActive(b)[axis.start];
			    })[0];
			  }

			  return candidates.sort(function (a, b) {
			    var first = closest(pageBorderBoxCenter, getCorners(getKnownActive(a)));
			    var second = closest(pageBorderBoxCenter, getCorners(getKnownActive(b)));

			    if (first !== second) {
			      return first - second;
			    }

			    return getKnownActive(a)[axis.start] - getKnownActive(b)[axis.start];
			  })[0];
			});

			var getCurrentPageBorderBoxCenter = function getCurrentPageBorderBoxCenter(draggable, afterCritical) {
			  var original = draggable.page.borderBox.center;
			  return didStartAfterCritical(draggable.descriptor.id, afterCritical) ? subtract(original, afterCritical.displacedBy.point) : original;
			};
			var getCurrentPageBorderBox = function getCurrentPageBorderBox(draggable, afterCritical) {
			  var original = draggable.page.borderBox;
			  return didStartAfterCritical(draggable.descriptor.id, afterCritical) ? offsetByPosition(original, negate(afterCritical.displacedBy.point)) : original;
			};

			var getClosestDraggable = (function (_ref) {
			  var pageBorderBoxCenter = _ref.pageBorderBoxCenter,
			      viewport = _ref.viewport,
			      destination = _ref.destination,
			      insideDestination = _ref.insideDestination,
			      afterCritical = _ref.afterCritical;
			  var sorted = insideDestination.filter(function (draggable) {
			    return isTotallyVisible({
			      target: getCurrentPageBorderBox(draggable, afterCritical),
			      destination: destination,
			      viewport: viewport.frame,
			      withDroppableDisplacement: true
			    });
			  }).sort(function (a, b) {
			    var distanceToA = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(a, afterCritical)));
			    var distanceToB = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(b, afterCritical)));

			    if (distanceToA < distanceToB) {
			      return -1;
			    }

			    if (distanceToB < distanceToA) {
			      return 1;
			    }

			    return a.descriptor.index - b.descriptor.index;
			  });
			  return sorted[0] || null;
			});

			var getDisplacedBy = memoizeOne(function getDisplacedBy(axis, displaceBy) {
			  var displacement = displaceBy[axis.line];
			  return {
			    value: displacement,
			    point: patch(axis.line, displacement)
			  };
			});

			var getRequiredGrowthForPlaceholder = function getRequiredGrowthForPlaceholder(droppable, placeholderSize, draggables) {
			  var axis = droppable.axis;

			  if (droppable.descriptor.mode === 'virtual') {
			    return patch(axis.line, placeholderSize[axis.line]);
			  }

			  var availableSpace = droppable.subject.page.contentBox[axis.size];
			  var insideDroppable = getDraggablesInsideDroppable(droppable.descriptor.id, draggables);
			  var spaceUsed = insideDroppable.reduce(function (sum, dimension) {
			    return sum + dimension.client.marginBox[axis.size];
			  }, 0);
			  var requiredSpace = spaceUsed + placeholderSize[axis.line];
			  var needsToGrowBy = requiredSpace - availableSpace;

			  if (needsToGrowBy <= 0) {
			    return null;
			  }

			  return patch(axis.line, needsToGrowBy);
			};

			var withMaxScroll = function withMaxScroll(frame, max) {
			  return _extends({}, frame, {
			    scroll: _extends({}, frame.scroll, {
			      max: max
			    })
			  });
			};

			var addPlaceholder = function addPlaceholder(droppable, draggable, draggables) {
			  var frame = droppable.frame;
			  !!isHomeOf(draggable, droppable) ? invariant(false) : void 0;
			  !!droppable.subject.withPlaceholder ? invariant(false) : void 0;
			  var placeholderSize = getDisplacedBy(droppable.axis, draggable.displaceBy).point;
			  var requiredGrowth = getRequiredGrowthForPlaceholder(droppable, placeholderSize, draggables);
			  var added = {
			    placeholderSize: placeholderSize,
			    increasedBy: requiredGrowth,
			    oldFrameMaxScroll: droppable.frame ? droppable.frame.scroll.max : null
			  };

			  if (!frame) {
			    var _subject = getSubject({
			      page: droppable.subject.page,
			      withPlaceholder: added,
			      axis: droppable.axis,
			      frame: droppable.frame
			    });

			    return _extends({}, droppable, {
			      subject: _subject
			    });
			  }

			  var maxScroll = requiredGrowth ? add(frame.scroll.max, requiredGrowth) : frame.scroll.max;
			  var newFrame = withMaxScroll(frame, maxScroll);
			  var subject = getSubject({
			    page: droppable.subject.page,
			    withPlaceholder: added,
			    axis: droppable.axis,
			    frame: newFrame
			  });
			  return _extends({}, droppable, {
			    subject: subject,
			    frame: newFrame
			  });
			};
			var removePlaceholder = function removePlaceholder(droppable) {
			  var added = droppable.subject.withPlaceholder;
			  !added ? invariant(false) : void 0;
			  var frame = droppable.frame;

			  if (!frame) {
			    var _subject2 = getSubject({
			      page: droppable.subject.page,
			      axis: droppable.axis,
			      frame: null,
			      withPlaceholder: null
			    });

			    return _extends({}, droppable, {
			      subject: _subject2
			    });
			  }

			  var oldMaxScroll = added.oldFrameMaxScroll;
			  !oldMaxScroll ? invariant(false) : void 0;
			  var newFrame = withMaxScroll(frame, oldMaxScroll);
			  var subject = getSubject({
			    page: droppable.subject.page,
			    axis: droppable.axis,
			    frame: newFrame,
			    withPlaceholder: null
			  });
			  return _extends({}, droppable, {
			    subject: subject,
			    frame: newFrame
			  });
			};

			var moveToNewDroppable = (function (_ref) {
			  var previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter,
			      moveRelativeTo = _ref.moveRelativeTo,
			      insideDestination = _ref.insideDestination,
			      draggable = _ref.draggable,
			      draggables = _ref.draggables,
			      destination = _ref.destination,
			      viewport = _ref.viewport,
			      afterCritical = _ref.afterCritical;

			  if (!moveRelativeTo) {
			    if (insideDestination.length) {
			      return null;
			    }

			    var proposed = {
			      displaced: emptyGroups,
			      displacedBy: noDisplacedBy,
			      at: {
			        type: 'REORDER',
			        destination: {
			          droppableId: destination.descriptor.id,
			          index: 0
			        }
			      }
			    };
			    var proposedPageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
			      impact: proposed,
			      draggable: draggable,
			      droppable: destination,
			      draggables: draggables,
			      afterCritical: afterCritical
			    });
			    var withPlaceholder = isHomeOf(draggable, destination) ? destination : addPlaceholder(destination, draggable, draggables);
			    var isVisibleInNewLocation = isTotallyVisibleInNewLocation({
			      draggable: draggable,
			      destination: withPlaceholder,
			      newPageBorderBoxCenter: proposedPageBorderBoxCenter,
			      viewport: viewport.frame,
			      withDroppableDisplacement: false,
			      onlyOnMainAxis: true
			    });
			    return isVisibleInNewLocation ? proposed : null;
			  }

			  var isGoingBeforeTarget = Boolean(previousPageBorderBoxCenter[destination.axis.line] <= moveRelativeTo.page.borderBox.center[destination.axis.line]);

			  var proposedIndex = function () {
			    var relativeTo = moveRelativeTo.descriptor.index;

			    if (moveRelativeTo.descriptor.id === draggable.descriptor.id) {
			      return relativeTo;
			    }

			    if (isGoingBeforeTarget) {
			      return relativeTo;
			    }

			    return relativeTo + 1;
			  }();

			  var displacedBy = getDisplacedBy(destination.axis, draggable.displaceBy);
			  return calculateReorderImpact({
			    draggable: draggable,
			    insideDestination: insideDestination,
			    destination: destination,
			    viewport: viewport,
			    displacedBy: displacedBy,
			    last: emptyGroups,
			    index: proposedIndex
			  });
			});

			var moveCrossAxis = (function (_ref) {
			  var isMovingForward = _ref.isMovingForward,
			      previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter,
			      draggable = _ref.draggable,
			      isOver = _ref.isOver,
			      draggables = _ref.draggables,
			      droppables = _ref.droppables,
			      viewport = _ref.viewport,
			      afterCritical = _ref.afterCritical;
			  var destination = getBestCrossAxisDroppable({
			    isMovingForward: isMovingForward,
			    pageBorderBoxCenter: previousPageBorderBoxCenter,
			    source: isOver,
			    droppables: droppables,
			    viewport: viewport
			  });

			  if (!destination) {
			    return null;
			  }

			  var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
			  var moveRelativeTo = getClosestDraggable({
			    pageBorderBoxCenter: previousPageBorderBoxCenter,
			    viewport: viewport,
			    destination: destination,
			    insideDestination: insideDestination,
			    afterCritical: afterCritical
			  });
			  var impact = moveToNewDroppable({
			    previousPageBorderBoxCenter: previousPageBorderBoxCenter,
			    destination: destination,
			    draggable: draggable,
			    draggables: draggables,
			    moveRelativeTo: moveRelativeTo,
			    insideDestination: insideDestination,
			    viewport: viewport,
			    afterCritical: afterCritical
			  });

			  if (!impact) {
			    return null;
			  }

			  var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
			    impact: impact,
			    draggable: draggable,
			    droppable: destination,
			    draggables: draggables,
			    afterCritical: afterCritical
			  });
			  var clientSelection = getClientFromPageBorderBoxCenter({
			    pageBorderBoxCenter: pageBorderBoxCenter,
			    draggable: draggable,
			    viewport: viewport
			  });
			  return {
			    clientSelection: clientSelection,
			    impact: impact,
			    scrollJumpRequest: null
			  };
			});

			var whatIsDraggedOver = (function (impact) {
			  var at = impact.at;

			  if (!at) {
			    return null;
			  }

			  if (at.type === 'REORDER') {
			    return at.destination.droppableId;
			  }

			  return at.combine.droppableId;
			});

			var getDroppableOver = function getDroppableOver(impact, droppables) {
			  var id = whatIsDraggedOver(impact);
			  return id ? droppables[id] : null;
			};

			var moveInDirection = (function (_ref) {
			  var state = _ref.state,
			      type = _ref.type;
			  var isActuallyOver = getDroppableOver(state.impact, state.dimensions.droppables);
			  var isMainAxisMovementAllowed = Boolean(isActuallyOver);
			  var home = state.dimensions.droppables[state.critical.droppable.id];
			  var isOver = isActuallyOver || home;
			  var direction = isOver.axis.direction;
			  var isMovingOnMainAxis = direction === 'vertical' && (type === 'MOVE_UP' || type === 'MOVE_DOWN') || direction === 'horizontal' && (type === 'MOVE_LEFT' || type === 'MOVE_RIGHT');

			  if (isMovingOnMainAxis && !isMainAxisMovementAllowed) {
			    return null;
			  }

			  var isMovingForward = type === 'MOVE_DOWN' || type === 'MOVE_RIGHT';
			  var draggable = state.dimensions.draggables[state.critical.draggable.id];
			  var previousPageBorderBoxCenter = state.current.page.borderBoxCenter;
			  var _state$dimensions = state.dimensions,
			      draggables = _state$dimensions.draggables,
			      droppables = _state$dimensions.droppables;
			  return isMovingOnMainAxis ? moveToNextPlace({
			    isMovingForward: isMovingForward,
			    previousPageBorderBoxCenter: previousPageBorderBoxCenter,
			    draggable: draggable,
			    destination: isOver,
			    draggables: draggables,
			    viewport: state.viewport,
			    previousClientSelection: state.current.client.selection,
			    previousImpact: state.impact,
			    afterCritical: state.afterCritical
			  }) : moveCrossAxis({
			    isMovingForward: isMovingForward,
			    previousPageBorderBoxCenter: previousPageBorderBoxCenter,
			    draggable: draggable,
			    isOver: isOver,
			    draggables: draggables,
			    droppables: droppables,
			    viewport: state.viewport,
			    afterCritical: state.afterCritical
			  });
			});

			function isMovementAllowed(state) {
			  return state.phase === 'DRAGGING' || state.phase === 'COLLECTING';
			}

			function isPositionInFrame(frame) {
			  var isWithinVertical = isWithin(frame.top, frame.bottom);
			  var isWithinHorizontal = isWithin(frame.left, frame.right);
			  return function run(point) {
			    return isWithinVertical(point.y) && isWithinHorizontal(point.x);
			  };
			}

			function getHasOverlap(first, second) {
			  return first.left < second.right && first.right > second.left && first.top < second.bottom && first.bottom > second.top;
			}

			function getFurthestAway(_ref) {
			  var pageBorderBox = _ref.pageBorderBox,
			      draggable = _ref.draggable,
			      candidates = _ref.candidates;
			  var startCenter = draggable.page.borderBox.center;
			  var sorted = candidates.map(function (candidate) {
			    var axis = candidate.axis;
			    var target = patch(candidate.axis.line, pageBorderBox.center[axis.line], candidate.page.borderBox.center[axis.crossAxisLine]);
			    return {
			      id: candidate.descriptor.id,
			      distance: distance(startCenter, target)
			    };
			  }).sort(function (a, b) {
			    return b.distance - a.distance;
			  });
			  return sorted[0] ? sorted[0].id : null;
			}

			function getDroppableOver$1(_ref2) {
			  var pageBorderBox = _ref2.pageBorderBox,
			      draggable = _ref2.draggable,
			      droppables = _ref2.droppables;
			  var candidates = toDroppableList(droppables).filter(function (item) {
			    if (!item.isEnabled) {
			      return false;
			    }

			    var active = item.subject.active;

			    if (!active) {
			      return false;
			    }

			    if (!getHasOverlap(pageBorderBox, active)) {
			      return false;
			    }

			    if (isPositionInFrame(active)(pageBorderBox.center)) {
			      return true;
			    }

			    var axis = item.axis;
			    var childCenter = active.center[axis.crossAxisLine];
			    var crossAxisStart = pageBorderBox[axis.crossAxisStart];
			    var crossAxisEnd = pageBorderBox[axis.crossAxisEnd];
			    var isContained = isWithin(active[axis.crossAxisStart], active[axis.crossAxisEnd]);
			    var isStartContained = isContained(crossAxisStart);
			    var isEndContained = isContained(crossAxisEnd);

			    if (!isStartContained && !isEndContained) {
			      return true;
			    }

			    if (isStartContained) {
			      return crossAxisStart < childCenter;
			    }

			    return crossAxisEnd > childCenter;
			  });

			  if (!candidates.length) {
			    return null;
			  }

			  if (candidates.length === 1) {
			    return candidates[0].descriptor.id;
			  }

			  return getFurthestAway({
			    pageBorderBox: pageBorderBox,
			    draggable: draggable,
			    candidates: candidates
			  });
			}

			var offsetRectByPosition = function offsetRectByPosition(rect, point) {
			  return cssBoxModel.getRect(offsetByPosition(rect, point));
			};

			var withDroppableScroll = (function (droppable, area) {
			  var frame = droppable.frame;

			  if (!frame) {
			    return area;
			  }

			  return offsetRectByPosition(area, frame.scroll.diff.value);
			});

			function getIsDisplaced(_ref) {
			  var displaced = _ref.displaced,
			      id = _ref.id;
			  return Boolean(displaced.visible[id] || displaced.invisible[id]);
			}

			function atIndex(_ref) {
			  var draggable = _ref.draggable,
			      closest = _ref.closest,
			      inHomeList = _ref.inHomeList;

			  if (!closest) {
			    return null;
			  }

			  if (!inHomeList) {
			    return closest.descriptor.index;
			  }

			  if (closest.descriptor.index > draggable.descriptor.index) {
			    return closest.descriptor.index - 1;
			  }

			  return closest.descriptor.index;
			}

			var getReorderImpact = (function (_ref2) {
			  var targetRect = _ref2.pageBorderBoxWithDroppableScroll,
			      draggable = _ref2.draggable,
			      destination = _ref2.destination,
			      insideDestination = _ref2.insideDestination,
			      last = _ref2.last,
			      viewport = _ref2.viewport,
			      afterCritical = _ref2.afterCritical;
			  var axis = destination.axis;
			  var displacedBy = getDisplacedBy(destination.axis, draggable.displaceBy);
			  var displacement = displacedBy.value;
			  var targetStart = targetRect[axis.start];
			  var targetEnd = targetRect[axis.end];
			  var withoutDragging = removeDraggableFromList(draggable, insideDestination);
			  var closest = find(withoutDragging, function (child) {
			    var id = child.descriptor.id;
			    var childCenter = child.page.borderBox.center[axis.line];
			    var didStartAfterCritical$1 = didStartAfterCritical(id, afterCritical);
			    var isDisplaced = getIsDisplaced({
			      displaced: last,
			      id: id
			    });

			    if (didStartAfterCritical$1) {
			      if (isDisplaced) {
			        return targetEnd <= childCenter;
			      }

			      return targetStart < childCenter - displacement;
			    }

			    if (isDisplaced) {
			      return targetEnd <= childCenter + displacement;
			    }

			    return targetStart < childCenter;
			  });
			  var newIndex = atIndex({
			    draggable: draggable,
			    closest: closest,
			    inHomeList: isHomeOf(draggable, destination)
			  });
			  return calculateReorderImpact({
			    draggable: draggable,
			    insideDestination: insideDestination,
			    destination: destination,
			    viewport: viewport,
			    last: last,
			    displacedBy: displacedBy,
			    index: newIndex
			  });
			});

			var combineThresholdDivisor = 4;
			var getCombineImpact = (function (_ref) {
			  var draggable = _ref.draggable,
			      targetRect = _ref.pageBorderBoxWithDroppableScroll,
			      previousImpact = _ref.previousImpact,
			      destination = _ref.destination,
			      insideDestination = _ref.insideDestination,
			      afterCritical = _ref.afterCritical;

			  if (!destination.isCombineEnabled) {
			    return null;
			  }

			  var axis = destination.axis;
			  var displacedBy = getDisplacedBy(destination.axis, draggable.displaceBy);
			  var displacement = displacedBy.value;
			  var targetStart = targetRect[axis.start];
			  var targetEnd = targetRect[axis.end];
			  var withoutDragging = removeDraggableFromList(draggable, insideDestination);
			  var combineWith = find(withoutDragging, function (child) {
			    var id = child.descriptor.id;
			    var childRect = child.page.borderBox;
			    var childSize = childRect[axis.size];
			    var threshold = childSize / combineThresholdDivisor;
			    var didStartAfterCritical$1 = didStartAfterCritical(id, afterCritical);
			    var isDisplaced = getIsDisplaced({
			      displaced: previousImpact.displaced,
			      id: id
			    });

			    if (didStartAfterCritical$1) {
			      if (isDisplaced) {
			        return targetEnd > childRect[axis.start] + threshold && targetEnd < childRect[axis.end] - threshold;
			      }

			      return targetStart > childRect[axis.start] - displacement + threshold && targetStart < childRect[axis.end] - displacement - threshold;
			    }

			    if (isDisplaced) {
			      return targetEnd > childRect[axis.start] + displacement + threshold && targetEnd < childRect[axis.end] + displacement - threshold;
			    }

			    return targetStart > childRect[axis.start] + threshold && targetStart < childRect[axis.end] - threshold;
			  });

			  if (!combineWith) {
			    return null;
			  }

			  var impact = {
			    displacedBy: displacedBy,
			    displaced: previousImpact.displaced,
			    at: {
			      type: 'COMBINE',
			      combine: {
			        draggableId: combineWith.descriptor.id,
			        droppableId: destination.descriptor.id
			      }
			    }
			  };
			  return impact;
			});

			var getDragImpact = (function (_ref) {
			  var pageOffset = _ref.pageOffset,
			      draggable = _ref.draggable,
			      draggables = _ref.draggables,
			      droppables = _ref.droppables,
			      previousImpact = _ref.previousImpact,
			      viewport = _ref.viewport,
			      afterCritical = _ref.afterCritical;
			  var pageBorderBox = offsetRectByPosition(draggable.page.borderBox, pageOffset);
			  var destinationId = getDroppableOver$1({
			    pageBorderBox: pageBorderBox,
			    draggable: draggable,
			    droppables: droppables
			  });

			  if (!destinationId) {
			    return noImpact;
			  }

			  var destination = droppables[destinationId];
			  var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
			  var pageBorderBoxWithDroppableScroll = withDroppableScroll(destination, pageBorderBox);
			  return getCombineImpact({
			    pageBorderBoxWithDroppableScroll: pageBorderBoxWithDroppableScroll,
			    draggable: draggable,
			    previousImpact: previousImpact,
			    destination: destination,
			    insideDestination: insideDestination,
			    afterCritical: afterCritical
			  }) || getReorderImpact({
			    pageBorderBoxWithDroppableScroll: pageBorderBoxWithDroppableScroll,
			    draggable: draggable,
			    destination: destination,
			    insideDestination: insideDestination,
			    last: previousImpact.displaced,
			    viewport: viewport,
			    afterCritical: afterCritical
			  });
			});

			var patchDroppableMap = (function (droppables, updated) {
			  var _extends2;

			  return _extends({}, droppables, (_extends2 = {}, _extends2[updated.descriptor.id] = updated, _extends2));
			});

			var clearUnusedPlaceholder = function clearUnusedPlaceholder(_ref) {
			  var previousImpact = _ref.previousImpact,
			      impact = _ref.impact,
			      droppables = _ref.droppables;
			  var last = whatIsDraggedOver(previousImpact);
			  var now = whatIsDraggedOver(impact);

			  if (!last) {
			    return droppables;
			  }

			  if (last === now) {
			    return droppables;
			  }

			  var lastDroppable = droppables[last];

			  if (!lastDroppable.subject.withPlaceholder) {
			    return droppables;
			  }

			  var updated = removePlaceholder(lastDroppable);
			  return patchDroppableMap(droppables, updated);
			};

			var recomputePlaceholders = (function (_ref2) {
			  var draggable = _ref2.draggable,
			      draggables = _ref2.draggables,
			      droppables = _ref2.droppables,
			      previousImpact = _ref2.previousImpact,
			      impact = _ref2.impact;
			  var cleaned = clearUnusedPlaceholder({
			    previousImpact: previousImpact,
			    impact: impact,
			    droppables: droppables
			  });
			  var isOver = whatIsDraggedOver(impact);

			  if (!isOver) {
			    return cleaned;
			  }

			  var droppable = droppables[isOver];

			  if (isHomeOf(draggable, droppable)) {
			    return cleaned;
			  }

			  if (droppable.subject.withPlaceholder) {
			    return cleaned;
			  }

			  var patched = addPlaceholder(droppable, draggable, draggables);
			  return patchDroppableMap(cleaned, patched);
			});

			var update = (function (_ref) {
			  var state = _ref.state,
			      forcedClientSelection = _ref.clientSelection,
			      forcedDimensions = _ref.dimensions,
			      forcedViewport = _ref.viewport,
			      forcedImpact = _ref.impact,
			      scrollJumpRequest = _ref.scrollJumpRequest;
			  var viewport = forcedViewport || state.viewport;
			  var dimensions = forcedDimensions || state.dimensions;
			  var clientSelection = forcedClientSelection || state.current.client.selection;
			  var offset = subtract(clientSelection, state.initial.client.selection);
			  var client = {
			    offset: offset,
			    selection: clientSelection,
			    borderBoxCenter: add(state.initial.client.borderBoxCenter, offset)
			  };
			  var page = {
			    selection: add(client.selection, viewport.scroll.current),
			    borderBoxCenter: add(client.borderBoxCenter, viewport.scroll.current),
			    offset: add(client.offset, viewport.scroll.diff.value)
			  };
			  var current = {
			    client: client,
			    page: page
			  };

			  if (state.phase === 'COLLECTING') {
			    return _extends({
			      phase: 'COLLECTING'
			    }, state, {
			      dimensions: dimensions,
			      viewport: viewport,
			      current: current
			    });
			  }

			  var draggable = dimensions.draggables[state.critical.draggable.id];
			  var newImpact = forcedImpact || getDragImpact({
			    pageOffset: page.offset,
			    draggable: draggable,
			    draggables: dimensions.draggables,
			    droppables: dimensions.droppables,
			    previousImpact: state.impact,
			    viewport: viewport,
			    afterCritical: state.afterCritical
			  });
			  var withUpdatedPlaceholders = recomputePlaceholders({
			    draggable: draggable,
			    impact: newImpact,
			    previousImpact: state.impact,
			    draggables: dimensions.draggables,
			    droppables: dimensions.droppables
			  });

			  var result = _extends({}, state, {
			    current: current,
			    dimensions: {
			      draggables: dimensions.draggables,
			      droppables: withUpdatedPlaceholders
			    },
			    impact: newImpact,
			    viewport: viewport,
			    scrollJumpRequest: scrollJumpRequest || null,
			    forceShouldAnimate: scrollJumpRequest ? false : null
			  });

			  return result;
			});

			function getDraggables$1(ids, draggables) {
			  return ids.map(function (id) {
			    return draggables[id];
			  });
			}

			var recompute = (function (_ref) {
			  var impact = _ref.impact,
			      viewport = _ref.viewport,
			      draggables = _ref.draggables,
			      destination = _ref.destination,
			      forceShouldAnimate = _ref.forceShouldAnimate;
			  var last = impact.displaced;
			  var afterDragging = getDraggables$1(last.all, draggables);
			  var displaced = getDisplacementGroups({
			    afterDragging: afterDragging,
			    destination: destination,
			    displacedBy: impact.displacedBy,
			    viewport: viewport.frame,
			    forceShouldAnimate: forceShouldAnimate,
			    last: last
			  });
			  return _extends({}, impact, {
			    displaced: displaced
			  });
			});

			var getClientBorderBoxCenter = (function (_ref) {
			  var impact = _ref.impact,
			      draggable = _ref.draggable,
			      droppable = _ref.droppable,
			      draggables = _ref.draggables,
			      viewport = _ref.viewport,
			      afterCritical = _ref.afterCritical;
			  var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
			    impact: impact,
			    draggable: draggable,
			    draggables: draggables,
			    droppable: droppable,
			    afterCritical: afterCritical
			  });
			  return getClientFromPageBorderBoxCenter({
			    pageBorderBoxCenter: pageBorderBoxCenter,
			    draggable: draggable,
			    viewport: viewport
			  });
			});

			var refreshSnap = (function (_ref) {
			  var state = _ref.state,
			      forcedDimensions = _ref.dimensions,
			      forcedViewport = _ref.viewport;
			  !(state.movementMode === 'SNAP') ? invariant(false) : void 0;
			  var needsVisibilityCheck = state.impact;
			  var viewport = forcedViewport || state.viewport;
			  var dimensions = forcedDimensions || state.dimensions;
			  var draggables = dimensions.draggables,
			      droppables = dimensions.droppables;
			  var draggable = draggables[state.critical.draggable.id];
			  var isOver = whatIsDraggedOver(needsVisibilityCheck);
			  !isOver ? invariant(false) : void 0;
			  var destination = droppables[isOver];
			  var impact = recompute({
			    impact: needsVisibilityCheck,
			    viewport: viewport,
			    destination: destination,
			    draggables: draggables
			  });
			  var clientSelection = getClientBorderBoxCenter({
			    impact: impact,
			    draggable: draggable,
			    droppable: destination,
			    draggables: draggables,
			    viewport: viewport,
			    afterCritical: state.afterCritical
			  });
			  return update({
			    impact: impact,
			    clientSelection: clientSelection,
			    state: state,
			    dimensions: dimensions,
			    viewport: viewport
			  });
			});

			var getHomeLocation = (function (descriptor) {
			  return {
			    index: descriptor.index,
			    droppableId: descriptor.droppableId
			  };
			});

			var getLiftEffect = (function (_ref) {
			  var draggable = _ref.draggable,
			      home = _ref.home,
			      draggables = _ref.draggables,
			      viewport = _ref.viewport;
			  var displacedBy = getDisplacedBy(home.axis, draggable.displaceBy);
			  var insideHome = getDraggablesInsideDroppable(home.descriptor.id, draggables);
			  var rawIndex = insideHome.indexOf(draggable);
			  !(rawIndex !== -1) ? invariant(false) : void 0;
			  var afterDragging = insideHome.slice(rawIndex + 1);
			  var effected = afterDragging.reduce(function (previous, item) {
			    previous[item.descriptor.id] = true;
			    return previous;
			  }, {});
			  var afterCritical = {
			    inVirtualList: home.descriptor.mode === 'virtual',
			    displacedBy: displacedBy,
			    effected: effected
			  };
			  var displaced = getDisplacementGroups({
			    afterDragging: afterDragging,
			    destination: home,
			    displacedBy: displacedBy,
			    last: null,
			    viewport: viewport.frame,
			    forceShouldAnimate: false
			  });
			  var impact = {
			    displaced: displaced,
			    displacedBy: displacedBy,
			    at: {
			      type: 'REORDER',
			      destination: getHomeLocation(draggable.descriptor)
			    }
			  };
			  return {
			    impact: impact,
			    afterCritical: afterCritical
			  };
			});

			var patchDimensionMap = (function (dimensions, updated) {
			  return {
			    draggables: dimensions.draggables,
			    droppables: patchDroppableMap(dimensions.droppables, updated)
			  };
			});

			var offsetDraggable = (function (_ref) {
			  var draggable = _ref.draggable,
			      offset = _ref.offset,
			      initialWindowScroll = _ref.initialWindowScroll;
			  var client = cssBoxModel.offset(draggable.client, offset);
			  var page = cssBoxModel.withScroll(client, initialWindowScroll);

			  var moved = _extends({}, draggable, {
			    placeholder: _extends({}, draggable.placeholder, {
			      client: client
			    }),
			    client: client,
			    page: page
			  });

			  return moved;
			});

			var getFrame = (function (droppable) {
			  var frame = droppable.frame;
			  !frame ? invariant(false) : void 0;
			  return frame;
			});

			var adjustAdditionsForScrollChanges = (function (_ref) {
			  var additions = _ref.additions,
			      updatedDroppables = _ref.updatedDroppables,
			      viewport = _ref.viewport;
			  var windowScrollChange = viewport.scroll.diff.value;
			  return additions.map(function (draggable) {
			    var droppableId = draggable.descriptor.droppableId;
			    var modified = updatedDroppables[droppableId];
			    var frame = getFrame(modified);
			    var droppableScrollChange = frame.scroll.diff.value;
			    var totalChange = add(windowScrollChange, droppableScrollChange);
			    var moved = offsetDraggable({
			      draggable: draggable,
			      offset: totalChange,
			      initialWindowScroll: viewport.scroll.initial
			    });
			    return moved;
			  });
			});

			var publishWhileDraggingInVirtual = (function (_ref) {
			  var state = _ref.state,
			      published = _ref.published;
			  var withScrollChange = published.modified.map(function (update) {
			    var existing = state.dimensions.droppables[update.droppableId];
			    var scrolled = scrollDroppable(existing, update.scroll);
			    return scrolled;
			  });

			  var droppables = _extends({}, state.dimensions.droppables, {}, toDroppableMap(withScrollChange));

			  var updatedAdditions = toDraggableMap(adjustAdditionsForScrollChanges({
			    additions: published.additions,
			    updatedDroppables: droppables,
			    viewport: state.viewport
			  }));

			  var draggables = _extends({}, state.dimensions.draggables, {}, updatedAdditions);

			  published.removals.forEach(function (id) {
			    delete draggables[id];
			  });
			  var dimensions = {
			    droppables: droppables,
			    draggables: draggables
			  };
			  var wasOverId = whatIsDraggedOver(state.impact);
			  var wasOver = wasOverId ? dimensions.droppables[wasOverId] : null;
			  var draggable = dimensions.draggables[state.critical.draggable.id];
			  var home = dimensions.droppables[state.critical.droppable.id];

			  var _getLiftEffect = getLiftEffect({
			    draggable: draggable,
			    home: home,
			    draggables: draggables,
			    viewport: state.viewport
			  }),
			      onLiftImpact = _getLiftEffect.impact,
			      afterCritical = _getLiftEffect.afterCritical;

			  var previousImpact = wasOver && wasOver.isCombineEnabled ? state.impact : onLiftImpact;
			  var impact = getDragImpact({
			    pageOffset: state.current.page.offset,
			    draggable: dimensions.draggables[state.critical.draggable.id],
			    draggables: dimensions.draggables,
			    droppables: dimensions.droppables,
			    previousImpact: previousImpact,
			    viewport: state.viewport,
			    afterCritical: afterCritical
			  });

			  var draggingState = _extends({
			    phase: 'DRAGGING'
			  }, state, {
			    phase: 'DRAGGING',
			    impact: impact,
			    onLiftImpact: onLiftImpact,
			    dimensions: dimensions,
			    afterCritical: afterCritical,
			    forceShouldAnimate: false
			  });

			  if (state.phase === 'COLLECTING') {
			    return draggingState;
			  }

			  var dropPending = _extends({
			    phase: 'DROP_PENDING'
			  }, draggingState, {
			    phase: 'DROP_PENDING',
			    reason: state.reason,
			    isWaiting: false
			  });

			  return dropPending;
			});

			var isSnapping = function isSnapping(state) {
			  return state.movementMode === 'SNAP';
			};

			var postDroppableChange = function postDroppableChange(state, updated, isEnabledChanging) {
			  var dimensions = patchDimensionMap(state.dimensions, updated);

			  if (!isSnapping(state) || isEnabledChanging) {
			    return update({
			      state: state,
			      dimensions: dimensions
			    });
			  }

			  return refreshSnap({
			    state: state,
			    dimensions: dimensions
			  });
			};

			function removeScrollJumpRequest(state) {
			  if (state.isDragging && state.movementMode === 'SNAP') {
			    return _extends({
			      phase: 'DRAGGING'
			    }, state, {
			      scrollJumpRequest: null
			    });
			  }

			  return state;
			}

			var idle = {
			  phase: 'IDLE',
			  completed: null,
			  shouldFlush: false
			};
			var reducer = (function (state, action) {
			  if (state === void 0) {
			    state = idle;
			  }

			  if (action.type === 'FLUSH') {
			    return _extends({}, idle, {
			      shouldFlush: true
			    });
			  }

			  if (action.type === 'INITIAL_PUBLISH') {
			    !(state.phase === 'IDLE') ? invariant(false) : void 0;
			    var _action$payload = action.payload,
			        critical = _action$payload.critical,
			        clientSelection = _action$payload.clientSelection,
			        viewport = _action$payload.viewport,
			        dimensions = _action$payload.dimensions,
			        movementMode = _action$payload.movementMode;
			    var draggable = dimensions.draggables[critical.draggable.id];
			    var home = dimensions.droppables[critical.droppable.id];
			    var client = {
			      selection: clientSelection,
			      borderBoxCenter: draggable.client.borderBox.center,
			      offset: origin
			    };
			    var initial = {
			      client: client,
			      page: {
			        selection: add(client.selection, viewport.scroll.initial),
			        borderBoxCenter: add(client.selection, viewport.scroll.initial),
			        offset: add(client.selection, viewport.scroll.diff.value)
			      }
			    };
			    var isWindowScrollAllowed = toDroppableList(dimensions.droppables).every(function (item) {
			      return !item.isFixedOnPage;
			    });

			    var _getLiftEffect = getLiftEffect({
			      draggable: draggable,
			      home: home,
			      draggables: dimensions.draggables,
			      viewport: viewport
			    }),
			        impact = _getLiftEffect.impact,
			        afterCritical = _getLiftEffect.afterCritical;

			    var result = {
			      phase: 'DRAGGING',
			      isDragging: true,
			      critical: critical,
			      movementMode: movementMode,
			      dimensions: dimensions,
			      initial: initial,
			      current: initial,
			      isWindowScrollAllowed: isWindowScrollAllowed,
			      impact: impact,
			      afterCritical: afterCritical,
			      onLiftImpact: impact,
			      viewport: viewport,
			      scrollJumpRequest: null,
			      forceShouldAnimate: null
			    };
			    return result;
			  }

			  if (action.type === 'COLLECTION_STARTING') {
			    if (state.phase === 'COLLECTING' || state.phase === 'DROP_PENDING') {
			      return state;
			    }

			    !(state.phase === 'DRAGGING') ? invariant(false) : void 0;

			    var _result = _extends({
			      phase: 'COLLECTING'
			    }, state, {
			      phase: 'COLLECTING'
			    });

			    return _result;
			  }

			  if (action.type === 'PUBLISH_WHILE_DRAGGING') {
			    !(state.phase === 'COLLECTING' || state.phase === 'DROP_PENDING') ? invariant(false) : void 0;
			    return publishWhileDraggingInVirtual({
			      state: state,
			      published: action.payload
			    });
			  }

			  if (action.type === 'MOVE') {
			    if (state.phase === 'DROP_PENDING') {
			      return state;
			    }

			    !isMovementAllowed(state) ? invariant(false) : void 0;
			    var _clientSelection = action.payload.client;

			    if (isEqual(_clientSelection, state.current.client.selection)) {
			      return state;
			    }

			    return update({
			      state: state,
			      clientSelection: _clientSelection,
			      impact: isSnapping(state) ? state.impact : null
			    });
			  }

			  if (action.type === 'UPDATE_DROPPABLE_SCROLL') {
			    if (state.phase === 'DROP_PENDING') {
			      return removeScrollJumpRequest(state);
			    }

			    if (state.phase === 'COLLECTING') {
			      return removeScrollJumpRequest(state);
			    }

			    !isMovementAllowed(state) ? invariant(false) : void 0;
			    var _action$payload2 = action.payload,
			        id = _action$payload2.id,
			        newScroll = _action$payload2.newScroll;
			    var target = state.dimensions.droppables[id];

			    if (!target) {
			      return state;
			    }

			    var scrolled = scrollDroppable(target, newScroll);
			    return postDroppableChange(state, scrolled, false);
			  }

			  if (action.type === 'UPDATE_DROPPABLE_IS_ENABLED') {
			    if (state.phase === 'DROP_PENDING') {
			      return state;
			    }

			    !isMovementAllowed(state) ? invariant(false) : void 0;
			    var _action$payload3 = action.payload,
			        _id = _action$payload3.id,
			        isEnabled = _action$payload3.isEnabled;
			    var _target = state.dimensions.droppables[_id];
			    !_target ? invariant(false) : void 0;
			    !(_target.isEnabled !== isEnabled) ? invariant(false) : void 0;

			    var updated = _extends({}, _target, {
			      isEnabled: isEnabled
			    });

			    return postDroppableChange(state, updated, true);
			  }

			  if (action.type === 'UPDATE_DROPPABLE_IS_COMBINE_ENABLED') {
			    if (state.phase === 'DROP_PENDING') {
			      return state;
			    }

			    !isMovementAllowed(state) ? invariant(false) : void 0;
			    var _action$payload4 = action.payload,
			        _id2 = _action$payload4.id,
			        isCombineEnabled = _action$payload4.isCombineEnabled;
			    var _target2 = state.dimensions.droppables[_id2];
			    !_target2 ? invariant(false) : void 0;
			    !(_target2.isCombineEnabled !== isCombineEnabled) ? invariant(false) : void 0;

			    var _updated = _extends({}, _target2, {
			      isCombineEnabled: isCombineEnabled
			    });

			    return postDroppableChange(state, _updated, true);
			  }

			  if (action.type === 'MOVE_BY_WINDOW_SCROLL') {
			    if (state.phase === 'DROP_PENDING' || state.phase === 'DROP_ANIMATING') {
			      return state;
			    }

			    !isMovementAllowed(state) ? invariant(false) : void 0;
			    !state.isWindowScrollAllowed ? invariant(false) : void 0;
			    var _newScroll = action.payload.newScroll;

			    if (isEqual(state.viewport.scroll.current, _newScroll)) {
			      return removeScrollJumpRequest(state);
			    }

			    var _viewport = scrollViewport(state.viewport, _newScroll);

			    if (isSnapping(state)) {
			      return refreshSnap({
			        state: state,
			        viewport: _viewport
			      });
			    }

			    return update({
			      state: state,
			      viewport: _viewport
			    });
			  }

			  if (action.type === 'UPDATE_VIEWPORT_MAX_SCROLL') {
			    if (!isMovementAllowed(state)) {
			      return state;
			    }

			    var maxScroll = action.payload.maxScroll;

			    if (isEqual(maxScroll, state.viewport.scroll.max)) {
			      return state;
			    }

			    var withMaxScroll = _extends({}, state.viewport, {
			      scroll: _extends({}, state.viewport.scroll, {
			        max: maxScroll
			      })
			    });

			    return _extends({
			      phase: 'DRAGGING'
			    }, state, {
			      viewport: withMaxScroll
			    });
			  }

			  if (action.type === 'MOVE_UP' || action.type === 'MOVE_DOWN' || action.type === 'MOVE_LEFT' || action.type === 'MOVE_RIGHT') {
			    if (state.phase === 'COLLECTING' || state.phase === 'DROP_PENDING') {
			      return state;
			    }

			    !(state.phase === 'DRAGGING') ? invariant(false) : void 0;

			    var _result2 = moveInDirection({
			      state: state,
			      type: action.type
			    });

			    if (!_result2) {
			      return state;
			    }

			    return update({
			      state: state,
			      impact: _result2.impact,
			      clientSelection: _result2.clientSelection,
			      scrollJumpRequest: _result2.scrollJumpRequest
			    });
			  }

			  if (action.type === 'DROP_PENDING') {
			    var reason = action.payload.reason;
			    !(state.phase === 'COLLECTING') ? invariant(false) : void 0;

			    var newState = _extends({
			      phase: 'DROP_PENDING'
			    }, state, {
			      phase: 'DROP_PENDING',
			      isWaiting: true,
			      reason: reason
			    });

			    return newState;
			  }

			  if (action.type === 'DROP_ANIMATE') {
			    var _action$payload5 = action.payload,
			        completed = _action$payload5.completed,
			        dropDuration = _action$payload5.dropDuration,
			        newHomeClientOffset = _action$payload5.newHomeClientOffset;
			    !(state.phase === 'DRAGGING' || state.phase === 'DROP_PENDING') ? invariant(false) : void 0;
			    var _result3 = {
			      phase: 'DROP_ANIMATING',
			      completed: completed,
			      dropDuration: dropDuration,
			      newHomeClientOffset: newHomeClientOffset,
			      dimensions: state.dimensions
			    };
			    return _result3;
			  }

			  if (action.type === 'DROP_COMPLETE') {
			    var _completed = action.payload.completed;
			    return {
			      phase: 'IDLE',
			      completed: _completed,
			      shouldFlush: false
			    };
			  }

			  return state;
			});

			var beforeInitialCapture = function beforeInitialCapture(args) {
			  return {
			    type: 'BEFORE_INITIAL_CAPTURE',
			    payload: args
			  };
			};
			var lift = function lift(args) {
			  return {
			    type: 'LIFT',
			    payload: args
			  };
			};
			var initialPublish = function initialPublish(args) {
			  return {
			    type: 'INITIAL_PUBLISH',
			    payload: args
			  };
			};
			var publishWhileDragging = function publishWhileDragging(args) {
			  return {
			    type: 'PUBLISH_WHILE_DRAGGING',
			    payload: args
			  };
			};
			var collectionStarting = function collectionStarting() {
			  return {
			    type: 'COLLECTION_STARTING',
			    payload: null
			  };
			};
			var updateDroppableScroll = function updateDroppableScroll(args) {
			  return {
			    type: 'UPDATE_DROPPABLE_SCROLL',
			    payload: args
			  };
			};
			var updateDroppableIsEnabled = function updateDroppableIsEnabled(args) {
			  return {
			    type: 'UPDATE_DROPPABLE_IS_ENABLED',
			    payload: args
			  };
			};
			var updateDroppableIsCombineEnabled = function updateDroppableIsCombineEnabled(args) {
			  return {
			    type: 'UPDATE_DROPPABLE_IS_COMBINE_ENABLED',
			    payload: args
			  };
			};
			var move = function move(args) {
			  return {
			    type: 'MOVE',
			    payload: args
			  };
			};
			var moveByWindowScroll = function moveByWindowScroll(args) {
			  return {
			    type: 'MOVE_BY_WINDOW_SCROLL',
			    payload: args
			  };
			};
			var updateViewportMaxScroll = function updateViewportMaxScroll(args) {
			  return {
			    type: 'UPDATE_VIEWPORT_MAX_SCROLL',
			    payload: args
			  };
			};
			var moveUp = function moveUp() {
			  return {
			    type: 'MOVE_UP',
			    payload: null
			  };
			};
			var moveDown = function moveDown() {
			  return {
			    type: 'MOVE_DOWN',
			    payload: null
			  };
			};
			var moveRight = function moveRight() {
			  return {
			    type: 'MOVE_RIGHT',
			    payload: null
			  };
			};
			var moveLeft = function moveLeft() {
			  return {
			    type: 'MOVE_LEFT',
			    payload: null
			  };
			};
			var flush = function flush() {
			  return {
			    type: 'FLUSH',
			    payload: null
			  };
			};
			var animateDrop = function animateDrop(args) {
			  return {
			    type: 'DROP_ANIMATE',
			    payload: args
			  };
			};
			var completeDrop = function completeDrop(args) {
			  return {
			    type: 'DROP_COMPLETE',
			    payload: args
			  };
			};
			var drop = function drop(args) {
			  return {
			    type: 'DROP',
			    payload: args
			  };
			};
			var dropPending = function dropPending(args) {
			  return {
			    type: 'DROP_PENDING',
			    payload: args
			  };
			};
			var dropAnimationFinished = function dropAnimationFinished() {
			  return {
			    type: 'DROP_ANIMATION_FINISHED',
			    payload: null
			  };
			};

			var lift$1 = (function (marshal) {
			  return function (_ref) {
			    var getState = _ref.getState,
			        dispatch = _ref.dispatch;
			    return function (next) {
			      return function (action) {
			        if (action.type !== 'LIFT') {
			          next(action);
			          return;
			        }

			        var _action$payload = action.payload,
			            id = _action$payload.id,
			            clientSelection = _action$payload.clientSelection,
			            movementMode = _action$payload.movementMode;
			        var initial = getState();

			        if (initial.phase === 'DROP_ANIMATING') {
			          dispatch(completeDrop({
			            completed: initial.completed
			          }));
			        }

			        !(getState().phase === 'IDLE') ? invariant(false) : void 0;
			        dispatch(flush());
			        dispatch(beforeInitialCapture({
			          draggableId: id,
			          movementMode: movementMode
			        }));
			        var scrollOptions = {
			          shouldPublishImmediately: movementMode === 'SNAP'
			        };
			        var request = {
			          draggableId: id,
			          scrollOptions: scrollOptions
			        };

			        var _marshal$startPublish = marshal.startPublishing(request),
			            critical = _marshal$startPublish.critical,
			            dimensions = _marshal$startPublish.dimensions,
			            viewport = _marshal$startPublish.viewport;
			        dispatch(initialPublish({
			          critical: critical,
			          dimensions: dimensions,
			          clientSelection: clientSelection,
			          movementMode: movementMode,
			          viewport: viewport
			        }));
			      };
			    };
			  };
			});

			var style = (function (marshal) {
			  return function () {
			    return function (next) {
			      return function (action) {
			        if (action.type === 'INITIAL_PUBLISH') {
			          marshal.dragging();
			        }

			        if (action.type === 'DROP_ANIMATE') {
			          marshal.dropping(action.payload.completed.result.reason);
			        }

			        if (action.type === 'FLUSH' || action.type === 'DROP_COMPLETE') {
			          marshal.resting();
			        }

			        next(action);
			      };
			    };
			  };
			});

			var curves = {
			  outOfTheWay: 'cubic-bezier(0.2, 0, 0, 1)',
			  drop: 'cubic-bezier(.2,1,.1,1)'
			};
			var combine = {
			  opacity: {
			    drop: 0,
			    combining: 0.7
			  },
			  scale: {
			    drop: 0.75
			  }
			};
			var timings = {
			  outOfTheWay: 0.2,
			  minDropTime: 0.33,
			  maxDropTime: 0.55
			};
			var outOfTheWayTiming = timings.outOfTheWay + "s " + curves.outOfTheWay;
			var transitions = {
			  fluid: "opacity " + outOfTheWayTiming,
			  snap: "transform " + outOfTheWayTiming + ", opacity " + outOfTheWayTiming,
			  drop: function drop(duration) {
			    var timing = duration + "s " + curves.drop;
			    return "transform " + timing + ", opacity " + timing;
			  },
			  outOfTheWay: "transform " + outOfTheWayTiming,
			  placeholder: "height " + outOfTheWayTiming + ", width " + outOfTheWayTiming + ", margin " + outOfTheWayTiming
			};

			var moveTo = function moveTo(offset) {
			  return isEqual(offset, origin) ? null : "translate(" + offset.x + "px, " + offset.y + "px)";
			};

			var transforms = {
			  moveTo: moveTo,
			  drop: function drop(offset, isCombining) {
			    var translate = moveTo(offset);

			    if (!translate) {
			      return null;
			    }

			    if (!isCombining) {
			      return translate;
			    }

			    return translate + " scale(" + combine.scale.drop + ")";
			  }
			};

			var minDropTime = timings.minDropTime,
			    maxDropTime = timings.maxDropTime;
			var dropTimeRange = maxDropTime - minDropTime;
			var maxDropTimeAtDistance = 1500;
			var cancelDropModifier = 0.6;
			var getDropDuration = (function (_ref) {
			  var current = _ref.current,
			      destination = _ref.destination,
			      reason = _ref.reason;
			  var distance$1 = distance(current, destination);

			  if (distance$1 <= 0) {
			    return minDropTime;
			  }

			  if (distance$1 >= maxDropTimeAtDistance) {
			    return maxDropTime;
			  }

			  var percentage = distance$1 / maxDropTimeAtDistance;
			  var duration = minDropTime + dropTimeRange * percentage;
			  var withDuration = reason === 'CANCEL' ? duration * cancelDropModifier : duration;
			  return Number(withDuration.toFixed(2));
			});

			var getNewHomeClientOffset = (function (_ref) {
			  var impact = _ref.impact,
			      draggable = _ref.draggable,
			      dimensions = _ref.dimensions,
			      viewport = _ref.viewport,
			      afterCritical = _ref.afterCritical;
			  var draggables = dimensions.draggables,
			      droppables = dimensions.droppables;
			  var droppableId = whatIsDraggedOver(impact);
			  var destination = droppableId ? droppables[droppableId] : null;
			  var home = droppables[draggable.descriptor.droppableId];
			  var newClientCenter = getClientBorderBoxCenter({
			    impact: impact,
			    draggable: draggable,
			    draggables: draggables,
			    afterCritical: afterCritical,
			    droppable: destination || home,
			    viewport: viewport
			  });
			  var offset = subtract(newClientCenter, draggable.client.borderBox.center);
			  return offset;
			});

			var getDropImpact = (function (_ref) {
			  var draggables = _ref.draggables,
			      reason = _ref.reason,
			      lastImpact = _ref.lastImpact,
			      home = _ref.home,
			      viewport = _ref.viewport,
			      onLiftImpact = _ref.onLiftImpact;

			  if (!lastImpact.at || reason !== 'DROP') {
			    var recomputedHomeImpact = recompute({
			      draggables: draggables,
			      impact: onLiftImpact,
			      destination: home,
			      viewport: viewport,
			      forceShouldAnimate: true
			    });
			    return {
			      impact: recomputedHomeImpact,
			      didDropInsideDroppable: false
			    };
			  }

			  if (lastImpact.at.type === 'REORDER') {
			    return {
			      impact: lastImpact,
			      didDropInsideDroppable: true
			    };
			  }

			  var withoutMovement = _extends({}, lastImpact, {
			    displaced: emptyGroups
			  });

			  return {
			    impact: withoutMovement,
			    didDropInsideDroppable: true
			  };
			});

			var drop$1 = (function (_ref) {
			  var getState = _ref.getState,
			      dispatch = _ref.dispatch;
			  return function (next) {
			    return function (action) {
			      if (action.type !== 'DROP') {
			        next(action);
			        return;
			      }

			      var state = getState();
			      var reason = action.payload.reason;

			      if (state.phase === 'COLLECTING') {
			        dispatch(dropPending({
			          reason: reason
			        }));
			        return;
			      }

			      if (state.phase === 'IDLE') {
			        return;
			      }

			      var isWaitingForDrop = state.phase === 'DROP_PENDING' && state.isWaiting;
			      !!isWaitingForDrop ? invariant(false) : void 0;
			      !(state.phase === 'DRAGGING' || state.phase === 'DROP_PENDING') ? invariant(false) : void 0;
			      var critical = state.critical;
			      var dimensions = state.dimensions;
			      var draggable = dimensions.draggables[state.critical.draggable.id];

			      var _getDropImpact = getDropImpact({
			        reason: reason,
			        lastImpact: state.impact,
			        afterCritical: state.afterCritical,
			        onLiftImpact: state.onLiftImpact,
			        home: state.dimensions.droppables[state.critical.droppable.id],
			        viewport: state.viewport,
			        draggables: state.dimensions.draggables
			      }),
			          impact = _getDropImpact.impact,
			          didDropInsideDroppable = _getDropImpact.didDropInsideDroppable;

			      var destination = didDropInsideDroppable ? tryGetDestination(impact) : null;
			      var combine = didDropInsideDroppable ? tryGetCombine(impact) : null;
			      var source = {
			        index: critical.draggable.index,
			        droppableId: critical.droppable.id
			      };
			      var result = {
			        draggableId: draggable.descriptor.id,
			        type: draggable.descriptor.type,
			        source: source,
			        reason: reason,
			        mode: state.movementMode,
			        destination: destination,
			        combine: combine
			      };
			      var newHomeClientOffset = getNewHomeClientOffset({
			        impact: impact,
			        draggable: draggable,
			        dimensions: dimensions,
			        viewport: state.viewport,
			        afterCritical: state.afterCritical
			      });
			      var completed = {
			        critical: state.critical,
			        afterCritical: state.afterCritical,
			        result: result,
			        impact: impact
			      };
			      var isAnimationRequired = !isEqual(state.current.client.offset, newHomeClientOffset) || Boolean(result.combine);

			      if (!isAnimationRequired) {
			        dispatch(completeDrop({
			          completed: completed
			        }));
			        return;
			      }

			      var dropDuration = getDropDuration({
			        current: state.current.client.offset,
			        destination: newHomeClientOffset,
			        reason: reason
			      });
			      var args = {
			        newHomeClientOffset: newHomeClientOffset,
			        dropDuration: dropDuration,
			        completed: completed
			      };
			      dispatch(animateDrop(args));
			    };
			  };
			});

			var getWindowScroll = (function () {
			  return {
			    x: window.pageXOffset,
			    y: window.pageYOffset
			  };
			});

			function getWindowScrollBinding(update) {
			  return {
			    eventName: 'scroll',
			    options: {
			      passive: true,
			      capture: false
			    },
			    fn: function fn(event) {
			      if (event.target !== window && event.target !== window.document) {
			        return;
			      }

			      update();
			    }
			  };
			}

			function getScrollListener(_ref) {
			  var onWindowScroll = _ref.onWindowScroll;

			  function updateScroll() {
			    onWindowScroll(getWindowScroll());
			  }

			  var scheduled = rafSchd(updateScroll);
			  var binding = getWindowScrollBinding(scheduled);
			  var unbind = noop;

			  function isActive() {
			    return unbind !== noop;
			  }

			  function start() {
			    !!isActive() ? invariant(false) : void 0;
			    unbind = bindEvents(window, [binding]);
			  }

			  function stop() {
			    !isActive() ? invariant(false) : void 0;
			    scheduled.cancel();
			    unbind();
			    unbind = noop;
			  }

			  return {
			    start: start,
			    stop: stop,
			    isActive: isActive
			  };
			}

			var shouldEnd = function shouldEnd(action) {
			  return action.type === 'DROP_COMPLETE' || action.type === 'DROP_ANIMATE' || action.type === 'FLUSH';
			};

			var scrollListener = (function (store) {
			  var listener = getScrollListener({
			    onWindowScroll: function onWindowScroll(newScroll) {
			      store.dispatch(moveByWindowScroll({
			        newScroll: newScroll
			      }));
			    }
			  });
			  return function (next) {
			    return function (action) {
			      if (!listener.isActive() && action.type === 'INITIAL_PUBLISH') {
			        listener.start();
			      }

			      if (listener.isActive() && shouldEnd(action)) {
			        listener.stop();
			      }

			      next(action);
			    };
			  };
			});

			var getExpiringAnnounce = (function (announce) {
			  var wasCalled = false;
			  var isExpired = false;
			  var timeoutId = setTimeout(function () {
			    isExpired = true;
			  });

			  var result = function result(message) {
			    if (wasCalled) {
			      return;
			    }

			    if (isExpired) {
			      return;
			    }

			    wasCalled = true;
			    announce(message);
			    clearTimeout(timeoutId);
			  };

			  result.wasCalled = function () {
			    return wasCalled;
			  };

			  return result;
			});

			var getAsyncMarshal = (function () {
			  var entries = [];

			  var execute = function execute(timerId) {
			    var index = findIndex(entries, function (item) {
			      return item.timerId === timerId;
			    });
			    !(index !== -1) ? invariant(false) : void 0;

			    var _entries$splice = entries.splice(index, 1),
			        entry = _entries$splice[0];

			    entry.callback();
			  };

			  var add = function add(fn) {
			    var timerId = setTimeout(function () {
			      return execute(timerId);
			    });
			    var entry = {
			      timerId: timerId,
			      callback: fn
			    };
			    entries.push(entry);
			  };

			  var flush = function flush() {
			    if (!entries.length) {
			      return;
			    }

			    var shallow = [].concat(entries);
			    entries.length = 0;
			    shallow.forEach(function (entry) {
			      clearTimeout(entry.timerId);
			      entry.callback();
			    });
			  };

			  return {
			    add: add,
			    flush: flush
			  };
			});

			var areLocationsEqual = function areLocationsEqual(first, second) {
			  if (first == null && second == null) {
			    return true;
			  }

			  if (first == null || second == null) {
			    return false;
			  }

			  return first.droppableId === second.droppableId && first.index === second.index;
			};
			var isCombineEqual = function isCombineEqual(first, second) {
			  if (first == null && second == null) {
			    return true;
			  }

			  if (first == null || second == null) {
			    return false;
			  }

			  return first.draggableId === second.draggableId && first.droppableId === second.droppableId;
			};
			var isCriticalEqual = function isCriticalEqual(first, second) {
			  if (first === second) {
			    return true;
			  }

			  var isDraggableEqual = first.draggable.id === second.draggable.id && first.draggable.droppableId === second.draggable.droppableId && first.draggable.type === second.draggable.type && first.draggable.index === second.draggable.index;
			  var isDroppableEqual = first.droppable.id === second.droppable.id && first.droppable.type === second.droppable.type;
			  return isDraggableEqual && isDroppableEqual;
			};

			var withTimings = function withTimings(key, fn) {
			  fn();
			};

			var getDragStart = function getDragStart(critical, mode) {
			  return {
			    draggableId: critical.draggable.id,
			    type: critical.droppable.type,
			    source: {
			      droppableId: critical.droppable.id,
			      index: critical.draggable.index
			    },
			    mode: mode
			  };
			};

			var execute = function execute(responder, data, announce, getDefaultMessage) {
			  if (!responder) {
			    announce(getDefaultMessage(data));
			    return;
			  }

			  var willExpire = getExpiringAnnounce(announce);
			  var provided = {
			    announce: willExpire
			  };
			  responder(data, provided);

			  if (!willExpire.wasCalled()) {
			    announce(getDefaultMessage(data));
			  }
			};

			var getPublisher = (function (getResponders, announce) {
			  var asyncMarshal = getAsyncMarshal();
			  var dragging = null;

			  var beforeCapture = function beforeCapture(draggableId, mode) {
			    !!dragging ? invariant(false) : void 0;
			    withTimings('onBeforeCapture', function () {
			      var fn = getResponders().onBeforeCapture;

			      if (fn) {
			        var before = {
			          draggableId: draggableId,
			          mode: mode
			        };
			        fn(before);
			      }
			    });
			  };

			  var beforeStart = function beforeStart(critical, mode) {
			    !!dragging ? invariant(false) : void 0;
			    withTimings('onBeforeDragStart', function () {
			      var fn = getResponders().onBeforeDragStart;

			      if (fn) {
			        fn(getDragStart(critical, mode));
			      }
			    });
			  };

			  var start = function start(critical, mode) {
			    !!dragging ? invariant(false) : void 0;
			    var data = getDragStart(critical, mode);
			    dragging = {
			      mode: mode,
			      lastCritical: critical,
			      lastLocation: data.source,
			      lastCombine: null
			    };
			    asyncMarshal.add(function () {
			      withTimings('onDragStart', function () {
			        return execute(getResponders().onDragStart, data, announce, preset.onDragStart);
			      });
			    });
			  };

			  var update = function update(critical, impact) {
			    var location = tryGetDestination(impact);
			    var combine = tryGetCombine(impact);
			    !dragging ? invariant(false) : void 0;
			    var hasCriticalChanged = !isCriticalEqual(critical, dragging.lastCritical);

			    if (hasCriticalChanged) {
			      dragging.lastCritical = critical;
			    }

			    var hasLocationChanged = !areLocationsEqual(dragging.lastLocation, location);

			    if (hasLocationChanged) {
			      dragging.lastLocation = location;
			    }

			    var hasGroupingChanged = !isCombineEqual(dragging.lastCombine, combine);

			    if (hasGroupingChanged) {
			      dragging.lastCombine = combine;
			    }

			    if (!hasCriticalChanged && !hasLocationChanged && !hasGroupingChanged) {
			      return;
			    }

			    var data = _extends({}, getDragStart(critical, dragging.mode), {
			      combine: combine,
			      destination: location
			    });

			    asyncMarshal.add(function () {
			      withTimings('onDragUpdate', function () {
			        return execute(getResponders().onDragUpdate, data, announce, preset.onDragUpdate);
			      });
			    });
			  };

			  var flush = function flush() {
			    !dragging ? invariant(false) : void 0;
			    asyncMarshal.flush();
			  };

			  var drop = function drop(result) {
			    !dragging ? invariant(false) : void 0;
			    dragging = null;
			    withTimings('onDragEnd', function () {
			      return execute(getResponders().onDragEnd, result, announce, preset.onDragEnd);
			    });
			  };

			  var abort = function abort() {
			    if (!dragging) {
			      return;
			    }

			    var result = _extends({}, getDragStart(dragging.lastCritical, dragging.mode), {
			      combine: null,
			      destination: null,
			      reason: 'CANCEL'
			    });

			    drop(result);
			  };

			  return {
			    beforeCapture: beforeCapture,
			    beforeStart: beforeStart,
			    start: start,
			    update: update,
			    flush: flush,
			    drop: drop,
			    abort: abort
			  };
			});

			var responders = (function (getResponders, announce) {
			  var publisher = getPublisher(getResponders, announce);
			  return function (store) {
			    return function (next) {
			      return function (action) {
			        if (action.type === 'BEFORE_INITIAL_CAPTURE') {
			          publisher.beforeCapture(action.payload.draggableId, action.payload.movementMode);
			          return;
			        }

			        if (action.type === 'INITIAL_PUBLISH') {
			          var critical = action.payload.critical;
			          publisher.beforeStart(critical, action.payload.movementMode);
			          next(action);
			          publisher.start(critical, action.payload.movementMode);
			          return;
			        }

			        if (action.type === 'DROP_COMPLETE') {
			          var result = action.payload.completed.result;
			          publisher.flush();
			          next(action);
			          publisher.drop(result);
			          return;
			        }

			        next(action);

			        if (action.type === 'FLUSH') {
			          publisher.abort();
			          return;
			        }

			        var state = store.getState();

			        if (state.phase === 'DRAGGING') {
			          publisher.update(state.critical, state.impact);
			        }
			      };
			    };
			  };
			});

			var dropAnimationFinish = (function (store) {
			  return function (next) {
			    return function (action) {
			      if (action.type !== 'DROP_ANIMATION_FINISHED') {
			        next(action);
			        return;
			      }

			      var state = store.getState();
			      !(state.phase === 'DROP_ANIMATING') ? invariant(false) : void 0;
			      store.dispatch(completeDrop({
			        completed: state.completed
			      }));
			    };
			  };
			});

			var dropAnimationFlushOnScroll = (function (store) {
			  var unbind = null;
			  var frameId = null;

			  function clear() {
			    if (frameId) {
			      cancelAnimationFrame(frameId);
			      frameId = null;
			    }

			    if (unbind) {
			      unbind();
			      unbind = null;
			    }
			  }

			  return function (next) {
			    return function (action) {
			      if (action.type === 'FLUSH' || action.type === 'DROP_COMPLETE' || action.type === 'DROP_ANIMATION_FINISHED') {
			        clear();
			      }

			      next(action);

			      if (action.type !== 'DROP_ANIMATE') {
			        return;
			      }

			      var binding = {
			        eventName: 'scroll',
			        options: {
			          capture: true,
			          passive: false,
			          once: true
			        },
			        fn: function flushDropAnimation() {
			          var state = store.getState();

			          if (state.phase === 'DROP_ANIMATING') {
			            store.dispatch(dropAnimationFinished());
			          }
			        }
			      };
			      frameId = requestAnimationFrame(function () {
			        frameId = null;
			        unbind = bindEvents(window, [binding]);
			      });
			    };
			  };
			});

			var dimensionMarshalStopper = (function (marshal) {
			  return function () {
			    return function (next) {
			      return function (action) {
			        if (action.type === 'DROP_COMPLETE' || action.type === 'FLUSH' || action.type === 'DROP_ANIMATE') {
			          marshal.stopPublishing();
			        }

			        next(action);
			      };
			    };
			  };
			});

			var focus = (function (marshal) {
			  var isWatching = false;
			  return function () {
			    return function (next) {
			      return function (action) {
			        if (action.type === 'INITIAL_PUBLISH') {
			          isWatching = true;
			          marshal.tryRecordFocus(action.payload.critical.draggable.id);
			          next(action);
			          marshal.tryRestoreFocusRecorded();
			          return;
			        }

			        next(action);

			        if (!isWatching) {
			          return;
			        }

			        if (action.type === 'FLUSH') {
			          isWatching = false;
			          marshal.tryRestoreFocusRecorded();
			          return;
			        }

			        if (action.type === 'DROP_COMPLETE') {
			          isWatching = false;
			          var result = action.payload.completed.result;

			          if (result.combine) {
			            marshal.tryShiftRecord(result.draggableId, result.combine.draggableId);
			          }

			          marshal.tryRestoreFocusRecorded();
			        }
			      };
			    };
			  };
			});

			var shouldStop = function shouldStop(action) {
			  return action.type === 'DROP_COMPLETE' || action.type === 'DROP_ANIMATE' || action.type === 'FLUSH';
			};

			var autoScroll = (function (autoScroller) {
			  return function (store) {
			    return function (next) {
			      return function (action) {
			        if (shouldStop(action)) {
			          autoScroller.stop();
			          next(action);
			          return;
			        }

			        if (action.type === 'INITIAL_PUBLISH') {
			          next(action);
			          var state = store.getState();
			          !(state.phase === 'DRAGGING') ? invariant(false) : void 0;
			          autoScroller.start(state);
			          return;
			        }

			        next(action);
			        autoScroller.scroll(store.getState());
			      };
			    };
			  };
			});

			var pendingDrop = (function (store) {
			  return function (next) {
			    return function (action) {
			      next(action);

			      if (action.type !== 'PUBLISH_WHILE_DRAGGING') {
			        return;
			      }

			      var postActionState = store.getState();

			      if (postActionState.phase !== 'DROP_PENDING') {
			        return;
			      }

			      if (postActionState.isWaiting) {
			        return;
			      }

			      store.dispatch(drop({
			        reason: postActionState.reason
			      }));
			    };
			  };
			});

			var composeEnhancers = redux.compose;
			var createStore = (function (_ref) {
			  var dimensionMarshal = _ref.dimensionMarshal,
			      focusMarshal = _ref.focusMarshal,
			      styleMarshal = _ref.styleMarshal,
			      getResponders = _ref.getResponders,
			      announce = _ref.announce,
			      autoScroller = _ref.autoScroller;
			  return redux.createStore(reducer, composeEnhancers(redux.applyMiddleware(style(styleMarshal), dimensionMarshalStopper(dimensionMarshal), lift$1(dimensionMarshal), drop$1, dropAnimationFinish, dropAnimationFlushOnScroll, pendingDrop, autoScroll(autoScroller), scrollListener, focus(focusMarshal), responders(getResponders, announce))));
			});

			var clean$1 = function clean() {
			  return {
			    additions: {},
			    removals: {},
			    modified: {}
			  };
			};
			function createPublisher(_ref) {
			  var registry = _ref.registry,
			      callbacks = _ref.callbacks;
			  var staging = clean$1();
			  var frameId = null;

			  var collect = function collect() {
			    if (frameId) {
			      return;
			    }

			    callbacks.collectionStarting();
			    frameId = requestAnimationFrame(function () {
			      frameId = null;
			      var _staging = staging,
			          additions = _staging.additions,
			          removals = _staging.removals,
			          modified = _staging.modified;
			      var added = Object.keys(additions).map(function (id) {
			        return registry.draggable.getById(id).getDimension(origin);
			      }).sort(function (a, b) {
			        return a.descriptor.index - b.descriptor.index;
			      });
			      var updated = Object.keys(modified).map(function (id) {
			        var entry = registry.droppable.getById(id);
			        var scroll = entry.callbacks.getScrollWhileDragging();
			        return {
			          droppableId: id,
			          scroll: scroll
			        };
			      });
			      var result = {
			        additions: added,
			        removals: Object.keys(removals),
			        modified: updated
			      };
			      staging = clean$1();
			      callbacks.publish(result);
			    });
			  };

			  var add = function add(entry) {
			    var id = entry.descriptor.id;
			    staging.additions[id] = entry;
			    staging.modified[entry.descriptor.droppableId] = true;

			    if (staging.removals[id]) {
			      delete staging.removals[id];
			    }

			    collect();
			  };

			  var remove = function remove(entry) {
			    var descriptor = entry.descriptor;
			    staging.removals[descriptor.id] = true;
			    staging.modified[descriptor.droppableId] = true;

			    if (staging.additions[descriptor.id]) {
			      delete staging.additions[descriptor.id];
			    }

			    collect();
			  };

			  var stop = function stop() {
			    if (!frameId) {
			      return;
			    }

			    cancelAnimationFrame(frameId);
			    frameId = null;
			    staging = clean$1();
			  };

			  return {
			    add: add,
			    remove: remove,
			    stop: stop
			  };
			}

			var getMaxScroll = (function (_ref) {
			  var scrollHeight = _ref.scrollHeight,
			      scrollWidth = _ref.scrollWidth,
			      height = _ref.height,
			      width = _ref.width;
			  var maxScroll = subtract({
			    x: scrollWidth,
			    y: scrollHeight
			  }, {
			    x: width,
			    y: height
			  });
			  var adjustedMaxScroll = {
			    x: Math.max(0, maxScroll.x),
			    y: Math.max(0, maxScroll.y)
			  };
			  return adjustedMaxScroll;
			});

			var getDocumentElement = (function () {
			  var doc = document.documentElement;
			  !doc ? invariant(false) : void 0;
			  return doc;
			});

			var getMaxWindowScroll = (function () {
			  var doc = getDocumentElement();
			  var maxScroll = getMaxScroll({
			    scrollHeight: doc.scrollHeight,
			    scrollWidth: doc.scrollWidth,
			    width: doc.clientWidth,
			    height: doc.clientHeight
			  });
			  return maxScroll;
			});

			var getViewport = (function () {
			  var scroll = getWindowScroll();
			  var maxScroll = getMaxWindowScroll();
			  var top = scroll.y;
			  var left = scroll.x;
			  var doc = getDocumentElement();
			  var width = doc.clientWidth;
			  var height = doc.clientHeight;
			  var right = left + width;
			  var bottom = top + height;
			  var frame = cssBoxModel.getRect({
			    top: top,
			    left: left,
			    right: right,
			    bottom: bottom
			  });
			  var viewport = {
			    frame: frame,
			    scroll: {
			      initial: scroll,
			      current: scroll,
			      max: maxScroll,
			      diff: {
			        value: origin,
			        displacement: origin
			      }
			    }
			  };
			  return viewport;
			});

			var getInitialPublish = (function (_ref) {
			  var critical = _ref.critical,
			      scrollOptions = _ref.scrollOptions,
			      registry = _ref.registry;
			  var viewport = getViewport();
			  var windowScroll = viewport.scroll.current;
			  var home = critical.droppable;
			  var droppables = registry.droppable.getAllByType(home.type).map(function (entry) {
			    return entry.callbacks.getDimensionAndWatchScroll(windowScroll, scrollOptions);
			  });
			  var draggables = registry.draggable.getAllByType(critical.draggable.type).map(function (entry) {
			    return entry.getDimension(windowScroll);
			  });
			  var dimensions = {
			    draggables: toDraggableMap(draggables),
			    droppables: toDroppableMap(droppables)
			  };
			  var result = {
			    dimensions: dimensions,
			    critical: critical,
			    viewport: viewport
			  };
			  return result;
			});

			function shouldPublishUpdate(registry, dragging, entry) {
			  if (entry.descriptor.id === dragging.id) {
			    return false;
			  }

			  if (entry.descriptor.type !== dragging.type) {
			    return false;
			  }

			  var home = registry.droppable.getById(entry.descriptor.droppableId);

			  if (home.descriptor.mode !== 'virtual') {
			    return false;
			  }

			  return true;
			}

			var createDimensionMarshal = (function (registry, callbacks) {
			  var collection = null;
			  var publisher = createPublisher({
			    callbacks: {
			      publish: callbacks.publishWhileDragging,
			      collectionStarting: callbacks.collectionStarting
			    },
			    registry: registry
			  });

			  var updateDroppableIsEnabled = function updateDroppableIsEnabled(id, isEnabled) {
			    !registry.droppable.exists(id) ? invariant(false) : void 0;

			    if (!collection) {
			      return;
			    }

			    callbacks.updateDroppableIsEnabled({
			      id: id,
			      isEnabled: isEnabled
			    });
			  };

			  var updateDroppableIsCombineEnabled = function updateDroppableIsCombineEnabled(id, isCombineEnabled) {
			    if (!collection) {
			      return;
			    }

			    !registry.droppable.exists(id) ? invariant(false) : void 0;
			    callbacks.updateDroppableIsCombineEnabled({
			      id: id,
			      isCombineEnabled: isCombineEnabled
			    });
			  };

			  var updateDroppableScroll = function updateDroppableScroll(id, newScroll) {
			    if (!collection) {
			      return;
			    }

			    !registry.droppable.exists(id) ? invariant(false) : void 0;
			    callbacks.updateDroppableScroll({
			      id: id,
			      newScroll: newScroll
			    });
			  };

			  var scrollDroppable = function scrollDroppable(id, change) {
			    if (!collection) {
			      return;
			    }

			    registry.droppable.getById(id).callbacks.scroll(change);
			  };

			  var stopPublishing = function stopPublishing() {
			    if (!collection) {
			      return;
			    }

			    publisher.stop();
			    var home = collection.critical.droppable;
			    registry.droppable.getAllByType(home.type).forEach(function (entry) {
			      return entry.callbacks.dragStopped();
			    });
			    collection.unsubscribe();
			    collection = null;
			  };

			  var subscriber = function subscriber(event) {
			    !collection ? invariant(false) : void 0;
			    var dragging = collection.critical.draggable;

			    if (event.type === 'ADDITION') {
			      if (shouldPublishUpdate(registry, dragging, event.value)) {
			        publisher.add(event.value);
			      }
			    }

			    if (event.type === 'REMOVAL') {
			      if (shouldPublishUpdate(registry, dragging, event.value)) {
			        publisher.remove(event.value);
			      }
			    }
			  };

			  var startPublishing = function startPublishing(request) {
			    !!collection ? invariant(false) : void 0;
			    var entry = registry.draggable.getById(request.draggableId);
			    var home = registry.droppable.getById(entry.descriptor.droppableId);
			    var critical = {
			      draggable: entry.descriptor,
			      droppable: home.descriptor
			    };
			    var unsubscribe = registry.subscribe(subscriber);
			    collection = {
			      critical: critical,
			      unsubscribe: unsubscribe
			    };
			    return getInitialPublish({
			      critical: critical,
			      registry: registry,
			      scrollOptions: request.scrollOptions
			    });
			  };

			  var marshal = {
			    updateDroppableIsEnabled: updateDroppableIsEnabled,
			    updateDroppableIsCombineEnabled: updateDroppableIsCombineEnabled,
			    scrollDroppable: scrollDroppable,
			    updateDroppableScroll: updateDroppableScroll,
			    startPublishing: startPublishing,
			    stopPublishing: stopPublishing
			  };
			  return marshal;
			});

			var canStartDrag = (function (state, id) {
			  if (state.phase === 'IDLE') {
			    return true;
			  }

			  if (state.phase !== 'DROP_ANIMATING') {
			    return false;
			  }

			  if (state.completed.result.draggableId === id) {
			    return false;
			  }

			  return state.completed.result.reason === 'DROP';
			});

			var scrollWindow = (function (change) {
			  window.scrollBy(change.x, change.y);
			});

			var getScrollableDroppables = memoizeOne(function (droppables) {
			  return toDroppableList(droppables).filter(function (droppable) {
			    if (!droppable.isEnabled) {
			      return false;
			    }

			    if (!droppable.frame) {
			      return false;
			    }

			    return true;
			  });
			});

			var getScrollableDroppableOver = function getScrollableDroppableOver(target, droppables) {
			  var maybe = find(getScrollableDroppables(droppables), function (droppable) {
			    !droppable.frame ? invariant(false) : void 0;
			    return isPositionInFrame(droppable.frame.pageMarginBox)(target);
			  });
			  return maybe;
			};

			var getBestScrollableDroppable = (function (_ref) {
			  var center = _ref.center,
			      destination = _ref.destination,
			      droppables = _ref.droppables;

			  if (destination) {
			    var _dimension = droppables[destination];

			    if (!_dimension.frame) {
			      return null;
			    }

			    return _dimension;
			  }

			  var dimension = getScrollableDroppableOver(center, droppables);
			  return dimension;
			});

			var config = {
			  startFromPercentage: 0.25,
			  maxScrollAtPercentage: 0.05,
			  maxPixelScroll: 28,
			  ease: function ease(percentage) {
			    return Math.pow(percentage, 2);
			  },
			  durationDampening: {
			    stopDampeningAt: 1200,
			    accelerateAt: 360
			  }
			};

			var getDistanceThresholds = (function (container, axis) {
			  var startScrollingFrom = container[axis.size] * config.startFromPercentage;
			  var maxScrollValueAt = container[axis.size] * config.maxScrollAtPercentage;
			  var thresholds = {
			    startScrollingFrom: startScrollingFrom,
			    maxScrollValueAt: maxScrollValueAt
			  };
			  return thresholds;
			});

			var getPercentage = (function (_ref) {
			  var startOfRange = _ref.startOfRange,
			      endOfRange = _ref.endOfRange,
			      current = _ref.current;
			  var range = endOfRange - startOfRange;

			  if (range === 0) {
			    return 0;
			  }

			  var currentInRange = current - startOfRange;
			  var percentage = currentInRange / range;
			  return percentage;
			});

			var minScroll = 1;

			var getValueFromDistance = (function (distanceToEdge, thresholds) {
			  if (distanceToEdge > thresholds.startScrollingFrom) {
			    return 0;
			  }

			  if (distanceToEdge <= thresholds.maxScrollValueAt) {
			    return config.maxPixelScroll;
			  }

			  if (distanceToEdge === thresholds.startScrollingFrom) {
			    return minScroll;
			  }

			  var percentageFromMaxScrollValueAt = getPercentage({
			    startOfRange: thresholds.maxScrollValueAt,
			    endOfRange: thresholds.startScrollingFrom,
			    current: distanceToEdge
			  });
			  var percentageFromStartScrollingFrom = 1 - percentageFromMaxScrollValueAt;
			  var scroll = config.maxPixelScroll * config.ease(percentageFromStartScrollingFrom);
			  return Math.ceil(scroll);
			});

			var accelerateAt = config.durationDampening.accelerateAt;
			var stopAt = config.durationDampening.stopDampeningAt;
			var dampenValueByTime = (function (proposedScroll, dragStartTime) {
			  var startOfRange = dragStartTime;
			  var endOfRange = stopAt;
			  var now = Date.now();
			  var runTime = now - startOfRange;

			  if (runTime >= stopAt) {
			    return proposedScroll;
			  }

			  if (runTime < accelerateAt) {
			    return minScroll;
			  }

			  var betweenAccelerateAtAndStopAtPercentage = getPercentage({
			    startOfRange: accelerateAt,
			    endOfRange: endOfRange,
			    current: runTime
			  });
			  var scroll = proposedScroll * config.ease(betweenAccelerateAtAndStopAtPercentage);
			  return Math.ceil(scroll);
			});

			var getValue = (function (_ref) {
			  var distanceToEdge = _ref.distanceToEdge,
			      thresholds = _ref.thresholds,
			      dragStartTime = _ref.dragStartTime,
			      shouldUseTimeDampening = _ref.shouldUseTimeDampening;
			  var scroll = getValueFromDistance(distanceToEdge, thresholds);

			  if (scroll === 0) {
			    return 0;
			  }

			  if (!shouldUseTimeDampening) {
			    return scroll;
			  }

			  return Math.max(dampenValueByTime(scroll, dragStartTime), minScroll);
			});

			var getScrollOnAxis = (function (_ref) {
			  var container = _ref.container,
			      distanceToEdges = _ref.distanceToEdges,
			      dragStartTime = _ref.dragStartTime,
			      axis = _ref.axis,
			      shouldUseTimeDampening = _ref.shouldUseTimeDampening;
			  var thresholds = getDistanceThresholds(container, axis);
			  var isCloserToEnd = distanceToEdges[axis.end] < distanceToEdges[axis.start];

			  if (isCloserToEnd) {
			    return getValue({
			      distanceToEdge: distanceToEdges[axis.end],
			      thresholds: thresholds,
			      dragStartTime: dragStartTime,
			      shouldUseTimeDampening: shouldUseTimeDampening
			    });
			  }

			  return -1 * getValue({
			    distanceToEdge: distanceToEdges[axis.start],
			    thresholds: thresholds,
			    dragStartTime: dragStartTime,
			    shouldUseTimeDampening: shouldUseTimeDampening
			  });
			});

			var adjustForSizeLimits = (function (_ref) {
			  var container = _ref.container,
			      subject = _ref.subject,
			      proposedScroll = _ref.proposedScroll;
			  var isTooBigVertically = subject.height > container.height;
			  var isTooBigHorizontally = subject.width > container.width;

			  if (!isTooBigHorizontally && !isTooBigVertically) {
			    return proposedScroll;
			  }

			  if (isTooBigHorizontally && isTooBigVertically) {
			    return null;
			  }

			  return {
			    x: isTooBigHorizontally ? 0 : proposedScroll.x,
			    y: isTooBigVertically ? 0 : proposedScroll.y
			  };
			});

			var clean$2 = apply(function (value) {
			  return value === 0 ? 0 : value;
			});
			var getScroll = (function (_ref) {
			  var dragStartTime = _ref.dragStartTime,
			      container = _ref.container,
			      subject = _ref.subject,
			      center = _ref.center,
			      shouldUseTimeDampening = _ref.shouldUseTimeDampening;
			  var distanceToEdges = {
			    top: center.y - container.top,
			    right: container.right - center.x,
			    bottom: container.bottom - center.y,
			    left: center.x - container.left
			  };
			  var y = getScrollOnAxis({
			    container: container,
			    distanceToEdges: distanceToEdges,
			    dragStartTime: dragStartTime,
			    axis: vertical,
			    shouldUseTimeDampening: shouldUseTimeDampening
			  });
			  var x = getScrollOnAxis({
			    container: container,
			    distanceToEdges: distanceToEdges,
			    dragStartTime: dragStartTime,
			    axis: horizontal,
			    shouldUseTimeDampening: shouldUseTimeDampening
			  });
			  var required = clean$2({
			    x: x,
			    y: y
			  });

			  if (isEqual(required, origin)) {
			    return null;
			  }

			  var limited = adjustForSizeLimits({
			    container: container,
			    subject: subject,
			    proposedScroll: required
			  });

			  if (!limited) {
			    return null;
			  }

			  return isEqual(limited, origin) ? null : limited;
			});

			var smallestSigned = apply(function (value) {
			  if (value === 0) {
			    return 0;
			  }

			  return value > 0 ? 1 : -1;
			});
			var getOverlap = function () {
			  var getRemainder = function getRemainder(target, max) {
			    if (target < 0) {
			      return target;
			    }

			    if (target > max) {
			      return target - max;
			    }

			    return 0;
			  };

			  return function (_ref) {
			    var current = _ref.current,
			        max = _ref.max,
			        change = _ref.change;
			    var targetScroll = add(current, change);
			    var overlap = {
			      x: getRemainder(targetScroll.x, max.x),
			      y: getRemainder(targetScroll.y, max.y)
			    };

			    if (isEqual(overlap, origin)) {
			      return null;
			    }

			    return overlap;
			  };
			}();
			var canPartiallyScroll = function canPartiallyScroll(_ref2) {
			  var rawMax = _ref2.max,
			      current = _ref2.current,
			      change = _ref2.change;
			  var max = {
			    x: Math.max(current.x, rawMax.x),
			    y: Math.max(current.y, rawMax.y)
			  };
			  var smallestChange = smallestSigned(change);
			  var overlap = getOverlap({
			    max: max,
			    current: current,
			    change: smallestChange
			  });

			  if (!overlap) {
			    return true;
			  }

			  if (smallestChange.x !== 0 && overlap.x === 0) {
			    return true;
			  }

			  if (smallestChange.y !== 0 && overlap.y === 0) {
			    return true;
			  }

			  return false;
			};
			var canScrollWindow = function canScrollWindow(viewport, change) {
			  return canPartiallyScroll({
			    current: viewport.scroll.current,
			    max: viewport.scroll.max,
			    change: change
			  });
			};
			var getWindowOverlap = function getWindowOverlap(viewport, change) {
			  if (!canScrollWindow(viewport, change)) {
			    return null;
			  }

			  var max = viewport.scroll.max;
			  var current = viewport.scroll.current;
			  return getOverlap({
			    current: current,
			    max: max,
			    change: change
			  });
			};
			var canScrollDroppable = function canScrollDroppable(droppable, change) {
			  var frame = droppable.frame;

			  if (!frame) {
			    return false;
			  }

			  return canPartiallyScroll({
			    current: frame.scroll.current,
			    max: frame.scroll.max,
			    change: change
			  });
			};
			var getDroppableOverlap = function getDroppableOverlap(droppable, change) {
			  var frame = droppable.frame;

			  if (!frame) {
			    return null;
			  }

			  if (!canScrollDroppable(droppable, change)) {
			    return null;
			  }

			  return getOverlap({
			    current: frame.scroll.current,
			    max: frame.scroll.max,
			    change: change
			  });
			};

			var getWindowScrollChange = (function (_ref) {
			  var viewport = _ref.viewport,
			      subject = _ref.subject,
			      center = _ref.center,
			      dragStartTime = _ref.dragStartTime,
			      shouldUseTimeDampening = _ref.shouldUseTimeDampening;
			  var scroll = getScroll({
			    dragStartTime: dragStartTime,
			    container: viewport.frame,
			    subject: subject,
			    center: center,
			    shouldUseTimeDampening: shouldUseTimeDampening
			  });
			  return scroll && canScrollWindow(viewport, scroll) ? scroll : null;
			});

			var getDroppableScrollChange = (function (_ref) {
			  var droppable = _ref.droppable,
			      subject = _ref.subject,
			      center = _ref.center,
			      dragStartTime = _ref.dragStartTime,
			      shouldUseTimeDampening = _ref.shouldUseTimeDampening;
			  var frame = droppable.frame;

			  if (!frame) {
			    return null;
			  }

			  var scroll = getScroll({
			    dragStartTime: dragStartTime,
			    container: frame.pageMarginBox,
			    subject: subject,
			    center: center,
			    shouldUseTimeDampening: shouldUseTimeDampening
			  });
			  return scroll && canScrollDroppable(droppable, scroll) ? scroll : null;
			});

			var scroll$1 = (function (_ref) {
			  var state = _ref.state,
			      dragStartTime = _ref.dragStartTime,
			      shouldUseTimeDampening = _ref.shouldUseTimeDampening,
			      scrollWindow = _ref.scrollWindow,
			      scrollDroppable = _ref.scrollDroppable;
			  var center = state.current.page.borderBoxCenter;
			  var draggable = state.dimensions.draggables[state.critical.draggable.id];
			  var subject = draggable.page.marginBox;

			  if (state.isWindowScrollAllowed) {
			    var viewport = state.viewport;

			    var _change = getWindowScrollChange({
			      dragStartTime: dragStartTime,
			      viewport: viewport,
			      subject: subject,
			      center: center,
			      shouldUseTimeDampening: shouldUseTimeDampening
			    });

			    if (_change) {
			      scrollWindow(_change);
			      return;
			    }
			  }

			  var droppable = getBestScrollableDroppable({
			    center: center,
			    destination: whatIsDraggedOver(state.impact),
			    droppables: state.dimensions.droppables
			  });

			  if (!droppable) {
			    return;
			  }

			  var change = getDroppableScrollChange({
			    dragStartTime: dragStartTime,
			    droppable: droppable,
			    subject: subject,
			    center: center,
			    shouldUseTimeDampening: shouldUseTimeDampening
			  });

			  if (change) {
			    scrollDroppable(droppable.descriptor.id, change);
			  }
			});

			var createFluidScroller = (function (_ref) {
			  var scrollWindow = _ref.scrollWindow,
			      scrollDroppable = _ref.scrollDroppable;
			  var scheduleWindowScroll = rafSchd(scrollWindow);
			  var scheduleDroppableScroll = rafSchd(scrollDroppable);
			  var dragging = null;

			  var tryScroll = function tryScroll(state) {
			    !dragging ? invariant(false) : void 0;
			    var _dragging = dragging,
			        shouldUseTimeDampening = _dragging.shouldUseTimeDampening,
			        dragStartTime = _dragging.dragStartTime;
			    scroll$1({
			      state: state,
			      scrollWindow: scheduleWindowScroll,
			      scrollDroppable: scheduleDroppableScroll,
			      dragStartTime: dragStartTime,
			      shouldUseTimeDampening: shouldUseTimeDampening
			    });
			  };

			  var start$1 = function start$1(state) {
			    !!dragging ? invariant(false) : void 0;
			    var dragStartTime = Date.now();
			    var wasScrollNeeded = false;

			    var fakeScrollCallback = function fakeScrollCallback() {
			      wasScrollNeeded = true;
			    };

			    scroll$1({
			      state: state,
			      dragStartTime: 0,
			      shouldUseTimeDampening: false,
			      scrollWindow: fakeScrollCallback,
			      scrollDroppable: fakeScrollCallback
			    });
			    dragging = {
			      dragStartTime: dragStartTime,
			      shouldUseTimeDampening: wasScrollNeeded
			    };

			    if (wasScrollNeeded) {
			      tryScroll(state);
			    }
			  };

			  var stop = function stop() {
			    if (!dragging) {
			      return;
			    }

			    scheduleWindowScroll.cancel();
			    scheduleDroppableScroll.cancel();
			    dragging = null;
			  };

			  return {
			    start: start$1,
			    stop: stop,
			    scroll: tryScroll
			  };
			});

			var createJumpScroller = (function (_ref) {
			  var move = _ref.move,
			      scrollDroppable = _ref.scrollDroppable,
			      scrollWindow = _ref.scrollWindow;

			  var moveByOffset = function moveByOffset(state, offset) {
			    var client = add(state.current.client.selection, offset);
			    move({
			      client: client
			    });
			  };

			  var scrollDroppableAsMuchAsItCan = function scrollDroppableAsMuchAsItCan(droppable, change) {
			    if (!canScrollDroppable(droppable, change)) {
			      return change;
			    }

			    var overlap = getDroppableOverlap(droppable, change);

			    if (!overlap) {
			      scrollDroppable(droppable.descriptor.id, change);
			      return null;
			    }

			    var whatTheDroppableCanScroll = subtract(change, overlap);
			    scrollDroppable(droppable.descriptor.id, whatTheDroppableCanScroll);
			    var remainder = subtract(change, whatTheDroppableCanScroll);
			    return remainder;
			  };

			  var scrollWindowAsMuchAsItCan = function scrollWindowAsMuchAsItCan(isWindowScrollAllowed, viewport, change) {
			    if (!isWindowScrollAllowed) {
			      return change;
			    }

			    if (!canScrollWindow(viewport, change)) {
			      return change;
			    }

			    var overlap = getWindowOverlap(viewport, change);

			    if (!overlap) {
			      scrollWindow(change);
			      return null;
			    }

			    var whatTheWindowCanScroll = subtract(change, overlap);
			    scrollWindow(whatTheWindowCanScroll);
			    var remainder = subtract(change, whatTheWindowCanScroll);
			    return remainder;
			  };

			  var jumpScroller = function jumpScroller(state) {
			    var request = state.scrollJumpRequest;

			    if (!request) {
			      return;
			    }

			    var destination = whatIsDraggedOver(state.impact);
			    !destination ? invariant(false) : void 0;
			    var droppableRemainder = scrollDroppableAsMuchAsItCan(state.dimensions.droppables[destination], request);

			    if (!droppableRemainder) {
			      return;
			    }

			    var viewport = state.viewport;
			    var windowRemainder = scrollWindowAsMuchAsItCan(state.isWindowScrollAllowed, viewport, droppableRemainder);

			    if (!windowRemainder) {
			      return;
			    }

			    moveByOffset(state, windowRemainder);
			  };

			  return jumpScroller;
			});

			var createAutoScroller = (function (_ref) {
			  var scrollDroppable = _ref.scrollDroppable,
			      scrollWindow = _ref.scrollWindow,
			      move = _ref.move;
			  var fluidScroller = createFluidScroller({
			    scrollWindow: scrollWindow,
			    scrollDroppable: scrollDroppable
			  });
			  var jumpScroll = createJumpScroller({
			    move: move,
			    scrollWindow: scrollWindow,
			    scrollDroppable: scrollDroppable
			  });

			  var scroll = function scroll(state) {
			    if (state.phase !== 'DRAGGING') {
			      return;
			    }

			    if (state.movementMode === 'FLUID') {
			      fluidScroller.scroll(state);
			      return;
			    }

			    if (!state.scrollJumpRequest) {
			      return;
			    }

			    jumpScroll(state);
			  };

			  var scroller = {
			    scroll: scroll,
			    start: fluidScroller.start,
			    stop: fluidScroller.stop
			  };
			  return scroller;
			});

			var prefix$1 = 'data-rbd';
			var dragHandle = function () {
			  var base = prefix$1 + "-drag-handle";
			  return {
			    base: base,
			    draggableId: base + "-draggable-id",
			    contextId: base + "-context-id"
			  };
			}();
			var draggable = function () {
			  var base = prefix$1 + "-draggable";
			  return {
			    base: base,
			    contextId: base + "-context-id",
			    id: base + "-id"
			  };
			}();
			var droppable = function () {
			  var base = prefix$1 + "-droppable";
			  return {
			    base: base,
			    contextId: base + "-context-id",
			    id: base + "-id"
			  };
			}();
			var scrollContainer = {
			  contextId: prefix$1 + "-scroll-container-context-id"
			};

			var makeGetSelector = function makeGetSelector(context) {
			  return function (attribute) {
			    return "[" + attribute + "=\"" + context + "\"]";
			  };
			};

			var getStyles = function getStyles(rules, property) {
			  return rules.map(function (rule) {
			    var value = rule.styles[property];

			    if (!value) {
			      return '';
			    }

			    return rule.selector + " { " + value + " }";
			  }).join(' ');
			};

			var noPointerEvents = 'pointer-events: none;';
			var getStyles$1 = (function (contextId) {
			  var getSelector = makeGetSelector(contextId);

			  var dragHandle$1 = function () {
			    var grabCursor = "\n      cursor: -webkit-grab;\n      cursor: grab;\n    ";
			    return {
			      selector: getSelector(dragHandle.contextId),
			      styles: {
			        always: "\n          -webkit-touch-callout: none;\n          -webkit-tap-highlight-color: rgba(0,0,0,0);\n          touch-action: manipulation;\n        ",
			        resting: grabCursor,
			        dragging: noPointerEvents,
			        dropAnimating: grabCursor
			      }
			    };
			  }();

			  var draggable$1 = function () {
			    var transition = "\n      transition: " + transitions.outOfTheWay + ";\n    ";
			    return {
			      selector: getSelector(draggable.contextId),
			      styles: {
			        dragging: transition,
			        dropAnimating: transition,
			        userCancel: transition
			      }
			    };
			  }();

			  var droppable$1 = {
			    selector: getSelector(droppable.contextId),
			    styles: {
			      always: "overflow-anchor: none;"
			    }
			  };
			  var body = {
			    selector: 'body',
			    styles: {
			      dragging: "\n        cursor: grabbing;\n        cursor: -webkit-grabbing;\n        user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        overflow-anchor: none;\n      "
			    }
			  };
			  var rules = [draggable$1, dragHandle$1, droppable$1, body];
			  return {
			    always: getStyles(rules, 'always'),
			    resting: getStyles(rules, 'resting'),
			    dragging: getStyles(rules, 'dragging'),
			    dropAnimating: getStyles(rules, 'dropAnimating'),
			    userCancel: getStyles(rules, 'userCancel')
			  };
			});

			var useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? React.useLayoutEffect : React.useEffect;

			var getHead = function getHead() {
			  var head = document.querySelector('head');
			  !head ? invariant(false) : void 0;
			  return head;
			};

			var createStyleEl = function createStyleEl(nonce) {
			  var el = document.createElement('style');

			  if (nonce) {
			    el.setAttribute('nonce', nonce);
			  }

			  el.type = 'text/css';
			  return el;
			};

			function useStyleMarshal(contextId, nonce) {
			  var styles = useMemoOne.useMemo(function () {
			    return getStyles$1(contextId);
			  }, [contextId]);
			  var alwaysRef = React.useRef(null);
			  var dynamicRef = React.useRef(null);
			  var setDynamicStyle = useMemoOne.useCallback(memoizeOne(function (proposed) {
			    var el = dynamicRef.current;
			    !el ? invariant(false) : void 0;
			    el.textContent = proposed;
			  }), []);
			  var setAlwaysStyle = useMemoOne.useCallback(function (proposed) {
			    var el = alwaysRef.current;
			    !el ? invariant(false) : void 0;
			    el.textContent = proposed;
			  }, []);
			  useIsomorphicLayoutEffect(function () {
			    !(!alwaysRef.current && !dynamicRef.current) ? invariant(false) : void 0;
			    var always = createStyleEl(nonce);
			    var dynamic = createStyleEl(nonce);
			    alwaysRef.current = always;
			    dynamicRef.current = dynamic;
			    always.setAttribute(prefix$1 + "-always", contextId);
			    dynamic.setAttribute(prefix$1 + "-dynamic", contextId);
			    getHead().appendChild(always);
			    getHead().appendChild(dynamic);
			    setAlwaysStyle(styles.always);
			    setDynamicStyle(styles.resting);
			    return function () {
			      var remove = function remove(ref) {
			        var current = ref.current;
			        !current ? invariant(false) : void 0;
			        getHead().removeChild(current);
			        ref.current = null;
			      };

			      remove(alwaysRef);
			      remove(dynamicRef);
			    };
			  }, [nonce, setAlwaysStyle, setDynamicStyle, styles.always, styles.resting, contextId]);
			  var dragging = useMemoOne.useCallback(function () {
			    return setDynamicStyle(styles.dragging);
			  }, [setDynamicStyle, styles.dragging]);
			  var dropping = useMemoOne.useCallback(function (reason) {
			    if (reason === 'DROP') {
			      setDynamicStyle(styles.dropAnimating);
			      return;
			    }

			    setDynamicStyle(styles.userCancel);
			  }, [setDynamicStyle, styles.dropAnimating, styles.userCancel]);
			  var resting = useMemoOne.useCallback(function () {
			    if (!dynamicRef.current) {
			      return;
			    }

			    setDynamicStyle(styles.resting);
			  }, [setDynamicStyle, styles.resting]);
			  var marshal = useMemoOne.useMemo(function () {
			    return {
			      dragging: dragging,
			      dropping: dropping,
			      resting: resting
			    };
			  }, [dragging, dropping, resting]);
			  return marshal;
			}

			var getWindowFromEl = (function (el) {
			  return el && el.ownerDocument ? el.ownerDocument.defaultView : window;
			});

			function isHtmlElement(el) {
			  return el instanceof getWindowFromEl(el).HTMLElement;
			}

			function findDragHandle(contextId, draggableId) {
			  var selector = "[" + dragHandle.contextId + "=\"" + contextId + "\"]";
			  var possible = toArray(document.querySelectorAll(selector));

			  if (!possible.length) {
			    return null;
			  }

			  var handle = find(possible, function (el) {
			    return el.getAttribute(dragHandle.draggableId) === draggableId;
			  });

			  if (!handle) {
			    return null;
			  }

			  if (!isHtmlElement(handle)) {
			    return null;
			  }

			  return handle;
			}

			function useFocusMarshal(contextId) {
			  var entriesRef = React.useRef({});
			  var recordRef = React.useRef(null);
			  var restoreFocusFrameRef = React.useRef(null);
			  var isMountedRef = React.useRef(false);
			  var register = useMemoOne.useCallback(function register(id, focus) {
			    var entry = {
			      id: id,
			      focus: focus
			    };
			    entriesRef.current[id] = entry;
			    return function unregister() {
			      var entries = entriesRef.current;
			      var current = entries[id];

			      if (current !== entry) {
			        delete entries[id];
			      }
			    };
			  }, []);
			  var tryGiveFocus = useMemoOne.useCallback(function tryGiveFocus(tryGiveFocusTo) {
			    var handle = findDragHandle(contextId, tryGiveFocusTo);

			    if (handle && handle !== document.activeElement) {
			      handle.focus();
			    }
			  }, [contextId]);
			  var tryShiftRecord = useMemoOne.useCallback(function tryShiftRecord(previous, redirectTo) {
			    if (recordRef.current === previous) {
			      recordRef.current = redirectTo;
			    }
			  }, []);
			  var tryRestoreFocusRecorded = useMemoOne.useCallback(function tryRestoreFocusRecorded() {
			    if (restoreFocusFrameRef.current) {
			      return;
			    }

			    if (!isMountedRef.current) {
			      return;
			    }

			    restoreFocusFrameRef.current = requestAnimationFrame(function () {
			      restoreFocusFrameRef.current = null;
			      var record = recordRef.current;

			      if (record) {
			        tryGiveFocus(record);
			      }
			    });
			  }, [tryGiveFocus]);
			  var tryRecordFocus = useMemoOne.useCallback(function tryRecordFocus(id) {
			    recordRef.current = null;
			    var focused = document.activeElement;

			    if (!focused) {
			      return;
			    }

			    if (focused.getAttribute(dragHandle.draggableId) !== id) {
			      return;
			    }

			    recordRef.current = id;
			  }, []);
			  useIsomorphicLayoutEffect(function () {
			    isMountedRef.current = true;
			    return function clearFrameOnUnmount() {
			      isMountedRef.current = false;
			      var frameId = restoreFocusFrameRef.current;

			      if (frameId) {
			        cancelAnimationFrame(frameId);
			      }
			    };
			  }, []);
			  var marshal = useMemoOne.useMemo(function () {
			    return {
			      register: register,
			      tryRecordFocus: tryRecordFocus,
			      tryRestoreFocusRecorded: tryRestoreFocusRecorded,
			      tryShiftRecord: tryShiftRecord
			    };
			  }, [register, tryRecordFocus, tryRestoreFocusRecorded, tryShiftRecord]);
			  return marshal;
			}

			function createRegistry() {
			  var entries = {
			    draggables: {},
			    droppables: {}
			  };
			  var subscribers = [];

			  function subscribe(cb) {
			    subscribers.push(cb);
			    return function unsubscribe() {
			      var index = subscribers.indexOf(cb);

			      if (index === -1) {
			        return;
			      }

			      subscribers.splice(index, 1);
			    };
			  }

			  function notify(event) {
			    if (subscribers.length) {
			      subscribers.forEach(function (cb) {
			        return cb(event);
			      });
			    }
			  }

			  function findDraggableById(id) {
			    return entries.draggables[id] || null;
			  }

			  function getDraggableById(id) {
			    var entry = findDraggableById(id);
			    !entry ? invariant(false) : void 0;
			    return entry;
			  }

			  var draggableAPI = {
			    register: function register(entry) {
			      entries.draggables[entry.descriptor.id] = entry;
			      notify({
			        type: 'ADDITION',
			        value: entry
			      });
			    },
			    update: function update(entry, last) {
			      var current = entries.draggables[last.descriptor.id];

			      if (!current) {
			        return;
			      }

			      if (current.uniqueId !== entry.uniqueId) {
			        return;
			      }

			      delete entries.draggables[last.descriptor.id];
			      entries.draggables[entry.descriptor.id] = entry;
			    },
			    unregister: function unregister(entry) {
			      var draggableId = entry.descriptor.id;
			      var current = findDraggableById(draggableId);

			      if (!current) {
			        return;
			      }

			      if (entry.uniqueId !== current.uniqueId) {
			        return;
			      }

			      delete entries.draggables[draggableId];
			      notify({
			        type: 'REMOVAL',
			        value: entry
			      });
			    },
			    getById: getDraggableById,
			    findById: findDraggableById,
			    exists: function exists(id) {
			      return Boolean(findDraggableById(id));
			    },
			    getAllByType: function getAllByType(type) {
			      return values(entries.draggables).filter(function (entry) {
			        return entry.descriptor.type === type;
			      });
			    }
			  };

			  function findDroppableById(id) {
			    return entries.droppables[id] || null;
			  }

			  function getDroppableById(id) {
			    var entry = findDroppableById(id);
			    !entry ? invariant(false) : void 0;
			    return entry;
			  }

			  var droppableAPI = {
			    register: function register(entry) {
			      entries.droppables[entry.descriptor.id] = entry;
			    },
			    unregister: function unregister(entry) {
			      var current = findDroppableById(entry.descriptor.id);

			      if (!current) {
			        return;
			      }

			      if (entry.uniqueId !== current.uniqueId) {
			        return;
			      }

			      delete entries.droppables[entry.descriptor.id];
			    },
			    getById: getDroppableById,
			    findById: findDroppableById,
			    exists: function exists(id) {
			      return Boolean(findDroppableById(id));
			    },
			    getAllByType: function getAllByType(type) {
			      return values(entries.droppables).filter(function (entry) {
			        return entry.descriptor.type === type;
			      });
			    }
			  };

			  function clean() {
			    entries.draggables = {};
			    entries.droppables = {};
			    subscribers.length = 0;
			  }

			  return {
			    draggable: draggableAPI,
			    droppable: droppableAPI,
			    subscribe: subscribe,
			    clean: clean
			  };
			}

			function useRegistry() {
			  var registry = useMemoOne.useMemo(createRegistry, []);
			  React.useEffect(function () {
			    return function unmount() {
			      requestAnimationFrame(registry.clean);
			    };
			  }, [registry]);
			  return registry;
			}

			var StoreContext = React__default.createContext(null);

			var getBodyElement = (function () {
			  var body = document.body;
			  !body ? invariant(false) : void 0;
			  return body;
			});

			var visuallyHidden = {
			  position: 'absolute',
			  width: '1px',
			  height: '1px',
			  margin: '-1px',
			  border: '0',
			  padding: '0',
			  overflow: 'hidden',
			  clip: 'rect(0 0 0 0)',
			  'clip-path': 'inset(100%)'
			};

			var getId = function getId(contextId) {
			  return "rbd-announcement-" + contextId;
			};
			function useAnnouncer(contextId) {
			  var id = useMemoOne.useMemo(function () {
			    return getId(contextId);
			  }, [contextId]);
			  var ref = React.useRef(null);
			  React.useEffect(function setup() {
			    var el = document.createElement('div');
			    ref.current = el;
			    el.id = id;
			    el.setAttribute('aria-live', 'assertive');
			    el.setAttribute('aria-atomic', 'true');

			    _extends(el.style, visuallyHidden);

			    getBodyElement().appendChild(el);
			    return function cleanup() {
			      setTimeout(function remove() {
			        var body = getBodyElement();

			        if (body.contains(el)) {
			          body.removeChild(el);
			        }

			        if (el === ref.current) {
			          ref.current = null;
			        }
			      });
			    };
			  }, [id]);
			  var announce = useMemoOne.useCallback(function (message) {
			    var el = ref.current;

			    if (el) {
			      el.textContent = message;
			      return;
			    }
			  }, []);
			  return announce;
			}

			var count = 0;
			var defaults = {
			  separator: '::'
			};
			function reset() {
			  count = 0;
			}
			function useUniqueId(prefix, options) {
			  if (options === void 0) {
			    options = defaults;
			  }

			  return useMemoOne.useMemo(function () {
			    return "" + prefix + options.separator + count++;
			  }, [options.separator, prefix]);
			}

			function getElementId(_ref) {
			  var contextId = _ref.contextId,
			      uniqueId = _ref.uniqueId;
			  return "rbd-hidden-text-" + contextId + "-" + uniqueId;
			}
			function useHiddenTextElement(_ref2) {
			  var contextId = _ref2.contextId,
			      text = _ref2.text;
			  var uniqueId = useUniqueId('hidden-text', {
			    separator: '-'
			  });
			  var id = useMemoOne.useMemo(function () {
			    return getElementId({
			      contextId: contextId,
			      uniqueId: uniqueId
			    });
			  }, [uniqueId, contextId]);
			  React.useEffect(function mount() {
			    var el = document.createElement('div');
			    el.id = id;
			    el.textContent = text;
			    el.style.display = 'none';
			    getBodyElement().appendChild(el);
			    return function unmount() {
			      var body = getBodyElement();

			      if (body.contains(el)) {
			        body.removeChild(el);
			      }
			    };
			  }, [id, text]);
			  return id;
			}

			var AppContext = React__default.createContext(null);

			function usePrevious(current) {
			  var ref = React.useRef(current);
			  React.useEffect(function () {
			    ref.current = current;
			  });
			  return ref;
			}

			function create() {
			  var lock = null;

			  function isClaimed() {
			    return Boolean(lock);
			  }

			  function isActive(value) {
			    return value === lock;
			  }

			  function claim(abandon) {
			    !!lock ? invariant(false) : void 0;
			    var newLock = {
			      abandon: abandon
			    };
			    lock = newLock;
			    return newLock;
			  }

			  function release() {
			    !lock ? invariant(false) : void 0;
			    lock = null;
			  }

			  function tryAbandon() {
			    if (lock) {
			      lock.abandon();
			      release();
			    }
			  }

			  return {
			    isClaimed: isClaimed,
			    isActive: isActive,
			    claim: claim,
			    release: release,
			    tryAbandon: tryAbandon
			  };
			}

			var tab = 9;
			var enter = 13;
			var escape = 27;
			var space = 32;
			var pageUp = 33;
			var pageDown = 34;
			var end = 35;
			var home = 36;
			var arrowLeft = 37;
			var arrowUp = 38;
			var arrowRight = 39;
			var arrowDown = 40;

			var _preventedKeys;
			var preventedKeys = (_preventedKeys = {}, _preventedKeys[enter] = true, _preventedKeys[tab] = true, _preventedKeys);
			var preventStandardKeyEvents = (function (event) {
			  if (preventedKeys[event.keyCode]) {
			    event.preventDefault();
			  }
			});

			var supportedEventName = function () {
			  var base = 'visibilitychange';

			  if (typeof document === 'undefined') {
			    return base;
			  }

			  var candidates = [base, "ms" + base, "webkit" + base, "moz" + base, "o" + base];
			  var supported = find(candidates, function (eventName) {
			    return "on" + eventName in document;
			  });
			  return supported || base;
			}();

			var primaryButton = 0;
			var sloppyClickThreshold = 5;

			function isSloppyClickThresholdExceeded(original, current) {
			  return Math.abs(current.x - original.x) >= sloppyClickThreshold || Math.abs(current.y - original.y) >= sloppyClickThreshold;
			}

			var idle$1 = {
			  type: 'IDLE'
			};

			function getCaptureBindings(_ref) {
			  var cancel = _ref.cancel,
			      completed = _ref.completed,
			      getPhase = _ref.getPhase,
			      setPhase = _ref.setPhase;
			  return [{
			    eventName: 'mousemove',
			    fn: function fn(event) {
			      var button = event.button,
			          clientX = event.clientX,
			          clientY = event.clientY;

			      if (button !== primaryButton) {
			        return;
			      }

			      var point = {
			        x: clientX,
			        y: clientY
			      };
			      var phase = getPhase();

			      if (phase.type === 'DRAGGING') {
			        event.preventDefault();
			        phase.actions.move(point);
			        return;
			      }

			      !(phase.type === 'PENDING') ? invariant(false) : void 0;
			      var pending = phase.point;

			      if (!isSloppyClickThresholdExceeded(pending, point)) {
			        return;
			      }

			      event.preventDefault();
			      var actions = phase.actions.fluidLift(point);
			      setPhase({
			        type: 'DRAGGING',
			        actions: actions
			      });
			    }
			  }, {
			    eventName: 'mouseup',
			    fn: function fn(event) {
			      var phase = getPhase();

			      if (phase.type !== 'DRAGGING') {
			        cancel();
			        return;
			      }

			      event.preventDefault();
			      phase.actions.drop({
			        shouldBlockNextClick: true
			      });
			      completed();
			    }
			  }, {
			    eventName: 'mousedown',
			    fn: function fn(event) {
			      if (getPhase().type === 'DRAGGING') {
			        event.preventDefault();
			      }

			      cancel();
			    }
			  }, {
			    eventName: 'keydown',
			    fn: function fn(event) {
			      var phase = getPhase();

			      if (phase.type === 'PENDING') {
			        cancel();
			        return;
			      }

			      if (event.keyCode === escape) {
			        event.preventDefault();
			        cancel();
			        return;
			      }

			      preventStandardKeyEvents(event);
			    }
			  }, {
			    eventName: 'resize',
			    fn: cancel
			  }, {
			    eventName: 'scroll',
			    options: {
			      passive: true,
			      capture: false
			    },
			    fn: function fn() {
			      if (getPhase().type === 'PENDING') {
			        cancel();
			      }
			    }
			  }, {
			    eventName: 'webkitmouseforcedown',
			    fn: function fn(event) {
			      var phase = getPhase();
			      !(phase.type !== 'IDLE') ? invariant(false) : void 0;

			      if (phase.actions.shouldRespectForcePress()) {
			        cancel();
			        return;
			      }

			      event.preventDefault();
			    }
			  }, {
			    eventName: supportedEventName,
			    fn: cancel
			  }];
			}

			function useMouseSensor(api) {
			  var phaseRef = React.useRef(idle$1);
			  var unbindEventsRef = React.useRef(noop);
			  var startCaptureBinding = useMemoOne.useMemo(function () {
			    return {
			      eventName: 'mousedown',
			      fn: function onMouseDown(event) {
			        if (event.defaultPrevented) {
			          return;
			        }

			        if (event.button !== primaryButton) {
			          return;
			        }

			        if (event.ctrlKey || event.metaKey || event.shiftKey || event.altKey) {
			          return;
			        }

			        var draggableId = api.findClosestDraggableId(event);

			        if (!draggableId) {
			          return;
			        }

			        var actions = api.tryGetLock(draggableId, stop, {
			          sourceEvent: event
			        });

			        if (!actions) {
			          return;
			        }

			        event.preventDefault();
			        var point = {
			          x: event.clientX,
			          y: event.clientY
			        };
			        unbindEventsRef.current();
			        startPendingDrag(actions, point);
			      }
			    };
			  }, [api]);
			  var preventForcePressBinding = useMemoOne.useMemo(function () {
			    return {
			      eventName: 'webkitmouseforcewillbegin',
			      fn: function fn(event) {
			        if (event.defaultPrevented) {
			          return;
			        }

			        var id = api.findClosestDraggableId(event);

			        if (!id) {
			          return;
			        }

			        var options = api.findOptionsForDraggable(id);

			        if (!options) {
			          return;
			        }

			        if (options.shouldRespectForcePress) {
			          return;
			        }

			        if (!api.canGetLock(id)) {
			          return;
			        }

			        event.preventDefault();
			      }
			    };
			  }, [api]);
			  var listenForCapture = useMemoOne.useCallback(function listenForCapture() {
			    var options = {
			      passive: false,
			      capture: true
			    };
			    unbindEventsRef.current = bindEvents(window, [preventForcePressBinding, startCaptureBinding], options);
			  }, [preventForcePressBinding, startCaptureBinding]);
			  var stop = useMemoOne.useCallback(function () {
			    var current = phaseRef.current;

			    if (current.type === 'IDLE') {
			      return;
			    }

			    phaseRef.current = idle$1;
			    unbindEventsRef.current();
			    listenForCapture();
			  }, [listenForCapture]);
			  var cancel = useMemoOne.useCallback(function () {
			    var phase = phaseRef.current;
			    stop();

			    if (phase.type === 'DRAGGING') {
			      phase.actions.cancel({
			        shouldBlockNextClick: true
			      });
			    }

			    if (phase.type === 'PENDING') {
			      phase.actions.abort();
			    }
			  }, [stop]);
			  var bindCapturingEvents = useMemoOne.useCallback(function bindCapturingEvents() {
			    var options = {
			      capture: true,
			      passive: false
			    };
			    var bindings = getCaptureBindings({
			      cancel: cancel,
			      completed: stop,
			      getPhase: function getPhase() {
			        return phaseRef.current;
			      },
			      setPhase: function setPhase(phase) {
			        phaseRef.current = phase;
			      }
			    });
			    unbindEventsRef.current = bindEvents(window, bindings, options);
			  }, [cancel, stop]);
			  var startPendingDrag = useMemoOne.useCallback(function startPendingDrag(actions, point) {
			    !(phaseRef.current.type === 'IDLE') ? invariant(false) : void 0;
			    phaseRef.current = {
			      type: 'PENDING',
			      point: point,
			      actions: actions
			    };
			    bindCapturingEvents();
			  }, [bindCapturingEvents]);
			  useIsomorphicLayoutEffect(function mount() {
			    listenForCapture();
			    return function unmount() {
			      unbindEventsRef.current();
			    };
			  }, [listenForCapture]);
			}

			var _scrollJumpKeys;

			function noop$1() {}

			var scrollJumpKeys = (_scrollJumpKeys = {}, _scrollJumpKeys[pageDown] = true, _scrollJumpKeys[pageUp] = true, _scrollJumpKeys[home] = true, _scrollJumpKeys[end] = true, _scrollJumpKeys);

			function getDraggingBindings(actions, stop) {
			  function cancel() {
			    stop();
			    actions.cancel();
			  }

			  function drop() {
			    stop();
			    actions.drop();
			  }

			  return [{
			    eventName: 'keydown',
			    fn: function fn(event) {
			      if (event.keyCode === escape) {
			        event.preventDefault();
			        cancel();
			        return;
			      }

			      if (event.keyCode === space) {
			        event.preventDefault();
			        drop();
			        return;
			      }

			      if (event.keyCode === arrowDown) {
			        event.preventDefault();
			        actions.moveDown();
			        return;
			      }

			      if (event.keyCode === arrowUp) {
			        event.preventDefault();
			        actions.moveUp();
			        return;
			      }

			      if (event.keyCode === arrowRight) {
			        event.preventDefault();
			        actions.moveRight();
			        return;
			      }

			      if (event.keyCode === arrowLeft) {
			        event.preventDefault();
			        actions.moveLeft();
			        return;
			      }

			      if (scrollJumpKeys[event.keyCode]) {
			        event.preventDefault();
			        return;
			      }

			      preventStandardKeyEvents(event);
			    }
			  }, {
			    eventName: 'mousedown',
			    fn: cancel
			  }, {
			    eventName: 'mouseup',
			    fn: cancel
			  }, {
			    eventName: 'click',
			    fn: cancel
			  }, {
			    eventName: 'touchstart',
			    fn: cancel
			  }, {
			    eventName: 'resize',
			    fn: cancel
			  }, {
			    eventName: 'wheel',
			    fn: cancel,
			    options: {
			      passive: true
			    }
			  }, {
			    eventName: supportedEventName,
			    fn: cancel
			  }];
			}

			function useKeyboardSensor(api) {
			  var unbindEventsRef = React.useRef(noop$1);
			  var startCaptureBinding = useMemoOne.useMemo(function () {
			    return {
			      eventName: 'keydown',
			      fn: function onKeyDown(event) {
			        if (event.defaultPrevented) {
			          return;
			        }

			        if (event.keyCode !== space) {
			          return;
			        }

			        var draggableId = api.findClosestDraggableId(event);

			        if (!draggableId) {
			          return;
			        }

			        var preDrag = api.tryGetLock(draggableId, stop, {
			          sourceEvent: event
			        });

			        if (!preDrag) {
			          return;
			        }

			        event.preventDefault();
			        var isCapturing = true;
			        var actions = preDrag.snapLift();
			        unbindEventsRef.current();

			        function stop() {
			          !isCapturing ? invariant(false) : void 0;
			          isCapturing = false;
			          unbindEventsRef.current();
			          listenForCapture();
			        }

			        unbindEventsRef.current = bindEvents(window, getDraggingBindings(actions, stop), {
			          capture: true,
			          passive: false
			        });
			      }
			    };
			  }, [api]);
			  var listenForCapture = useMemoOne.useCallback(function tryStartCapture() {
			    var options = {
			      passive: false,
			      capture: true
			    };
			    unbindEventsRef.current = bindEvents(window, [startCaptureBinding], options);
			  }, [startCaptureBinding]);
			  useIsomorphicLayoutEffect(function mount() {
			    listenForCapture();
			    return function unmount() {
			      unbindEventsRef.current();
			    };
			  }, [listenForCapture]);
			}

			var idle$2 = {
			  type: 'IDLE'
			};
			var timeForLongPress = 120;
			var forcePressThreshold = 0.15;

			function getWindowBindings(_ref) {
			  var cancel = _ref.cancel,
			      getPhase = _ref.getPhase;
			  return [{
			    eventName: 'orientationchange',
			    fn: cancel
			  }, {
			    eventName: 'resize',
			    fn: cancel
			  }, {
			    eventName: 'contextmenu',
			    fn: function fn(event) {
			      event.preventDefault();
			    }
			  }, {
			    eventName: 'keydown',
			    fn: function fn(event) {
			      if (getPhase().type !== 'DRAGGING') {
			        cancel();
			        return;
			      }

			      if (event.keyCode === escape) {
			        event.preventDefault();
			      }

			      cancel();
			    }
			  }, {
			    eventName: supportedEventName,
			    fn: cancel
			  }];
			}

			function getHandleBindings(_ref2) {
			  var cancel = _ref2.cancel,
			      completed = _ref2.completed,
			      getPhase = _ref2.getPhase;
			  return [{
			    eventName: 'touchmove',
			    options: {
			      capture: false
			    },
			    fn: function fn(event) {
			      var phase = getPhase();

			      if (phase.type !== 'DRAGGING') {
			        cancel();
			        return;
			      }

			      phase.hasMoved = true;
			      var _event$touches$ = event.touches[0],
			          clientX = _event$touches$.clientX,
			          clientY = _event$touches$.clientY;
			      var point = {
			        x: clientX,
			        y: clientY
			      };
			      event.preventDefault();
			      phase.actions.move(point);
			    }
			  }, {
			    eventName: 'touchend',
			    fn: function fn(event) {
			      var phase = getPhase();

			      if (phase.type !== 'DRAGGING') {
			        cancel();
			        return;
			      }

			      event.preventDefault();
			      phase.actions.drop({
			        shouldBlockNextClick: true
			      });
			      completed();
			    }
			  }, {
			    eventName: 'touchcancel',
			    fn: function fn(event) {
			      if (getPhase().type !== 'DRAGGING') {
			        cancel();
			        return;
			      }

			      event.preventDefault();
			      cancel();
			    }
			  }, {
			    eventName: 'touchforcechange',
			    fn: function fn(event) {
			      var phase = getPhase();
			      !(phase.type !== 'IDLE') ? invariant(false) : void 0;
			      var touch = event.touches[0];

			      if (!touch) {
			        return;
			      }

			      var isForcePress = touch.force >= forcePressThreshold;

			      if (!isForcePress) {
			        return;
			      }

			      var shouldRespect = phase.actions.shouldRespectForcePress();

			      if (phase.type === 'PENDING') {
			        if (shouldRespect) {
			          cancel();
			        }

			        return;
			      }

			      if (shouldRespect) {
			        if (phase.hasMoved) {
			          event.preventDefault();
			          return;
			        }

			        cancel();
			        return;
			      }

			      event.preventDefault();
			    }
			  }, {
			    eventName: supportedEventName,
			    fn: cancel
			  }];
			}

			function useTouchSensor(api) {
			  var phaseRef = React.useRef(idle$2);
			  var unbindEventsRef = React.useRef(noop);
			  var getPhase = useMemoOne.useCallback(function getPhase() {
			    return phaseRef.current;
			  }, []);
			  var setPhase = useMemoOne.useCallback(function setPhase(phase) {
			    phaseRef.current = phase;
			  }, []);
			  var startCaptureBinding = useMemoOne.useMemo(function () {
			    return {
			      eventName: 'touchstart',
			      fn: function onTouchStart(event) {
			        if (event.defaultPrevented) {
			          return;
			        }

			        var draggableId = api.findClosestDraggableId(event);

			        if (!draggableId) {
			          return;
			        }

			        var actions = api.tryGetLock(draggableId, stop, {
			          sourceEvent: event
			        });

			        if (!actions) {
			          return;
			        }

			        var touch = event.touches[0];
			        var clientX = touch.clientX,
			            clientY = touch.clientY;
			        var point = {
			          x: clientX,
			          y: clientY
			        };
			        unbindEventsRef.current();
			        startPendingDrag(actions, point);
			      }
			    };
			  }, [api]);
			  var listenForCapture = useMemoOne.useCallback(function listenForCapture() {
			    var options = {
			      capture: true,
			      passive: false
			    };
			    unbindEventsRef.current = bindEvents(window, [startCaptureBinding], options);
			  }, [startCaptureBinding]);
			  var stop = useMemoOne.useCallback(function () {
			    var current = phaseRef.current;

			    if (current.type === 'IDLE') {
			      return;
			    }

			    if (current.type === 'PENDING') {
			      clearTimeout(current.longPressTimerId);
			    }

			    setPhase(idle$2);
			    unbindEventsRef.current();
			    listenForCapture();
			  }, [listenForCapture, setPhase]);
			  var cancel = useMemoOne.useCallback(function () {
			    var phase = phaseRef.current;
			    stop();

			    if (phase.type === 'DRAGGING') {
			      phase.actions.cancel({
			        shouldBlockNextClick: true
			      });
			    }

			    if (phase.type === 'PENDING') {
			      phase.actions.abort();
			    }
			  }, [stop]);
			  var bindCapturingEvents = useMemoOne.useCallback(function bindCapturingEvents() {
			    var options = {
			      capture: true,
			      passive: false
			    };
			    var args = {
			      cancel: cancel,
			      completed: stop,
			      getPhase: getPhase
			    };
			    var unbindTarget = bindEvents(window, getHandleBindings(args), options);
			    var unbindWindow = bindEvents(window, getWindowBindings(args), options);

			    unbindEventsRef.current = function unbindAll() {
			      unbindTarget();
			      unbindWindow();
			    };
			  }, [cancel, getPhase, stop]);
			  var startDragging = useMemoOne.useCallback(function startDragging() {
			    var phase = getPhase();
			    !(phase.type === 'PENDING') ? invariant(false) : void 0;
			    var actions = phase.actions.fluidLift(phase.point);
			    setPhase({
			      type: 'DRAGGING',
			      actions: actions,
			      hasMoved: false
			    });
			  }, [getPhase, setPhase]);
			  var startPendingDrag = useMemoOne.useCallback(function startPendingDrag(actions, point) {
			    !(getPhase().type === 'IDLE') ? invariant(false) : void 0;
			    var longPressTimerId = setTimeout(startDragging, timeForLongPress);
			    setPhase({
			      type: 'PENDING',
			      point: point,
			      actions: actions,
			      longPressTimerId: longPressTimerId
			    });
			    bindCapturingEvents();
			  }, [bindCapturingEvents, getPhase, setPhase, startDragging]);
			  useIsomorphicLayoutEffect(function mount() {
			    listenForCapture();
			    return function unmount() {
			      unbindEventsRef.current();
			      var phase = getPhase();

			      if (phase.type === 'PENDING') {
			        clearTimeout(phase.longPressTimerId);
			        setPhase(idle$2);
			      }
			    };
			  }, [getPhase, listenForCapture, setPhase]);
			  useIsomorphicLayoutEffect(function webkitHack() {
			    var unbind = bindEvents(window, [{
			      eventName: 'touchmove',
			      fn: function fn() {},
			      options: {
			        capture: false,
			        passive: false
			      }
			    }]);
			    return unbind;
			  }, []);
			}

			var interactiveTagNames = {
			  input: true,
			  button: true,
			  textarea: true,
			  select: true,
			  option: true,
			  optgroup: true,
			  video: true,
			  audio: true
			};

			function isAnInteractiveElement(parent, current) {
			  if (current == null) {
			    return false;
			  }

			  var hasAnInteractiveTag = Boolean(interactiveTagNames[current.tagName.toLowerCase()]);

			  if (hasAnInteractiveTag) {
			    return true;
			  }

			  var attribute = current.getAttribute('contenteditable');

			  if (attribute === 'true' || attribute === '') {
			    return true;
			  }

			  if (current === parent) {
			    return false;
			  }

			  return isAnInteractiveElement(parent, current.parentElement);
			}

			function isEventInInteractiveElement(draggable, event) {
			  var target = event.target;

			  if (!isHtmlElement(target)) {
			    return false;
			  }

			  return isAnInteractiveElement(draggable, target);
			}

			var getBorderBoxCenterPosition = (function (el) {
			  return cssBoxModel.getRect(el.getBoundingClientRect()).center;
			});

			function isElement(el) {
			  return el instanceof getWindowFromEl(el).Element;
			}

			var supportedMatchesName = function () {
			  var base = 'matches';

			  if (typeof document === 'undefined') {
			    return base;
			  }

			  var candidates = [base, 'msMatchesSelector', 'webkitMatchesSelector'];
			  var value = find(candidates, function (name) {
			    return name in Element.prototype;
			  });
			  return value || base;
			}();

			function closestPonyfill(el, selector) {
			  if (el == null) {
			    return null;
			  }

			  if (el[supportedMatchesName](selector)) {
			    return el;
			  }

			  return closestPonyfill(el.parentElement, selector);
			}

			function closest$1(el, selector) {
			  if (el.closest) {
			    return el.closest(selector);
			  }

			  return closestPonyfill(el, selector);
			}

			function getSelector(contextId) {
			  return "[" + dragHandle.contextId + "=\"" + contextId + "\"]";
			}

			function findClosestDragHandleFromEvent(contextId, event) {
			  var target = event.target;

			  if (!isElement(target)) {
			    return null;
			  }

			  var selector = getSelector(contextId);
			  var handle = closest$1(target, selector);

			  if (!handle) {
			    return null;
			  }

			  if (!isHtmlElement(handle)) {
			    return null;
			  }

			  return handle;
			}

			function tryGetClosestDraggableIdFromEvent(contextId, event) {
			  var handle = findClosestDragHandleFromEvent(contextId, event);

			  if (!handle) {
			    return null;
			  }

			  return handle.getAttribute(dragHandle.draggableId);
			}

			function findDraggable(contextId, draggableId) {
			  var selector = "[" + draggable.contextId + "=\"" + contextId + "\"]";
			  var possible = toArray(document.querySelectorAll(selector));
			  var draggable$1 = find(possible, function (el) {
			    return el.getAttribute(draggable.id) === draggableId;
			  });

			  if (!draggable$1) {
			    return null;
			  }

			  if (!isHtmlElement(draggable$1)) {
			    return null;
			  }

			  return draggable$1;
			}

			function preventDefault(event) {
			  event.preventDefault();
			}

			function _isActive(_ref) {
			  var expected = _ref.expected,
			      phase = _ref.phase,
			      isLockActive = _ref.isLockActive;
			      _ref.shouldWarn;

			  if (!isLockActive()) {

			    return false;
			  }

			  if (expected !== phase) {

			    return false;
			  }

			  return true;
			}

			function canStart(_ref2) {
			  var lockAPI = _ref2.lockAPI,
			      store = _ref2.store,
			      registry = _ref2.registry,
			      draggableId = _ref2.draggableId;

			  if (lockAPI.isClaimed()) {
			    return false;
			  }

			  var entry = registry.draggable.findById(draggableId);

			  if (!entry) {
			    return false;
			  }

			  if (!entry.options.isEnabled) {
			    return false;
			  }

			  if (!canStartDrag(store.getState(), draggableId)) {
			    return false;
			  }

			  return true;
			}

			function tryStart(_ref3) {
			  var lockAPI = _ref3.lockAPI,
			      contextId = _ref3.contextId,
			      store = _ref3.store,
			      registry = _ref3.registry,
			      draggableId = _ref3.draggableId,
			      forceSensorStop = _ref3.forceSensorStop,
			      sourceEvent = _ref3.sourceEvent;
			  var shouldStart = canStart({
			    lockAPI: lockAPI,
			    store: store,
			    registry: registry,
			    draggableId: draggableId
			  });

			  if (!shouldStart) {
			    return null;
			  }

			  var entry = registry.draggable.getById(draggableId);
			  var el = findDraggable(contextId, entry.descriptor.id);

			  if (!el) {
			    return null;
			  }

			  if (sourceEvent && !entry.options.canDragInteractiveElements && isEventInInteractiveElement(el, sourceEvent)) {
			    return null;
			  }

			  var lock = lockAPI.claim(forceSensorStop || noop);
			  var phase = 'PRE_DRAG';

			  function getShouldRespectForcePress() {
			    return entry.options.shouldRespectForcePress;
			  }

			  function isLockActive() {
			    return lockAPI.isActive(lock);
			  }

			  function tryDispatch(expected, getAction) {
			    if (_isActive({
			      expected: expected,
			      phase: phase,
			      isLockActive: isLockActive,
			      shouldWarn: true
			    })) {
			      store.dispatch(getAction());
			    }
			  }

			  var tryDispatchWhenDragging = tryDispatch.bind(null, 'DRAGGING');

			  function lift$1(args) {
			    function completed() {
			      lockAPI.release();
			      phase = 'COMPLETED';
			    }

			    if (phase !== 'PRE_DRAG') {
			      completed();
			      !(phase === 'PRE_DRAG') ? invariant(false) : void 0;
			    }

			    store.dispatch(lift(args.liftActionArgs));
			    phase = 'DRAGGING';

			    function finish(reason, options) {
			      if (options === void 0) {
			        options = {
			          shouldBlockNextClick: false
			        };
			      }

			      args.cleanup();

			      if (options.shouldBlockNextClick) {
			        var unbind = bindEvents(window, [{
			          eventName: 'click',
			          fn: preventDefault,
			          options: {
			            once: true,
			            passive: false,
			            capture: true
			          }
			        }]);
			        setTimeout(unbind);
			      }

			      completed();
			      store.dispatch(drop({
			        reason: reason
			      }));
			    }

			    return _extends({
			      isActive: function isActive() {
			        return _isActive({
			          expected: 'DRAGGING',
			          phase: phase,
			          isLockActive: isLockActive,
			          shouldWarn: false
			        });
			      },
			      shouldRespectForcePress: getShouldRespectForcePress,
			      drop: function drop(options) {
			        return finish('DROP', options);
			      },
			      cancel: function cancel(options) {
			        return finish('CANCEL', options);
			      }
			    }, args.actions);
			  }

			  function fluidLift(clientSelection) {
			    var move$1 = rafSchd(function (client) {
			      tryDispatchWhenDragging(function () {
			        return move({
			          client: client
			        });
			      });
			    });
			    var api = lift$1({
			      liftActionArgs: {
			        id: draggableId,
			        clientSelection: clientSelection,
			        movementMode: 'FLUID'
			      },
			      cleanup: function cleanup() {
			        return move$1.cancel();
			      },
			      actions: {
			        move: move$1
			      }
			    });
			    return _extends({}, api, {
			      move: move$1
			    });
			  }

			  function snapLift() {
			    var actions = {
			      moveUp: function moveUp$1() {
			        return tryDispatchWhenDragging(moveUp);
			      },
			      moveRight: function moveRight$1() {
			        return tryDispatchWhenDragging(moveRight);
			      },
			      moveDown: function moveDown$1() {
			        return tryDispatchWhenDragging(moveDown);
			      },
			      moveLeft: function moveLeft$1() {
			        return tryDispatchWhenDragging(moveLeft);
			      }
			    };
			    return lift$1({
			      liftActionArgs: {
			        id: draggableId,
			        clientSelection: getBorderBoxCenterPosition(el),
			        movementMode: 'SNAP'
			      },
			      cleanup: noop,
			      actions: actions
			    });
			  }

			  function abortPreDrag() {
			    var shouldRelease = _isActive({
			      expected: 'PRE_DRAG',
			      phase: phase,
			      isLockActive: isLockActive,
			      shouldWarn: true
			    });

			    if (shouldRelease) {
			      lockAPI.release();
			    }
			  }

			  var preDrag = {
			    isActive: function isActive() {
			      return _isActive({
			        expected: 'PRE_DRAG',
			        phase: phase,
			        isLockActive: isLockActive,
			        shouldWarn: false
			      });
			    },
			    shouldRespectForcePress: getShouldRespectForcePress,
			    fluidLift: fluidLift,
			    snapLift: snapLift,
			    abort: abortPreDrag
			  };
			  return preDrag;
			}

			var defaultSensors = [useMouseSensor, useKeyboardSensor, useTouchSensor];
			function useSensorMarshal(_ref4) {
			  var contextId = _ref4.contextId,
			      store = _ref4.store,
			      registry = _ref4.registry,
			      customSensors = _ref4.customSensors,
			      enableDefaultSensors = _ref4.enableDefaultSensors;
			  var useSensors = [].concat(enableDefaultSensors ? defaultSensors : [], customSensors || []);
			  var lockAPI = React.useState(function () {
			    return create();
			  })[0];
			  var tryAbandonLock = useMemoOne.useCallback(function tryAbandonLock(previous, current) {
			    if (previous.isDragging && !current.isDragging) {
			      lockAPI.tryAbandon();
			    }
			  }, [lockAPI]);
			  useIsomorphicLayoutEffect(function listenToStore() {
			    var previous = store.getState();
			    var unsubscribe = store.subscribe(function () {
			      var current = store.getState();
			      tryAbandonLock(previous, current);
			      previous = current;
			    });
			    return unsubscribe;
			  }, [lockAPI, store, tryAbandonLock]);
			  useIsomorphicLayoutEffect(function () {
			    return lockAPI.tryAbandon;
			  }, [lockAPI.tryAbandon]);
			  var canGetLock = useMemoOne.useCallback(function (draggableId) {
			    return canStart({
			      lockAPI: lockAPI,
			      registry: registry,
			      store: store,
			      draggableId: draggableId
			    });
			  }, [lockAPI, registry, store]);
			  var tryGetLock = useMemoOne.useCallback(function (draggableId, forceStop, options) {
			    return tryStart({
			      lockAPI: lockAPI,
			      registry: registry,
			      contextId: contextId,
			      store: store,
			      draggableId: draggableId,
			      forceSensorStop: forceStop,
			      sourceEvent: options && options.sourceEvent ? options.sourceEvent : null
			    });
			  }, [contextId, lockAPI, registry, store]);
			  var findClosestDraggableId = useMemoOne.useCallback(function (event) {
			    return tryGetClosestDraggableIdFromEvent(contextId, event);
			  }, [contextId]);
			  var findOptionsForDraggable = useMemoOne.useCallback(function (id) {
			    var entry = registry.draggable.findById(id);
			    return entry ? entry.options : null;
			  }, [registry.draggable]);
			  var tryReleaseLock = useMemoOne.useCallback(function tryReleaseLock() {
			    if (!lockAPI.isClaimed()) {
			      return;
			    }

			    lockAPI.tryAbandon();

			    if (store.getState().phase !== 'IDLE') {
			      store.dispatch(flush());
			    }
			  }, [lockAPI, store]);
			  var isLockClaimed = useMemoOne.useCallback(lockAPI.isClaimed, [lockAPI]);
			  var api = useMemoOne.useMemo(function () {
			    return {
			      canGetLock: canGetLock,
			      tryGetLock: tryGetLock,
			      findClosestDraggableId: findClosestDraggableId,
			      findOptionsForDraggable: findOptionsForDraggable,
			      tryReleaseLock: tryReleaseLock,
			      isLockClaimed: isLockClaimed
			    };
			  }, [canGetLock, tryGetLock, findClosestDraggableId, findOptionsForDraggable, tryReleaseLock, isLockClaimed]);

			  for (var i = 0; i < useSensors.length; i++) {
			    useSensors[i](api);
			  }
			}

			var createResponders = function createResponders(props) {
			  return {
			    onBeforeCapture: props.onBeforeCapture,
			    onBeforeDragStart: props.onBeforeDragStart,
			    onDragStart: props.onDragStart,
			    onDragEnd: props.onDragEnd,
			    onDragUpdate: props.onDragUpdate
			  };
			};

			function getStore(lazyRef) {
			  !lazyRef.current ? invariant(false) : void 0;
			  return lazyRef.current;
			}

			function App(props) {
			  var contextId = props.contextId,
			      setCallbacks = props.setCallbacks,
			      sensors = props.sensors,
			      nonce = props.nonce,
			      dragHandleUsageInstructions = props.dragHandleUsageInstructions;
			  var lazyStoreRef = React.useRef(null);
			  var lastPropsRef = usePrevious(props);
			  var getResponders = useMemoOne.useCallback(function () {
			    return createResponders(lastPropsRef.current);
			  }, [lastPropsRef]);
			  var announce = useAnnouncer(contextId);
			  var dragHandleUsageInstructionsId = useHiddenTextElement({
			    contextId: contextId,
			    text: dragHandleUsageInstructions
			  });
			  var styleMarshal = useStyleMarshal(contextId, nonce);
			  var lazyDispatch = useMemoOne.useCallback(function (action) {
			    getStore(lazyStoreRef).dispatch(action);
			  }, []);
			  var marshalCallbacks = useMemoOne.useMemo(function () {
			    return redux.bindActionCreators({
			      publishWhileDragging: publishWhileDragging,
			      updateDroppableScroll: updateDroppableScroll,
			      updateDroppableIsEnabled: updateDroppableIsEnabled,
			      updateDroppableIsCombineEnabled: updateDroppableIsCombineEnabled,
			      collectionStarting: collectionStarting
			    }, lazyDispatch);
			  }, [lazyDispatch]);
			  var registry = useRegistry();
			  var dimensionMarshal = useMemoOne.useMemo(function () {
			    return createDimensionMarshal(registry, marshalCallbacks);
			  }, [registry, marshalCallbacks]);
			  var autoScroller = useMemoOne.useMemo(function () {
			    return createAutoScroller(_extends({
			      scrollWindow: scrollWindow,
			      scrollDroppable: dimensionMarshal.scrollDroppable
			    }, redux.bindActionCreators({
			      move: move
			    }, lazyDispatch)));
			  }, [dimensionMarshal.scrollDroppable, lazyDispatch]);
			  var focusMarshal = useFocusMarshal(contextId);
			  var store = useMemoOne.useMemo(function () {
			    return createStore({
			      announce: announce,
			      autoScroller: autoScroller,
			      dimensionMarshal: dimensionMarshal,
			      focusMarshal: focusMarshal,
			      getResponders: getResponders,
			      styleMarshal: styleMarshal
			    });
			  }, [announce, autoScroller, dimensionMarshal, focusMarshal, getResponders, styleMarshal]);

			  lazyStoreRef.current = store;
			  var tryResetStore = useMemoOne.useCallback(function () {
			    var current = getStore(lazyStoreRef);
			    var state = current.getState();

			    if (state.phase !== 'IDLE') {
			      current.dispatch(flush());
			    }
			  }, []);
			  var isDragging = useMemoOne.useCallback(function () {
			    var state = getStore(lazyStoreRef).getState();
			    return state.isDragging || state.phase === 'DROP_ANIMATING';
			  }, []);
			  var appCallbacks = useMemoOne.useMemo(function () {
			    return {
			      isDragging: isDragging,
			      tryAbort: tryResetStore
			    };
			  }, [isDragging, tryResetStore]);
			  setCallbacks(appCallbacks);
			  var getCanLift = useMemoOne.useCallback(function (id) {
			    return canStartDrag(getStore(lazyStoreRef).getState(), id);
			  }, []);
			  var getIsMovementAllowed = useMemoOne.useCallback(function () {
			    return isMovementAllowed(getStore(lazyStoreRef).getState());
			  }, []);
			  var appContext = useMemoOne.useMemo(function () {
			    return {
			      marshal: dimensionMarshal,
			      focus: focusMarshal,
			      contextId: contextId,
			      canLift: getCanLift,
			      isMovementAllowed: getIsMovementAllowed,
			      dragHandleUsageInstructionsId: dragHandleUsageInstructionsId,
			      registry: registry
			    };
			  }, [contextId, dimensionMarshal, dragHandleUsageInstructionsId, focusMarshal, getCanLift, getIsMovementAllowed, registry]);
			  useSensorMarshal({
			    contextId: contextId,
			    store: store,
			    registry: registry,
			    customSensors: sensors,
			    enableDefaultSensors: props.enableDefaultSensors !== false
			  });
			  React.useEffect(function () {
			    return tryResetStore;
			  }, [tryResetStore]);
			  return React__default.createElement(AppContext.Provider, {
			    value: appContext
			  }, React__default.createElement(reactRedux.Provider, {
			    context: StoreContext,
			    store: store
			  }, props.children));
			}

			var count$1 = 0;
			function reset$1() {
			  count$1 = 0;
			}
			function useInstanceCount() {
			  return useMemoOne.useMemo(function () {
			    return "" + count$1++;
			  }, []);
			}

			function resetServerContext() {
			  reset$1();
			  reset();
			}
			function DragDropContext(props) {
			  var contextId = useInstanceCount();
			  var dragHandleUsageInstructions = props.dragHandleUsageInstructions || preset.dragHandleUsageInstructions;
			  return React__default.createElement(ErrorBoundary, null, function (setCallbacks) {
			    return React__default.createElement(App, {
			      nonce: props.nonce,
			      contextId: contextId,
			      setCallbacks: setCallbacks,
			      dragHandleUsageInstructions: dragHandleUsageInstructions,
			      enableDefaultSensors: props.enableDefaultSensors,
			      sensors: props.sensors,
			      onBeforeCapture: props.onBeforeCapture,
			      onBeforeDragStart: props.onBeforeDragStart,
			      onDragStart: props.onDragStart,
			      onDragUpdate: props.onDragUpdate,
			      onDragEnd: props.onDragEnd
			    }, props.children);
			  });
			}

			var isEqual$1 = function isEqual(base) {
			  return function (value) {
			    return base === value;
			  };
			};

			var isScroll = isEqual$1('scroll');
			var isAuto = isEqual$1('auto');

			var isEither = function isEither(overflow, fn) {
			  return fn(overflow.overflowX) || fn(overflow.overflowY);
			};

			var isElementScrollable = function isElementScrollable(el) {
			  var style = window.getComputedStyle(el);
			  var overflow = {
			    overflowX: style.overflowX,
			    overflowY: style.overflowY
			  };
			  return isEither(overflow, isScroll) || isEither(overflow, isAuto);
			};

			var isBodyScrollable = function isBodyScrollable() {
			  {
			    return false;
			  }
			};

			var getClosestScrollable = function getClosestScrollable(el) {
			  if (el == null) {
			    return null;
			  }

			  if (el === document.body) {
			    return isBodyScrollable() ? el : null;
			  }

			  if (el === document.documentElement) {
			    return null;
			  }

			  if (!isElementScrollable(el)) {
			    return getClosestScrollable(el.parentElement);
			  }

			  return el;
			};

			var getScroll$1 = (function (el) {
			  return {
			    x: el.scrollLeft,
			    y: el.scrollTop
			  };
			});

			var getIsFixed = function getIsFixed(el) {
			  if (!el) {
			    return false;
			  }

			  var style = window.getComputedStyle(el);

			  if (style.position === 'fixed') {
			    return true;
			  }

			  return getIsFixed(el.parentElement);
			};

			var getEnv = (function (start) {
			  var closestScrollable = getClosestScrollable(start);
			  var isFixedOnPage = getIsFixed(start);
			  return {
			    closestScrollable: closestScrollable,
			    isFixedOnPage: isFixedOnPage
			  };
			});

			var getDroppableDimension = (function (_ref) {
			  var descriptor = _ref.descriptor,
			      isEnabled = _ref.isEnabled,
			      isCombineEnabled = _ref.isCombineEnabled,
			      isFixedOnPage = _ref.isFixedOnPage,
			      direction = _ref.direction,
			      client = _ref.client,
			      page = _ref.page,
			      closest = _ref.closest;

			  var frame = function () {
			    if (!closest) {
			      return null;
			    }

			    var scrollSize = closest.scrollSize,
			        frameClient = closest.client;
			    var maxScroll = getMaxScroll({
			      scrollHeight: scrollSize.scrollHeight,
			      scrollWidth: scrollSize.scrollWidth,
			      height: frameClient.paddingBox.height,
			      width: frameClient.paddingBox.width
			    });
			    return {
			      pageMarginBox: closest.page.marginBox,
			      frameClient: frameClient,
			      scrollSize: scrollSize,
			      shouldClipSubject: closest.shouldClipSubject,
			      scroll: {
			        initial: closest.scroll,
			        current: closest.scroll,
			        max: maxScroll,
			        diff: {
			          value: origin,
			          displacement: origin
			        }
			      }
			    };
			  }();

			  var axis = direction === 'vertical' ? vertical : horizontal;
			  var subject = getSubject({
			    page: page,
			    withPlaceholder: null,
			    axis: axis,
			    frame: frame
			  });
			  var dimension = {
			    descriptor: descriptor,
			    isCombineEnabled: isCombineEnabled,
			    isFixedOnPage: isFixedOnPage,
			    axis: axis,
			    isEnabled: isEnabled,
			    client: client,
			    page: page,
			    frame: frame,
			    subject: subject
			  };
			  return dimension;
			});

			var getClient = function getClient(targetRef, closestScrollable) {
			  var base = cssBoxModel.getBox(targetRef);

			  if (!closestScrollable) {
			    return base;
			  }

			  if (targetRef !== closestScrollable) {
			    return base;
			  }

			  var top = base.paddingBox.top - closestScrollable.scrollTop;
			  var left = base.paddingBox.left - closestScrollable.scrollLeft;
			  var bottom = top + closestScrollable.scrollHeight;
			  var right = left + closestScrollable.scrollWidth;
			  var paddingBox = {
			    top: top,
			    right: right,
			    bottom: bottom,
			    left: left
			  };
			  var borderBox = cssBoxModel.expand(paddingBox, base.border);
			  var client = cssBoxModel.createBox({
			    borderBox: borderBox,
			    margin: base.margin,
			    border: base.border,
			    padding: base.padding
			  });
			  return client;
			};

			var getDimension = (function (_ref) {
			  var ref = _ref.ref,
			      descriptor = _ref.descriptor,
			      env = _ref.env,
			      windowScroll = _ref.windowScroll,
			      direction = _ref.direction,
			      isDropDisabled = _ref.isDropDisabled,
			      isCombineEnabled = _ref.isCombineEnabled,
			      shouldClipSubject = _ref.shouldClipSubject;
			  var closestScrollable = env.closestScrollable;
			  var client = getClient(ref, closestScrollable);
			  var page = cssBoxModel.withScroll(client, windowScroll);

			  var closest = function () {
			    if (!closestScrollable) {
			      return null;
			    }

			    var frameClient = cssBoxModel.getBox(closestScrollable);
			    var scrollSize = {
			      scrollHeight: closestScrollable.scrollHeight,
			      scrollWidth: closestScrollable.scrollWidth
			    };
			    return {
			      client: frameClient,
			      page: cssBoxModel.withScroll(frameClient, windowScroll),
			      scroll: getScroll$1(closestScrollable),
			      scrollSize: scrollSize,
			      shouldClipSubject: shouldClipSubject
			    };
			  }();

			  var dimension = getDroppableDimension({
			    descriptor: descriptor,
			    isEnabled: !isDropDisabled,
			    isCombineEnabled: isCombineEnabled,
			    isFixedOnPage: env.isFixedOnPage,
			    direction: direction,
			    client: client,
			    page: page,
			    closest: closest
			  });
			  return dimension;
			});

			var immediate = {
			  passive: false
			};
			var delayed = {
			  passive: true
			};
			var getListenerOptions = (function (options) {
			  return options.shouldPublishImmediately ? immediate : delayed;
			});

			function useRequiredContext(Context) {
			  var result = React.useContext(Context);
			  !result ? invariant(false) : void 0;
			  return result;
			}

			var getClosestScrollableFromDrag = function getClosestScrollableFromDrag(dragging) {
			  return dragging && dragging.env.closestScrollable || null;
			};

			function useDroppablePublisher(args) {
			  var whileDraggingRef = React.useRef(null);
			  var appContext = useRequiredContext(AppContext);
			  var uniqueId = useUniqueId('droppable');
			  var registry = appContext.registry,
			      marshal = appContext.marshal;
			  var previousRef = usePrevious(args);
			  var descriptor = useMemoOne.useMemo(function () {
			    return {
			      id: args.droppableId,
			      type: args.type,
			      mode: args.mode
			    };
			  }, [args.droppableId, args.mode, args.type]);
			  var publishedDescriptorRef = React.useRef(descriptor);
			  var memoizedUpdateScroll = useMemoOne.useMemo(function () {
			    return memoizeOne(function (x, y) {
			      !whileDraggingRef.current ? invariant(false) : void 0;
			      var scroll = {
			        x: x,
			        y: y
			      };
			      marshal.updateDroppableScroll(descriptor.id, scroll);
			    });
			  }, [descriptor.id, marshal]);
			  var getClosestScroll = useMemoOne.useCallback(function () {
			    var dragging = whileDraggingRef.current;

			    if (!dragging || !dragging.env.closestScrollable) {
			      return origin;
			    }

			    return getScroll$1(dragging.env.closestScrollable);
			  }, []);
			  var updateScroll = useMemoOne.useCallback(function () {
			    var scroll = getClosestScroll();
			    memoizedUpdateScroll(scroll.x, scroll.y);
			  }, [getClosestScroll, memoizedUpdateScroll]);
			  var scheduleScrollUpdate = useMemoOne.useMemo(function () {
			    return rafSchd(updateScroll);
			  }, [updateScroll]);
			  var onClosestScroll = useMemoOne.useCallback(function () {
			    var dragging = whileDraggingRef.current;
			    var closest = getClosestScrollableFromDrag(dragging);
			    !(dragging && closest) ? invariant(false) : void 0;
			    var options = dragging.scrollOptions;

			    if (options.shouldPublishImmediately) {
			      updateScroll();
			      return;
			    }

			    scheduleScrollUpdate();
			  }, [scheduleScrollUpdate, updateScroll]);
			  var getDimensionAndWatchScroll = useMemoOne.useCallback(function (windowScroll, options) {
			    !!whileDraggingRef.current ? invariant(false) : void 0;
			    var previous = previousRef.current;
			    var ref = previous.getDroppableRef();
			    !ref ? invariant(false) : void 0;
			    var env = getEnv(ref);
			    var dragging = {
			      ref: ref,
			      descriptor: descriptor,
			      env: env,
			      scrollOptions: options
			    };
			    whileDraggingRef.current = dragging;
			    var dimension = getDimension({
			      ref: ref,
			      descriptor: descriptor,
			      env: env,
			      windowScroll: windowScroll,
			      direction: previous.direction,
			      isDropDisabled: previous.isDropDisabled,
			      isCombineEnabled: previous.isCombineEnabled,
			      shouldClipSubject: !previous.ignoreContainerClipping
			    });
			    var scrollable = env.closestScrollable;

			    if (scrollable) {
			      scrollable.setAttribute(scrollContainer.contextId, appContext.contextId);
			      scrollable.addEventListener('scroll', onClosestScroll, getListenerOptions(dragging.scrollOptions));
			    }

			    return dimension;
			  }, [appContext.contextId, descriptor, onClosestScroll, previousRef]);
			  var getScrollWhileDragging = useMemoOne.useCallback(function () {
			    var dragging = whileDraggingRef.current;
			    var closest = getClosestScrollableFromDrag(dragging);
			    !(dragging && closest) ? invariant(false) : void 0;
			    return getScroll$1(closest);
			  }, []);
			  var dragStopped = useMemoOne.useCallback(function () {
			    var dragging = whileDraggingRef.current;
			    !dragging ? invariant(false) : void 0;
			    var closest = getClosestScrollableFromDrag(dragging);
			    whileDraggingRef.current = null;

			    if (!closest) {
			      return;
			    }

			    scheduleScrollUpdate.cancel();
			    closest.removeAttribute(scrollContainer.contextId);
			    closest.removeEventListener('scroll', onClosestScroll, getListenerOptions(dragging.scrollOptions));
			  }, [onClosestScroll, scheduleScrollUpdate]);
			  var scroll = useMemoOne.useCallback(function (change) {
			    var dragging = whileDraggingRef.current;
			    !dragging ? invariant(false) : void 0;
			    var closest = getClosestScrollableFromDrag(dragging);
			    !closest ? invariant(false) : void 0;
			    closest.scrollTop += change.y;
			    closest.scrollLeft += change.x;
			  }, []);
			  var callbacks = useMemoOne.useMemo(function () {
			    return {
			      getDimensionAndWatchScroll: getDimensionAndWatchScroll,
			      getScrollWhileDragging: getScrollWhileDragging,
			      dragStopped: dragStopped,
			      scroll: scroll
			    };
			  }, [dragStopped, getDimensionAndWatchScroll, getScrollWhileDragging, scroll]);
			  var entry = useMemoOne.useMemo(function () {
			    return {
			      uniqueId: uniqueId,
			      descriptor: descriptor,
			      callbacks: callbacks
			    };
			  }, [callbacks, descriptor, uniqueId]);
			  useIsomorphicLayoutEffect(function () {
			    publishedDescriptorRef.current = entry.descriptor;
			    registry.droppable.register(entry);
			    return function () {
			      if (whileDraggingRef.current) {
			        dragStopped();
			      }

			      registry.droppable.unregister(entry);
			    };
			  }, [callbacks, descriptor, dragStopped, entry, marshal, registry.droppable]);
			  useIsomorphicLayoutEffect(function () {
			    if (!whileDraggingRef.current) {
			      return;
			    }

			    marshal.updateDroppableIsEnabled(publishedDescriptorRef.current.id, !args.isDropDisabled);
			  }, [args.isDropDisabled, marshal]);
			  useIsomorphicLayoutEffect(function () {
			    if (!whileDraggingRef.current) {
			      return;
			    }

			    marshal.updateDroppableIsCombineEnabled(publishedDescriptorRef.current.id, args.isCombineEnabled);
			  }, [args.isCombineEnabled, marshal]);
			}

			function noop$2() {}

			var empty = {
			  width: 0,
			  height: 0,
			  margin: noSpacing
			};

			var getSize = function getSize(_ref) {
			  var isAnimatingOpenOnMount = _ref.isAnimatingOpenOnMount,
			      placeholder = _ref.placeholder,
			      animate = _ref.animate;

			  if (isAnimatingOpenOnMount) {
			    return empty;
			  }

			  if (animate === 'close') {
			    return empty;
			  }

			  return {
			    height: placeholder.client.borderBox.height,
			    width: placeholder.client.borderBox.width,
			    margin: placeholder.client.margin
			  };
			};

			var getStyle = function getStyle(_ref2) {
			  var isAnimatingOpenOnMount = _ref2.isAnimatingOpenOnMount,
			      placeholder = _ref2.placeholder,
			      animate = _ref2.animate;
			  var size = getSize({
			    isAnimatingOpenOnMount: isAnimatingOpenOnMount,
			    placeholder: placeholder,
			    animate: animate
			  });
			  return {
			    display: placeholder.display,
			    boxSizing: 'border-box',
			    width: size.width,
			    height: size.height,
			    marginTop: size.margin.top,
			    marginRight: size.margin.right,
			    marginBottom: size.margin.bottom,
			    marginLeft: size.margin.left,
			    flexShrink: '0',
			    flexGrow: '0',
			    pointerEvents: 'none',
			    transition: animate !== 'none' ? transitions.placeholder : null
			  };
			};

			function Placeholder(props) {
			  var animateOpenTimerRef = React.useRef(null);
			  var tryClearAnimateOpenTimer = useMemoOne.useCallback(function () {
			    if (!animateOpenTimerRef.current) {
			      return;
			    }

			    clearTimeout(animateOpenTimerRef.current);
			    animateOpenTimerRef.current = null;
			  }, []);
			  var animate = props.animate,
			      onTransitionEnd = props.onTransitionEnd,
			      onClose = props.onClose,
			      contextId = props.contextId;

			  var _useState = React.useState(props.animate === 'open'),
			      isAnimatingOpenOnMount = _useState[0],
			      setIsAnimatingOpenOnMount = _useState[1];

			  React.useEffect(function () {
			    if (!isAnimatingOpenOnMount) {
			      return noop$2;
			    }

			    if (animate !== 'open') {
			      tryClearAnimateOpenTimer();
			      setIsAnimatingOpenOnMount(false);
			      return noop$2;
			    }

			    if (animateOpenTimerRef.current) {
			      return noop$2;
			    }

			    animateOpenTimerRef.current = setTimeout(function () {
			      animateOpenTimerRef.current = null;
			      setIsAnimatingOpenOnMount(false);
			    });
			    return tryClearAnimateOpenTimer;
			  }, [animate, isAnimatingOpenOnMount, tryClearAnimateOpenTimer]);
			  var onSizeChangeEnd = useMemoOne.useCallback(function (event) {
			    if (event.propertyName !== 'height') {
			      return;
			    }

			    onTransitionEnd();

			    if (animate === 'close') {
			      onClose();
			    }
			  }, [animate, onClose, onTransitionEnd]);
			  var style = getStyle({
			    isAnimatingOpenOnMount: isAnimatingOpenOnMount,
			    animate: props.animate,
			    placeholder: props.placeholder
			  });
			  return React__default.createElement(props.placeholder.tagName, {
			    style: style,
			    'data-rbd-placeholder-context-id': contextId,
			    onTransitionEnd: onSizeChangeEnd,
			    ref: props.innerRef
			  });
			}

			var Placeholder$1 = React__default.memo(Placeholder);

			var DroppableContext = React__default.createContext(null);

			var AnimateInOut = function (_React$PureComponent) {
			  _inheritsLoose(AnimateInOut, _React$PureComponent);

			  function AnimateInOut() {
			    var _this;

			    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
			      args[_key] = arguments[_key];
			    }

			    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;
			    _this.state = {
			      isVisible: Boolean(_this.props.on),
			      data: _this.props.on,
			      animate: _this.props.shouldAnimate && _this.props.on ? 'open' : 'none'
			    };

			    _this.onClose = function () {
			      if (_this.state.animate !== 'close') {
			        return;
			      }

			      _this.setState({
			        isVisible: false
			      });
			    };

			    return _this;
			  }

			  AnimateInOut.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
			    if (!props.shouldAnimate) {
			      return {
			        isVisible: Boolean(props.on),
			        data: props.on,
			        animate: 'none'
			      };
			    }

			    if (props.on) {
			      return {
			        isVisible: true,
			        data: props.on,
			        animate: 'open'
			      };
			    }

			    if (state.isVisible) {
			      return {
			        isVisible: true,
			        data: state.data,
			        animate: 'close'
			      };
			    }

			    return {
			      isVisible: false,
			      animate: 'close',
			      data: null
			    };
			  };

			  var _proto = AnimateInOut.prototype;

			  _proto.render = function render() {
			    if (!this.state.isVisible) {
			      return null;
			    }

			    var provided = {
			      onClose: this.onClose,
			      data: this.state.data,
			      animate: this.state.animate
			    };
			    return this.props.children(provided);
			  };

			  return AnimateInOut;
			}(React__default.PureComponent);

			var zIndexOptions = {
			  dragging: 5000,
			  dropAnimating: 4500
			};

			var getDraggingTransition = function getDraggingTransition(shouldAnimateDragMovement, dropping) {
			  if (dropping) {
			    return transitions.drop(dropping.duration);
			  }

			  if (shouldAnimateDragMovement) {
			    return transitions.snap;
			  }

			  return transitions.fluid;
			};

			var getDraggingOpacity = function getDraggingOpacity(isCombining, isDropAnimating) {
			  if (!isCombining) {
			    return null;
			  }

			  return isDropAnimating ? combine.opacity.drop : combine.opacity.combining;
			};

			var getShouldDraggingAnimate = function getShouldDraggingAnimate(dragging) {
			  if (dragging.forceShouldAnimate != null) {
			    return dragging.forceShouldAnimate;
			  }

			  return dragging.mode === 'SNAP';
			};

			function getDraggingStyle(dragging) {
			  var dimension = dragging.dimension;
			  var box = dimension.client;
			  var offset = dragging.offset,
			      combineWith = dragging.combineWith,
			      dropping = dragging.dropping;
			  var isCombining = Boolean(combineWith);
			  var shouldAnimate = getShouldDraggingAnimate(dragging);
			  var isDropAnimating = Boolean(dropping);
			  var transform = isDropAnimating ? transforms.drop(offset, isCombining) : transforms.moveTo(offset);
			  var style = {
			    position: 'fixed',
			    top: box.marginBox.top,
			    left: box.marginBox.left,
			    boxSizing: 'border-box',
			    width: box.borderBox.width,
			    height: box.borderBox.height,
			    transition: getDraggingTransition(shouldAnimate, dropping),
			    transform: transform,
			    opacity: getDraggingOpacity(isCombining, isDropAnimating),
			    zIndex: isDropAnimating ? zIndexOptions.dropAnimating : zIndexOptions.dragging,
			    pointerEvents: 'none'
			  };
			  return style;
			}

			function getSecondaryStyle(secondary) {
			  return {
			    transform: transforms.moveTo(secondary.offset),
			    transition: secondary.shouldAnimateDisplacement ? null : 'none'
			  };
			}

			function getStyle$1(mapped) {
			  return mapped.type === 'DRAGGING' ? getDraggingStyle(mapped) : getSecondaryStyle(mapped);
			}

			function getDimension$1(descriptor, el, windowScroll) {
			  if (windowScroll === void 0) {
			    windowScroll = origin;
			  }

			  var computedStyles = window.getComputedStyle(el);
			  var borderBox = el.getBoundingClientRect();
			  var client = cssBoxModel.calculateBox(borderBox, computedStyles);
			  var page = cssBoxModel.withScroll(client, windowScroll);
			  var placeholder = {
			    client: client,
			    tagName: el.tagName.toLowerCase(),
			    display: computedStyles.display
			  };
			  var displaceBy = {
			    x: client.marginBox.width,
			    y: client.marginBox.height
			  };
			  var dimension = {
			    descriptor: descriptor,
			    placeholder: placeholder,
			    displaceBy: displaceBy,
			    client: client,
			    page: page
			  };
			  return dimension;
			}

			function useDraggablePublisher(args) {
			  var uniqueId = useUniqueId('draggable');
			  var descriptor = args.descriptor,
			      registry = args.registry,
			      getDraggableRef = args.getDraggableRef,
			      canDragInteractiveElements = args.canDragInteractiveElements,
			      shouldRespectForcePress = args.shouldRespectForcePress,
			      isEnabled = args.isEnabled;
			  var options = useMemoOne.useMemo(function () {
			    return {
			      canDragInteractiveElements: canDragInteractiveElements,
			      shouldRespectForcePress: shouldRespectForcePress,
			      isEnabled: isEnabled
			    };
			  }, [canDragInteractiveElements, isEnabled, shouldRespectForcePress]);
			  var getDimension = useMemoOne.useCallback(function (windowScroll) {
			    var el = getDraggableRef();
			    !el ? invariant(false) : void 0;
			    return getDimension$1(descriptor, el, windowScroll);
			  }, [descriptor, getDraggableRef]);
			  var entry = useMemoOne.useMemo(function () {
			    return {
			      uniqueId: uniqueId,
			      descriptor: descriptor,
			      options: options,
			      getDimension: getDimension
			    };
			  }, [descriptor, getDimension, options, uniqueId]);
			  var publishedRef = React.useRef(entry);
			  var isFirstPublishRef = React.useRef(true);
			  useIsomorphicLayoutEffect(function () {
			    registry.draggable.register(publishedRef.current);
			    return function () {
			      return registry.draggable.unregister(publishedRef.current);
			    };
			  }, [registry.draggable]);
			  useIsomorphicLayoutEffect(function () {
			    if (isFirstPublishRef.current) {
			      isFirstPublishRef.current = false;
			      return;
			    }

			    var last = publishedRef.current;
			    publishedRef.current = entry;
			    registry.draggable.update(entry, last);
			  }, [entry, registry.draggable]);
			}

			function preventHtml5Dnd(event) {
			  event.preventDefault();
			}

			function Draggable(props) {
			  var ref = React.useRef(null);
			  var setRef = useMemoOne.useCallback(function (el) {
			    ref.current = el;
			  }, []);
			  var getRef = useMemoOne.useCallback(function () {
			    return ref.current;
			  }, []);

			  var _useRequiredContext = useRequiredContext(AppContext),
			      contextId = _useRequiredContext.contextId,
			      dragHandleUsageInstructionsId = _useRequiredContext.dragHandleUsageInstructionsId,
			      registry = _useRequiredContext.registry;

			  var _useRequiredContext2 = useRequiredContext(DroppableContext),
			      type = _useRequiredContext2.type,
			      droppableId = _useRequiredContext2.droppableId;

			  var descriptor = useMemoOne.useMemo(function () {
			    return {
			      id: props.draggableId,
			      index: props.index,
			      type: type,
			      droppableId: droppableId
			    };
			  }, [props.draggableId, props.index, type, droppableId]);
			  var children = props.children,
			      draggableId = props.draggableId,
			      isEnabled = props.isEnabled,
			      shouldRespectForcePress = props.shouldRespectForcePress,
			      canDragInteractiveElements = props.canDragInteractiveElements,
			      isClone = props.isClone,
			      mapped = props.mapped,
			      dropAnimationFinishedAction = props.dropAnimationFinished;

			  if (!isClone) {
			    var forPublisher = useMemoOne.useMemo(function () {
			      return {
			        descriptor: descriptor,
			        registry: registry,
			        getDraggableRef: getRef,
			        canDragInteractiveElements: canDragInteractiveElements,
			        shouldRespectForcePress: shouldRespectForcePress,
			        isEnabled: isEnabled
			      };
			    }, [descriptor, registry, getRef, canDragInteractiveElements, shouldRespectForcePress, isEnabled]);
			    useDraggablePublisher(forPublisher);
			  }

			  var dragHandleProps = useMemoOne.useMemo(function () {
			    return isEnabled ? {
			      tabIndex: 0,
			      role: 'button',
			      'aria-describedby': dragHandleUsageInstructionsId,
			      'data-rbd-drag-handle-draggable-id': draggableId,
			      'data-rbd-drag-handle-context-id': contextId,
			      draggable: false,
			      onDragStart: preventHtml5Dnd
			    } : null;
			  }, [contextId, dragHandleUsageInstructionsId, draggableId, isEnabled]);
			  var onMoveEnd = useMemoOne.useCallback(function (event) {
			    if (mapped.type !== 'DRAGGING') {
			      return;
			    }

			    if (!mapped.dropping) {
			      return;
			    }

			    if (event.propertyName !== 'transform') {
			      return;
			    }

			    dropAnimationFinishedAction();
			  }, [dropAnimationFinishedAction, mapped]);
			  var provided = useMemoOne.useMemo(function () {
			    var style = getStyle$1(mapped);
			    var onTransitionEnd = mapped.type === 'DRAGGING' && mapped.dropping ? onMoveEnd : null;
			    var result = {
			      innerRef: setRef,
			      draggableProps: {
			        'data-rbd-draggable-context-id': contextId,
			        'data-rbd-draggable-id': draggableId,
			        style: style,
			        onTransitionEnd: onTransitionEnd
			      },
			      dragHandleProps: dragHandleProps
			    };
			    return result;
			  }, [contextId, dragHandleProps, draggableId, mapped, onMoveEnd, setRef]);
			  var rubric = useMemoOne.useMemo(function () {
			    return {
			      draggableId: descriptor.id,
			      type: descriptor.type,
			      source: {
			        index: descriptor.index,
			        droppableId: descriptor.droppableId
			      }
			    };
			  }, [descriptor.droppableId, descriptor.id, descriptor.index, descriptor.type]);
			  return children(provided, mapped.snapshot, rubric);
			}

			var isStrictEqual = (function (a, b) {
			  return a === b;
			});

			var whatIsDraggedOverFromResult = (function (result) {
			  var combine = result.combine,
			      destination = result.destination;

			  if (destination) {
			    return destination.droppableId;
			  }

			  if (combine) {
			    return combine.droppableId;
			  }

			  return null;
			});

			var getCombineWithFromResult = function getCombineWithFromResult(result) {
			  return result.combine ? result.combine.draggableId : null;
			};

			var getCombineWithFromImpact = function getCombineWithFromImpact(impact) {
			  return impact.at && impact.at.type === 'COMBINE' ? impact.at.combine.draggableId : null;
			};

			function getDraggableSelector() {
			  var memoizedOffset = memoizeOne(function (x, y) {
			    return {
			      x: x,
			      y: y
			    };
			  });
			  var getMemoizedSnapshot = memoizeOne(function (mode, isClone, draggingOver, combineWith, dropping) {
			    return {
			      isDragging: true,
			      isClone: isClone,
			      isDropAnimating: Boolean(dropping),
			      dropAnimation: dropping,
			      mode: mode,
			      draggingOver: draggingOver,
			      combineWith: combineWith,
			      combineTargetFor: null
			    };
			  });
			  var getMemoizedProps = memoizeOne(function (offset, mode, dimension, isClone, draggingOver, combineWith, forceShouldAnimate) {
			    return {
			      mapped: {
			        type: 'DRAGGING',
			        dropping: null,
			        draggingOver: draggingOver,
			        combineWith: combineWith,
			        mode: mode,
			        offset: offset,
			        dimension: dimension,
			        forceShouldAnimate: forceShouldAnimate,
			        snapshot: getMemoizedSnapshot(mode, isClone, draggingOver, combineWith, null)
			      }
			    };
			  });

			  var selector = function selector(state, ownProps) {
			    if (state.isDragging) {
			      if (state.critical.draggable.id !== ownProps.draggableId) {
			        return null;
			      }

			      var offset = state.current.client.offset;
			      var dimension = state.dimensions.draggables[ownProps.draggableId];
			      var draggingOver = whatIsDraggedOver(state.impact);
			      var combineWith = getCombineWithFromImpact(state.impact);
			      var forceShouldAnimate = state.forceShouldAnimate;
			      return getMemoizedProps(memoizedOffset(offset.x, offset.y), state.movementMode, dimension, ownProps.isClone, draggingOver, combineWith, forceShouldAnimate);
			    }

			    if (state.phase === 'DROP_ANIMATING') {
			      var completed = state.completed;

			      if (completed.result.draggableId !== ownProps.draggableId) {
			        return null;
			      }

			      var isClone = ownProps.isClone;
			      var _dimension = state.dimensions.draggables[ownProps.draggableId];
			      var result = completed.result;
			      var mode = result.mode;

			      var _draggingOver = whatIsDraggedOverFromResult(result);

			      var _combineWith = getCombineWithFromResult(result);

			      var duration = state.dropDuration;
			      var dropping = {
			        duration: duration,
			        curve: curves.drop,
			        moveTo: state.newHomeClientOffset,
			        opacity: _combineWith ? combine.opacity.drop : null,
			        scale: _combineWith ? combine.scale.drop : null
			      };
			      return {
			        mapped: {
			          type: 'DRAGGING',
			          offset: state.newHomeClientOffset,
			          dimension: _dimension,
			          dropping: dropping,
			          draggingOver: _draggingOver,
			          combineWith: _combineWith,
			          mode: mode,
			          forceShouldAnimate: null,
			          snapshot: getMemoizedSnapshot(mode, isClone, _draggingOver, _combineWith, dropping)
			        }
			      };
			    }

			    return null;
			  };

			  return selector;
			}

			function getSecondarySnapshot(combineTargetFor) {
			  return {
			    isDragging: false,
			    isDropAnimating: false,
			    isClone: false,
			    dropAnimation: null,
			    mode: null,
			    draggingOver: null,
			    combineTargetFor: combineTargetFor,
			    combineWith: null
			  };
			}

			var atRest = {
			  mapped: {
			    type: 'SECONDARY',
			    offset: origin,
			    combineTargetFor: null,
			    shouldAnimateDisplacement: true,
			    snapshot: getSecondarySnapshot(null)
			  }
			};

			function getSecondarySelector() {
			  var memoizedOffset = memoizeOne(function (x, y) {
			    return {
			      x: x,
			      y: y
			    };
			  });
			  var getMemoizedSnapshot = memoizeOne(getSecondarySnapshot);
			  var getMemoizedProps = memoizeOne(function (offset, combineTargetFor, shouldAnimateDisplacement) {
			    if (combineTargetFor === void 0) {
			      combineTargetFor = null;
			    }

			    return {
			      mapped: {
			        type: 'SECONDARY',
			        offset: offset,
			        combineTargetFor: combineTargetFor,
			        shouldAnimateDisplacement: shouldAnimateDisplacement,
			        snapshot: getMemoizedSnapshot(combineTargetFor)
			      }
			    };
			  });

			  var getFallback = function getFallback(combineTargetFor) {
			    return combineTargetFor ? getMemoizedProps(origin, combineTargetFor, true) : null;
			  };

			  var getProps = function getProps(ownId, draggingId, impact, afterCritical) {
			    var visualDisplacement = impact.displaced.visible[ownId];
			    var isAfterCriticalInVirtualList = Boolean(afterCritical.inVirtualList && afterCritical.effected[ownId]);
			    var combine = tryGetCombine(impact);
			    var combineTargetFor = combine && combine.draggableId === ownId ? draggingId : null;

			    if (!visualDisplacement) {
			      if (!isAfterCriticalInVirtualList) {
			        return getFallback(combineTargetFor);
			      }

			      if (impact.displaced.invisible[ownId]) {
			        return null;
			      }

			      var change = negate(afterCritical.displacedBy.point);

			      var _offset = memoizedOffset(change.x, change.y);

			      return getMemoizedProps(_offset, combineTargetFor, true);
			    }

			    if (isAfterCriticalInVirtualList) {
			      return getFallback(combineTargetFor);
			    }

			    var displaceBy = impact.displacedBy.point;
			    var offset = memoizedOffset(displaceBy.x, displaceBy.y);
			    return getMemoizedProps(offset, combineTargetFor, visualDisplacement.shouldAnimate);
			  };

			  var selector = function selector(state, ownProps) {
			    if (state.isDragging) {
			      if (state.critical.draggable.id === ownProps.draggableId) {
			        return null;
			      }

			      return getProps(ownProps.draggableId, state.critical.draggable.id, state.impact, state.afterCritical);
			    }

			    if (state.phase === 'DROP_ANIMATING') {
			      var completed = state.completed;

			      if (completed.result.draggableId === ownProps.draggableId) {
			        return null;
			      }

			      return getProps(ownProps.draggableId, completed.result.draggableId, completed.impact, completed.afterCritical);
			    }

			    return null;
			  };

			  return selector;
			}

			var makeMapStateToProps = function makeMapStateToProps() {
			  var draggingSelector = getDraggableSelector();
			  var secondarySelector = getSecondarySelector();

			  var selector = function selector(state, ownProps) {
			    return draggingSelector(state, ownProps) || secondarySelector(state, ownProps) || atRest;
			  };

			  return selector;
			};
			var mapDispatchToProps = {
			  dropAnimationFinished: dropAnimationFinished
			};
			var ConnectedDraggable = reactRedux.connect(makeMapStateToProps, mapDispatchToProps, null, {
			  context: StoreContext,
			  pure: true,
			  areStatePropsEqual: isStrictEqual
			})(Draggable);

			function PrivateDraggable(props) {
			  var droppableContext = useRequiredContext(DroppableContext);
			  var isUsingCloneFor = droppableContext.isUsingCloneFor;

			  if (isUsingCloneFor === props.draggableId && !props.isClone) {
			    return null;
			  }

			  return React__default.createElement(ConnectedDraggable, props);
			}
			function PublicDraggable(props) {
			  var isEnabled = typeof props.isDragDisabled === 'boolean' ? !props.isDragDisabled : true;
			  var canDragInteractiveElements = Boolean(props.disableInteractiveElementBlocking);
			  var shouldRespectForcePress = Boolean(props.shouldRespectForcePress);
			  return React__default.createElement(PrivateDraggable, _extends({}, props, {
			    isClone: false,
			    isEnabled: isEnabled,
			    canDragInteractiveElements: canDragInteractiveElements,
			    shouldRespectForcePress: shouldRespectForcePress
			  }));
			}

			function Droppable(props) {
			  var appContext = React.useContext(AppContext);
			  !appContext ? invariant(false) : void 0;
			  var contextId = appContext.contextId,
			      isMovementAllowed = appContext.isMovementAllowed;
			  var droppableRef = React.useRef(null);
			  var placeholderRef = React.useRef(null);
			  var children = props.children,
			      droppableId = props.droppableId,
			      type = props.type,
			      mode = props.mode,
			      direction = props.direction,
			      ignoreContainerClipping = props.ignoreContainerClipping,
			      isDropDisabled = props.isDropDisabled,
			      isCombineEnabled = props.isCombineEnabled,
			      snapshot = props.snapshot,
			      useClone = props.useClone,
			      updateViewportMaxScroll = props.updateViewportMaxScroll,
			      getContainerForClone = props.getContainerForClone;
			  var getDroppableRef = useMemoOne.useCallback(function () {
			    return droppableRef.current;
			  }, []);
			  var setDroppableRef = useMemoOne.useCallback(function (value) {
			    droppableRef.current = value;
			  }, []);
			  useMemoOne.useCallback(function () {
			    return placeholderRef.current;
			  }, []);
			  var setPlaceholderRef = useMemoOne.useCallback(function (value) {
			    placeholderRef.current = value;
			  }, []);
			  var onPlaceholderTransitionEnd = useMemoOne.useCallback(function () {
			    if (isMovementAllowed()) {
			      updateViewportMaxScroll({
			        maxScroll: getMaxWindowScroll()
			      });
			    }
			  }, [isMovementAllowed, updateViewportMaxScroll]);
			  useDroppablePublisher({
			    droppableId: droppableId,
			    type: type,
			    mode: mode,
			    direction: direction,
			    isDropDisabled: isDropDisabled,
			    isCombineEnabled: isCombineEnabled,
			    ignoreContainerClipping: ignoreContainerClipping,
			    getDroppableRef: getDroppableRef
			  });
			  var placeholder = React__default.createElement(AnimateInOut, {
			    on: props.placeholder,
			    shouldAnimate: props.shouldAnimatePlaceholder
			  }, function (_ref) {
			    var onClose = _ref.onClose,
			        data = _ref.data,
			        animate = _ref.animate;
			    return React__default.createElement(Placeholder$1, {
			      placeholder: data,
			      onClose: onClose,
			      innerRef: setPlaceholderRef,
			      animate: animate,
			      contextId: contextId,
			      onTransitionEnd: onPlaceholderTransitionEnd
			    });
			  });
			  var provided = useMemoOne.useMemo(function () {
			    return {
			      innerRef: setDroppableRef,
			      placeholder: placeholder,
			      droppableProps: {
			        'data-rbd-droppable-id': droppableId,
			        'data-rbd-droppable-context-id': contextId
			      }
			    };
			  }, [contextId, droppableId, placeholder, setDroppableRef]);
			  var isUsingCloneFor = useClone ? useClone.dragging.draggableId : null;
			  var droppableContext = useMemoOne.useMemo(function () {
			    return {
			      droppableId: droppableId,
			      type: type,
			      isUsingCloneFor: isUsingCloneFor
			    };
			  }, [droppableId, isUsingCloneFor, type]);

			  function getClone() {
			    if (!useClone) {
			      return null;
			    }

			    var dragging = useClone.dragging,
			        render = useClone.render;
			    var node = React__default.createElement(PrivateDraggable, {
			      draggableId: dragging.draggableId,
			      index: dragging.source.index,
			      isClone: true,
			      isEnabled: true,
			      shouldRespectForcePress: false,
			      canDragInteractiveElements: true
			    }, function (draggableProvided, draggableSnapshot) {
			      return render(draggableProvided, draggableSnapshot, dragging);
			    });
			    return ReactDOM.createPortal(node, getContainerForClone());
			  }

			  return React__default.createElement(DroppableContext.Provider, {
			    value: droppableContext
			  }, children(provided, snapshot), getClone());
			}

			var isMatchingType = function isMatchingType(type, critical) {
			  return type === critical.droppable.type;
			};

			var getDraggable = function getDraggable(critical, dimensions) {
			  return dimensions.draggables[critical.draggable.id];
			};

			var makeMapStateToProps$1 = function makeMapStateToProps() {
			  var idleWithAnimation = {
			    placeholder: null,
			    shouldAnimatePlaceholder: true,
			    snapshot: {
			      isDraggingOver: false,
			      draggingOverWith: null,
			      draggingFromThisWith: null,
			      isUsingPlaceholder: false
			    },
			    useClone: null
			  };

			  var idleWithoutAnimation = _extends({}, idleWithAnimation, {
			    shouldAnimatePlaceholder: false
			  });

			  var getDraggableRubric = memoizeOne(function (descriptor) {
			    return {
			      draggableId: descriptor.id,
			      type: descriptor.type,
			      source: {
			        index: descriptor.index,
			        droppableId: descriptor.droppableId
			      }
			    };
			  });
			  var getMapProps = memoizeOne(function (id, isEnabled, isDraggingOverForConsumer, isDraggingOverForImpact, dragging, renderClone) {
			    var draggableId = dragging.descriptor.id;
			    var isHome = dragging.descriptor.droppableId === id;

			    if (isHome) {
			      var useClone = renderClone ? {
			        render: renderClone,
			        dragging: getDraggableRubric(dragging.descriptor)
			      } : null;
			      var _snapshot = {
			        isDraggingOver: isDraggingOverForConsumer,
			        draggingOverWith: isDraggingOverForConsumer ? draggableId : null,
			        draggingFromThisWith: draggableId,
			        isUsingPlaceholder: true
			      };
			      return {
			        placeholder: dragging.placeholder,
			        shouldAnimatePlaceholder: false,
			        snapshot: _snapshot,
			        useClone: useClone
			      };
			    }

			    if (!isEnabled) {
			      return idleWithoutAnimation;
			    }

			    if (!isDraggingOverForImpact) {
			      return idleWithAnimation;
			    }

			    var snapshot = {
			      isDraggingOver: isDraggingOverForConsumer,
			      draggingOverWith: draggableId,
			      draggingFromThisWith: null,
			      isUsingPlaceholder: true
			    };
			    return {
			      placeholder: dragging.placeholder,
			      shouldAnimatePlaceholder: true,
			      snapshot: snapshot,
			      useClone: null
			    };
			  });

			  var selector = function selector(state, ownProps) {
			    var id = ownProps.droppableId;
			    var type = ownProps.type;
			    var isEnabled = !ownProps.isDropDisabled;
			    var renderClone = ownProps.renderClone;

			    if (state.isDragging) {
			      var critical = state.critical;

			      if (!isMatchingType(type, critical)) {
			        return idleWithoutAnimation;
			      }

			      var dragging = getDraggable(critical, state.dimensions);
			      var isDraggingOver = whatIsDraggedOver(state.impact) === id;
			      return getMapProps(id, isEnabled, isDraggingOver, isDraggingOver, dragging, renderClone);
			    }

			    if (state.phase === 'DROP_ANIMATING') {
			      var completed = state.completed;

			      if (!isMatchingType(type, completed.critical)) {
			        return idleWithoutAnimation;
			      }

			      var _dragging = getDraggable(completed.critical, state.dimensions);

			      return getMapProps(id, isEnabled, whatIsDraggedOverFromResult(completed.result) === id, whatIsDraggedOver(completed.impact) === id, _dragging, renderClone);
			    }

			    if (state.phase === 'IDLE' && state.completed && !state.shouldFlush) {
			      var _completed = state.completed;

			      if (!isMatchingType(type, _completed.critical)) {
			        return idleWithoutAnimation;
			      }

			      var wasOver = whatIsDraggedOver(_completed.impact) === id;
			      var wasCombining = Boolean(_completed.impact.at && _completed.impact.at.type === 'COMBINE');
			      var isHome = _completed.critical.droppable.id === id;

			      if (wasOver) {
			        return wasCombining ? idleWithAnimation : idleWithoutAnimation;
			      }

			      if (isHome) {
			        return idleWithAnimation;
			      }

			      return idleWithoutAnimation;
			    }

			    return idleWithoutAnimation;
			  };

			  return selector;
			};
			var mapDispatchToProps$1 = {
			  updateViewportMaxScroll: updateViewportMaxScroll
			};

			function getBody() {
			  !document.body ? invariant(false) : void 0;
			  return document.body;
			}

			var defaultProps = {
			  mode: 'standard',
			  type: 'DEFAULT',
			  direction: 'vertical',
			  isDropDisabled: false,
			  isCombineEnabled: false,
			  ignoreContainerClipping: false,
			  renderClone: null,
			  getContainerForClone: getBody
			};
			var ConnectedDroppable = reactRedux.connect(makeMapStateToProps$1, mapDispatchToProps$1, null, {
			  context: StoreContext,
			  pure: true,
			  areStatePropsEqual: isStrictEqual
			})(Droppable);
			ConnectedDroppable.defaultProps = defaultProps;

			var DragDropContext_1 = exports('DragDropContext', reactBeautifulDnd_cjs.DragDropContext = DragDropContext);
			var Draggable_1 = exports('Draggable', reactBeautifulDnd_cjs.Draggable = PublicDraggable);
			var Droppable_1 = exports('Droppable', reactBeautifulDnd_cjs.Droppable = ConnectedDroppable);
			var resetServerContext_1 = exports('resetServerContext', reactBeautifulDnd_cjs.resetServerContext = resetServerContext);
			var useKeyboardSensor_1 = exports('useKeyboardSensor', reactBeautifulDnd_cjs.useKeyboardSensor = useKeyboardSensor);
			var useMouseSensor_1 = exports('useMouseSensor', reactBeautifulDnd_cjs.useMouseSensor = useMouseSensor);
			var useTouchSensor_1 = exports('useTouchSensor', reactBeautifulDnd_cjs.useTouchSensor = useTouchSensor);

		})
	};
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
