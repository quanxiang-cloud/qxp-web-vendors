System.register(['react', 'react-dom'], (function (exports) {
	'use strict';
	var React__default, forwardRef, useRef, cloneElement, useContext, useLayoutEffect, useDebugValue, createElement, useState, useEffect, React, Children, isValidElement, PureComponent, Component, ReactDOM, createPortal;
	return {
		setters: [function (module) {
			React__default = module["default"];
			forwardRef = module.forwardRef;
			useRef = module.useRef;
			cloneElement = module.cloneElement;
			useContext = module.useContext;
			useLayoutEffect = module.useLayoutEffect;
			useDebugValue = module.useDebugValue;
			createElement = module.createElement;
			useState = module.useState;
			useEffect = module.useEffect;
			React = module;
			Children = module.Children;
			isValidElement = module.isValidElement;
			PureComponent = module.PureComponent;
			Component = module.Component;
		}, function (module) {
			ReactDOM = module["default"];
			createPortal = module.createPortal;
		}],
		execute: (function () {

			exports({
				ColorPicker: ColorPicker,
				Container: Container,
				Grid: Grid,
				Image: Image,
				Input: Input,
				Link: Link,
				Modal: Modal,
				Page: Page,
				Panel: Panel,
				Paragraph: Paragraph,
				RadioButtonGroup: RadioButtonGroup,
				RadioGroup: RadioGroup,
				Search: Search,
				Tab: Tab,
				Tag: Tag,
				Text: Text,
				Textarea: Textarea,
				Tooltip: ToolTip
			});

			var e$3=[],t$2=[];function n$3(n,r){if(n&&"undefined"!=typeof document){var a,s=!0===r.prepend?"prepend":"append",d=!0===r.singleTag,i="string"==typeof r.container?document.querySelector(r.container):document.getElementsByTagName("head")[0];if(d){var u=e$3.indexOf(i);-1===u&&(u=e$3.push(i)-1,t$2[u]={}),a=t$2[u]&&t$2[u][s]?t$2[u][s]:t$2[u][s]=c();}else a=c();65279===n.charCodeAt(0)&&(n=n.substring(1)),a.styleSheet?a.styleSheet.cssText+=n:a.appendChild(document.createTextNode(n));}function c(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),r.attributes)for(var t=Object.keys(r.attributes),n=0;n<t.length;n++)e.setAttribute(t[n],r.attributes[t[n]]);var a="prepend"===s?"afterbegin":"beforeend";return i.insertAdjacentElement(a,e),e}}

			var css$8 = "html,\nbody {\n  width: 100%;\n  height: 100%;\n}\n\n/* Blocks */\n\nhtml,\nbody,\np,\nol,\nul,\nli,\ndl,\ndt,\ndd,\nblockquote,\nfigure,\nfieldset,\nlegend,\ntextarea,\npre,\niframe,\nhr,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nfooter,\nheader,\naside,\nsection {\n  margin: 0;\n  padding: 0;\n}\n\narticle,\naside,\nfigure,\nfooter,\nheader,\nhgroup,\nsection {\n  display: block;\n}\n\n/* List */\n\nul {\n  list-style: none;\n}\n\n/* Box sizing */\n\nhtml {\n  box-sizing: border-box;\n}\n\n* {\n  box-sizing: inherit;\n}\n\n::before,\n::after {\n  box-sizing: inherit;\n}\n\n/* Media */\n\nimg,\nembed,\nobject,\naudio,\nvideo {\n  max-width: 100%;\n}\n\nimg {\n  height: auto;\n}\n\n/* Iframe */\n\niframe {\n  border: 0;\n}\n\n/* Table */\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\ntd,\nth {\n  padding: 0;\n  text-align: left;\n  vertical-align: top;\n}\n\n:root {\n  /* rose */\n  --rose-50: #fff1f2;\n  --rose-100: #ffe4e6;\n  --rose-200: #fecdd3;\n  --rose-300: #fda4af;\n  --rose-400: #fb7185;\n  --rose-500: #f43f5e;\n  --rose-600: #e11d48;\n  --rose-700: #be123c;\n  --rose-800: #9f1239;\n  --rose-900: #881337;\n\n  /* pink */\n  --pink-50: #fdf2f8;\n  --pink-100: #fce7f3;\n  --pink-200: #fbcfe8;\n  --pink-300: #f9a8d4;\n  --pink-400: #f472b6;\n  --pink-500: #ec4899;\n  --pink-600: #db2777;\n  --pink-700: #be185d;\n  --pink-800: #9d174d;\n  --pink-900: #831843;\n\n  /* fuchsia */\n  --fuchsia-50: #fdf4ff;\n  --fuchsia-100: #fae8ff;\n  --fuchsia-200: #f5d0fe;\n  --fuchsia-300: #f0abfc;\n  --fuchsia-400: #e879f9;\n  --fuchsia-500: #d946ef;\n  --fuchsia-600: #c026d3;\n  --fuchsia-700: #a21caf;\n  --fuchsia-800: #86198f;\n  --fuchsia-900: #701a75;\n\n  /* purple */\n  --purple-50: #faf5ff;\n  --purple-100: #f3e8ff;\n  --purple-200: #e9d5ff;\n  --purple-300: #d8b4fe;\n  --purple-400: #c084fc;\n  --purple-500: #a855f7;\n  --purple-600: #9333ea;\n  --purple-700: #7e22ce;\n  --purple-800: #6b21a8;\n  --purple-900: #581c87;\n\n  /* violet */\n  --violet-50: #f5f3ff;\n  --violet-100: #ede9fe;\n  --violet-200: #ddd6fe;\n  --violet-300: #c4b5fd;\n  --violet-400: #a78bfa;\n  --violet-500: #8b5cf6;\n  --violet-600: #7c3aed;\n  --violet-700: #6d28d9;\n  --violet-800: #5b21b6;\n  --violet-900: #4c1d95;\n\n  /* indigo */\n  --indigo-50: #eef2ff;\n  --indigo-100: #e0e7ff;\n  --indigo-200: #c7d2fe;\n  --indigo-300: #a5b4fc;\n  --indigo-400: #818cf8;\n  --indigo-500: #6366f1;\n  --indigo-600: #4f46e5;\n  --indigo-700: #4338ca;\n  --indigo-800: #3730a3;\n  --indigo-900: #312e81;\n\n  /* blue */\n  --blue-50: #eff6ff;\n  --blue-100: #F0F6FF;\n  --blue-200: #DEE9FF;\n  --blue-300: #B5CCFF;\n  --blue-400: #8CADFF;\n  --blue-500: #638AFF;\n  --blue-600: #375FF3;\n  --blue-700: #2543CC;\n  --blue-800: #162BA6;\n  --blue-900: #1e3a8a;\n  --blue-1000: #d5dee7;\n  --blue-1100: #00020A;\n\n  /* lightBlue */\n  --lightBlue-50: #f0f9ff;\n  --lightBlue-100: #e0f2fe;\n  --lightBlue-200: #bae6fd;\n  --lightBlue-300: #7dd3fc;\n  --lightBlue-400: #38bdf8;\n  --lightBlue-500: #0ea5e9;\n  --lightBlue-600: #0284c7;\n  --lightBlue-700: #0369a1;\n  --lightBlue-800: #075985;\n  --lightBlue-900: #0c4a6e;\n\n  /* cyan */\n  --cyan-50: #ecfeff;\n  --cyan-100: #cffafe;\n  --cyan-200: #a5f3fc;\n  --cyan-300: #67e8f9;\n  --cyan-400: #22d3ee;\n  --cyan-500: #06b6d4;\n  --cyan-600: #0891b2;\n  --cyan-700: #0e7490;\n  --cyan-800: #155e75;\n  --cyan-900: #164e63;\n\n  /* teal */\n  --teal-50: #f0fdfa;\n  --teal-100: #ccfbf1;\n  --teal-200: #99f6e4;\n  --teal-300: #5eead4;\n  --teal-400: #2dd4bf;\n  --teal-500: #14b8a6;\n  --teal-600: #0d9488;\n  --teal-700: #0f766e;\n  --teal-800: #115e59;\n  --teal-900: #134e4a;\n\n  /* emerald */\n  --emerald-50: #ecfdf5;\n  --emerald-100: #d1fae5;\n  --emerald-200: #a7f3d0;\n  --emerald-300: #6ee7b7;\n  --emerald-400: #34d399;\n  --emerald-500: #10b981;\n  --emerald-600: #059669;\n  --emerald-700: #047857;\n  --emerald-800: #065f46;\n  --emerald-900: #064e3b;\n\n  /* green */\n  --green-50: #f0fdf4;\n  --green-100: #dcfce7;\n  --green-200: #bbf7d0;\n  --green-300: #86efac;\n  --green-400: #4ade80;\n  --green-500: #22c55e;\n  --green-600: #16a34a;\n  --green-700: #15803d;\n  --green-800: #166534;\n  --green-900: #14532d;\n\n  /* lime */\n  --lime-50: #f7fee7;\n  --lime-100: #ecfccb;\n  --lime-200: #d9f99d;\n  --lime-300: #bef264;\n  --lime-400: #a3e635;\n  --lime-500: #84cc16;\n  --lime-600: #65a30d;\n  --lime-700: #4d7c0f;\n  --lime-800: #3f6212;\n  --lime-900: #365314;\n\n  /* yellow */\n  --yellow-50: #fefce8;\n  --yellow-100: #fef9c3;\n  --yellow-200: #fef08a;\n  --yellow-300: #fde047;\n  --yellow-400: #FCD34D;\n  --yellow-500: #F59E0B;\n  --yellow-600: #D97706;\n  --yellow-700: #a16207;\n  --yellow-800: #854d0e;\n  --yellow-900: #713f12;\n\n  /* amber */\n  --amber-50: #fffbeb;\n  --amber-100: #fef3c7;\n  --amber-200: #fde68a;\n  --amber-300: #fcd34d;\n  --amber-400: #fbbf24;\n  --amber-500: #f59e0b;\n  --amber-600: #d97706;\n  --amber-700: #b45309;\n  --amber-800: #92400e;\n  --amber-900: #78350f;\n\n  /* orange */\n  --orange-50: #fff7ed;\n  --orange-100: #ffedd5;\n  --orange-200: #fed7aa;\n  --orange-300: #fdba74;\n  --orange-400: #fb923c;\n  --orange-500: #f97316;\n  --orange-600: #ea580c;\n  --orange-700: #c2410c;\n  --orange-800: #9a3412;\n  --orange-900: #7c2d12;\n\n  /* red */\n  --red-50: #FEF2F2;\n  --red-100: #fee2e2;\n  --red-200: #fecaca;\n  --red-300: #fca5a5;\n  --red-400: #F87171;\n  --red-500: #ef4444;\n  --red-600: #DC2626;\n  --red-700: #b91c1c;\n  --red-800: #991b1b;\n  --red-900: #7f1d1d;\n\n  /* warmGray */\n  --warmGray-50: #fafaf9;\n  --warmGray-100: #f5f5f4;\n  --warmGray-200: #e7e5e4;\n  --warmGray-300: #d6d3d1;\n  --warmGray-400: #a8a29e;\n  --warmGray-500: #78716c;\n  --warmGray-600: #57534e;\n  --warmGray-700: #44403c;\n  --warmGray-800: #292524;\n  --warmGray-900: #1c1917;\n\n  /* trueGray */\n  --trueGray-50: #fafafa;\n  --trueGray-100: #f5f5f5;\n  --trueGray-200: #e5e5e5;\n  --trueGray-300: #d4d4d4;\n  --trueGray-400: #a3a3a3;\n  --trueGray-500: #737373;\n  --trueGray-600: #525252;\n  --trueGray-700: #404040;\n  --trueGray-800: #262626;\n  --trueGray-900: #171717;\n\n  /* gray */\n  --gray-50: #f8fafc;\n  --gray-100: #F1F5F9;\n  --gray-200: #E2E8F0;\n  --gray-300: #CBD5E1;\n  --gray-400: #94A3B8;\n  --gray-500: #64748B;\n  --gray-600: #475569;\n  --gray-700: #334155;\n  --gray-800: #1E293B;\n  --gray-900: #0F172A;\n\n  /* coolGray */\n  --coolGray-50: #f9fafb;\n  --coolGray-100: #f3f4f6;\n  --coolGray-200: #e5e7eb;\n  --coolGray-300: #d1d5db;\n  --coolGray-400: #9ca3af;\n  --coolGray-500: #6b7280;\n  --coolGray-600: #4b5563;\n  --coolGray-700: #374151;\n  --coolGray-800: #1f2937;\n  --coolGray-900: #111827;\n\n  /* blueGray */\n  --blueGray-50: #f8fafc;\n  --blueGray-100: #f1f5f9;\n  --blueGray-200: #e2e8f0;\n  --blueGray-300: #cbd5e1;\n  --blueGray-400: #94a3b8;\n  --blueGray-500: #64748b;\n  --blueGray-600: #475569;\n  --blueGray-700: #334155;\n  --blueGray-800: #1e293b;\n  --blueGray-900: #0f172a;\n\n  --black-50: #324558;\n  --black-100: #020508;\n  --black-200: #697886;\n\n  /* primary */\n  --primary-600: var(--blue-600);\n  --primary-400: var(--blue-400);\n\n  /* todo remove this */\n  --icon-light-color: rgba(255, 255, 255, 0.9);\n  --icon-light-fill: rgba(255, 255, 255, 0.4);\n  --icon-dark-color: var(--gray-600);\n  --icon-dark-fill: var(--gray-400);\n  --icon-primary-color: var(--blue-600);\n  --icon-primary-fill: var(--blue-400);\n\n  --danger-color-light-2: var(--red-50);\n  --danger-color-light-1: var(--red-200);\n  --danger-color: var(--red-500);\n\n  --error-color-light-2: var(--red-50);\n  --error-color-light-1: var(--red-200);\n  --error-color: var(--red-500);\n\n  --warn-color: var(--orange-400);\n}\n\n/* ! tailwindcss v2.2.19 | MIT License | https://tailwindcss.com */\n\n/*! modern-normalize v1.1.0 | MIT License | https://github.com/sindresorhus/modern-normalize */\n\n/*\nDocument\n========\n*/\n\n/**\nUse a better box model (opinionated).\n*/\n\n*,\n::before,\n::after {\n\tbox-sizing: border-box;\n}\n\n/**\nUse a more readable tab size (opinionated).\n*/\n\nhtml {\n\t-moz-tab-size: 4;\n\t-o-tab-size: 4;\n\t   tab-size: 4;\n}\n\n/**\n1. Correct the line height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n*/\n\nhtml {\n\tline-height: 1.15; /* 1 */\n\t-webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/*\nSections\n========\n*/\n\n/**\nRemove the margin in all browsers.\n*/\n\nbody {\n\tmargin: 0;\n}\n\n/**\nImprove consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\n*/\n\nbody {\n\tfont-family:\n\t\tsystem-ui,\n\t\t-apple-system, /* Firefox supports this but not yet `system-ui` */\n\t\t'Segoe UI',\n\t\tRoboto,\n\t\tHelvetica,\n\t\tArial,\n\t\tsans-serif,\n\t\t'Apple Color Emoji',\n\t\t'Segoe UI Emoji';\n}\n\n/*\nGrouping content\n================\n*/\n\n/**\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n*/\n\nhr {\n\theight: 0; /* 1 */\n\tcolor: inherit; /* 2 */\n}\n\n/*\nText-level semantics\n====================\n*/\n\n/**\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr[title] {\n\t-webkit-text-decoration: underline dotted;\n\t        text-decoration: underline dotted;\n}\n\n/**\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n\tfont-weight: bolder;\n}\n\n/**\n1. Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\n2. Correct the odd 'em' font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n\tfont-family:\n\t\tui-monospace,\n\t\tSFMono-Regular,\n\t\tConsolas,\n\t\t'Liberation Mono',\n\t\tMenlo,\n\t\tmonospace; /* 1 */\n\tfont-size: 1em; /* 2 */\n}\n\n/**\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n\tfont-size: 80%;\n}\n\n/**\nPrevent 'sub' and 'sup' elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n\tfont-size: 75%;\n\tline-height: 0;\n\tposition: relative;\n\tvertical-align: baseline;\n}\n\nsub {\n\tbottom: -0.25em;\n}\n\nsup {\n\ttop: -0.5em;\n}\n\n/*\nTabular data\n============\n*/\n\n/**\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n*/\n\ntable {\n\ttext-indent: 0; /* 1 */\n\tborder-color: inherit; /* 2 */\n}\n\n/*\nForms\n=====\n*/\n\n/**\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n\tfont-family: inherit; /* 1 */\n\tfont-size: 100%; /* 1 */\n\tline-height: 1.15; /* 1 */\n\tmargin: 0; /* 2 */\n}\n\n/**\nRemove the inheritance of text transform in Edge and Firefox.\n1. Remove the inheritance of text transform in Firefox.\n*/\n\nbutton,\nselect { /* 1 */\n\ttext-transform: none;\n}\n\n/**\nCorrect the inability to style clickable types in iOS and Safari.\n*/\n\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n\t-webkit-appearance: button;\n}\n\n/**\nRemove the inner border and padding in Firefox.\n*/\n\n::-moz-focus-inner {\n\tborder-style: none;\n\tpadding: 0;\n}\n\n/**\nRestore the focus styles unset by the previous rule.\n*/\n\n:-moz-focusring {\n\toutline: 1px dotted ButtonText;\n}\n\n/**\nRemove the additional ':invalid' styles in Firefox.\nSee: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737\n*/\n\n:-moz-ui-invalid {\n\tbox-shadow: none;\n}\n\n/**\nRemove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.\n*/\n\nlegend {\n\tpadding: 0;\n}\n\n/**\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n\tvertical-align: baseline;\n}\n\n/**\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n\theight: auto;\n}\n\n/**\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type='search'] {\n\t-webkit-appearance: textfield; /* 1 */\n\toutline-offset: -2px; /* 2 */\n}\n\n/**\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n\t-webkit-appearance: none;\n}\n\n/**\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to 'inherit' in Safari.\n*/\n\n::-webkit-file-upload-button {\n\t-webkit-appearance: button; /* 1 */\n\tfont: inherit; /* 2 */\n}\n\n/*\nInteractive\n===========\n*/\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n\tdisplay: list-item;\n}\n\n/**\n * Manually forked from SUIT CSS Base: https://github.com/suitcss/base\n * A thin layer on top of normalize.css that provides a starting point more\n * suitable for web applications.\n */\n\n/**\n * Removes the default spacing and border for appropriate elements.\n */\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nbutton {\n  background-color: transparent;\n  background-image: none;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nol,\nul {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/**\n * Tailwind custom reset styles\n */\n\n/**\n * 1. Use the user's configured `sans` font-family (with Tailwind's default\n *    sans-serif font stack as a fallback) as a sane default.\n * 2. Use Tailwind's default \"normal\" line-height so the user isn't forced\n *    to override it to ensure consistency even when using the default theme.\n */\n\nhtml {\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"; /* 1 */\n  line-height: 1.5; /* 2 */\n}\n\n/**\n * Inherit font-family and line-height from `html` so users can set them as\n * a class directly on the `html` element.\n */\n\nbody {\n  font-family: inherit;\n  line-height: inherit;\n}\n\n/**\n * 1. Prevent padding and border from affecting element width.\n *\n *    We used to set this in the html element and inherit from\n *    the parent element for everything else. This caused issues\n *    in shadow-dom-enhanced elements like <details> where the content\n *    is wrapped by a div with box-sizing set to `content-box`.\n *\n *    https://github.com/mozdevs/cssremedy/issues/4\n *\n *\n * 2. Allow adding a border to an element by just adding a border-width.\n *\n *    By default, the way the browser specifies that an element should have no\n *    border is by setting it's border-style to `none` in the user-agent\n *    stylesheet.\n *\n *    In order to easily add borders to elements by just setting the `border-width`\n *    property, we change the default border-style for all elements to `solid`, and\n *    use border-width to hide them instead. This way our `border` utilities only\n *    need to set the `border-width` property instead of the entire `border`\n *    shorthand, making our border utilities much more straightforward to compose.\n *\n *    https://github.com/tailwindcss/tailwindcss/pull/116\n */\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: currentColor; /* 2 */\n}\n\n/*\n * Ensure horizontal rules are visible by default\n */\n\nhr {\n  border-top-width: 1px;\n}\n\n/**\n * Undo the `border-style: none` reset that Normalize applies to images so that\n * our `border-{width}` utilities have the expected effect.\n *\n * The Normalize reset is unnecessary for us since we default the border-width\n * to 0 on all elements.\n *\n * https://github.com/tailwindcss/tailwindcss/issues/362\n */\n\nimg {\n  border-style: solid;\n}\n\ntextarea {\n  resize: vertical;\n}\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1;\n  color: var(--gray-400);\n}\n\ninput:-ms-input-placeholder, textarea:-ms-input-placeholder {\n  opacity: 1;\n  color: var(--gray-400);\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1;\n  color: var(--gray-400);\n}\n\nbutton,\n[role=\"button\"] {\n  cursor: pointer;\n}\n\n/**\n * Override legacy focus reset from Normalize with modern Firefox focus styles.\n *\n * This is actually an improvement over the new defaults in Firefox in our testing,\n * as it triggers the better focus styles even for links, which still use a dotted\n * outline in Firefox by default.\n */\n\n:-moz-focusring {\n\toutline: auto;\n}\n\ntable {\n  border-collapse: collapse;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/**\n * Reset links to optimize for opt-in styling instead of\n * opt-out.\n */\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/**\n * Reset form element properties that are easy to forget to\n * style explicitly so you don't inadvertently introduce\n * styles that deviate from your design system. These styles\n * supplement a partial reset that is already applied by\n * normalize.css.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  padding: 0;\n  line-height: inherit;\n  color: inherit;\n}\n\n/**\n * Use the configured 'mono' font family for elements that\n * are expected to be rendered with a monospace font, falling\n * back to the system monospace stack if there is no configured\n * 'mono' font family.\n */\n\npre,\ncode,\nkbd,\nsamp {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n}\n\n/**\n * 1. Make replaced elements `display: block` by default as that's\n *    the behavior you want almost all of the time. Inspired by\n *    CSS Remedy, with `svg` added as well.\n *\n *    https://github.com/mozdevs/cssremedy/issues/14\n * \n * 2. Add `vertical-align: middle` to align replaced elements more\n *    sensibly by default when overriding `display` by adding a\n *    utility like `inline`.\n *\n *    This can trigger a poorly considered linting error in some\n *    tools but is included by design.\n * \n *    https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210\n */\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/**\n * Constrain images and videos to the parent width and preserve\n * their intrinsic aspect ratio.\n *\n * https://github.com/mozdevs/cssremedy/issues/14\n */\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/**\n * Ensure the default browser behavior of the `hidden` attribute.\n */\n\n[hidden] {\n  display: none;\n}\n\n*, ::before, ::after {\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-transform: translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  border-color: var(--gray-200);\n  --tw-blur: var(--tw-empty,/*!*/ /*!*/);\n  --tw-brightness: var(--tw-empty,/*!*/ /*!*/);\n  --tw-contrast: var(--tw-empty,/*!*/ /*!*/);\n  --tw-grayscale: var(--tw-empty,/*!*/ /*!*/);\n  --tw-hue-rotate: var(--tw-empty,/*!*/ /*!*/);\n  --tw-invert: var(--tw-empty,/*!*/ /*!*/);\n  --tw-saturate: var(--tw-empty,/*!*/ /*!*/);\n  --tw-sepia: var(--tw-empty,/*!*/ /*!*/);\n  --tw-drop-shadow: var(--tw-empty,/*!*/ /*!*/);\n  --tw-filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n  --tw-backdrop-blur: var(--tw-empty,/*!*/ /*!*/);\n  --tw-backdrop-brightness: var(--tw-empty,/*!*/ /*!*/);\n  --tw-backdrop-contrast: var(--tw-empty,/*!*/ /*!*/);\n  --tw-backdrop-grayscale: var(--tw-empty,/*!*/ /*!*/);\n  --tw-backdrop-hue-rotate: var(--tw-empty,/*!*/ /*!*/);\n  --tw-backdrop-invert: var(--tw-empty,/*!*/ /*!*/);\n  --tw-backdrop-opacity: var(--tw-empty,/*!*/ /*!*/);\n  --tw-backdrop-saturate: var(--tw-empty,/*!*/ /*!*/);\n  --tw-backdrop-sepia: var(--tw-empty,/*!*/ /*!*/);\n  --tw-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n}\n\n.corner-2-8-8-8 {\n  border-top-left-radius: 2px;\n  border-top-right-radius: 8px;\n  border-bottom-right-radius: 8px;\n  border-bottom-left-radius: 8px;\n  border-top-left-radius: 2px;\n  border-top-right-radius: 8px;\n  border-bottom-right-radius: 8px;\n  border-bottom-left-radius: 8px;\n}\n\n/* todo remove this */\n\n.global-header-nav:hover .svg-icon, .global-header-nav--active .svg-icon {\n  color: var(--gray-600);\n}\n\n.dropdown-options {\n    min-width: 90px;\n    max-width: 500px;\n    max-height: 300px;\n    /* todo this should be defined as a variable */\n    box-shadow: 0px 8px 24px 4px rgba(148, 163, 184, 0.25);\n    overflow-y: auto;\n    border-radius: 12px;\n    --tw-bg-opacity: 1;\n    background-color: rgba(255, 255, 255, var(--tw-bg-opacity));\n    padding-top: 16px;\n    padding-bottom: 16px;\n  }\n\n.dropdown-options__option {\n  display: flex;\n  height: 36px;\n  cursor: pointer;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  align-items: center;\n  justify-content: space-between;\n  padding-left: 16px;\n  padding-right: 16px;\n  font-size: 12px;\n  line-height: 20px;\n  font-weight: 500;\n}\n\n.dropdown-options__option:hover {\n  background-color: var(--gray-100);\n}\n\n.dropdown-trigger {\n    min-width: 90px;\n    max-width: 500px;\n    border-top-left-radius: 2px;\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n    border-bottom-left-radius: 8px;\n    border-top-left-radius: 2px;\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n    border-bottom-left-radius: 8px;\n    display: flex;\n    height: 32px;\n    cursor: pointer;\n    -webkit-user-select: none;\n       -moz-user-select: none;\n        -ms-user-select: none;\n            user-select: none;\n    align-items: center;\n    justify-content: space-between;\n    border-width: 1px;\n    --tw-bg-opacity: 1;\n    background-color: rgba(255, 255, 255, var(--tw-bg-opacity));\n    padding-left: 16px;\n    padding-right: 16px;\n  }\n\n.pointer-events-none {\n  pointer-events: none;\n}\n\n.visible {\n  visibility: visible;\n}\n\n.static {\n  position: static;\n}\n\n.absolute {\n  position: absolute;\n}\n\n.relative {\n  position: relative;\n}\n\n.z-10 {\n  z-index: 10;\n}\n\n.mr-4 {\n  margin-right: 4px;\n}\n\n.mr-20 {\n  margin-right: 20px;\n}\n\n.mr-8 {\n  margin-right: 8px;\n}\n\n.-ml-1 {\n  margin-left: -1px;\n}\n\n.ml-8 {\n  margin-left: 8px;\n}\n\n.mr-5 {\n  margin-right: 5px;\n}\n\n.ml-4 {\n  margin-left: 4px;\n}\n\n.flex {\n  display: flex;\n}\n\n.inline-flex {\n  display: inline-flex;\n}\n\n.hidden {\n  display: none;\n}\n\n.h-16 {\n  height: 16px;\n}\n\n.h-full {\n  height: 100%;\n}\n\n.h-8 {\n  height: 8px;\n}\n\n.w-16 {\n  width: 16px;\n}\n\n.w-full {\n  width: 100%;\n}\n\n.w-8 {\n  width: 8px;\n}\n\n.w-100 {\n  width: 100px;\n}\n\n.min-w-0 {\n  min-width: 0px;\n}\n\n.flex-grow {\n  flex-grow: 1;\n}\n\n.transform {\n  transform: var(--tw-transform);\n}\n\n@-webkit-keyframes spin {\n\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes spin {\n\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.animate-spin {\n  -webkit-animation: spin 1s linear infinite;\n          animation: spin 1s linear infinite;\n}\n\n.cursor-pointer {\n  cursor: pointer;\n}\n\n.cursor-not-allowed {\n  cursor: not-allowed;\n}\n\n.cursor-default {\n  cursor: default;\n}\n\n.flex-col {\n  flex-direction: column;\n}\n\n.items-center {\n  align-items: center;\n}\n\n.justify-center {\n  justify-content: center;\n}\n\n.justify-between {\n  justify-content: space-between;\n}\n\n.gap-4 {\n  gap: 4px;\n}\n\n.overflow-auto {\n  overflow: auto;\n}\n\n.truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.break-all {\n  word-break: break-all;\n}\n\n.border {\n  border-width: 1px;\n}\n\n.border-1 {\n  border-width: 1px;\n}\n\n.border-gray-300 {\n  border-color: var(--gray-300);\n}\n\n.border-red-600 {\n  border-color: var(--rose-600);\n}\n\n.border-gray-400 {\n  border-color: var(--gray-400);\n}\n\n.border-blue-600 {\n  border-color: var(--blue-600);\n}\n\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgba(255, 255, 255, var(--tw-bg-opacity));\n}\n\n.bg-blue-600 {\n  background-color: var(--blue-600);\n}\n\n.bg-gray-200 {\n  background-color: var(--gray-200);\n}\n\n.bg-blue-100 {\n  background-color: var(--blue-100);\n}\n\n.bg-gray-700 {\n  background-color: var(--gray-700);\n}\n\n.fill-current {\n  fill: currentColor;\n}\n\n.p-20 {\n  padding: 20px;\n}\n\n.px-8 {\n  padding-left: 8px;\n  padding-right: 8px;\n}\n\n.py-16 {\n  padding-top: 16px;\n  padding-bottom: 16px;\n}\n\n.px-16 {\n  padding-left: 16px;\n  padding-right: 16px;\n}\n\n.py-5 {\n  padding-top: 5px;\n  padding-bottom: 5px;\n}\n\n.pb-16 {\n  padding-bottom: 16px;\n}\n\n.text-12 {\n  font-size: 12px;\n  line-height: 20px;\n}\n\n.text-inherit {\n  color: inherit;\n}\n\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\n}\n\n.text-blue-600 {\n  color: var(--blue-600);\n}\n\n.text-gray-400 {\n  color: var(--gray-400);\n}\n\n.opacity-50 {\n  opacity: 0.5;\n}\n\n.opacity-0 {\n  opacity: 0;\n}\n\n.opacity-60 {\n  opacity: 0.6;\n}\n\n.outline-none {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n\n.blur {\n  --tw-blur: blur(8px);\n  filter: var(--tw-filter);\n}\n\n.filter {\n  filter: var(--tw-filter);\n}\n\n.backdrop-filter {\n  -webkit-backdrop-filter: var(--tw-backdrop-filter);\n          backdrop-filter: var(--tw-backdrop-filter);\n}\n\n.transition {\n  transition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;\n  transition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/*@import \"./typography.css\";*/\n\n.input-focus-border {\n  border-color: var(--blue-600);\n}\n\n/*@import \"./animation.css\";*/\n\n:root {\n  --scrollbar-color: #babac0;\n  --scrollbar-size: 5px;\n}\n\n::-webkit-scrollbar {\n  width: var(--scrollbar-size);\n  height: var(--scrollbar-size);\n}\n\n::-webkit-scrollbar-thumb {\n  border-radius: var(--scrollbar-size);\n  background-color: var(--scrollbar-color);\n}\n\n::-webkit-scrollbar-button {\n  display: none;\n}\n\n* {\n  scrollbar-width: thin;\n  scrollbar-color: var(--scrollbar-color);\n}\n\n.btn {\n  flex-shrink: 0;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  padding-left: 16px;\n  padding-right: 16px;\n  line-height: 30px;\n\n  font-weight: 400;\n  font-size: 14px;\n\n  border-radius: 8px 2px 8px 8px;\n  border: 1px solid var(--gray-700);\n  background-color: white;\n\n  cursor: pointer;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n\n.btn--disabled {\n  cursor: not-allowed;\n}\n\n.btn {\n  font-weight: 500;\n  color: var(--gray-600);\n  transition: all 0.3s linear;\n}\n\n.btn:hover:not(.btn--forbidden) {\n  color: var(--gray-900);\n  border-color: var(--gray-800);\n}\n\n.btn:hover:active {\n  color: white;\n  background-color: var(--gray-900);\n}\n\n.btn:not(.icon-btn) .icon {\n  margin-right: 8px;\n}\n\n.btn--primary {\n  color: white;\n  background-color: var(--gray-700);\n}\n\n.btn--loading {\n  min-height: 28px;\n}\n\n.btn--primary:hover:not(.btn--forbidden) {\n  color: white;\n  background-color: var(--gray-600);\n}\n\n.btn--primary:hover:active {\n  background-color: var(--gray-800);\n}\n\n.btn--forbidden {\n  cursor: not-allowed;\n}\n\n.icon-btn {\n  padding-left: 0;\n  padding-right: 0;\n  border: 1px solid var(--gray-600);\n}\n\n.button-bg-light {\n  border-color: var(--gray-700);\n  background-color: var(--gray-700);\n}\n\n.button-bg-light:hover:not(.btn--forbidden) {\n  border-color: var(--gray-600);\n  background-color: var(--gray-600);\n}\n\n.button-bg-light:active:not(.btn--forbidden) {\n  border-color: var(--gray-800);\n  background-color: var(--gray-800);\n}\n\n.button-bg-dark {\n  border-color: var(--gray-600);\n  background-color: #FFF;\n}\n\n.button-bg-dark svg {\n  color: var(--gray-600);\n}\n\n.button-bg-dark:hover:not(.btn--forbidden) {\n  border-color: var(--gray-800);\n  background-color: #FFF;\n}\n\n.button-bg-dark:hover:not(.btn--forbidden) svg {\n  color: var(--gray-800);\n}\n\n.button-bg-dark:active:not(.btn--forbidden) {\n  border-color: var(--gray-800);\n  background-color: var(--gray-800);\n}\n\n.button-bg-dark:active:not(.btn--forbidden) svg {\n  color: #FFF;\n}\n\n.header-nav-btn-icon {\n  fill: currentColor;\n  color: var(--gray-600);\n}\n\n.header-nav-btn-icon-wrapper {\n  margin-right: 4px;\n  display: flex;\n  height: 20px;\n  width: 20px;\n  align-items: center;\n}\n\n.btn--danger {\n  color: #ddd;\n  background-color: var(--red-500);\n  border-color: transparent;\n}\n\n.btn--danger:not(.btn--forbidden):is(:hover, :focus) {\n  color: #fff;\n  border-color: transparent;\n}\n\n.text-btn {\n  cursor: pointer;\n  color: var(--blue-600);\n}\n\n.delete-text-btn {\n  cursor: pointer;\n  color: var(--red-600);\n}\n\n.text-btn:hover {\n  color: var(--blue-800);\n}\n\n.delete-text-btn {\n  cursor: pointer;\n  color: var(--red-600);\n}\n\n.delete-text-btn:hover {\n  color: var(--red-800);\n}\n\n.icon-text-btn {\n  display: inline-flex;\n  align-items: center;\n  padding: 5px 8px;\n  cursor: pointer;\n  color: var(--gray-600);\n}\n\n.icon-text-btn svg {\n  margin-right: 4px;\n  color: inherit;\n}\n\n.icon-text-btn:hover {\n  color: var(--blue-600);\n}\n\n.svg-icon {\n  vertical-align: middle;\n  display: inline-block;\n  color: currentColor;\n  fill: currentColor;\n}\n\n.svg-icon--disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.svg-icon--changeable {\n  &:hover,\n  &:active {\n    color: var(--icon-coloured-color);\n    fill: var(--icon-coloured-fill);\n  }\n}\n\n.svg-icon--clickable {\n  cursor: pointer;\n}\n\n.svg-icon--blue {\n  color: var(--blue-600);\n  fill: var(--blue-400);\n}\n\n.svg-icon--red {\n  color: var(--red-600);\n  fill: var(--red-400);\n}\n\n.svg-icon--green {\n  color: var(--green-600);\n  fill: var(--green-400);\n}\n\n.svg-icon--yellow {\n  color: var(--yellow-600);\n  fill: var(--yellow-400);\n}\n\n.svg-icon--gray {\n  color: var(--gray-600);\n  fill: var(--gray-400);\n}\n\n.svg-icon--pink {\n  color: var(--pink-600);\n  fill: var(--pink-400);\n}\n\n.svg-icon--rose {\n  color: var(--rose-600);\n  fill: var(--rose-400);\n}\n\n.svg-icon--orange {\n  color: var(--orange-600);\n  fill: var(--orange-400);\n}\n\n.svg-icon--white {\n  color: var(--icon-light-color);\n  fill: var(--icon-light-fill);\n}\n\n.svg-icon--primary {\n  color: var(--primary-600);\n  fill: var(--primary-400);\n}\n\n.hover\\:bg-blue-100:hover {\n  background-color: var(--blue-100);\n}\n";
			n$3(css$8,{});

			var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

			var classnames = {exports: {}};

			/*!
			  Copyright (c) 2018 Jed Watson.
			  Licensed under the MIT License (MIT), see
			  http://jedwatson.github.io/classnames
			*/

			(function (module) {
			/* global define */

			(function () {

				var hasOwn = {}.hasOwnProperty;

				function classNames() {
					var classes = [];

					for (var i = 0; i < arguments.length; i++) {
						var arg = arguments[i];
						if (!arg) continue;

						var argType = typeof arg;

						if (argType === 'string' || argType === 'number') {
							classes.push(arg);
						} else if (Array.isArray(arg)) {
							if (arg.length) {
								var inner = classNames.apply(null, arg);
								if (inner) {
									classes.push(inner);
								}
							}
						} else if (argType === 'object') {
							if (arg.toString === Object.prototype.toString) {
								for (var key in arg) {
									if (hasOwn.call(arg, key) && arg[key]) {
										classes.push(key);
									}
								}
							} else {
								classes.push(arg.toString());
							}
						}
					}

					return classes.join(' ');
				}

				if (module.exports) {
					classNames.default = classNames;
					module.exports = classNames;
				} else {
					window.classNames = classNames;
				}
			}());
			}(classnames));

			var cs = classnames.exports;

			var svgHash = "/dist/images/sprite-9ce749a66da46ba9aaae5ee72c770960.svg";

			var __defProp$8 = Object.defineProperty;
			var __defProps$4 = Object.defineProperties;
			var __getOwnPropDescs$4 = Object.getOwnPropertyDescriptors;
			var __getOwnPropSymbols$7 = Object.getOwnPropertySymbols;
			var __hasOwnProp$7 = Object.prototype.hasOwnProperty;
			var __propIsEnum$7 = Object.prototype.propertyIsEnumerable;
			var __defNormalProp$7 = (obj, key, value) => key in obj ? __defProp$8(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
			var __spreadValues$7 = (a, b) => {
			  for (var prop in b || (b = {}))
			    if (__hasOwnProp$7.call(b, prop))
			      __defNormalProp$7(a, prop, b[prop]);
			  if (__getOwnPropSymbols$7)
			    for (var prop of __getOwnPropSymbols$7(b)) {
			      if (__propIsEnum$7.call(b, prop))
			        __defNormalProp$7(a, prop, b[prop]);
			    }
			  return a;
			};
			var __spreadProps$4 = (a, b) => __defProps$4(a, __getOwnPropDescs$4(b));
			var __objRest$4 = (source, exclude) => {
			  var target = {};
			  for (var prop in source)
			    if (__hasOwnProp$7.call(source, prop) && exclude.indexOf(prop) < 0)
			      target[prop] = source[prop];
			  if (source != null && __getOwnPropSymbols$7)
			    for (var prop of __getOwnPropSymbols$7(source)) {
			      if (exclude.indexOf(prop) < 0 && __propIsEnum$7.call(source, prop))
			        target[prop] = source[prop];
			    }
			  return target;
			};
			function Icon(_a, ref) {
			  var _b = _a, {
			    name,
			    size = 16,
			    color,
			    changeable,
			    disabled,
			    clickable,
			    className,
			    style
			  } = _b, props = __objRest$4(_b, [
			    "name",
			    "size",
			    "color",
			    "changeable",
			    "disabled",
			    "clickable",
			    "className",
			    "style"
			  ]);
			  const _style = __spreadProps$4(__spreadValues$7({}, style), {
			    width: `${size}px`,
			    height: `${size}px`
			  });
			  return /* @__PURE__ */ React__default.createElement("svg", __spreadProps$4(__spreadValues$7({}, props), {
			    ref,
			    "data-name": name,
			    style: _style,
			    className: cs("svg-icon", className, {
			      "svg-icon--changeable": changeable,
			      "svg-icon--clickable": clickable,
			      "svg-icon--disabled": disabled,
			      [`svg-icon--${color}`]: color
			    })
			  }), /* @__PURE__ */ React__default.createElement("use", {
			    xlinkHref: `${svgHash}#${name}`
			  }));
			}
			var Icon$1 = exports('Icon', React__default.forwardRef(Icon));

			var __defProp$7 = Object.defineProperty;
			var __defProps$3 = Object.defineProperties;
			var __getOwnPropDescs$3 = Object.getOwnPropertyDescriptors;
			var __getOwnPropSymbols$6 = Object.getOwnPropertySymbols;
			var __hasOwnProp$6 = Object.prototype.hasOwnProperty;
			var __propIsEnum$6 = Object.prototype.propertyIsEnumerable;
			var __defNormalProp$6 = (obj, key, value) => key in obj ? __defProp$7(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
			var __spreadValues$6 = (a, b) => {
			  for (var prop in b || (b = {}))
			    if (__hasOwnProp$6.call(b, prop))
			      __defNormalProp$6(a, prop, b[prop]);
			  if (__getOwnPropSymbols$6)
			    for (var prop of __getOwnPropSymbols$6(b)) {
			      if (__propIsEnum$6.call(b, prop))
			        __defNormalProp$6(a, prop, b[prop]);
			    }
			  return a;
			};
			var __spreadProps$3 = (a, b) => __defProps$3(a, __getOwnPropDescs$3(b));
			var __objRest$3 = (source, exclude) => {
			  var target = {};
			  for (var prop in source)
			    if (__hasOwnProp$6.call(source, prop) && exclude.indexOf(prop) < 0)
			      target[prop] = source[prop];
			  if (source != null && __getOwnPropSymbols$6)
			    for (var prop of __getOwnPropSymbols$6(source)) {
			      if (exclude.indexOf(prop) < 0 && __propIsEnum$6.call(source, prop))
			        target[prop] = source[prop];
			    }
			  return target;
			};
			function Button(_a, ref) {
			  var _b = _a, {
			    children,
			    iconName,
			    className,
			    modifier,
			    forbidden,
			    loading,
			    iconSize = 20,
			    textClassName,
			    iconClassName,
			    type = "button",
			    size
			  } = _b, rest = __objRest$3(_b, [
			    "children",
			    "iconName",
			    "className",
			    "modifier",
			    "forbidden",
			    "loading",
			    "iconSize",
			    "textClassName",
			    "iconClassName",
			    "type",
			    "size"
			  ]);
			  return /* @__PURE__ */ React__default.createElement("button", __spreadProps$3(__spreadValues$6({}, rest), {
			    type,
			    ref,
			    className: cs("btn", className, {
			      [`btn--${modifier}`]: modifier,
			      "btn--forbidden": forbidden,
			      "btn--loading": loading,
			      "opacity-50": forbidden,
			      "pointer-events-none": loading || forbidden,
			      "h-26": size === "compact"
			    }),
			    disabled: forbidden
			  }), (iconName || loading) && /* @__PURE__ */ React__default.createElement(Icon$1, {
			    name: loading ? "refresh" : iconName || "refresh",
			    type: modifier === "primary" ? "light" : "dark",
			    size: iconSize,
			    className: cs("fill-current text-inherit mr-4", iconClassName, {
			      "animate-spin": loading,
			      "pointer-events-none": loading || forbidden
			    })
			  }), /* @__PURE__ */ React__default.createElement("span", {
			    className: textClassName
			  }, !loading && children));
			}
			var Button$1 = exports('Button', forwardRef(Button));

			var css$7 = ".panel_m_panel__dc59fd2c {\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: white;\n  box-shadow: inset -1px 0px 0px #E2E8F0;\n  min-height: 300px;\n  border: 1px solid var(--gray-100);\n  border-right: none;\n  transition: all 0.3s ease-in-out;\n}\n.panel_m_panel__dc59fd2c.panel_m_panelPinned__dc59fd2c {\n  transition: none;\n}\n.panel_m_panel__dc59fd2c.panel_m_closed__dc59fd2c {\n  transform: translateX(-400px) !important;\n}\n.panel_m_panel__dc59fd2c .panel_m_header__dc59fd2c > .panel_m_title__dc59fd2c {\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 20px;\n  color: #475569;\n}\n.panel_m_panel__dc59fd2c .panel_m_header__dc59fd2c > .panel_m_actions__dc59fd2c .panel_m_actionPin__dc59fd2c {\n  margin-right: 8px;\n}\n.panel_m_panel__dc59fd2c .panel_m_header__dc59fd2c > .panel_m_actions__dc59fd2c .panel_m_actionPin__dc59fd2c.panel_m_pinned__dc59fd2c svg {\n  transform: rotate(45deg);\n}";
			var modules_efdbd671 = {"panel":"panel_m_panel__dc59fd2c","panelPinned":"panel_m_panelPinned__dc59fd2c","closed":"panel_m_closed__dc59fd2c","header":"panel_m_header__dc59fd2c","title":"panel_m_title__dc59fd2c","actions":"panel_m_actions__dc59fd2c","actionPin":"panel_m_actionPin__dc59fd2c","pinned":"panel_m_pinned__dc59fd2c"};
			n$3(css$7,{});

			var __defProp$6 = Object.defineProperty;
			var __getOwnPropSymbols$5 = Object.getOwnPropertySymbols;
			var __hasOwnProp$5 = Object.prototype.hasOwnProperty;
			var __propIsEnum$5 = Object.prototype.propertyIsEnumerable;
			var __defNormalProp$5 = (obj, key, value) => key in obj ? __defProp$6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
			var __spreadValues$5 = (a, b) => {
			  for (var prop in b || (b = {}))
			    if (__hasOwnProp$5.call(b, prop))
			      __defNormalProp$5(a, prop, b[prop]);
			  if (__getOwnPropSymbols$5)
			    for (var prop of __getOwnPropSymbols$5(b)) {
			      if (__propIsEnum$5.call(b, prop))
			        __defNormalProp$5(a, prop, b[prop]);
			    }
			  return a;
			};
			function Panel({
			  width = "268px",
			  height = "100%",
			  title = "",
			  pinnable,
			  closable,
			  visible,
			  pinned,
			  className,
			  style,
			  children,
			  onClose,
			  onPin
			}) {
			  return /* @__PURE__ */ React__default.createElement("div", {
			    className: cs("px-8 py-16 overflow-auto z-10", {
			      [modules_efdbd671.closed]: !visible,
			      [modules_efdbd671.panelPinned]: pinned
			    }, modules_efdbd671.panel, className),
			    style: __spreadValues$5({
			      width,
			      height
			    }, style)
			  }, /* @__PURE__ */ React__default.createElement("div", {
			    className: cs("flex justify-between items-center pb-16", modules_efdbd671.header)
			  }, /* @__PURE__ */ React__default.createElement("div", {
			    className: modules_efdbd671.title
			  }, title), /* @__PURE__ */ React__default.createElement("div", {
			    className: cs("inline-flex items-center", modules_efdbd671.actions)
			  }, pinnable && /* @__PURE__ */ React__default.createElement("div", {
			    className: cs(modules_efdbd671.actionPin, { [modules_efdbd671.pinned]: pinned })
			  }, /* @__PURE__ */ React__default.createElement(Icon$1, {
			    name: "push_pin",
			    clickable: true,
			    changeable: true,
			    onClick: onPin
			  })), closable && /* @__PURE__ */ React__default.createElement("div", {
			    className: modules_efdbd671.actionClose
			  }, /* @__PURE__ */ React__default.createElement(Icon$1, {
			    name: "close",
			    clickable: true,
			    changeable: true,
			    onClick: onClose
			  })))), /* @__PURE__ */ React__default.createElement("div", {
			    className: modules_efdbd671.body
			  }, children));
			}

			var __defProp$5 = Object.defineProperty;
			var __getOwnPropSymbols$4 = Object.getOwnPropertySymbols;
			var __hasOwnProp$4 = Object.prototype.hasOwnProperty;
			var __propIsEnum$4 = Object.prototype.propertyIsEnumerable;
			var __defNormalProp$4 = (obj, key, value) => key in obj ? __defProp$5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
			var __spreadValues$4 = (a, b) => {
			  for (var prop in b || (b = {}))
			    if (__hasOwnProp$4.call(b, prop))
			      __defNormalProp$4(a, prop, b[prop]);
			  if (__getOwnPropSymbols$4)
			    for (var prop of __getOwnPropSymbols$4(b)) {
			      if (__propIsEnum$4.call(b, prop))
			        __defNormalProp$4(a, prop, b[prop]);
			    }
			  return a;
			};
			const OVERFLOW_STYLE = {
			  display: "-webkit-box",
			  overflow: "hidden",
			  WebkitBoxOrient: "vertical",
			  WebkitLineClamp: "none",
			  wordWrap: "break-word",
			  wordBreak: "break-all"
			};
			function Paragraph(props) {
			  const { content, isAllowSelect, maxLength } = props;
			  if (Number(maxLength) > 0) {
			    OVERFLOW_STYLE.WebkitLineClamp = (maxLength == null ? void 0 : maxLength.toString()) || "none";
			  }
			  return /* @__PURE__ */ React__default.createElement("p", {
			    className: cs({
			      "user-select": isAllowSelect ? "none" : "auto"
			    }),
			    style: __spreadValues$4({}, OVERFLOW_STYLE)
			  }, content || "\u6BB5\u843D\u6587\u672C");
			}

			var top = 'top';
			var bottom = 'bottom';
			var right = 'right';
			var left = 'left';
			var auto = 'auto';
			var basePlacements = [top, bottom, right, left];
			var start = 'start';
			var end = 'end';
			var clippingParents = 'clippingParents';
			var viewport = 'viewport';
			var popper = 'popper';
			var reference = 'reference';
			var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
			  return acc.concat([placement + "-" + start, placement + "-" + end]);
			}, []);
			var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
			  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
			}, []); // modifiers that need to read the DOM

			var beforeRead = 'beforeRead';
			var read = 'read';
			var afterRead = 'afterRead'; // pure-logic modifiers

			var beforeMain = 'beforeMain';
			var main = 'main';
			var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

			var beforeWrite = 'beforeWrite';
			var write = 'write';
			var afterWrite = 'afterWrite';
			var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

			function getNodeName(element) {
			  return element ? (element.nodeName || '').toLowerCase() : null;
			}

			function getWindow(node) {
			  if (node == null) {
			    return window;
			  }

			  if (node.toString() !== '[object Window]') {
			    var ownerDocument = node.ownerDocument;
			    return ownerDocument ? ownerDocument.defaultView || window : window;
			  }

			  return node;
			}

			function isElement(node) {
			  var OwnElement = getWindow(node).Element;
			  return node instanceof OwnElement || node instanceof Element;
			}

			function isHTMLElement(node) {
			  var OwnElement = getWindow(node).HTMLElement;
			  return node instanceof OwnElement || node instanceof HTMLElement;
			}

			function isShadowRoot(node) {
			  // IE 11 has no ShadowRoot
			  if (typeof ShadowRoot === 'undefined') {
			    return false;
			  }

			  var OwnElement = getWindow(node).ShadowRoot;
			  return node instanceof OwnElement || node instanceof ShadowRoot;
			}

			// and applies them to the HTMLElements such as popper and arrow

			function applyStyles(_ref) {
			  var state = _ref.state;
			  Object.keys(state.elements).forEach(function (name) {
			    var style = state.styles[name] || {};
			    var attributes = state.attributes[name] || {};
			    var element = state.elements[name]; // arrow is optional + virtual elements

			    if (!isHTMLElement(element) || !getNodeName(element)) {
			      return;
			    } // Flow doesn't support to extend this property, but it's the most
			    // effective way to apply styles to an HTMLElement
			    // $FlowFixMe[cannot-write]


			    Object.assign(element.style, style);
			    Object.keys(attributes).forEach(function (name) {
			      var value = attributes[name];

			      if (value === false) {
			        element.removeAttribute(name);
			      } else {
			        element.setAttribute(name, value === true ? '' : value);
			      }
			    });
			  });
			}

			function effect$2(_ref2) {
			  var state = _ref2.state;
			  var initialStyles = {
			    popper: {
			      position: state.options.strategy,
			      left: '0',
			      top: '0',
			      margin: '0'
			    },
			    arrow: {
			      position: 'absolute'
			    },
			    reference: {}
			  };
			  Object.assign(state.elements.popper.style, initialStyles.popper);
			  state.styles = initialStyles;

			  if (state.elements.arrow) {
			    Object.assign(state.elements.arrow.style, initialStyles.arrow);
			  }

			  return function () {
			    Object.keys(state.elements).forEach(function (name) {
			      var element = state.elements[name];
			      var attributes = state.attributes[name] || {};
			      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

			      var style = styleProperties.reduce(function (style, property) {
			        style[property] = '';
			        return style;
			      }, {}); // arrow is optional + virtual elements

			      if (!isHTMLElement(element) || !getNodeName(element)) {
			        return;
			      }

			      Object.assign(element.style, style);
			      Object.keys(attributes).forEach(function (attribute) {
			        element.removeAttribute(attribute);
			      });
			    });
			  };
			} // eslint-disable-next-line import/no-unused-modules


			var applyStyles$1 = {
			  name: 'applyStyles',
			  enabled: true,
			  phase: 'write',
			  fn: applyStyles,
			  effect: effect$2,
			  requires: ['computeStyles']
			};

			function getBasePlacement(placement) {
			  return placement.split('-')[0];
			}

			var max = Math.max;
			var min = Math.min;
			var round = Math.round;

			function getBoundingClientRect(element, includeScale) {
			  if (includeScale === void 0) {
			    includeScale = false;
			  }

			  var rect = element.getBoundingClientRect();
			  var scaleX = 1;
			  var scaleY = 1;

			  if (isHTMLElement(element) && includeScale) {
			    var offsetHeight = element.offsetHeight;
			    var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
			    // Fallback to 1 in case both values are `0`

			    if (offsetWidth > 0) {
			      scaleX = round(rect.width) / offsetWidth || 1;
			    }

			    if (offsetHeight > 0) {
			      scaleY = round(rect.height) / offsetHeight || 1;
			    }
			  }

			  return {
			    width: rect.width / scaleX,
			    height: rect.height / scaleY,
			    top: rect.top / scaleY,
			    right: rect.right / scaleX,
			    bottom: rect.bottom / scaleY,
			    left: rect.left / scaleX,
			    x: rect.left / scaleX,
			    y: rect.top / scaleY
			  };
			}

			// means it doesn't take into account transforms.

			function getLayoutRect(element) {
			  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
			  // Fixes https://github.com/popperjs/popper-core/issues/1223

			  var width = element.offsetWidth;
			  var height = element.offsetHeight;

			  if (Math.abs(clientRect.width - width) <= 1) {
			    width = clientRect.width;
			  }

			  if (Math.abs(clientRect.height - height) <= 1) {
			    height = clientRect.height;
			  }

			  return {
			    x: element.offsetLeft,
			    y: element.offsetTop,
			    width: width,
			    height: height
			  };
			}

			function contains(parent, child) {
			  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

			  if (parent.contains(child)) {
			    return true;
			  } // then fallback to custom implementation with Shadow DOM support
			  else if (rootNode && isShadowRoot(rootNode)) {
			      var next = child;

			      do {
			        if (next && parent.isSameNode(next)) {
			          return true;
			        } // $FlowFixMe[prop-missing]: need a better way to handle this...


			        next = next.parentNode || next.host;
			      } while (next);
			    } // Give up, the result is false


			  return false;
			}

			function getComputedStyle(element) {
			  return getWindow(element).getComputedStyle(element);
			}

			function isTableElement(element) {
			  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
			}

			function getDocumentElement(element) {
			  // $FlowFixMe[incompatible-return]: assume body is always available
			  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
			  element.document) || window.document).documentElement;
			}

			function getParentNode(element) {
			  if (getNodeName(element) === 'html') {
			    return element;
			  }

			  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
			    // $FlowFixMe[incompatible-return]
			    // $FlowFixMe[prop-missing]
			    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
			    element.parentNode || ( // DOM Element detected
			    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
			    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
			    getDocumentElement(element) // fallback

			  );
			}

			function getTrueOffsetParent(element) {
			  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
			  getComputedStyle(element).position === 'fixed') {
			    return null;
			  }

			  return element.offsetParent;
			} // `.offsetParent` reports `null` for fixed elements, while absolute elements
			// return the containing block


			function getContainingBlock(element) {
			  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
			  var isIE = navigator.userAgent.indexOf('Trident') !== -1;

			  if (isIE && isHTMLElement(element)) {
			    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
			    var elementCss = getComputedStyle(element);

			    if (elementCss.position === 'fixed') {
			      return null;
			    }
			  }

			  var currentNode = getParentNode(element);

			  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
			    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
			    // create a containing block.
			    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

			    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
			      return currentNode;
			    } else {
			      currentNode = currentNode.parentNode;
			    }
			  }

			  return null;
			} // Gets the closest ancestor positioned element. Handles some edge cases,
			// such as table ancestors and cross browser bugs.


			function getOffsetParent(element) {
			  var window = getWindow(element);
			  var offsetParent = getTrueOffsetParent(element);

			  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
			    offsetParent = getTrueOffsetParent(offsetParent);
			  }

			  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
			    return window;
			  }

			  return offsetParent || getContainingBlock(element) || window;
			}

			function getMainAxisFromPlacement(placement) {
			  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
			}

			function within(min$1, value, max$1) {
			  return max(min$1, min(value, max$1));
			}
			function withinMaxClamp(min, value, max) {
			  var v = within(min, value, max);
			  return v > max ? max : v;
			}

			function getFreshSideObject() {
			  return {
			    top: 0,
			    right: 0,
			    bottom: 0,
			    left: 0
			  };
			}

			function mergePaddingObject(paddingObject) {
			  return Object.assign({}, getFreshSideObject(), paddingObject);
			}

			function expandToHashMap(value, keys) {
			  return keys.reduce(function (hashMap, key) {
			    hashMap[key] = value;
			    return hashMap;
			  }, {});
			}

			var toPaddingObject = function toPaddingObject(padding, state) {
			  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
			    placement: state.placement
			  })) : padding;
			  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
			};

			function arrow(_ref) {
			  var _state$modifiersData$;

			  var state = _ref.state,
			      name = _ref.name,
			      options = _ref.options;
			  var arrowElement = state.elements.arrow;
			  var popperOffsets = state.modifiersData.popperOffsets;
			  var basePlacement = getBasePlacement(state.placement);
			  var axis = getMainAxisFromPlacement(basePlacement);
			  var isVertical = [left, right].indexOf(basePlacement) >= 0;
			  var len = isVertical ? 'height' : 'width';

			  if (!arrowElement || !popperOffsets) {
			    return;
			  }

			  var paddingObject = toPaddingObject(options.padding, state);
			  var arrowRect = getLayoutRect(arrowElement);
			  var minProp = axis === 'y' ? top : left;
			  var maxProp = axis === 'y' ? bottom : right;
			  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
			  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
			  var arrowOffsetParent = getOffsetParent(arrowElement);
			  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
			  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
			  // outside of the popper bounds

			  var min = paddingObject[minProp];
			  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
			  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
			  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

			  var axisProp = axis;
			  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
			}

			function effect$1(_ref2) {
			  var state = _ref2.state,
			      options = _ref2.options;
			  var _options$element = options.element,
			      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

			  if (arrowElement == null) {
			    return;
			  } // CSS selector


			  if (typeof arrowElement === 'string') {
			    arrowElement = state.elements.popper.querySelector(arrowElement);

			    if (!arrowElement) {
			      return;
			    }
			  }

			  if (process.env.NODE_ENV !== "production") {
			    if (!isHTMLElement(arrowElement)) {
			      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
			    }
			  }

			  if (!contains(state.elements.popper, arrowElement)) {
			    if (process.env.NODE_ENV !== "production") {
			      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
			    }

			    return;
			  }

			  state.elements.arrow = arrowElement;
			} // eslint-disable-next-line import/no-unused-modules


			var arrow$1 = {
			  name: 'arrow',
			  enabled: true,
			  phase: 'main',
			  fn: arrow,
			  effect: effect$1,
			  requires: ['popperOffsets'],
			  requiresIfExists: ['preventOverflow']
			};

			function getVariation(placement) {
			  return placement.split('-')[1];
			}

			var unsetSides = {
			  top: 'auto',
			  right: 'auto',
			  bottom: 'auto',
			  left: 'auto'
			}; // Round the offsets to the nearest suitable subpixel based on the DPR.
			// Zooming can change the DPR, but it seems to report a value that will
			// cleanly divide the values into the appropriate subpixels.

			function roundOffsetsByDPR(_ref) {
			  var x = _ref.x,
			      y = _ref.y;
			  var win = window;
			  var dpr = win.devicePixelRatio || 1;
			  return {
			    x: round(x * dpr) / dpr || 0,
			    y: round(y * dpr) / dpr || 0
			  };
			}

			function mapToStyles(_ref2) {
			  var _Object$assign2;

			  var popper = _ref2.popper,
			      popperRect = _ref2.popperRect,
			      placement = _ref2.placement,
			      variation = _ref2.variation,
			      offsets = _ref2.offsets,
			      position = _ref2.position,
			      gpuAcceleration = _ref2.gpuAcceleration,
			      adaptive = _ref2.adaptive,
			      roundOffsets = _ref2.roundOffsets,
			      isFixed = _ref2.isFixed;

			  var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,
			      _ref3$x = _ref3.x,
			      x = _ref3$x === void 0 ? 0 : _ref3$x,
			      _ref3$y = _ref3.y,
			      y = _ref3$y === void 0 ? 0 : _ref3$y;

			  var hasX = offsets.hasOwnProperty('x');
			  var hasY = offsets.hasOwnProperty('y');
			  var sideX = left;
			  var sideY = top;
			  var win = window;

			  if (adaptive) {
			    var offsetParent = getOffsetParent(popper);
			    var heightProp = 'clientHeight';
			    var widthProp = 'clientWidth';

			    if (offsetParent === getWindow(popper)) {
			      offsetParent = getDocumentElement(popper);

			      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
			        heightProp = 'scrollHeight';
			        widthProp = 'scrollWidth';
			      }
			    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


			    offsetParent = offsetParent;

			    if (placement === top || (placement === left || placement === right) && variation === end) {
			      sideY = bottom;
			      var offsetY = isFixed && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
			      offsetParent[heightProp];
			      y -= offsetY - popperRect.height;
			      y *= gpuAcceleration ? 1 : -1;
			    }

			    if (placement === left || (placement === top || placement === bottom) && variation === end) {
			      sideX = right;
			      var offsetX = isFixed && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
			      offsetParent[widthProp];
			      x -= offsetX - popperRect.width;
			      x *= gpuAcceleration ? 1 : -1;
			    }
			  }

			  var commonStyles = Object.assign({
			    position: position
			  }, adaptive && unsetSides);

			  if (gpuAcceleration) {
			    var _Object$assign;

			    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
			  }

			  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
			}

			function computeStyles(_ref4) {
			  var state = _ref4.state,
			      options = _ref4.options;
			  var _options$gpuAccelerat = options.gpuAcceleration,
			      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
			      _options$adaptive = options.adaptive,
			      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
			      _options$roundOffsets = options.roundOffsets,
			      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

			  if (process.env.NODE_ENV !== "production") {
			    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';

			    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
			      return transitionProperty.indexOf(property) >= 0;
			    })) {
			      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
			    }
			  }

			  var commonStyles = {
			    placement: getBasePlacement(state.placement),
			    variation: getVariation(state.placement),
			    popper: state.elements.popper,
			    popperRect: state.rects.popper,
			    gpuAcceleration: gpuAcceleration,
			    isFixed: state.options.strategy === 'fixed'
			  };

			  if (state.modifiersData.popperOffsets != null) {
			    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
			      offsets: state.modifiersData.popperOffsets,
			      position: state.options.strategy,
			      adaptive: adaptive,
			      roundOffsets: roundOffsets
			    })));
			  }

			  if (state.modifiersData.arrow != null) {
			    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
			      offsets: state.modifiersData.arrow,
			      position: 'absolute',
			      adaptive: false,
			      roundOffsets: roundOffsets
			    })));
			  }

			  state.attributes.popper = Object.assign({}, state.attributes.popper, {
			    'data-popper-placement': state.placement
			  });
			} // eslint-disable-next-line import/no-unused-modules


			var computeStyles$1 = {
			  name: 'computeStyles',
			  enabled: true,
			  phase: 'beforeWrite',
			  fn: computeStyles,
			  data: {}
			};

			var passive = {
			  passive: true
			};

			function effect(_ref) {
			  var state = _ref.state,
			      instance = _ref.instance,
			      options = _ref.options;
			  var _options$scroll = options.scroll,
			      scroll = _options$scroll === void 0 ? true : _options$scroll,
			      _options$resize = options.resize,
			      resize = _options$resize === void 0 ? true : _options$resize;
			  var window = getWindow(state.elements.popper);
			  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

			  if (scroll) {
			    scrollParents.forEach(function (scrollParent) {
			      scrollParent.addEventListener('scroll', instance.update, passive);
			    });
			  }

			  if (resize) {
			    window.addEventListener('resize', instance.update, passive);
			  }

			  return function () {
			    if (scroll) {
			      scrollParents.forEach(function (scrollParent) {
			        scrollParent.removeEventListener('scroll', instance.update, passive);
			      });
			    }

			    if (resize) {
			      window.removeEventListener('resize', instance.update, passive);
			    }
			  };
			} // eslint-disable-next-line import/no-unused-modules


			var eventListeners = {
			  name: 'eventListeners',
			  enabled: true,
			  phase: 'write',
			  fn: function fn() {},
			  effect: effect,
			  data: {}
			};

			var hash$1 = {
			  left: 'right',
			  right: 'left',
			  bottom: 'top',
			  top: 'bottom'
			};
			function getOppositePlacement(placement) {
			  return placement.replace(/left|right|bottom|top/g, function (matched) {
			    return hash$1[matched];
			  });
			}

			var hash = {
			  start: 'end',
			  end: 'start'
			};
			function getOppositeVariationPlacement(placement) {
			  return placement.replace(/start|end/g, function (matched) {
			    return hash[matched];
			  });
			}

			function getWindowScroll(node) {
			  var win = getWindow(node);
			  var scrollLeft = win.pageXOffset;
			  var scrollTop = win.pageYOffset;
			  return {
			    scrollLeft: scrollLeft,
			    scrollTop: scrollTop
			  };
			}

			function getWindowScrollBarX(element) {
			  // If <html> has a CSS width greater than the viewport, then this will be
			  // incorrect for RTL.
			  // Popper 1 is broken in this case and never had a bug report so let's assume
			  // it's not an issue. I don't think anyone ever specifies width on <html>
			  // anyway.
			  // Browsers where the left scrollbar doesn't cause an issue report `0` for
			  // this (e.g. Edge 2019, IE11, Safari)
			  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
			}

			function getViewportRect(element) {
			  var win = getWindow(element);
			  var html = getDocumentElement(element);
			  var visualViewport = win.visualViewport;
			  var width = html.clientWidth;
			  var height = html.clientHeight;
			  var x = 0;
			  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
			  // can be obscured underneath it.
			  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
			  // if it isn't open, so if this isn't available, the popper will be detected
			  // to overflow the bottom of the screen too early.

			  if (visualViewport) {
			    width = visualViewport.width;
			    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
			    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
			    // errors due to floating point numbers, so we need to check precision.
			    // Safari returns a number <= 0, usually < -1 when pinch-zoomed
			    // Feature detection fails in mobile emulation mode in Chrome.
			    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
			    // 0.001
			    // Fallback here: "Not Safari" userAgent

			    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
			      x = visualViewport.offsetLeft;
			      y = visualViewport.offsetTop;
			    }
			  }

			  return {
			    width: width,
			    height: height,
			    x: x + getWindowScrollBarX(element),
			    y: y
			  };
			}

			// of the `<html>` and `<body>` rect bounds if horizontally scrollable

			function getDocumentRect(element) {
			  var _element$ownerDocumen;

			  var html = getDocumentElement(element);
			  var winScroll = getWindowScroll(element);
			  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
			  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
			  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
			  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
			  var y = -winScroll.scrollTop;

			  if (getComputedStyle(body || html).direction === 'rtl') {
			    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
			  }

			  return {
			    width: width,
			    height: height,
			    x: x,
			    y: y
			  };
			}

			function isScrollParent(element) {
			  // Firefox wants us to check `-x` and `-y` variations as well
			  var _getComputedStyle = getComputedStyle(element),
			      overflow = _getComputedStyle.overflow,
			      overflowX = _getComputedStyle.overflowX,
			      overflowY = _getComputedStyle.overflowY;

			  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
			}

			function getScrollParent(node) {
			  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
			    // $FlowFixMe[incompatible-return]: assume body is always available
			    return node.ownerDocument.body;
			  }

			  if (isHTMLElement(node) && isScrollParent(node)) {
			    return node;
			  }

			  return getScrollParent(getParentNode(node));
			}

			/*
			given a DOM element, return the list of all scroll parents, up the list of ancesors
			until we get to the top window object. This list is what we attach scroll listeners
			to, because if any of these parent elements scroll, we'll need to re-calculate the
			reference element's position.
			*/

			function listScrollParents(element, list) {
			  var _element$ownerDocumen;

			  if (list === void 0) {
			    list = [];
			  }

			  var scrollParent = getScrollParent(element);
			  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
			  var win = getWindow(scrollParent);
			  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
			  var updatedList = list.concat(target);
			  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
			  updatedList.concat(listScrollParents(getParentNode(target)));
			}

			function rectToClientRect(rect) {
			  return Object.assign({}, rect, {
			    left: rect.x,
			    top: rect.y,
			    right: rect.x + rect.width,
			    bottom: rect.y + rect.height
			  });
			}

			function getInnerBoundingClientRect(element) {
			  var rect = getBoundingClientRect(element);
			  rect.top = rect.top + element.clientTop;
			  rect.left = rect.left + element.clientLeft;
			  rect.bottom = rect.top + element.clientHeight;
			  rect.right = rect.left + element.clientWidth;
			  rect.width = element.clientWidth;
			  rect.height = element.clientHeight;
			  rect.x = rect.left;
			  rect.y = rect.top;
			  return rect;
			}

			function getClientRectFromMixedType(element, clippingParent) {
			  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
			} // A "clipping parent" is an overflowable container with the characteristic of
			// clipping (or hiding) overflowing elements with a position different from
			// `initial`


			function getClippingParents(element) {
			  var clippingParents = listScrollParents(getParentNode(element));
			  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
			  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

			  if (!isElement(clipperElement)) {
			    return [];
			  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


			  return clippingParents.filter(function (clippingParent) {
			    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body' && (canEscapeClipping ? getComputedStyle(clippingParent).position !== 'static' : true);
			  });
			} // Gets the maximum area that the element is visible in due to any number of
			// clipping parents


			function getClippingRect(element, boundary, rootBoundary) {
			  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
			  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
			  var firstClippingParent = clippingParents[0];
			  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
			    var rect = getClientRectFromMixedType(element, clippingParent);
			    accRect.top = max(rect.top, accRect.top);
			    accRect.right = min(rect.right, accRect.right);
			    accRect.bottom = min(rect.bottom, accRect.bottom);
			    accRect.left = max(rect.left, accRect.left);
			    return accRect;
			  }, getClientRectFromMixedType(element, firstClippingParent));
			  clippingRect.width = clippingRect.right - clippingRect.left;
			  clippingRect.height = clippingRect.bottom - clippingRect.top;
			  clippingRect.x = clippingRect.left;
			  clippingRect.y = clippingRect.top;
			  return clippingRect;
			}

			function computeOffsets(_ref) {
			  var reference = _ref.reference,
			      element = _ref.element,
			      placement = _ref.placement;
			  var basePlacement = placement ? getBasePlacement(placement) : null;
			  var variation = placement ? getVariation(placement) : null;
			  var commonX = reference.x + reference.width / 2 - element.width / 2;
			  var commonY = reference.y + reference.height / 2 - element.height / 2;
			  var offsets;

			  switch (basePlacement) {
			    case top:
			      offsets = {
			        x: commonX,
			        y: reference.y - element.height
			      };
			      break;

			    case bottom:
			      offsets = {
			        x: commonX,
			        y: reference.y + reference.height
			      };
			      break;

			    case right:
			      offsets = {
			        x: reference.x + reference.width,
			        y: commonY
			      };
			      break;

			    case left:
			      offsets = {
			        x: reference.x - element.width,
			        y: commonY
			      };
			      break;

			    default:
			      offsets = {
			        x: reference.x,
			        y: reference.y
			      };
			  }

			  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

			  if (mainAxis != null) {
			    var len = mainAxis === 'y' ? 'height' : 'width';

			    switch (variation) {
			      case start:
			        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
			        break;

			      case end:
			        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
			        break;
			    }
			  }

			  return offsets;
			}

			function detectOverflow(state, options) {
			  if (options === void 0) {
			    options = {};
			  }

			  var _options = options,
			      _options$placement = _options.placement,
			      placement = _options$placement === void 0 ? state.placement : _options$placement,
			      _options$boundary = _options.boundary,
			      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
			      _options$rootBoundary = _options.rootBoundary,
			      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
			      _options$elementConte = _options.elementContext,
			      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
			      _options$altBoundary = _options.altBoundary,
			      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
			      _options$padding = _options.padding,
			      padding = _options$padding === void 0 ? 0 : _options$padding;
			  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
			  var altContext = elementContext === popper ? reference : popper;
			  var popperRect = state.rects.popper;
			  var element = state.elements[altBoundary ? altContext : elementContext];
			  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
			  var referenceClientRect = getBoundingClientRect(state.elements.reference);
			  var popperOffsets = computeOffsets({
			    reference: referenceClientRect,
			    element: popperRect,
			    strategy: 'absolute',
			    placement: placement
			  });
			  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
			  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
			  // 0 or negative = within the clipping rect

			  var overflowOffsets = {
			    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
			    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
			    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
			    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
			  };
			  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

			  if (elementContext === popper && offsetData) {
			    var offset = offsetData[placement];
			    Object.keys(overflowOffsets).forEach(function (key) {
			      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
			      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
			      overflowOffsets[key] += offset[axis] * multiply;
			    });
			  }

			  return overflowOffsets;
			}

			function computeAutoPlacement(state, options) {
			  if (options === void 0) {
			    options = {};
			  }

			  var _options = options,
			      placement = _options.placement,
			      boundary = _options.boundary,
			      rootBoundary = _options.rootBoundary,
			      padding = _options.padding,
			      flipVariations = _options.flipVariations,
			      _options$allowedAutoP = _options.allowedAutoPlacements,
			      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
			  var variation = getVariation(placement);
			  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
			    return getVariation(placement) === variation;
			  }) : basePlacements;
			  var allowedPlacements = placements$1.filter(function (placement) {
			    return allowedAutoPlacements.indexOf(placement) >= 0;
			  });

			  if (allowedPlacements.length === 0) {
			    allowedPlacements = placements$1;

			    if (process.env.NODE_ENV !== "production") {
			      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
			    }
			  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


			  var overflows = allowedPlacements.reduce(function (acc, placement) {
			    acc[placement] = detectOverflow(state, {
			      placement: placement,
			      boundary: boundary,
			      rootBoundary: rootBoundary,
			      padding: padding
			    })[getBasePlacement(placement)];
			    return acc;
			  }, {});
			  return Object.keys(overflows).sort(function (a, b) {
			    return overflows[a] - overflows[b];
			  });
			}

			function getExpandedFallbackPlacements(placement) {
			  if (getBasePlacement(placement) === auto) {
			    return [];
			  }

			  var oppositePlacement = getOppositePlacement(placement);
			  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
			}

			function flip(_ref) {
			  var state = _ref.state,
			      options = _ref.options,
			      name = _ref.name;

			  if (state.modifiersData[name]._skip) {
			    return;
			  }

			  var _options$mainAxis = options.mainAxis,
			      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
			      _options$altAxis = options.altAxis,
			      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
			      specifiedFallbackPlacements = options.fallbackPlacements,
			      padding = options.padding,
			      boundary = options.boundary,
			      rootBoundary = options.rootBoundary,
			      altBoundary = options.altBoundary,
			      _options$flipVariatio = options.flipVariations,
			      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
			      allowedAutoPlacements = options.allowedAutoPlacements;
			  var preferredPlacement = state.options.placement;
			  var basePlacement = getBasePlacement(preferredPlacement);
			  var isBasePlacement = basePlacement === preferredPlacement;
			  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
			  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
			    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
			      placement: placement,
			      boundary: boundary,
			      rootBoundary: rootBoundary,
			      padding: padding,
			      flipVariations: flipVariations,
			      allowedAutoPlacements: allowedAutoPlacements
			    }) : placement);
			  }, []);
			  var referenceRect = state.rects.reference;
			  var popperRect = state.rects.popper;
			  var checksMap = new Map();
			  var makeFallbackChecks = true;
			  var firstFittingPlacement = placements[0];

			  for (var i = 0; i < placements.length; i++) {
			    var placement = placements[i];

			    var _basePlacement = getBasePlacement(placement);

			    var isStartVariation = getVariation(placement) === start;
			    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
			    var len = isVertical ? 'width' : 'height';
			    var overflow = detectOverflow(state, {
			      placement: placement,
			      boundary: boundary,
			      rootBoundary: rootBoundary,
			      altBoundary: altBoundary,
			      padding: padding
			    });
			    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

			    if (referenceRect[len] > popperRect[len]) {
			      mainVariationSide = getOppositePlacement(mainVariationSide);
			    }

			    var altVariationSide = getOppositePlacement(mainVariationSide);
			    var checks = [];

			    if (checkMainAxis) {
			      checks.push(overflow[_basePlacement] <= 0);
			    }

			    if (checkAltAxis) {
			      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
			    }

			    if (checks.every(function (check) {
			      return check;
			    })) {
			      firstFittingPlacement = placement;
			      makeFallbackChecks = false;
			      break;
			    }

			    checksMap.set(placement, checks);
			  }

			  if (makeFallbackChecks) {
			    // `2` may be desired in some cases – research later
			    var numberOfChecks = flipVariations ? 3 : 1;

			    var _loop = function _loop(_i) {
			      var fittingPlacement = placements.find(function (placement) {
			        var checks = checksMap.get(placement);

			        if (checks) {
			          return checks.slice(0, _i).every(function (check) {
			            return check;
			          });
			        }
			      });

			      if (fittingPlacement) {
			        firstFittingPlacement = fittingPlacement;
			        return "break";
			      }
			    };

			    for (var _i = numberOfChecks; _i > 0; _i--) {
			      var _ret = _loop(_i);

			      if (_ret === "break") break;
			    }
			  }

			  if (state.placement !== firstFittingPlacement) {
			    state.modifiersData[name]._skip = true;
			    state.placement = firstFittingPlacement;
			    state.reset = true;
			  }
			} // eslint-disable-next-line import/no-unused-modules


			var flip$1 = {
			  name: 'flip',
			  enabled: true,
			  phase: 'main',
			  fn: flip,
			  requiresIfExists: ['offset'],
			  data: {
			    _skip: false
			  }
			};

			function getSideOffsets(overflow, rect, preventedOffsets) {
			  if (preventedOffsets === void 0) {
			    preventedOffsets = {
			      x: 0,
			      y: 0
			    };
			  }

			  return {
			    top: overflow.top - rect.height - preventedOffsets.y,
			    right: overflow.right - rect.width + preventedOffsets.x,
			    bottom: overflow.bottom - rect.height + preventedOffsets.y,
			    left: overflow.left - rect.width - preventedOffsets.x
			  };
			}

			function isAnySideFullyClipped(overflow) {
			  return [top, right, bottom, left].some(function (side) {
			    return overflow[side] >= 0;
			  });
			}

			function hide(_ref) {
			  var state = _ref.state,
			      name = _ref.name;
			  var referenceRect = state.rects.reference;
			  var popperRect = state.rects.popper;
			  var preventedOffsets = state.modifiersData.preventOverflow;
			  var referenceOverflow = detectOverflow(state, {
			    elementContext: 'reference'
			  });
			  var popperAltOverflow = detectOverflow(state, {
			    altBoundary: true
			  });
			  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
			  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
			  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
			  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
			  state.modifiersData[name] = {
			    referenceClippingOffsets: referenceClippingOffsets,
			    popperEscapeOffsets: popperEscapeOffsets,
			    isReferenceHidden: isReferenceHidden,
			    hasPopperEscaped: hasPopperEscaped
			  };
			  state.attributes.popper = Object.assign({}, state.attributes.popper, {
			    'data-popper-reference-hidden': isReferenceHidden,
			    'data-popper-escaped': hasPopperEscaped
			  });
			} // eslint-disable-next-line import/no-unused-modules


			var hide$1 = {
			  name: 'hide',
			  enabled: true,
			  phase: 'main',
			  requiresIfExists: ['preventOverflow'],
			  fn: hide
			};

			function distanceAndSkiddingToXY(placement, rects, offset) {
			  var basePlacement = getBasePlacement(placement);
			  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

			  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
			    placement: placement
			  })) : offset,
			      skidding = _ref[0],
			      distance = _ref[1];

			  skidding = skidding || 0;
			  distance = (distance || 0) * invertDistance;
			  return [left, right].indexOf(basePlacement) >= 0 ? {
			    x: distance,
			    y: skidding
			  } : {
			    x: skidding,
			    y: distance
			  };
			}

			function offset(_ref2) {
			  var state = _ref2.state,
			      options = _ref2.options,
			      name = _ref2.name;
			  var _options$offset = options.offset,
			      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
			  var data = placements.reduce(function (acc, placement) {
			    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
			    return acc;
			  }, {});
			  var _data$state$placement = data[state.placement],
			      x = _data$state$placement.x,
			      y = _data$state$placement.y;

			  if (state.modifiersData.popperOffsets != null) {
			    state.modifiersData.popperOffsets.x += x;
			    state.modifiersData.popperOffsets.y += y;
			  }

			  state.modifiersData[name] = data;
			} // eslint-disable-next-line import/no-unused-modules


			var offset$1 = {
			  name: 'offset',
			  enabled: true,
			  phase: 'main',
			  requires: ['popperOffsets'],
			  fn: offset
			};

			function popperOffsets(_ref) {
			  var state = _ref.state,
			      name = _ref.name;
			  // Offsets are the actual position the popper needs to have to be
			  // properly positioned near its reference element
			  // This is the most basic placement, and will be adjusted by
			  // the modifiers in the next step
			  state.modifiersData[name] = computeOffsets({
			    reference: state.rects.reference,
			    element: state.rects.popper,
			    strategy: 'absolute',
			    placement: state.placement
			  });
			} // eslint-disable-next-line import/no-unused-modules


			var popperOffsets$1 = {
			  name: 'popperOffsets',
			  enabled: true,
			  phase: 'read',
			  fn: popperOffsets,
			  data: {}
			};

			function getAltAxis(axis) {
			  return axis === 'x' ? 'y' : 'x';
			}

			function preventOverflow(_ref) {
			  var state = _ref.state,
			      options = _ref.options,
			      name = _ref.name;
			  var _options$mainAxis = options.mainAxis,
			      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
			      _options$altAxis = options.altAxis,
			      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
			      boundary = options.boundary,
			      rootBoundary = options.rootBoundary,
			      altBoundary = options.altBoundary,
			      padding = options.padding,
			      _options$tether = options.tether,
			      tether = _options$tether === void 0 ? true : _options$tether,
			      _options$tetherOffset = options.tetherOffset,
			      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
			  var overflow = detectOverflow(state, {
			    boundary: boundary,
			    rootBoundary: rootBoundary,
			    padding: padding,
			    altBoundary: altBoundary
			  });
			  var basePlacement = getBasePlacement(state.placement);
			  var variation = getVariation(state.placement);
			  var isBasePlacement = !variation;
			  var mainAxis = getMainAxisFromPlacement(basePlacement);
			  var altAxis = getAltAxis(mainAxis);
			  var popperOffsets = state.modifiersData.popperOffsets;
			  var referenceRect = state.rects.reference;
			  var popperRect = state.rects.popper;
			  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
			    placement: state.placement
			  })) : tetherOffset;
			  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
			    mainAxis: tetherOffsetValue,
			    altAxis: tetherOffsetValue
			  } : Object.assign({
			    mainAxis: 0,
			    altAxis: 0
			  }, tetherOffsetValue);
			  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
			  var data = {
			    x: 0,
			    y: 0
			  };

			  if (!popperOffsets) {
			    return;
			  }

			  if (checkMainAxis) {
			    var _offsetModifierState$;

			    var mainSide = mainAxis === 'y' ? top : left;
			    var altSide = mainAxis === 'y' ? bottom : right;
			    var len = mainAxis === 'y' ? 'height' : 'width';
			    var offset = popperOffsets[mainAxis];
			    var min$1 = offset + overflow[mainSide];
			    var max$1 = offset - overflow[altSide];
			    var additive = tether ? -popperRect[len] / 2 : 0;
			    var minLen = variation === start ? referenceRect[len] : popperRect[len];
			    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
			    // outside the reference bounds

			    var arrowElement = state.elements.arrow;
			    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
			      width: 0,
			      height: 0
			    };
			    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
			    var arrowPaddingMin = arrowPaddingObject[mainSide];
			    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
			    // to include its full size in the calculation. If the reference is small
			    // and near the edge of a boundary, the popper can overflow even if the
			    // reference is not overflowing as well (e.g. virtual elements with no
			    // width or height)

			    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
			    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
			    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
			    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
			    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
			    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
			    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
			    var tetherMax = offset + maxOffset - offsetModifierValue;
			    var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
			    popperOffsets[mainAxis] = preventedOffset;
			    data[mainAxis] = preventedOffset - offset;
			  }

			  if (checkAltAxis) {
			    var _offsetModifierState$2;

			    var _mainSide = mainAxis === 'x' ? top : left;

			    var _altSide = mainAxis === 'x' ? bottom : right;

			    var _offset = popperOffsets[altAxis];

			    var _len = altAxis === 'y' ? 'height' : 'width';

			    var _min = _offset + overflow[_mainSide];

			    var _max = _offset - overflow[_altSide];

			    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

			    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

			    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

			    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

			    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

			    popperOffsets[altAxis] = _preventedOffset;
			    data[altAxis] = _preventedOffset - _offset;
			  }

			  state.modifiersData[name] = data;
			} // eslint-disable-next-line import/no-unused-modules


			var preventOverflow$1 = {
			  name: 'preventOverflow',
			  enabled: true,
			  phase: 'main',
			  fn: preventOverflow,
			  requiresIfExists: ['offset']
			};

			function getHTMLElementScroll(element) {
			  return {
			    scrollLeft: element.scrollLeft,
			    scrollTop: element.scrollTop
			  };
			}

			function getNodeScroll(node) {
			  if (node === getWindow(node) || !isHTMLElement(node)) {
			    return getWindowScroll(node);
			  } else {
			    return getHTMLElementScroll(node);
			  }
			}

			function isElementScaled(element) {
			  var rect = element.getBoundingClientRect();
			  var scaleX = round(rect.width) / element.offsetWidth || 1;
			  var scaleY = round(rect.height) / element.offsetHeight || 1;
			  return scaleX !== 1 || scaleY !== 1;
			} // Returns the composite rect of an element relative to its offsetParent.
			// Composite means it takes into account transforms as well as layout.


			function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
			  if (isFixed === void 0) {
			    isFixed = false;
			  }

			  var isOffsetParentAnElement = isHTMLElement(offsetParent);
			  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
			  var documentElement = getDocumentElement(offsetParent);
			  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
			  var scroll = {
			    scrollLeft: 0,
			    scrollTop: 0
			  };
			  var offsets = {
			    x: 0,
			    y: 0
			  };

			  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
			    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
			    isScrollParent(documentElement)) {
			      scroll = getNodeScroll(offsetParent);
			    }

			    if (isHTMLElement(offsetParent)) {
			      offsets = getBoundingClientRect(offsetParent, true);
			      offsets.x += offsetParent.clientLeft;
			      offsets.y += offsetParent.clientTop;
			    } else if (documentElement) {
			      offsets.x = getWindowScrollBarX(documentElement);
			    }
			  }

			  return {
			    x: rect.left + scroll.scrollLeft - offsets.x,
			    y: rect.top + scroll.scrollTop - offsets.y,
			    width: rect.width,
			    height: rect.height
			  };
			}

			function order(modifiers) {
			  var map = new Map();
			  var visited = new Set();
			  var result = [];
			  modifiers.forEach(function (modifier) {
			    map.set(modifier.name, modifier);
			  }); // On visiting object, check for its dependencies and visit them recursively

			  function sort(modifier) {
			    visited.add(modifier.name);
			    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
			    requires.forEach(function (dep) {
			      if (!visited.has(dep)) {
			        var depModifier = map.get(dep);

			        if (depModifier) {
			          sort(depModifier);
			        }
			      }
			    });
			    result.push(modifier);
			  }

			  modifiers.forEach(function (modifier) {
			    if (!visited.has(modifier.name)) {
			      // check for visited object
			      sort(modifier);
			    }
			  });
			  return result;
			}

			function orderModifiers(modifiers) {
			  // order based on dependencies
			  var orderedModifiers = order(modifiers); // order based on phase

			  return modifierPhases.reduce(function (acc, phase) {
			    return acc.concat(orderedModifiers.filter(function (modifier) {
			      return modifier.phase === phase;
			    }));
			  }, []);
			}

			function debounce$1(fn) {
			  var pending;
			  return function () {
			    if (!pending) {
			      pending = new Promise(function (resolve) {
			        Promise.resolve().then(function () {
			          pending = undefined;
			          resolve(fn());
			        });
			      });
			    }

			    return pending;
			  };
			}

			function format(str) {
			  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			    args[_key - 1] = arguments[_key];
			  }

			  return [].concat(args).reduce(function (p, c) {
			    return p.replace(/%s/, c);
			  }, str);
			}

			var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
			var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
			var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
			function validateModifiers(modifiers) {
			  modifiers.forEach(function (modifier) {
			    [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
			    .filter(function (value, index, self) {
			      return self.indexOf(value) === index;
			    }).forEach(function (key) {
			      switch (key) {
			        case 'name':
			          if (typeof modifier.name !== 'string') {
			            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
			          }

			          break;

			        case 'enabled':
			          if (typeof modifier.enabled !== 'boolean') {
			            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
			          }

			          break;

			        case 'phase':
			          if (modifierPhases.indexOf(modifier.phase) < 0) {
			            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
			          }

			          break;

			        case 'fn':
			          if (typeof modifier.fn !== 'function') {
			            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
			          }

			          break;

			        case 'effect':
			          if (modifier.effect != null && typeof modifier.effect !== 'function') {
			            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
			          }

			          break;

			        case 'requires':
			          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
			            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
			          }

			          break;

			        case 'requiresIfExists':
			          if (!Array.isArray(modifier.requiresIfExists)) {
			            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
			          }

			          break;

			        case 'options':
			        case 'data':
			          break;

			        default:
			          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
			            return "\"" + s + "\"";
			          }).join(', ') + "; but \"" + key + "\" was provided.");
			      }

			      modifier.requires && modifier.requires.forEach(function (requirement) {
			        if (modifiers.find(function (mod) {
			          return mod.name === requirement;
			        }) == null) {
			          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
			        }
			      });
			    });
			  });
			}

			function uniqueBy(arr, fn) {
			  var identifiers = new Set();
			  return arr.filter(function (item) {
			    var identifier = fn(item);

			    if (!identifiers.has(identifier)) {
			      identifiers.add(identifier);
			      return true;
			    }
			  });
			}

			function mergeByName(modifiers) {
			  var merged = modifiers.reduce(function (merged, current) {
			    var existing = merged[current.name];
			    merged[current.name] = existing ? Object.assign({}, existing, current, {
			      options: Object.assign({}, existing.options, current.options),
			      data: Object.assign({}, existing.data, current.data)
			    }) : current;
			    return merged;
			  }, {}); // IE11 does not support Object.values

			  return Object.keys(merged).map(function (key) {
			    return merged[key];
			  });
			}

			var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
			var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
			var DEFAULT_OPTIONS = {
			  placement: 'bottom',
			  modifiers: [],
			  strategy: 'absolute'
			};

			function areValidElements() {
			  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
			    args[_key] = arguments[_key];
			  }

			  return !args.some(function (element) {
			    return !(element && typeof element.getBoundingClientRect === 'function');
			  });
			}

			function popperGenerator(generatorOptions) {
			  if (generatorOptions === void 0) {
			    generatorOptions = {};
			  }

			  var _generatorOptions = generatorOptions,
			      _generatorOptions$def = _generatorOptions.defaultModifiers,
			      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
			      _generatorOptions$def2 = _generatorOptions.defaultOptions,
			      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
			  return function createPopper(reference, popper, options) {
			    if (options === void 0) {
			      options = defaultOptions;
			    }

			    var state = {
			      placement: 'bottom',
			      orderedModifiers: [],
			      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
			      modifiersData: {},
			      elements: {
			        reference: reference,
			        popper: popper
			      },
			      attributes: {},
			      styles: {}
			    };
			    var effectCleanupFns = [];
			    var isDestroyed = false;
			    var instance = {
			      state: state,
			      setOptions: function setOptions(setOptionsAction) {
			        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
			        cleanupModifierEffects();
			        state.options = Object.assign({}, defaultOptions, state.options, options);
			        state.scrollParents = {
			          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
			          popper: listScrollParents(popper)
			        }; // Orders the modifiers based on their dependencies and `phase`
			        // properties

			        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

			        state.orderedModifiers = orderedModifiers.filter(function (m) {
			          return m.enabled;
			        }); // Validate the provided modifiers so that the consumer will get warned
			        // if one of the modifiers is invalid for any reason

			        if (process.env.NODE_ENV !== "production") {
			          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
			            var name = _ref.name;
			            return name;
			          });
			          validateModifiers(modifiers);

			          if (getBasePlacement(state.options.placement) === auto) {
			            var flipModifier = state.orderedModifiers.find(function (_ref2) {
			              var name = _ref2.name;
			              return name === 'flip';
			            });

			            if (!flipModifier) {
			              console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
			            }
			          }

			          var _getComputedStyle = getComputedStyle(popper),
			              marginTop = _getComputedStyle.marginTop,
			              marginRight = _getComputedStyle.marginRight,
			              marginBottom = _getComputedStyle.marginBottom,
			              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
			          // cause bugs with positioning, so we'll warn the consumer


			          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
			            return parseFloat(margin);
			          })) {
			            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
			          }
			        }

			        runModifierEffects();
			        return instance.update();
			      },
			      // Sync update – it will always be executed, even if not necessary. This
			      // is useful for low frequency updates where sync behavior simplifies the
			      // logic.
			      // For high frequency updates (e.g. `resize` and `scroll` events), always
			      // prefer the async Popper#update method
			      forceUpdate: function forceUpdate() {
			        if (isDestroyed) {
			          return;
			        }

			        var _state$elements = state.elements,
			            reference = _state$elements.reference,
			            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
			        // anymore

			        if (!areValidElements(reference, popper)) {
			          if (process.env.NODE_ENV !== "production") {
			            console.error(INVALID_ELEMENT_ERROR);
			          }

			          return;
			        } // Store the reference and popper rects to be read by modifiers


			        state.rects = {
			          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
			          popper: getLayoutRect(popper)
			        }; // Modifiers have the ability to reset the current update cycle. The
			        // most common use case for this is the `flip` modifier changing the
			        // placement, which then needs to re-run all the modifiers, because the
			        // logic was previously ran for the previous placement and is therefore
			        // stale/incorrect

			        state.reset = false;
			        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
			        // is filled with the initial data specified by the modifier. This means
			        // it doesn't persist and is fresh on each update.
			        // To ensure persistent data, use `${name}#persistent`

			        state.orderedModifiers.forEach(function (modifier) {
			          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
			        });
			        var __debug_loops__ = 0;

			        for (var index = 0; index < state.orderedModifiers.length; index++) {
			          if (process.env.NODE_ENV !== "production") {
			            __debug_loops__ += 1;

			            if (__debug_loops__ > 100) {
			              console.error(INFINITE_LOOP_ERROR);
			              break;
			            }
			          }

			          if (state.reset === true) {
			            state.reset = false;
			            index = -1;
			            continue;
			          }

			          var _state$orderedModifie = state.orderedModifiers[index],
			              fn = _state$orderedModifie.fn,
			              _state$orderedModifie2 = _state$orderedModifie.options,
			              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
			              name = _state$orderedModifie.name;

			          if (typeof fn === 'function') {
			            state = fn({
			              state: state,
			              options: _options,
			              name: name,
			              instance: instance
			            }) || state;
			          }
			        }
			      },
			      // Async and optimistically optimized update – it will not be executed if
			      // not necessary (debounced to run at most once-per-tick)
			      update: debounce$1(function () {
			        return new Promise(function (resolve) {
			          instance.forceUpdate();
			          resolve(state);
			        });
			      }),
			      destroy: function destroy() {
			        cleanupModifierEffects();
			        isDestroyed = true;
			      }
			    };

			    if (!areValidElements(reference, popper)) {
			      if (process.env.NODE_ENV !== "production") {
			        console.error(INVALID_ELEMENT_ERROR);
			      }

			      return instance;
			    }

			    instance.setOptions(options).then(function (state) {
			      if (!isDestroyed && options.onFirstUpdate) {
			        options.onFirstUpdate(state);
			      }
			    }); // Modifiers have the ability to execute arbitrary code before the first
			    // update cycle runs. They will be executed in the same order as the update
			    // cycle. This is useful when a modifier adds some persistent data that
			    // other modifiers need to use, but the modifier is run after the dependent
			    // one.

			    function runModifierEffects() {
			      state.orderedModifiers.forEach(function (_ref3) {
			        var name = _ref3.name,
			            _ref3$options = _ref3.options,
			            options = _ref3$options === void 0 ? {} : _ref3$options,
			            effect = _ref3.effect;

			        if (typeof effect === 'function') {
			          var cleanupFn = effect({
			            state: state,
			            name: name,
			            instance: instance,
			            options: options
			          });

			          var noopFn = function noopFn() {};

			          effectCleanupFns.push(cleanupFn || noopFn);
			        }
			      });
			    }

			    function cleanupModifierEffects() {
			      effectCleanupFns.forEach(function (fn) {
			        return fn();
			      });
			      effectCleanupFns = [];
			    }

			    return instance;
			  };
			}

			var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
			var createPopper = /*#__PURE__*/popperGenerator({
			  defaultModifiers: defaultModifiers
			}); // eslint-disable-next-line import/no-unused-modules

			const arrowModifier = {
			  name: "arrow",
			  options: {
			    element: "[data-popper-arrow]"
			  }
			};
			class Popper2 extends React__default.Component {
			  constructor(props) {
			    super(props);
			    this.popperContainer = document.createElement("div");
			    this.instance = null;
			    this.delayTimer = null;
			    this.createPopperInstance = () => {
			      if (!this.props.reference.current || !this.state.popVisible) {
			        return;
			      }
			      this.instance = createPopper(this.props.reference.current, this.popperContainer, {
			        placement: this.props.placement || "bottom",
			        modifiers: (this.props.modifiers || []).concat(arrowModifier)
			      });
			    };
			    this.onTargetFocused = () => {
			      this.setPopVisible(true);
			    };
			    this.onTargetBlur = () => {
			      this.delaySetPopVisible(false, 0.15);
			    };
			    this.onTargetClick = () => {
			      this.setPopVisible(!this.state.popVisible);
			    };
			    this.onPopupMouseEnter = () => {
			      this.clearDelayTimer();
			    };
			    this.onPopupMouseLeave = () => {
			      this.delaySetPopVisible(false, 0.1);
			    };
			    this.onMouseLeave = () => {
			      this.delaySetPopVisible(false, 0.1);
			    };
			    this.onMouseEnter = () => {
			      this.delaySetPopVisible(true, 0);
			    };
			    this.onDocumentClick = (e) => {
			      if (!this.props.reference.current || this.popperContainer.contains(e.target) || this.props.reference.current.contains(e.target) || this.props.reference.current === e.target) {
			        return true;
			      }
			      this.close();
			      return true;
			    };
			    this.handleClosePopper = () => {
			      this.close();
			    };
			    this.close = () => {
			      this.setPopVisible(false);
			    };
			    this.setPopVisible = (popVisible) => {
			      this.setState({ popVisible });
			    };
			    const { trigger = "click", theme = "light", className } = props;
			    const classNameList = ["popper-container", `popper-container--${theme}`];
			    className && classNameList.push(className);
			    this.trigger = trigger;
			    this.popperContainer.classList.add(...classNameList);
			    if (props.enableArrow) {
			      const arrowEle = document.createElement("div");
			      arrowEle.setAttribute("data-popper-arrow", "");
			      this.popperContainer.append(arrowEle);
			    }
			    this.state = {
			      popVisible: this.trigger === "forever"
			    };
			  }
			  componentDidMount() {
			    this.appendContainer();
			    this.bindEventsOnReference();
			    this.createPopperInstance();
			  }
			  componentDidUpdate(prevProps, prevState) {
			    var _a, _b;
			    const { popVisible } = this.state;
			    const { popVisible: prevPopVisible } = prevState;
			    if (popVisible) {
			      this.bindEventsOnPopper();
			    } else {
			      this.unbindEventsOnPopper();
			    }
			    if (popVisible !== prevPopVisible) {
			      (_b = (_a = this.props).onVisibilityChange) == null ? void 0 : _b.call(_a, popVisible);
			    }
			    this.createPopperInstance();
			  }
			  componentWillUnmount() {
			    this.cleanUp();
			    this.popperContainer.remove();
			  }
			  bindEventsOnReference() {
			    if (!this.props.reference.current || this.trigger === "forever") {
			      return;
			    }
			    const referenceEle = this.props.reference.current;
			    if (this.trigger === "hover") {
			      referenceEle.addEventListener("mouseenter", this.onMouseEnter);
			      referenceEle.addEventListener("mouseleave", this.onMouseLeave);
			    }
			    if (this.trigger === "focus") {
			      referenceEle.addEventListener("focus", this.onTargetFocused);
			      referenceEle.addEventListener("blur", this.onTargetBlur);
			    } else {
			      referenceEle.addEventListener("click", this.onTargetClick);
			    }
			  }
			  bindEventsOnPopper() {
			    if (this.trigger === "hover" && this.popperContainer) {
			      this.popperContainer.addEventListener("mouseenter", this.onPopupMouseEnter);
			      this.popperContainer.addEventListener("mouseleave", this.onPopupMouseLeave);
			    }
			    if (this.trigger !== "forever") {
			      document.documentElement.addEventListener("click", this.onDocumentClick);
			    }
			  }
			  unbindEventsOnPopper() {
			    if (this.trigger === "hover" && this.popperContainer) {
			      this.popperContainer.removeEventListener("mouseenter", this.onPopupMouseEnter);
			      this.popperContainer.removeEventListener("mouseleave", this.onPopupMouseLeave);
			    }
			    document.documentElement.removeEventListener("click", this.onDocumentClick);
			  }
			  appendContainer() {
			    document.body.appendChild(this.popperContainer);
			  }
			  get visible() {
			    return this.state.popVisible;
			  }
			  delaySetPopVisible(visible, delaySeconds) {
			    const delay = delaySeconds * 1e3;
			    this.clearDelayTimer();
			    this.delayTimer = window.setTimeout(() => {
			      this.setPopVisible(visible);
			      this.clearDelayTimer();
			    }, delay);
			  }
			  clearDelayTimer() {
			    if (this.delayTimer) {
			      clearTimeout(this.delayTimer);
			      this.delayTimer = null;
			    }
			  }
			  cleanUp() {
			    var _a;
			    (_a = this.instance) == null ? void 0 : _a.destroy();
			  }
			  render() {
			    if (!this.props.reference.current || !this.state.popVisible) {
			      this.cleanUp();
			      return null;
			    }
			    return ReactDOM.createPortal(this.props.children, this.popperContainer);
			  }
			} exports('Popper', Popper2);

			var css$6 = ".qxp-tooltip-container {\n  z-index: 100;\n}\n.qxp-tooltip-container .qxp-ui-tooltip {\n  border-radius: 8px;\n}\n.qxp-tooltip-container .qxp-ui-tooltip .qxp-ui-tooltip-label {\n  color: #fff;\n  padding: 8px 16px;\n}\n.qxp-tooltip-container [data-popper-arrow]::before {\n  background-color: var(--gray-700);\n}\n.qxp-tooltip-container[data-popper-placement^=top] .qxp-tooltip-arrow {\n  bottom: -4px;\n}\n.qxp-tooltip-container[data-popper-placement^=bottom] .qxp-tooltip-arrow {\n  top: -4px;\n}\n.qxp-tooltip-container[data-popper-placement^=left] .qxp-tooltip-arrow {\n  right: -4px;\n}\n.qxp-tooltip-container[data-popper-placement^=right] .qxp-tooltip-arrow {\n  left: -4px;\n}";
			n$3(css$6,{});

			function Tip({
			  className,
			  style,
			  label,
			  labelClassName
			}) {
			  return /* @__PURE__ */ React__default.createElement("div", {
			    style,
			    className: cs("qxp-ui-tooltip bg-gray-700 cursor-default", className),
			    onClick: (e) => e.stopPropagation()
			  }, /* @__PURE__ */ React__default.createElement("div", {
			    className: "qxp-tooltip-arrow",
			    "data-popper-arrow": true
			  }), /* @__PURE__ */ React__default.createElement("div", {
			    className: cs("qxp-ui-tooltip-label", labelClassName)
			  }, label));
			}

			var __defProp$4 = Object.defineProperty;
			var __getOwnPropSymbols$3 = Object.getOwnPropertySymbols;
			var __hasOwnProp$3 = Object.prototype.hasOwnProperty;
			var __propIsEnum$3 = Object.prototype.propertyIsEnumerable;
			var __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
			var __spreadValues$3 = (a, b) => {
			  for (var prop in b || (b = {}))
			    if (__hasOwnProp$3.call(b, prop))
			      __defNormalProp$3(a, prop, b[prop]);
			  if (__getOwnPropSymbols$3)
			    for (var prop of __getOwnPropSymbols$3(b)) {
			      if (__propIsEnum$3.call(b, prop))
			        __defNormalProp$3(a, prop, b[prop]);
			    }
			  return a;
			};
			var __objRest$2 = (source, exclude) => {
			  var target = {};
			  for (var prop in source)
			    if (__hasOwnProp$3.call(source, prop) && exclude.indexOf(prop) < 0)
			      target[prop] = source[prop];
			  if (source != null && __getOwnPropSymbols$3)
			    for (var prop of __getOwnPropSymbols$3(source)) {
			      if (exclude.indexOf(prop) < 0 && __propIsEnum$3.call(source, prop))
			        target[prop] = source[prop];
			    }
			  return target;
			};
			const modifiers$1 = [
			  {
			    name: "offset",
			    options: {
			      offset: [0, 5]
			    }
			  }
			];
			function ToolTip(props) {
			  const _a = props, {
			    children,
			    inline,
			    always,
			    position
			  } = _a, otp = __objRest$2(_a, [
			    "children",
			    "inline",
			    "always",
			    "position"
			  ]);
			  const popperRef = useRef(null);
			  const reference = useRef(null);
			  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, cloneElement(children, { ref: reference }), /* @__PURE__ */ React__default.createElement(Popper2, {
			    ref: popperRef,
			    reference,
			    className: "qxp-tooltip-container",
			    placement: position || "bottom-start",
			    modifiers: modifiers$1,
			    trigger: "hover"
			  }, /* @__PURE__ */ React__default.createElement(Tip, __spreadValues$3({}, otp))));
			}

			function throttle$1(wait = 1e3) {
			  return function _throttle(_, __, descriptor) {
			    let canRun = true;
			    const originalMethod = descriptor.value;
			    descriptor.value = function(...args) {
			      if (!canRun) {
			        return;
			      }
			      canRun = false;
			      window.setTimeout(() => {
			        originalMethod.call(this, ...args);
			        canRun = true;
			      }, wait);
			    };
			    return descriptor;
			  };
			}

			var __defProp$3 = Object.defineProperty;
			var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
			var __decorateClass = (decorators, target, key, kind) => {
			  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
			  for (var i = decorators.length - 1, decorator; i >= 0; i--)
			    if (decorator = decorators[i])
			      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
			  if (kind && result)
			    __defProp$3(target, key, result);
			  return result;
			};
			class Toast {
			  constructor() {
			    this.close = (e) => {
			      var _a;
			      let curNotifyElement;
			      if (e instanceof Event) {
			        const closeElement = e.currentTarget;
			        curNotifyElement = closeElement.parentElement;
			        while (!curNotifyElement.classList.contains("toast")) {
			          curNotifyElement = curNotifyElement.parentElement;
			        }
			      } else if (e instanceof HTMLElement) {
			        curNotifyElement = e;
			      } else {
			        curNotifyElement = this.notifyInstances[0];
			      }
			      const curNotifyElementIndex = this.notifyInstances.findIndex((element) => element === curNotifyElement);
			      const notifyInstances = this.notifyInstances.slice(curNotifyElementIndex + 1);
			      this.notifyInstances.splice(curNotifyElementIndex, 1);
			      (_a = curNotifyElement.parentElement) == null ? void 0 : _a.removeChild(curNotifyElement);
			      notifyInstances.forEach((element) => {
			        const top = parseInt(element.style.top);
			        if (top - 60 >= 80) {
			          element.style.top = `${top - 60}px`;
			        }
			      });
			    };
			    this.duration = 3e3;
			    this.element = document.body;
			    this.element.style.position = "relative";
			    this.notifyInstances = [];
			    const style = document.createElement("style");
			    style.innerHTML = `
      .toast {
        position: absolute;
        top: 80px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        flex-flow: row nowrap;
        justify-content: space-between;
        align-items: center;
        padding: 7px 16px;
        box-shadow: 0px 8px 24px 4px rgba(148, 163, 184, 0.25);
        border-radius: 4px 12px 12px 12px;
        transition: all .3s ease;
        animation: show 1s ease forwards;
        z-index: 40;
      }

      @keyframes show {
        0% {
          transform: rotateX(90deg) translateX(-50%);
        }
        100% {
          transform: rotateX(0deg) translateX(-50%);
        }
      }

      .toast .message-info {
        font-size: 14px;
        line-height: 22px;
      }

      .toast .close {
        margin-left: 64px;
        cursor: pointer;
        color: #64748B;
        font-size: 20px;
        display: flex;
        align-items: center;
      }

      .toast.error {
        background: #FEF2F2;
        border: 1px solid #DC2626;
        color: #DC2626;
      }

      .toast.info {
        background: #F0FDF4;;
        border: 1px solid #16A34A;
        color: #16A34A;
      }
    `;
			    document.head.appendChild(style);
			    window.closeNotify = this.close;
			  }
			  success(message, options) {
			    this.toast("info", message, options);
			  }
			  error(message, options) {
			    this.toast("error", message, options);
			  }
			  setDuration(duration) {
			    this.duration = duration;
			  }
			  setRoot(element) {
			    this.element = element;
			  }
			  getTemplate(type, message, closeable) {
			    return `
      <div class='toast ${type}'>
        <span class='message-info'>${message}</span>
        ${closeable ? `
          <span class='close' onClick='closeNotify(event);'>
            <svg xmlns='http://www.w3.org/2000/svg' height='24' viewBox='0 0 24 24' width='24px' fill='#64748B'><path d='M0 0h24v24H0z' fill='none'/><path d='M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z'/></svg>
          </span>
        ` : ""}
      </div>
    `;
			  }
			  toast(type, message, options) {
			    let msg = message;
			    if (msg instanceof Error) {
			      msg = msg.message;
			    } else if (typeof msg !== "string") {
			      msg = String(msg);
			    }
			    this.element.insertAdjacentHTML("beforeend", this.getTemplate(type, msg, (options == null ? void 0 : options.duration) === -1));
			    const element = this.element.lastElementChild;
			    if (!element) {
			      return;
			    }
			    if (this.notifyInstances.length) {
			      element.style.top = `${this.notifyInstances.length * 60 + 80}px`;
			    }
			    this.notifyInstances.push(element);
			    if ((options == null ? void 0 : options.duration) === -1) {
			      return;
			    }
			    setTimeout(() => this.close(element), (options == null ? void 0 : options.duration) || this.duration);
			  }
			}
			__decorateClass([
			  throttle$1(300)
			], Toast.prototype, "toast", 1);
			var index$1 = exports('toast', new Toast());

			var reactIs$3 = {exports: {}};

			var reactIs_production_min$2 = {};

			/** @license React v17.0.2
			 * react-is.production.min.js
			 *
			 * Copyright (c) Facebook, Inc. and its affiliates.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */
			var b$3=60103,c$2=60106,d$2=60107,e$2=60108,f$2=60114,g$3=60109,h$2=60110,k$3=60112,l$2=60113,m$2=60120,n$2=60115,p$2=60116,q$3=60121,r$2=60122,u=60117,v$3=60129,w$3=60131;
			if("function"===typeof Symbol&&Symbol.for){var x$3=Symbol.for;b$3=x$3("react.element");c$2=x$3("react.portal");d$2=x$3("react.fragment");e$2=x$3("react.strict_mode");f$2=x$3("react.profiler");g$3=x$3("react.provider");h$2=x$3("react.context");k$3=x$3("react.forward_ref");l$2=x$3("react.suspense");m$2=x$3("react.suspense_list");n$2=x$3("react.memo");p$2=x$3("react.lazy");q$3=x$3("react.block");r$2=x$3("react.server.block");u=x$3("react.fundamental");v$3=x$3("react.debug_trace_mode");w$3=x$3("react.legacy_hidden");}
			function y$2(a){if("object"===typeof a&&null!==a){var t=a.$$typeof;switch(t){case b$3:switch(a=a.type,a){case d$2:case f$2:case e$2:case l$2:case m$2:return a;default:switch(a=a&&a.$$typeof,a){case h$2:case k$3:case p$2:case n$2:case g$3:return a;default:return t}}case c$2:return t}}}var z$3=g$3,A$3=b$3,B$1=k$3,C=d$2,D$1=p$2,E$1=n$2,F$1=c$2,G$1=f$2,H$1=e$2,I$1=l$2;reactIs_production_min$2.ContextConsumer=h$2;reactIs_production_min$2.ContextProvider=z$3;reactIs_production_min$2.Element=A$3;reactIs_production_min$2.ForwardRef=B$1;reactIs_production_min$2.Fragment=C;reactIs_production_min$2.Lazy=D$1;reactIs_production_min$2.Memo=E$1;reactIs_production_min$2.Portal=F$1;reactIs_production_min$2.Profiler=G$1;reactIs_production_min$2.StrictMode=H$1;
			reactIs_production_min$2.Suspense=I$1;reactIs_production_min$2.isAsyncMode=function(){return !1};reactIs_production_min$2.isConcurrentMode=function(){return !1};reactIs_production_min$2.isContextConsumer=function(a){return y$2(a)===h$2};reactIs_production_min$2.isContextProvider=function(a){return y$2(a)===g$3};reactIs_production_min$2.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===b$3};reactIs_production_min$2.isForwardRef=function(a){return y$2(a)===k$3};reactIs_production_min$2.isFragment=function(a){return y$2(a)===d$2};reactIs_production_min$2.isLazy=function(a){return y$2(a)===p$2};reactIs_production_min$2.isMemo=function(a){return y$2(a)===n$2};
			reactIs_production_min$2.isPortal=function(a){return y$2(a)===c$2};reactIs_production_min$2.isProfiler=function(a){return y$2(a)===f$2};reactIs_production_min$2.isStrictMode=function(a){return y$2(a)===e$2};reactIs_production_min$2.isSuspense=function(a){return y$2(a)===l$2};reactIs_production_min$2.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===d$2||a===f$2||a===v$3||a===e$2||a===l$2||a===m$2||a===w$3||"object"===typeof a&&null!==a&&(a.$$typeof===p$2||a.$$typeof===n$2||a.$$typeof===g$3||a.$$typeof===h$2||a.$$typeof===k$3||a.$$typeof===u||a.$$typeof===q$3||a[0]===r$2)?!0:!1};
			reactIs_production_min$2.typeOf=y$2;

			var reactIs_development$2 = {};

			/** @license React v17.0.2
			 * react-is.development.js
			 *
			 * Copyright (c) Facebook, Inc. and its affiliates.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */

			if (process.env.NODE_ENV !== "production") {
			  (function() {

			// ATTENTION
			// When adding new symbols to this file,
			// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
			// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
			// nor polyfill, then a plain number is used for performance.
			var REACT_ELEMENT_TYPE = 0xeac7;
			var REACT_PORTAL_TYPE = 0xeaca;
			var REACT_FRAGMENT_TYPE = 0xeacb;
			var REACT_STRICT_MODE_TYPE = 0xeacc;
			var REACT_PROFILER_TYPE = 0xead2;
			var REACT_PROVIDER_TYPE = 0xeacd;
			var REACT_CONTEXT_TYPE = 0xeace;
			var REACT_FORWARD_REF_TYPE = 0xead0;
			var REACT_SUSPENSE_TYPE = 0xead1;
			var REACT_SUSPENSE_LIST_TYPE = 0xead8;
			var REACT_MEMO_TYPE = 0xead3;
			var REACT_LAZY_TYPE = 0xead4;
			var REACT_BLOCK_TYPE = 0xead9;
			var REACT_SERVER_BLOCK_TYPE = 0xeada;
			var REACT_FUNDAMENTAL_TYPE = 0xead5;
			var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
			var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

			if (typeof Symbol === 'function' && Symbol.for) {
			  var symbolFor = Symbol.for;
			  REACT_ELEMENT_TYPE = symbolFor('react.element');
			  REACT_PORTAL_TYPE = symbolFor('react.portal');
			  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
			  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
			  REACT_PROFILER_TYPE = symbolFor('react.profiler');
			  REACT_PROVIDER_TYPE = symbolFor('react.provider');
			  REACT_CONTEXT_TYPE = symbolFor('react.context');
			  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
			  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
			  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
			  REACT_MEMO_TYPE = symbolFor('react.memo');
			  REACT_LAZY_TYPE = symbolFor('react.lazy');
			  REACT_BLOCK_TYPE = symbolFor('react.block');
			  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
			  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
			  symbolFor('react.scope');
			  symbolFor('react.opaque.id');
			  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
			  symbolFor('react.offscreen');
			  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
			}

			// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

			var enableScopeAPI = false; // Experimental Create Event Handle API.

			function isValidElementType(type) {
			  if (typeof type === 'string' || typeof type === 'function') {
			    return true;
			  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


			  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
			    return true;
			  }

			  if (typeof type === 'object' && type !== null) {
			    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
			      return true;
			    }
			  }

			  return false;
			}

			function typeOf(object) {
			  if (typeof object === 'object' && object !== null) {
			    var $$typeof = object.$$typeof;

			    switch ($$typeof) {
			      case REACT_ELEMENT_TYPE:
			        var type = object.type;

			        switch (type) {
			          case REACT_FRAGMENT_TYPE:
			          case REACT_PROFILER_TYPE:
			          case REACT_STRICT_MODE_TYPE:
			          case REACT_SUSPENSE_TYPE:
			          case REACT_SUSPENSE_LIST_TYPE:
			            return type;

			          default:
			            var $$typeofType = type && type.$$typeof;

			            switch ($$typeofType) {
			              case REACT_CONTEXT_TYPE:
			              case REACT_FORWARD_REF_TYPE:
			              case REACT_LAZY_TYPE:
			              case REACT_MEMO_TYPE:
			              case REACT_PROVIDER_TYPE:
			                return $$typeofType;

			              default:
			                return $$typeof;
			            }

			        }

			      case REACT_PORTAL_TYPE:
			        return $$typeof;
			    }
			  }

			  return undefined;
			}
			var ContextConsumer = REACT_CONTEXT_TYPE;
			var ContextProvider = REACT_PROVIDER_TYPE;
			var Element = REACT_ELEMENT_TYPE;
			var ForwardRef = REACT_FORWARD_REF_TYPE;
			var Fragment = REACT_FRAGMENT_TYPE;
			var Lazy = REACT_LAZY_TYPE;
			var Memo = REACT_MEMO_TYPE;
			var Portal = REACT_PORTAL_TYPE;
			var Profiler = REACT_PROFILER_TYPE;
			var StrictMode = REACT_STRICT_MODE_TYPE;
			var Suspense = REACT_SUSPENSE_TYPE;
			var hasWarnedAboutDeprecatedIsAsyncMode = false;
			var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

			function isAsyncMode(object) {
			  {
			    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
			      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

			      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
			    }
			  }

			  return false;
			}
			function isConcurrentMode(object) {
			  {
			    if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
			      hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

			      console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
			    }
			  }

			  return false;
			}
			function isContextConsumer(object) {
			  return typeOf(object) === REACT_CONTEXT_TYPE;
			}
			function isContextProvider(object) {
			  return typeOf(object) === REACT_PROVIDER_TYPE;
			}
			function isElement(object) {
			  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
			}
			function isForwardRef(object) {
			  return typeOf(object) === REACT_FORWARD_REF_TYPE;
			}
			function isFragment(object) {
			  return typeOf(object) === REACT_FRAGMENT_TYPE;
			}
			function isLazy(object) {
			  return typeOf(object) === REACT_LAZY_TYPE;
			}
			function isMemo(object) {
			  return typeOf(object) === REACT_MEMO_TYPE;
			}
			function isPortal(object) {
			  return typeOf(object) === REACT_PORTAL_TYPE;
			}
			function isProfiler(object) {
			  return typeOf(object) === REACT_PROFILER_TYPE;
			}
			function isStrictMode(object) {
			  return typeOf(object) === REACT_STRICT_MODE_TYPE;
			}
			function isSuspense(object) {
			  return typeOf(object) === REACT_SUSPENSE_TYPE;
			}

			reactIs_development$2.ContextConsumer = ContextConsumer;
			reactIs_development$2.ContextProvider = ContextProvider;
			reactIs_development$2.Element = Element;
			reactIs_development$2.ForwardRef = ForwardRef;
			reactIs_development$2.Fragment = Fragment;
			reactIs_development$2.Lazy = Lazy;
			reactIs_development$2.Memo = Memo;
			reactIs_development$2.Portal = Portal;
			reactIs_development$2.Profiler = Profiler;
			reactIs_development$2.StrictMode = StrictMode;
			reactIs_development$2.Suspense = Suspense;
			reactIs_development$2.isAsyncMode = isAsyncMode;
			reactIs_development$2.isConcurrentMode = isConcurrentMode;
			reactIs_development$2.isContextConsumer = isContextConsumer;
			reactIs_development$2.isContextProvider = isContextProvider;
			reactIs_development$2.isElement = isElement;
			reactIs_development$2.isForwardRef = isForwardRef;
			reactIs_development$2.isFragment = isFragment;
			reactIs_development$2.isLazy = isLazy;
			reactIs_development$2.isMemo = isMemo;
			reactIs_development$2.isPortal = isPortal;
			reactIs_development$2.isProfiler = isProfiler;
			reactIs_development$2.isStrictMode = isStrictMode;
			reactIs_development$2.isSuspense = isSuspense;
			reactIs_development$2.isValidElementType = isValidElementType;
			reactIs_development$2.typeOf = typeOf;
			  })();
			}

			if (process.env.NODE_ENV === 'production') {
			  reactIs$3.exports = reactIs_production_min$2;
			} else {
			  reactIs$3.exports = reactIs_development$2;
			}

			function stylis_min (W) {
			  function M(d, c, e, h, a) {
			    for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {
			      g = e.charCodeAt(l);
			      l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);

			      if (0 === b + n + v + m) {
			        if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {
			          switch (g) {
			            case 32:
			            case 9:
			            case 59:
			            case 13:
			            case 10:
			              break;

			            default:
			              f += e.charAt(l);
			          }

			          g = 59;
			        }

			        switch (g) {
			          case 123:
			            f = f.trim();
			            q = f.charCodeAt(0);
			            k = 1;

			            for (t = ++l; l < B;) {
			              switch (g = e.charCodeAt(l)) {
			                case 123:
			                  k++;
			                  break;

			                case 125:
			                  k--;
			                  break;

			                case 47:
			                  switch (g = e.charCodeAt(l + 1)) {
			                    case 42:
			                    case 47:
			                      a: {
			                        for (u = l + 1; u < J; ++u) {
			                          switch (e.charCodeAt(u)) {
			                            case 47:
			                              if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {
			                                l = u + 1;
			                                break a;
			                              }

			                              break;

			                            case 10:
			                              if (47 === g) {
			                                l = u + 1;
			                                break a;
			                              }

			                          }
			                        }

			                        l = u;
			                      }

			                  }

			                  break;

			                case 91:
			                  g++;

			                case 40:
			                  g++;

			                case 34:
			                case 39:
			                  for (; l++ < J && e.charCodeAt(l) !== g;) {
			                  }

			              }

			              if (0 === k) break;
			              l++;
			            }

			            k = e.substring(t, l);
			            0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));

			            switch (q) {
			              case 64:
			                0 < r && (f = f.replace(N, ''));
			                g = f.charCodeAt(1);

			                switch (g) {
			                  case 100:
			                  case 109:
			                  case 115:
			                  case 45:
			                    r = c;
			                    break;

			                  default:
			                    r = O;
			                }

			                k = M(c, r, k, g, a + 1);
			                t = k.length;
			                0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));
			                if (0 < t) switch (g) {
			                  case 115:
			                    f = f.replace(da, ea);

			                  case 100:
			                  case 109:
			                  case 45:
			                    k = f + '{' + k + '}';
			                    break;

			                  case 107:
			                    f = f.replace(fa, '$1 $2');
			                    k = f + '{' + k + '}';
			                    k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;
			                    break;

			                  default:
			                    k = f + k, 112 === h && (k = (p += k, ''));
			                } else k = '';
			                break;

			              default:
			                k = M(c, X(c, f, I), k, h, a + 1);
			            }

			            F += k;
			            k = I = r = u = q = 0;
			            f = '';
			            g = e.charCodeAt(++l);
			            break;

			          case 125:
			          case 59:
			            f = (0 < r ? f.replace(N, '') : f).trim();
			            if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\x00\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
			              case 0:
			                break;

			              case 64:
			                if (105 === g || 99 === g) {
			                  G += f + e.charAt(l);
			                  break;
			                }

			              default:
			                58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));
			            }
			            I = r = u = q = 0;
			            f = '';
			            g = e.charCodeAt(++l);
			        }
			      }

			      switch (g) {
			        case 13:
			        case 10:
			          47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\x00');
			          0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
			          z = 1;
			          D++;
			          break;

			        case 59:
			        case 125:
			          if (0 === b + n + v + m) {
			            z++;
			            break;
			          }

			        default:
			          z++;
			          y = e.charAt(l);

			          switch (g) {
			            case 9:
			            case 32:
			              if (0 === n + m + b) switch (x) {
			                case 44:
			                case 58:
			                case 9:
			                case 32:
			                  y = '';
			                  break;

			                default:
			                  32 !== g && (y = ' ');
			              }
			              break;

			            case 0:
			              y = '\\0';
			              break;

			            case 12:
			              y = '\\f';
			              break;

			            case 11:
			              y = '\\v';
			              break;

			            case 38:
			              0 === n + b + m && (r = I = 1, y = '\f' + y);
			              break;

			            case 108:
			              if (0 === n + b + m + E && 0 < u) switch (l - u) {
			                case 2:
			                  112 === x && 58 === e.charCodeAt(l - 3) && (E = x);

			                case 8:
			                  111 === K && (E = K);
			              }
			              break;

			            case 58:
			              0 === n + b + m && (u = l);
			              break;

			            case 44:
			              0 === b + v + n + m && (r = 1, y += '\r');
			              break;

			            case 34:
			            case 39:
			              0 === b && (n = n === g ? 0 : 0 === n ? g : n);
			              break;

			            case 91:
			              0 === n + b + v && m++;
			              break;

			            case 93:
			              0 === n + b + v && m--;
			              break;

			            case 41:
			              0 === n + b + m && v--;
			              break;

			            case 40:
			              if (0 === n + b + m) {
			                if (0 === q) switch (2 * x + 3 * K) {
			                  case 533:
			                    break;

			                  default:
			                    q = 1;
			                }
			                v++;
			              }

			              break;

			            case 64:
			              0 === b + v + n + m + u + k && (k = 1);
			              break;

			            case 42:
			            case 47:
			              if (!(0 < n + m + v)) switch (b) {
			                case 0:
			                  switch (2 * g + 3 * e.charCodeAt(l + 1)) {
			                    case 235:
			                      b = 47;
			                      break;

			                    case 220:
			                      t = l, b = 42;
			                  }

			                  break;

			                case 42:
			                  47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);
			              }
			          }

			          0 === b && (f += y);
			      }

			      K = x;
			      x = g;
			      l++;
			    }

			    t = p.length;

			    if (0 < t) {
			      r = c;
			      if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;
			      p = r.join(',') + '{' + p + '}';

			      if (0 !== w * E) {
			        2 !== w || L(p, 2) || (E = 0);

			        switch (E) {
			          case 111:
			            p = p.replace(ha, ':-moz-$1') + p;
			            break;

			          case 112:
			            p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;
			        }

			        E = 0;
			      }
			    }

			    return G + p + F;
			  }

			  function X(d, c, e) {
			    var h = c.trim().split(ia);
			    c = h;
			    var a = h.length,
			        m = d.length;

			    switch (m) {
			      case 0:
			      case 1:
			        var b = 0;

			        for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {
			          c[b] = Z(d, c[b], e).trim();
			        }

			        break;

			      default:
			        var v = b = 0;

			        for (c = []; b < a; ++b) {
			          for (var n = 0; n < m; ++n) {
			            c[v++] = Z(d[n] + ' ', h[b], e).trim();
			          }
			        }

			    }

			    return c;
			  }

			  function Z(d, c, e) {
			    var h = c.charCodeAt(0);
			    33 > h && (h = (c = c.trim()).charCodeAt(0));

			    switch (h) {
			      case 38:
			        return c.replace(F, '$1' + d.trim());

			      case 58:
			        return d.trim() + c.replace(F, '$1' + d.trim());

			      default:
			        if (0 < 1 * e && 0 < c.indexOf('\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());
			    }

			    return d + c;
			  }

			  function P(d, c, e, h) {
			    var a = d + ';',
			        m = 2 * c + 3 * e + 4 * h;

			    if (944 === m) {
			      d = a.indexOf(':', 9) + 1;
			      var b = a.substring(d, a.length - 1).trim();
			      b = a.substring(0, d).trim() + b + ';';
			      return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;
			    }

			    if (0 === w || 2 === w && !L(a, 1)) return a;

			    switch (m) {
			      case 1015:
			        return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;

			      case 951:
			        return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;

			      case 963:
			        return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;

			      case 1009:
			        if (100 !== a.charCodeAt(4)) break;

			      case 969:
			      case 942:
			        return '-webkit-' + a + a;

			      case 978:
			        return '-webkit-' + a + '-moz-' + a + a;

			      case 1019:
			      case 983:
			        return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;

			      case 883:
			        if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;
			        if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;
			        break;

			      case 932:
			        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {
			          case 103:
			            return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;

			          case 115:
			            return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;

			          case 98:
			            return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;
			        }
			        return '-webkit-' + a + '-ms-' + a + a;

			      case 964:
			        return '-webkit-' + a + '-ms-flex-' + a + a;

			      case 1023:
			        if (99 !== a.charCodeAt(8)) break;
			        b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
			        return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;

			      case 1005:
			        return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;

			      case 1e3:
			        b = a.substring(13).trim();
			        c = b.indexOf('-') + 1;

			        switch (b.charCodeAt(0) + b.charCodeAt(c)) {
			          case 226:
			            b = a.replace(G, 'tb');
			            break;

			          case 232:
			            b = a.replace(G, 'tb-rl');
			            break;

			          case 220:
			            b = a.replace(G, 'lr');
			            break;

			          default:
			            return a;
			        }

			        return '-webkit-' + a + '-ms-' + b + a;

			      case 1017:
			        if (-1 === a.indexOf('sticky', 9)) break;

			      case 975:
			        c = (a = d).length - 10;
			        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();

			        switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
			          case 203:
			            if (111 > b.charCodeAt(8)) break;

			          case 115:
			            a = a.replace(b, '-webkit-' + b) + ';' + a;
			            break;

			          case 207:
			          case 102:
			            a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;
			        }

			        return a + ';';

			      case 938:
			        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {
			          case 105:
			            return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;

			          case 115:
			            return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;

			          default:
			            return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;
			        }
			        break;

			      case 973:
			      case 989:
			        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;

			      case 931:
			      case 953:
			        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;
			        break;

			      case 962:
			        if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;
			    }

			    return a;
			  }

			  function L(d, c) {
			    var e = d.indexOf(1 === c ? ':' : '{'),
			        h = d.substring(0, 3 !== c ? e : 10);
			    e = d.substring(e + 1, d.length - 1);
			    return R(2 !== c ? h : h.replace(na, '$1'), e, c);
			  }

			  function ea(d, c) {
			    var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
			    return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';
			  }

			  function H(d, c, e, h, a, m, b, v, n, q) {
			    for (var g = 0, x = c, w; g < A; ++g) {
			      switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
			        case void 0:
			        case !1:
			        case !0:
			        case null:
			          break;

			        default:
			          x = w;
			      }
			    }

			    if (x !== c) return x;
			  }

			  function T(d) {
			    switch (d) {
			      case void 0:
			      case null:
			        A = S.length = 0;
			        break;

			      default:
			        if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {
			          T(d[c]);
			        } else Y = !!d | 0;
			    }

			    return T;
			  }

			  function U(d) {
			    d = d.prefix;
			    void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);
			    return U;
			  }

			  function B(d, c) {
			    var e = d;
			    33 > e.charCodeAt(0) && (e = e.trim());
			    V = e;
			    e = [V];

			    if (0 < A) {
			      var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
			      void 0 !== h && 'string' === typeof h && (c = h);
			    }

			    var a = M(O, e, c, 0, 0);
			    0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));
			    V = '';
			    E = 0;
			    z = D = 1;
			    return a;
			  }

			  var ca = /^\0+/g,
			      N = /[\0\r\f]/g,
			      aa = /: */g,
			      ka = /zoo|gra/,
			      ma = /([,: ])(transform)/g,
			      ia = /,\r+?/g,
			      F = /([\t\r\n ])*\f?&/g,
			      fa = /@(k\w+)\s*(\S*)\s*/,
			      Q = /::(place)/g,
			      ha = /:(read-only)/g,
			      G = /[svh]\w+-[tblr]{2}/,
			      da = /\(\s*(.*)\s*\)/g,
			      oa = /([\s\S]*?);/g,
			      ba = /-self|flex-/g,
			      na = /[^]*?(:[rp][el]a[\w-]+)[^]*/,
			      la = /stretch|:\s*\w+\-(?:conte|avail)/,
			      ja = /([^-])(image-set\()/,
			      z = 1,
			      D = 1,
			      E = 0,
			      w = 1,
			      O = [],
			      S = [],
			      A = 0,
			      R = null,
			      Y = 0,
			      V = '';
			  B.use = T;
			  B.set = U;
			  void 0 !== W && U(W);
			  return B;
			}

			var unitlessKeys = {
			  animationIterationCount: 1,
			  borderImageOutset: 1,
			  borderImageSlice: 1,
			  borderImageWidth: 1,
			  boxFlex: 1,
			  boxFlexGroup: 1,
			  boxOrdinalGroup: 1,
			  columnCount: 1,
			  columns: 1,
			  flex: 1,
			  flexGrow: 1,
			  flexPositive: 1,
			  flexShrink: 1,
			  flexNegative: 1,
			  flexOrder: 1,
			  gridRow: 1,
			  gridRowEnd: 1,
			  gridRowSpan: 1,
			  gridRowStart: 1,
			  gridColumn: 1,
			  gridColumnEnd: 1,
			  gridColumnSpan: 1,
			  gridColumnStart: 1,
			  msGridRow: 1,
			  msGridRowSpan: 1,
			  msGridColumn: 1,
			  msGridColumnSpan: 1,
			  fontWeight: 1,
			  lineHeight: 1,
			  opacity: 1,
			  order: 1,
			  orphans: 1,
			  tabSize: 1,
			  widows: 1,
			  zIndex: 1,
			  zoom: 1,
			  WebkitLineClamp: 1,
			  // SVG-related properties
			  fillOpacity: 1,
			  floodOpacity: 1,
			  stopOpacity: 1,
			  strokeDasharray: 1,
			  strokeDashoffset: 1,
			  strokeMiterlimit: 1,
			  strokeOpacity: 1,
			  strokeWidth: 1
			};

			function memoize$3(fn) {
			  var cache = {};
			  return function (arg) {
			    if (cache[arg] === undefined) cache[arg] = fn(arg);
			    return cache[arg];
			  };
			}

			var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

			var index = memoize$3(function (prop) {
			  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
			  /* o */
			  && prop.charCodeAt(1) === 110
			  /* n */
			  && prop.charCodeAt(2) < 91;
			}
			/* Z+1 */
			);

			var reactIs$2 = {exports: {}};

			var reactIs_production_min$1 = {};

			/** @license React v16.13.1
			 * react-is.production.min.js
			 *
			 * Copyright (c) Facebook, Inc. and its affiliates.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */
			var b$2="function"===typeof Symbol&&Symbol.for,c$1=b$2?Symbol.for("react.element"):60103,d$1=b$2?Symbol.for("react.portal"):60106,e$1=b$2?Symbol.for("react.fragment"):60107,f$1=b$2?Symbol.for("react.strict_mode"):60108,g$2=b$2?Symbol.for("react.profiler"):60114,h$1=b$2?Symbol.for("react.provider"):60109,k$2=b$2?Symbol.for("react.context"):60110,l$1=b$2?Symbol.for("react.async_mode"):60111,m$1=b$2?Symbol.for("react.concurrent_mode"):60111,n$1=b$2?Symbol.for("react.forward_ref"):60112,p$1=b$2?Symbol.for("react.suspense"):60113,q$2=b$2?
			Symbol.for("react.suspense_list"):60120,r$1=b$2?Symbol.for("react.memo"):60115,t$1=b$2?Symbol.for("react.lazy"):60116,v$2=b$2?Symbol.for("react.block"):60121,w$2=b$2?Symbol.for("react.fundamental"):60117,x$2=b$2?Symbol.for("react.responder"):60118,y$1=b$2?Symbol.for("react.scope"):60119;
			function z$2(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c$1:switch(a=a.type,a){case l$1:case m$1:case e$1:case g$2:case f$1:case p$1:return a;default:switch(a=a&&a.$$typeof,a){case k$2:case n$1:case t$1:case r$1:case h$1:return a;default:return u}}case d$1:return u}}}function A$2(a){return z$2(a)===m$1}reactIs_production_min$1.AsyncMode=l$1;reactIs_production_min$1.ConcurrentMode=m$1;reactIs_production_min$1.ContextConsumer=k$2;reactIs_production_min$1.ContextProvider=h$1;reactIs_production_min$1.Element=c$1;reactIs_production_min$1.ForwardRef=n$1;reactIs_production_min$1.Fragment=e$1;reactIs_production_min$1.Lazy=t$1;reactIs_production_min$1.Memo=r$1;reactIs_production_min$1.Portal=d$1;
			reactIs_production_min$1.Profiler=g$2;reactIs_production_min$1.StrictMode=f$1;reactIs_production_min$1.Suspense=p$1;reactIs_production_min$1.isAsyncMode=function(a){return A$2(a)||z$2(a)===l$1};reactIs_production_min$1.isConcurrentMode=A$2;reactIs_production_min$1.isContextConsumer=function(a){return z$2(a)===k$2};reactIs_production_min$1.isContextProvider=function(a){return z$2(a)===h$1};reactIs_production_min$1.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c$1};reactIs_production_min$1.isForwardRef=function(a){return z$2(a)===n$1};reactIs_production_min$1.isFragment=function(a){return z$2(a)===e$1};reactIs_production_min$1.isLazy=function(a){return z$2(a)===t$1};
			reactIs_production_min$1.isMemo=function(a){return z$2(a)===r$1};reactIs_production_min$1.isPortal=function(a){return z$2(a)===d$1};reactIs_production_min$1.isProfiler=function(a){return z$2(a)===g$2};reactIs_production_min$1.isStrictMode=function(a){return z$2(a)===f$1};reactIs_production_min$1.isSuspense=function(a){return z$2(a)===p$1};
			reactIs_production_min$1.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e$1||a===m$1||a===g$2||a===f$1||a===p$1||a===q$2||"object"===typeof a&&null!==a&&(a.$$typeof===t$1||a.$$typeof===r$1||a.$$typeof===h$1||a.$$typeof===k$2||a.$$typeof===n$1||a.$$typeof===w$2||a.$$typeof===x$2||a.$$typeof===y$1||a.$$typeof===v$2)};reactIs_production_min$1.typeOf=z$2;

			var reactIs_development$1 = {};

			/** @license React v16.13.1
			 * react-is.development.js
			 *
			 * Copyright (c) Facebook, Inc. and its affiliates.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */



			if (process.env.NODE_ENV !== "production") {
			  (function() {

			// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
			// nor polyfill, then a plain number is used for performance.
			var hasSymbol = typeof Symbol === 'function' && Symbol.for;
			var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
			var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
			var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
			var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
			var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
			var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
			var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
			// (unstable) APIs that have been removed. Can we remove the symbols?

			var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
			var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
			var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
			var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
			var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
			var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
			var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
			var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
			var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
			var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
			var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

			function isValidElementType(type) {
			  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
			  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
			}

			function typeOf(object) {
			  if (typeof object === 'object' && object !== null) {
			    var $$typeof = object.$$typeof;

			    switch ($$typeof) {
			      case REACT_ELEMENT_TYPE:
			        var type = object.type;

			        switch (type) {
			          case REACT_ASYNC_MODE_TYPE:
			          case REACT_CONCURRENT_MODE_TYPE:
			          case REACT_FRAGMENT_TYPE:
			          case REACT_PROFILER_TYPE:
			          case REACT_STRICT_MODE_TYPE:
			          case REACT_SUSPENSE_TYPE:
			            return type;

			          default:
			            var $$typeofType = type && type.$$typeof;

			            switch ($$typeofType) {
			              case REACT_CONTEXT_TYPE:
			              case REACT_FORWARD_REF_TYPE:
			              case REACT_LAZY_TYPE:
			              case REACT_MEMO_TYPE:
			              case REACT_PROVIDER_TYPE:
			                return $$typeofType;

			              default:
			                return $$typeof;
			            }

			        }

			      case REACT_PORTAL_TYPE:
			        return $$typeof;
			    }
			  }

			  return undefined;
			} // AsyncMode is deprecated along with isAsyncMode

			var AsyncMode = REACT_ASYNC_MODE_TYPE;
			var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
			var ContextConsumer = REACT_CONTEXT_TYPE;
			var ContextProvider = REACT_PROVIDER_TYPE;
			var Element = REACT_ELEMENT_TYPE;
			var ForwardRef = REACT_FORWARD_REF_TYPE;
			var Fragment = REACT_FRAGMENT_TYPE;
			var Lazy = REACT_LAZY_TYPE;
			var Memo = REACT_MEMO_TYPE;
			var Portal = REACT_PORTAL_TYPE;
			var Profiler = REACT_PROFILER_TYPE;
			var StrictMode = REACT_STRICT_MODE_TYPE;
			var Suspense = REACT_SUSPENSE_TYPE;
			var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

			function isAsyncMode(object) {
			  {
			    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
			      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

			      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
			    }
			  }

			  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
			}
			function isConcurrentMode(object) {
			  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
			}
			function isContextConsumer(object) {
			  return typeOf(object) === REACT_CONTEXT_TYPE;
			}
			function isContextProvider(object) {
			  return typeOf(object) === REACT_PROVIDER_TYPE;
			}
			function isElement(object) {
			  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
			}
			function isForwardRef(object) {
			  return typeOf(object) === REACT_FORWARD_REF_TYPE;
			}
			function isFragment(object) {
			  return typeOf(object) === REACT_FRAGMENT_TYPE;
			}
			function isLazy(object) {
			  return typeOf(object) === REACT_LAZY_TYPE;
			}
			function isMemo(object) {
			  return typeOf(object) === REACT_MEMO_TYPE;
			}
			function isPortal(object) {
			  return typeOf(object) === REACT_PORTAL_TYPE;
			}
			function isProfiler(object) {
			  return typeOf(object) === REACT_PROFILER_TYPE;
			}
			function isStrictMode(object) {
			  return typeOf(object) === REACT_STRICT_MODE_TYPE;
			}
			function isSuspense(object) {
			  return typeOf(object) === REACT_SUSPENSE_TYPE;
			}

			reactIs_development$1.AsyncMode = AsyncMode;
			reactIs_development$1.ConcurrentMode = ConcurrentMode;
			reactIs_development$1.ContextConsumer = ContextConsumer;
			reactIs_development$1.ContextProvider = ContextProvider;
			reactIs_development$1.Element = Element;
			reactIs_development$1.ForwardRef = ForwardRef;
			reactIs_development$1.Fragment = Fragment;
			reactIs_development$1.Lazy = Lazy;
			reactIs_development$1.Memo = Memo;
			reactIs_development$1.Portal = Portal;
			reactIs_development$1.Profiler = Profiler;
			reactIs_development$1.StrictMode = StrictMode;
			reactIs_development$1.Suspense = Suspense;
			reactIs_development$1.isAsyncMode = isAsyncMode;
			reactIs_development$1.isConcurrentMode = isConcurrentMode;
			reactIs_development$1.isContextConsumer = isContextConsumer;
			reactIs_development$1.isContextProvider = isContextProvider;
			reactIs_development$1.isElement = isElement;
			reactIs_development$1.isForwardRef = isForwardRef;
			reactIs_development$1.isFragment = isFragment;
			reactIs_development$1.isLazy = isLazy;
			reactIs_development$1.isMemo = isMemo;
			reactIs_development$1.isPortal = isPortal;
			reactIs_development$1.isProfiler = isProfiler;
			reactIs_development$1.isStrictMode = isStrictMode;
			reactIs_development$1.isSuspense = isSuspense;
			reactIs_development$1.isValidElementType = isValidElementType;
			reactIs_development$1.typeOf = typeOf;
			  })();
			}

			if (process.env.NODE_ENV === 'production') {
			  reactIs$2.exports = reactIs_production_min$1;
			} else {
			  reactIs$2.exports = reactIs_development$1;
			}

			var reactIs$1 = reactIs$2.exports;

			/**
			 * Copyright 2015, Yahoo! Inc.
			 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
			 */
			var REACT_STATICS = {
			  childContextTypes: true,
			  contextType: true,
			  contextTypes: true,
			  defaultProps: true,
			  displayName: true,
			  getDefaultProps: true,
			  getDerivedStateFromError: true,
			  getDerivedStateFromProps: true,
			  mixins: true,
			  propTypes: true,
			  type: true
			};
			var KNOWN_STATICS = {
			  name: true,
			  length: true,
			  prototype: true,
			  caller: true,
			  callee: true,
			  arguments: true,
			  arity: true
			};
			var FORWARD_REF_STATICS = {
			  '$$typeof': true,
			  render: true,
			  defaultProps: true,
			  displayName: true,
			  propTypes: true
			};
			var MEMO_STATICS = {
			  '$$typeof': true,
			  compare: true,
			  defaultProps: true,
			  displayName: true,
			  propTypes: true,
			  type: true
			};
			var TYPE_STATICS = {};
			TYPE_STATICS[reactIs$1.ForwardRef] = FORWARD_REF_STATICS;
			TYPE_STATICS[reactIs$1.Memo] = MEMO_STATICS;

			function getStatics(component) {
			  // React v16.11 and below
			  if (reactIs$1.isMemo(component)) {
			    return MEMO_STATICS;
			  } // React v16.12 and above


			  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
			}

			var defineProperty$4 = Object.defineProperty;
			var getOwnPropertyNames = Object.getOwnPropertyNames;
			var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
			var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
			var getPrototypeOf = Object.getPrototypeOf;
			var objectPrototype = Object.prototype;
			function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
			  if (typeof sourceComponent !== 'string') {
			    // don't hoist over string (html) components
			    if (objectPrototype) {
			      var inheritedComponent = getPrototypeOf(sourceComponent);

			      if (inheritedComponent && inheritedComponent !== objectPrototype) {
			        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
			      }
			    }

			    var keys = getOwnPropertyNames(sourceComponent);

			    if (getOwnPropertySymbols$1) {
			      keys = keys.concat(getOwnPropertySymbols$1(sourceComponent));
			    }

			    var targetStatics = getStatics(targetComponent);
			    var sourceStatics = getStatics(sourceComponent);

			    for (var i = 0; i < keys.length; ++i) {
			      var key = keys[i];

			      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
			        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

			        try {
			          // Avoid failures from read-only properties
			          defineProperty$4(targetComponent, key, descriptor);
			        } catch (e) {}
			      }
			    }
			  }

			  return targetComponent;
			}

			var hoistNonReactStatics_cjs = hoistNonReactStatics;

			function v$1(){return (v$1=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);}return e}).apply(this,arguments)}var g$1=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},S=function(t){return null!==t&&"object"==typeof t&&"[object Object]"===(t.toString?t.toString():Object.prototype.toString.call(t))&&!reactIs$3.exports.typeOf(t)},w$1=Object.freeze([]),E=Object.freeze({});function b$1(e){return "function"==typeof e}function _(e){return "production"!==process.env.NODE_ENV&&"string"==typeof e&&e||e.displayName||e.name||"Component"}function N(e){return e&&"string"==typeof e.styledComponentId}var A$1="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",I="undefined"!=typeof window&&"HTMLElement"in window,P=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY?"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY:"production"!==process.env.NODE_ENV),O={},R="production"!==process.env.NODE_ENV?{1:"Cannot create styled-component for component: %s.\n\n",2:"Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n",3:"Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n",4:"The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n",5:"The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n",6:"Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n",7:'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n',8:'ThemeProvider: Please make your "theme" prop an object.\n\n',9:"Missing document `<head>`\n\n",10:"Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n",11:"_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n",12:"It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n",13:"%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n",14:'ThemeProvider: "theme" prop is required.\n\n',15:"A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n",16:"Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n",17:"CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n"}:{};function D(){for(var e=arguments.length<=0?void 0:arguments[0],t=[],n=1,r=arguments.length;n<r;n+=1)t.push(n<0||arguments.length<=n?void 0:arguments[n]);return t.forEach((function(t){e=e.replace(/%[a-z]/,t);})),e}function j(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw "production"===process.env.NODE_ENV?new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):"")):new Error(D.apply(void 0,[R[e]].concat(n)).trim())}var T=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e;}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&j(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var s=r;s<o;s++)this.groupSizes[s]=0;}for(var i=this.indexOfGroup(e+1),a=0,c=t.length;a<c;a++)this.tag.insertRule(i,t[a])&&(this.groupSizes[e]++,i++);},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n);}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,s=r;s<o;s++)t+=this.tag.getRule(s)+"/*!sc*/\n";return t},e}(),x$1=new Map,k$1=new Map,V=1,B=function(e){if(x$1.has(e))return x$1.get(e);for(;k$1.has(V);)V++;var t=V++;return "production"!==process.env.NODE_ENV&&((0|t)<0||t>1<<30)&&j(16,""+t),x$1.set(e,t),k$1.set(t,e),t},z$1=function(e){return k$1.get(e)},M=function(e,t){t>=V&&(V=t+1),x$1.set(e,t),k$1.set(t,e);},G="style["+A$1+'][data-styled-version="5.3.3"]',L=new RegExp("^"+A$1+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),F=function(e,t,n){for(var r,o=n.split(","),s=0,i=o.length;s<i;s++)(r=o[s])&&e.registerName(t,r);},Y=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],o=0,s=n.length;o<s;o++){var i=n[o].trim();if(i){var a=i.match(L);if(a){var c=0|parseInt(a[1],10),u=a[2];0!==c&&(M(u,c),F(e,u,a[3]),e.getTag().insertRules(c,r)),r.length=0;}else r.push(i);}}},q$1=function(){return "undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},H=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(A$1))return r}}(n),s=void 0!==o?o.nextSibling:null;r.setAttribute(A$1,"active"),r.setAttribute("data-styled-version","5.3.3");var i=q$1();return i&&r.setAttribute("nonce",i),n.insertBefore(r,s),r},$=function(){function e(e){var t=this.element=H(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}j(17);}(t),this.length=0;}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return !1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--;},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),W=function(){function e(e){var t=this.element=H(e);this.nodes=t.childNodes,this.length=0;}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return !1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--;},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),U=function(){function e(e){this.rules=[],this.length=0;}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--;},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),J=I,X={isServer:!I,useCSSOMInjection:!P},Z=function(){function e(e,t,n){void 0===e&&(e=E),void 0===t&&(t={}),this.options=v$1({},X,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&I&&J&&(J=!1,function(e){for(var t=document.querySelectorAll(G),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(A$1)&&(Y(e,o),o.parentNode&&o.parentNode.removeChild(o));}}(this));}e.registerId=function(e){return B(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(v$1({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new U(o):r?new $(o):new W(o),new T(e)));var e,t,n,r,o;},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(B(e),this.names.has(e))this.names.get(e).add(t);else {var n=new Set;n.add(t),this.names.set(e,n);}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(B(e),n);},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear();},t.clearRules=function(e){this.getTag().clearGroup(B(e)),this.clearNames(e);},t.clearTag=function(){this.tag=void 0;},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var s=z$1(o);if(void 0!==s){var i=e.names.get(s),a=t.getGroup(o);if(i&&a&&i.size){var c=A$1+".g"+o+'[id="'+s+'"]',u="";void 0!==i&&i.forEach((function(e){e.length>0&&(u+=e+",");})),r+=""+a+c+'{content:"'+u+'"}/*!sc*/\n';}}}return r}(this)},e}(),K=/(a)(d)/gi,Q=function(e){return String.fromCharCode(e+(e>25?39:97))};function ee(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=Q(t%52)+n;return (Q(t%52)+n).replace(K,"$1-$2")}var te=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},ne=function(e){return te(5381,e)};function re(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(b$1(n)&&!N(n))return !1}return !0}var oe=ne("5.3.3"),se=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic="production"===process.env.NODE_ENV&&(void 0===n||n.isStatic)&&re(e),this.componentId=t,this.baseHash=te(oe,t),this.baseStyle=n,Z.registerId(t);}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else {var s=Ne(this.rules,e,t,n).join(""),i=ee(te(this.baseHash,s)>>>0);if(!t.hasNameForId(r,i)){var a=n(s,"."+i,void 0,r);t.insertRules(r,i,a);}o.push(i),this.staticRulesId=i;}else {for(var c=this.rules.length,u=te(this.baseHash,n.hash),l="",d=0;d<c;d++){var h=this.rules[d];if("string"==typeof h)l+=h,"production"!==process.env.NODE_ENV&&(u=te(u,h+d));else if(h){var p=Ne(h,e,t,n),f=Array.isArray(p)?p.join(""):p;u=te(u,f+d),l+=f;}}if(l){var m=ee(u>>>0);if(!t.hasNameForId(r,m)){var y=n(l,"."+m,void 0,r);t.insertRules(r,m,y);}o.push(m);}}return o.join(" ")},e}(),ie=/^\s*\/\/.*$/gm,ae=[":","[",".","#"];function ce(e){var t,n,r,o,s=void 0===e?E:e,i=s.options,a=void 0===i?E:i,c=s.plugins,u=void 0===c?w$1:c,l=new stylis_min(a),d=[],h=function(e){function t(t){if(t)try{e(t+"}");}catch(e){}}return function(n,r,o,s,i,a,c,u,l,d){switch(n){case 1:if(0===l&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t);}}}((function(e){d.push(e);})),f=function(e,r,s){return 0===r&&-1!==ae.indexOf(s[n.length])||s.match(o)?e:"."+t};function m(e,s,i,a){void 0===a&&(a="&");var c=e.replace(ie,""),u=s&&i?i+" "+s+" { "+c+" }":c;return t=a,n=s,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),l(i||!s?"":s,u)}return l.use([].concat(u,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,f));},h,function(e){if(-2===e){var t=d;return d=[],t}}])),m.hash=u.length?u.reduce((function(e,t){return t.name||j(15),te(e,t.name)}),5381).toString():"",m}var ue=React__default.createContext();ue.Consumer;var de=React__default.createContext(),he=(de.Consumer,new Z),pe=ce();function fe(){return useContext(ue)||he}function me(){return useContext(de)||pe}var ve=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=pe);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"));},this.toString=function(){return j(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t;}return e.prototype.getName=function(e){return void 0===e&&(e=pe),this.name+e.hash},e}(),ge=/([A-Z])/,Se=/([A-Z])/g,we=/^ms-/,Ee=function(e){return "-"+e.toLowerCase()};function be(e){return ge.test(e)?e.replace(Se,Ee).replace(we,"-ms-"):e}var _e=function(e){return null==e||!1===e||""===e};function Ne(e,n,r,o){if(Array.isArray(e)){for(var s,i=[],a=0,c=e.length;a<c;a+=1)""!==(s=Ne(e[a],n,r,o))&&(Array.isArray(s)?i.push.apply(i,s):i.push(s));return i}if(_e(e))return "";if(N(e))return "."+e.styledComponentId;if(b$1(e)){if("function"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!n)return e;var u=e(n);return "production"!==process.env.NODE_ENV&&reactIs$3.exports.isElement(u)&&console.warn(_(e)+" is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details."),Ne(u,n,r,o)}var l;return e instanceof ve?r?(e.inject(r,o),e.getName(o)):e:S(e)?function e(t,n){var r,o,s=[];for(var i in t)t.hasOwnProperty(i)&&!_e(t[i])&&(Array.isArray(t[i])&&t[i].isCss||b$1(t[i])?s.push(be(i)+":",t[i],";"):S(t[i])?s.push.apply(s,e(t[i],i)):s.push(be(i)+": "+(r=i,null==(o=t[i])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in unitlessKeys?String(o).trim():o+"px")+";"));return n?[n+" {"].concat(s,["}"]):s}(e):e.toString()}var Ae=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function Ce(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return b$1(e)||S(e)?Ae(Ne(g$1(w$1,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Ae(Ne(g$1(e,n)))}var Ie=/invalid hook call/i,Pe=new Set,Oe=function(e,t){if("production"!==process.env.NODE_ENV){var n="The component "+e+(t?' with the id of "'+t+'"':"")+" has been created dynamically.\nYou may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.",r=console.error;try{var o=!0;console.error=function(e){if(Ie.test(e))o=!1,Pe.delete(n);else {for(var t=arguments.length,s=new Array(t>1?t-1:0),i=1;i<t;i++)s[i-1]=arguments[i];r.apply(void 0,[e].concat(s));}},useRef(),o&&!Pe.has(n)&&(console.warn(n),Pe.add(n));}catch(e){Ie.test(e.message)&&Pe.delete(n);}finally{console.error=r;}}},Re=function(e,t,n){return void 0===n&&(n=E),e.theme!==n.theme&&e.theme||t||n.theme},De=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,je=/(^-|-$)/g;function Te(e){return e.replace(De,"-").replace(je,"")}var xe=function(e){return ee(ne(e)>>>0)};function ke(e){return "string"==typeof e&&("production"===process.env.NODE_ENV||e.charAt(0)===e.charAt(0).toLowerCase())}var Ve=function(e){return "function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Be=function(e){return "__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function ze(e,t,n){var r=e[n];Ve(t)&&Ve(r)?Me(r,t):e[n]=t;}function Me(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,s=n;o<s.length;o++){var i=s[o];if(Ve(i))for(var a in i)Be(a)&&ze(e,i[a],a);}return e}var Ge=React__default.createContext();Ge.Consumer;var Ye={};function qe(e,t,n){var o=N(e),i=!ke(e),a=t.attrs,c=void 0===a?w$1:a,d=t.componentId,h=void 0===d?function(e,t){var n="string"!=typeof e?"sc":Te(e);Ye[n]=(Ye[n]||0)+1;var r=n+"-"+xe("5.3.3"+n+Ye[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):d,p=t.displayName,f=void 0===p?function(e){return ke(e)?"styled."+e:"Styled("+_(e)+")"}(e):p,g=t.displayName&&t.componentId?Te(t.displayName)+"-"+t.componentId:t.componentId||h,S=o&&e.attrs?Array.prototype.concat(e.attrs,c).filter(Boolean):c,A=t.shouldForwardProp;o&&e.shouldForwardProp&&(A=t.shouldForwardProp?function(n,r,o){return e.shouldForwardProp(n,r,o)&&t.shouldForwardProp(n,r,o)}:e.shouldForwardProp);var C,I=new se(n,g,o?e.componentStyle:void 0),P=I.isStatic&&0===c.length,O=function(e,t){return function(e,t,n,r){var o=e.attrs,i=e.componentStyle,a=e.defaultProps,c=e.foldedComponentIds,d=e.shouldForwardProp,h=e.styledComponentId,p=e.target;"production"!==process.env.NODE_ENV&&useDebugValue(h);var f=function(e,t,n){void 0===e&&(e=E);var r=v$1({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,s,i=e;for(t in b$1(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],s=i[t],n&&s?n+" "+s:n||s):i[t];})),[r,o]}(Re(t,useContext(Ge),a)||E,t,o),y=f[0],g=f[1],S=function(e,t,n,r){var o=fe(),s=me(),i=t?e.generateAndInjectStyles(E,o,s):e.generateAndInjectStyles(n,o,s);return "production"!==process.env.NODE_ENV&&useDebugValue(i),"production"!==process.env.NODE_ENV&&!t&&r&&r(i),i}(i,r,y,"production"!==process.env.NODE_ENV?e.warnTooManyClasses:void 0),w=n,_=g.$as||t.$as||g.as||t.as||p,N=ke(_),A=g!==t?v$1({},t,{},g):t,C={};for(var I in A)"$"!==I[0]&&"as"!==I&&("forwardedAs"===I?C.as=A[I]:(d?d(I,index,_):!N||index(I))&&(C[I]=A[I]));return t.style&&g.style!==t.style&&(C.style=v$1({},t.style,{},g.style)),C.className=Array.prototype.concat(c,h,S!==h?S:null,t.className,g.className).filter(Boolean).join(" "),C.ref=w,createElement(_,C)}(C,e,t,P)};return O.displayName=f,(C=React__default.forwardRef(O)).attrs=S,C.componentStyle=I,C.displayName=f,C.shouldForwardProp=A,C.foldedComponentIds=o?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):w$1,C.styledComponentId=g,C.target=o?e.target:e,C.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return {};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),s=r&&r+"-"+(ke(e)?e:Te(_(e)));return qe(e,v$1({},o,{attrs:S,componentId:s}),n)},Object.defineProperty(C,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=o?Me({},e.defaultProps,t):t;}}),"production"!==process.env.NODE_ENV&&(Oe(f,g),C.warnTooManyClasses=function(e,t){var n={},r=!1;return function(o){if(!r&&(n[o]=!0,Object.keys(n).length>=200)){var s=t?' with the id of "'+t+'"':"";console.warn("Over 200 classes were generated for component "+e+s+".\nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"),r=!0,n={};}}}(f,g)),C.toString=function(){return "."+C.styledComponentId},i&&hoistNonReactStatics_cjs(C,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),C}var He=function(e){return function e(t,r,o){if(void 0===o&&(o=E),!reactIs$3.exports.isValidElementType(r))return j(1,String(r));var s=function(){return t(r,o,Ce.apply(void 0,arguments))};return s.withConfig=function(n){return e(t,r,v$1({},o,{},n))},s.attrs=function(n){return e(t,r,v$1({},o,{attrs:Array.prototype.concat(o.attrs,n).filter(Boolean)}))},s}(qe,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){He[e]=He(e);}));var $e=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=re(e),Z.registerId(this.componentId+1);}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(Ne(this.rules,t,n,r).join(""),""),s=this.componentId+e;n.insertRules(s,s,o);},t.removeStyles=function(e,t){t.clearRules(this.componentId+e);},t.renderStyles=function(e,t,n,r){e>2&&Z.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r);},e}();function We(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];var i=Ce.apply(void 0,[e].concat(n)),a="sc-global-"+xe(JSON.stringify(i)),u=new $e(i,a);function l(e){var t=fe(),n=me(),o=useContext(Ge),l=useRef(t.allocateGSInstance(a)).current;return "production"!==process.env.NODE_ENV&&React__default.Children.count(e.children)&&console.warn("The global style component "+a+" was given child JSX. createGlobalStyle does not render children."),"production"!==process.env.NODE_ENV&&i.some((function(e){return "string"==typeof e&&-1!==e.indexOf("@import")}))&&console.warn("Please do not use @import CSS syntax in createGlobalStyle at this time, as the CSSOM APIs we use in production do not handle it well. Instead, we recommend using a library such as react-helmet to inject a typical <link> meta tag to the stylesheet, or simply embedding it manually in your index.html <head> section for a simpler app."),t.server&&h(l,e,t,o,n),useLayoutEffect((function(){if(!t.server)return h(l,e,t,o,n),function(){return u.removeStyles(l,t)}}),[l,e,t,o,n]),null}function h(e,t,n,r,o){if(u.isStatic)u.renderStyles(e,O,n,o);else {var s=v$1({},t,{theme:Re(t,r,l.defaultProps)});u.renderStyles(e,s,n,o);}}return "production"!==process.env.NODE_ENV&&Oe(a),React__default.memo(l)}function Ue(e){"production"!==process.env.NODE_ENV&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product&&console.warn("`keyframes` cannot be used on ReactNative, only on the web. To do animation in ReactNative please use Animated.");for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=Ce.apply(void 0,[e].concat(n)).join(""),s=xe(o);return new ve(s,o)}"production"!==process.env.NODE_ENV&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product&&console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native"),"production"!==process.env.NODE_ENV&&"test"!==process.env.NODE_ENV&&"undefined"!=typeof window&&(window["__styled-components-init__"]=window["__styled-components-init__"]||0,1===window["__styled-components-init__"]&&console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."),window["__styled-components-init__"]+=1);var styled = He;

			var __defProp$2 = Object.defineProperty;
			var __defProps$2 = Object.defineProperties;
			var __getOwnPropDescs$2 = Object.getOwnPropertyDescriptors;
			var __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;
			var __hasOwnProp$2 = Object.prototype.hasOwnProperty;
			var __propIsEnum$2 = Object.prototype.propertyIsEnumerable;
			var __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
			var __spreadValues$2 = (a, b) => {
			  for (var prop in b || (b = {}))
			    if (__hasOwnProp$2.call(b, prop))
			      __defNormalProp$2(a, prop, b[prop]);
			  if (__getOwnPropSymbols$2)
			    for (var prop of __getOwnPropSymbols$2(b)) {
			      if (__propIsEnum$2.call(b, prop))
			        __defNormalProp$2(a, prop, b[prop]);
			    }
			  return a;
			};
			var __spreadProps$2 = (a, b) => __defProps$2(a, __getOwnPropDescs$2(b));
			var __objRest$1 = (source, exclude) => {
			  var target = {};
			  for (var prop in source)
			    if (__hasOwnProp$2.call(source, prop) && exclude.indexOf(prop) < 0)
			      target[prop] = source[prop];
			  if (source != null && __getOwnPropSymbols$2)
			    for (var prop of __getOwnPropSymbols$2(source)) {
			      if (exclude.indexOf(prop) < 0 && __propIsEnum$2.call(source, prop))
			        target[prop] = source[prop];
			    }
			  return target;
			};
			function Modal({
			  title,
			  fullscreen,
			  className,
			  width = "auto",
			  height = "auto",
			  children,
			  onClose,
			  footerBtns = []
			}) {
			  const [element] = useState(document.createElement("div"));
			  useEffect(() => {
			    document.body.append(element);
			    return () => {
			      document.body.removeChild(element);
			    };
			  }, []);
			  const renderFooter = () => {
			    if (!footerBtns.length) {
			      return null;
			    } else {
			      return /* @__PURE__ */ React__default.createElement(Footer, null, footerBtns.map((_a) => {
			        var _b = _a, {
			          className: className2 = "",
			          text,
			          key,
			          onClick
			        } = _b, restProps = __objRest$1(_b, [
			          "className",
			          "text",
			          "key",
			          "onClick"
			        ]);
			        return /* @__PURE__ */ React__default.createElement(Button$1, __spreadProps$2(__spreadValues$2({}, restProps), {
			          key,
			          className: cs(className2, "mr-20"),
			          onClick: (e) => onClick(key, e)
			        }), text);
			      }));
			    }
			  };
			  return createPortal(/* @__PURE__ */ React__default.createElement(Wrap, {
			    className
			  }, /* @__PURE__ */ React__default.createElement(GlobalStyle, null), /* @__PURE__ */ React__default.createElement(Mask, null), /* @__PURE__ */ React__default.createElement(InnerWrap, {
			    width,
			    height,
			    fullscreen
			  }, /* @__PURE__ */ React__default.createElement(Header, null, /* @__PURE__ */ React__default.createElement("div", {
			    className: "md-header-left"
			  }, /* @__PURE__ */ React__default.createElement("div", {
			    className: "md-title"
			  }, title)), /* @__PURE__ */ React__default.createElement("div", {
			    className: "md-header-right"
			  }, /* @__PURE__ */ React__default.createElement(Icon$1, {
			    name: "close",
			    size: 24,
			    clickable: true,
			    onClick: onClose
			  }))), /* @__PURE__ */ React__default.createElement(Body, {
			    className: "md-body",
			    fullscreen
			  }, children), renderFooter())), element);
			}
			const GlobalStyle = We`
  body {
    overflow-y: hidden;
  }
`;
			const Mask = styled.div`
  background: #0F172A;
  opacity: 0.65;
  backdrop-filter: blur(72px);
`;
			const Header = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-left: 20px;
  padding-right: 20px;
  height: 56px;
  min-height: 56px;
  border-bottom: 1px solid #E2E8F0;
  border-top-left-radius: 12px;
  border-top-right-radius: 12px;
  position: relative;
  background: white;
  background-image: url(/dist/images/md-header-bg.jpg);
  background-position: top right;
  background-size: contain;
  background-repeat: no-repeat;

  .md-header-left {
    display: flex;
    flex: 1;
    align-items: center;
    > .md-title {
      font-size: 1.6rem;
      font-weight: 600;
      line-height: 24px;
      color: #0F172A;
      margin-right: 16px;
    }
  }
  .md-header-right {
    justify-content: flex-end;
  }
`;
			const Body = styled.div`
  overflow: auto;
  ${({ fullscreen }) => fullscreen ? Ce`
      height: calc(100vh - 56px);
    ` : Ce`
      height: 100%;
    `}
`;
			const Footer = styled.div`
  padding: 16px 20px;
  background-color: #F1F5F9;
  display: flex;
  align-items: center;
  justify-content: flex-end;
  border-bottom-left-radius: 12px;
  border-bottom-right-radius: 12px;
`;
			const scaleAnimation = Ue`
  from {
    transform: scale(0);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
`;
			const InnerWrap = styled.div`
  display: flex;
  flex-direction: column;
  width: ${(props) => typeof props.width === "number" ? props.width + "px" : props.width};
  height: ${(props) => typeof props.height === "number" ? props.height + "px" : props.height};
  ${(props) => props.width === "auto" ? "min-width: 632px" : ""};
  background: white;
  ${({ fullscreen }) => fullscreen ? Ce`
    width: 100vw;
    height: 100vh;
    position: relative;
    top: 56px;
  ` : Ce`
    margin: auto;  // FFC auto box
    max-width: calc(100vw - 42px);
    max-height: calc(100vh - 42px);
  `};
  z-index: 14;
  border-radius: 12px;
  animation: ${scaleAnimation} 0.3s;
`;
			const Wrap = styled.div`
  position: fixed;
  width: 100vw;
  height: 100vh;
  bottom: 0;
  left: 0;
  right: 0;
  top: 0;
  display: flex;
  align-items: center;
  transition: opacity .1s;
  justify-content: center;
  overflow: hidden;
  z-index: 20;
  box-shadow: inset 0px -1px 0px #E2E8F0;

  ${Mask} {
    position: absolute;
    width: 100%;
    height: 100%;
  }
`;

			var css$5 = ".tab-wrapper {\n  transition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;\n  transition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background-color: #fff;\n  overflow: hidden;\n  position: relative;\n}\n.tab-wrapper .tab-navs {\n  width: 100%;\n  display: flex;\n  overflow-x: auto;\n  flex-direction: row;\n  background-color: #fff;\n  margin-bottom: 1px;\n  box-shadow: inset 0px -1px 0px #E2E8F0;\n}\n.tab-wrapper .tab-navs .tab-nav-item {\n  text-align: center;\n  white-space: nowrap;\n  padding: 12px;\n  color: var(--gray-600);\n}\n.tab-wrapper .tab-navs .tab-nav-item:hover {\n  color: var(--blue-600);\n}\n.tab-wrapper .tab-navs .tab-nav-item.disabled {\n  cursor: not-allowed;\n}\n.tab-wrapper .tab-navs .tab-nav-item.disabled:hover {\n  color: var(--gray-400);\n}\n.tab-wrapper .tab-navs .tab-nav-item::after {\n  transition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;\n  transition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  opacity: 0;\n  content: \"\";\n  height: 4px;\n  width: 100%;\n  display: block;\n  background: #375ff3;\n  border-radius: 4px 4px 0px 0px;\n  position: absolute;\n  left: 0;\n  bottom: 0px;\n}\n.tab-wrapper .tab-navs .tab-nav-item:not(.active):hover::after {\n  opacity: 0.5;\n}\n.tab-wrapper .tab-navs .tab-nav__error {\n  color: var(--red-600);\n}\n.tab-wrapper .tab-navs .tab-nav__error::after {\n  background: var(--red-600);\n}\n.tab-wrapper .tab-navs .tab-nav__error:hover {\n  color: var(--red-600);\n}\n.tab-wrapper .tab-navs .tab-nav__warning {\n  color: var(--yellow-600);\n}\n.tab-wrapper .tab-navs .tab-nav__warning::after {\n  background: var(--yellow-600);\n}\n.tab-wrapper .tab-navs .tab-nav__warning:hover {\n  color: var(--yellow-600);\n}\n.tab-wrapper .tab-navs .active {\n  font-weight: 600;\n}\n.tab-wrapper .tab-navs .active::after {\n  opacity: 1;\n}\n.tab-wrapper .tab-navs .stretch-navs {\n  flex-grow: 1;\n}\n.tab-wrapper .tab-navs .tab-nav-item-separator:not(:last-child)::before {\n  width: 1px;\n  height: 64%;\n  display: block;\n  content: \"\";\n  position: absolute;\n  right: -1px;\n  top: 50%;\n  background-color: var(--gray-200);\n  transform: translateY(-50%);\n}\n.tab-wrapper .tab-content {\n  flex-grow: 1;\n  padding: 16px 20px;\n  overflow: auto;\n}";
			n$3(css$5,{});

			function TabNavs({
			  navs,
			  currentKey,
			  stretchNav,
			  separator,
			  navTitleClassName,
			  navsClassName,
			  onClick
			}, ref) {
			  return /* @__PURE__ */ React__default.createElement("div", {
			    className: "z-10"
			  }, " ", /* @__PURE__ */ React__default.createElement("div", {
			    ref,
			    className: cs("tab-navs", navsClassName)
			  }, navs.map((item) => {
			    const active = item.id === currentKey;
			    return /* @__PURE__ */ React__default.createElement("div", {
			      key: item.id,
			      onClick: () => onClick == null ? void 0 : onClick(item),
			      className: cs("cursor-pointer relative tab-nav-item", {
			        disabled: item.disabled,
			        "tab-nav-item-separator": separator,
			        "stretch-navs": stretchNav,
			        "active text-blue-600": active,
			        [`tab-nav__${item.state}`]: item.state
			      }, navTitleClassName)
			    }, item.name);
			  })));
			}
			var TabNavs$1 = forwardRef(TabNavs);

			function Tab({
			  items,
			  style,
			  className,
			  navsClassName,
			  navTitleClassName,
			  contentClassName,
			  stretchNav,
			  separator,
			  currentKey,
			  onChange
			}) {
			  const navsRef = useRef(null);
			  const [key, setKey] = useState(currentKey || items[0].id);
			  useEffect(() => {
			    setKey(currentKey || items[0].id);
			  }, [currentKey]);
			  const tabContentRender = (items2, key2) => {
			    var _a;
			    return (_a = items2.find((item) => item.id === key2)) == null ? void 0 : _a.content;
			  };
			  const handleNavItemClick = ({ id, disabled }) => {
			    if (disabled) {
			      return;
			    }
			    setKey(id);
			    onChange == null ? void 0 : onChange(id);
			  };
			  return /* @__PURE__ */ React__default.createElement("div", {
			    style,
			    className: cs("tab-wrapper", className)
			  }, /* @__PURE__ */ React__default.createElement(TabNavs$1, {
			    ref: navsRef,
			    navs: items,
			    currentKey: key,
			    stretchNav,
			    separator,
			    navsClassName,
			    navTitleClassName,
			    onClick: handleNavItemClick
			  }), /* @__PURE__ */ React__default.createElement("div", {
			    className: cs("tab-content", contentClassName)
			  }, tabContentRender(items, key)));
			}
			Tab.TabNavs = TabNavs$1;

			function Tag({
			  value,
			  id,
			  className,
			  style,
			  onDelete,
			  deleteIconSize
			}) {
			  return /* @__PURE__ */ React__default.createElement("span", {
			    className: cs("tag inline-flex items-center", className),
			    style
			  }, value, onDelete && /* @__PURE__ */ React__default.createElement("span", {
			    className: "ml-4 flex items-center",
			    onClick: (e) => id && onDelete(id, e)
			  }, /* @__PURE__ */ React__default.createElement(Icon$1, {
			    changeable: true,
			    clickable: true,
			    name: "close",
			    size: deleteIconSize || 12
			  })));
			}

			function SingleSelectTrigger({
			  selectedOption,
			  placeholder
			}) {
			  if (!selectedOption) {
			    return /* @__PURE__ */ React.createElement("span", null, placeholder);
			  }
			  return /* @__PURE__ */ React.createElement("span", null, selectedOption.label);
			}
			function MultipleSelectTrigger({ selectedOption, placeholder, onUnselect }) {
			  if (!selectedOption || !selectedOption.length) {
			    return /* @__PURE__ */ React.createElement("span", null, placeholder);
			  }
			  return /* @__PURE__ */ React.createElement(React.Fragment, null, selectedOption.map(({ value, label }) => {
			    return /* @__PURE__ */ React.createElement(Tag, {
			      className: "mr-5",
			      key: value,
			      id: value,
			      value: label,
			      onDelete: (id, e) => {
			        e.stopPropagation();
			        onUnselect(id);
			      }
			    });
			  }));
			}

			const DEFAULT_PLACEHOLDER = "\u8BF7\u9009\u62E9";
			const modifiers = [
			  {
			    name: "offset",
			    options: {
			      offset: [0, 4]
			    }
			  }
			];
			class Select extends React__default.Component {
			  constructor(props) {
			    super(props);
			    this.popperRef = React__default.createRef();
			    this.reference = React__default.createRef();
			    this.triggerContentRef = React__default.createRef();
			    this.handleClick = (value) => {
			      var _a, _b, _c, _d, _e, _f;
			      if (!this.props.multiple) {
			        (_b = (_a = this.props).onChange) == null ? void 0 : _b.call(_a, value);
			        this.setState({ selectedValue: value });
			        this.popperRef.current && this.popperRef.current.close();
			        return;
			      }
			      if (this.state.selectedValue === void 0) {
			        this.setState({ selectedValue: [value] });
			        (_d = (_c = this.props).onChange) == null ? void 0 : _d.call(_c, [value]);
			        return;
			      }
			      const selectedValue = this.state.selectedValue;
			      const _selectedValue = selectedValue.includes(value) ? selectedValue.filter((_value) => {
			        return _value !== value;
			      }) : [...selectedValue, value];
			      this.setState({ selectedValue: _selectedValue });
			      (_f = (_e = this.props).onChange) == null ? void 0 : _f.call(_e, _selectedValue);
			    };
			    this.optionsVisibilityChange = (visible) => {
			      var _a, _b;
			      this.setState({ triggerActive: visible });
			      (_b = (_a = this.props).onOptionsVisibilityChange) == null ? void 0 : _b.call(_a, visible);
			    };
			    const selectedValue = props.value || props.defaultValue;
			    const selectedOption = Array.isArray(selectedValue) ? props.options.filter(({ value }) => {
			      return selectedValue.includes(value);
			    }) : props.options.find(({ value }) => value === selectedValue);
			    this.state = {
			      selectedOption,
			      selectedValue,
			      triggerActive: false
			    };
			  }
			  static getDerivedStateFromProps(props, { selectedValue, triggerActive }) {
			    const { value, options } = props;
			    let selectedOption = void 0;
			    if (value && Array.isArray(value)) {
			      selectedOption = options.filter((option) => {
			        return value.includes(option.value);
			      });
			    }
			    if (value && !Array.isArray(value)) {
			      selectedOption = options.find((option) => {
			        return value === option.value;
			      });
			    }
			    if (selectedValue && Array.isArray(selectedValue)) {
			      selectedOption = options.filter((option) => {
			        return selectedValue.includes(option.value);
			      });
			    }
			    if (selectedValue && !Array.isArray(selectedValue)) {
			      selectedOption = options.find((option) => {
			        return selectedValue === option.value;
			      });
			    }
			    return {
			      triggerActive,
			      selectedOption
			    };
			  }
			  componentDidUpdate(preProps) {
			    if (preProps.value !== this.props.value) {
			      this.setState({ selectedValue: this.props.value });
			    }
			  }
			  getTriggerWidth() {
			    var _a, _b;
			    const rects = (_b = (_a = this.triggerContentRef.current) == null ? void 0 : _a.parentElement) == null ? void 0 : _b.getClientRects();
			    if (!rects || !rects.length) {
			      return 150;
			    }
			    return Array.from(rects)[0].width;
			  }
			  renderOptions() {
			    const { options, optionsDesc, optionClassName } = this.props;
			    const { selectedValue } = this.state;
			    return /* @__PURE__ */ React__default.createElement("div", {
			      className: `${optionClassName} dropdown-options`,
			      style: { width: `${this.getTriggerWidth()}px` }
			    }, optionsDesc && /* @__PURE__ */ React__default.createElement("p", {
			      className: "select-options__desc"
			    }, optionsDesc), options.map((option) => {
			      const isSelected = Array.isArray(selectedValue) ? selectedValue.includes(option.value) : selectedValue === option.value;
			      return /* @__PURE__ */ React__default.createElement("div", {
			        key: option.value,
			        onClick: () => this.handleClick(option.value),
			        className: cs("dropdown-options__option", { "text-blue-600": isSelected })
			      }, /* @__PURE__ */ React__default.createElement("div", {
			        className: "truncate min-w-0"
			      }, option.label), isSelected && /* @__PURE__ */ React__default.createElement(Icon$1, {
			        name: "check",
			        className: "text-current"
			      }));
			    }));
			  }
			  renderCustomTrigger() {
			    const { selectedOption, triggerActive } = this.state;
			    const { triggerRender } = this.props;
			    if (!triggerRender) {
			      return null;
			    }
			    if (Array.isArray(selectedOption)) {
			      return triggerRender({
			        selectedOption,
			        triggerActive
			      });
			    }
			    return triggerRender({
			      selectedOption,
			      triggerActive
			    });
			  }
			  renderDefaultTrigger() {
			    const { selectedOption } = this.state;
			    const { placeholder = DEFAULT_PLACEHOLDER } = this.props;
			    if (Array.isArray(selectedOption)) {
			      return /* @__PURE__ */ React__default.createElement(MultipleSelectTrigger, {
			        selectedOption,
			        placeholder,
			        onUnselect: (value) => {
			          this.handleClick(value);
			        }
			      });
			    }
			    return /* @__PURE__ */ React__default.createElement(SingleSelectTrigger, {
			      selectedOption,
			      placeholder
			    });
			  }
			  render() {
			    const { triggerActive, selectedValue } = this.state;
			    const {
			      children,
			      triggerRender,
			      name,
			      inputRef,
			      style,
			      className,
			      disabled,
			      id
			    } = this.props;
			    const arrowStyle = triggerActive ? {
			      transform: "rotate(180deg)"
			    } : void 0;
			    return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, children ? React__default.cloneElement(children, { ref: this.reference }) : /* @__PURE__ */ React__default.createElement("div", {
			      ref: this.reference,
			      style,
			      className: cs("dropdown-trigger", className, {
			        "border-blue-600": triggerActive && !disabled,
			        "select-trigger--disabled": disabled
			      })
			    }, name && /* @__PURE__ */ React__default.createElement("input", {
			      id,
			      type: "hidden",
			      name,
			      ref: inputRef,
			      defaultValue: selectedValue
			    }), /* @__PURE__ */ React__default.createElement("div", {
			      className: "select-trigger__content flex gap-4",
			      ref: this.triggerContentRef
			    }, triggerRender ? this.renderCustomTrigger() : this.renderDefaultTrigger()), /* @__PURE__ */ React__default.createElement(Icon$1, {
			      name: "keyboard_arrow_down",
			      style: arrowStyle,
			      className: "trigger-arrow-icon"
			    })), /* @__PURE__ */ React__default.createElement(Popper2, {
			      ref: this.popperRef,
			      reference: this.reference,
			      placement: "bottom-start",
			      modifiers,
			      onVisibilityChange: this.optionsVisibilityChange
			    }, this.renderOptions()));
			  }
			} exports('Select', Select);

			const InputCss = {
			  background: "none",
			  height: "20px",
			  boxShadow: "none",
			  border: "none"
			};
			function Search({ value: _value, placeholder, onChange, onKeyDown, onBlur, className, actions }) {
			  const [value, setValue] = useState(_value || "");
			  const [focused, setFocused] = useState(false);
			  const handleChange = (e) => {
			    setValue(e.target.value);
			    onChange && onChange(e.target.value);
			  };
			  function handleClick() {
			    setValue("");
			    onChange && onChange("");
			    onBlur && onBlur("");
			  }
			  function handleInputFocus() {
			    setFocused(true);
			  }
			  function handleInputBlur() {
			    setFocused(false);
			    onBlur && onBlur();
			  }
			  return /* @__PURE__ */ React__default.createElement("div", {
			    className: cs("px-16 py-5 corner-2-8-8-8 bg-white flex items-center border border-gray-300", className, {
			      "input-focus-border": focused
			    })
			  }, /* @__PURE__ */ React__default.createElement(Icon$1, {
			    name: "search",
			    size: 20,
			    className: "mr-8"
			  }), /* @__PURE__ */ React__default.createElement("input", {
			    style: InputCss,
			    className: "flex-grow w-100 outline-none",
			    type: "text",
			    placeholder,
			    name: "search",
			    onChange: handleChange,
			    value,
			    onKeyDown: (e) => onKeyDown && onKeyDown(e),
			    onBlur: handleInputBlur,
			    onFocus: handleInputFocus
			  }), actions, value !== "" && /* @__PURE__ */ React__default.createElement(Icon$1, {
			    className: "ml-8",
			    name: "close",
			    size: 20,
			    clickable: true,
			    onClick: handleClick
			  }));
			}

			let nanoid = (size = 21) => {
			  let id = '';
			  let bytes = crypto.getRandomValues(new Uint8Array(size));
			  while (size--) {
			    let byte = bytes[size] & 63;
			    if (byte < 36) {
			      id += byte.toString(36);
			    } else if (byte < 62) {
			      id += (byte - 26).toString(36).toUpperCase();
			    } else if (byte < 63) {
			      id += '_';
			    } else {
			      id += '-';
			    }
			  }
			  return id
			};

			function uuid() {
			  return nanoid();
			}

			var __defProp$1 = Object.defineProperty;
			var __defProps$1 = Object.defineProperties;
			var __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;
			var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
			var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
			var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
			var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
			var __spreadValues$1 = (a, b) => {
			  for (var prop in b || (b = {}))
			    if (__hasOwnProp$1.call(b, prop))
			      __defNormalProp$1(a, prop, b[prop]);
			  if (__getOwnPropSymbols$1)
			    for (var prop of __getOwnPropSymbols$1(b)) {
			      if (__propIsEnum$1.call(b, prop))
			        __defNormalProp$1(a, prop, b[prop]);
			    }
			  return a;
			};
			var __spreadProps$1 = (a, b) => __defProps$1(a, __getOwnPropDescs$1(b));
			var __objRest = (source, exclude) => {
			  var target = {};
			  for (var prop in source)
			    if (__hasOwnProp$1.call(source, prop) && exclude.indexOf(prop) < 0)
			      target[prop] = source[prop];
			  if (source != null && __getOwnPropSymbols$1)
			    for (var prop of __getOwnPropSymbols$1(source)) {
			      if (exclude.indexOf(prop) < 0 && __propIsEnum$1.call(source, prop))
			        target[prop] = source[prop];
			    }
			  return target;
			};
			function InternalRadio(props, ref) {
			  const _a = props, {
			    defaultChecked,
			    error,
			    className,
			    radioClass,
			    onChange,
			    label,
			    checked: isChecked,
			    disabled
			  } = _a, inputProps = __objRest(_a, [
			    "defaultChecked",
			    "error",
			    "className",
			    "radioClass",
			    "onChange",
			    "label",
			    "checked",
			    "disabled"
			  ]);
			  const [checked, setChecked] = useState(defaultChecked);
			  const id = uuid();
			  useEffect(() => {
			    setChecked(!!isChecked);
			  }, [isChecked]);
			  useEffect(() => {
			    setChecked(!!defaultChecked);
			  }, [defaultChecked]);
			  function handleChange(checked2) {
			    if (disabled) {
			      return;
			    }
			    setChecked(checked2);
			    onChange && onChange(props.value);
			  }
			  return /* @__PURE__ */ React__default.createElement("div", {
			    className: cs("flex items-center", className)
			  }, /* @__PURE__ */ React__default.createElement("div", {
			    className: cs("w-16 h-16 mr-8 border flex justify-center items-center transition cursor-pointer", {
			      "bg-white": !checked,
			      "bg-blue-600": checked,
			      "border-red-600": error,
			      "border-gray-400": !error,
			      "bg-gray-200": disabled
			    }, disabled ? "cursor-not-allowed" : "cursor-pointer", radioClass),
			    style: { borderRadius: "50%" },
			    onClick: () => handleChange(true)
			  }, /* @__PURE__ */ React__default.createElement("input", __spreadProps$1(__spreadValues$1({}, inputProps), {
			    ref,
			    checked,
			    type: "radio",
			    id,
			    className: "hidden",
			    disabled,
			    onChange: (e) => {
			      const { checked: checked2 } = e.target;
			      handleChange(checked2);
			    }
			  })), /* @__PURE__ */ React__default.createElement("span", {
			    className: cs("w-8 h-8 bg-white transition", {
			      "opacity-0": !checked,
			      "opacity-1": checked
			    }),
			    style: { borderRadius: "50%" }
			  })), /* @__PURE__ */ React__default.createElement("label", {
			    htmlFor: id,
			    className: cs("cursor-pointer", {
			      "cursor-not-allowed": disabled
			    })
			  }, label));
			}
			const Radio = exports('Radio', forwardRef(InternalRadio));

			function RadioGroup({ children, onChange }) {
			  const [checkedIndex, setCheckedIndex] = useState(-1);
			  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, Children.map(children, (child, index) => {
			    if (isValidElement(child) && child.props.value !== null) {
			      return React__default.cloneElement(child, {
			        onChange: (value) => {
			          setCheckedIndex(index);
			          onChange(value);
			        },
			        checked: checkedIndex === index
			      });
			    }
			    return child;
			  }));
			}

			var css$4 = ".img {\n  position: relative;\n  height: 100px;\n  width: 100px;\n  cursor: pointer;\n  border-width: 1px;\n  text-align: center;\n  line-height: 100px;\n  border: 1px solid var(--gray-400);\n}\n.img:hover > div {\n  display: block;\n}\n.img-preview {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  display: none;\n  width: 100%;\n  background-color: var(--gray-600);\n  --tw-text-opacity: 1;\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\n  opacity: 0.5;\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 240ms;\n}\n.img-mask {\n  position: fixed;\n  top: 0px;\n  left: 0px;\n  z-index: 20;\n  background-color: var(--gray-900);\n  padding: 20px;\n  --tw-text-opacity: 1;\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\n  width: 100vw;\n  height: 100vh;\n  opacity: 0.65;\n}\n.large-img {\n  position: relative;\n  margin: auto;\n  width: 900px;\n  height: 480px;\n  top: 50%;\n  transform: translateY(-50%);\n}";
			n$3(css$4,{});

			function Image(props) {
			  const { imageUrl, fillMode, preview, closeOnMaskClick } = props;
			  const [imgPreview, setImgPreview] = useState(false);
			  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement("div", {
			    className: "img",
			    style: {
			      backgroundImage: imageUrl ? `url(${imageUrl})` : "",
			      backgroundSize: fillMode ? `${fillMode}` : "cover"
			    }
			  }, !imageUrl && /* @__PURE__ */ React__default.createElement(Icon$1, {
			    name: "add_photo_alternate",
			    size: 42
			  }), preview && /* @__PURE__ */ React__default.createElement("div", {
			    className: "img-preview",
			    onClick: () => setImgPreview(true)
			  }, /* @__PURE__ */ React__default.createElement(Icon$1, {
			    name: "search"
			  }))), imgPreview && /* @__PURE__ */ React__default.createElement("div", {
			    className: "img-mask",
			    onClick: () => closeOnMaskClick && setImgPreview(false)
			  }, /* @__PURE__ */ React__default.createElement("div", {
			    className: "flex justify-between text-white"
			  }, /* @__PURE__ */ React__default.createElement("div", null, imageUrl), /* @__PURE__ */ React__default.createElement(Icon$1, {
			    name: "close",
			    clickable: true,
			    onClick: () => setImgPreview(false)
			  })), imageUrl && /* @__PURE__ */ React__default.createElement("img", {
			    onClick: (e) => e.stopPropagation(),
			    className: "large-img",
			    src: imageUrl
			  })));
			}

			function Input(props) {
			  const { placeholder, type } = props;
			  return /* @__PURE__ */ React__default.createElement("div", null, /* @__PURE__ */ React__default.createElement("input", {
			    type,
			    placeholder
			  }));
			}

			var css$3 = ".radio-group-btn:first-child {\n  border-radius: 8px 0 0 8px;\n}\n.radio-group-btn:last-child {\n  border-radius: 0 8px 8px 0;\n}\n.radio-group-btn label {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  padding: 5px 16px;\n  color: var(--gray-600);\n}\n.radio-group-btn-active {\n  border: 1px solid var(--blue-600);\n}\n.radio-group-btn-active label {\n  color: var(--blue-600);\n}";
			n$3(css$3,{});

			function RadioButtonGroup({ listData, currentValue, disabled, onChange, className: groupWrapClass, radioBtnClass, radioLabelRender }) {
			  return /* @__PURE__ */ React__default.createElement("div", {
			    className: cs("radio-btn-group-wrap flex items-center", groupWrapClass)
			  }, /* @__PURE__ */ React__default.createElement(RadioGroup, {
			    onChange
			  }, listData == null ? void 0 : listData.map(({ label, value }) => /* @__PURE__ */ React__default.createElement(Radio, {
			    disabled,
			    key: value,
			    label: radioLabelRender ? radioLabelRender({ label, value }) : label,
			    value,
			    radioClass: "hidden",
			    className: cs("radio-group-btn justify-center border-1 border-gray-300 -ml-1", {
			      "radio-group-btn-active bg-blue-100": currentValue === value,
			      "hover:bg-blue-100": !disabled,
			      "opacity-60": disabled
			    }, radioBtnClass),
			    defaultChecked: currentValue === value
			  }))));
			}

			var lib = {};

			var flattenNames$1 = {};

			/** Detect free variable `global` from Node.js. */

			var freeGlobal$3 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

			var _freeGlobal = freeGlobal$3;

			var freeGlobal$2 = _freeGlobal;

			/** Detect free variable `self`. */
			var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;

			/** Used as a reference to the global object. */
			var root$a = freeGlobal$2 || freeSelf$1 || Function('return this')();

			var _root = root$a;

			var root$9 = _root;

			/** Built-in value references. */
			var Symbol$8 = root$9.Symbol;

			var _Symbol = Symbol$8;

			var Symbol$7 = _Symbol;

			/** Used for built-in method references. */
			var objectProto$u = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$p = objectProto$u.hasOwnProperty;

			/**
			 * Used to resolve the
			 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
			 * of values.
			 */
			var nativeObjectToString$3 = objectProto$u.toString;

			/** Built-in value references. */
			var symToStringTag$3 = Symbol$7 ? Symbol$7.toStringTag : undefined;

			/**
			 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
			 *
			 * @private
			 * @param {*} value The value to query.
			 * @returns {string} Returns the raw `toStringTag`.
			 */
			function getRawTag$2(value) {
			  var isOwn = hasOwnProperty$p.call(value, symToStringTag$3),
			      tag = value[symToStringTag$3];

			  try {
			    value[symToStringTag$3] = undefined;
			    var unmasked = true;
			  } catch (e) {}

			  var result = nativeObjectToString$3.call(value);
			  if (unmasked) {
			    if (isOwn) {
			      value[symToStringTag$3] = tag;
			    } else {
			      delete value[symToStringTag$3];
			    }
			  }
			  return result;
			}

			var _getRawTag = getRawTag$2;

			/** Used for built-in method references. */

			var objectProto$t = Object.prototype;

			/**
			 * Used to resolve the
			 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
			 * of values.
			 */
			var nativeObjectToString$2 = objectProto$t.toString;

			/**
			 * Converts `value` to a string using `Object.prototype.toString`.
			 *
			 * @private
			 * @param {*} value The value to convert.
			 * @returns {string} Returns the converted string.
			 */
			function objectToString$2(value) {
			  return nativeObjectToString$2.call(value);
			}

			var _objectToString = objectToString$2;

			var Symbol$6 = _Symbol,
			    getRawTag$1 = _getRawTag,
			    objectToString$1 = _objectToString;

			/** `Object#toString` result references. */
			var nullTag$1 = '[object Null]',
			    undefinedTag$1 = '[object Undefined]';

			/** Built-in value references. */
			var symToStringTag$2 = Symbol$6 ? Symbol$6.toStringTag : undefined;

			/**
			 * The base implementation of `getTag` without fallbacks for buggy environments.
			 *
			 * @private
			 * @param {*} value The value to query.
			 * @returns {string} Returns the `toStringTag`.
			 */
			function baseGetTag$8(value) {
			  if (value == null) {
			    return value === undefined ? undefinedTag$1 : nullTag$1;
			  }
			  return (symToStringTag$2 && symToStringTag$2 in Object(value))
			    ? getRawTag$1(value)
			    : objectToString$1(value);
			}

			var _baseGetTag = baseGetTag$8;

			/**
			 * Checks if `value` is classified as an `Array` object.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
			 * @example
			 *
			 * _.isArray([1, 2, 3]);
			 * // => true
			 *
			 * _.isArray(document.body.children);
			 * // => false
			 *
			 * _.isArray('abc');
			 * // => false
			 *
			 * _.isArray(_.noop);
			 * // => false
			 */

			var isArray$d = Array.isArray;

			var isArray_1 = isArray$d;

			/**
			 * Checks if `value` is object-like. A value is object-like if it's not `null`
			 * and has a `typeof` result of "object".
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
			 * @example
			 *
			 * _.isObjectLike({});
			 * // => true
			 *
			 * _.isObjectLike([1, 2, 3]);
			 * // => true
			 *
			 * _.isObjectLike(_.noop);
			 * // => false
			 *
			 * _.isObjectLike(null);
			 * // => false
			 */

			function isObjectLike$a(value) {
			  return value != null && typeof value == 'object';
			}

			var isObjectLike_1 = isObjectLike$a;

			var baseGetTag$7 = _baseGetTag,
			    isArray$c = isArray_1,
			    isObjectLike$9 = isObjectLike_1;

			/** `Object#toString` result references. */
			var stringTag$6 = '[object String]';

			/**
			 * Checks if `value` is classified as a `String` primitive or object.
			 *
			 * @static
			 * @since 0.1.0
			 * @memberOf _
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
			 * @example
			 *
			 * _.isString('abc');
			 * // => true
			 *
			 * _.isString(1);
			 * // => false
			 */
			function isString(value) {
			  return typeof value == 'string' ||
			    (!isArray$c(value) && isObjectLike$9(value) && baseGetTag$7(value) == stringTag$6);
			}

			var isString_1 = isString;

			/**
			 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
			 *
			 * @private
			 * @param {boolean} [fromRight] Specify iterating from right to left.
			 * @returns {Function} Returns the new base function.
			 */

			function createBaseFor$2(fromRight) {
			  return function(object, iteratee, keysFunc) {
			    var index = -1,
			        iterable = Object(object),
			        props = keysFunc(object),
			        length = props.length;

			    while (length--) {
			      var key = props[fromRight ? length : ++index];
			      if (iteratee(iterable[key], key, iterable) === false) {
			        break;
			      }
			    }
			    return object;
			  };
			}

			var _createBaseFor = createBaseFor$2;

			var createBaseFor$1 = _createBaseFor;

			/**
			 * The base implementation of `baseForOwn` which iterates over `object`
			 * properties returned by `keysFunc` and invokes `iteratee` for each property.
			 * Iteratee functions may exit iteration early by explicitly returning `false`.
			 *
			 * @private
			 * @param {Object} object The object to iterate over.
			 * @param {Function} iteratee The function invoked per iteration.
			 * @param {Function} keysFunc The function to get the keys of `object`.
			 * @returns {Object} Returns `object`.
			 */
			var baseFor$3 = createBaseFor$1();

			var _baseFor = baseFor$3;

			/**
			 * The base implementation of `_.times` without support for iteratee shorthands
			 * or max array length checks.
			 *
			 * @private
			 * @param {number} n The number of times to invoke `iteratee`.
			 * @param {Function} iteratee The function invoked per iteration.
			 * @returns {Array} Returns the array of results.
			 */

			function baseTimes$2(n, iteratee) {
			  var index = -1,
			      result = Array(n);

			  while (++index < n) {
			    result[index] = iteratee(index);
			  }
			  return result;
			}

			var _baseTimes = baseTimes$2;

			var baseGetTag$6 = _baseGetTag,
			    isObjectLike$8 = isObjectLike_1;

			/** `Object#toString` result references. */
			var argsTag$6 = '[object Arguments]';

			/**
			 * The base implementation of `_.isArguments`.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
			 */
			function baseIsArguments$2(value) {
			  return isObjectLike$8(value) && baseGetTag$6(value) == argsTag$6;
			}

			var _baseIsArguments = baseIsArguments$2;

			var baseIsArguments$1 = _baseIsArguments,
			    isObjectLike$7 = isObjectLike_1;

			/** Used for built-in method references. */
			var objectProto$s = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$o = objectProto$s.hasOwnProperty;

			/** Built-in value references. */
			var propertyIsEnumerable$3 = objectProto$s.propertyIsEnumerable;

			/**
			 * Checks if `value` is likely an `arguments` object.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
			 *  else `false`.
			 * @example
			 *
			 * _.isArguments(function() { return arguments; }());
			 * // => true
			 *
			 * _.isArguments([1, 2, 3]);
			 * // => false
			 */
			var isArguments$4 = baseIsArguments$1(function() { return arguments; }()) ? baseIsArguments$1 : function(value) {
			  return isObjectLike$7(value) && hasOwnProperty$o.call(value, 'callee') &&
			    !propertyIsEnumerable$3.call(value, 'callee');
			};

			var isArguments_1 = isArguments$4;

			var isBuffer$5 = {exports: {}};

			/**
			 * This method returns `false`.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.13.0
			 * @category Util
			 * @returns {boolean} Returns `false`.
			 * @example
			 *
			 * _.times(2, _.stubFalse);
			 * // => [false, false]
			 */

			function stubFalse$1() {
			  return false;
			}

			var stubFalse_1 = stubFalse$1;

			(function (module, exports) {
			var root = _root,
			    stubFalse = stubFalse_1;

			/** Detect free variable `exports`. */
			var freeExports = exports && !exports.nodeType && exports;

			/** Detect free variable `module`. */
			var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

			/** Detect the popular CommonJS extension `module.exports`. */
			var moduleExports = freeModule && freeModule.exports === freeExports;

			/** Built-in value references. */
			var Buffer = moduleExports ? root.Buffer : undefined;

			/* Built-in method references for those with the same name as other `lodash` methods. */
			var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

			/**
			 * Checks if `value` is a buffer.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.3.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
			 * @example
			 *
			 * _.isBuffer(new Buffer(2));
			 * // => true
			 *
			 * _.isBuffer(new Uint8Array(2));
			 * // => false
			 */
			var isBuffer = nativeIsBuffer || stubFalse;

			module.exports = isBuffer;
			}(isBuffer$5, isBuffer$5.exports));

			/** Used as references for various `Number` constants. */

			var MAX_SAFE_INTEGER$3 = 9007199254740991;

			/** Used to detect unsigned integer values. */
			var reIsUint$1 = /^(?:0|[1-9]\d*)$/;

			/**
			 * Checks if `value` is a valid array-like index.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
			 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
			 */
			function isIndex$3(value, length) {
			  var type = typeof value;
			  length = length == null ? MAX_SAFE_INTEGER$3 : length;

			  return !!length &&
			    (type == 'number' ||
			      (type != 'symbol' && reIsUint$1.test(value))) &&
			        (value > -1 && value % 1 == 0 && value < length);
			}

			var _isIndex = isIndex$3;

			/** Used as references for various `Number` constants. */

			var MAX_SAFE_INTEGER$2 = 9007199254740991;

			/**
			 * Checks if `value` is a valid array-like length.
			 *
			 * **Note:** This method is loosely based on
			 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
			 * @example
			 *
			 * _.isLength(3);
			 * // => true
			 *
			 * _.isLength(Number.MIN_VALUE);
			 * // => false
			 *
			 * _.isLength(Infinity);
			 * // => false
			 *
			 * _.isLength('3');
			 * // => false
			 */
			function isLength$4(value) {
			  return typeof value == 'number' &&
			    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$2;
			}

			var isLength_1 = isLength$4;

			var baseGetTag$5 = _baseGetTag,
			    isLength$3 = isLength_1,
			    isObjectLike$6 = isObjectLike_1;

			/** `Object#toString` result references. */
			var argsTag$5 = '[object Arguments]',
			    arrayTag$4 = '[object Array]',
			    boolTag$5 = '[object Boolean]',
			    dateTag$5 = '[object Date]',
			    errorTag$4 = '[object Error]',
			    funcTag$4 = '[object Function]',
			    mapTag$8 = '[object Map]',
			    numberTag$5 = '[object Number]',
			    objectTag$8 = '[object Object]',
			    regexpTag$5 = '[object RegExp]',
			    setTag$8 = '[object Set]',
			    stringTag$5 = '[object String]',
			    weakMapTag$4 = '[object WeakMap]';

			var arrayBufferTag$5 = '[object ArrayBuffer]',
			    dataViewTag$7 = '[object DataView]',
			    float32Tag$3 = '[object Float32Array]',
			    float64Tag$3 = '[object Float64Array]',
			    int8Tag$3 = '[object Int8Array]',
			    int16Tag$3 = '[object Int16Array]',
			    int32Tag$3 = '[object Int32Array]',
			    uint8Tag$3 = '[object Uint8Array]',
			    uint8ClampedTag$3 = '[object Uint8ClampedArray]',
			    uint16Tag$3 = '[object Uint16Array]',
			    uint32Tag$3 = '[object Uint32Array]';

			/** Used to identify `toStringTag` values of typed arrays. */
			var typedArrayTags$1 = {};
			typedArrayTags$1[float32Tag$3] = typedArrayTags$1[float64Tag$3] =
			typedArrayTags$1[int8Tag$3] = typedArrayTags$1[int16Tag$3] =
			typedArrayTags$1[int32Tag$3] = typedArrayTags$1[uint8Tag$3] =
			typedArrayTags$1[uint8ClampedTag$3] = typedArrayTags$1[uint16Tag$3] =
			typedArrayTags$1[uint32Tag$3] = true;
			typedArrayTags$1[argsTag$5] = typedArrayTags$1[arrayTag$4] =
			typedArrayTags$1[arrayBufferTag$5] = typedArrayTags$1[boolTag$5] =
			typedArrayTags$1[dataViewTag$7] = typedArrayTags$1[dateTag$5] =
			typedArrayTags$1[errorTag$4] = typedArrayTags$1[funcTag$4] =
			typedArrayTags$1[mapTag$8] = typedArrayTags$1[numberTag$5] =
			typedArrayTags$1[objectTag$8] = typedArrayTags$1[regexpTag$5] =
			typedArrayTags$1[setTag$8] = typedArrayTags$1[stringTag$5] =
			typedArrayTags$1[weakMapTag$4] = false;

			/**
			 * The base implementation of `_.isTypedArray` without Node.js optimizations.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
			 */
			function baseIsTypedArray$2(value) {
			  return isObjectLike$6(value) &&
			    isLength$3(value.length) && !!typedArrayTags$1[baseGetTag$5(value)];
			}

			var _baseIsTypedArray = baseIsTypedArray$2;

			/**
			 * The base implementation of `_.unary` without support for storing metadata.
			 *
			 * @private
			 * @param {Function} func The function to cap arguments for.
			 * @returns {Function} Returns the new capped function.
			 */

			function baseUnary$4(func) {
			  return function(value) {
			    return func(value);
			  };
			}

			var _baseUnary = baseUnary$4;

			var _nodeUtil = {exports: {}};

			(function (module, exports) {
			var freeGlobal = _freeGlobal;

			/** Detect free variable `exports`. */
			var freeExports = exports && !exports.nodeType && exports;

			/** Detect free variable `module`. */
			var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

			/** Detect the popular CommonJS extension `module.exports`. */
			var moduleExports = freeModule && freeModule.exports === freeExports;

			/** Detect free variable `process` from Node.js. */
			var freeProcess = moduleExports && freeGlobal.process;

			/** Used to access faster Node.js helpers. */
			var nodeUtil = (function() {
			  try {
			    // Use `util.types` for Node.js 10+.
			    var types = freeModule && freeModule.require && freeModule.require('util').types;

			    if (types) {
			      return types;
			    }

			    // Legacy `process.binding('util')` for Node.js < 10.
			    return freeProcess && freeProcess.binding && freeProcess.binding('util');
			  } catch (e) {}
			}());

			module.exports = nodeUtil;
			}(_nodeUtil, _nodeUtil.exports));

			var baseIsTypedArray$1 = _baseIsTypedArray,
			    baseUnary$3 = _baseUnary,
			    nodeUtil$4 = _nodeUtil.exports;

			/* Node.js helper references. */
			var nodeIsTypedArray$1 = nodeUtil$4 && nodeUtil$4.isTypedArray;

			/**
			 * Checks if `value` is classified as a typed array.
			 *
			 * @static
			 * @memberOf _
			 * @since 3.0.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
			 * @example
			 *
			 * _.isTypedArray(new Uint8Array);
			 * // => true
			 *
			 * _.isTypedArray([]);
			 * // => false
			 */
			var isTypedArray$4 = nodeIsTypedArray$1 ? baseUnary$3(nodeIsTypedArray$1) : baseIsTypedArray$1;

			var isTypedArray_1 = isTypedArray$4;

			var baseTimes$1 = _baseTimes,
			    isArguments$3 = isArguments_1,
			    isArray$b = isArray_1,
			    isBuffer$4 = isBuffer$5.exports,
			    isIndex$2 = _isIndex,
			    isTypedArray$3 = isTypedArray_1;

			/** Used for built-in method references. */
			var objectProto$r = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$n = objectProto$r.hasOwnProperty;

			/**
			 * Creates an array of the enumerable property names of the array-like `value`.
			 *
			 * @private
			 * @param {*} value The value to query.
			 * @param {boolean} inherited Specify returning inherited property names.
			 * @returns {Array} Returns the array of property names.
			 */
			function arrayLikeKeys$3(value, inherited) {
			  var isArr = isArray$b(value),
			      isArg = !isArr && isArguments$3(value),
			      isBuff = !isArr && !isArg && isBuffer$4(value),
			      isType = !isArr && !isArg && !isBuff && isTypedArray$3(value),
			      skipIndexes = isArr || isArg || isBuff || isType,
			      result = skipIndexes ? baseTimes$1(value.length, String) : [],
			      length = result.length;

			  for (var key in value) {
			    if ((inherited || hasOwnProperty$n.call(value, key)) &&
			        !(skipIndexes && (
			           // Safari 9 has enumerable `arguments.length` in strict mode.
			           key == 'length' ||
			           // Node.js 0.10 has enumerable non-index properties on buffers.
			           (isBuff && (key == 'offset' || key == 'parent')) ||
			           // PhantomJS 2 has enumerable non-index properties on typed arrays.
			           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
			           // Skip index properties.
			           isIndex$2(key, length)
			        ))) {
			      result.push(key);
			    }
			  }
			  return result;
			}

			var _arrayLikeKeys = arrayLikeKeys$3;

			/** Used for built-in method references. */

			var objectProto$q = Object.prototype;

			/**
			 * Checks if `value` is likely a prototype object.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
			 */
			function isPrototype$4(value) {
			  var Ctor = value && value.constructor,
			      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$q;

			  return value === proto;
			}

			var _isPrototype = isPrototype$4;

			/**
			 * Creates a unary function that invokes `func` with its argument transformed.
			 *
			 * @private
			 * @param {Function} func The function to wrap.
			 * @param {Function} transform The argument transform.
			 * @returns {Function} Returns the new function.
			 */

			function overArg$3(func, transform) {
			  return function(arg) {
			    return func(transform(arg));
			  };
			}

			var _overArg = overArg$3;

			var overArg$2 = _overArg;

			/* Built-in method references for those with the same name as other `lodash` methods. */
			var nativeKeys$3 = overArg$2(Object.keys, Object);

			var _nativeKeys = nativeKeys$3;

			var isPrototype$3 = _isPrototype,
			    nativeKeys$2 = _nativeKeys;

			/** Used for built-in method references. */
			var objectProto$p = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$m = objectProto$p.hasOwnProperty;

			/**
			 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of property names.
			 */
			function baseKeys$2(object) {
			  if (!isPrototype$3(object)) {
			    return nativeKeys$2(object);
			  }
			  var result = [];
			  for (var key in Object(object)) {
			    if (hasOwnProperty$m.call(object, key) && key != 'constructor') {
			      result.push(key);
			    }
			  }
			  return result;
			}

			var _baseKeys = baseKeys$2;

			/**
			 * Checks if `value` is the
			 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
			 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
			 * @example
			 *
			 * _.isObject({});
			 * // => true
			 *
			 * _.isObject([1, 2, 3]);
			 * // => true
			 *
			 * _.isObject(_.noop);
			 * // => true
			 *
			 * _.isObject(null);
			 * // => false
			 */

			function isObject$7(value) {
			  var type = typeof value;
			  return value != null && (type == 'object' || type == 'function');
			}

			var isObject_1 = isObject$7;

			var baseGetTag$4 = _baseGetTag,
			    isObject$6 = isObject_1;

			/** `Object#toString` result references. */
			var asyncTag$1 = '[object AsyncFunction]',
			    funcTag$3 = '[object Function]',
			    genTag$2 = '[object GeneratorFunction]',
			    proxyTag$1 = '[object Proxy]';

			/**
			 * Checks if `value` is classified as a `Function` object.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
			 * @example
			 *
			 * _.isFunction(_);
			 * // => true
			 *
			 * _.isFunction(/abc/);
			 * // => false
			 */
			function isFunction$3(value) {
			  if (!isObject$6(value)) {
			    return false;
			  }
			  // The use of `Object#toString` avoids issues with the `typeof` operator
			  // in Safari 9 which returns 'object' for typed arrays and other constructors.
			  var tag = baseGetTag$4(value);
			  return tag == funcTag$3 || tag == genTag$2 || tag == asyncTag$1 || tag == proxyTag$1;
			}

			var isFunction_1 = isFunction$3;

			var isFunction$2 = isFunction_1,
			    isLength$2 = isLength_1;

			/**
			 * Checks if `value` is array-like. A value is considered array-like if it's
			 * not a function and has a `value.length` that's an integer greater than or
			 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
			 * @example
			 *
			 * _.isArrayLike([1, 2, 3]);
			 * // => true
			 *
			 * _.isArrayLike(document.body.children);
			 * // => true
			 *
			 * _.isArrayLike('abc');
			 * // => true
			 *
			 * _.isArrayLike(_.noop);
			 * // => false
			 */
			function isArrayLike$5(value) {
			  return value != null && isLength$2(value.length) && !isFunction$2(value);
			}

			var isArrayLike_1 = isArrayLike$5;

			var arrayLikeKeys$2 = _arrayLikeKeys,
			    baseKeys$1 = _baseKeys,
			    isArrayLike$4 = isArrayLike_1;

			/**
			 * Creates an array of the own enumerable property names of `object`.
			 *
			 * **Note:** Non-object values are coerced to objects. See the
			 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
			 * for more details.
			 *
			 * @static
			 * @since 0.1.0
			 * @memberOf _
			 * @category Object
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of property names.
			 * @example
			 *
			 * function Foo() {
			 *   this.a = 1;
			 *   this.b = 2;
			 * }
			 *
			 * Foo.prototype.c = 3;
			 *
			 * _.keys(new Foo);
			 * // => ['a', 'b'] (iteration order is not guaranteed)
			 *
			 * _.keys('hi');
			 * // => ['0', '1']
			 */
			function keys$6(object) {
			  return isArrayLike$4(object) ? arrayLikeKeys$2(object) : baseKeys$1(object);
			}

			var keys_1 = keys$6;

			var baseFor$2 = _baseFor,
			    keys$5 = keys_1;

			/**
			 * The base implementation of `_.forOwn` without support for iteratee shorthands.
			 *
			 * @private
			 * @param {Object} object The object to iterate over.
			 * @param {Function} iteratee The function invoked per iteration.
			 * @returns {Object} Returns `object`.
			 */
			function baseForOwn$3(object, iteratee) {
			  return object && baseFor$2(object, iteratee, keys$5);
			}

			var _baseForOwn = baseForOwn$3;

			/**
			 * This method returns the first argument it receives.
			 *
			 * @static
			 * @since 0.1.0
			 * @memberOf _
			 * @category Util
			 * @param {*} value Any value.
			 * @returns {*} Returns `value`.
			 * @example
			 *
			 * var object = { 'a': 1 };
			 *
			 * console.log(_.identity(object) === object);
			 * // => true
			 */

			function identity$3(value) {
			  return value;
			}

			var identity_1 = identity$3;

			var identity$2 = identity_1;

			/**
			 * Casts `value` to `identity` if it's not a function.
			 *
			 * @private
			 * @param {*} value The value to inspect.
			 * @returns {Function} Returns cast function.
			 */
			function castFunction$2(value) {
			  return typeof value == 'function' ? value : identity$2;
			}

			var _castFunction = castFunction$2;

			var baseForOwn$2 = _baseForOwn,
			    castFunction$1 = _castFunction;

			/**
			 * Iterates over own enumerable string keyed properties of an object and
			 * invokes `iteratee` for each property. The iteratee is invoked with three
			 * arguments: (value, key, object). Iteratee functions may exit iteration
			 * early by explicitly returning `false`.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.3.0
			 * @category Object
			 * @param {Object} object The object to iterate over.
			 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
			 * @returns {Object} Returns `object`.
			 * @see _.forOwnRight
			 * @example
			 *
			 * function Foo() {
			 *   this.a = 1;
			 *   this.b = 2;
			 * }
			 *
			 * Foo.prototype.c = 3;
			 *
			 * _.forOwn(new Foo, function(value, key) {
			 *   console.log(key);
			 * });
			 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
			 */
			function forOwn(object, iteratee) {
			  return object && baseForOwn$2(object, castFunction$1(iteratee));
			}

			var forOwn_1 = forOwn;

			var overArg$1 = _overArg;

			/** Built-in value references. */
			var getPrototype$5 = overArg$1(Object.getPrototypeOf, Object);

			var _getPrototype = getPrototype$5;

			var baseGetTag$3 = _baseGetTag,
			    getPrototype$4 = _getPrototype,
			    isObjectLike$5 = isObjectLike_1;

			/** `Object#toString` result references. */
			var objectTag$7 = '[object Object]';

			/** Used for built-in method references. */
			var funcProto$5 = Function.prototype,
			    objectProto$o = Object.prototype;

			/** Used to resolve the decompiled source of functions. */
			var funcToString$5 = funcProto$5.toString;

			/** Used to check objects for own properties. */
			var hasOwnProperty$l = objectProto$o.hasOwnProperty;

			/** Used to infer the `Object` constructor. */
			var objectCtorString$1 = funcToString$5.call(Object);

			/**
			 * Checks if `value` is a plain object, that is, an object created by the
			 * `Object` constructor or one with a `[[Prototype]]` of `null`.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.8.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
			 * @example
			 *
			 * function Foo() {
			 *   this.a = 1;
			 * }
			 *
			 * _.isPlainObject(new Foo);
			 * // => false
			 *
			 * _.isPlainObject([1, 2, 3]);
			 * // => false
			 *
			 * _.isPlainObject({ 'x': 0, 'y': 0 });
			 * // => true
			 *
			 * _.isPlainObject(Object.create(null));
			 * // => true
			 */
			function isPlainObject$1(value) {
			  if (!isObjectLike$5(value) || baseGetTag$3(value) != objectTag$7) {
			    return false;
			  }
			  var proto = getPrototype$4(value);
			  if (proto === null) {
			    return true;
			  }
			  var Ctor = hasOwnProperty$l.call(proto, 'constructor') && proto.constructor;
			  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
			    funcToString$5.call(Ctor) == objectCtorString$1;
			}

			var isPlainObject_1 = isPlainObject$1;

			/**
			 * A specialized version of `_.map` for arrays without support for iteratee
			 * shorthands.
			 *
			 * @private
			 * @param {Array} [array] The array to iterate over.
			 * @param {Function} iteratee The function invoked per iteration.
			 * @returns {Array} Returns the new mapped array.
			 */

			function arrayMap$3(array, iteratee) {
			  var index = -1,
			      length = array == null ? 0 : array.length,
			      result = Array(length);

			  while (++index < length) {
			    result[index] = iteratee(array[index], index, array);
			  }
			  return result;
			}

			var _arrayMap = arrayMap$3;

			/**
			 * Removes all key-value entries from the list cache.
			 *
			 * @private
			 * @name clear
			 * @memberOf ListCache
			 */

			function listCacheClear$2() {
			  this.__data__ = [];
			  this.size = 0;
			}

			var _listCacheClear = listCacheClear$2;

			/**
			 * Performs a
			 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
			 * comparison between two values to determine if they are equivalent.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to compare.
			 * @param {*} other The other value to compare.
			 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
			 * @example
			 *
			 * var object = { 'a': 1 };
			 * var other = { 'a': 1 };
			 *
			 * _.eq(object, object);
			 * // => true
			 *
			 * _.eq(object, other);
			 * // => false
			 *
			 * _.eq('a', 'a');
			 * // => true
			 *
			 * _.eq('a', Object('a'));
			 * // => false
			 *
			 * _.eq(NaN, NaN);
			 * // => true
			 */

			function eq$4(value, other) {
			  return value === other || (value !== value && other !== other);
			}

			var eq_1 = eq$4;

			var eq$3 = eq_1;

			/**
			 * Gets the index at which the `key` is found in `array` of key-value pairs.
			 *
			 * @private
			 * @param {Array} array The array to inspect.
			 * @param {*} key The key to search for.
			 * @returns {number} Returns the index of the matched value, else `-1`.
			 */
			function assocIndexOf$5(array, key) {
			  var length = array.length;
			  while (length--) {
			    if (eq$3(array[length][0], key)) {
			      return length;
			    }
			  }
			  return -1;
			}

			var _assocIndexOf = assocIndexOf$5;

			var assocIndexOf$4 = _assocIndexOf;

			/** Used for built-in method references. */
			var arrayProto$1 = Array.prototype;

			/** Built-in value references. */
			var splice$1 = arrayProto$1.splice;

			/**
			 * Removes `key` and its value from the list cache.
			 *
			 * @private
			 * @name delete
			 * @memberOf ListCache
			 * @param {string} key The key of the value to remove.
			 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
			 */
			function listCacheDelete$2(key) {
			  var data = this.__data__,
			      index = assocIndexOf$4(data, key);

			  if (index < 0) {
			    return false;
			  }
			  var lastIndex = data.length - 1;
			  if (index == lastIndex) {
			    data.pop();
			  } else {
			    splice$1.call(data, index, 1);
			  }
			  --this.size;
			  return true;
			}

			var _listCacheDelete = listCacheDelete$2;

			var assocIndexOf$3 = _assocIndexOf;

			/**
			 * Gets the list cache value for `key`.
			 *
			 * @private
			 * @name get
			 * @memberOf ListCache
			 * @param {string} key The key of the value to get.
			 * @returns {*} Returns the entry value.
			 */
			function listCacheGet$2(key) {
			  var data = this.__data__,
			      index = assocIndexOf$3(data, key);

			  return index < 0 ? undefined : data[index][1];
			}

			var _listCacheGet = listCacheGet$2;

			var assocIndexOf$2 = _assocIndexOf;

			/**
			 * Checks if a list cache value for `key` exists.
			 *
			 * @private
			 * @name has
			 * @memberOf ListCache
			 * @param {string} key The key of the entry to check.
			 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			 */
			function listCacheHas$2(key) {
			  return assocIndexOf$2(this.__data__, key) > -1;
			}

			var _listCacheHas = listCacheHas$2;

			var assocIndexOf$1 = _assocIndexOf;

			/**
			 * Sets the list cache `key` to `value`.
			 *
			 * @private
			 * @name set
			 * @memberOf ListCache
			 * @param {string} key The key of the value to set.
			 * @param {*} value The value to set.
			 * @returns {Object} Returns the list cache instance.
			 */
			function listCacheSet$2(key, value) {
			  var data = this.__data__,
			      index = assocIndexOf$1(data, key);

			  if (index < 0) {
			    ++this.size;
			    data.push([key, value]);
			  } else {
			    data[index][1] = value;
			  }
			  return this;
			}

			var _listCacheSet = listCacheSet$2;

			var listCacheClear$1 = _listCacheClear,
			    listCacheDelete$1 = _listCacheDelete,
			    listCacheGet$1 = _listCacheGet,
			    listCacheHas$1 = _listCacheHas,
			    listCacheSet$1 = _listCacheSet;

			/**
			 * Creates an list cache object.
			 *
			 * @private
			 * @constructor
			 * @param {Array} [entries] The key-value pairs to cache.
			 */
			function ListCache$5(entries) {
			  var index = -1,
			      length = entries == null ? 0 : entries.length;

			  this.clear();
			  while (++index < length) {
			    var entry = entries[index];
			    this.set(entry[0], entry[1]);
			  }
			}

			// Add methods to `ListCache`.
			ListCache$5.prototype.clear = listCacheClear$1;
			ListCache$5.prototype['delete'] = listCacheDelete$1;
			ListCache$5.prototype.get = listCacheGet$1;
			ListCache$5.prototype.has = listCacheHas$1;
			ListCache$5.prototype.set = listCacheSet$1;

			var _ListCache = ListCache$5;

			var ListCache$4 = _ListCache;

			/**
			 * Removes all key-value entries from the stack.
			 *
			 * @private
			 * @name clear
			 * @memberOf Stack
			 */
			function stackClear$2() {
			  this.__data__ = new ListCache$4;
			  this.size = 0;
			}

			var _stackClear = stackClear$2;

			/**
			 * Removes `key` and its value from the stack.
			 *
			 * @private
			 * @name delete
			 * @memberOf Stack
			 * @param {string} key The key of the value to remove.
			 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
			 */

			function stackDelete$2(key) {
			  var data = this.__data__,
			      result = data['delete'](key);

			  this.size = data.size;
			  return result;
			}

			var _stackDelete = stackDelete$2;

			/**
			 * Gets the stack value for `key`.
			 *
			 * @private
			 * @name get
			 * @memberOf Stack
			 * @param {string} key The key of the value to get.
			 * @returns {*} Returns the entry value.
			 */

			function stackGet$2(key) {
			  return this.__data__.get(key);
			}

			var _stackGet = stackGet$2;

			/**
			 * Checks if a stack value for `key` exists.
			 *
			 * @private
			 * @name has
			 * @memberOf Stack
			 * @param {string} key The key of the entry to check.
			 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			 */

			function stackHas$2(key) {
			  return this.__data__.has(key);
			}

			var _stackHas = stackHas$2;

			var root$8 = _root;

			/** Used to detect overreaching core-js shims. */
			var coreJsData$3 = root$8['__core-js_shared__'];

			var _coreJsData = coreJsData$3;

			var coreJsData$2 = _coreJsData;

			/** Used to detect methods masquerading as native. */
			var maskSrcKey$1 = (function() {
			  var uid = /[^.]+$/.exec(coreJsData$2 && coreJsData$2.keys && coreJsData$2.keys.IE_PROTO || '');
			  return uid ? ('Symbol(src)_1.' + uid) : '';
			}());

			/**
			 * Checks if `func` has its source masked.
			 *
			 * @private
			 * @param {Function} func The function to check.
			 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
			 */
			function isMasked$2(func) {
			  return !!maskSrcKey$1 && (maskSrcKey$1 in func);
			}

			var _isMasked = isMasked$2;

			/** Used for built-in method references. */

			var funcProto$4 = Function.prototype;

			/** Used to resolve the decompiled source of functions. */
			var funcToString$4 = funcProto$4.toString;

			/**
			 * Converts `func` to its source code.
			 *
			 * @private
			 * @param {Function} func The function to convert.
			 * @returns {string} Returns the source code.
			 */
			function toSource$3(func) {
			  if (func != null) {
			    try {
			      return funcToString$4.call(func);
			    } catch (e) {}
			    try {
			      return (func + '');
			    } catch (e) {}
			  }
			  return '';
			}

			var _toSource = toSource$3;

			var isFunction$1 = isFunction_1,
			    isMasked$1 = _isMasked,
			    isObject$5 = isObject_1,
			    toSource$2 = _toSource;

			/**
			 * Used to match `RegExp`
			 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
			 */
			var reRegExpChar$1 = /[\\^$.*+?()[\]{}|]/g;

			/** Used to detect host constructors (Safari). */
			var reIsHostCtor$1 = /^\[object .+?Constructor\]$/;

			/** Used for built-in method references. */
			var funcProto$3 = Function.prototype,
			    objectProto$n = Object.prototype;

			/** Used to resolve the decompiled source of functions. */
			var funcToString$3 = funcProto$3.toString;

			/** Used to check objects for own properties. */
			var hasOwnProperty$k = objectProto$n.hasOwnProperty;

			/** Used to detect if a method is native. */
			var reIsNative$1 = RegExp('^' +
			  funcToString$3.call(hasOwnProperty$k).replace(reRegExpChar$1, '\\$&')
			  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
			);

			/**
			 * The base implementation of `_.isNative` without bad shim checks.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a native function,
			 *  else `false`.
			 */
			function baseIsNative$2(value) {
			  if (!isObject$5(value) || isMasked$1(value)) {
			    return false;
			  }
			  var pattern = isFunction$1(value) ? reIsNative$1 : reIsHostCtor$1;
			  return pattern.test(toSource$2(value));
			}

			var _baseIsNative = baseIsNative$2;

			/**
			 * Gets the value at `key` of `object`.
			 *
			 * @private
			 * @param {Object} [object] The object to query.
			 * @param {string} key The key of the property to get.
			 * @returns {*} Returns the property value.
			 */

			function getValue$2(object, key) {
			  return object == null ? undefined : object[key];
			}

			var _getValue = getValue$2;

			var baseIsNative$1 = _baseIsNative,
			    getValue$1 = _getValue;

			/**
			 * Gets the native function at `key` of `object`.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @param {string} key The key of the method to get.
			 * @returns {*} Returns the function if it's native, else `undefined`.
			 */
			function getNative$8(object, key) {
			  var value = getValue$1(object, key);
			  return baseIsNative$1(value) ? value : undefined;
			}

			var _getNative = getNative$8;

			var getNative$7 = _getNative,
			    root$7 = _root;

			/* Built-in method references that are verified to be native. */
			var Map$6 = getNative$7(root$7, 'Map');

			var _Map = Map$6;

			var getNative$6 = _getNative;

			/* Built-in method references that are verified to be native. */
			var nativeCreate$6 = getNative$6(Object, 'create');

			var _nativeCreate = nativeCreate$6;

			var nativeCreate$5 = _nativeCreate;

			/**
			 * Removes all key-value entries from the hash.
			 *
			 * @private
			 * @name clear
			 * @memberOf Hash
			 */
			function hashClear$2() {
			  this.__data__ = nativeCreate$5 ? nativeCreate$5(null) : {};
			  this.size = 0;
			}

			var _hashClear = hashClear$2;

			/**
			 * Removes `key` and its value from the hash.
			 *
			 * @private
			 * @name delete
			 * @memberOf Hash
			 * @param {Object} hash The hash to modify.
			 * @param {string} key The key of the value to remove.
			 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
			 */

			function hashDelete$2(key) {
			  var result = this.has(key) && delete this.__data__[key];
			  this.size -= result ? 1 : 0;
			  return result;
			}

			var _hashDelete = hashDelete$2;

			var nativeCreate$4 = _nativeCreate;

			/** Used to stand-in for `undefined` hash values. */
			var HASH_UNDEFINED$5 = '__lodash_hash_undefined__';

			/** Used for built-in method references. */
			var objectProto$m = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$j = objectProto$m.hasOwnProperty;

			/**
			 * Gets the hash value for `key`.
			 *
			 * @private
			 * @name get
			 * @memberOf Hash
			 * @param {string} key The key of the value to get.
			 * @returns {*} Returns the entry value.
			 */
			function hashGet$2(key) {
			  var data = this.__data__;
			  if (nativeCreate$4) {
			    var result = data[key];
			    return result === HASH_UNDEFINED$5 ? undefined : result;
			  }
			  return hasOwnProperty$j.call(data, key) ? data[key] : undefined;
			}

			var _hashGet = hashGet$2;

			var nativeCreate$3 = _nativeCreate;

			/** Used for built-in method references. */
			var objectProto$l = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$i = objectProto$l.hasOwnProperty;

			/**
			 * Checks if a hash value for `key` exists.
			 *
			 * @private
			 * @name has
			 * @memberOf Hash
			 * @param {string} key The key of the entry to check.
			 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			 */
			function hashHas$2(key) {
			  var data = this.__data__;
			  return nativeCreate$3 ? (data[key] !== undefined) : hasOwnProperty$i.call(data, key);
			}

			var _hashHas = hashHas$2;

			var nativeCreate$2 = _nativeCreate;

			/** Used to stand-in for `undefined` hash values. */
			var HASH_UNDEFINED$4 = '__lodash_hash_undefined__';

			/**
			 * Sets the hash `key` to `value`.
			 *
			 * @private
			 * @name set
			 * @memberOf Hash
			 * @param {string} key The key of the value to set.
			 * @param {*} value The value to set.
			 * @returns {Object} Returns the hash instance.
			 */
			function hashSet$2(key, value) {
			  var data = this.__data__;
			  this.size += this.has(key) ? 0 : 1;
			  data[key] = (nativeCreate$2 && value === undefined) ? HASH_UNDEFINED$4 : value;
			  return this;
			}

			var _hashSet = hashSet$2;

			var hashClear$1 = _hashClear,
			    hashDelete$1 = _hashDelete,
			    hashGet$1 = _hashGet,
			    hashHas$1 = _hashHas,
			    hashSet$1 = _hashSet;

			/**
			 * Creates a hash object.
			 *
			 * @private
			 * @constructor
			 * @param {Array} [entries] The key-value pairs to cache.
			 */
			function Hash$2(entries) {
			  var index = -1,
			      length = entries == null ? 0 : entries.length;

			  this.clear();
			  while (++index < length) {
			    var entry = entries[index];
			    this.set(entry[0], entry[1]);
			  }
			}

			// Add methods to `Hash`.
			Hash$2.prototype.clear = hashClear$1;
			Hash$2.prototype['delete'] = hashDelete$1;
			Hash$2.prototype.get = hashGet$1;
			Hash$2.prototype.has = hashHas$1;
			Hash$2.prototype.set = hashSet$1;

			var _Hash = Hash$2;

			var Hash$1 = _Hash,
			    ListCache$3 = _ListCache,
			    Map$5 = _Map;

			/**
			 * Removes all key-value entries from the map.
			 *
			 * @private
			 * @name clear
			 * @memberOf MapCache
			 */
			function mapCacheClear$2() {
			  this.size = 0;
			  this.__data__ = {
			    'hash': new Hash$1,
			    'map': new (Map$5 || ListCache$3),
			    'string': new Hash$1
			  };
			}

			var _mapCacheClear = mapCacheClear$2;

			/**
			 * Checks if `value` is suitable for use as unique object key.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
			 */

			function isKeyable$2(value) {
			  var type = typeof value;
			  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
			    ? (value !== '__proto__')
			    : (value === null);
			}

			var _isKeyable = isKeyable$2;

			var isKeyable$1 = _isKeyable;

			/**
			 * Gets the data for `map`.
			 *
			 * @private
			 * @param {Object} map The map to query.
			 * @param {string} key The reference key.
			 * @returns {*} Returns the map data.
			 */
			function getMapData$5(map, key) {
			  var data = map.__data__;
			  return isKeyable$1(key)
			    ? data[typeof key == 'string' ? 'string' : 'hash']
			    : data.map;
			}

			var _getMapData = getMapData$5;

			var getMapData$4 = _getMapData;

			/**
			 * Removes `key` and its value from the map.
			 *
			 * @private
			 * @name delete
			 * @memberOf MapCache
			 * @param {string} key The key of the value to remove.
			 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
			 */
			function mapCacheDelete$2(key) {
			  var result = getMapData$4(this, key)['delete'](key);
			  this.size -= result ? 1 : 0;
			  return result;
			}

			var _mapCacheDelete = mapCacheDelete$2;

			var getMapData$3 = _getMapData;

			/**
			 * Gets the map value for `key`.
			 *
			 * @private
			 * @name get
			 * @memberOf MapCache
			 * @param {string} key The key of the value to get.
			 * @returns {*} Returns the entry value.
			 */
			function mapCacheGet$2(key) {
			  return getMapData$3(this, key).get(key);
			}

			var _mapCacheGet = mapCacheGet$2;

			var getMapData$2 = _getMapData;

			/**
			 * Checks if a map value for `key` exists.
			 *
			 * @private
			 * @name has
			 * @memberOf MapCache
			 * @param {string} key The key of the entry to check.
			 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			 */
			function mapCacheHas$2(key) {
			  return getMapData$2(this, key).has(key);
			}

			var _mapCacheHas = mapCacheHas$2;

			var getMapData$1 = _getMapData;

			/**
			 * Sets the map `key` to `value`.
			 *
			 * @private
			 * @name set
			 * @memberOf MapCache
			 * @param {string} key The key of the value to set.
			 * @param {*} value The value to set.
			 * @returns {Object} Returns the map cache instance.
			 */
			function mapCacheSet$2(key, value) {
			  var data = getMapData$1(this, key),
			      size = data.size;

			  data.set(key, value);
			  this.size += data.size == size ? 0 : 1;
			  return this;
			}

			var _mapCacheSet = mapCacheSet$2;

			var mapCacheClear$1 = _mapCacheClear,
			    mapCacheDelete$1 = _mapCacheDelete,
			    mapCacheGet$1 = _mapCacheGet,
			    mapCacheHas$1 = _mapCacheHas,
			    mapCacheSet$1 = _mapCacheSet;

			/**
			 * Creates a map cache object to store key-value pairs.
			 *
			 * @private
			 * @constructor
			 * @param {Array} [entries] The key-value pairs to cache.
			 */
			function MapCache$4(entries) {
			  var index = -1,
			      length = entries == null ? 0 : entries.length;

			  this.clear();
			  while (++index < length) {
			    var entry = entries[index];
			    this.set(entry[0], entry[1]);
			  }
			}

			// Add methods to `MapCache`.
			MapCache$4.prototype.clear = mapCacheClear$1;
			MapCache$4.prototype['delete'] = mapCacheDelete$1;
			MapCache$4.prototype.get = mapCacheGet$1;
			MapCache$4.prototype.has = mapCacheHas$1;
			MapCache$4.prototype.set = mapCacheSet$1;

			var _MapCache = MapCache$4;

			var ListCache$2 = _ListCache,
			    Map$4 = _Map,
			    MapCache$3 = _MapCache;

			/** Used as the size to enable large array optimizations. */
			var LARGE_ARRAY_SIZE$1 = 200;

			/**
			 * Sets the stack `key` to `value`.
			 *
			 * @private
			 * @name set
			 * @memberOf Stack
			 * @param {string} key The key of the value to set.
			 * @param {*} value The value to set.
			 * @returns {Object} Returns the stack cache instance.
			 */
			function stackSet$2(key, value) {
			  var data = this.__data__;
			  if (data instanceof ListCache$2) {
			    var pairs = data.__data__;
			    if (!Map$4 || (pairs.length < LARGE_ARRAY_SIZE$1 - 1)) {
			      pairs.push([key, value]);
			      this.size = ++data.size;
			      return this;
			    }
			    data = this.__data__ = new MapCache$3(pairs);
			  }
			  data.set(key, value);
			  this.size = data.size;
			  return this;
			}

			var _stackSet = stackSet$2;

			var ListCache$1 = _ListCache,
			    stackClear$1 = _stackClear,
			    stackDelete$1 = _stackDelete,
			    stackGet$1 = _stackGet,
			    stackHas$1 = _stackHas,
			    stackSet$1 = _stackSet;

			/**
			 * Creates a stack cache object to store key-value pairs.
			 *
			 * @private
			 * @constructor
			 * @param {Array} [entries] The key-value pairs to cache.
			 */
			function Stack$4(entries) {
			  var data = this.__data__ = new ListCache$1(entries);
			  this.size = data.size;
			}

			// Add methods to `Stack`.
			Stack$4.prototype.clear = stackClear$1;
			Stack$4.prototype['delete'] = stackDelete$1;
			Stack$4.prototype.get = stackGet$1;
			Stack$4.prototype.has = stackHas$1;
			Stack$4.prototype.set = stackSet$1;

			var _Stack = Stack$4;

			/** Used to stand-in for `undefined` hash values. */

			var HASH_UNDEFINED$3 = '__lodash_hash_undefined__';

			/**
			 * Adds `value` to the array cache.
			 *
			 * @private
			 * @name add
			 * @memberOf SetCache
			 * @alias push
			 * @param {*} value The value to cache.
			 * @returns {Object} Returns the cache instance.
			 */
			function setCacheAdd$2(value) {
			  this.__data__.set(value, HASH_UNDEFINED$3);
			  return this;
			}

			var _setCacheAdd = setCacheAdd$2;

			/**
			 * Checks if `value` is in the array cache.
			 *
			 * @private
			 * @name has
			 * @memberOf SetCache
			 * @param {*} value The value to search for.
			 * @returns {number} Returns `true` if `value` is found, else `false`.
			 */

			function setCacheHas$2(value) {
			  return this.__data__.has(value);
			}

			var _setCacheHas = setCacheHas$2;

			var MapCache$2 = _MapCache,
			    setCacheAdd$1 = _setCacheAdd,
			    setCacheHas$1 = _setCacheHas;

			/**
			 *
			 * Creates an array cache object to store unique values.
			 *
			 * @private
			 * @constructor
			 * @param {Array} [values] The values to cache.
			 */
			function SetCache$2(values) {
			  var index = -1,
			      length = values == null ? 0 : values.length;

			  this.__data__ = new MapCache$2;
			  while (++index < length) {
			    this.add(values[index]);
			  }
			}

			// Add methods to `SetCache`.
			SetCache$2.prototype.add = SetCache$2.prototype.push = setCacheAdd$1;
			SetCache$2.prototype.has = setCacheHas$1;

			var _SetCache = SetCache$2;

			/**
			 * A specialized version of `_.some` for arrays without support for iteratee
			 * shorthands.
			 *
			 * @private
			 * @param {Array} [array] The array to iterate over.
			 * @param {Function} predicate The function invoked per iteration.
			 * @returns {boolean} Returns `true` if any element passes the predicate check,
			 *  else `false`.
			 */

			function arraySome$2(array, predicate) {
			  var index = -1,
			      length = array == null ? 0 : array.length;

			  while (++index < length) {
			    if (predicate(array[index], index, array)) {
			      return true;
			    }
			  }
			  return false;
			}

			var _arraySome = arraySome$2;

			/**
			 * Checks if a `cache` value for `key` exists.
			 *
			 * @private
			 * @param {Object} cache The cache to query.
			 * @param {string} key The key of the entry to check.
			 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			 */

			function cacheHas$2(cache, key) {
			  return cache.has(key);
			}

			var _cacheHas = cacheHas$2;

			var SetCache$1 = _SetCache,
			    arraySome$1 = _arraySome,
			    cacheHas$1 = _cacheHas;

			/** Used to compose bitmasks for value comparisons. */
			var COMPARE_PARTIAL_FLAG$b = 1,
			    COMPARE_UNORDERED_FLAG$7 = 2;

			/**
			 * A specialized version of `baseIsEqualDeep` for arrays with support for
			 * partial deep comparisons.
			 *
			 * @private
			 * @param {Array} array The array to compare.
			 * @param {Array} other The other array to compare.
			 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
			 * @param {Function} customizer The function to customize comparisons.
			 * @param {Function} equalFunc The function to determine equivalents of values.
			 * @param {Object} stack Tracks traversed `array` and `other` objects.
			 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
			 */
			function equalArrays$3(array, other, bitmask, customizer, equalFunc, stack) {
			  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$b,
			      arrLength = array.length,
			      othLength = other.length;

			  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
			    return false;
			  }
			  // Check that cyclic values are equal.
			  var arrStacked = stack.get(array);
			  var othStacked = stack.get(other);
			  if (arrStacked && othStacked) {
			    return arrStacked == other && othStacked == array;
			  }
			  var index = -1,
			      result = true,
			      seen = (bitmask & COMPARE_UNORDERED_FLAG$7) ? new SetCache$1 : undefined;

			  stack.set(array, other);
			  stack.set(other, array);

			  // Ignore non-index properties.
			  while (++index < arrLength) {
			    var arrValue = array[index],
			        othValue = other[index];

			    if (customizer) {
			      var compared = isPartial
			        ? customizer(othValue, arrValue, index, other, array, stack)
			        : customizer(arrValue, othValue, index, array, other, stack);
			    }
			    if (compared !== undefined) {
			      if (compared) {
			        continue;
			      }
			      result = false;
			      break;
			    }
			    // Recursively compare arrays (susceptible to call stack limits).
			    if (seen) {
			      if (!arraySome$1(other, function(othValue, othIndex) {
			            if (!cacheHas$1(seen, othIndex) &&
			                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
			              return seen.push(othIndex);
			            }
			          })) {
			        result = false;
			        break;
			      }
			    } else if (!(
			          arrValue === othValue ||
			            equalFunc(arrValue, othValue, bitmask, customizer, stack)
			        )) {
			      result = false;
			      break;
			    }
			  }
			  stack['delete'](array);
			  stack['delete'](other);
			  return result;
			}

			var _equalArrays = equalArrays$3;

			var root$6 = _root;

			/** Built-in value references. */
			var Uint8Array$5 = root$6.Uint8Array;

			var _Uint8Array = Uint8Array$5;

			/**
			 * Converts `map` to its key-value pairs.
			 *
			 * @private
			 * @param {Object} map The map to convert.
			 * @returns {Array} Returns the key-value pairs.
			 */

			function mapToArray$2(map) {
			  var index = -1,
			      result = Array(map.size);

			  map.forEach(function(value, key) {
			    result[++index] = [key, value];
			  });
			  return result;
			}

			var _mapToArray = mapToArray$2;

			/**
			 * Converts `set` to an array of its values.
			 *
			 * @private
			 * @param {Object} set The set to convert.
			 * @returns {Array} Returns the values.
			 */

			function setToArray$2(set) {
			  var index = -1,
			      result = Array(set.size);

			  set.forEach(function(value) {
			    result[++index] = value;
			  });
			  return result;
			}

			var _setToArray = setToArray$2;

			var Symbol$5 = _Symbol,
			    Uint8Array$4 = _Uint8Array,
			    eq$2 = eq_1,
			    equalArrays$2 = _equalArrays,
			    mapToArray$1 = _mapToArray,
			    setToArray$1 = _setToArray;

			/** Used to compose bitmasks for value comparisons. */
			var COMPARE_PARTIAL_FLAG$a = 1,
			    COMPARE_UNORDERED_FLAG$6 = 2;

			/** `Object#toString` result references. */
			var boolTag$4 = '[object Boolean]',
			    dateTag$4 = '[object Date]',
			    errorTag$3 = '[object Error]',
			    mapTag$7 = '[object Map]',
			    numberTag$4 = '[object Number]',
			    regexpTag$4 = '[object RegExp]',
			    setTag$7 = '[object Set]',
			    stringTag$4 = '[object String]',
			    symbolTag$5 = '[object Symbol]';

			var arrayBufferTag$4 = '[object ArrayBuffer]',
			    dataViewTag$6 = '[object DataView]';

			/** Used to convert symbols to primitives and strings. */
			var symbolProto$4 = Symbol$5 ? Symbol$5.prototype : undefined,
			    symbolValueOf$2 = symbolProto$4 ? symbolProto$4.valueOf : undefined;

			/**
			 * A specialized version of `baseIsEqualDeep` for comparing objects of
			 * the same `toStringTag`.
			 *
			 * **Note:** This function only supports comparing values with tags of
			 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
			 *
			 * @private
			 * @param {Object} object The object to compare.
			 * @param {Object} other The other object to compare.
			 * @param {string} tag The `toStringTag` of the objects to compare.
			 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
			 * @param {Function} customizer The function to customize comparisons.
			 * @param {Function} equalFunc The function to determine equivalents of values.
			 * @param {Object} stack Tracks traversed `object` and `other` objects.
			 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
			 */
			function equalByTag$2(object, other, tag, bitmask, customizer, equalFunc, stack) {
			  switch (tag) {
			    case dataViewTag$6:
			      if ((object.byteLength != other.byteLength) ||
			          (object.byteOffset != other.byteOffset)) {
			        return false;
			      }
			      object = object.buffer;
			      other = other.buffer;

			    case arrayBufferTag$4:
			      if ((object.byteLength != other.byteLength) ||
			          !equalFunc(new Uint8Array$4(object), new Uint8Array$4(other))) {
			        return false;
			      }
			      return true;

			    case boolTag$4:
			    case dateTag$4:
			    case numberTag$4:
			      // Coerce booleans to `1` or `0` and dates to milliseconds.
			      // Invalid dates are coerced to `NaN`.
			      return eq$2(+object, +other);

			    case errorTag$3:
			      return object.name == other.name && object.message == other.message;

			    case regexpTag$4:
			    case stringTag$4:
			      // Coerce regexes to strings and treat strings, primitives and objects,
			      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
			      // for more details.
			      return object == (other + '');

			    case mapTag$7:
			      var convert = mapToArray$1;

			    case setTag$7:
			      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$a;
			      convert || (convert = setToArray$1);

			      if (object.size != other.size && !isPartial) {
			        return false;
			      }
			      // Assume cyclic values are equal.
			      var stacked = stack.get(object);
			      if (stacked) {
			        return stacked == other;
			      }
			      bitmask |= COMPARE_UNORDERED_FLAG$6;

			      // Recursively compare objects (susceptible to call stack limits).
			      stack.set(object, other);
			      var result = equalArrays$2(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
			      stack['delete'](object);
			      return result;

			    case symbolTag$5:
			      if (symbolValueOf$2) {
			        return symbolValueOf$2.call(object) == symbolValueOf$2.call(other);
			      }
			  }
			  return false;
			}

			var _equalByTag = equalByTag$2;

			/**
			 * Appends the elements of `values` to `array`.
			 *
			 * @private
			 * @param {Array} array The array to modify.
			 * @param {Array} values The values to append.
			 * @returns {Array} Returns `array`.
			 */

			function arrayPush$3(array, values) {
			  var index = -1,
			      length = values.length,
			      offset = array.length;

			  while (++index < length) {
			    array[offset + index] = values[index];
			  }
			  return array;
			}

			var _arrayPush = arrayPush$3;

			var arrayPush$2 = _arrayPush,
			    isArray$a = isArray_1;

			/**
			 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
			 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
			 * symbols of `object`.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @param {Function} keysFunc The function to get the keys of `object`.
			 * @param {Function} symbolsFunc The function to get the symbols of `object`.
			 * @returns {Array} Returns the array of property names and symbols.
			 */
			function baseGetAllKeys$3(object, keysFunc, symbolsFunc) {
			  var result = keysFunc(object);
			  return isArray$a(object) ? result : arrayPush$2(result, symbolsFunc(object));
			}

			var _baseGetAllKeys = baseGetAllKeys$3;

			/**
			 * A specialized version of `_.filter` for arrays without support for
			 * iteratee shorthands.
			 *
			 * @private
			 * @param {Array} [array] The array to iterate over.
			 * @param {Function} predicate The function invoked per iteration.
			 * @returns {Array} Returns the new filtered array.
			 */

			function arrayFilter$2(array, predicate) {
			  var index = -1,
			      length = array == null ? 0 : array.length,
			      resIndex = 0,
			      result = [];

			  while (++index < length) {
			    var value = array[index];
			    if (predicate(value, index, array)) {
			      result[resIndex++] = value;
			    }
			  }
			  return result;
			}

			var _arrayFilter = arrayFilter$2;

			/**
			 * This method returns a new empty array.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.13.0
			 * @category Util
			 * @returns {Array} Returns the new empty array.
			 * @example
			 *
			 * var arrays = _.times(2, _.stubArray);
			 *
			 * console.log(arrays);
			 * // => [[], []]
			 *
			 * console.log(arrays[0] === arrays[1]);
			 * // => false
			 */

			function stubArray$3() {
			  return [];
			}

			var stubArray_1 = stubArray$3;

			var arrayFilter$1 = _arrayFilter,
			    stubArray$2 = stubArray_1;

			/** Used for built-in method references. */
			var objectProto$k = Object.prototype;

			/** Built-in value references. */
			var propertyIsEnumerable$2 = objectProto$k.propertyIsEnumerable;

			/* Built-in method references for those with the same name as other `lodash` methods. */
			var nativeGetSymbols$2 = Object.getOwnPropertySymbols;

			/**
			 * Creates an array of the own enumerable symbols of `object`.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of symbols.
			 */
			var getSymbols$5 = !nativeGetSymbols$2 ? stubArray$2 : function(object) {
			  if (object == null) {
			    return [];
			  }
			  object = Object(object);
			  return arrayFilter$1(nativeGetSymbols$2(object), function(symbol) {
			    return propertyIsEnumerable$2.call(object, symbol);
			  });
			};

			var _getSymbols = getSymbols$5;

			var baseGetAllKeys$2 = _baseGetAllKeys,
			    getSymbols$4 = _getSymbols,
			    keys$4 = keys_1;

			/**
			 * Creates an array of own enumerable property names and symbols of `object`.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of property names and symbols.
			 */
			function getAllKeys$3(object) {
			  return baseGetAllKeys$2(object, keys$4, getSymbols$4);
			}

			var _getAllKeys = getAllKeys$3;

			var getAllKeys$2 = _getAllKeys;

			/** Used to compose bitmasks for value comparisons. */
			var COMPARE_PARTIAL_FLAG$9 = 1;

			/** Used for built-in method references. */
			var objectProto$j = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$h = objectProto$j.hasOwnProperty;

			/**
			 * A specialized version of `baseIsEqualDeep` for objects with support for
			 * partial deep comparisons.
			 *
			 * @private
			 * @param {Object} object The object to compare.
			 * @param {Object} other The other object to compare.
			 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
			 * @param {Function} customizer The function to customize comparisons.
			 * @param {Function} equalFunc The function to determine equivalents of values.
			 * @param {Object} stack Tracks traversed `object` and `other` objects.
			 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
			 */
			function equalObjects$2(object, other, bitmask, customizer, equalFunc, stack) {
			  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$9,
			      objProps = getAllKeys$2(object),
			      objLength = objProps.length,
			      othProps = getAllKeys$2(other),
			      othLength = othProps.length;

			  if (objLength != othLength && !isPartial) {
			    return false;
			  }
			  var index = objLength;
			  while (index--) {
			    var key = objProps[index];
			    if (!(isPartial ? key in other : hasOwnProperty$h.call(other, key))) {
			      return false;
			    }
			  }
			  // Check that cyclic values are equal.
			  var objStacked = stack.get(object);
			  var othStacked = stack.get(other);
			  if (objStacked && othStacked) {
			    return objStacked == other && othStacked == object;
			  }
			  var result = true;
			  stack.set(object, other);
			  stack.set(other, object);

			  var skipCtor = isPartial;
			  while (++index < objLength) {
			    key = objProps[index];
			    var objValue = object[key],
			        othValue = other[key];

			    if (customizer) {
			      var compared = isPartial
			        ? customizer(othValue, objValue, key, other, object, stack)
			        : customizer(objValue, othValue, key, object, other, stack);
			    }
			    // Recursively compare objects (susceptible to call stack limits).
			    if (!(compared === undefined
			          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
			          : compared
			        )) {
			      result = false;
			      break;
			    }
			    skipCtor || (skipCtor = key == 'constructor');
			  }
			  if (result && !skipCtor) {
			    var objCtor = object.constructor,
			        othCtor = other.constructor;

			    // Non `Object` object instances with different constructors are not equal.
			    if (objCtor != othCtor &&
			        ('constructor' in object && 'constructor' in other) &&
			        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
			          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
			      result = false;
			    }
			  }
			  stack['delete'](object);
			  stack['delete'](other);
			  return result;
			}

			var _equalObjects = equalObjects$2;

			var getNative$5 = _getNative,
			    root$5 = _root;

			/* Built-in method references that are verified to be native. */
			var DataView$3 = getNative$5(root$5, 'DataView');

			var _DataView = DataView$3;

			var getNative$4 = _getNative,
			    root$4 = _root;

			/* Built-in method references that are verified to be native. */
			var Promise$4 = getNative$4(root$4, 'Promise');

			var _Promise = Promise$4;

			var getNative$3 = _getNative,
			    root$3 = _root;

			/* Built-in method references that are verified to be native. */
			var Set$4 = getNative$3(root$3, 'Set');

			var _Set = Set$4;

			var getNative$2 = _getNative,
			    root$2 = _root;

			/* Built-in method references that are verified to be native. */
			var WeakMap$3 = getNative$2(root$2, 'WeakMap');

			var _WeakMap = WeakMap$3;

			var DataView$2 = _DataView,
			    Map$3 = _Map,
			    Promise$3 = _Promise,
			    Set$3 = _Set,
			    WeakMap$2 = _WeakMap,
			    baseGetTag$2 = _baseGetTag,
			    toSource$1 = _toSource;

			/** `Object#toString` result references. */
			var mapTag$6 = '[object Map]',
			    objectTag$6 = '[object Object]',
			    promiseTag$1 = '[object Promise]',
			    setTag$6 = '[object Set]',
			    weakMapTag$3 = '[object WeakMap]';

			var dataViewTag$5 = '[object DataView]';

			/** Used to detect maps, sets, and weakmaps. */
			var dataViewCtorString$1 = toSource$1(DataView$2),
			    mapCtorString$1 = toSource$1(Map$3),
			    promiseCtorString$1 = toSource$1(Promise$3),
			    setCtorString$1 = toSource$1(Set$3),
			    weakMapCtorString$1 = toSource$1(WeakMap$2);

			/**
			 * Gets the `toStringTag` of `value`.
			 *
			 * @private
			 * @param {*} value The value to query.
			 * @returns {string} Returns the `toStringTag`.
			 */
			var getTag$6 = baseGetTag$2;

			// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
			if ((DataView$2 && getTag$6(new DataView$2(new ArrayBuffer(1))) != dataViewTag$5) ||
			    (Map$3 && getTag$6(new Map$3) != mapTag$6) ||
			    (Promise$3 && getTag$6(Promise$3.resolve()) != promiseTag$1) ||
			    (Set$3 && getTag$6(new Set$3) != setTag$6) ||
			    (WeakMap$2 && getTag$6(new WeakMap$2) != weakMapTag$3)) {
			  getTag$6 = function(value) {
			    var result = baseGetTag$2(value),
			        Ctor = result == objectTag$6 ? value.constructor : undefined,
			        ctorString = Ctor ? toSource$1(Ctor) : '';

			    if (ctorString) {
			      switch (ctorString) {
			        case dataViewCtorString$1: return dataViewTag$5;
			        case mapCtorString$1: return mapTag$6;
			        case promiseCtorString$1: return promiseTag$1;
			        case setCtorString$1: return setTag$6;
			        case weakMapCtorString$1: return weakMapTag$3;
			      }
			    }
			    return result;
			  };
			}

			var _getTag = getTag$6;

			var Stack$3 = _Stack,
			    equalArrays$1 = _equalArrays,
			    equalByTag$1 = _equalByTag,
			    equalObjects$1 = _equalObjects,
			    getTag$5 = _getTag,
			    isArray$9 = isArray_1,
			    isBuffer$3 = isBuffer$5.exports,
			    isTypedArray$2 = isTypedArray_1;

			/** Used to compose bitmasks for value comparisons. */
			var COMPARE_PARTIAL_FLAG$8 = 1;

			/** `Object#toString` result references. */
			var argsTag$4 = '[object Arguments]',
			    arrayTag$3 = '[object Array]',
			    objectTag$5 = '[object Object]';

			/** Used for built-in method references. */
			var objectProto$i = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$g = objectProto$i.hasOwnProperty;

			/**
			 * A specialized version of `baseIsEqual` for arrays and objects which performs
			 * deep comparisons and tracks traversed objects enabling objects with circular
			 * references to be compared.
			 *
			 * @private
			 * @param {Object} object The object to compare.
			 * @param {Object} other The other object to compare.
			 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
			 * @param {Function} customizer The function to customize comparisons.
			 * @param {Function} equalFunc The function to determine equivalents of values.
			 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
			 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
			 */
			function baseIsEqualDeep$2(object, other, bitmask, customizer, equalFunc, stack) {
			  var objIsArr = isArray$9(object),
			      othIsArr = isArray$9(other),
			      objTag = objIsArr ? arrayTag$3 : getTag$5(object),
			      othTag = othIsArr ? arrayTag$3 : getTag$5(other);

			  objTag = objTag == argsTag$4 ? objectTag$5 : objTag;
			  othTag = othTag == argsTag$4 ? objectTag$5 : othTag;

			  var objIsObj = objTag == objectTag$5,
			      othIsObj = othTag == objectTag$5,
			      isSameTag = objTag == othTag;

			  if (isSameTag && isBuffer$3(object)) {
			    if (!isBuffer$3(other)) {
			      return false;
			    }
			    objIsArr = true;
			    objIsObj = false;
			  }
			  if (isSameTag && !objIsObj) {
			    stack || (stack = new Stack$3);
			    return (objIsArr || isTypedArray$2(object))
			      ? equalArrays$1(object, other, bitmask, customizer, equalFunc, stack)
			      : equalByTag$1(object, other, objTag, bitmask, customizer, equalFunc, stack);
			  }
			  if (!(bitmask & COMPARE_PARTIAL_FLAG$8)) {
			    var objIsWrapped = objIsObj && hasOwnProperty$g.call(object, '__wrapped__'),
			        othIsWrapped = othIsObj && hasOwnProperty$g.call(other, '__wrapped__');

			    if (objIsWrapped || othIsWrapped) {
			      var objUnwrapped = objIsWrapped ? object.value() : object,
			          othUnwrapped = othIsWrapped ? other.value() : other;

			      stack || (stack = new Stack$3);
			      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
			    }
			  }
			  if (!isSameTag) {
			    return false;
			  }
			  stack || (stack = new Stack$3);
			  return equalObjects$1(object, other, bitmask, customizer, equalFunc, stack);
			}

			var _baseIsEqualDeep = baseIsEqualDeep$2;

			var baseIsEqualDeep$1 = _baseIsEqualDeep,
			    isObjectLike$4 = isObjectLike_1;

			/**
			 * The base implementation of `_.isEqual` which supports partial comparisons
			 * and tracks traversed objects.
			 *
			 * @private
			 * @param {*} value The value to compare.
			 * @param {*} other The other value to compare.
			 * @param {boolean} bitmask The bitmask flags.
			 *  1 - Unordered comparison
			 *  2 - Partial comparison
			 * @param {Function} [customizer] The function to customize comparisons.
			 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
			 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
			 */
			function baseIsEqual$3(value, other, bitmask, customizer, stack) {
			  if (value === other) {
			    return true;
			  }
			  if (value == null || other == null || (!isObjectLike$4(value) && !isObjectLike$4(other))) {
			    return value !== value && other !== other;
			  }
			  return baseIsEqualDeep$1(value, other, bitmask, customizer, baseIsEqual$3, stack);
			}

			var _baseIsEqual = baseIsEqual$3;

			var Stack$2 = _Stack,
			    baseIsEqual$2 = _baseIsEqual;

			/** Used to compose bitmasks for value comparisons. */
			var COMPARE_PARTIAL_FLAG$7 = 1,
			    COMPARE_UNORDERED_FLAG$5 = 2;

			/**
			 * The base implementation of `_.isMatch` without support for iteratee shorthands.
			 *
			 * @private
			 * @param {Object} object The object to inspect.
			 * @param {Object} source The object of property values to match.
			 * @param {Array} matchData The property names, values, and compare flags to match.
			 * @param {Function} [customizer] The function to customize comparisons.
			 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
			 */
			function baseIsMatch$2(object, source, matchData, customizer) {
			  var index = matchData.length,
			      length = index,
			      noCustomizer = !customizer;

			  if (object == null) {
			    return !length;
			  }
			  object = Object(object);
			  while (index--) {
			    var data = matchData[index];
			    if ((noCustomizer && data[2])
			          ? data[1] !== object[data[0]]
			          : !(data[0] in object)
			        ) {
			      return false;
			    }
			  }
			  while (++index < length) {
			    data = matchData[index];
			    var key = data[0],
			        objValue = object[key],
			        srcValue = data[1];

			    if (noCustomizer && data[2]) {
			      if (objValue === undefined && !(key in object)) {
			        return false;
			      }
			    } else {
			      var stack = new Stack$2;
			      if (customizer) {
			        var result = customizer(objValue, srcValue, key, object, source, stack);
			      }
			      if (!(result === undefined
			            ? baseIsEqual$2(srcValue, objValue, COMPARE_PARTIAL_FLAG$7 | COMPARE_UNORDERED_FLAG$5, customizer, stack)
			            : result
			          )) {
			        return false;
			      }
			    }
			  }
			  return true;
			}

			var _baseIsMatch = baseIsMatch$2;

			var isObject$4 = isObject_1;

			/**
			 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` if suitable for strict
			 *  equality comparisons, else `false`.
			 */
			function isStrictComparable$3(value) {
			  return value === value && !isObject$4(value);
			}

			var _isStrictComparable = isStrictComparable$3;

			var isStrictComparable$2 = _isStrictComparable,
			    keys$3 = keys_1;

			/**
			 * Gets the property names, values, and compare flags of `object`.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the match data of `object`.
			 */
			function getMatchData$2(object) {
			  var result = keys$3(object),
			      length = result.length;

			  while (length--) {
			    var key = result[length],
			        value = object[key];

			    result[length] = [key, value, isStrictComparable$2(value)];
			  }
			  return result;
			}

			var _getMatchData = getMatchData$2;

			/**
			 * A specialized version of `matchesProperty` for source values suitable
			 * for strict equality comparisons, i.e. `===`.
			 *
			 * @private
			 * @param {string} key The key of the property to get.
			 * @param {*} srcValue The value to match.
			 * @returns {Function} Returns the new spec function.
			 */

			function matchesStrictComparable$3(key, srcValue) {
			  return function(object) {
			    if (object == null) {
			      return false;
			    }
			    return object[key] === srcValue &&
			      (srcValue !== undefined || (key in Object(object)));
			  };
			}

			var _matchesStrictComparable = matchesStrictComparable$3;

			var baseIsMatch$1 = _baseIsMatch,
			    getMatchData$1 = _getMatchData,
			    matchesStrictComparable$2 = _matchesStrictComparable;

			/**
			 * The base implementation of `_.matches` which doesn't clone `source`.
			 *
			 * @private
			 * @param {Object} source The object of property values to match.
			 * @returns {Function} Returns the new spec function.
			 */
			function baseMatches$2(source) {
			  var matchData = getMatchData$1(source);
			  if (matchData.length == 1 && matchData[0][2]) {
			    return matchesStrictComparable$2(matchData[0][0], matchData[0][1]);
			  }
			  return function(object) {
			    return object === source || baseIsMatch$1(object, source, matchData);
			  };
			}

			var _baseMatches = baseMatches$2;

			var baseGetTag$1 = _baseGetTag,
			    isObjectLike$3 = isObjectLike_1;

			/** `Object#toString` result references. */
			var symbolTag$4 = '[object Symbol]';

			/**
			 * Checks if `value` is classified as a `Symbol` primitive or object.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
			 * @example
			 *
			 * _.isSymbol(Symbol.iterator);
			 * // => true
			 *
			 * _.isSymbol('abc');
			 * // => false
			 */
			function isSymbol$4(value) {
			  return typeof value == 'symbol' ||
			    (isObjectLike$3(value) && baseGetTag$1(value) == symbolTag$4);
			}

			var isSymbol_1 = isSymbol$4;

			var isArray$8 = isArray_1,
			    isSymbol$3 = isSymbol_1;

			/** Used to match property names within property paths. */
			var reIsDeepProp$1 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
			    reIsPlainProp$1 = /^\w*$/;

			/**
			 * Checks if `value` is a property name and not a property path.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @param {Object} [object] The object to query keys on.
			 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
			 */
			function isKey$4(value, object) {
			  if (isArray$8(value)) {
			    return false;
			  }
			  var type = typeof value;
			  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
			      value == null || isSymbol$3(value)) {
			    return true;
			  }
			  return reIsPlainProp$1.test(value) || !reIsDeepProp$1.test(value) ||
			    (object != null && value in Object(object));
			}

			var _isKey = isKey$4;

			var MapCache$1 = _MapCache;

			/** Error message constants. */
			var FUNC_ERROR_TEXT$3 = 'Expected a function';

			/**
			 * Creates a function that memoizes the result of `func`. If `resolver` is
			 * provided, it determines the cache key for storing the result based on the
			 * arguments provided to the memoized function. By default, the first argument
			 * provided to the memoized function is used as the map cache key. The `func`
			 * is invoked with the `this` binding of the memoized function.
			 *
			 * **Note:** The cache is exposed as the `cache` property on the memoized
			 * function. Its creation may be customized by replacing the `_.memoize.Cache`
			 * constructor with one whose instances implement the
			 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
			 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Function
			 * @param {Function} func The function to have its output memoized.
			 * @param {Function} [resolver] The function to resolve the cache key.
			 * @returns {Function} Returns the new memoized function.
			 * @example
			 *
			 * var object = { 'a': 1, 'b': 2 };
			 * var other = { 'c': 3, 'd': 4 };
			 *
			 * var values = _.memoize(_.values);
			 * values(object);
			 * // => [1, 2]
			 *
			 * values(other);
			 * // => [3, 4]
			 *
			 * object.a = 2;
			 * values(object);
			 * // => [1, 2]
			 *
			 * // Modify the result cache.
			 * values.cache.set(object, ['a', 'b']);
			 * values(object);
			 * // => ['a', 'b']
			 *
			 * // Replace `_.memoize.Cache`.
			 * _.memoize.Cache = WeakMap;
			 */
			function memoize$2(func, resolver) {
			  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
			    throw new TypeError(FUNC_ERROR_TEXT$3);
			  }
			  var memoized = function() {
			    var args = arguments,
			        key = resolver ? resolver.apply(this, args) : args[0],
			        cache = memoized.cache;

			    if (cache.has(key)) {
			      return cache.get(key);
			    }
			    var result = func.apply(this, args);
			    memoized.cache = cache.set(key, result) || cache;
			    return result;
			  };
			  memoized.cache = new (memoize$2.Cache || MapCache$1);
			  return memoized;
			}

			// Expose `MapCache`.
			memoize$2.Cache = MapCache$1;

			var memoize_1 = memoize$2;

			var memoize$1 = memoize_1;

			/** Used as the maximum memoize cache size. */
			var MAX_MEMOIZE_SIZE$1 = 500;

			/**
			 * A specialized version of `_.memoize` which clears the memoized function's
			 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
			 *
			 * @private
			 * @param {Function} func The function to have its output memoized.
			 * @returns {Function} Returns the new memoized function.
			 */
			function memoizeCapped$2(func) {
			  var result = memoize$1(func, function(key) {
			    if (cache.size === MAX_MEMOIZE_SIZE$1) {
			      cache.clear();
			    }
			    return key;
			  });

			  var cache = result.cache;
			  return result;
			}

			var _memoizeCapped = memoizeCapped$2;

			var memoizeCapped$1 = _memoizeCapped;

			/** Used to match property names within property paths. */
			var rePropName$1 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

			/** Used to match backslashes in property paths. */
			var reEscapeChar$1 = /\\(\\)?/g;

			/**
			 * Converts `string` to a property path array.
			 *
			 * @private
			 * @param {string} string The string to convert.
			 * @returns {Array} Returns the property path array.
			 */
			var stringToPath$3 = memoizeCapped$1(function(string) {
			  var result = [];
			  if (string.charCodeAt(0) === 46 /* . */) {
			    result.push('');
			  }
			  string.replace(rePropName$1, function(match, number, quote, subString) {
			    result.push(quote ? subString.replace(reEscapeChar$1, '$1') : (number || match));
			  });
			  return result;
			});

			var _stringToPath = stringToPath$3;

			var Symbol$4 = _Symbol,
			    arrayMap$2 = _arrayMap,
			    isArray$7 = isArray_1,
			    isSymbol$2 = isSymbol_1;

			/** Used as references for various `Number` constants. */
			var INFINITY$3 = 1 / 0;

			/** Used to convert symbols to primitives and strings. */
			var symbolProto$3 = Symbol$4 ? Symbol$4.prototype : undefined,
			    symbolToString$1 = symbolProto$3 ? symbolProto$3.toString : undefined;

			/**
			 * The base implementation of `_.toString` which doesn't convert nullish
			 * values to empty strings.
			 *
			 * @private
			 * @param {*} value The value to process.
			 * @returns {string} Returns the string.
			 */
			function baseToString$2(value) {
			  // Exit early for strings to avoid a performance hit in some environments.
			  if (typeof value == 'string') {
			    return value;
			  }
			  if (isArray$7(value)) {
			    // Recursively convert values (susceptible to call stack limits).
			    return arrayMap$2(value, baseToString$2) + '';
			  }
			  if (isSymbol$2(value)) {
			    return symbolToString$1 ? symbolToString$1.call(value) : '';
			  }
			  var result = (value + '');
			  return (result == '0' && (1 / value) == -INFINITY$3) ? '-0' : result;
			}

			var _baseToString = baseToString$2;

			var baseToString$1 = _baseToString;

			/**
			 * Converts `value` to a string. An empty string is returned for `null`
			 * and `undefined` values. The sign of `-0` is preserved.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to convert.
			 * @returns {string} Returns the converted string.
			 * @example
			 *
			 * _.toString(null);
			 * // => ''
			 *
			 * _.toString(-0);
			 * // => '-0'
			 *
			 * _.toString([1, 2, 3]);
			 * // => '1,2,3'
			 */
			function toString$2(value) {
			  return value == null ? '' : baseToString$1(value);
			}

			var toString_1 = toString$2;

			var isArray$6 = isArray_1,
			    isKey$3 = _isKey,
			    stringToPath$2 = _stringToPath,
			    toString$1 = toString_1;

			/**
			 * Casts `value` to a path array if it's not one.
			 *
			 * @private
			 * @param {*} value The value to inspect.
			 * @param {Object} [object] The object to query keys on.
			 * @returns {Array} Returns the cast property path array.
			 */
			function castPath$3(value, object) {
			  if (isArray$6(value)) {
			    return value;
			  }
			  return isKey$3(value, object) ? [value] : stringToPath$2(toString$1(value));
			}

			var _castPath = castPath$3;

			var isSymbol$1 = isSymbol_1;

			/** Used as references for various `Number` constants. */
			var INFINITY$2 = 1 / 0;

			/**
			 * Converts `value` to a string key if it's not a string or symbol.
			 *
			 * @private
			 * @param {*} value The value to inspect.
			 * @returns {string|symbol} Returns the key.
			 */
			function toKey$5(value) {
			  if (typeof value == 'string' || isSymbol$1(value)) {
			    return value;
			  }
			  var result = (value + '');
			  return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;
			}

			var _toKey = toKey$5;

			var castPath$2 = _castPath,
			    toKey$4 = _toKey;

			/**
			 * The base implementation of `_.get` without support for default values.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @param {Array|string} path The path of the property to get.
			 * @returns {*} Returns the resolved value.
			 */
			function baseGet$3(object, path) {
			  path = castPath$2(path, object);

			  var index = 0,
			      length = path.length;

			  while (object != null && index < length) {
			    object = object[toKey$4(path[index++])];
			  }
			  return (index && index == length) ? object : undefined;
			}

			var _baseGet = baseGet$3;

			var baseGet$2 = _baseGet;

			/**
			 * Gets the value at `path` of `object`. If the resolved value is
			 * `undefined`, the `defaultValue` is returned in its place.
			 *
			 * @static
			 * @memberOf _
			 * @since 3.7.0
			 * @category Object
			 * @param {Object} object The object to query.
			 * @param {Array|string} path The path of the property to get.
			 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
			 * @returns {*} Returns the resolved value.
			 * @example
			 *
			 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
			 *
			 * _.get(object, 'a[0].b.c');
			 * // => 3
			 *
			 * _.get(object, ['a', '0', 'b', 'c']);
			 * // => 3
			 *
			 * _.get(object, 'a.b.c', 'default');
			 * // => 'default'
			 */
			function get$3(object, path, defaultValue) {
			  var result = object == null ? undefined : baseGet$2(object, path);
			  return result === undefined ? defaultValue : result;
			}

			var get_1 = get$3;

			/**
			 * The base implementation of `_.hasIn` without support for deep paths.
			 *
			 * @private
			 * @param {Object} [object] The object to query.
			 * @param {Array|string} key The key to check.
			 * @returns {boolean} Returns `true` if `key` exists, else `false`.
			 */

			function baseHasIn$2(object, key) {
			  return object != null && key in Object(object);
			}

			var _baseHasIn = baseHasIn$2;

			var castPath$1 = _castPath,
			    isArguments$2 = isArguments_1,
			    isArray$5 = isArray_1,
			    isIndex$1 = _isIndex,
			    isLength$1 = isLength_1,
			    toKey$3 = _toKey;

			/**
			 * Checks if `path` exists on `object`.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @param {Array|string} path The path to check.
			 * @param {Function} hasFunc The function to check properties.
			 * @returns {boolean} Returns `true` if `path` exists, else `false`.
			 */
			function hasPath$2(object, path, hasFunc) {
			  path = castPath$1(path, object);

			  var index = -1,
			      length = path.length,
			      result = false;

			  while (++index < length) {
			    var key = toKey$3(path[index]);
			    if (!(result = object != null && hasFunc(object, key))) {
			      break;
			    }
			    object = object[key];
			  }
			  if (result || ++index != length) {
			    return result;
			  }
			  length = object == null ? 0 : object.length;
			  return !!length && isLength$1(length) && isIndex$1(key, length) &&
			    (isArray$5(object) || isArguments$2(object));
			}

			var _hasPath = hasPath$2;

			var baseHasIn$1 = _baseHasIn,
			    hasPath$1 = _hasPath;

			/**
			 * Checks if `path` is a direct or inherited property of `object`.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Object
			 * @param {Object} object The object to query.
			 * @param {Array|string} path The path to check.
			 * @returns {boolean} Returns `true` if `path` exists, else `false`.
			 * @example
			 *
			 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
			 *
			 * _.hasIn(object, 'a');
			 * // => true
			 *
			 * _.hasIn(object, 'a.b');
			 * // => true
			 *
			 * _.hasIn(object, ['a', 'b']);
			 * // => true
			 *
			 * _.hasIn(object, 'b');
			 * // => false
			 */
			function hasIn$2(object, path) {
			  return object != null && hasPath$1(object, path, baseHasIn$1);
			}

			var hasIn_1 = hasIn$2;

			var baseIsEqual$1 = _baseIsEqual,
			    get$2 = get_1,
			    hasIn$1 = hasIn_1,
			    isKey$2 = _isKey,
			    isStrictComparable$1 = _isStrictComparable,
			    matchesStrictComparable$1 = _matchesStrictComparable,
			    toKey$2 = _toKey;

			/** Used to compose bitmasks for value comparisons. */
			var COMPARE_PARTIAL_FLAG$6 = 1,
			    COMPARE_UNORDERED_FLAG$4 = 2;

			/**
			 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
			 *
			 * @private
			 * @param {string} path The path of the property to get.
			 * @param {*} srcValue The value to match.
			 * @returns {Function} Returns the new spec function.
			 */
			function baseMatchesProperty$2(path, srcValue) {
			  if (isKey$2(path) && isStrictComparable$1(srcValue)) {
			    return matchesStrictComparable$1(toKey$2(path), srcValue);
			  }
			  return function(object) {
			    var objValue = get$2(object, path);
			    return (objValue === undefined && objValue === srcValue)
			      ? hasIn$1(object, path)
			      : baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$6 | COMPARE_UNORDERED_FLAG$4);
			  };
			}

			var _baseMatchesProperty = baseMatchesProperty$2;

			/**
			 * The base implementation of `_.property` without support for deep paths.
			 *
			 * @private
			 * @param {string} key The key of the property to get.
			 * @returns {Function} Returns the new accessor function.
			 */

			function baseProperty$2(key) {
			  return function(object) {
			    return object == null ? undefined : object[key];
			  };
			}

			var _baseProperty = baseProperty$2;

			var baseGet$1 = _baseGet;

			/**
			 * A specialized version of `baseProperty` which supports deep paths.
			 *
			 * @private
			 * @param {Array|string} path The path of the property to get.
			 * @returns {Function} Returns the new accessor function.
			 */
			function basePropertyDeep$2(path) {
			  return function(object) {
			    return baseGet$1(object, path);
			  };
			}

			var _basePropertyDeep = basePropertyDeep$2;

			var baseProperty$1 = _baseProperty,
			    basePropertyDeep$1 = _basePropertyDeep,
			    isKey$1 = _isKey,
			    toKey$1 = _toKey;

			/**
			 * Creates a function that returns the value at `path` of a given object.
			 *
			 * @static
			 * @memberOf _
			 * @since 2.4.0
			 * @category Util
			 * @param {Array|string} path The path of the property to get.
			 * @returns {Function} Returns the new accessor function.
			 * @example
			 *
			 * var objects = [
			 *   { 'a': { 'b': 2 } },
			 *   { 'a': { 'b': 1 } }
			 * ];
			 *
			 * _.map(objects, _.property('a.b'));
			 * // => [2, 1]
			 *
			 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
			 * // => [1, 2]
			 */
			function property$2(path) {
			  return isKey$1(path) ? baseProperty$1(toKey$1(path)) : basePropertyDeep$1(path);
			}

			var property_1 = property$2;

			var baseMatches$1 = _baseMatches,
			    baseMatchesProperty$1 = _baseMatchesProperty,
			    identity$1 = identity_1,
			    isArray$4 = isArray_1,
			    property$1 = property_1;

			/**
			 * The base implementation of `_.iteratee`.
			 *
			 * @private
			 * @param {*} [value=_.identity] The value to convert to an iteratee.
			 * @returns {Function} Returns the iteratee.
			 */
			function baseIteratee$2(value) {
			  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
			  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
			  if (typeof value == 'function') {
			    return value;
			  }
			  if (value == null) {
			    return identity$1;
			  }
			  if (typeof value == 'object') {
			    return isArray$4(value)
			      ? baseMatchesProperty$1(value[0], value[1])
			      : baseMatches$1(value);
			  }
			  return property$1(value);
			}

			var _baseIteratee = baseIteratee$2;

			var isArrayLike$3 = isArrayLike_1;

			/**
			 * Creates a `baseEach` or `baseEachRight` function.
			 *
			 * @private
			 * @param {Function} eachFunc The function to iterate over a collection.
			 * @param {boolean} [fromRight] Specify iterating from right to left.
			 * @returns {Function} Returns the new base function.
			 */
			function createBaseEach$2(eachFunc, fromRight) {
			  return function(collection, iteratee) {
			    if (collection == null) {
			      return collection;
			    }
			    if (!isArrayLike$3(collection)) {
			      return eachFunc(collection, iteratee);
			    }
			    var length = collection.length,
			        index = fromRight ? length : -1,
			        iterable = Object(collection);

			    while ((fromRight ? index-- : ++index < length)) {
			      if (iteratee(iterable[index], index, iterable) === false) {
			        break;
			      }
			    }
			    return collection;
			  };
			}

			var _createBaseEach = createBaseEach$2;

			var baseForOwn$1 = _baseForOwn,
			    createBaseEach$1 = _createBaseEach;

			/**
			 * The base implementation of `_.forEach` without support for iteratee shorthands.
			 *
			 * @private
			 * @param {Array|Object} collection The collection to iterate over.
			 * @param {Function} iteratee The function invoked per iteration.
			 * @returns {Array|Object} Returns `collection`.
			 */
			var baseEach$3 = createBaseEach$1(baseForOwn$1);

			var _baseEach = baseEach$3;

			var baseEach$2 = _baseEach,
			    isArrayLike$2 = isArrayLike_1;

			/**
			 * The base implementation of `_.map` without support for iteratee shorthands.
			 *
			 * @private
			 * @param {Array|Object} collection The collection to iterate over.
			 * @param {Function} iteratee The function invoked per iteration.
			 * @returns {Array} Returns the new mapped array.
			 */
			function baseMap$2(collection, iteratee) {
			  var index = -1,
			      result = isArrayLike$2(collection) ? Array(collection.length) : [];

			  baseEach$2(collection, function(value, key, collection) {
			    result[++index] = iteratee(value, key, collection);
			  });
			  return result;
			}

			var _baseMap = baseMap$2;

			var arrayMap$1 = _arrayMap,
			    baseIteratee$1 = _baseIteratee,
			    baseMap$1 = _baseMap,
			    isArray$3 = isArray_1;

			/**
			 * Creates an array of values by running each element in `collection` thru
			 * `iteratee`. The iteratee is invoked with three arguments:
			 * (value, index|key, collection).
			 *
			 * Many lodash methods are guarded to work as iteratees for methods like
			 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
			 *
			 * The guarded methods are:
			 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
			 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
			 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
			 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Collection
			 * @param {Array|Object} collection The collection to iterate over.
			 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
			 * @returns {Array} Returns the new mapped array.
			 * @example
			 *
			 * function square(n) {
			 *   return n * n;
			 * }
			 *
			 * _.map([4, 8], square);
			 * // => [16, 64]
			 *
			 * _.map({ 'a': 4, 'b': 8 }, square);
			 * // => [16, 64] (iteration order is not guaranteed)
			 *
			 * var users = [
			 *   { 'user': 'barney' },
			 *   { 'user': 'fred' }
			 * ];
			 *
			 * // The `_.property` iteratee shorthand.
			 * _.map(users, 'user');
			 * // => ['barney', 'fred']
			 */
			function map$1(collection, iteratee) {
			  var func = isArray$3(collection) ? arrayMap$1 : baseMap$1;
			  return func(collection, baseIteratee$1(iteratee));
			}

			var map_1 = map$1;

			Object.defineProperty(flattenNames$1, "__esModule", {
			  value: true
			});
			flattenNames$1.flattenNames = undefined;

			var _isString2 = isString_1;

			var _isString3 = _interopRequireDefault$7(_isString2);

			var _forOwn2$2 = forOwn_1;

			var _forOwn3$2 = _interopRequireDefault$7(_forOwn2$2);

			var _isPlainObject2 = isPlainObject_1;

			var _isPlainObject3 = _interopRequireDefault$7(_isPlainObject2);

			var _map2 = map_1;

			var _map3 = _interopRequireDefault$7(_map2);

			function _interopRequireDefault$7(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var flattenNames = flattenNames$1.flattenNames = function flattenNames() {
			  var things = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

			  var names = [];

			  (0, _map3.default)(things, function (thing) {
			    if (Array.isArray(thing)) {
			      flattenNames(thing).map(function (name) {
			        return names.push(name);
			      });
			    } else if ((0, _isPlainObject3.default)(thing)) {
			      (0, _forOwn3$2.default)(thing, function (value, key) {
			        value === true && names.push(key);
			        names.push(key + '-' + value);
			      });
			    } else if ((0, _isString3.default)(thing)) {
			      names.push(thing);
			    }
			  });

			  return names;
			};

			flattenNames$1.default = flattenNames;

			var mergeClasses$1 = {};

			/**
			 * A specialized version of `_.forEach` for arrays without support for
			 * iteratee shorthands.
			 *
			 * @private
			 * @param {Array} [array] The array to iterate over.
			 * @param {Function} iteratee The function invoked per iteration.
			 * @returns {Array} Returns `array`.
			 */

			function arrayEach$2(array, iteratee) {
			  var index = -1,
			      length = array == null ? 0 : array.length;

			  while (++index < length) {
			    if (iteratee(array[index], index, array) === false) {
			      break;
			    }
			  }
			  return array;
			}

			var _arrayEach = arrayEach$2;

			var getNative$1 = _getNative;

			var defineProperty$3 = (function() {
			  try {
			    var func = getNative$1(Object, 'defineProperty');
			    func({}, '', {});
			    return func;
			  } catch (e) {}
			}());

			var _defineProperty$1 = defineProperty$3;

			var defineProperty$2 = _defineProperty$1;

			/**
			 * The base implementation of `assignValue` and `assignMergeValue` without
			 * value checks.
			 *
			 * @private
			 * @param {Object} object The object to modify.
			 * @param {string} key The key of the property to assign.
			 * @param {*} value The value to assign.
			 */
			function baseAssignValue$3(object, key, value) {
			  if (key == '__proto__' && defineProperty$2) {
			    defineProperty$2(object, key, {
			      'configurable': true,
			      'enumerable': true,
			      'value': value,
			      'writable': true
			    });
			  } else {
			    object[key] = value;
			  }
			}

			var _baseAssignValue = baseAssignValue$3;

			var baseAssignValue$2 = _baseAssignValue,
			    eq$1 = eq_1;

			/** Used for built-in method references. */
			var objectProto$h = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$f = objectProto$h.hasOwnProperty;

			/**
			 * Assigns `value` to `key` of `object` if the existing value is not equivalent
			 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
			 * for equality comparisons.
			 *
			 * @private
			 * @param {Object} object The object to modify.
			 * @param {string} key The key of the property to assign.
			 * @param {*} value The value to assign.
			 */
			function assignValue$3(object, key, value) {
			  var objValue = object[key];
			  if (!(hasOwnProperty$f.call(object, key) && eq$1(objValue, value)) ||
			      (value === undefined && !(key in object))) {
			    baseAssignValue$2(object, key, value);
			  }
			}

			var _assignValue = assignValue$3;

			var assignValue$2 = _assignValue,
			    baseAssignValue$1 = _baseAssignValue;

			/**
			 * Copies properties of `source` to `object`.
			 *
			 * @private
			 * @param {Object} source The object to copy properties from.
			 * @param {Array} props The property identifiers to copy.
			 * @param {Object} [object={}] The object to copy properties to.
			 * @param {Function} [customizer] The function to customize copied values.
			 * @returns {Object} Returns `object`.
			 */
			function copyObject$5(source, props, object, customizer) {
			  var isNew = !object;
			  object || (object = {});

			  var index = -1,
			      length = props.length;

			  while (++index < length) {
			    var key = props[index];

			    var newValue = customizer
			      ? customizer(object[key], source[key], key, object, source)
			      : undefined;

			    if (newValue === undefined) {
			      newValue = source[key];
			    }
			    if (isNew) {
			      baseAssignValue$1(object, key, newValue);
			    } else {
			      assignValue$2(object, key, newValue);
			    }
			  }
			  return object;
			}

			var _copyObject = copyObject$5;

			var copyObject$4 = _copyObject,
			    keys$2 = keys_1;

			/**
			 * The base implementation of `_.assign` without support for multiple sources
			 * or `customizer` functions.
			 *
			 * @private
			 * @param {Object} object The destination object.
			 * @param {Object} source The source object.
			 * @returns {Object} Returns `object`.
			 */
			function baseAssign$1(object, source) {
			  return object && copyObject$4(source, keys$2(source), object);
			}

			var _baseAssign = baseAssign$1;

			/**
			 * This function is like
			 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
			 * except that it includes inherited enumerable properties.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of property names.
			 */

			function nativeKeysIn$2(object) {
			  var result = [];
			  if (object != null) {
			    for (var key in Object(object)) {
			      result.push(key);
			    }
			  }
			  return result;
			}

			var _nativeKeysIn = nativeKeysIn$2;

			var isObject$3 = isObject_1,
			    isPrototype$2 = _isPrototype,
			    nativeKeysIn$1 = _nativeKeysIn;

			/** Used for built-in method references. */
			var objectProto$g = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$e = objectProto$g.hasOwnProperty;

			/**
			 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of property names.
			 */
			function baseKeysIn$2(object) {
			  if (!isObject$3(object)) {
			    return nativeKeysIn$1(object);
			  }
			  var isProto = isPrototype$2(object),
			      result = [];

			  for (var key in object) {
			    if (!(key == 'constructor' && (isProto || !hasOwnProperty$e.call(object, key)))) {
			      result.push(key);
			    }
			  }
			  return result;
			}

			var _baseKeysIn = baseKeysIn$2;

			var arrayLikeKeys$1 = _arrayLikeKeys,
			    baseKeysIn$1 = _baseKeysIn,
			    isArrayLike$1 = isArrayLike_1;

			/**
			 * Creates an array of the own and inherited enumerable property names of `object`.
			 *
			 * **Note:** Non-object values are coerced to objects.
			 *
			 * @static
			 * @memberOf _
			 * @since 3.0.0
			 * @category Object
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of property names.
			 * @example
			 *
			 * function Foo() {
			 *   this.a = 1;
			 *   this.b = 2;
			 * }
			 *
			 * Foo.prototype.c = 3;
			 *
			 * _.keysIn(new Foo);
			 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
			 */
			function keysIn$4(object) {
			  return isArrayLike$1(object) ? arrayLikeKeys$1(object, true) : baseKeysIn$1(object);
			}

			var keysIn_1 = keysIn$4;

			var copyObject$3 = _copyObject,
			    keysIn$3 = keysIn_1;

			/**
			 * The base implementation of `_.assignIn` without support for multiple sources
			 * or `customizer` functions.
			 *
			 * @private
			 * @param {Object} object The destination object.
			 * @param {Object} source The source object.
			 * @returns {Object} Returns `object`.
			 */
			function baseAssignIn$1(object, source) {
			  return object && copyObject$3(source, keysIn$3(source), object);
			}

			var _baseAssignIn = baseAssignIn$1;

			var _cloneBuffer = {exports: {}};

			(function (module, exports) {
			var root = _root;

			/** Detect free variable `exports`. */
			var freeExports = exports && !exports.nodeType && exports;

			/** Detect free variable `module`. */
			var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

			/** Detect the popular CommonJS extension `module.exports`. */
			var moduleExports = freeModule && freeModule.exports === freeExports;

			/** Built-in value references. */
			var Buffer = moduleExports ? root.Buffer : undefined,
			    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

			/**
			 * Creates a clone of  `buffer`.
			 *
			 * @private
			 * @param {Buffer} buffer The buffer to clone.
			 * @param {boolean} [isDeep] Specify a deep clone.
			 * @returns {Buffer} Returns the cloned buffer.
			 */
			function cloneBuffer(buffer, isDeep) {
			  if (isDeep) {
			    return buffer.slice();
			  }
			  var length = buffer.length,
			      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

			  buffer.copy(result);
			  return result;
			}

			module.exports = cloneBuffer;
			}(_cloneBuffer, _cloneBuffer.exports));

			/**
			 * Copies the values of `source` to `array`.
			 *
			 * @private
			 * @param {Array} source The array to copy values from.
			 * @param {Array} [array=[]] The array to copy values to.
			 * @returns {Array} Returns `array`.
			 */

			function copyArray$2(source, array) {
			  var index = -1,
			      length = source.length;

			  array || (array = Array(length));
			  while (++index < length) {
			    array[index] = source[index];
			  }
			  return array;
			}

			var _copyArray = copyArray$2;

			var copyObject$2 = _copyObject,
			    getSymbols$3 = _getSymbols;

			/**
			 * Copies own symbols of `source` to `object`.
			 *
			 * @private
			 * @param {Object} source The object to copy symbols from.
			 * @param {Object} [object={}] The object to copy symbols to.
			 * @returns {Object} Returns `object`.
			 */
			function copySymbols$1(source, object) {
			  return copyObject$2(source, getSymbols$3(source), object);
			}

			var _copySymbols = copySymbols$1;

			var arrayPush$1 = _arrayPush,
			    getPrototype$3 = _getPrototype,
			    getSymbols$2 = _getSymbols,
			    stubArray$1 = stubArray_1;

			/* Built-in method references for those with the same name as other `lodash` methods. */
			var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

			/**
			 * Creates an array of the own and inherited enumerable symbols of `object`.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of symbols.
			 */
			var getSymbolsIn$2 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
			  var result = [];
			  while (object) {
			    arrayPush$1(result, getSymbols$2(object));
			    object = getPrototype$3(object);
			  }
			  return result;
			};

			var _getSymbolsIn = getSymbolsIn$2;

			var copyObject$1 = _copyObject,
			    getSymbolsIn$1 = _getSymbolsIn;

			/**
			 * Copies own and inherited symbols of `source` to `object`.
			 *
			 * @private
			 * @param {Object} source The object to copy symbols from.
			 * @param {Object} [object={}] The object to copy symbols to.
			 * @returns {Object} Returns `object`.
			 */
			function copySymbolsIn$1(source, object) {
			  return copyObject$1(source, getSymbolsIn$1(source), object);
			}

			var _copySymbolsIn = copySymbolsIn$1;

			var baseGetAllKeys$1 = _baseGetAllKeys,
			    getSymbolsIn = _getSymbolsIn,
			    keysIn$2 = keysIn_1;

			/**
			 * Creates an array of own and inherited enumerable property names and
			 * symbols of `object`.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of property names and symbols.
			 */
			function getAllKeysIn$1(object) {
			  return baseGetAllKeys$1(object, keysIn$2, getSymbolsIn);
			}

			var _getAllKeysIn = getAllKeysIn$1;

			/** Used for built-in method references. */

			var objectProto$f = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$d = objectProto$f.hasOwnProperty;

			/**
			 * Initializes an array clone.
			 *
			 * @private
			 * @param {Array} array The array to clone.
			 * @returns {Array} Returns the initialized clone.
			 */
			function initCloneArray$1(array) {
			  var length = array.length,
			      result = new array.constructor(length);

			  // Add properties assigned by `RegExp#exec`.
			  if (length && typeof array[0] == 'string' && hasOwnProperty$d.call(array, 'index')) {
			    result.index = array.index;
			    result.input = array.input;
			  }
			  return result;
			}

			var _initCloneArray = initCloneArray$1;

			var Uint8Array$3 = _Uint8Array;

			/**
			 * Creates a clone of `arrayBuffer`.
			 *
			 * @private
			 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
			 * @returns {ArrayBuffer} Returns the cloned array buffer.
			 */
			function cloneArrayBuffer$4(arrayBuffer) {
			  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
			  new Uint8Array$3(result).set(new Uint8Array$3(arrayBuffer));
			  return result;
			}

			var _cloneArrayBuffer = cloneArrayBuffer$4;

			var cloneArrayBuffer$3 = _cloneArrayBuffer;

			/**
			 * Creates a clone of `dataView`.
			 *
			 * @private
			 * @param {Object} dataView The data view to clone.
			 * @param {boolean} [isDeep] Specify a deep clone.
			 * @returns {Object} Returns the cloned data view.
			 */
			function cloneDataView$1(dataView, isDeep) {
			  var buffer = isDeep ? cloneArrayBuffer$3(dataView.buffer) : dataView.buffer;
			  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
			}

			var _cloneDataView = cloneDataView$1;

			/** Used to match `RegExp` flags from their coerced string values. */

			var reFlags = /\w*$/;

			/**
			 * Creates a clone of `regexp`.
			 *
			 * @private
			 * @param {Object} regexp The regexp to clone.
			 * @returns {Object} Returns the cloned regexp.
			 */
			function cloneRegExp$1(regexp) {
			  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
			  result.lastIndex = regexp.lastIndex;
			  return result;
			}

			var _cloneRegExp = cloneRegExp$1;

			var Symbol$3 = _Symbol;

			/** Used to convert symbols to primitives and strings. */
			var symbolProto$2 = Symbol$3 ? Symbol$3.prototype : undefined,
			    symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

			/**
			 * Creates a clone of the `symbol` object.
			 *
			 * @private
			 * @param {Object} symbol The symbol object to clone.
			 * @returns {Object} Returns the cloned symbol object.
			 */
			function cloneSymbol$1(symbol) {
			  return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
			}

			var _cloneSymbol = cloneSymbol$1;

			var cloneArrayBuffer$2 = _cloneArrayBuffer;

			/**
			 * Creates a clone of `typedArray`.
			 *
			 * @private
			 * @param {Object} typedArray The typed array to clone.
			 * @param {boolean} [isDeep] Specify a deep clone.
			 * @returns {Object} Returns the cloned typed array.
			 */
			function cloneTypedArray$2(typedArray, isDeep) {
			  var buffer = isDeep ? cloneArrayBuffer$2(typedArray.buffer) : typedArray.buffer;
			  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
			}

			var _cloneTypedArray = cloneTypedArray$2;

			var cloneArrayBuffer$1 = _cloneArrayBuffer,
			    cloneDataView = _cloneDataView,
			    cloneRegExp = _cloneRegExp,
			    cloneSymbol = _cloneSymbol,
			    cloneTypedArray$1 = _cloneTypedArray;

			/** `Object#toString` result references. */
			var boolTag$3 = '[object Boolean]',
			    dateTag$3 = '[object Date]',
			    mapTag$5 = '[object Map]',
			    numberTag$3 = '[object Number]',
			    regexpTag$3 = '[object RegExp]',
			    setTag$5 = '[object Set]',
			    stringTag$3 = '[object String]',
			    symbolTag$3 = '[object Symbol]';

			var arrayBufferTag$3 = '[object ArrayBuffer]',
			    dataViewTag$4 = '[object DataView]',
			    float32Tag$2 = '[object Float32Array]',
			    float64Tag$2 = '[object Float64Array]',
			    int8Tag$2 = '[object Int8Array]',
			    int16Tag$2 = '[object Int16Array]',
			    int32Tag$2 = '[object Int32Array]',
			    uint8Tag$2 = '[object Uint8Array]',
			    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
			    uint16Tag$2 = '[object Uint16Array]',
			    uint32Tag$2 = '[object Uint32Array]';

			/**
			 * Initializes an object clone based on its `toStringTag`.
			 *
			 * **Note:** This function only supports cloning values with tags of
			 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
			 *
			 * @private
			 * @param {Object} object The object to clone.
			 * @param {string} tag The `toStringTag` of the object to clone.
			 * @param {boolean} [isDeep] Specify a deep clone.
			 * @returns {Object} Returns the initialized clone.
			 */
			function initCloneByTag$1(object, tag, isDeep) {
			  var Ctor = object.constructor;
			  switch (tag) {
			    case arrayBufferTag$3:
			      return cloneArrayBuffer$1(object);

			    case boolTag$3:
			    case dateTag$3:
			      return new Ctor(+object);

			    case dataViewTag$4:
			      return cloneDataView(object, isDeep);

			    case float32Tag$2: case float64Tag$2:
			    case int8Tag$2: case int16Tag$2: case int32Tag$2:
			    case uint8Tag$2: case uint8ClampedTag$2: case uint16Tag$2: case uint32Tag$2:
			      return cloneTypedArray$1(object, isDeep);

			    case mapTag$5:
			      return new Ctor;

			    case numberTag$3:
			    case stringTag$3:
			      return new Ctor(object);

			    case regexpTag$3:
			      return cloneRegExp(object);

			    case setTag$5:
			      return new Ctor;

			    case symbolTag$3:
			      return cloneSymbol(object);
			  }
			}

			var _initCloneByTag = initCloneByTag$1;

			var isObject$2 = isObject_1;

			/** Built-in value references. */
			var objectCreate$1 = Object.create;

			/**
			 * The base implementation of `_.create` without support for assigning
			 * properties to the created object.
			 *
			 * @private
			 * @param {Object} proto The object to inherit from.
			 * @returns {Object} Returns the new object.
			 */
			var baseCreate$3 = (function() {
			  function object() {}
			  return function(proto) {
			    if (!isObject$2(proto)) {
			      return {};
			    }
			    if (objectCreate$1) {
			      return objectCreate$1(proto);
			    }
			    object.prototype = proto;
			    var result = new object;
			    object.prototype = undefined;
			    return result;
			  };
			}());

			var _baseCreate = baseCreate$3;

			var baseCreate$2 = _baseCreate,
			    getPrototype$2 = _getPrototype,
			    isPrototype$1 = _isPrototype;

			/**
			 * Initializes an object clone.
			 *
			 * @private
			 * @param {Object} object The object to clone.
			 * @returns {Object} Returns the initialized clone.
			 */
			function initCloneObject$2(object) {
			  return (typeof object.constructor == 'function' && !isPrototype$1(object))
			    ? baseCreate$2(getPrototype$2(object))
			    : {};
			}

			var _initCloneObject = initCloneObject$2;

			var getTag$4 = _getTag,
			    isObjectLike$2 = isObjectLike_1;

			/** `Object#toString` result references. */
			var mapTag$4 = '[object Map]';

			/**
			 * The base implementation of `_.isMap` without Node.js optimizations.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
			 */
			function baseIsMap$1(value) {
			  return isObjectLike$2(value) && getTag$4(value) == mapTag$4;
			}

			var _baseIsMap = baseIsMap$1;

			var baseIsMap = _baseIsMap,
			    baseUnary$2 = _baseUnary,
			    nodeUtil$3 = _nodeUtil.exports;

			/* Node.js helper references. */
			var nodeIsMap = nodeUtil$3 && nodeUtil$3.isMap;

			/**
			 * Checks if `value` is classified as a `Map` object.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.3.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
			 * @example
			 *
			 * _.isMap(new Map);
			 * // => true
			 *
			 * _.isMap(new WeakMap);
			 * // => false
			 */
			var isMap$1 = nodeIsMap ? baseUnary$2(nodeIsMap) : baseIsMap;

			var isMap_1 = isMap$1;

			var getTag$3 = _getTag,
			    isObjectLike$1 = isObjectLike_1;

			/** `Object#toString` result references. */
			var setTag$4 = '[object Set]';

			/**
			 * The base implementation of `_.isSet` without Node.js optimizations.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
			 */
			function baseIsSet$1(value) {
			  return isObjectLike$1(value) && getTag$3(value) == setTag$4;
			}

			var _baseIsSet = baseIsSet$1;

			var baseIsSet = _baseIsSet,
			    baseUnary$1 = _baseUnary,
			    nodeUtil$2 = _nodeUtil.exports;

			/* Node.js helper references. */
			var nodeIsSet = nodeUtil$2 && nodeUtil$2.isSet;

			/**
			 * Checks if `value` is classified as a `Set` object.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.3.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
			 * @example
			 *
			 * _.isSet(new Set);
			 * // => true
			 *
			 * _.isSet(new WeakSet);
			 * // => false
			 */
			var isSet$1 = nodeIsSet ? baseUnary$1(nodeIsSet) : baseIsSet;

			var isSet_1 = isSet$1;

			var Stack$1 = _Stack,
			    arrayEach$1 = _arrayEach,
			    assignValue$1 = _assignValue,
			    baseAssign = _baseAssign,
			    baseAssignIn = _baseAssignIn,
			    cloneBuffer$1 = _cloneBuffer.exports,
			    copyArray$1 = _copyArray,
			    copySymbols = _copySymbols,
			    copySymbolsIn = _copySymbolsIn,
			    getAllKeys$1 = _getAllKeys,
			    getAllKeysIn = _getAllKeysIn,
			    getTag$2 = _getTag,
			    initCloneArray = _initCloneArray,
			    initCloneByTag = _initCloneByTag,
			    initCloneObject$1 = _initCloneObject,
			    isArray$2 = isArray_1,
			    isBuffer$2 = isBuffer$5.exports,
			    isMap = isMap_1,
			    isObject$1 = isObject_1,
			    isSet = isSet_1,
			    keys$1 = keys_1,
			    keysIn$1 = keysIn_1;

			/** Used to compose bitmasks for cloning. */
			var CLONE_DEEP_FLAG$1 = 1,
			    CLONE_FLAT_FLAG = 2,
			    CLONE_SYMBOLS_FLAG$1 = 4;

			/** `Object#toString` result references. */
			var argsTag$3 = '[object Arguments]',
			    arrayTag$2 = '[object Array]',
			    boolTag$2 = '[object Boolean]',
			    dateTag$2 = '[object Date]',
			    errorTag$2 = '[object Error]',
			    funcTag$2 = '[object Function]',
			    genTag$1 = '[object GeneratorFunction]',
			    mapTag$3 = '[object Map]',
			    numberTag$2 = '[object Number]',
			    objectTag$4 = '[object Object]',
			    regexpTag$2 = '[object RegExp]',
			    setTag$3 = '[object Set]',
			    stringTag$2 = '[object String]',
			    symbolTag$2 = '[object Symbol]',
			    weakMapTag$2 = '[object WeakMap]';

			var arrayBufferTag$2 = '[object ArrayBuffer]',
			    dataViewTag$3 = '[object DataView]',
			    float32Tag$1 = '[object Float32Array]',
			    float64Tag$1 = '[object Float64Array]',
			    int8Tag$1 = '[object Int8Array]',
			    int16Tag$1 = '[object Int16Array]',
			    int32Tag$1 = '[object Int32Array]',
			    uint8Tag$1 = '[object Uint8Array]',
			    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
			    uint16Tag$1 = '[object Uint16Array]',
			    uint32Tag$1 = '[object Uint32Array]';

			/** Used to identify `toStringTag` values supported by `_.clone`. */
			var cloneableTags = {};
			cloneableTags[argsTag$3] = cloneableTags[arrayTag$2] =
			cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$3] =
			cloneableTags[boolTag$2] = cloneableTags[dateTag$2] =
			cloneableTags[float32Tag$1] = cloneableTags[float64Tag$1] =
			cloneableTags[int8Tag$1] = cloneableTags[int16Tag$1] =
			cloneableTags[int32Tag$1] = cloneableTags[mapTag$3] =
			cloneableTags[numberTag$2] = cloneableTags[objectTag$4] =
			cloneableTags[regexpTag$2] = cloneableTags[setTag$3] =
			cloneableTags[stringTag$2] = cloneableTags[symbolTag$2] =
			cloneableTags[uint8Tag$1] = cloneableTags[uint8ClampedTag$1] =
			cloneableTags[uint16Tag$1] = cloneableTags[uint32Tag$1] = true;
			cloneableTags[errorTag$2] = cloneableTags[funcTag$2] =
			cloneableTags[weakMapTag$2] = false;

			/**
			 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
			 * traversed objects.
			 *
			 * @private
			 * @param {*} value The value to clone.
			 * @param {boolean} bitmask The bitmask flags.
			 *  1 - Deep clone
			 *  2 - Flatten inherited properties
			 *  4 - Clone symbols
			 * @param {Function} [customizer] The function to customize cloning.
			 * @param {string} [key] The key of `value`.
			 * @param {Object} [object] The parent object of `value`.
			 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
			 * @returns {*} Returns the cloned value.
			 */
			function baseClone$1(value, bitmask, customizer, key, object, stack) {
			  var result,
			      isDeep = bitmask & CLONE_DEEP_FLAG$1,
			      isFlat = bitmask & CLONE_FLAT_FLAG,
			      isFull = bitmask & CLONE_SYMBOLS_FLAG$1;

			  if (customizer) {
			    result = object ? customizer(value, key, object, stack) : customizer(value);
			  }
			  if (result !== undefined) {
			    return result;
			  }
			  if (!isObject$1(value)) {
			    return value;
			  }
			  var isArr = isArray$2(value);
			  if (isArr) {
			    result = initCloneArray(value);
			    if (!isDeep) {
			      return copyArray$1(value, result);
			    }
			  } else {
			    var tag = getTag$2(value),
			        isFunc = tag == funcTag$2 || tag == genTag$1;

			    if (isBuffer$2(value)) {
			      return cloneBuffer$1(value, isDeep);
			    }
			    if (tag == objectTag$4 || tag == argsTag$3 || (isFunc && !object)) {
			      result = (isFlat || isFunc) ? {} : initCloneObject$1(value);
			      if (!isDeep) {
			        return isFlat
			          ? copySymbolsIn(value, baseAssignIn(result, value))
			          : copySymbols(value, baseAssign(result, value));
			      }
			    } else {
			      if (!cloneableTags[tag]) {
			        return object ? value : {};
			      }
			      result = initCloneByTag(value, tag, isDeep);
			    }
			  }
			  // Check for circular references and return its corresponding clone.
			  stack || (stack = new Stack$1);
			  var stacked = stack.get(value);
			  if (stacked) {
			    return stacked;
			  }
			  stack.set(value, result);

			  if (isSet(value)) {
			    value.forEach(function(subValue) {
			      result.add(baseClone$1(subValue, bitmask, customizer, subValue, value, stack));
			    });
			  } else if (isMap(value)) {
			    value.forEach(function(subValue, key) {
			      result.set(key, baseClone$1(subValue, bitmask, customizer, key, value, stack));
			    });
			  }

			  var keysFunc = isFull
			    ? (isFlat ? getAllKeysIn : getAllKeys$1)
			    : (isFlat ? keysIn$1 : keys$1);

			  var props = isArr ? undefined : keysFunc(value);
			  arrayEach$1(props || value, function(subValue, key) {
			    if (props) {
			      key = subValue;
			      subValue = value[key];
			    }
			    // Recursively populate clone (susceptible to call stack limits).
			    assignValue$1(result, key, baseClone$1(subValue, bitmask, customizer, key, value, stack));
			  });
			  return result;
			}

			var _baseClone = baseClone$1;

			var baseClone = _baseClone;

			/** Used to compose bitmasks for cloning. */
			var CLONE_DEEP_FLAG = 1,
			    CLONE_SYMBOLS_FLAG = 4;

			/**
			 * This method is like `_.clone` except that it recursively clones `value`.
			 *
			 * @static
			 * @memberOf _
			 * @since 1.0.0
			 * @category Lang
			 * @param {*} value The value to recursively clone.
			 * @returns {*} Returns the deep cloned value.
			 * @see _.clone
			 * @example
			 *
			 * var objects = [{ 'a': 1 }, { 'b': 2 }];
			 *
			 * var deep = _.cloneDeep(objects);
			 * console.log(deep[0] === objects[0]);
			 * // => false
			 */
			function cloneDeep(value) {
			  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
			}

			var cloneDeep_1 = cloneDeep;

			Object.defineProperty(mergeClasses$1, "__esModule", {
			  value: true
			});
			mergeClasses$1.mergeClasses = undefined;

			var _forOwn2$1 = forOwn_1;

			var _forOwn3$1 = _interopRequireDefault$6(_forOwn2$1);

			var _cloneDeep2 = cloneDeep_1;

			var _cloneDeep3 = _interopRequireDefault$6(_cloneDeep2);

			var _extends$e = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

			function _interopRequireDefault$6(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var mergeClasses = mergeClasses$1.mergeClasses = function mergeClasses(classes) {
			  var activeNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

			  var styles = classes.default && (0, _cloneDeep3.default)(classes.default) || {};
			  activeNames.map(function (name) {
			    var toMerge = classes[name];
			    if (toMerge) {
			      (0, _forOwn3$1.default)(toMerge, function (value, key) {
			        if (!styles[key]) {
			          styles[key] = {};
			        }

			        styles[key] = _extends$e({}, styles[key], toMerge[key]);
			      });
			    }

			    return name;
			  });
			  return styles;
			};

			mergeClasses$1.default = mergeClasses;

			var autoprefix$1 = {};

			Object.defineProperty(autoprefix$1, "__esModule", {
			  value: true
			});
			autoprefix$1.autoprefix = undefined;

			var _forOwn2 = forOwn_1;

			var _forOwn3 = _interopRequireDefault$5(_forOwn2);

			var _extends$d = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

			function _interopRequireDefault$5(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var transforms = {
			  borderRadius: function borderRadius(value) {
			    return {
			      msBorderRadius: value,
			      MozBorderRadius: value,
			      OBorderRadius: value,
			      WebkitBorderRadius: value,
			      borderRadius: value
			    };
			  },
			  boxShadow: function boxShadow(value) {
			    return {
			      msBoxShadow: value,
			      MozBoxShadow: value,
			      OBoxShadow: value,
			      WebkitBoxShadow: value,
			      boxShadow: value
			    };
			  },
			  userSelect: function userSelect(value) {
			    return {
			      WebkitTouchCallout: value,
			      KhtmlUserSelect: value,
			      MozUserSelect: value,
			      msUserSelect: value,
			      WebkitUserSelect: value,
			      userSelect: value
			    };
			  },

			  flex: function flex(value) {
			    return {
			      WebkitBoxFlex: value,
			      MozBoxFlex: value,
			      WebkitFlex: value,
			      msFlex: value,
			      flex: value
			    };
			  },
			  flexBasis: function flexBasis(value) {
			    return {
			      WebkitFlexBasis: value,
			      flexBasis: value
			    };
			  },
			  justifyContent: function justifyContent(value) {
			    return {
			      WebkitJustifyContent: value,
			      justifyContent: value
			    };
			  },

			  transition: function transition(value) {
			    return {
			      msTransition: value,
			      MozTransition: value,
			      OTransition: value,
			      WebkitTransition: value,
			      transition: value
			    };
			  },

			  transform: function transform(value) {
			    return {
			      msTransform: value,
			      MozTransform: value,
			      OTransform: value,
			      WebkitTransform: value,
			      transform: value
			    };
			  },
			  absolute: function absolute(value) {
			    var direction = value && value.split(' ');
			    return {
			      position: 'absolute',
			      top: direction && direction[0],
			      right: direction && direction[1],
			      bottom: direction && direction[2],
			      left: direction && direction[3]
			    };
			  },
			  extend: function extend(name, otherElementStyles) {
			    var otherStyle = otherElementStyles[name];
			    if (otherStyle) {
			      return otherStyle;
			    }
			    return {
			      'extend': name
			    };
			  }
			};

			var autoprefix = autoprefix$1.autoprefix = function autoprefix(elements) {
			  var prefixed = {};
			  (0, _forOwn3.default)(elements, function (styles, element) {
			    var expanded = {};
			    (0, _forOwn3.default)(styles, function (value, key) {
			      var transform = transforms[key];
			      if (transform) {
			        expanded = _extends$d({}, expanded, transform(value));
			      } else {
			        expanded[key] = value;
			      }
			    });
			    prefixed[element] = expanded;
			  });
			  return prefixed;
			};

			autoprefix$1.default = autoprefix;

			var hover$1 = {};

			Object.defineProperty(hover$1, "__esModule", {
			  value: true
			});
			hover$1.hover = undefined;

			var _extends$c = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

			var _react$3 = React__default;

			var _react2$3 = _interopRequireDefault$4(_react$3);

			function _interopRequireDefault$4(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function _classCallCheck$9(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

			function _possibleConstructorReturn$9(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

			function _inherits$9(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

			var hover = hover$1.hover = function hover(Component) {
			  var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'span';

			  return function (_React$Component) {
			    _inherits$9(Hover, _React$Component);

			    function Hover() {
			      var _ref;

			      var _temp, _this, _ret;

			      _classCallCheck$9(this, Hover);

			      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			        args[_key] = arguments[_key];
			      }

			      return _ret = (_temp = (_this = _possibleConstructorReturn$9(this, (_ref = Hover.__proto__ || Object.getPrototypeOf(Hover)).call.apply(_ref, [this].concat(args))), _this), _this.state = { hover: false }, _this.handleMouseOver = function () {
			        return _this.setState({ hover: true });
			      }, _this.handleMouseOut = function () {
			        return _this.setState({ hover: false });
			      }, _this.render = function () {
			        return _react2$3.default.createElement(
			          Span,
			          { onMouseOver: _this.handleMouseOver, onMouseOut: _this.handleMouseOut },
			          _react2$3.default.createElement(Component, _extends$c({}, _this.props, _this.state))
			        );
			      }, _temp), _possibleConstructorReturn$9(_this, _ret);
			    }

			    return Hover;
			  }(_react2$3.default.Component);
			};

			hover$1.default = hover;

			var active$1 = {};

			Object.defineProperty(active$1, "__esModule", {
			  value: true
			});
			active$1.active = undefined;

			var _extends$b = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

			var _react$2 = React__default;

			var _react2$2 = _interopRequireDefault$3(_react$2);

			function _interopRequireDefault$3(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function _classCallCheck$8(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

			function _possibleConstructorReturn$8(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

			function _inherits$8(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

			var active = active$1.active = function active(Component) {
			  var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'span';

			  return function (_React$Component) {
			    _inherits$8(Active, _React$Component);

			    function Active() {
			      var _ref;

			      var _temp, _this, _ret;

			      _classCallCheck$8(this, Active);

			      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			        args[_key] = arguments[_key];
			      }

			      return _ret = (_temp = (_this = _possibleConstructorReturn$8(this, (_ref = Active.__proto__ || Object.getPrototypeOf(Active)).call.apply(_ref, [this].concat(args))), _this), _this.state = { active: false }, _this.handleMouseDown = function () {
			        return _this.setState({ active: true });
			      }, _this.handleMouseUp = function () {
			        return _this.setState({ active: false });
			      }, _this.render = function () {
			        return _react2$2.default.createElement(
			          Span,
			          { onMouseDown: _this.handleMouseDown, onMouseUp: _this.handleMouseUp },
			          _react2$2.default.createElement(Component, _extends$b({}, _this.props, _this.state))
			        );
			      }, _temp), _possibleConstructorReturn$8(_this, _ret);
			    }

			    return Active;
			  }(_react2$2.default.Component);
			};

			active$1.default = active;

			var loop = {};

			Object.defineProperty(loop, "__esModule", {
			  value: true
			});
			var loopable = function loopable(i, length) {
			  var props = {};
			  var setProp = function setProp(name) {
			    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

			    props[name] = value;
			  };

			  i === 0 && setProp('first-child');
			  i === length - 1 && setProp('last-child');
			  (i === 0 || i % 2 === 0) && setProp('even');
			  Math.abs(i % 2) === 1 && setProp('odd');
			  setProp('nth-child', i);

			  return props;
			};

			loop.default = loopable;

			Object.defineProperty(lib, "__esModule", {
			  value: true
			});
			lib.ReactCSS = lib.loop = lib.handleActive = handleHover = lib.handleHover = lib.hover = undefined;

			var _flattenNames = flattenNames$1;

			var _flattenNames2 = _interopRequireDefault$2(_flattenNames);

			var _mergeClasses = mergeClasses$1;

			var _mergeClasses2 = _interopRequireDefault$2(_mergeClasses);

			var _autoprefix = autoprefix$1;

			var _autoprefix2 = _interopRequireDefault$2(_autoprefix);

			var _hover2 = hover$1;

			var _hover3 = _interopRequireDefault$2(_hover2);

			var _active = active$1;

			var _active2 = _interopRequireDefault$2(_active);

			var _loop2 = loop;

			var _loop3 = _interopRequireDefault$2(_loop2);

			function _interopRequireDefault$2(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			lib.hover = _hover3.default;
			var handleHover = lib.handleHover = _hover3.default;
			lib.handleActive = _active2.default;
			lib.loop = _loop3.default;
			var ReactCSS = lib.ReactCSS = function ReactCSS(classes) {
			  for (var _len = arguments.length, activations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			    activations[_key - 1] = arguments[_key];
			  }

			  var activeNames = (0, _flattenNames2.default)(activations);
			  var merged = (0, _mergeClasses2.default)(classes, activeNames);
			  return (0, _autoprefix2.default)(merged);
			};

			var _default$2 = lib.default = ReactCSS;

			var calculateChange$2 = function calculateChange(e, hsl, direction, initialA, container) {
			  var containerWidth = container.clientWidth;
			  var containerHeight = container.clientHeight;
			  var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;
			  var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;
			  var left = x - (container.getBoundingClientRect().left + window.pageXOffset);
			  var top = y - (container.getBoundingClientRect().top + window.pageYOffset);

			  if (direction === 'vertical') {
			    var a = void 0;
			    if (top < 0) {
			      a = 0;
			    } else if (top > containerHeight) {
			      a = 1;
			    } else {
			      a = Math.round(top * 100 / containerHeight) / 100;
			    }

			    if (hsl.a !== a) {
			      return {
			        h: hsl.h,
			        s: hsl.s,
			        l: hsl.l,
			        a: a,
			        source: 'rgb'
			      };
			    }
			  } else {
			    var _a = void 0;
			    if (left < 0) {
			      _a = 0;
			    } else if (left > containerWidth) {
			      _a = 1;
			    } else {
			      _a = Math.round(left * 100 / containerWidth) / 100;
			    }

			    if (initialA !== _a) {
			      return {
			        h: hsl.h,
			        s: hsl.s,
			        l: hsl.l,
			        a: _a,
			        source: 'rgb'
			      };
			    }
			  }
			  return null;
			};

			var checkboardCache = {};

			var render = function render(c1, c2, size, serverCanvas) {
			  if (typeof document === 'undefined' && !serverCanvas) {
			    return null;
			  }
			  var canvas = serverCanvas ? new serverCanvas() : document.createElement('canvas');
			  canvas.width = size * 2;
			  canvas.height = size * 2;
			  var ctx = canvas.getContext('2d');
			  if (!ctx) {
			    return null;
			  } // If no context can be found, return early.
			  ctx.fillStyle = c1;
			  ctx.fillRect(0, 0, canvas.width, canvas.height);
			  ctx.fillStyle = c2;
			  ctx.fillRect(0, 0, size, size);
			  ctx.translate(size, size);
			  ctx.fillRect(0, 0, size, size);
			  return canvas.toDataURL();
			};

			var get$1 = function get(c1, c2, size, serverCanvas) {
			  var key = c1 + '-' + c2 + '-' + size + (serverCanvas ? '-server' : '');

			  if (checkboardCache[key]) {
			    return checkboardCache[key];
			  }

			  var checkboard = render(c1, c2, size, serverCanvas);
			  checkboardCache[key] = checkboard;
			  return checkboard;
			};

			var _extends$a = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

			var Checkboard = function Checkboard(_ref) {
			  var white = _ref.white,
			      grey = _ref.grey,
			      size = _ref.size,
			      renderers = _ref.renderers,
			      borderRadius = _ref.borderRadius,
			      boxShadow = _ref.boxShadow,
			      children = _ref.children;

			  var styles = _default$2({
			    'default': {
			      grid: {
			        borderRadius: borderRadius,
			        boxShadow: boxShadow,
			        absolute: '0px 0px 0px 0px',
			        background: 'url(' + get$1(white, grey, size, renderers.canvas) + ') center left'
			      }
			    }
			  });
			  return isValidElement(children) ? React__default.cloneElement(children, _extends$a({}, children.props, { style: _extends$a({}, children.props.style, styles.grid) })) : React__default.createElement('div', { style: styles.grid });
			};

			Checkboard.defaultProps = {
			  size: 8,
			  white: 'transparent',
			  grey: 'rgba(0,0,0,.08)',
			  renderers: {}
			};

			var _extends$9 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

			var _createClass$7 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

			function _classCallCheck$7(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

			function _possibleConstructorReturn$7(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

			function _inherits$7(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

			var Alpha = function (_ref) {
			  _inherits$7(Alpha, _ref);

			  function Alpha() {
			    var _ref2;

			    var _temp, _this, _ret;

			    _classCallCheck$7(this, Alpha);

			    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			      args[_key] = arguments[_key];
			    }

			    return _ret = (_temp = (_this = _possibleConstructorReturn$7(this, (_ref2 = Alpha.__proto__ || Object.getPrototypeOf(Alpha)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function (e) {
			      var change = calculateChange$2(e, _this.props.hsl, _this.props.direction, _this.props.a, _this.container);
			      change && typeof _this.props.onChange === 'function' && _this.props.onChange(change, e);
			    }, _this.handleMouseDown = function (e) {
			      _this.handleChange(e);
			      window.addEventListener('mousemove', _this.handleChange);
			      window.addEventListener('mouseup', _this.handleMouseUp);
			    }, _this.handleMouseUp = function () {
			      _this.unbindEventListeners();
			    }, _this.unbindEventListeners = function () {
			      window.removeEventListener('mousemove', _this.handleChange);
			      window.removeEventListener('mouseup', _this.handleMouseUp);
			    }, _temp), _possibleConstructorReturn$7(_this, _ret);
			  }

			  _createClass$7(Alpha, [{
			    key: 'componentWillUnmount',
			    value: function componentWillUnmount() {
			      this.unbindEventListeners();
			    }
			  }, {
			    key: 'render',
			    value: function render() {
			      var _this2 = this;

			      var rgb = this.props.rgb;
			      var styles = _default$2({
			        'default': {
			          alpha: {
			            absolute: '0px 0px 0px 0px',
			            borderRadius: this.props.radius
			          },
			          checkboard: {
			            absolute: '0px 0px 0px 0px',
			            overflow: 'hidden',
			            borderRadius: this.props.radius
			          },
			          gradient: {
			            absolute: '0px 0px 0px 0px',
			            background: 'linear-gradient(to right, rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 0) 0%,\n           rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 1) 100%)',
			            boxShadow: this.props.shadow,
			            borderRadius: this.props.radius
			          },
			          container: {
			            position: 'relative',
			            height: '100%',
			            margin: '0 3px'
			          },
			          pointer: {
			            position: 'absolute',
			            left: rgb.a * 100 + '%'
			          },
			          slider: {
			            width: '4px',
			            borderRadius: '1px',
			            height: '8px',
			            boxShadow: '0 0 2px rgba(0, 0, 0, .6)',
			            background: '#fff',
			            marginTop: '1px',
			            transform: 'translateX(-2px)'
			          }
			        },
			        'vertical': {
			          gradient: {
			            background: 'linear-gradient(to bottom, rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 0) 0%,\n           rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 1) 100%)'
			          },
			          pointer: {
			            left: 0,
			            top: rgb.a * 100 + '%'
			          }
			        },
			        'overwrite': _extends$9({}, this.props.style)
			      }, {
			        vertical: this.props.direction === 'vertical',
			        overwrite: true
			      });

			      return React__default.createElement(
			        'div',
			        { style: styles.alpha },
			        React__default.createElement(
			          'div',
			          { style: styles.checkboard },
			          React__default.createElement(Checkboard, { renderers: this.props.renderers })
			        ),
			        React__default.createElement('div', { style: styles.gradient }),
			        React__default.createElement(
			          'div',
			          {
			            style: styles.container,
			            ref: function ref(container) {
			              return _this2.container = container;
			            },
			            onMouseDown: this.handleMouseDown,
			            onTouchMove: this.handleChange,
			            onTouchStart: this.handleChange
			          },
			          React__default.createElement(
			            'div',
			            { style: styles.pointer },
			            this.props.pointer ? React__default.createElement(this.props.pointer, this.props) : React__default.createElement('div', { style: styles.slider })
			          )
			        )
			      );
			    }
			  }]);

			  return Alpha;
			}(PureComponent || Component);

			var _createClass$6 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

			function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

			function _classCallCheck$6(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

			function _possibleConstructorReturn$6(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

			function _inherits$6(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

			var DEFAULT_ARROW_OFFSET = 1;

			var UP_KEY_CODE = 38;
			var DOWN_KEY_CODE = 40;
			var VALID_KEY_CODES = [UP_KEY_CODE, DOWN_KEY_CODE];
			var isValidKeyCode = function isValidKeyCode(keyCode) {
			  return VALID_KEY_CODES.indexOf(keyCode) > -1;
			};
			var getNumberValue = function getNumberValue(value) {
			  return Number(String(value).replace(/%/g, ''));
			};

			var idCounter = 1;

			var EditableInput = function (_ref) {
			  _inherits$6(EditableInput, _ref);

			  function EditableInput(props) {
			    _classCallCheck$6(this, EditableInput);

			    var _this = _possibleConstructorReturn$6(this, (EditableInput.__proto__ || Object.getPrototypeOf(EditableInput)).call(this));

			    _this.handleBlur = function () {
			      if (_this.state.blurValue) {
			        _this.setState({ value: _this.state.blurValue, blurValue: null });
			      }
			    };

			    _this.handleChange = function (e) {
			      _this.setUpdatedValue(e.target.value, e);
			    };

			    _this.handleKeyDown = function (e) {
			      // In case `e.target.value` is a percentage remove the `%` character
			      // and update accordingly with a percentage
			      // https://github.com/casesandberg/react-color/issues/383
			      var value = getNumberValue(e.target.value);
			      if (!isNaN(value) && isValidKeyCode(e.keyCode)) {
			        var offset = _this.getArrowOffset();
			        var updatedValue = e.keyCode === UP_KEY_CODE ? value + offset : value - offset;

			        _this.setUpdatedValue(updatedValue, e);
			      }
			    };

			    _this.handleDrag = function (e) {
			      if (_this.props.dragLabel) {
			        var newValue = Math.round(_this.props.value + e.movementX);
			        if (newValue >= 0 && newValue <= _this.props.dragMax) {
			          _this.props.onChange && _this.props.onChange(_this.getValueObjectWithLabel(newValue), e);
			        }
			      }
			    };

			    _this.handleMouseDown = function (e) {
			      if (_this.props.dragLabel) {
			        e.preventDefault();
			        _this.handleDrag(e);
			        window.addEventListener('mousemove', _this.handleDrag);
			        window.addEventListener('mouseup', _this.handleMouseUp);
			      }
			    };

			    _this.handleMouseUp = function () {
			      _this.unbindEventListeners();
			    };

			    _this.unbindEventListeners = function () {
			      window.removeEventListener('mousemove', _this.handleDrag);
			      window.removeEventListener('mouseup', _this.handleMouseUp);
			    };

			    _this.state = {
			      value: String(props.value).toUpperCase(),
			      blurValue: String(props.value).toUpperCase()
			    };

			    _this.inputId = 'rc-editable-input-' + idCounter++;
			    return _this;
			  }

			  _createClass$6(EditableInput, [{
			    key: 'componentDidUpdate',
			    value: function componentDidUpdate(prevProps, prevState) {
			      if (this.props.value !== this.state.value && (prevProps.value !== this.props.value || prevState.value !== this.state.value)) {
			        if (this.input === document.activeElement) {
			          this.setState({ blurValue: String(this.props.value).toUpperCase() });
			        } else {
			          this.setState({ value: String(this.props.value).toUpperCase(), blurValue: !this.state.blurValue && String(this.props.value).toUpperCase() });
			        }
			      }
			    }
			  }, {
			    key: 'componentWillUnmount',
			    value: function componentWillUnmount() {
			      this.unbindEventListeners();
			    }
			  }, {
			    key: 'getValueObjectWithLabel',
			    value: function getValueObjectWithLabel(value) {
			      return _defineProperty({}, this.props.label, value);
			    }
			  }, {
			    key: 'getArrowOffset',
			    value: function getArrowOffset() {
			      return this.props.arrowOffset || DEFAULT_ARROW_OFFSET;
			    }
			  }, {
			    key: 'setUpdatedValue',
			    value: function setUpdatedValue(value, e) {
			      var onChangeValue = this.props.label ? this.getValueObjectWithLabel(value) : value;
			      this.props.onChange && this.props.onChange(onChangeValue, e);

			      this.setState({ value: value });
			    }
			  }, {
			    key: 'render',
			    value: function render() {
			      var _this2 = this;

			      var styles = _default$2({
			        'default': {
			          wrap: {
			            position: 'relative'
			          }
			        },
			        'user-override': {
			          wrap: this.props.style && this.props.style.wrap ? this.props.style.wrap : {},
			          input: this.props.style && this.props.style.input ? this.props.style.input : {},
			          label: this.props.style && this.props.style.label ? this.props.style.label : {}
			        },
			        'dragLabel-true': {
			          label: {
			            cursor: 'ew-resize'
			          }
			        }
			      }, {
			        'user-override': true
			      }, this.props);

			      return React__default.createElement(
			        'div',
			        { style: styles.wrap },
			        React__default.createElement('input', {
			          id: this.inputId,
			          style: styles.input,
			          ref: function ref(input) {
			            return _this2.input = input;
			          },
			          value: this.state.value,
			          onKeyDown: this.handleKeyDown,
			          onChange: this.handleChange,
			          onBlur: this.handleBlur,
			          placeholder: this.props.placeholder,
			          spellCheck: 'false'
			        }),
			        this.props.label && !this.props.hideLabel ? React__default.createElement(
			          'label',
			          {
			            htmlFor: this.inputId,
			            style: styles.label,
			            onMouseDown: this.handleMouseDown
			          },
			          this.props.label
			        ) : null
			      );
			    }
			  }]);

			  return EditableInput;
			}(PureComponent || Component);

			var calculateChange$1 = function calculateChange(e, direction, hsl, container) {
			  var containerWidth = container.clientWidth;
			  var containerHeight = container.clientHeight;
			  var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;
			  var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;
			  var left = x - (container.getBoundingClientRect().left + window.pageXOffset);
			  var top = y - (container.getBoundingClientRect().top + window.pageYOffset);

			  if (direction === 'vertical') {
			    var h = void 0;
			    if (top < 0) {
			      h = 359;
			    } else if (top > containerHeight) {
			      h = 0;
			    } else {
			      var percent = -(top * 100 / containerHeight) + 100;
			      h = 360 * percent / 100;
			    }

			    if (hsl.h !== h) {
			      return {
			        h: h,
			        s: hsl.s,
			        l: hsl.l,
			        a: hsl.a,
			        source: 'hsl'
			      };
			    }
			  } else {
			    var _h = void 0;
			    if (left < 0) {
			      _h = 0;
			    } else if (left > containerWidth) {
			      _h = 359;
			    } else {
			      var _percent = left * 100 / containerWidth;
			      _h = 360 * _percent / 100;
			    }

			    if (hsl.h !== _h) {
			      return {
			        h: _h,
			        s: hsl.s,
			        l: hsl.l,
			        a: hsl.a,
			        source: 'hsl'
			      };
			    }
			  }
			  return null;
			};

			var _createClass$5 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

			function _classCallCheck$5(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

			function _possibleConstructorReturn$5(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

			function _inherits$5(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

			var Hue = function (_ref) {
			  _inherits$5(Hue, _ref);

			  function Hue() {
			    var _ref2;

			    var _temp, _this, _ret;

			    _classCallCheck$5(this, Hue);

			    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			      args[_key] = arguments[_key];
			    }

			    return _ret = (_temp = (_this = _possibleConstructorReturn$5(this, (_ref2 = Hue.__proto__ || Object.getPrototypeOf(Hue)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function (e) {
			      var change = calculateChange$1(e, _this.props.direction, _this.props.hsl, _this.container);
			      change && typeof _this.props.onChange === 'function' && _this.props.onChange(change, e);
			    }, _this.handleMouseDown = function (e) {
			      _this.handleChange(e);
			      window.addEventListener('mousemove', _this.handleChange);
			      window.addEventListener('mouseup', _this.handleMouseUp);
			    }, _this.handleMouseUp = function () {
			      _this.unbindEventListeners();
			    }, _temp), _possibleConstructorReturn$5(_this, _ret);
			  }

			  _createClass$5(Hue, [{
			    key: 'componentWillUnmount',
			    value: function componentWillUnmount() {
			      this.unbindEventListeners();
			    }
			  }, {
			    key: 'unbindEventListeners',
			    value: function unbindEventListeners() {
			      window.removeEventListener('mousemove', this.handleChange);
			      window.removeEventListener('mouseup', this.handleMouseUp);
			    }
			  }, {
			    key: 'render',
			    value: function render() {
			      var _this2 = this;

			      var _props$direction = this.props.direction,
			          direction = _props$direction === undefined ? 'horizontal' : _props$direction;


			      var styles = _default$2({
			        'default': {
			          hue: {
			            absolute: '0px 0px 0px 0px',
			            borderRadius: this.props.radius,
			            boxShadow: this.props.shadow
			          },
			          container: {
			            padding: '0 2px',
			            position: 'relative',
			            height: '100%',
			            borderRadius: this.props.radius
			          },
			          pointer: {
			            position: 'absolute',
			            left: this.props.hsl.h * 100 / 360 + '%'
			          },
			          slider: {
			            marginTop: '1px',
			            width: '4px',
			            borderRadius: '1px',
			            height: '8px',
			            boxShadow: '0 0 2px rgba(0, 0, 0, .6)',
			            background: '#fff',
			            transform: 'translateX(-2px)'
			          }
			        },
			        'vertical': {
			          pointer: {
			            left: '0px',
			            top: -(this.props.hsl.h * 100 / 360) + 100 + '%'
			          }
			        }
			      }, { vertical: direction === 'vertical' });

			      return React__default.createElement(
			        'div',
			        { style: styles.hue },
			        React__default.createElement(
			          'div',
			          {
			            className: 'hue-' + direction,
			            style: styles.container,
			            ref: function ref(container) {
			              return _this2.container = container;
			            },
			            onMouseDown: this.handleMouseDown,
			            onTouchMove: this.handleChange,
			            onTouchStart: this.handleChange
			          },
			          React__default.createElement(
			            'style',
			            null,
			            '\n            .hue-horizontal {\n              background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\n                33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to right, #f00 0%, #ff0\n                17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n\n            .hue-vertical {\n              background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\n                #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to top, #f00 0%, #ff0 17%,\n                #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n          '
			          ),
			          React__default.createElement(
			            'div',
			            { style: styles.pointer },
			            this.props.pointer ? React__default.createElement(this.props.pointer, this.props) : React__default.createElement('div', { style: styles.slider })
			          )
			        )
			      );
			    }
			  }]);

			  return Hue;
			}(PureComponent || Component);

			var propTypes = {exports: {}};

			var reactIs = {exports: {}};

			var reactIs_production_min = {};

			/** @license React v16.13.1
			 * react-is.production.min.js
			 *
			 * Copyright (c) Facebook, Inc. and its affiliates.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */
			var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
			Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
			function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;
			reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
			reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
			reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;

			var reactIs_development = {};

			/** @license React v16.13.1
			 * react-is.development.js
			 *
			 * Copyright (c) Facebook, Inc. and its affiliates.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */



			if (process.env.NODE_ENV !== "production") {
			  (function() {

			// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
			// nor polyfill, then a plain number is used for performance.
			var hasSymbol = typeof Symbol === 'function' && Symbol.for;
			var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
			var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
			var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
			var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
			var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
			var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
			var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
			// (unstable) APIs that have been removed. Can we remove the symbols?

			var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
			var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
			var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
			var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
			var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
			var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
			var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
			var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
			var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
			var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
			var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

			function isValidElementType(type) {
			  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
			  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
			}

			function typeOf(object) {
			  if (typeof object === 'object' && object !== null) {
			    var $$typeof = object.$$typeof;

			    switch ($$typeof) {
			      case REACT_ELEMENT_TYPE:
			        var type = object.type;

			        switch (type) {
			          case REACT_ASYNC_MODE_TYPE:
			          case REACT_CONCURRENT_MODE_TYPE:
			          case REACT_FRAGMENT_TYPE:
			          case REACT_PROFILER_TYPE:
			          case REACT_STRICT_MODE_TYPE:
			          case REACT_SUSPENSE_TYPE:
			            return type;

			          default:
			            var $$typeofType = type && type.$$typeof;

			            switch ($$typeofType) {
			              case REACT_CONTEXT_TYPE:
			              case REACT_FORWARD_REF_TYPE:
			              case REACT_LAZY_TYPE:
			              case REACT_MEMO_TYPE:
			              case REACT_PROVIDER_TYPE:
			                return $$typeofType;

			              default:
			                return $$typeof;
			            }

			        }

			      case REACT_PORTAL_TYPE:
			        return $$typeof;
			    }
			  }

			  return undefined;
			} // AsyncMode is deprecated along with isAsyncMode

			var AsyncMode = REACT_ASYNC_MODE_TYPE;
			var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
			var ContextConsumer = REACT_CONTEXT_TYPE;
			var ContextProvider = REACT_PROVIDER_TYPE;
			var Element = REACT_ELEMENT_TYPE;
			var ForwardRef = REACT_FORWARD_REF_TYPE;
			var Fragment = REACT_FRAGMENT_TYPE;
			var Lazy = REACT_LAZY_TYPE;
			var Memo = REACT_MEMO_TYPE;
			var Portal = REACT_PORTAL_TYPE;
			var Profiler = REACT_PROFILER_TYPE;
			var StrictMode = REACT_STRICT_MODE_TYPE;
			var Suspense = REACT_SUSPENSE_TYPE;
			var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

			function isAsyncMode(object) {
			  {
			    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
			      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

			      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
			    }
			  }

			  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
			}
			function isConcurrentMode(object) {
			  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
			}
			function isContextConsumer(object) {
			  return typeOf(object) === REACT_CONTEXT_TYPE;
			}
			function isContextProvider(object) {
			  return typeOf(object) === REACT_PROVIDER_TYPE;
			}
			function isElement(object) {
			  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
			}
			function isForwardRef(object) {
			  return typeOf(object) === REACT_FORWARD_REF_TYPE;
			}
			function isFragment(object) {
			  return typeOf(object) === REACT_FRAGMENT_TYPE;
			}
			function isLazy(object) {
			  return typeOf(object) === REACT_LAZY_TYPE;
			}
			function isMemo(object) {
			  return typeOf(object) === REACT_MEMO_TYPE;
			}
			function isPortal(object) {
			  return typeOf(object) === REACT_PORTAL_TYPE;
			}
			function isProfiler(object) {
			  return typeOf(object) === REACT_PROFILER_TYPE;
			}
			function isStrictMode(object) {
			  return typeOf(object) === REACT_STRICT_MODE_TYPE;
			}
			function isSuspense(object) {
			  return typeOf(object) === REACT_SUSPENSE_TYPE;
			}

			reactIs_development.AsyncMode = AsyncMode;
			reactIs_development.ConcurrentMode = ConcurrentMode;
			reactIs_development.ContextConsumer = ContextConsumer;
			reactIs_development.ContextProvider = ContextProvider;
			reactIs_development.Element = Element;
			reactIs_development.ForwardRef = ForwardRef;
			reactIs_development.Fragment = Fragment;
			reactIs_development.Lazy = Lazy;
			reactIs_development.Memo = Memo;
			reactIs_development.Portal = Portal;
			reactIs_development.Profiler = Profiler;
			reactIs_development.StrictMode = StrictMode;
			reactIs_development.Suspense = Suspense;
			reactIs_development.isAsyncMode = isAsyncMode;
			reactIs_development.isConcurrentMode = isConcurrentMode;
			reactIs_development.isContextConsumer = isContextConsumer;
			reactIs_development.isContextProvider = isContextProvider;
			reactIs_development.isElement = isElement;
			reactIs_development.isForwardRef = isForwardRef;
			reactIs_development.isFragment = isFragment;
			reactIs_development.isLazy = isLazy;
			reactIs_development.isMemo = isMemo;
			reactIs_development.isPortal = isPortal;
			reactIs_development.isProfiler = isProfiler;
			reactIs_development.isStrictMode = isStrictMode;
			reactIs_development.isSuspense = isSuspense;
			reactIs_development.isValidElementType = isValidElementType;
			reactIs_development.typeOf = typeOf;
			  })();
			}

			if (process.env.NODE_ENV === 'production') {
			  reactIs.exports = reactIs_production_min;
			} else {
			  reactIs.exports = reactIs_development;
			}

			/*
			object-assign
			(c) Sindre Sorhus
			@license MIT
			*/
			/* eslint-disable no-unused-vars */
			var getOwnPropertySymbols = Object.getOwnPropertySymbols;
			var hasOwnProperty$c = Object.prototype.hasOwnProperty;
			var propIsEnumerable = Object.prototype.propertyIsEnumerable;

			function toObject(val) {
				if (val === null || val === undefined) {
					throw new TypeError('Object.assign cannot be called with null or undefined');
				}

				return Object(val);
			}

			function shouldUseNative() {
				try {
					if (!Object.assign) {
						return false;
					}

					// Detect buggy property enumeration order in older V8 versions.

					// https://bugs.chromium.org/p/v8/issues/detail?id=4118
					var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
					test1[5] = 'de';
					if (Object.getOwnPropertyNames(test1)[0] === '5') {
						return false;
					}

					// https://bugs.chromium.org/p/v8/issues/detail?id=3056
					var test2 = {};
					for (var i = 0; i < 10; i++) {
						test2['_' + String.fromCharCode(i)] = i;
					}
					var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
						return test2[n];
					});
					if (order2.join('') !== '0123456789') {
						return false;
					}

					// https://bugs.chromium.org/p/v8/issues/detail?id=3056
					var test3 = {};
					'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
						test3[letter] = letter;
					});
					if (Object.keys(Object.assign({}, test3)).join('') !==
							'abcdefghijklmnopqrst') {
						return false;
					}

					return true;
				} catch (err) {
					// We don't expect any of the above to throw, but better to be safe.
					return false;
				}
			}

			var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
				var from;
				var to = toObject(target);
				var symbols;

				for (var s = 1; s < arguments.length; s++) {
					from = Object(arguments[s]);

					for (var key in from) {
						if (hasOwnProperty$c.call(from, key)) {
							to[key] = from[key];
						}
					}

					if (getOwnPropertySymbols) {
						symbols = getOwnPropertySymbols(from);
						for (var i = 0; i < symbols.length; i++) {
							if (propIsEnumerable.call(from, symbols[i])) {
								to[symbols[i]] = from[symbols[i]];
							}
						}
					}
				}

				return to;
			};

			/**
			 * Copyright (c) 2013-present, Facebook, Inc.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */

			var ReactPropTypesSecret$3 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

			var ReactPropTypesSecret_1 = ReactPropTypesSecret$3;

			/**
			 * Copyright (c) 2013-present, Facebook, Inc.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */

			var printWarning$1 = function() {};

			if (process.env.NODE_ENV !== 'production') {
			  var ReactPropTypesSecret$2 = ReactPropTypesSecret_1;
			  var loggedTypeFailures = {};
			  var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);

			  printWarning$1 = function(text) {
			    var message = 'Warning: ' + text;
			    if (typeof console !== 'undefined') {
			      console.error(message);
			    }
			    try {
			      // --- Welcome to debugging React ---
			      // This error was thrown as a convenience so that you can use this stack
			      // to find the callsite that caused this warning to fire.
			      throw new Error(message);
			    } catch (x) {}
			  };
			}

			/**
			 * Assert that the values match with the type specs.
			 * Error messages are memorized and will only be shown once.
			 *
			 * @param {object} typeSpecs Map of name to a ReactPropType
			 * @param {object} values Runtime values that need to be type-checked
			 * @param {string} location e.g. "prop", "context", "child context"
			 * @param {string} componentName Name of the component for error messages.
			 * @param {?Function} getStack Returns the component stack.
			 * @private
			 */
			function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {
			  if (process.env.NODE_ENV !== 'production') {
			    for (var typeSpecName in typeSpecs) {
			      if (has$1(typeSpecs, typeSpecName)) {
			        var error;
			        // Prop type validation may throw. In case they do, we don't want to
			        // fail the render phase where it didn't fail before. So we log it.
			        // After these have been cleaned up, we'll let them throw.
			        try {
			          // This is intentionally an invariant that gets caught. It's the same
			          // behavior as without this statement except with a better message.
			          if (typeof typeSpecs[typeSpecName] !== 'function') {
			            var err = Error(
			              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
			              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
			            );
			            err.name = 'Invariant Violation';
			            throw err;
			          }
			          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$2);
			        } catch (ex) {
			          error = ex;
			        }
			        if (error && !(error instanceof Error)) {
			          printWarning$1(
			            (componentName || 'React class') + ': type specification of ' +
			            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
			            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
			            'You may have forgotten to pass an argument to the type checker ' +
			            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
			            'shape all require an argument).'
			          );
			        }
			        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
			          // Only monitor this failure once because there tends to be a lot of the
			          // same error.
			          loggedTypeFailures[error.message] = true;

			          var stack = getStack ? getStack() : '';

			          printWarning$1(
			            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
			          );
			        }
			      }
			    }
			  }
			}

			/**
			 * Resets warning cache when testing.
			 *
			 * @private
			 */
			checkPropTypes$1.resetWarningCache = function() {
			  if (process.env.NODE_ENV !== 'production') {
			    loggedTypeFailures = {};
			  }
			};

			var checkPropTypes_1 = checkPropTypes$1;

			/**
			 * Copyright (c) 2013-present, Facebook, Inc.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */

			var ReactIs$1 = reactIs.exports;
			var assign = objectAssign;

			var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
			var checkPropTypes = checkPropTypes_1;

			var has = Function.call.bind(Object.prototype.hasOwnProperty);
			var printWarning = function() {};

			if (process.env.NODE_ENV !== 'production') {
			  printWarning = function(text) {
			    var message = 'Warning: ' + text;
			    if (typeof console !== 'undefined') {
			      console.error(message);
			    }
			    try {
			      // --- Welcome to debugging React ---
			      // This error was thrown as a convenience so that you can use this stack
			      // to find the callsite that caused this warning to fire.
			      throw new Error(message);
			    } catch (x) {}
			  };
			}

			function emptyFunctionThatReturnsNull() {
			  return null;
			}

			var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
			  /* global Symbol */
			  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
			  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

			  /**
			   * Returns the iterator method function contained on the iterable object.
			   *
			   * Be sure to invoke the function with the iterable as context:
			   *
			   *     var iteratorFn = getIteratorFn(myIterable);
			   *     if (iteratorFn) {
			   *       var iterator = iteratorFn.call(myIterable);
			   *       ...
			   *     }
			   *
			   * @param {?object} maybeIterable
			   * @return {?function}
			   */
			  function getIteratorFn(maybeIterable) {
			    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
			    if (typeof iteratorFn === 'function') {
			      return iteratorFn;
			    }
			  }

			  /**
			   * Collection of methods that allow declaration and validation of props that are
			   * supplied to React components. Example usage:
			   *
			   *   var Props = require('ReactPropTypes');
			   *   var MyArticle = React.createClass({
			   *     propTypes: {
			   *       // An optional string prop named "description".
			   *       description: Props.string,
			   *
			   *       // A required enum prop named "category".
			   *       category: Props.oneOf(['News','Photos']).isRequired,
			   *
			   *       // A prop named "dialog" that requires an instance of Dialog.
			   *       dialog: Props.instanceOf(Dialog).isRequired
			   *     },
			   *     render: function() { ... }
			   *   });
			   *
			   * A more formal specification of how these methods are used:
			   *
			   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
			   *   decl := ReactPropTypes.{type}(.isRequired)?
			   *
			   * Each and every declaration produces a function with the same signature. This
			   * allows the creation of custom validation functions. For example:
			   *
			   *  var MyLink = React.createClass({
			   *    propTypes: {
			   *      // An optional string or URI prop named "href".
			   *      href: function(props, propName, componentName) {
			   *        var propValue = props[propName];
			   *        if (propValue != null && typeof propValue !== 'string' &&
			   *            !(propValue instanceof URI)) {
			   *          return new Error(
			   *            'Expected a string or an URI for ' + propName + ' in ' +
			   *            componentName
			   *          );
			   *        }
			   *      }
			   *    },
			   *    render: function() {...}
			   *  });
			   *
			   * @internal
			   */

			  var ANONYMOUS = '<<anonymous>>';

			  // Important!
			  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
			  var ReactPropTypes = {
			    array: createPrimitiveTypeChecker('array'),
			    bool: createPrimitiveTypeChecker('boolean'),
			    func: createPrimitiveTypeChecker('function'),
			    number: createPrimitiveTypeChecker('number'),
			    object: createPrimitiveTypeChecker('object'),
			    string: createPrimitiveTypeChecker('string'),
			    symbol: createPrimitiveTypeChecker('symbol'),

			    any: createAnyTypeChecker(),
			    arrayOf: createArrayOfTypeChecker,
			    element: createElementTypeChecker(),
			    elementType: createElementTypeTypeChecker(),
			    instanceOf: createInstanceTypeChecker,
			    node: createNodeChecker(),
			    objectOf: createObjectOfTypeChecker,
			    oneOf: createEnumTypeChecker,
			    oneOfType: createUnionTypeChecker,
			    shape: createShapeTypeChecker,
			    exact: createStrictShapeTypeChecker,
			  };

			  /**
			   * inlined Object.is polyfill to avoid requiring consumers ship their own
			   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
			   */
			  /*eslint-disable no-self-compare*/
			  function is(x, y) {
			    // SameValue algorithm
			    if (x === y) {
			      // Steps 1-5, 7-10
			      // Steps 6.b-6.e: +0 != -0
			      return x !== 0 || 1 / x === 1 / y;
			    } else {
			      // Step 6.a: NaN == NaN
			      return x !== x && y !== y;
			    }
			  }
			  /*eslint-enable no-self-compare*/

			  /**
			   * We use an Error-like object for backward compatibility as people may call
			   * PropTypes directly and inspect their output. However, we don't use real
			   * Errors anymore. We don't inspect their stack anyway, and creating them
			   * is prohibitively expensive if they are created too often, such as what
			   * happens in oneOfType() for any type before the one that matched.
			   */
			  function PropTypeError(message) {
			    this.message = message;
			    this.stack = '';
			  }
			  // Make `instanceof Error` still work for returned errors.
			  PropTypeError.prototype = Error.prototype;

			  function createChainableTypeChecker(validate) {
			    if (process.env.NODE_ENV !== 'production') {
			      var manualPropTypeCallCache = {};
			      var manualPropTypeWarningCount = 0;
			    }
			    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
			      componentName = componentName || ANONYMOUS;
			      propFullName = propFullName || propName;

			      if (secret !== ReactPropTypesSecret$1) {
			        if (throwOnDirectAccess) {
			          // New behavior only for users of `prop-types` package
			          var err = new Error(
			            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
			            'Use `PropTypes.checkPropTypes()` to call them. ' +
			            'Read more at http://fb.me/use-check-prop-types'
			          );
			          err.name = 'Invariant Violation';
			          throw err;
			        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
			          // Old behavior for people using React.PropTypes
			          var cacheKey = componentName + ':' + propName;
			          if (
			            !manualPropTypeCallCache[cacheKey] &&
			            // Avoid spamming the console because they are often not actionable except for lib authors
			            manualPropTypeWarningCount < 3
			          ) {
			            printWarning(
			              'You are manually calling a React.PropTypes validation ' +
			              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
			              'and will throw in the standalone `prop-types` package. ' +
			              'You may be seeing this warning due to a third-party PropTypes ' +
			              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
			            );
			            manualPropTypeCallCache[cacheKey] = true;
			            manualPropTypeWarningCount++;
			          }
			        }
			      }
			      if (props[propName] == null) {
			        if (isRequired) {
			          if (props[propName] === null) {
			            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
			          }
			          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
			        }
			        return null;
			      } else {
			        return validate(props, propName, componentName, location, propFullName);
			      }
			    }

			    var chainedCheckType = checkType.bind(null, false);
			    chainedCheckType.isRequired = checkType.bind(null, true);

			    return chainedCheckType;
			  }

			  function createPrimitiveTypeChecker(expectedType) {
			    function validate(props, propName, componentName, location, propFullName, secret) {
			      var propValue = props[propName];
			      var propType = getPropType(propValue);
			      if (propType !== expectedType) {
			        // `propValue` being instance of, say, date/regexp, pass the 'object'
			        // check, but we can offer a more precise error message here rather than
			        // 'of type `object`'.
			        var preciseType = getPreciseType(propValue);

			        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
			      }
			      return null;
			    }
			    return createChainableTypeChecker(validate);
			  }

			  function createAnyTypeChecker() {
			    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
			  }

			  function createArrayOfTypeChecker(typeChecker) {
			    function validate(props, propName, componentName, location, propFullName) {
			      if (typeof typeChecker !== 'function') {
			        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
			      }
			      var propValue = props[propName];
			      if (!Array.isArray(propValue)) {
			        var propType = getPropType(propValue);
			        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
			      }
			      for (var i = 0; i < propValue.length; i++) {
			        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret$1);
			        if (error instanceof Error) {
			          return error;
			        }
			      }
			      return null;
			    }
			    return createChainableTypeChecker(validate);
			  }

			  function createElementTypeChecker() {
			    function validate(props, propName, componentName, location, propFullName) {
			      var propValue = props[propName];
			      if (!isValidElement(propValue)) {
			        var propType = getPropType(propValue);
			        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
			      }
			      return null;
			    }
			    return createChainableTypeChecker(validate);
			  }

			  function createElementTypeTypeChecker() {
			    function validate(props, propName, componentName, location, propFullName) {
			      var propValue = props[propName];
			      if (!ReactIs$1.isValidElementType(propValue)) {
			        var propType = getPropType(propValue);
			        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
			      }
			      return null;
			    }
			    return createChainableTypeChecker(validate);
			  }

			  function createInstanceTypeChecker(expectedClass) {
			    function validate(props, propName, componentName, location, propFullName) {
			      if (!(props[propName] instanceof expectedClass)) {
			        var expectedClassName = expectedClass.name || ANONYMOUS;
			        var actualClassName = getClassName(props[propName]);
			        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
			      }
			      return null;
			    }
			    return createChainableTypeChecker(validate);
			  }

			  function createEnumTypeChecker(expectedValues) {
			    if (!Array.isArray(expectedValues)) {
			      if (process.env.NODE_ENV !== 'production') {
			        if (arguments.length > 1) {
			          printWarning(
			            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
			            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
			          );
			        } else {
			          printWarning('Invalid argument supplied to oneOf, expected an array.');
			        }
			      }
			      return emptyFunctionThatReturnsNull;
			    }

			    function validate(props, propName, componentName, location, propFullName) {
			      var propValue = props[propName];
			      for (var i = 0; i < expectedValues.length; i++) {
			        if (is(propValue, expectedValues[i])) {
			          return null;
			        }
			      }

			      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
			        var type = getPreciseType(value);
			        if (type === 'symbol') {
			          return String(value);
			        }
			        return value;
			      });
			      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
			    }
			    return createChainableTypeChecker(validate);
			  }

			  function createObjectOfTypeChecker(typeChecker) {
			    function validate(props, propName, componentName, location, propFullName) {
			      if (typeof typeChecker !== 'function') {
			        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
			      }
			      var propValue = props[propName];
			      var propType = getPropType(propValue);
			      if (propType !== 'object') {
			        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
			      }
			      for (var key in propValue) {
			        if (has(propValue, key)) {
			          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
			          if (error instanceof Error) {
			            return error;
			          }
			        }
			      }
			      return null;
			    }
			    return createChainableTypeChecker(validate);
			  }

			  function createUnionTypeChecker(arrayOfTypeCheckers) {
			    if (!Array.isArray(arrayOfTypeCheckers)) {
			      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
			      return emptyFunctionThatReturnsNull;
			    }

			    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
			      var checker = arrayOfTypeCheckers[i];
			      if (typeof checker !== 'function') {
			        printWarning(
			          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
			          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
			        );
			        return emptyFunctionThatReturnsNull;
			      }
			    }

			    function validate(props, propName, componentName, location, propFullName) {
			      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
			        var checker = arrayOfTypeCheckers[i];
			        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret$1) == null) {
			          return null;
			        }
			      }

			      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
			    }
			    return createChainableTypeChecker(validate);
			  }

			  function createNodeChecker() {
			    function validate(props, propName, componentName, location, propFullName) {
			      if (!isNode(props[propName])) {
			        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
			      }
			      return null;
			    }
			    return createChainableTypeChecker(validate);
			  }

			  function createShapeTypeChecker(shapeTypes) {
			    function validate(props, propName, componentName, location, propFullName) {
			      var propValue = props[propName];
			      var propType = getPropType(propValue);
			      if (propType !== 'object') {
			        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
			      }
			      for (var key in shapeTypes) {
			        var checker = shapeTypes[key];
			        if (!checker) {
			          continue;
			        }
			        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
			        if (error) {
			          return error;
			        }
			      }
			      return null;
			    }
			    return createChainableTypeChecker(validate);
			  }

			  function createStrictShapeTypeChecker(shapeTypes) {
			    function validate(props, propName, componentName, location, propFullName) {
			      var propValue = props[propName];
			      var propType = getPropType(propValue);
			      if (propType !== 'object') {
			        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
			      }
			      // We need to check all keys in case some are required but missing from
			      // props.
			      var allKeys = assign({}, props[propName], shapeTypes);
			      for (var key in allKeys) {
			        var checker = shapeTypes[key];
			        if (!checker) {
			          return new PropTypeError(
			            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
			            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
			            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
			          );
			        }
			        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
			        if (error) {
			          return error;
			        }
			      }
			      return null;
			    }

			    return createChainableTypeChecker(validate);
			  }

			  function isNode(propValue) {
			    switch (typeof propValue) {
			      case 'number':
			      case 'string':
			      case 'undefined':
			        return true;
			      case 'boolean':
			        return !propValue;
			      case 'object':
			        if (Array.isArray(propValue)) {
			          return propValue.every(isNode);
			        }
			        if (propValue === null || isValidElement(propValue)) {
			          return true;
			        }

			        var iteratorFn = getIteratorFn(propValue);
			        if (iteratorFn) {
			          var iterator = iteratorFn.call(propValue);
			          var step;
			          if (iteratorFn !== propValue.entries) {
			            while (!(step = iterator.next()).done) {
			              if (!isNode(step.value)) {
			                return false;
			              }
			            }
			          } else {
			            // Iterator will provide entry [k,v] tuples rather than values.
			            while (!(step = iterator.next()).done) {
			              var entry = step.value;
			              if (entry) {
			                if (!isNode(entry[1])) {
			                  return false;
			                }
			              }
			            }
			          }
			        } else {
			          return false;
			        }

			        return true;
			      default:
			        return false;
			    }
			  }

			  function isSymbol(propType, propValue) {
			    // Native Symbol.
			    if (propType === 'symbol') {
			      return true;
			    }

			    // falsy value can't be a Symbol
			    if (!propValue) {
			      return false;
			    }

			    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
			    if (propValue['@@toStringTag'] === 'Symbol') {
			      return true;
			    }

			    // Fallback for non-spec compliant Symbols which are polyfilled.
			    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
			      return true;
			    }

			    return false;
			  }

			  // Equivalent of `typeof` but with special handling for array and regexp.
			  function getPropType(propValue) {
			    var propType = typeof propValue;
			    if (Array.isArray(propValue)) {
			      return 'array';
			    }
			    if (propValue instanceof RegExp) {
			      // Old webkits (at least until Android 4.0) return 'function' rather than
			      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
			      // passes PropTypes.object.
			      return 'object';
			    }
			    if (isSymbol(propType, propValue)) {
			      return 'symbol';
			    }
			    return propType;
			  }

			  // This handles more types than `getPropType`. Only used for error messages.
			  // See `createPrimitiveTypeChecker`.
			  function getPreciseType(propValue) {
			    if (typeof propValue === 'undefined' || propValue === null) {
			      return '' + propValue;
			    }
			    var propType = getPropType(propValue);
			    if (propType === 'object') {
			      if (propValue instanceof Date) {
			        return 'date';
			      } else if (propValue instanceof RegExp) {
			        return 'regexp';
			      }
			    }
			    return propType;
			  }

			  // Returns a string that is postfixed to a warning about an invalid type.
			  // For example, "undefined" or "of type array"
			  function getPostfixForTypeWarning(value) {
			    var type = getPreciseType(value);
			    switch (type) {
			      case 'array':
			      case 'object':
			        return 'an ' + type;
			      case 'boolean':
			      case 'date':
			      case 'regexp':
			        return 'a ' + type;
			      default:
			        return type;
			    }
			  }

			  // Returns class name of the object, if any.
			  function getClassName(propValue) {
			    if (!propValue.constructor || !propValue.constructor.name) {
			      return ANONYMOUS;
			    }
			    return propValue.constructor.name;
			  }

			  ReactPropTypes.checkPropTypes = checkPropTypes;
			  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
			  ReactPropTypes.PropTypes = ReactPropTypes;

			  return ReactPropTypes;
			};

			/**
			 * Copyright (c) 2013-present, Facebook, Inc.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */

			var ReactPropTypesSecret = ReactPropTypesSecret_1;

			function emptyFunction() {}
			function emptyFunctionWithReset() {}
			emptyFunctionWithReset.resetWarningCache = emptyFunction;

			var factoryWithThrowingShims = function() {
			  function shim(props, propName, componentName, location, propFullName, secret) {
			    if (secret === ReactPropTypesSecret) {
			      // It is still safe when called from React.
			      return;
			    }
			    var err = new Error(
			      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
			      'Use PropTypes.checkPropTypes() to call them. ' +
			      'Read more at http://fb.me/use-check-prop-types'
			    );
			    err.name = 'Invariant Violation';
			    throw err;
			  }  shim.isRequired = shim;
			  function getShim() {
			    return shim;
			  }  // Important!
			  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
			  var ReactPropTypes = {
			    array: shim,
			    bool: shim,
			    func: shim,
			    number: shim,
			    object: shim,
			    string: shim,
			    symbol: shim,

			    any: shim,
			    arrayOf: getShim,
			    element: shim,
			    elementType: shim,
			    instanceOf: getShim,
			    node: shim,
			    objectOf: getShim,
			    oneOf: getShim,
			    oneOfType: getShim,
			    shape: getShim,
			    exact: getShim,

			    checkPropTypes: emptyFunctionWithReset,
			    resetWarningCache: emptyFunction
			  };

			  ReactPropTypes.PropTypes = ReactPropTypes;

			  return ReactPropTypes;
			};

			/**
			 * Copyright (c) 2013-present, Facebook, Inc.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */

			if (process.env.NODE_ENV !== 'production') {
			  var ReactIs = reactIs.exports;

			  // By explicitly using `prop-types` you are opting into new development behavior.
			  // http://fb.me/prop-types-in-prod
			  var throwOnDirectAccess = true;
			  propTypes.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
			} else {
			  // By explicitly using `prop-types` you are opting into new production behavior.
			  // http://fb.me/prop-types-in-prod
			  propTypes.exports = factoryWithThrowingShims();
			}

			var PropTypes = propTypes.exports;

			/**
			 * Removes all key-value entries from the list cache.
			 *
			 * @private
			 * @name clear
			 * @memberOf ListCache
			 */
			function listCacheClear() {
			  this.__data__ = [];
			  this.size = 0;
			}

			/**
			 * Performs a
			 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
			 * comparison between two values to determine if they are equivalent.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to compare.
			 * @param {*} other The other value to compare.
			 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
			 * @example
			 *
			 * var object = { 'a': 1 };
			 * var other = { 'a': 1 };
			 *
			 * _.eq(object, object);
			 * // => true
			 *
			 * _.eq(object, other);
			 * // => false
			 *
			 * _.eq('a', 'a');
			 * // => true
			 *
			 * _.eq('a', Object('a'));
			 * // => false
			 *
			 * _.eq(NaN, NaN);
			 * // => true
			 */
			function eq(value, other) {
			  return value === other || (value !== value && other !== other);
			}

			/**
			 * Gets the index at which the `key` is found in `array` of key-value pairs.
			 *
			 * @private
			 * @param {Array} array The array to inspect.
			 * @param {*} key The key to search for.
			 * @returns {number} Returns the index of the matched value, else `-1`.
			 */
			function assocIndexOf(array, key) {
			  var length = array.length;
			  while (length--) {
			    if (eq(array[length][0], key)) {
			      return length;
			    }
			  }
			  return -1;
			}

			/** Used for built-in method references. */
			var arrayProto = Array.prototype;

			/** Built-in value references. */
			var splice = arrayProto.splice;

			/**
			 * Removes `key` and its value from the list cache.
			 *
			 * @private
			 * @name delete
			 * @memberOf ListCache
			 * @param {string} key The key of the value to remove.
			 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
			 */
			function listCacheDelete(key) {
			  var data = this.__data__,
			      index = assocIndexOf(data, key);

			  if (index < 0) {
			    return false;
			  }
			  var lastIndex = data.length - 1;
			  if (index == lastIndex) {
			    data.pop();
			  } else {
			    splice.call(data, index, 1);
			  }
			  --this.size;
			  return true;
			}

			/**
			 * Gets the list cache value for `key`.
			 *
			 * @private
			 * @name get
			 * @memberOf ListCache
			 * @param {string} key The key of the value to get.
			 * @returns {*} Returns the entry value.
			 */
			function listCacheGet(key) {
			  var data = this.__data__,
			      index = assocIndexOf(data, key);

			  return index < 0 ? undefined : data[index][1];
			}

			/**
			 * Checks if a list cache value for `key` exists.
			 *
			 * @private
			 * @name has
			 * @memberOf ListCache
			 * @param {string} key The key of the entry to check.
			 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			 */
			function listCacheHas(key) {
			  return assocIndexOf(this.__data__, key) > -1;
			}

			/**
			 * Sets the list cache `key` to `value`.
			 *
			 * @private
			 * @name set
			 * @memberOf ListCache
			 * @param {string} key The key of the value to set.
			 * @param {*} value The value to set.
			 * @returns {Object} Returns the list cache instance.
			 */
			function listCacheSet(key, value) {
			  var data = this.__data__,
			      index = assocIndexOf(data, key);

			  if (index < 0) {
			    ++this.size;
			    data.push([key, value]);
			  } else {
			    data[index][1] = value;
			  }
			  return this;
			}

			/**
			 * Creates an list cache object.
			 *
			 * @private
			 * @constructor
			 * @param {Array} [entries] The key-value pairs to cache.
			 */
			function ListCache(entries) {
			  var index = -1,
			      length = entries == null ? 0 : entries.length;

			  this.clear();
			  while (++index < length) {
			    var entry = entries[index];
			    this.set(entry[0], entry[1]);
			  }
			}

			// Add methods to `ListCache`.
			ListCache.prototype.clear = listCacheClear;
			ListCache.prototype['delete'] = listCacheDelete;
			ListCache.prototype.get = listCacheGet;
			ListCache.prototype.has = listCacheHas;
			ListCache.prototype.set = listCacheSet;

			/**
			 * Removes all key-value entries from the stack.
			 *
			 * @private
			 * @name clear
			 * @memberOf Stack
			 */
			function stackClear() {
			  this.__data__ = new ListCache;
			  this.size = 0;
			}

			/**
			 * Removes `key` and its value from the stack.
			 *
			 * @private
			 * @name delete
			 * @memberOf Stack
			 * @param {string} key The key of the value to remove.
			 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
			 */
			function stackDelete(key) {
			  var data = this.__data__,
			      result = data['delete'](key);

			  this.size = data.size;
			  return result;
			}

			/**
			 * Gets the stack value for `key`.
			 *
			 * @private
			 * @name get
			 * @memberOf Stack
			 * @param {string} key The key of the value to get.
			 * @returns {*} Returns the entry value.
			 */
			function stackGet(key) {
			  return this.__data__.get(key);
			}

			/**
			 * Checks if a stack value for `key` exists.
			 *
			 * @private
			 * @name has
			 * @memberOf Stack
			 * @param {string} key The key of the entry to check.
			 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			 */
			function stackHas(key) {
			  return this.__data__.has(key);
			}

			/** Detect free variable `global` from Node.js. */
			var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

			var freeGlobal$1 = freeGlobal;

			/** Detect free variable `self`. */
			var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

			/** Used as a reference to the global object. */
			var root = freeGlobal$1 || freeSelf || Function('return this')();

			var root$1 = root;

			/** Built-in value references. */
			var Symbol$1 = root$1.Symbol;

			var Symbol$2 = Symbol$1;

			/** Used for built-in method references. */
			var objectProto$e = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$b = objectProto$e.hasOwnProperty;

			/**
			 * Used to resolve the
			 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
			 * of values.
			 */
			var nativeObjectToString$1 = objectProto$e.toString;

			/** Built-in value references. */
			var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : undefined;

			/**
			 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
			 *
			 * @private
			 * @param {*} value The value to query.
			 * @returns {string} Returns the raw `toStringTag`.
			 */
			function getRawTag(value) {
			  var isOwn = hasOwnProperty$b.call(value, symToStringTag$1),
			      tag = value[symToStringTag$1];

			  try {
			    value[symToStringTag$1] = undefined;
			    var unmasked = true;
			  } catch (e) {}

			  var result = nativeObjectToString$1.call(value);
			  if (unmasked) {
			    if (isOwn) {
			      value[symToStringTag$1] = tag;
			    } else {
			      delete value[symToStringTag$1];
			    }
			  }
			  return result;
			}

			/** Used for built-in method references. */
			var objectProto$d = Object.prototype;

			/**
			 * Used to resolve the
			 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
			 * of values.
			 */
			var nativeObjectToString = objectProto$d.toString;

			/**
			 * Converts `value` to a string using `Object.prototype.toString`.
			 *
			 * @private
			 * @param {*} value The value to convert.
			 * @returns {string} Returns the converted string.
			 */
			function objectToString(value) {
			  return nativeObjectToString.call(value);
			}

			/** `Object#toString` result references. */
			var nullTag = '[object Null]',
			    undefinedTag = '[object Undefined]';

			/** Built-in value references. */
			var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : undefined;

			/**
			 * The base implementation of `getTag` without fallbacks for buggy environments.
			 *
			 * @private
			 * @param {*} value The value to query.
			 * @returns {string} Returns the `toStringTag`.
			 */
			function baseGetTag(value) {
			  if (value == null) {
			    return value === undefined ? undefinedTag : nullTag;
			  }
			  return (symToStringTag && symToStringTag in Object(value))
			    ? getRawTag(value)
			    : objectToString(value);
			}

			/**
			 * Checks if `value` is the
			 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
			 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
			 * @example
			 *
			 * _.isObject({});
			 * // => true
			 *
			 * _.isObject([1, 2, 3]);
			 * // => true
			 *
			 * _.isObject(_.noop);
			 * // => true
			 *
			 * _.isObject(null);
			 * // => false
			 */
			function isObject(value) {
			  var type = typeof value;
			  return value != null && (type == 'object' || type == 'function');
			}

			/** `Object#toString` result references. */
			var asyncTag = '[object AsyncFunction]',
			    funcTag$1 = '[object Function]',
			    genTag = '[object GeneratorFunction]',
			    proxyTag = '[object Proxy]';

			/**
			 * Checks if `value` is classified as a `Function` object.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
			 * @example
			 *
			 * _.isFunction(_);
			 * // => true
			 *
			 * _.isFunction(/abc/);
			 * // => false
			 */
			function isFunction(value) {
			  if (!isObject(value)) {
			    return false;
			  }
			  // The use of `Object#toString` avoids issues with the `typeof` operator
			  // in Safari 9 which returns 'object' for typed arrays and other constructors.
			  var tag = baseGetTag(value);
			  return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
			}

			/** Used to detect overreaching core-js shims. */
			var coreJsData = root$1['__core-js_shared__'];

			var coreJsData$1 = coreJsData;

			/** Used to detect methods masquerading as native. */
			var maskSrcKey = (function() {
			  var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || '');
			  return uid ? ('Symbol(src)_1.' + uid) : '';
			}());

			/**
			 * Checks if `func` has its source masked.
			 *
			 * @private
			 * @param {Function} func The function to check.
			 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
			 */
			function isMasked(func) {
			  return !!maskSrcKey && (maskSrcKey in func);
			}

			/** Used for built-in method references. */
			var funcProto$2 = Function.prototype;

			/** Used to resolve the decompiled source of functions. */
			var funcToString$2 = funcProto$2.toString;

			/**
			 * Converts `func` to its source code.
			 *
			 * @private
			 * @param {Function} func The function to convert.
			 * @returns {string} Returns the source code.
			 */
			function toSource(func) {
			  if (func != null) {
			    try {
			      return funcToString$2.call(func);
			    } catch (e) {}
			    try {
			      return (func + '');
			    } catch (e) {}
			  }
			  return '';
			}

			/**
			 * Used to match `RegExp`
			 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
			 */
			var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

			/** Used to detect host constructors (Safari). */
			var reIsHostCtor = /^\[object .+?Constructor\]$/;

			/** Used for built-in method references. */
			var funcProto$1 = Function.prototype,
			    objectProto$c = Object.prototype;

			/** Used to resolve the decompiled source of functions. */
			var funcToString$1 = funcProto$1.toString;

			/** Used to check objects for own properties. */
			var hasOwnProperty$a = objectProto$c.hasOwnProperty;

			/** Used to detect if a method is native. */
			var reIsNative = RegExp('^' +
			  funcToString$1.call(hasOwnProperty$a).replace(reRegExpChar, '\\$&')
			  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
			);

			/**
			 * The base implementation of `_.isNative` without bad shim checks.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a native function,
			 *  else `false`.
			 */
			function baseIsNative(value) {
			  if (!isObject(value) || isMasked(value)) {
			    return false;
			  }
			  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
			  return pattern.test(toSource(value));
			}

			/**
			 * Gets the value at `key` of `object`.
			 *
			 * @private
			 * @param {Object} [object] The object to query.
			 * @param {string} key The key of the property to get.
			 * @returns {*} Returns the property value.
			 */
			function getValue(object, key) {
			  return object == null ? undefined : object[key];
			}

			/**
			 * Gets the native function at `key` of `object`.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @param {string} key The key of the method to get.
			 * @returns {*} Returns the function if it's native, else `undefined`.
			 */
			function getNative(object, key) {
			  var value = getValue(object, key);
			  return baseIsNative(value) ? value : undefined;
			}

			/* Built-in method references that are verified to be native. */
			var Map$1 = getNative(root$1, 'Map');

			var Map$2 = Map$1;

			/* Built-in method references that are verified to be native. */
			var nativeCreate = getNative(Object, 'create');

			var nativeCreate$1 = nativeCreate;

			/**
			 * Removes all key-value entries from the hash.
			 *
			 * @private
			 * @name clear
			 * @memberOf Hash
			 */
			function hashClear() {
			  this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
			  this.size = 0;
			}

			/**
			 * Removes `key` and its value from the hash.
			 *
			 * @private
			 * @name delete
			 * @memberOf Hash
			 * @param {Object} hash The hash to modify.
			 * @param {string} key The key of the value to remove.
			 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
			 */
			function hashDelete(key) {
			  var result = this.has(key) && delete this.__data__[key];
			  this.size -= result ? 1 : 0;
			  return result;
			}

			/** Used to stand-in for `undefined` hash values. */
			var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

			/** Used for built-in method references. */
			var objectProto$b = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$9 = objectProto$b.hasOwnProperty;

			/**
			 * Gets the hash value for `key`.
			 *
			 * @private
			 * @name get
			 * @memberOf Hash
			 * @param {string} key The key of the value to get.
			 * @returns {*} Returns the entry value.
			 */
			function hashGet(key) {
			  var data = this.__data__;
			  if (nativeCreate$1) {
			    var result = data[key];
			    return result === HASH_UNDEFINED$2 ? undefined : result;
			  }
			  return hasOwnProperty$9.call(data, key) ? data[key] : undefined;
			}

			/** Used for built-in method references. */
			var objectProto$a = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$8 = objectProto$a.hasOwnProperty;

			/**
			 * Checks if a hash value for `key` exists.
			 *
			 * @private
			 * @name has
			 * @memberOf Hash
			 * @param {string} key The key of the entry to check.
			 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			 */
			function hashHas(key) {
			  var data = this.__data__;
			  return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty$8.call(data, key);
			}

			/** Used to stand-in for `undefined` hash values. */
			var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

			/**
			 * Sets the hash `key` to `value`.
			 *
			 * @private
			 * @name set
			 * @memberOf Hash
			 * @param {string} key The key of the value to set.
			 * @param {*} value The value to set.
			 * @returns {Object} Returns the hash instance.
			 */
			function hashSet(key, value) {
			  var data = this.__data__;
			  this.size += this.has(key) ? 0 : 1;
			  data[key] = (nativeCreate$1 && value === undefined) ? HASH_UNDEFINED$1 : value;
			  return this;
			}

			/**
			 * Creates a hash object.
			 *
			 * @private
			 * @constructor
			 * @param {Array} [entries] The key-value pairs to cache.
			 */
			function Hash(entries) {
			  var index = -1,
			      length = entries == null ? 0 : entries.length;

			  this.clear();
			  while (++index < length) {
			    var entry = entries[index];
			    this.set(entry[0], entry[1]);
			  }
			}

			// Add methods to `Hash`.
			Hash.prototype.clear = hashClear;
			Hash.prototype['delete'] = hashDelete;
			Hash.prototype.get = hashGet;
			Hash.prototype.has = hashHas;
			Hash.prototype.set = hashSet;

			/**
			 * Removes all key-value entries from the map.
			 *
			 * @private
			 * @name clear
			 * @memberOf MapCache
			 */
			function mapCacheClear() {
			  this.size = 0;
			  this.__data__ = {
			    'hash': new Hash,
			    'map': new (Map$2 || ListCache),
			    'string': new Hash
			  };
			}

			/**
			 * Checks if `value` is suitable for use as unique object key.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
			 */
			function isKeyable(value) {
			  var type = typeof value;
			  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
			    ? (value !== '__proto__')
			    : (value === null);
			}

			/**
			 * Gets the data for `map`.
			 *
			 * @private
			 * @param {Object} map The map to query.
			 * @param {string} key The reference key.
			 * @returns {*} Returns the map data.
			 */
			function getMapData(map, key) {
			  var data = map.__data__;
			  return isKeyable(key)
			    ? data[typeof key == 'string' ? 'string' : 'hash']
			    : data.map;
			}

			/**
			 * Removes `key` and its value from the map.
			 *
			 * @private
			 * @name delete
			 * @memberOf MapCache
			 * @param {string} key The key of the value to remove.
			 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
			 */
			function mapCacheDelete(key) {
			  var result = getMapData(this, key)['delete'](key);
			  this.size -= result ? 1 : 0;
			  return result;
			}

			/**
			 * Gets the map value for `key`.
			 *
			 * @private
			 * @name get
			 * @memberOf MapCache
			 * @param {string} key The key of the value to get.
			 * @returns {*} Returns the entry value.
			 */
			function mapCacheGet(key) {
			  return getMapData(this, key).get(key);
			}

			/**
			 * Checks if a map value for `key` exists.
			 *
			 * @private
			 * @name has
			 * @memberOf MapCache
			 * @param {string} key The key of the entry to check.
			 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			 */
			function mapCacheHas(key) {
			  return getMapData(this, key).has(key);
			}

			/**
			 * Sets the map `key` to `value`.
			 *
			 * @private
			 * @name set
			 * @memberOf MapCache
			 * @param {string} key The key of the value to set.
			 * @param {*} value The value to set.
			 * @returns {Object} Returns the map cache instance.
			 */
			function mapCacheSet(key, value) {
			  var data = getMapData(this, key),
			      size = data.size;

			  data.set(key, value);
			  this.size += data.size == size ? 0 : 1;
			  return this;
			}

			/**
			 * Creates a map cache object to store key-value pairs.
			 *
			 * @private
			 * @constructor
			 * @param {Array} [entries] The key-value pairs to cache.
			 */
			function MapCache(entries) {
			  var index = -1,
			      length = entries == null ? 0 : entries.length;

			  this.clear();
			  while (++index < length) {
			    var entry = entries[index];
			    this.set(entry[0], entry[1]);
			  }
			}

			// Add methods to `MapCache`.
			MapCache.prototype.clear = mapCacheClear;
			MapCache.prototype['delete'] = mapCacheDelete;
			MapCache.prototype.get = mapCacheGet;
			MapCache.prototype.has = mapCacheHas;
			MapCache.prototype.set = mapCacheSet;

			/** Used as the size to enable large array optimizations. */
			var LARGE_ARRAY_SIZE = 200;

			/**
			 * Sets the stack `key` to `value`.
			 *
			 * @private
			 * @name set
			 * @memberOf Stack
			 * @param {string} key The key of the value to set.
			 * @param {*} value The value to set.
			 * @returns {Object} Returns the stack cache instance.
			 */
			function stackSet(key, value) {
			  var data = this.__data__;
			  if (data instanceof ListCache) {
			    var pairs = data.__data__;
			    if (!Map$2 || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
			      pairs.push([key, value]);
			      this.size = ++data.size;
			      return this;
			    }
			    data = this.__data__ = new MapCache(pairs);
			  }
			  data.set(key, value);
			  this.size = data.size;
			  return this;
			}

			/**
			 * Creates a stack cache object to store key-value pairs.
			 *
			 * @private
			 * @constructor
			 * @param {Array} [entries] The key-value pairs to cache.
			 */
			function Stack(entries) {
			  var data = this.__data__ = new ListCache(entries);
			  this.size = data.size;
			}

			// Add methods to `Stack`.
			Stack.prototype.clear = stackClear;
			Stack.prototype['delete'] = stackDelete;
			Stack.prototype.get = stackGet;
			Stack.prototype.has = stackHas;
			Stack.prototype.set = stackSet;

			var defineProperty = (function() {
			  try {
			    var func = getNative(Object, 'defineProperty');
			    func({}, '', {});
			    return func;
			  } catch (e) {}
			}());

			var defineProperty$1 = defineProperty;

			/**
			 * The base implementation of `assignValue` and `assignMergeValue` without
			 * value checks.
			 *
			 * @private
			 * @param {Object} object The object to modify.
			 * @param {string} key The key of the property to assign.
			 * @param {*} value The value to assign.
			 */
			function baseAssignValue(object, key, value) {
			  if (key == '__proto__' && defineProperty$1) {
			    defineProperty$1(object, key, {
			      'configurable': true,
			      'enumerable': true,
			      'value': value,
			      'writable': true
			    });
			  } else {
			    object[key] = value;
			  }
			}

			/**
			 * This function is like `assignValue` except that it doesn't assign
			 * `undefined` values.
			 *
			 * @private
			 * @param {Object} object The object to modify.
			 * @param {string} key The key of the property to assign.
			 * @param {*} value The value to assign.
			 */
			function assignMergeValue(object, key, value) {
			  if ((value !== undefined && !eq(object[key], value)) ||
			      (value === undefined && !(key in object))) {
			    baseAssignValue(object, key, value);
			  }
			}

			/**
			 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
			 *
			 * @private
			 * @param {boolean} [fromRight] Specify iterating from right to left.
			 * @returns {Function} Returns the new base function.
			 */
			function createBaseFor(fromRight) {
			  return function(object, iteratee, keysFunc) {
			    var index = -1,
			        iterable = Object(object),
			        props = keysFunc(object),
			        length = props.length;

			    while (length--) {
			      var key = props[fromRight ? length : ++index];
			      if (iteratee(iterable[key], key, iterable) === false) {
			        break;
			      }
			    }
			    return object;
			  };
			}

			/**
			 * The base implementation of `baseForOwn` which iterates over `object`
			 * properties returned by `keysFunc` and invokes `iteratee` for each property.
			 * Iteratee functions may exit iteration early by explicitly returning `false`.
			 *
			 * @private
			 * @param {Object} object The object to iterate over.
			 * @param {Function} iteratee The function invoked per iteration.
			 * @param {Function} keysFunc The function to get the keys of `object`.
			 * @returns {Object} Returns `object`.
			 */
			var baseFor = createBaseFor();

			var baseFor$1 = baseFor;

			/** Detect free variable `exports`. */
			var freeExports$2 = typeof exports == 'object' && exports && !exports.nodeType && exports;

			/** Detect free variable `module`. */
			var freeModule$2 = freeExports$2 && typeof module == 'object' && module && !module.nodeType && module;

			/** Detect the popular CommonJS extension `module.exports`. */
			var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;

			/** Built-in value references. */
			var Buffer$1 = moduleExports$2 ? root$1.Buffer : undefined,
			    allocUnsafe = Buffer$1 ? Buffer$1.allocUnsafe : undefined;

			/**
			 * Creates a clone of  `buffer`.
			 *
			 * @private
			 * @param {Buffer} buffer The buffer to clone.
			 * @param {boolean} [isDeep] Specify a deep clone.
			 * @returns {Buffer} Returns the cloned buffer.
			 */
			function cloneBuffer(buffer, isDeep) {
			  if (isDeep) {
			    return buffer.slice();
			  }
			  var length = buffer.length,
			      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

			  buffer.copy(result);
			  return result;
			}

			/** Built-in value references. */
			var Uint8Array$1 = root$1.Uint8Array;

			var Uint8Array$2 = Uint8Array$1;

			/**
			 * Creates a clone of `arrayBuffer`.
			 *
			 * @private
			 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
			 * @returns {ArrayBuffer} Returns the cloned array buffer.
			 */
			function cloneArrayBuffer(arrayBuffer) {
			  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
			  new Uint8Array$2(result).set(new Uint8Array$2(arrayBuffer));
			  return result;
			}

			/**
			 * Creates a clone of `typedArray`.
			 *
			 * @private
			 * @param {Object} typedArray The typed array to clone.
			 * @param {boolean} [isDeep] Specify a deep clone.
			 * @returns {Object} Returns the cloned typed array.
			 */
			function cloneTypedArray(typedArray, isDeep) {
			  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
			  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
			}

			/**
			 * Copies the values of `source` to `array`.
			 *
			 * @private
			 * @param {Array} source The array to copy values from.
			 * @param {Array} [array=[]] The array to copy values to.
			 * @returns {Array} Returns `array`.
			 */
			function copyArray(source, array) {
			  var index = -1,
			      length = source.length;

			  array || (array = Array(length));
			  while (++index < length) {
			    array[index] = source[index];
			  }
			  return array;
			}

			/** Built-in value references. */
			var objectCreate = Object.create;

			/**
			 * The base implementation of `_.create` without support for assigning
			 * properties to the created object.
			 *
			 * @private
			 * @param {Object} proto The object to inherit from.
			 * @returns {Object} Returns the new object.
			 */
			var baseCreate = (function() {
			  function object() {}
			  return function(proto) {
			    if (!isObject(proto)) {
			      return {};
			    }
			    if (objectCreate) {
			      return objectCreate(proto);
			    }
			    object.prototype = proto;
			    var result = new object;
			    object.prototype = undefined;
			    return result;
			  };
			}());

			var baseCreate$1 = baseCreate;

			/**
			 * Creates a unary function that invokes `func` with its argument transformed.
			 *
			 * @private
			 * @param {Function} func The function to wrap.
			 * @param {Function} transform The argument transform.
			 * @returns {Function} Returns the new function.
			 */
			function overArg(func, transform) {
			  return function(arg) {
			    return func(transform(arg));
			  };
			}

			/** Built-in value references. */
			var getPrototype = overArg(Object.getPrototypeOf, Object);

			var getPrototype$1 = getPrototype;

			/** Used for built-in method references. */
			var objectProto$9 = Object.prototype;

			/**
			 * Checks if `value` is likely a prototype object.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
			 */
			function isPrototype(value) {
			  var Ctor = value && value.constructor,
			      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$9;

			  return value === proto;
			}

			/**
			 * Initializes an object clone.
			 *
			 * @private
			 * @param {Object} object The object to clone.
			 * @returns {Object} Returns the initialized clone.
			 */
			function initCloneObject(object) {
			  return (typeof object.constructor == 'function' && !isPrototype(object))
			    ? baseCreate$1(getPrototype$1(object))
			    : {};
			}

			/**
			 * Checks if `value` is object-like. A value is object-like if it's not `null`
			 * and has a `typeof` result of "object".
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
			 * @example
			 *
			 * _.isObjectLike({});
			 * // => true
			 *
			 * _.isObjectLike([1, 2, 3]);
			 * // => true
			 *
			 * _.isObjectLike(_.noop);
			 * // => false
			 *
			 * _.isObjectLike(null);
			 * // => false
			 */
			function isObjectLike(value) {
			  return value != null && typeof value == 'object';
			}

			/** `Object#toString` result references. */
			var argsTag$2 = '[object Arguments]';

			/**
			 * The base implementation of `_.isArguments`.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
			 */
			function baseIsArguments(value) {
			  return isObjectLike(value) && baseGetTag(value) == argsTag$2;
			}

			/** Used for built-in method references. */
			var objectProto$8 = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$7 = objectProto$8.hasOwnProperty;

			/** Built-in value references. */
			var propertyIsEnumerable$1 = objectProto$8.propertyIsEnumerable;

			/**
			 * Checks if `value` is likely an `arguments` object.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
			 *  else `false`.
			 * @example
			 *
			 * _.isArguments(function() { return arguments; }());
			 * // => true
			 *
			 * _.isArguments([1, 2, 3]);
			 * // => false
			 */
			var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
			  return isObjectLike(value) && hasOwnProperty$7.call(value, 'callee') &&
			    !propertyIsEnumerable$1.call(value, 'callee');
			};

			var isArguments$1 = isArguments;

			/**
			 * Checks if `value` is classified as an `Array` object.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
			 * @example
			 *
			 * _.isArray([1, 2, 3]);
			 * // => true
			 *
			 * _.isArray(document.body.children);
			 * // => false
			 *
			 * _.isArray('abc');
			 * // => false
			 *
			 * _.isArray(_.noop);
			 * // => false
			 */
			var isArray = Array.isArray;

			var isArray$1 = isArray;

			/** Used as references for various `Number` constants. */
			var MAX_SAFE_INTEGER$1 = 9007199254740991;

			/**
			 * Checks if `value` is a valid array-like length.
			 *
			 * **Note:** This method is loosely based on
			 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
			 * @example
			 *
			 * _.isLength(3);
			 * // => true
			 *
			 * _.isLength(Number.MIN_VALUE);
			 * // => false
			 *
			 * _.isLength(Infinity);
			 * // => false
			 *
			 * _.isLength('3');
			 * // => false
			 */
			function isLength(value) {
			  return typeof value == 'number' &&
			    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
			}

			/**
			 * Checks if `value` is array-like. A value is considered array-like if it's
			 * not a function and has a `value.length` that's an integer greater than or
			 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
			 * @example
			 *
			 * _.isArrayLike([1, 2, 3]);
			 * // => true
			 *
			 * _.isArrayLike(document.body.children);
			 * // => true
			 *
			 * _.isArrayLike('abc');
			 * // => true
			 *
			 * _.isArrayLike(_.noop);
			 * // => false
			 */
			function isArrayLike(value) {
			  return value != null && isLength(value.length) && !isFunction(value);
			}

			/**
			 * This method is like `_.isArrayLike` except that it also checks if `value`
			 * is an object.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is an array-like object,
			 *  else `false`.
			 * @example
			 *
			 * _.isArrayLikeObject([1, 2, 3]);
			 * // => true
			 *
			 * _.isArrayLikeObject(document.body.children);
			 * // => true
			 *
			 * _.isArrayLikeObject('abc');
			 * // => false
			 *
			 * _.isArrayLikeObject(_.noop);
			 * // => false
			 */
			function isArrayLikeObject(value) {
			  return isObjectLike(value) && isArrayLike(value);
			}

			/**
			 * This method returns `false`.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.13.0
			 * @category Util
			 * @returns {boolean} Returns `false`.
			 * @example
			 *
			 * _.times(2, _.stubFalse);
			 * // => [false, false]
			 */
			function stubFalse() {
			  return false;
			}

			/** Detect free variable `exports`. */
			var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

			/** Detect free variable `module`. */
			var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

			/** Detect the popular CommonJS extension `module.exports`. */
			var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

			/** Built-in value references. */
			var Buffer = moduleExports$1 ? root$1.Buffer : undefined;

			/* Built-in method references for those with the same name as other `lodash` methods. */
			var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

			/**
			 * Checks if `value` is a buffer.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.3.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
			 * @example
			 *
			 * _.isBuffer(new Buffer(2));
			 * // => true
			 *
			 * _.isBuffer(new Uint8Array(2));
			 * // => false
			 */
			var isBuffer = nativeIsBuffer || stubFalse;

			var isBuffer$1 = isBuffer;

			/** `Object#toString` result references. */
			var objectTag$3 = '[object Object]';

			/** Used for built-in method references. */
			var funcProto = Function.prototype,
			    objectProto$7 = Object.prototype;

			/** Used to resolve the decompiled source of functions. */
			var funcToString = funcProto.toString;

			/** Used to check objects for own properties. */
			var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

			/** Used to infer the `Object` constructor. */
			var objectCtorString = funcToString.call(Object);

			/**
			 * Checks if `value` is a plain object, that is, an object created by the
			 * `Object` constructor or one with a `[[Prototype]]` of `null`.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.8.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
			 * @example
			 *
			 * function Foo() {
			 *   this.a = 1;
			 * }
			 *
			 * _.isPlainObject(new Foo);
			 * // => false
			 *
			 * _.isPlainObject([1, 2, 3]);
			 * // => false
			 *
			 * _.isPlainObject({ 'x': 0, 'y': 0 });
			 * // => true
			 *
			 * _.isPlainObject(Object.create(null));
			 * // => true
			 */
			function isPlainObject(value) {
			  if (!isObjectLike(value) || baseGetTag(value) != objectTag$3) {
			    return false;
			  }
			  var proto = getPrototype$1(value);
			  if (proto === null) {
			    return true;
			  }
			  var Ctor = hasOwnProperty$6.call(proto, 'constructor') && proto.constructor;
			  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
			    funcToString.call(Ctor) == objectCtorString;
			}

			/** `Object#toString` result references. */
			var argsTag$1 = '[object Arguments]',
			    arrayTag$1 = '[object Array]',
			    boolTag$1 = '[object Boolean]',
			    dateTag$1 = '[object Date]',
			    errorTag$1 = '[object Error]',
			    funcTag = '[object Function]',
			    mapTag$2 = '[object Map]',
			    numberTag$1 = '[object Number]',
			    objectTag$2 = '[object Object]',
			    regexpTag$1 = '[object RegExp]',
			    setTag$2 = '[object Set]',
			    stringTag$1 = '[object String]',
			    weakMapTag$1 = '[object WeakMap]';

			var arrayBufferTag$1 = '[object ArrayBuffer]',
			    dataViewTag$2 = '[object DataView]',
			    float32Tag = '[object Float32Array]',
			    float64Tag = '[object Float64Array]',
			    int8Tag = '[object Int8Array]',
			    int16Tag = '[object Int16Array]',
			    int32Tag = '[object Int32Array]',
			    uint8Tag = '[object Uint8Array]',
			    uint8ClampedTag = '[object Uint8ClampedArray]',
			    uint16Tag = '[object Uint16Array]',
			    uint32Tag = '[object Uint32Array]';

			/** Used to identify `toStringTag` values of typed arrays. */
			var typedArrayTags = {};
			typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
			typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
			typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
			typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
			typedArrayTags[uint32Tag] = true;
			typedArrayTags[argsTag$1] = typedArrayTags[arrayTag$1] =
			typedArrayTags[arrayBufferTag$1] = typedArrayTags[boolTag$1] =
			typedArrayTags[dataViewTag$2] = typedArrayTags[dateTag$1] =
			typedArrayTags[errorTag$1] = typedArrayTags[funcTag] =
			typedArrayTags[mapTag$2] = typedArrayTags[numberTag$1] =
			typedArrayTags[objectTag$2] = typedArrayTags[regexpTag$1] =
			typedArrayTags[setTag$2] = typedArrayTags[stringTag$1] =
			typedArrayTags[weakMapTag$1] = false;

			/**
			 * The base implementation of `_.isTypedArray` without Node.js optimizations.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
			 */
			function baseIsTypedArray(value) {
			  return isObjectLike(value) &&
			    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
			}

			/**
			 * The base implementation of `_.unary` without support for storing metadata.
			 *
			 * @private
			 * @param {Function} func The function to cap arguments for.
			 * @returns {Function} Returns the new capped function.
			 */
			function baseUnary(func) {
			  return function(value) {
			    return func(value);
			  };
			}

			/** Detect free variable `exports`. */
			var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

			/** Detect free variable `module`. */
			var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

			/** Detect the popular CommonJS extension `module.exports`. */
			var moduleExports = freeModule && freeModule.exports === freeExports;

			/** Detect free variable `process` from Node.js. */
			var freeProcess = moduleExports && freeGlobal$1.process;

			/** Used to access faster Node.js helpers. */
			var nodeUtil = (function() {
			  try {
			    // Use `util.types` for Node.js 10+.
			    var types = freeModule && freeModule.require && freeModule.require('util').types;

			    if (types) {
			      return types;
			    }

			    // Legacy `process.binding('util')` for Node.js < 10.
			    return freeProcess && freeProcess.binding && freeProcess.binding('util');
			  } catch (e) {}
			}());

			var nodeUtil$1 = nodeUtil;

			/* Node.js helper references. */
			var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray;

			/**
			 * Checks if `value` is classified as a typed array.
			 *
			 * @static
			 * @memberOf _
			 * @since 3.0.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
			 * @example
			 *
			 * _.isTypedArray(new Uint8Array);
			 * // => true
			 *
			 * _.isTypedArray([]);
			 * // => false
			 */
			var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

			var isTypedArray$1 = isTypedArray;

			/**
			 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @param {string} key The key of the property to get.
			 * @returns {*} Returns the property value.
			 */
			function safeGet(object, key) {
			  if (key === 'constructor' && typeof object[key] === 'function') {
			    return;
			  }

			  if (key == '__proto__') {
			    return;
			  }

			  return object[key];
			}

			/** Used for built-in method references. */
			var objectProto$6 = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

			/**
			 * Assigns `value` to `key` of `object` if the existing value is not equivalent
			 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
			 * for equality comparisons.
			 *
			 * @private
			 * @param {Object} object The object to modify.
			 * @param {string} key The key of the property to assign.
			 * @param {*} value The value to assign.
			 */
			function assignValue(object, key, value) {
			  var objValue = object[key];
			  if (!(hasOwnProperty$5.call(object, key) && eq(objValue, value)) ||
			      (value === undefined && !(key in object))) {
			    baseAssignValue(object, key, value);
			  }
			}

			/**
			 * Copies properties of `source` to `object`.
			 *
			 * @private
			 * @param {Object} source The object to copy properties from.
			 * @param {Array} props The property identifiers to copy.
			 * @param {Object} [object={}] The object to copy properties to.
			 * @param {Function} [customizer] The function to customize copied values.
			 * @returns {Object} Returns `object`.
			 */
			function copyObject(source, props, object, customizer) {
			  var isNew = !object;
			  object || (object = {});

			  var index = -1,
			      length = props.length;

			  while (++index < length) {
			    var key = props[index];

			    var newValue = customizer
			      ? customizer(object[key], source[key], key, object, source)
			      : undefined;

			    if (newValue === undefined) {
			      newValue = source[key];
			    }
			    if (isNew) {
			      baseAssignValue(object, key, newValue);
			    } else {
			      assignValue(object, key, newValue);
			    }
			  }
			  return object;
			}

			/**
			 * The base implementation of `_.times` without support for iteratee shorthands
			 * or max array length checks.
			 *
			 * @private
			 * @param {number} n The number of times to invoke `iteratee`.
			 * @param {Function} iteratee The function invoked per iteration.
			 * @returns {Array} Returns the array of results.
			 */
			function baseTimes(n, iteratee) {
			  var index = -1,
			      result = Array(n);

			  while (++index < n) {
			    result[index] = iteratee(index);
			  }
			  return result;
			}

			/** Used as references for various `Number` constants. */
			var MAX_SAFE_INTEGER = 9007199254740991;

			/** Used to detect unsigned integer values. */
			var reIsUint = /^(?:0|[1-9]\d*)$/;

			/**
			 * Checks if `value` is a valid array-like index.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
			 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
			 */
			function isIndex(value, length) {
			  var type = typeof value;
			  length = length == null ? MAX_SAFE_INTEGER : length;

			  return !!length &&
			    (type == 'number' ||
			      (type != 'symbol' && reIsUint.test(value))) &&
			        (value > -1 && value % 1 == 0 && value < length);
			}

			/** Used for built-in method references. */
			var objectProto$5 = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

			/**
			 * Creates an array of the enumerable property names of the array-like `value`.
			 *
			 * @private
			 * @param {*} value The value to query.
			 * @param {boolean} inherited Specify returning inherited property names.
			 * @returns {Array} Returns the array of property names.
			 */
			function arrayLikeKeys(value, inherited) {
			  var isArr = isArray$1(value),
			      isArg = !isArr && isArguments$1(value),
			      isBuff = !isArr && !isArg && isBuffer$1(value),
			      isType = !isArr && !isArg && !isBuff && isTypedArray$1(value),
			      skipIndexes = isArr || isArg || isBuff || isType,
			      result = skipIndexes ? baseTimes(value.length, String) : [],
			      length = result.length;

			  for (var key in value) {
			    if ((inherited || hasOwnProperty$4.call(value, key)) &&
			        !(skipIndexes && (
			           // Safari 9 has enumerable `arguments.length` in strict mode.
			           key == 'length' ||
			           // Node.js 0.10 has enumerable non-index properties on buffers.
			           (isBuff && (key == 'offset' || key == 'parent')) ||
			           // PhantomJS 2 has enumerable non-index properties on typed arrays.
			           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
			           // Skip index properties.
			           isIndex(key, length)
			        ))) {
			      result.push(key);
			    }
			  }
			  return result;
			}

			/**
			 * This function is like
			 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
			 * except that it includes inherited enumerable properties.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of property names.
			 */
			function nativeKeysIn(object) {
			  var result = [];
			  if (object != null) {
			    for (var key in Object(object)) {
			      result.push(key);
			    }
			  }
			  return result;
			}

			/** Used for built-in method references. */
			var objectProto$4 = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

			/**
			 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of property names.
			 */
			function baseKeysIn(object) {
			  if (!isObject(object)) {
			    return nativeKeysIn(object);
			  }
			  var isProto = isPrototype(object),
			      result = [];

			  for (var key in object) {
			    if (!(key == 'constructor' && (isProto || !hasOwnProperty$3.call(object, key)))) {
			      result.push(key);
			    }
			  }
			  return result;
			}

			/**
			 * Creates an array of the own and inherited enumerable property names of `object`.
			 *
			 * **Note:** Non-object values are coerced to objects.
			 *
			 * @static
			 * @memberOf _
			 * @since 3.0.0
			 * @category Object
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of property names.
			 * @example
			 *
			 * function Foo() {
			 *   this.a = 1;
			 *   this.b = 2;
			 * }
			 *
			 * Foo.prototype.c = 3;
			 *
			 * _.keysIn(new Foo);
			 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
			 */
			function keysIn(object) {
			  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
			}

			/**
			 * Converts `value` to a plain object flattening inherited enumerable string
			 * keyed properties of `value` to own properties of the plain object.
			 *
			 * @static
			 * @memberOf _
			 * @since 3.0.0
			 * @category Lang
			 * @param {*} value The value to convert.
			 * @returns {Object} Returns the converted plain object.
			 * @example
			 *
			 * function Foo() {
			 *   this.b = 2;
			 * }
			 *
			 * Foo.prototype.c = 3;
			 *
			 * _.assign({ 'a': 1 }, new Foo);
			 * // => { 'a': 1, 'b': 2 }
			 *
			 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
			 * // => { 'a': 1, 'b': 2, 'c': 3 }
			 */
			function toPlainObject(value) {
			  return copyObject(value, keysIn(value));
			}

			/**
			 * A specialized version of `baseMerge` for arrays and objects which performs
			 * deep merges and tracks traversed objects enabling objects with circular
			 * references to be merged.
			 *
			 * @private
			 * @param {Object} object The destination object.
			 * @param {Object} source The source object.
			 * @param {string} key The key of the value to merge.
			 * @param {number} srcIndex The index of `source`.
			 * @param {Function} mergeFunc The function to merge values.
			 * @param {Function} [customizer] The function to customize assigned values.
			 * @param {Object} [stack] Tracks traversed source values and their merged
			 *  counterparts.
			 */
			function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
			  var objValue = safeGet(object, key),
			      srcValue = safeGet(source, key),
			      stacked = stack.get(srcValue);

			  if (stacked) {
			    assignMergeValue(object, key, stacked);
			    return;
			  }
			  var newValue = customizer
			    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
			    : undefined;

			  var isCommon = newValue === undefined;

			  if (isCommon) {
			    var isArr = isArray$1(srcValue),
			        isBuff = !isArr && isBuffer$1(srcValue),
			        isTyped = !isArr && !isBuff && isTypedArray$1(srcValue);

			    newValue = srcValue;
			    if (isArr || isBuff || isTyped) {
			      if (isArray$1(objValue)) {
			        newValue = objValue;
			      }
			      else if (isArrayLikeObject(objValue)) {
			        newValue = copyArray(objValue);
			      }
			      else if (isBuff) {
			        isCommon = false;
			        newValue = cloneBuffer(srcValue, true);
			      }
			      else if (isTyped) {
			        isCommon = false;
			        newValue = cloneTypedArray(srcValue, true);
			      }
			      else {
			        newValue = [];
			      }
			    }
			    else if (isPlainObject(srcValue) || isArguments$1(srcValue)) {
			      newValue = objValue;
			      if (isArguments$1(objValue)) {
			        newValue = toPlainObject(objValue);
			      }
			      else if (!isObject(objValue) || isFunction(objValue)) {
			        newValue = initCloneObject(srcValue);
			      }
			    }
			    else {
			      isCommon = false;
			    }
			  }
			  if (isCommon) {
			    // Recursively merge objects and arrays (susceptible to call stack limits).
			    stack.set(srcValue, newValue);
			    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
			    stack['delete'](srcValue);
			  }
			  assignMergeValue(object, key, newValue);
			}

			/**
			 * The base implementation of `_.merge` without support for multiple sources.
			 *
			 * @private
			 * @param {Object} object The destination object.
			 * @param {Object} source The source object.
			 * @param {number} srcIndex The index of `source`.
			 * @param {Function} [customizer] The function to customize merged values.
			 * @param {Object} [stack] Tracks traversed source values and their merged
			 *  counterparts.
			 */
			function baseMerge(object, source, srcIndex, customizer, stack) {
			  if (object === source) {
			    return;
			  }
			  baseFor$1(source, function(srcValue, key) {
			    stack || (stack = new Stack);
			    if (isObject(srcValue)) {
			      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
			    }
			    else {
			      var newValue = customizer
			        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
			        : undefined;

			      if (newValue === undefined) {
			        newValue = srcValue;
			      }
			      assignMergeValue(object, key, newValue);
			    }
			  }, keysIn);
			}

			/**
			 * This method returns the first argument it receives.
			 *
			 * @static
			 * @since 0.1.0
			 * @memberOf _
			 * @category Util
			 * @param {*} value Any value.
			 * @returns {*} Returns `value`.
			 * @example
			 *
			 * var object = { 'a': 1 };
			 *
			 * console.log(_.identity(object) === object);
			 * // => true
			 */
			function identity(value) {
			  return value;
			}

			/**
			 * A faster alternative to `Function#apply`, this function invokes `func`
			 * with the `this` binding of `thisArg` and the arguments of `args`.
			 *
			 * @private
			 * @param {Function} func The function to invoke.
			 * @param {*} thisArg The `this` binding of `func`.
			 * @param {Array} args The arguments to invoke `func` with.
			 * @returns {*} Returns the result of `func`.
			 */
			function apply(func, thisArg, args) {
			  switch (args.length) {
			    case 0: return func.call(thisArg);
			    case 1: return func.call(thisArg, args[0]);
			    case 2: return func.call(thisArg, args[0], args[1]);
			    case 3: return func.call(thisArg, args[0], args[1], args[2]);
			  }
			  return func.apply(thisArg, args);
			}

			/* Built-in method references for those with the same name as other `lodash` methods. */
			var nativeMax$1 = Math.max;

			/**
			 * A specialized version of `baseRest` which transforms the rest array.
			 *
			 * @private
			 * @param {Function} func The function to apply a rest parameter to.
			 * @param {number} [start=func.length-1] The start position of the rest parameter.
			 * @param {Function} transform The rest array transform.
			 * @returns {Function} Returns the new function.
			 */
			function overRest(func, start, transform) {
			  start = nativeMax$1(start === undefined ? (func.length - 1) : start, 0);
			  return function() {
			    var args = arguments,
			        index = -1,
			        length = nativeMax$1(args.length - start, 0),
			        array = Array(length);

			    while (++index < length) {
			      array[index] = args[start + index];
			    }
			    index = -1;
			    var otherArgs = Array(start + 1);
			    while (++index < start) {
			      otherArgs[index] = args[index];
			    }
			    otherArgs[start] = transform(array);
			    return apply(func, this, otherArgs);
			  };
			}

			/**
			 * Creates a function that returns `value`.
			 *
			 * @static
			 * @memberOf _
			 * @since 2.4.0
			 * @category Util
			 * @param {*} value The value to return from the new function.
			 * @returns {Function} Returns the new constant function.
			 * @example
			 *
			 * var objects = _.times(2, _.constant({ 'a': 1 }));
			 *
			 * console.log(objects);
			 * // => [{ 'a': 1 }, { 'a': 1 }]
			 *
			 * console.log(objects[0] === objects[1]);
			 * // => true
			 */
			function constant(value) {
			  return function() {
			    return value;
			  };
			}

			/**
			 * The base implementation of `setToString` without support for hot loop shorting.
			 *
			 * @private
			 * @param {Function} func The function to modify.
			 * @param {Function} string The `toString` result.
			 * @returns {Function} Returns `func`.
			 */
			var baseSetToString = !defineProperty$1 ? identity : function(func, string) {
			  return defineProperty$1(func, 'toString', {
			    'configurable': true,
			    'enumerable': false,
			    'value': constant(string),
			    'writable': true
			  });
			};

			var baseSetToString$1 = baseSetToString;

			/** Used to detect hot functions by number of calls within a span of milliseconds. */
			var HOT_COUNT = 800,
			    HOT_SPAN = 16;

			/* Built-in method references for those with the same name as other `lodash` methods. */
			var nativeNow = Date.now;

			/**
			 * Creates a function that'll short out and invoke `identity` instead
			 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
			 * milliseconds.
			 *
			 * @private
			 * @param {Function} func The function to restrict.
			 * @returns {Function} Returns the new shortable function.
			 */
			function shortOut(func) {
			  var count = 0,
			      lastCalled = 0;

			  return function() {
			    var stamp = nativeNow(),
			        remaining = HOT_SPAN - (stamp - lastCalled);

			    lastCalled = stamp;
			    if (remaining > 0) {
			      if (++count >= HOT_COUNT) {
			        return arguments[0];
			      }
			    } else {
			      count = 0;
			    }
			    return func.apply(undefined, arguments);
			  };
			}

			/**
			 * Sets the `toString` method of `func` to return `string`.
			 *
			 * @private
			 * @param {Function} func The function to modify.
			 * @param {Function} string The `toString` result.
			 * @returns {Function} Returns `func`.
			 */
			var setToString = shortOut(baseSetToString$1);

			var setToString$1 = setToString;

			/**
			 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
			 *
			 * @private
			 * @param {Function} func The function to apply a rest parameter to.
			 * @param {number} [start=func.length-1] The start position of the rest parameter.
			 * @returns {Function} Returns the new function.
			 */
			function baseRest(func, start) {
			  return setToString$1(overRest(func, start, identity), func + '');
			}

			/**
			 * Checks if the given arguments are from an iteratee call.
			 *
			 * @private
			 * @param {*} value The potential iteratee value argument.
			 * @param {*} index The potential iteratee index or key argument.
			 * @param {*} object The potential iteratee object argument.
			 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
			 *  else `false`.
			 */
			function isIterateeCall(value, index, object) {
			  if (!isObject(object)) {
			    return false;
			  }
			  var type = typeof index;
			  if (type == 'number'
			        ? (isArrayLike(object) && isIndex(index, object.length))
			        : (type == 'string' && index in object)
			      ) {
			    return eq(object[index], value);
			  }
			  return false;
			}

			/**
			 * Creates a function like `_.assign`.
			 *
			 * @private
			 * @param {Function} assigner The function to assign values.
			 * @returns {Function} Returns the new assigner function.
			 */
			function createAssigner(assigner) {
			  return baseRest(function(object, sources) {
			    var index = -1,
			        length = sources.length,
			        customizer = length > 1 ? sources[length - 1] : undefined,
			        guard = length > 2 ? sources[2] : undefined;

			    customizer = (assigner.length > 3 && typeof customizer == 'function')
			      ? (length--, customizer)
			      : undefined;

			    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
			      customizer = length < 3 ? undefined : customizer;
			      length = 1;
			    }
			    object = Object(object);
			    while (++index < length) {
			      var source = sources[index];
			      if (source) {
			        assigner(object, source, index, customizer);
			      }
			    }
			    return object;
			  });
			}

			/**
			 * This method is like `_.assign` except that it recursively merges own and
			 * inherited enumerable string keyed properties of source objects into the
			 * destination object. Source properties that resolve to `undefined` are
			 * skipped if a destination value exists. Array and plain object properties
			 * are merged recursively. Other objects and value types are overridden by
			 * assignment. Source objects are applied from left to right. Subsequent
			 * sources overwrite property assignments of previous sources.
			 *
			 * **Note:** This method mutates `object`.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.5.0
			 * @category Object
			 * @param {Object} object The destination object.
			 * @param {...Object} [sources] The source objects.
			 * @returns {Object} Returns `object`.
			 * @example
			 *
			 * var object = {
			 *   'a': [{ 'b': 2 }, { 'd': 4 }]
			 * };
			 *
			 * var other = {
			 *   'a': [{ 'c': 3 }, { 'e': 5 }]
			 * };
			 *
			 * _.merge(object, other);
			 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
			 */
			var merge = createAssigner(function(object, source, srcIndex) {
			  baseMerge(object, source, srcIndex);
			});

			var merge$1 = merge;

			var Raised = function Raised(_ref) {
			  var zDepth = _ref.zDepth,
			      radius = _ref.radius,
			      background = _ref.background,
			      children = _ref.children,
			      _ref$styles = _ref.styles,
			      passedStyles = _ref$styles === undefined ? {} : _ref$styles;

			  var styles = _default$2(merge$1({
			    'default': {
			      wrap: {
			        position: 'relative',
			        display: 'inline-block'
			      },
			      content: {
			        position: 'relative'
			      },
			      bg: {
			        absolute: '0px 0px 0px 0px',
			        boxShadow: '0 ' + zDepth + 'px ' + zDepth * 4 + 'px rgba(0,0,0,.24)',
			        borderRadius: radius,
			        background: background
			      }
			    },
			    'zDepth-0': {
			      bg: {
			        boxShadow: 'none'
			      }
			    },

			    'zDepth-1': {
			      bg: {
			        boxShadow: '0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16)'
			      }
			    },
			    'zDepth-2': {
			      bg: {
			        boxShadow: '0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2)'
			      }
			    },
			    'zDepth-3': {
			      bg: {
			        boxShadow: '0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24)'
			      }
			    },
			    'zDepth-4': {
			      bg: {
			        boxShadow: '0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22)'
			      }
			    },
			    'zDepth-5': {
			      bg: {
			        boxShadow: '0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2)'
			      }
			    },
			    'square': {
			      bg: {
			        borderRadius: '0'
			      }
			    },
			    'circle': {
			      bg: {
			        borderRadius: '50%'
			      }
			    }
			  }, passedStyles), { 'zDepth-1': zDepth === 1 });

			  return React__default.createElement(
			    'div',
			    { style: styles.wrap },
			    React__default.createElement('div', { style: styles.bg }),
			    React__default.createElement(
			      'div',
			      { style: styles.content },
			      children
			    )
			  );
			};

			Raised.propTypes = {
			  background: PropTypes.string,
			  zDepth: PropTypes.oneOf([0, 1, 2, 3, 4, 5]),
			  radius: PropTypes.number,
			  styles: PropTypes.object
			};

			Raised.defaultProps = {
			  background: '#fff',
			  zDepth: 1,
			  radius: 2,
			  styles: {}
			};

			/**
			 * Gets the timestamp of the number of milliseconds that have elapsed since
			 * the Unix epoch (1 January 1970 00:00:00 UTC).
			 *
			 * @static
			 * @memberOf _
			 * @since 2.4.0
			 * @category Date
			 * @returns {number} Returns the timestamp.
			 * @example
			 *
			 * _.defer(function(stamp) {
			 *   console.log(_.now() - stamp);
			 * }, _.now());
			 * // => Logs the number of milliseconds it took for the deferred invocation.
			 */
			var now = function() {
			  return root$1.Date.now();
			};

			var now$1 = now;

			/** Used to match a single whitespace character. */
			var reWhitespace = /\s/;

			/**
			 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
			 * character of `string`.
			 *
			 * @private
			 * @param {string} string The string to inspect.
			 * @returns {number} Returns the index of the last non-whitespace character.
			 */
			function trimmedEndIndex(string) {
			  var index = string.length;

			  while (index-- && reWhitespace.test(string.charAt(index))) {}
			  return index;
			}

			/** Used to match leading whitespace. */
			var reTrimStart = /^\s+/;

			/**
			 * The base implementation of `_.trim`.
			 *
			 * @private
			 * @param {string} string The string to trim.
			 * @returns {string} Returns the trimmed string.
			 */
			function baseTrim(string) {
			  return string
			    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
			    : string;
			}

			/** `Object#toString` result references. */
			var symbolTag$1 = '[object Symbol]';

			/**
			 * Checks if `value` is classified as a `Symbol` primitive or object.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
			 * @example
			 *
			 * _.isSymbol(Symbol.iterator);
			 * // => true
			 *
			 * _.isSymbol('abc');
			 * // => false
			 */
			function isSymbol(value) {
			  return typeof value == 'symbol' ||
			    (isObjectLike(value) && baseGetTag(value) == symbolTag$1);
			}

			/** Used as references for various `Number` constants. */
			var NAN = 0 / 0;

			/** Used to detect bad signed hexadecimal string values. */
			var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

			/** Used to detect binary string values. */
			var reIsBinary = /^0b[01]+$/i;

			/** Used to detect octal string values. */
			var reIsOctal = /^0o[0-7]+$/i;

			/** Built-in method references without a dependency on `root`. */
			var freeParseInt = parseInt;

			/**
			 * Converts `value` to a number.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to process.
			 * @returns {number} Returns the number.
			 * @example
			 *
			 * _.toNumber(3.2);
			 * // => 3.2
			 *
			 * _.toNumber(Number.MIN_VALUE);
			 * // => 5e-324
			 *
			 * _.toNumber(Infinity);
			 * // => Infinity
			 *
			 * _.toNumber('3.2');
			 * // => 3.2
			 */
			function toNumber(value) {
			  if (typeof value == 'number') {
			    return value;
			  }
			  if (isSymbol(value)) {
			    return NAN;
			  }
			  if (isObject(value)) {
			    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
			    value = isObject(other) ? (other + '') : other;
			  }
			  if (typeof value != 'string') {
			    return value === 0 ? value : +value;
			  }
			  value = baseTrim(value);
			  var isBinary = reIsBinary.test(value);
			  return (isBinary || reIsOctal.test(value))
			    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
			    : (reIsBadHex.test(value) ? NAN : +value);
			}

			/** Error message constants. */
			var FUNC_ERROR_TEXT$2 = 'Expected a function';

			/* Built-in method references for those with the same name as other `lodash` methods. */
			var nativeMax = Math.max,
			    nativeMin = Math.min;

			/**
			 * Creates a debounced function that delays invoking `func` until after `wait`
			 * milliseconds have elapsed since the last time the debounced function was
			 * invoked. The debounced function comes with a `cancel` method to cancel
			 * delayed `func` invocations and a `flush` method to immediately invoke them.
			 * Provide `options` to indicate whether `func` should be invoked on the
			 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
			 * with the last arguments provided to the debounced function. Subsequent
			 * calls to the debounced function return the result of the last `func`
			 * invocation.
			 *
			 * **Note:** If `leading` and `trailing` options are `true`, `func` is
			 * invoked on the trailing edge of the timeout only if the debounced function
			 * is invoked more than once during the `wait` timeout.
			 *
			 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
			 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
			 *
			 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
			 * for details over the differences between `_.debounce` and `_.throttle`.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Function
			 * @param {Function} func The function to debounce.
			 * @param {number} [wait=0] The number of milliseconds to delay.
			 * @param {Object} [options={}] The options object.
			 * @param {boolean} [options.leading=false]
			 *  Specify invoking on the leading edge of the timeout.
			 * @param {number} [options.maxWait]
			 *  The maximum time `func` is allowed to be delayed before it's invoked.
			 * @param {boolean} [options.trailing=true]
			 *  Specify invoking on the trailing edge of the timeout.
			 * @returns {Function} Returns the new debounced function.
			 * @example
			 *
			 * // Avoid costly calculations while the window size is in flux.
			 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
			 *
			 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
			 * jQuery(element).on('click', _.debounce(sendMail, 300, {
			 *   'leading': true,
			 *   'trailing': false
			 * }));
			 *
			 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
			 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
			 * var source = new EventSource('/stream');
			 * jQuery(source).on('message', debounced);
			 *
			 * // Cancel the trailing debounced invocation.
			 * jQuery(window).on('popstate', debounced.cancel);
			 */
			function debounce(func, wait, options) {
			  var lastArgs,
			      lastThis,
			      maxWait,
			      result,
			      timerId,
			      lastCallTime,
			      lastInvokeTime = 0,
			      leading = false,
			      maxing = false,
			      trailing = true;

			  if (typeof func != 'function') {
			    throw new TypeError(FUNC_ERROR_TEXT$2);
			  }
			  wait = toNumber(wait) || 0;
			  if (isObject(options)) {
			    leading = !!options.leading;
			    maxing = 'maxWait' in options;
			    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
			    trailing = 'trailing' in options ? !!options.trailing : trailing;
			  }

			  function invokeFunc(time) {
			    var args = lastArgs,
			        thisArg = lastThis;

			    lastArgs = lastThis = undefined;
			    lastInvokeTime = time;
			    result = func.apply(thisArg, args);
			    return result;
			  }

			  function leadingEdge(time) {
			    // Reset any `maxWait` timer.
			    lastInvokeTime = time;
			    // Start the timer for the trailing edge.
			    timerId = setTimeout(timerExpired, wait);
			    // Invoke the leading edge.
			    return leading ? invokeFunc(time) : result;
			  }

			  function remainingWait(time) {
			    var timeSinceLastCall = time - lastCallTime,
			        timeSinceLastInvoke = time - lastInvokeTime,
			        timeWaiting = wait - timeSinceLastCall;

			    return maxing
			      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
			      : timeWaiting;
			  }

			  function shouldInvoke(time) {
			    var timeSinceLastCall = time - lastCallTime,
			        timeSinceLastInvoke = time - lastInvokeTime;

			    // Either this is the first call, activity has stopped and we're at the
			    // trailing edge, the system time has gone backwards and we're treating
			    // it as the trailing edge, or we've hit the `maxWait` limit.
			    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
			      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
			  }

			  function timerExpired() {
			    var time = now$1();
			    if (shouldInvoke(time)) {
			      return trailingEdge(time);
			    }
			    // Restart the timer.
			    timerId = setTimeout(timerExpired, remainingWait(time));
			  }

			  function trailingEdge(time) {
			    timerId = undefined;

			    // Only invoke if we have `lastArgs` which means `func` has been
			    // debounced at least once.
			    if (trailing && lastArgs) {
			      return invokeFunc(time);
			    }
			    lastArgs = lastThis = undefined;
			    return result;
			  }

			  function cancel() {
			    if (timerId !== undefined) {
			      clearTimeout(timerId);
			    }
			    lastInvokeTime = 0;
			    lastArgs = lastCallTime = lastThis = timerId = undefined;
			  }

			  function flush() {
			    return timerId === undefined ? result : trailingEdge(now$1());
			  }

			  function debounced() {
			    var time = now$1(),
			        isInvoking = shouldInvoke(time);

			    lastArgs = arguments;
			    lastThis = this;
			    lastCallTime = time;

			    if (isInvoking) {
			      if (timerId === undefined) {
			        return leadingEdge(lastCallTime);
			      }
			      if (maxing) {
			        // Handle invocations in a tight loop.
			        clearTimeout(timerId);
			        timerId = setTimeout(timerExpired, wait);
			        return invokeFunc(lastCallTime);
			      }
			    }
			    if (timerId === undefined) {
			      timerId = setTimeout(timerExpired, wait);
			    }
			    return result;
			  }
			  debounced.cancel = cancel;
			  debounced.flush = flush;
			  return debounced;
			}

			/** Error message constants. */
			var FUNC_ERROR_TEXT$1 = 'Expected a function';

			/**
			 * Creates a throttled function that only invokes `func` at most once per
			 * every `wait` milliseconds. The throttled function comes with a `cancel`
			 * method to cancel delayed `func` invocations and a `flush` method to
			 * immediately invoke them. Provide `options` to indicate whether `func`
			 * should be invoked on the leading and/or trailing edge of the `wait`
			 * timeout. The `func` is invoked with the last arguments provided to the
			 * throttled function. Subsequent calls to the throttled function return the
			 * result of the last `func` invocation.
			 *
			 * **Note:** If `leading` and `trailing` options are `true`, `func` is
			 * invoked on the trailing edge of the timeout only if the throttled function
			 * is invoked more than once during the `wait` timeout.
			 *
			 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
			 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
			 *
			 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
			 * for details over the differences between `_.throttle` and `_.debounce`.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Function
			 * @param {Function} func The function to throttle.
			 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
			 * @param {Object} [options={}] The options object.
			 * @param {boolean} [options.leading=true]
			 *  Specify invoking on the leading edge of the timeout.
			 * @param {boolean} [options.trailing=true]
			 *  Specify invoking on the trailing edge of the timeout.
			 * @returns {Function} Returns the new throttled function.
			 * @example
			 *
			 * // Avoid excessively updating the position while scrolling.
			 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
			 *
			 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
			 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
			 * jQuery(element).on('click', throttled);
			 *
			 * // Cancel the trailing throttled invocation.
			 * jQuery(window).on('popstate', throttled.cancel);
			 */
			function throttle(func, wait, options) {
			  var leading = true,
			      trailing = true;

			  if (typeof func != 'function') {
			    throw new TypeError(FUNC_ERROR_TEXT$1);
			  }
			  if (isObject(options)) {
			    leading = 'leading' in options ? !!options.leading : leading;
			    trailing = 'trailing' in options ? !!options.trailing : trailing;
			  }
			  return debounce(func, wait, {
			    'leading': leading,
			    'maxWait': wait,
			    'trailing': trailing
			  });
			}

			var calculateChange = function calculateChange(e, hsl, container) {
			  var _container$getBoundin = container.getBoundingClientRect(),
			      containerWidth = _container$getBoundin.width,
			      containerHeight = _container$getBoundin.height;

			  var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;
			  var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;
			  var left = x - (container.getBoundingClientRect().left + window.pageXOffset);
			  var top = y - (container.getBoundingClientRect().top + window.pageYOffset);

			  if (left < 0) {
			    left = 0;
			  } else if (left > containerWidth) {
			    left = containerWidth;
			  }

			  if (top < 0) {
			    top = 0;
			  } else if (top > containerHeight) {
			    top = containerHeight;
			  }

			  var saturation = left / containerWidth;
			  var bright = 1 - top / containerHeight;

			  return {
			    h: hsl.h,
			    s: saturation,
			    v: bright,
			    a: hsl.a,
			    source: 'hsv'
			  };
			};

			var _createClass$4 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

			function _classCallCheck$4(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

			function _possibleConstructorReturn$4(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

			function _inherits$4(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

			var Saturation = function (_ref) {
			  _inherits$4(Saturation, _ref);

			  function Saturation(props) {
			    _classCallCheck$4(this, Saturation);

			    var _this = _possibleConstructorReturn$4(this, (Saturation.__proto__ || Object.getPrototypeOf(Saturation)).call(this, props));

			    _this.handleChange = function (e) {
			      typeof _this.props.onChange === 'function' && _this.throttle(_this.props.onChange, calculateChange(e, _this.props.hsl, _this.container), e);
			    };

			    _this.handleMouseDown = function (e) {
			      _this.handleChange(e);
			      var renderWindow = _this.getContainerRenderWindow();
			      renderWindow.addEventListener('mousemove', _this.handleChange);
			      renderWindow.addEventListener('mouseup', _this.handleMouseUp);
			    };

			    _this.handleMouseUp = function () {
			      _this.unbindEventListeners();
			    };

			    _this.throttle = throttle(function (fn, data, e) {
			      fn(data, e);
			    }, 50);
			    return _this;
			  }

			  _createClass$4(Saturation, [{
			    key: 'componentWillUnmount',
			    value: function componentWillUnmount() {
			      this.throttle.cancel();
			      this.unbindEventListeners();
			    }
			  }, {
			    key: 'getContainerRenderWindow',
			    value: function getContainerRenderWindow() {
			      var container = this.container;

			      var renderWindow = window;
			      while (!renderWindow.document.contains(container) && renderWindow.parent !== renderWindow) {
			        renderWindow = renderWindow.parent;
			      }
			      return renderWindow;
			    }
			  }, {
			    key: 'unbindEventListeners',
			    value: function unbindEventListeners() {
			      var renderWindow = this.getContainerRenderWindow();
			      renderWindow.removeEventListener('mousemove', this.handleChange);
			      renderWindow.removeEventListener('mouseup', this.handleMouseUp);
			    }
			  }, {
			    key: 'render',
			    value: function render() {
			      var _this2 = this;

			      var _ref2 = this.props.style || {},
			          color = _ref2.color,
			          white = _ref2.white,
			          black = _ref2.black,
			          pointer = _ref2.pointer,
			          circle = _ref2.circle;

			      var styles = _default$2({
			        'default': {
			          color: {
			            absolute: '0px 0px 0px 0px',
			            background: 'hsl(' + this.props.hsl.h + ',100%, 50%)',
			            borderRadius: this.props.radius
			          },
			          white: {
			            absolute: '0px 0px 0px 0px',
			            borderRadius: this.props.radius
			          },
			          black: {
			            absolute: '0px 0px 0px 0px',
			            boxShadow: this.props.shadow,
			            borderRadius: this.props.radius
			          },
			          pointer: {
			            position: 'absolute',
			            top: -(this.props.hsv.v * 100) + 100 + '%',
			            left: this.props.hsv.s * 100 + '%',
			            cursor: 'default'
			          },
			          circle: {
			            width: '4px',
			            height: '4px',
			            boxShadow: '0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),\n            0 0 1px 2px rgba(0,0,0,.4)',
			            borderRadius: '50%',
			            cursor: 'hand',
			            transform: 'translate(-2px, -2px)'
			          }
			        },
			        'custom': {
			          color: color,
			          white: white,
			          black: black,
			          pointer: pointer,
			          circle: circle
			        }
			      }, { 'custom': !!this.props.style });

			      return React__default.createElement(
			        'div',
			        {
			          style: styles.color,
			          ref: function ref(container) {
			            return _this2.container = container;
			          },
			          onMouseDown: this.handleMouseDown,
			          onTouchMove: this.handleChange,
			          onTouchStart: this.handleChange
			        },
			        React__default.createElement(
			          'style',
			          null,
			          '\n          .saturation-white {\n            background: -webkit-linear-gradient(to right, #fff, rgba(255,255,255,0));\n            background: linear-gradient(to right, #fff, rgba(255,255,255,0));\n          }\n          .saturation-black {\n            background: -webkit-linear-gradient(to top, #000, rgba(0,0,0,0));\n            background: linear-gradient(to top, #000, rgba(0,0,0,0));\n          }\n        '
			        ),
			        React__default.createElement(
			          'div',
			          { style: styles.white, className: 'saturation-white' },
			          React__default.createElement('div', { style: styles.black, className: 'saturation-black' }),
			          React__default.createElement(
			            'div',
			            { style: styles.pointer },
			            this.props.pointer ? React__default.createElement(this.props.pointer, this.props) : React__default.createElement('div', { style: styles.circle })
			          )
			        )
			      );
			    }
			  }]);

			  return Saturation;
			}(PureComponent || Component);

			/**
			 * A specialized version of `_.forEach` for arrays without support for
			 * iteratee shorthands.
			 *
			 * @private
			 * @param {Array} [array] The array to iterate over.
			 * @param {Function} iteratee The function invoked per iteration.
			 * @returns {Array} Returns `array`.
			 */
			function arrayEach(array, iteratee) {
			  var index = -1,
			      length = array == null ? 0 : array.length;

			  while (++index < length) {
			    if (iteratee(array[index], index, array) === false) {
			      break;
			    }
			  }
			  return array;
			}

			/* Built-in method references for those with the same name as other `lodash` methods. */
			var nativeKeys = overArg(Object.keys, Object);

			var nativeKeys$1 = nativeKeys;

			/** Used for built-in method references. */
			var objectProto$3 = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

			/**
			 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of property names.
			 */
			function baseKeys(object) {
			  if (!isPrototype(object)) {
			    return nativeKeys$1(object);
			  }
			  var result = [];
			  for (var key in Object(object)) {
			    if (hasOwnProperty$2.call(object, key) && key != 'constructor') {
			      result.push(key);
			    }
			  }
			  return result;
			}

			/**
			 * Creates an array of the own enumerable property names of `object`.
			 *
			 * **Note:** Non-object values are coerced to objects. See the
			 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
			 * for more details.
			 *
			 * @static
			 * @since 0.1.0
			 * @memberOf _
			 * @category Object
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of property names.
			 * @example
			 *
			 * function Foo() {
			 *   this.a = 1;
			 *   this.b = 2;
			 * }
			 *
			 * Foo.prototype.c = 3;
			 *
			 * _.keys(new Foo);
			 * // => ['a', 'b'] (iteration order is not guaranteed)
			 *
			 * _.keys('hi');
			 * // => ['0', '1']
			 */
			function keys(object) {
			  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
			}

			/**
			 * The base implementation of `_.forOwn` without support for iteratee shorthands.
			 *
			 * @private
			 * @param {Object} object The object to iterate over.
			 * @param {Function} iteratee The function invoked per iteration.
			 * @returns {Object} Returns `object`.
			 */
			function baseForOwn(object, iteratee) {
			  return object && baseFor$1(object, iteratee, keys);
			}

			/**
			 * Creates a `baseEach` or `baseEachRight` function.
			 *
			 * @private
			 * @param {Function} eachFunc The function to iterate over a collection.
			 * @param {boolean} [fromRight] Specify iterating from right to left.
			 * @returns {Function} Returns the new base function.
			 */
			function createBaseEach(eachFunc, fromRight) {
			  return function(collection, iteratee) {
			    if (collection == null) {
			      return collection;
			    }
			    if (!isArrayLike(collection)) {
			      return eachFunc(collection, iteratee);
			    }
			    var length = collection.length,
			        index = fromRight ? length : -1,
			        iterable = Object(collection);

			    while ((fromRight ? index-- : ++index < length)) {
			      if (iteratee(iterable[index], index, iterable) === false) {
			        break;
			      }
			    }
			    return collection;
			  };
			}

			/**
			 * The base implementation of `_.forEach` without support for iteratee shorthands.
			 *
			 * @private
			 * @param {Array|Object} collection The collection to iterate over.
			 * @param {Function} iteratee The function invoked per iteration.
			 * @returns {Array|Object} Returns `collection`.
			 */
			var baseEach = createBaseEach(baseForOwn);

			var baseEach$1 = baseEach;

			/**
			 * Casts `value` to `identity` if it's not a function.
			 *
			 * @private
			 * @param {*} value The value to inspect.
			 * @returns {Function} Returns cast function.
			 */
			function castFunction(value) {
			  return typeof value == 'function' ? value : identity;
			}

			/**
			 * Iterates over elements of `collection` and invokes `iteratee` for each element.
			 * The iteratee is invoked with three arguments: (value, index|key, collection).
			 * Iteratee functions may exit iteration early by explicitly returning `false`.
			 *
			 * **Note:** As with other "Collections" methods, objects with a "length"
			 * property are iterated like arrays. To avoid this behavior use `_.forIn`
			 * or `_.forOwn` for object iteration.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @alias each
			 * @category Collection
			 * @param {Array|Object} collection The collection to iterate over.
			 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
			 * @returns {Array|Object} Returns `collection`.
			 * @see _.forEachRight
			 * @example
			 *
			 * _.forEach([1, 2], function(value) {
			 *   console.log(value);
			 * });
			 * // => Logs `1` then `2`.
			 *
			 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
			 *   console.log(key);
			 * });
			 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
			 */
			function forEach(collection, iteratee) {
			  var func = isArray$1(collection) ? arrayEach : baseEach$1;
			  return func(collection, castFunction(iteratee));
			}

			var tinycolor$1 = {exports: {}};

			(function (module) {
			// TinyColor v1.4.2
			// https://github.com/bgrins/TinyColor
			// Brian Grinstead, MIT License

			(function(Math) {

			var trimLeft = /^\s+/,
			    trimRight = /\s+$/,
			    tinyCounter = 0,
			    mathRound = Math.round,
			    mathMin = Math.min,
			    mathMax = Math.max,
			    mathRandom = Math.random;

			function tinycolor (color, opts) {

			    color = (color) ? color : '';
			    opts = opts || { };

			    // If input is already a tinycolor, return itself
			    if (color instanceof tinycolor) {
			       return color;
			    }
			    // If we are called as a function, call using new instead
			    if (!(this instanceof tinycolor)) {
			        return new tinycolor(color, opts);
			    }

			    var rgb = inputToRGB(color);
			    this._originalInput = color,
			    this._r = rgb.r,
			    this._g = rgb.g,
			    this._b = rgb.b,
			    this._a = rgb.a,
			    this._roundA = mathRound(100*this._a) / 100,
			    this._format = opts.format || rgb.format;
			    this._gradientType = opts.gradientType;

			    // Don't let the range of [0,255] come back in [0,1].
			    // Potentially lose a little bit of precision here, but will fix issues where
			    // .5 gets interpreted as half of the total, instead of half of 1
			    // If it was supposed to be 128, this was already taken care of by `inputToRgb`
			    if (this._r < 1) { this._r = mathRound(this._r); }
			    if (this._g < 1) { this._g = mathRound(this._g); }
			    if (this._b < 1) { this._b = mathRound(this._b); }

			    this._ok = rgb.ok;
			    this._tc_id = tinyCounter++;
			}

			tinycolor.prototype = {
			    isDark: function() {
			        return this.getBrightness() < 128;
			    },
			    isLight: function() {
			        return !this.isDark();
			    },
			    isValid: function() {
			        return this._ok;
			    },
			    getOriginalInput: function() {
			      return this._originalInput;
			    },
			    getFormat: function() {
			        return this._format;
			    },
			    getAlpha: function() {
			        return this._a;
			    },
			    getBrightness: function() {
			        //http://www.w3.org/TR/AERT#color-contrast
			        var rgb = this.toRgb();
			        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
			    },
			    getLuminance: function() {
			        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
			        var rgb = this.toRgb();
			        var RsRGB, GsRGB, BsRGB, R, G, B;
			        RsRGB = rgb.r/255;
			        GsRGB = rgb.g/255;
			        BsRGB = rgb.b/255;

			        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}
			        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}
			        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}
			        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);
			    },
			    setAlpha: function(value) {
			        this._a = boundAlpha(value);
			        this._roundA = mathRound(100*this._a) / 100;
			        return this;
			    },
			    toHsv: function() {
			        var hsv = rgbToHsv(this._r, this._g, this._b);
			        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
			    },
			    toHsvString: function() {
			        var hsv = rgbToHsv(this._r, this._g, this._b);
			        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
			        return (this._a == 1) ?
			          "hsv("  + h + ", " + s + "%, " + v + "%)" :
			          "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";
			    },
			    toHsl: function() {
			        var hsl = rgbToHsl(this._r, this._g, this._b);
			        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
			    },
			    toHslString: function() {
			        var hsl = rgbToHsl(this._r, this._g, this._b);
			        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
			        return (this._a == 1) ?
			          "hsl("  + h + ", " + s + "%, " + l + "%)" :
			          "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";
			    },
			    toHex: function(allow3Char) {
			        return rgbToHex(this._r, this._g, this._b, allow3Char);
			    },
			    toHexString: function(allow3Char) {
			        return '#' + this.toHex(allow3Char);
			    },
			    toHex8: function(allow4Char) {
			        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
			    },
			    toHex8String: function(allow4Char) {
			        return '#' + this.toHex8(allow4Char);
			    },
			    toRgb: function() {
			        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
			    },
			    toRgbString: function() {
			        return (this._a == 1) ?
			          "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :
			          "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
			    },
			    toPercentageRgb: function() {
			        return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
			    },
			    toPercentageRgbString: function() {
			        return (this._a == 1) ?
			          "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :
			          "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
			    },
			    toName: function() {
			        if (this._a === 0) {
			            return "transparent";
			        }

			        if (this._a < 1) {
			            return false;
			        }

			        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
			    },
			    toFilter: function(secondColor) {
			        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
			        var secondHex8String = hex8String;
			        var gradientType = this._gradientType ? "GradientType = 1, " : "";

			        if (secondColor) {
			            var s = tinycolor(secondColor);
			            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
			        }

			        return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";
			    },
			    toString: function(format) {
			        var formatSet = !!format;
			        format = format || this._format;

			        var formattedString = false;
			        var hasAlpha = this._a < 1 && this._a >= 0;
			        var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

			        if (needsAlphaFormat) {
			            // Special case for "transparent", all other non-alpha formats
			            // will return rgba when there is transparency.
			            if (format === "name" && this._a === 0) {
			                return this.toName();
			            }
			            return this.toRgbString();
			        }
			        if (format === "rgb") {
			            formattedString = this.toRgbString();
			        }
			        if (format === "prgb") {
			            formattedString = this.toPercentageRgbString();
			        }
			        if (format === "hex" || format === "hex6") {
			            formattedString = this.toHexString();
			        }
			        if (format === "hex3") {
			            formattedString = this.toHexString(true);
			        }
			        if (format === "hex4") {
			            formattedString = this.toHex8String(true);
			        }
			        if (format === "hex8") {
			            formattedString = this.toHex8String();
			        }
			        if (format === "name") {
			            formattedString = this.toName();
			        }
			        if (format === "hsl") {
			            formattedString = this.toHslString();
			        }
			        if (format === "hsv") {
			            formattedString = this.toHsvString();
			        }

			        return formattedString || this.toHexString();
			    },
			    clone: function() {
			        return tinycolor(this.toString());
			    },

			    _applyModification: function(fn, args) {
			        var color = fn.apply(null, [this].concat([].slice.call(args)));
			        this._r = color._r;
			        this._g = color._g;
			        this._b = color._b;
			        this.setAlpha(color._a);
			        return this;
			    },
			    lighten: function() {
			        return this._applyModification(lighten, arguments);
			    },
			    brighten: function() {
			        return this._applyModification(brighten, arguments);
			    },
			    darken: function() {
			        return this._applyModification(darken, arguments);
			    },
			    desaturate: function() {
			        return this._applyModification(desaturate, arguments);
			    },
			    saturate: function() {
			        return this._applyModification(saturate, arguments);
			    },
			    greyscale: function() {
			        return this._applyModification(greyscale, arguments);
			    },
			    spin: function() {
			        return this._applyModification(spin, arguments);
			    },

			    _applyCombination: function(fn, args) {
			        return fn.apply(null, [this].concat([].slice.call(args)));
			    },
			    analogous: function() {
			        return this._applyCombination(analogous, arguments);
			    },
			    complement: function() {
			        return this._applyCombination(complement, arguments);
			    },
			    monochromatic: function() {
			        return this._applyCombination(monochromatic, arguments);
			    },
			    splitcomplement: function() {
			        return this._applyCombination(splitcomplement, arguments);
			    },
			    triad: function() {
			        return this._applyCombination(triad, arguments);
			    },
			    tetrad: function() {
			        return this._applyCombination(tetrad, arguments);
			    }
			};

			// If input is an object, force 1 into "1.0" to handle ratios properly
			// String input requires "1.0" as input, so 1 will be treated as 1
			tinycolor.fromRatio = function(color, opts) {
			    if (typeof color == "object") {
			        var newColor = {};
			        for (var i in color) {
			            if (color.hasOwnProperty(i)) {
			                if (i === "a") {
			                    newColor[i] = color[i];
			                }
			                else {
			                    newColor[i] = convertToPercentage(color[i]);
			                }
			            }
			        }
			        color = newColor;
			    }

			    return tinycolor(color, opts);
			};

			// Given a string or object, convert that input to RGB
			// Possible string inputs:
			//
			//     "red"
			//     "#f00" or "f00"
			//     "#ff0000" or "ff0000"
			//     "#ff000000" or "ff000000"
			//     "rgb 255 0 0" or "rgb (255, 0, 0)"
			//     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
			//     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
			//     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
			//     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
			//     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
			//     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
			//
			function inputToRGB(color) {

			    var rgb = { r: 0, g: 0, b: 0 };
			    var a = 1;
			    var s = null;
			    var v = null;
			    var l = null;
			    var ok = false;
			    var format = false;

			    if (typeof color == "string") {
			        color = stringInputToObject(color);
			    }

			    if (typeof color == "object") {
			        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
			            rgb = rgbToRgb(color.r, color.g, color.b);
			            ok = true;
			            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
			        }
			        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
			            s = convertToPercentage(color.s);
			            v = convertToPercentage(color.v);
			            rgb = hsvToRgb(color.h, s, v);
			            ok = true;
			            format = "hsv";
			        }
			        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
			            s = convertToPercentage(color.s);
			            l = convertToPercentage(color.l);
			            rgb = hslToRgb(color.h, s, l);
			            ok = true;
			            format = "hsl";
			        }

			        if (color.hasOwnProperty("a")) {
			            a = color.a;
			        }
			    }

			    a = boundAlpha(a);

			    return {
			        ok: ok,
			        format: color.format || format,
			        r: mathMin(255, mathMax(rgb.r, 0)),
			        g: mathMin(255, mathMax(rgb.g, 0)),
			        b: mathMin(255, mathMax(rgb.b, 0)),
			        a: a
			    };
			}


			// Conversion Functions
			// --------------------

			// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
			// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

			// `rgbToRgb`
			// Handle bounds / percentage checking to conform to CSS color spec
			// <http://www.w3.org/TR/css3-color/>
			// *Assumes:* r, g, b in [0, 255] or [0, 1]
			// *Returns:* { r, g, b } in [0, 255]
			function rgbToRgb(r, g, b){
			    return {
			        r: bound01(r, 255) * 255,
			        g: bound01(g, 255) * 255,
			        b: bound01(b, 255) * 255
			    };
			}

			// `rgbToHsl`
			// Converts an RGB color value to HSL.
			// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
			// *Returns:* { h, s, l } in [0,1]
			function rgbToHsl(r, g, b) {

			    r = bound01(r, 255);
			    g = bound01(g, 255);
			    b = bound01(b, 255);

			    var max = mathMax(r, g, b), min = mathMin(r, g, b);
			    var h, s, l = (max + min) / 2;

			    if(max == min) {
			        h = s = 0; // achromatic
			    }
			    else {
			        var d = max - min;
			        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
			        switch(max) {
			            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
			            case g: h = (b - r) / d + 2; break;
			            case b: h = (r - g) / d + 4; break;
			        }

			        h /= 6;
			    }

			    return { h: h, s: s, l: l };
			}

			// `hslToRgb`
			// Converts an HSL color value to RGB.
			// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
			// *Returns:* { r, g, b } in the set [0, 255]
			function hslToRgb(h, s, l) {
			    var r, g, b;

			    h = bound01(h, 360);
			    s = bound01(s, 100);
			    l = bound01(l, 100);

			    function hue2rgb(p, q, t) {
			        if(t < 0) t += 1;
			        if(t > 1) t -= 1;
			        if(t < 1/6) return p + (q - p) * 6 * t;
			        if(t < 1/2) return q;
			        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
			        return p;
			    }

			    if(s === 0) {
			        r = g = b = l; // achromatic
			    }
			    else {
			        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
			        var p = 2 * l - q;
			        r = hue2rgb(p, q, h + 1/3);
			        g = hue2rgb(p, q, h);
			        b = hue2rgb(p, q, h - 1/3);
			    }

			    return { r: r * 255, g: g * 255, b: b * 255 };
			}

			// `rgbToHsv`
			// Converts an RGB color value to HSV
			// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
			// *Returns:* { h, s, v } in [0,1]
			function rgbToHsv(r, g, b) {

			    r = bound01(r, 255);
			    g = bound01(g, 255);
			    b = bound01(b, 255);

			    var max = mathMax(r, g, b), min = mathMin(r, g, b);
			    var h, s, v = max;

			    var d = max - min;
			    s = max === 0 ? 0 : d / max;

			    if(max == min) {
			        h = 0; // achromatic
			    }
			    else {
			        switch(max) {
			            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
			            case g: h = (b - r) / d + 2; break;
			            case b: h = (r - g) / d + 4; break;
			        }
			        h /= 6;
			    }
			    return { h: h, s: s, v: v };
			}

			// `hsvToRgb`
			// Converts an HSV color value to RGB.
			// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
			// *Returns:* { r, g, b } in the set [0, 255]
			 function hsvToRgb(h, s, v) {

			    h = bound01(h, 360) * 6;
			    s = bound01(s, 100);
			    v = bound01(v, 100);

			    var i = Math.floor(h),
			        f = h - i,
			        p = v * (1 - s),
			        q = v * (1 - f * s),
			        t = v * (1 - (1 - f) * s),
			        mod = i % 6,
			        r = [v, q, p, p, t, v][mod],
			        g = [t, v, v, q, p, p][mod],
			        b = [p, p, t, v, v, q][mod];

			    return { r: r * 255, g: g * 255, b: b * 255 };
			}

			// `rgbToHex`
			// Converts an RGB color to hex
			// Assumes r, g, and b are contained in the set [0, 255]
			// Returns a 3 or 6 character hex
			function rgbToHex(r, g, b, allow3Char) {

			    var hex = [
			        pad2(mathRound(r).toString(16)),
			        pad2(mathRound(g).toString(16)),
			        pad2(mathRound(b).toString(16))
			    ];

			    // Return a 3 character hex if possible
			    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
			        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
			    }

			    return hex.join("");
			}

			// `rgbaToHex`
			// Converts an RGBA color plus alpha transparency to hex
			// Assumes r, g, b are contained in the set [0, 255] and
			// a in [0, 1]. Returns a 4 or 8 character rgba hex
			function rgbaToHex(r, g, b, a, allow4Char) {

			    var hex = [
			        pad2(mathRound(r).toString(16)),
			        pad2(mathRound(g).toString(16)),
			        pad2(mathRound(b).toString(16)),
			        pad2(convertDecimalToHex(a))
			    ];

			    // Return a 4 character hex if possible
			    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
			        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
			    }

			    return hex.join("");
			}

			// `rgbaToArgbHex`
			// Converts an RGBA color to an ARGB Hex8 string
			// Rarely used, but required for "toFilter()"
			function rgbaToArgbHex(r, g, b, a) {

			    var hex = [
			        pad2(convertDecimalToHex(a)),
			        pad2(mathRound(r).toString(16)),
			        pad2(mathRound(g).toString(16)),
			        pad2(mathRound(b).toString(16))
			    ];

			    return hex.join("");
			}

			// `equals`
			// Can be called with any tinycolor input
			tinycolor.equals = function (color1, color2) {
			    if (!color1 || !color2) { return false; }
			    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
			};

			tinycolor.random = function() {
			    return tinycolor.fromRatio({
			        r: mathRandom(),
			        g: mathRandom(),
			        b: mathRandom()
			    });
			};


			// Modification Functions
			// ----------------------
			// Thanks to less.js for some of the basics here
			// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

			function desaturate(color, amount) {
			    amount = (amount === 0) ? 0 : (amount || 10);
			    var hsl = tinycolor(color).toHsl();
			    hsl.s -= amount / 100;
			    hsl.s = clamp01(hsl.s);
			    return tinycolor(hsl);
			}

			function saturate(color, amount) {
			    amount = (amount === 0) ? 0 : (amount || 10);
			    var hsl = tinycolor(color).toHsl();
			    hsl.s += amount / 100;
			    hsl.s = clamp01(hsl.s);
			    return tinycolor(hsl);
			}

			function greyscale(color) {
			    return tinycolor(color).desaturate(100);
			}

			function lighten (color, amount) {
			    amount = (amount === 0) ? 0 : (amount || 10);
			    var hsl = tinycolor(color).toHsl();
			    hsl.l += amount / 100;
			    hsl.l = clamp01(hsl.l);
			    return tinycolor(hsl);
			}

			function brighten(color, amount) {
			    amount = (amount === 0) ? 0 : (amount || 10);
			    var rgb = tinycolor(color).toRgb();
			    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));
			    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));
			    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));
			    return tinycolor(rgb);
			}

			function darken (color, amount) {
			    amount = (amount === 0) ? 0 : (amount || 10);
			    var hsl = tinycolor(color).toHsl();
			    hsl.l -= amount / 100;
			    hsl.l = clamp01(hsl.l);
			    return tinycolor(hsl);
			}

			// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
			// Values outside of this range will be wrapped into this range.
			function spin(color, amount) {
			    var hsl = tinycolor(color).toHsl();
			    var hue = (hsl.h + amount) % 360;
			    hsl.h = hue < 0 ? 360 + hue : hue;
			    return tinycolor(hsl);
			}

			// Combination Functions
			// ---------------------
			// Thanks to jQuery xColor for some of the ideas behind these
			// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

			function complement(color) {
			    var hsl = tinycolor(color).toHsl();
			    hsl.h = (hsl.h + 180) % 360;
			    return tinycolor(hsl);
			}

			function triad(color) {
			    var hsl = tinycolor(color).toHsl();
			    var h = hsl.h;
			    return [
			        tinycolor(color),
			        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
			        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
			    ];
			}

			function tetrad(color) {
			    var hsl = tinycolor(color).toHsl();
			    var h = hsl.h;
			    return [
			        tinycolor(color),
			        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
			        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
			        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
			    ];
			}

			function splitcomplement(color) {
			    var hsl = tinycolor(color).toHsl();
			    var h = hsl.h;
			    return [
			        tinycolor(color),
			        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
			        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})
			    ];
			}

			function analogous(color, results, slices) {
			    results = results || 6;
			    slices = slices || 30;

			    var hsl = tinycolor(color).toHsl();
			    var part = 360 / slices;
			    var ret = [tinycolor(color)];

			    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {
			        hsl.h = (hsl.h + part) % 360;
			        ret.push(tinycolor(hsl));
			    }
			    return ret;
			}

			function monochromatic(color, results) {
			    results = results || 6;
			    var hsv = tinycolor(color).toHsv();
			    var h = hsv.h, s = hsv.s, v = hsv.v;
			    var ret = [];
			    var modification = 1 / results;

			    while (results--) {
			        ret.push(tinycolor({ h: h, s: s, v: v}));
			        v = (v + modification) % 1;
			    }

			    return ret;
			}

			// Utility Functions
			// ---------------------

			tinycolor.mix = function(color1, color2, amount) {
			    amount = (amount === 0) ? 0 : (amount || 50);

			    var rgb1 = tinycolor(color1).toRgb();
			    var rgb2 = tinycolor(color2).toRgb();

			    var p = amount / 100;

			    var rgba = {
			        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,
			        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,
			        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,
			        a: ((rgb2.a - rgb1.a) * p) + rgb1.a
			    };

			    return tinycolor(rgba);
			};


			// Readability Functions
			// ---------------------
			// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

			// `contrast`
			// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
			tinycolor.readability = function(color1, color2) {
			    var c1 = tinycolor(color1);
			    var c2 = tinycolor(color2);
			    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);
			};

			// `isReadable`
			// Ensure that foreground and background color combinations meet WCAG2 guidelines.
			// The third argument is an optional Object.
			//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
			//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
			// If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

			// *Example*
			//    tinycolor.isReadable("#000", "#111") => false
			//    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
			tinycolor.isReadable = function(color1, color2, wcag2) {
			    var readability = tinycolor.readability(color1, color2);
			    var wcag2Parms, out;

			    out = false;

			    wcag2Parms = validateWCAG2Parms(wcag2);
			    switch (wcag2Parms.level + wcag2Parms.size) {
			        case "AAsmall":
			        case "AAAlarge":
			            out = readability >= 4.5;
			            break;
			        case "AAlarge":
			            out = readability >= 3;
			            break;
			        case "AAAsmall":
			            out = readability >= 7;
			            break;
			    }
			    return out;

			};

			// `mostReadable`
			// Given a base color and a list of possible foreground or background
			// colors for that base, returns the most readable color.
			// Optionally returns Black or White if the most readable color is unreadable.
			// *Example*
			//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
			//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
			//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
			//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
			tinycolor.mostReadable = function(baseColor, colorList, args) {
			    var bestColor = null;
			    var bestScore = 0;
			    var readability;
			    var includeFallbackColors, level, size ;
			    args = args || {};
			    includeFallbackColors = args.includeFallbackColors ;
			    level = args.level;
			    size = args.size;

			    for (var i= 0; i < colorList.length ; i++) {
			        readability = tinycolor.readability(baseColor, colorList[i]);
			        if (readability > bestScore) {
			            bestScore = readability;
			            bestColor = tinycolor(colorList[i]);
			        }
			    }

			    if (tinycolor.isReadable(baseColor, bestColor, {"level":level,"size":size}) || !includeFallbackColors) {
			        return bestColor;
			    }
			    else {
			        args.includeFallbackColors=false;
			        return tinycolor.mostReadable(baseColor,["#fff", "#000"],args);
			    }
			};


			// Big List of Colors
			// ------------------
			// <http://www.w3.org/TR/css3-color/#svg-color>
			var names = tinycolor.names = {
			    aliceblue: "f0f8ff",
			    antiquewhite: "faebd7",
			    aqua: "0ff",
			    aquamarine: "7fffd4",
			    azure: "f0ffff",
			    beige: "f5f5dc",
			    bisque: "ffe4c4",
			    black: "000",
			    blanchedalmond: "ffebcd",
			    blue: "00f",
			    blueviolet: "8a2be2",
			    brown: "a52a2a",
			    burlywood: "deb887",
			    burntsienna: "ea7e5d",
			    cadetblue: "5f9ea0",
			    chartreuse: "7fff00",
			    chocolate: "d2691e",
			    coral: "ff7f50",
			    cornflowerblue: "6495ed",
			    cornsilk: "fff8dc",
			    crimson: "dc143c",
			    cyan: "0ff",
			    darkblue: "00008b",
			    darkcyan: "008b8b",
			    darkgoldenrod: "b8860b",
			    darkgray: "a9a9a9",
			    darkgreen: "006400",
			    darkgrey: "a9a9a9",
			    darkkhaki: "bdb76b",
			    darkmagenta: "8b008b",
			    darkolivegreen: "556b2f",
			    darkorange: "ff8c00",
			    darkorchid: "9932cc",
			    darkred: "8b0000",
			    darksalmon: "e9967a",
			    darkseagreen: "8fbc8f",
			    darkslateblue: "483d8b",
			    darkslategray: "2f4f4f",
			    darkslategrey: "2f4f4f",
			    darkturquoise: "00ced1",
			    darkviolet: "9400d3",
			    deeppink: "ff1493",
			    deepskyblue: "00bfff",
			    dimgray: "696969",
			    dimgrey: "696969",
			    dodgerblue: "1e90ff",
			    firebrick: "b22222",
			    floralwhite: "fffaf0",
			    forestgreen: "228b22",
			    fuchsia: "f0f",
			    gainsboro: "dcdcdc",
			    ghostwhite: "f8f8ff",
			    gold: "ffd700",
			    goldenrod: "daa520",
			    gray: "808080",
			    green: "008000",
			    greenyellow: "adff2f",
			    grey: "808080",
			    honeydew: "f0fff0",
			    hotpink: "ff69b4",
			    indianred: "cd5c5c",
			    indigo: "4b0082",
			    ivory: "fffff0",
			    khaki: "f0e68c",
			    lavender: "e6e6fa",
			    lavenderblush: "fff0f5",
			    lawngreen: "7cfc00",
			    lemonchiffon: "fffacd",
			    lightblue: "add8e6",
			    lightcoral: "f08080",
			    lightcyan: "e0ffff",
			    lightgoldenrodyellow: "fafad2",
			    lightgray: "d3d3d3",
			    lightgreen: "90ee90",
			    lightgrey: "d3d3d3",
			    lightpink: "ffb6c1",
			    lightsalmon: "ffa07a",
			    lightseagreen: "20b2aa",
			    lightskyblue: "87cefa",
			    lightslategray: "789",
			    lightslategrey: "789",
			    lightsteelblue: "b0c4de",
			    lightyellow: "ffffe0",
			    lime: "0f0",
			    limegreen: "32cd32",
			    linen: "faf0e6",
			    magenta: "f0f",
			    maroon: "800000",
			    mediumaquamarine: "66cdaa",
			    mediumblue: "0000cd",
			    mediumorchid: "ba55d3",
			    mediumpurple: "9370db",
			    mediumseagreen: "3cb371",
			    mediumslateblue: "7b68ee",
			    mediumspringgreen: "00fa9a",
			    mediumturquoise: "48d1cc",
			    mediumvioletred: "c71585",
			    midnightblue: "191970",
			    mintcream: "f5fffa",
			    mistyrose: "ffe4e1",
			    moccasin: "ffe4b5",
			    navajowhite: "ffdead",
			    navy: "000080",
			    oldlace: "fdf5e6",
			    olive: "808000",
			    olivedrab: "6b8e23",
			    orange: "ffa500",
			    orangered: "ff4500",
			    orchid: "da70d6",
			    palegoldenrod: "eee8aa",
			    palegreen: "98fb98",
			    paleturquoise: "afeeee",
			    palevioletred: "db7093",
			    papayawhip: "ffefd5",
			    peachpuff: "ffdab9",
			    peru: "cd853f",
			    pink: "ffc0cb",
			    plum: "dda0dd",
			    powderblue: "b0e0e6",
			    purple: "800080",
			    rebeccapurple: "663399",
			    red: "f00",
			    rosybrown: "bc8f8f",
			    royalblue: "4169e1",
			    saddlebrown: "8b4513",
			    salmon: "fa8072",
			    sandybrown: "f4a460",
			    seagreen: "2e8b57",
			    seashell: "fff5ee",
			    sienna: "a0522d",
			    silver: "c0c0c0",
			    skyblue: "87ceeb",
			    slateblue: "6a5acd",
			    slategray: "708090",
			    slategrey: "708090",
			    snow: "fffafa",
			    springgreen: "00ff7f",
			    steelblue: "4682b4",
			    tan: "d2b48c",
			    teal: "008080",
			    thistle: "d8bfd8",
			    tomato: "ff6347",
			    turquoise: "40e0d0",
			    violet: "ee82ee",
			    wheat: "f5deb3",
			    white: "fff",
			    whitesmoke: "f5f5f5",
			    yellow: "ff0",
			    yellowgreen: "9acd32"
			};

			// Make it easy to access colors via `hexNames[hex]`
			var hexNames = tinycolor.hexNames = flip(names);


			// Utilities
			// ---------

			// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
			function flip(o) {
			    var flipped = { };
			    for (var i in o) {
			        if (o.hasOwnProperty(i)) {
			            flipped[o[i]] = i;
			        }
			    }
			    return flipped;
			}

			// Return a valid alpha value [0,1] with all invalid values being set to 1
			function boundAlpha(a) {
			    a = parseFloat(a);

			    if (isNaN(a) || a < 0 || a > 1) {
			        a = 1;
			    }

			    return a;
			}

			// Take input from [0, n] and return it as [0, 1]
			function bound01(n, max) {
			    if (isOnePointZero(n)) { n = "100%"; }

			    var processPercent = isPercentage(n);
			    n = mathMin(max, mathMax(0, parseFloat(n)));

			    // Automatically convert percentage into number
			    if (processPercent) {
			        n = parseInt(n * max, 10) / 100;
			    }

			    // Handle floating point rounding errors
			    if ((Math.abs(n - max) < 0.000001)) {
			        return 1;
			    }

			    // Convert into [0, 1] range if it isn't already
			    return (n % max) / parseFloat(max);
			}

			// Force a number between 0 and 1
			function clamp01(val) {
			    return mathMin(1, mathMax(0, val));
			}

			// Parse a base-16 hex value into a base-10 integer
			function parseIntFromHex(val) {
			    return parseInt(val, 16);
			}

			// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
			// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
			function isOnePointZero(n) {
			    return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
			}

			// Check to see if string passed in is a percentage
			function isPercentage(n) {
			    return typeof n === "string" && n.indexOf('%') != -1;
			}

			// Force a hex value to have 2 characters
			function pad2(c) {
			    return c.length == 1 ? '0' + c : '' + c;
			}

			// Replace a decimal with it's percentage value
			function convertToPercentage(n) {
			    if (n <= 1) {
			        n = (n * 100) + "%";
			    }

			    return n;
			}

			// Converts a decimal to a hex value
			function convertDecimalToHex(d) {
			    return Math.round(parseFloat(d) * 255).toString(16);
			}
			// Converts a hex value to a decimal
			function convertHexToDecimal(h) {
			    return (parseIntFromHex(h) / 255);
			}

			var matchers = (function() {

			    // <http://www.w3.org/TR/css3-values/#integers>
			    var CSS_INTEGER = "[-\\+]?\\d+%?";

			    // <http://www.w3.org/TR/css3-values/#number-value>
			    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

			    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
			    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

			    // Actual matching.
			    // Parentheses and commas are optional, but not required.
			    // Whitespace can take the place of commas or opening paren
			    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
			    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";

			    return {
			        CSS_UNIT: new RegExp(CSS_UNIT),
			        rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
			        rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
			        hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
			        hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
			        hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
			        hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
			        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
			        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
			        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
			        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
			    };
			})();

			// `isValidCSSUnit`
			// Take in a single string / number and check to see if it looks like a CSS unit
			// (see `matchers` above for definition).
			function isValidCSSUnit(color) {
			    return !!matchers.CSS_UNIT.exec(color);
			}

			// `stringInputToObject`
			// Permissive string parsing.  Take in a number of formats, and output an object
			// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
			function stringInputToObject(color) {

			    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();
			    var named = false;
			    if (names[color]) {
			        color = names[color];
			        named = true;
			    }
			    else if (color == 'transparent') {
			        return { r: 0, g: 0, b: 0, a: 0, format: "name" };
			    }

			    // Try to match string input using regular expressions.
			    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
			    // Just return an object and let the conversion functions handle that.
			    // This way the result will be the same whether the tinycolor is initialized with string or object.
			    var match;
			    if ((match = matchers.rgb.exec(color))) {
			        return { r: match[1], g: match[2], b: match[3] };
			    }
			    if ((match = matchers.rgba.exec(color))) {
			        return { r: match[1], g: match[2], b: match[3], a: match[4] };
			    }
			    if ((match = matchers.hsl.exec(color))) {
			        return { h: match[1], s: match[2], l: match[3] };
			    }
			    if ((match = matchers.hsla.exec(color))) {
			        return { h: match[1], s: match[2], l: match[3], a: match[4] };
			    }
			    if ((match = matchers.hsv.exec(color))) {
			        return { h: match[1], s: match[2], v: match[3] };
			    }
			    if ((match = matchers.hsva.exec(color))) {
			        return { h: match[1], s: match[2], v: match[3], a: match[4] };
			    }
			    if ((match = matchers.hex8.exec(color))) {
			        return {
			            r: parseIntFromHex(match[1]),
			            g: parseIntFromHex(match[2]),
			            b: parseIntFromHex(match[3]),
			            a: convertHexToDecimal(match[4]),
			            format: named ? "name" : "hex8"
			        };
			    }
			    if ((match = matchers.hex6.exec(color))) {
			        return {
			            r: parseIntFromHex(match[1]),
			            g: parseIntFromHex(match[2]),
			            b: parseIntFromHex(match[3]),
			            format: named ? "name" : "hex"
			        };
			    }
			    if ((match = matchers.hex4.exec(color))) {
			        return {
			            r: parseIntFromHex(match[1] + '' + match[1]),
			            g: parseIntFromHex(match[2] + '' + match[2]),
			            b: parseIntFromHex(match[3] + '' + match[3]),
			            a: convertHexToDecimal(match[4] + '' + match[4]),
			            format: named ? "name" : "hex8"
			        };
			    }
			    if ((match = matchers.hex3.exec(color))) {
			        return {
			            r: parseIntFromHex(match[1] + '' + match[1]),
			            g: parseIntFromHex(match[2] + '' + match[2]),
			            b: parseIntFromHex(match[3] + '' + match[3]),
			            format: named ? "name" : "hex"
			        };
			    }

			    return false;
			}

			function validateWCAG2Parms(parms) {
			    // return valid WCAG2 parms for isReadable.
			    // If input parms are invalid, return {"level":"AA", "size":"small"}
			    var level, size;
			    parms = parms || {"level":"AA", "size":"small"};
			    level = (parms.level || "AA").toUpperCase();
			    size = (parms.size || "small").toLowerCase();
			    if (level !== "AA" && level !== "AAA") {
			        level = "AA";
			    }
			    if (size !== "small" && size !== "large") {
			        size = "small";
			    }
			    return {"level":level, "size":size};
			}

			// Node: Export function
			if (module.exports) {
			    module.exports = tinycolor;
			}
			// AMD/requirejs: Define the module
			else {
			    window.tinycolor = tinycolor;
			}

			})(Math);
			}(tinycolor$1));

			var tinycolor = tinycolor$1.exports;

			var simpleCheckForValidColor = function simpleCheckForValidColor(data) {
			  var keysToCheck = ['r', 'g', 'b', 'a', 'h', 's', 'l', 'v'];
			  var checked = 0;
			  var passed = 0;
			  forEach(keysToCheck, function (letter) {
			    if (data[letter]) {
			      checked += 1;
			      if (!isNaN(data[letter])) {
			        passed += 1;
			      }
			      if (letter === 's' || letter === 'l') {
			        var percentPatt = /^\d+%$/;
			        if (percentPatt.test(data[letter])) {
			          passed += 1;
			        }
			      }
			    }
			  });
			  return checked === passed ? data : false;
			};

			var toState = function toState(data, oldHue) {
			  var color = data.hex ? tinycolor(data.hex) : tinycolor(data);
			  var hsl = color.toHsl();
			  var hsv = color.toHsv();
			  var rgb = color.toRgb();
			  var hex = color.toHex();
			  if (hsl.s === 0) {
			    hsl.h = oldHue || 0;
			    hsv.h = oldHue || 0;
			  }
			  var transparent = hex === '000000' && rgb.a === 0;

			  return {
			    hsl: hsl,
			    hex: transparent ? 'transparent' : '#' + hex,
			    rgb: rgb,
			    hsv: hsv,
			    oldHue: data.h || oldHue || hsl.h,
			    source: data.source
			  };
			};

			var isValidHex = function isValidHex(hex) {
			  if (hex === 'transparent') {
			    return true;
			  }
			  // disable hex4 and hex8
			  var lh = String(hex).charAt(0) === '#' ? 1 : 0;
			  return hex.length !== 4 + lh && hex.length < 7 + lh && tinycolor(hex).isValid();
			};

			var getContrastingColor = function getContrastingColor(data) {
			  if (!data) {
			    return '#fff';
			  }
			  var col = toState(data);
			  if (col.hex === 'transparent') {
			    return 'rgba(0,0,0,0.4)';
			  }
			  var yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1000;
			  return yiq >= 128 ? '#000' : '#fff';
			};

			var isvalidColorString = function isvalidColorString(string, type) {
			  var stringWithoutDegree = string.replace('°', '');
			  return tinycolor(type + ' (' + stringWithoutDegree + ')')._ok;
			};

			var _extends$8 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

			var _createClass$3 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

			function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

			function _possibleConstructorReturn$3(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

			function _inherits$3(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

			var ColorWrap = function ColorWrap(Picker) {
			  var ColorPicker = function (_ref) {
			    _inherits$3(ColorPicker, _ref);

			    function ColorPicker(props) {
			      _classCallCheck$3(this, ColorPicker);

			      var _this = _possibleConstructorReturn$3(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this));

			      _this.handleChange = function (data, event) {
			        var isValidColor = simpleCheckForValidColor(data);
			        if (isValidColor) {
			          var colors = toState(data, data.h || _this.state.oldHue);
			          _this.setState(colors);
			          _this.props.onChangeComplete && _this.debounce(_this.props.onChangeComplete, colors, event);
			          _this.props.onChange && _this.props.onChange(colors, event);
			        }
			      };

			      _this.handleSwatchHover = function (data, event) {
			        var isValidColor = simpleCheckForValidColor(data);
			        if (isValidColor) {
			          var colors = toState(data, data.h || _this.state.oldHue);
			          _this.props.onSwatchHover && _this.props.onSwatchHover(colors, event);
			        }
			      };

			      _this.state = _extends$8({}, toState(props.color, 0));

			      _this.debounce = debounce(function (fn, data, event) {
			        fn(data, event);
			      }, 100);
			      return _this;
			    }

			    _createClass$3(ColorPicker, [{
			      key: 'render',
			      value: function render() {
			        var optionalEvents = {};
			        if (this.props.onSwatchHover) {
			          optionalEvents.onSwatchHover = this.handleSwatchHover;
			        }

			        return React__default.createElement(Picker, _extends$8({}, this.props, this.state, {
			          onChange: this.handleChange
			        }, optionalEvents));
			      }
			    }], [{
			      key: 'getDerivedStateFromProps',
			      value: function getDerivedStateFromProps(nextProps, state) {
			        return _extends$8({}, toState(nextProps.color, state.oldHue));
			      }
			    }]);

			    return ColorPicker;
			  }(PureComponent || Component);

			  ColorPicker.propTypes = _extends$8({}, Picker.propTypes);

			  ColorPicker.defaultProps = _extends$8({}, Picker.defaultProps, {
			    color: {
			      h: 250,
			      s: 0.50,
			      l: 0.20,
			      a: 1
			    }
			  });

			  return ColorPicker;
			};

			var _extends$7 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

			var _createClass$2 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

			function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

			function _possibleConstructorReturn$2(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

			function _inherits$2(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

			var handleFocus = function handleFocus(Component) {
			  var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'span';
			  return function (_React$Component) {
			    _inherits$2(Focus, _React$Component);

			    function Focus() {
			      var _ref;

			      var _temp, _this, _ret;

			      _classCallCheck$2(this, Focus);

			      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			        args[_key] = arguments[_key];
			      }

			      return _ret = (_temp = (_this = _possibleConstructorReturn$2(this, (_ref = Focus.__proto__ || Object.getPrototypeOf(Focus)).call.apply(_ref, [this].concat(args))), _this), _this.state = { focus: false }, _this.handleFocus = function () {
			        return _this.setState({ focus: true });
			      }, _this.handleBlur = function () {
			        return _this.setState({ focus: false });
			      }, _temp), _possibleConstructorReturn$2(_this, _ret);
			    }

			    _createClass$2(Focus, [{
			      key: 'render',
			      value: function render() {
			        return React__default.createElement(
			          Span,
			          { onFocus: this.handleFocus, onBlur: this.handleBlur },
			          React__default.createElement(Component, _extends$7({}, this.props, this.state))
			        );
			      }
			    }]);

			    return Focus;
			  }(React__default.Component);
			};

			var _extends$6 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

			var ENTER = 13;

			var Swatch = function Swatch(_ref) {
			  var color = _ref.color,
			      style = _ref.style,
			      _ref$onClick = _ref.onClick,
			      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,
			      onHover = _ref.onHover,
			      _ref$title = _ref.title,
			      title = _ref$title === undefined ? color : _ref$title,
			      children = _ref.children,
			      focus = _ref.focus,
			      _ref$focusStyle = _ref.focusStyle,
			      focusStyle = _ref$focusStyle === undefined ? {} : _ref$focusStyle;

			  var transparent = color === 'transparent';
			  var styles = _default$2({
			    default: {
			      swatch: _extends$6({
			        background: color,
			        height: '100%',
			        width: '100%',
			        cursor: 'pointer',
			        position: 'relative',
			        outline: 'none'
			      }, style, focus ? focusStyle : {})
			    }
			  });

			  var handleClick = function handleClick(e) {
			    return onClick(color, e);
			  };
			  var handleKeyDown = function handleKeyDown(e) {
			    return e.keyCode === ENTER && onClick(color, e);
			  };
			  var handleHover = function handleHover(e) {
			    return onHover(color, e);
			  };

			  var optionalEvents = {};
			  if (onHover) {
			    optionalEvents.onMouseOver = handleHover;
			  }

			  return React__default.createElement(
			    'div',
			    _extends$6({
			      style: styles.swatch,
			      onClick: handleClick,
			      title: title,
			      tabIndex: 0,
			      onKeyDown: handleKeyDown
			    }, optionalEvents),
			    children,
			    transparent && React__default.createElement(Checkboard, {
			      borderRadius: styles.swatch.borderRadius,
			      boxShadow: 'inset 0 0 0 1px rgba(0,0,0,0.1)'
			    })
			  );
			};

			var Swatch$1 = handleFocus(Swatch);

			var AlphaPointer = function AlphaPointer(_ref) {
			  var direction = _ref.direction;

			  var styles = _default$2({
			    'default': {
			      picker: {
			        width: '18px',
			        height: '18px',
			        borderRadius: '50%',
			        transform: 'translate(-9px, -1px)',
			        backgroundColor: 'rgb(248, 248, 248)',
			        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'
			      }
			    },
			    'vertical': {
			      picker: {
			        transform: 'translate(-3px, -9px)'
			      }
			    }
			  }, { vertical: direction === 'vertical' });

			  return React__default.createElement('div', { style: styles.picker });
			};

			var _extends$5 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

			var AlphaPicker = function AlphaPicker(_ref) {
			  var rgb = _ref.rgb,
			      hsl = _ref.hsl,
			      width = _ref.width,
			      height = _ref.height,
			      onChange = _ref.onChange,
			      direction = _ref.direction,
			      style = _ref.style,
			      renderers = _ref.renderers,
			      pointer = _ref.pointer,
			      _ref$className = _ref.className,
			      className = _ref$className === undefined ? '' : _ref$className;

			  var styles = _default$2({
			    'default': {
			      picker: {
			        position: 'relative',
			        width: width,
			        height: height
			      },
			      alpha: {
			        radius: '2px',
			        style: style
			      }
			    }
			  });

			  return React__default.createElement(
			    'div',
			    { style: styles.picker, className: 'alpha-picker ' + className },
			    React__default.createElement(Alpha, _extends$5({}, styles.alpha, {
			      rgb: rgb,
			      hsl: hsl,
			      pointer: pointer,
			      renderers: renderers,
			      onChange: onChange,
			      direction: direction
			    }))
			  );
			};

			AlphaPicker.defaultProps = {
			  width: '316px',
			  height: '16px',
			  direction: 'horizontal',
			  pointer: AlphaPointer
			};

			ColorWrap(AlphaPicker);

			/**
			 * A specialized version of `_.map` for arrays without support for iteratee
			 * shorthands.
			 *
			 * @private
			 * @param {Array} [array] The array to iterate over.
			 * @param {Function} iteratee The function invoked per iteration.
			 * @returns {Array} Returns the new mapped array.
			 */
			function arrayMap(array, iteratee) {
			  var index = -1,
			      length = array == null ? 0 : array.length,
			      result = Array(length);

			  while (++index < length) {
			    result[index] = iteratee(array[index], index, array);
			  }
			  return result;
			}

			/** Used to stand-in for `undefined` hash values. */
			var HASH_UNDEFINED = '__lodash_hash_undefined__';

			/**
			 * Adds `value` to the array cache.
			 *
			 * @private
			 * @name add
			 * @memberOf SetCache
			 * @alias push
			 * @param {*} value The value to cache.
			 * @returns {Object} Returns the cache instance.
			 */
			function setCacheAdd(value) {
			  this.__data__.set(value, HASH_UNDEFINED);
			  return this;
			}

			/**
			 * Checks if `value` is in the array cache.
			 *
			 * @private
			 * @name has
			 * @memberOf SetCache
			 * @param {*} value The value to search for.
			 * @returns {number} Returns `true` if `value` is found, else `false`.
			 */
			function setCacheHas(value) {
			  return this.__data__.has(value);
			}

			/**
			 *
			 * Creates an array cache object to store unique values.
			 *
			 * @private
			 * @constructor
			 * @param {Array} [values] The values to cache.
			 */
			function SetCache(values) {
			  var index = -1,
			      length = values == null ? 0 : values.length;

			  this.__data__ = new MapCache;
			  while (++index < length) {
			    this.add(values[index]);
			  }
			}

			// Add methods to `SetCache`.
			SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
			SetCache.prototype.has = setCacheHas;

			/**
			 * A specialized version of `_.some` for arrays without support for iteratee
			 * shorthands.
			 *
			 * @private
			 * @param {Array} [array] The array to iterate over.
			 * @param {Function} predicate The function invoked per iteration.
			 * @returns {boolean} Returns `true` if any element passes the predicate check,
			 *  else `false`.
			 */
			function arraySome(array, predicate) {
			  var index = -1,
			      length = array == null ? 0 : array.length;

			  while (++index < length) {
			    if (predicate(array[index], index, array)) {
			      return true;
			    }
			  }
			  return false;
			}

			/**
			 * Checks if a `cache` value for `key` exists.
			 *
			 * @private
			 * @param {Object} cache The cache to query.
			 * @param {string} key The key of the entry to check.
			 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			 */
			function cacheHas(cache, key) {
			  return cache.has(key);
			}

			/** Used to compose bitmasks for value comparisons. */
			var COMPARE_PARTIAL_FLAG$5 = 1,
			    COMPARE_UNORDERED_FLAG$3 = 2;

			/**
			 * A specialized version of `baseIsEqualDeep` for arrays with support for
			 * partial deep comparisons.
			 *
			 * @private
			 * @param {Array} array The array to compare.
			 * @param {Array} other The other array to compare.
			 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
			 * @param {Function} customizer The function to customize comparisons.
			 * @param {Function} equalFunc The function to determine equivalents of values.
			 * @param {Object} stack Tracks traversed `array` and `other` objects.
			 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
			 */
			function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
			  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
			      arrLength = array.length,
			      othLength = other.length;

			  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
			    return false;
			  }
			  // Check that cyclic values are equal.
			  var arrStacked = stack.get(array);
			  var othStacked = stack.get(other);
			  if (arrStacked && othStacked) {
			    return arrStacked == other && othStacked == array;
			  }
			  var index = -1,
			      result = true,
			      seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new SetCache : undefined;

			  stack.set(array, other);
			  stack.set(other, array);

			  // Ignore non-index properties.
			  while (++index < arrLength) {
			    var arrValue = array[index],
			        othValue = other[index];

			    if (customizer) {
			      var compared = isPartial
			        ? customizer(othValue, arrValue, index, other, array, stack)
			        : customizer(arrValue, othValue, index, array, other, stack);
			    }
			    if (compared !== undefined) {
			      if (compared) {
			        continue;
			      }
			      result = false;
			      break;
			    }
			    // Recursively compare arrays (susceptible to call stack limits).
			    if (seen) {
			      if (!arraySome(other, function(othValue, othIndex) {
			            if (!cacheHas(seen, othIndex) &&
			                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
			              return seen.push(othIndex);
			            }
			          })) {
			        result = false;
			        break;
			      }
			    } else if (!(
			          arrValue === othValue ||
			            equalFunc(arrValue, othValue, bitmask, customizer, stack)
			        )) {
			      result = false;
			      break;
			    }
			  }
			  stack['delete'](array);
			  stack['delete'](other);
			  return result;
			}

			/**
			 * Converts `map` to its key-value pairs.
			 *
			 * @private
			 * @param {Object} map The map to convert.
			 * @returns {Array} Returns the key-value pairs.
			 */
			function mapToArray(map) {
			  var index = -1,
			      result = Array(map.size);

			  map.forEach(function(value, key) {
			    result[++index] = [key, value];
			  });
			  return result;
			}

			/**
			 * Converts `set` to an array of its values.
			 *
			 * @private
			 * @param {Object} set The set to convert.
			 * @returns {Array} Returns the values.
			 */
			function setToArray(set) {
			  var index = -1,
			      result = Array(set.size);

			  set.forEach(function(value) {
			    result[++index] = value;
			  });
			  return result;
			}

			/** Used to compose bitmasks for value comparisons. */
			var COMPARE_PARTIAL_FLAG$4 = 1,
			    COMPARE_UNORDERED_FLAG$2 = 2;

			/** `Object#toString` result references. */
			var boolTag = '[object Boolean]',
			    dateTag = '[object Date]',
			    errorTag = '[object Error]',
			    mapTag$1 = '[object Map]',
			    numberTag = '[object Number]',
			    regexpTag = '[object RegExp]',
			    setTag$1 = '[object Set]',
			    stringTag = '[object String]',
			    symbolTag = '[object Symbol]';

			var arrayBufferTag = '[object ArrayBuffer]',
			    dataViewTag$1 = '[object DataView]';

			/** Used to convert symbols to primitives and strings. */
			var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,
			    symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined;

			/**
			 * A specialized version of `baseIsEqualDeep` for comparing objects of
			 * the same `toStringTag`.
			 *
			 * **Note:** This function only supports comparing values with tags of
			 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
			 *
			 * @private
			 * @param {Object} object The object to compare.
			 * @param {Object} other The other object to compare.
			 * @param {string} tag The `toStringTag` of the objects to compare.
			 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
			 * @param {Function} customizer The function to customize comparisons.
			 * @param {Function} equalFunc The function to determine equivalents of values.
			 * @param {Object} stack Tracks traversed `object` and `other` objects.
			 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
			 */
			function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
			  switch (tag) {
			    case dataViewTag$1:
			      if ((object.byteLength != other.byteLength) ||
			          (object.byteOffset != other.byteOffset)) {
			        return false;
			      }
			      object = object.buffer;
			      other = other.buffer;

			    case arrayBufferTag:
			      if ((object.byteLength != other.byteLength) ||
			          !equalFunc(new Uint8Array$2(object), new Uint8Array$2(other))) {
			        return false;
			      }
			      return true;

			    case boolTag:
			    case dateTag:
			    case numberTag:
			      // Coerce booleans to `1` or `0` and dates to milliseconds.
			      // Invalid dates are coerced to `NaN`.
			      return eq(+object, +other);

			    case errorTag:
			      return object.name == other.name && object.message == other.message;

			    case regexpTag:
			    case stringTag:
			      // Coerce regexes to strings and treat strings, primitives and objects,
			      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
			      // for more details.
			      return object == (other + '');

			    case mapTag$1:
			      var convert = mapToArray;

			    case setTag$1:
			      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
			      convert || (convert = setToArray);

			      if (object.size != other.size && !isPartial) {
			        return false;
			      }
			      // Assume cyclic values are equal.
			      var stacked = stack.get(object);
			      if (stacked) {
			        return stacked == other;
			      }
			      bitmask |= COMPARE_UNORDERED_FLAG$2;

			      // Recursively compare objects (susceptible to call stack limits).
			      stack.set(object, other);
			      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
			      stack['delete'](object);
			      return result;

			    case symbolTag:
			      if (symbolValueOf) {
			        return symbolValueOf.call(object) == symbolValueOf.call(other);
			      }
			  }
			  return false;
			}

			/**
			 * Appends the elements of `values` to `array`.
			 *
			 * @private
			 * @param {Array} array The array to modify.
			 * @param {Array} values The values to append.
			 * @returns {Array} Returns `array`.
			 */
			function arrayPush(array, values) {
			  var index = -1,
			      length = values.length,
			      offset = array.length;

			  while (++index < length) {
			    array[offset + index] = values[index];
			  }
			  return array;
			}

			/**
			 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
			 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
			 * symbols of `object`.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @param {Function} keysFunc The function to get the keys of `object`.
			 * @param {Function} symbolsFunc The function to get the symbols of `object`.
			 * @returns {Array} Returns the array of property names and symbols.
			 */
			function baseGetAllKeys(object, keysFunc, symbolsFunc) {
			  var result = keysFunc(object);
			  return isArray$1(object) ? result : arrayPush(result, symbolsFunc(object));
			}

			/**
			 * A specialized version of `_.filter` for arrays without support for
			 * iteratee shorthands.
			 *
			 * @private
			 * @param {Array} [array] The array to iterate over.
			 * @param {Function} predicate The function invoked per iteration.
			 * @returns {Array} Returns the new filtered array.
			 */
			function arrayFilter(array, predicate) {
			  var index = -1,
			      length = array == null ? 0 : array.length,
			      resIndex = 0,
			      result = [];

			  while (++index < length) {
			    var value = array[index];
			    if (predicate(value, index, array)) {
			      result[resIndex++] = value;
			    }
			  }
			  return result;
			}

			/**
			 * This method returns a new empty array.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.13.0
			 * @category Util
			 * @returns {Array} Returns the new empty array.
			 * @example
			 *
			 * var arrays = _.times(2, _.stubArray);
			 *
			 * console.log(arrays);
			 * // => [[], []]
			 *
			 * console.log(arrays[0] === arrays[1]);
			 * // => false
			 */
			function stubArray() {
			  return [];
			}

			/** Used for built-in method references. */
			var objectProto$2 = Object.prototype;

			/** Built-in value references. */
			var propertyIsEnumerable = objectProto$2.propertyIsEnumerable;

			/* Built-in method references for those with the same name as other `lodash` methods. */
			var nativeGetSymbols = Object.getOwnPropertySymbols;

			/**
			 * Creates an array of the own enumerable symbols of `object`.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of symbols.
			 */
			var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
			  if (object == null) {
			    return [];
			  }
			  object = Object(object);
			  return arrayFilter(nativeGetSymbols(object), function(symbol) {
			    return propertyIsEnumerable.call(object, symbol);
			  });
			};

			var getSymbols$1 = getSymbols;

			/**
			 * Creates an array of own enumerable property names and symbols of `object`.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of property names and symbols.
			 */
			function getAllKeys(object) {
			  return baseGetAllKeys(object, keys, getSymbols$1);
			}

			/** Used to compose bitmasks for value comparisons. */
			var COMPARE_PARTIAL_FLAG$3 = 1;

			/** Used for built-in method references. */
			var objectProto$1 = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

			/**
			 * A specialized version of `baseIsEqualDeep` for objects with support for
			 * partial deep comparisons.
			 *
			 * @private
			 * @param {Object} object The object to compare.
			 * @param {Object} other The other object to compare.
			 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
			 * @param {Function} customizer The function to customize comparisons.
			 * @param {Function} equalFunc The function to determine equivalents of values.
			 * @param {Object} stack Tracks traversed `object` and `other` objects.
			 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
			 */
			function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
			  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
			      objProps = getAllKeys(object),
			      objLength = objProps.length,
			      othProps = getAllKeys(other),
			      othLength = othProps.length;

			  if (objLength != othLength && !isPartial) {
			    return false;
			  }
			  var index = objLength;
			  while (index--) {
			    var key = objProps[index];
			    if (!(isPartial ? key in other : hasOwnProperty$1.call(other, key))) {
			      return false;
			    }
			  }
			  // Check that cyclic values are equal.
			  var objStacked = stack.get(object);
			  var othStacked = stack.get(other);
			  if (objStacked && othStacked) {
			    return objStacked == other && othStacked == object;
			  }
			  var result = true;
			  stack.set(object, other);
			  stack.set(other, object);

			  var skipCtor = isPartial;
			  while (++index < objLength) {
			    key = objProps[index];
			    var objValue = object[key],
			        othValue = other[key];

			    if (customizer) {
			      var compared = isPartial
			        ? customizer(othValue, objValue, key, other, object, stack)
			        : customizer(objValue, othValue, key, object, other, stack);
			    }
			    // Recursively compare objects (susceptible to call stack limits).
			    if (!(compared === undefined
			          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
			          : compared
			        )) {
			      result = false;
			      break;
			    }
			    skipCtor || (skipCtor = key == 'constructor');
			  }
			  if (result && !skipCtor) {
			    var objCtor = object.constructor,
			        othCtor = other.constructor;

			    // Non `Object` object instances with different constructors are not equal.
			    if (objCtor != othCtor &&
			        ('constructor' in object && 'constructor' in other) &&
			        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
			          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
			      result = false;
			    }
			  }
			  stack['delete'](object);
			  stack['delete'](other);
			  return result;
			}

			/* Built-in method references that are verified to be native. */
			var DataView = getNative(root$1, 'DataView');

			var DataView$1 = DataView;

			/* Built-in method references that are verified to be native. */
			var Promise$1 = getNative(root$1, 'Promise');

			var Promise$2 = Promise$1;

			/* Built-in method references that are verified to be native. */
			var Set$1 = getNative(root$1, 'Set');

			var Set$2 = Set$1;

			/* Built-in method references that are verified to be native. */
			var WeakMap = getNative(root$1, 'WeakMap');

			var WeakMap$1 = WeakMap;

			/** `Object#toString` result references. */
			var mapTag = '[object Map]',
			    objectTag$1 = '[object Object]',
			    promiseTag = '[object Promise]',
			    setTag = '[object Set]',
			    weakMapTag = '[object WeakMap]';

			var dataViewTag = '[object DataView]';

			/** Used to detect maps, sets, and weakmaps. */
			var dataViewCtorString = toSource(DataView$1),
			    mapCtorString = toSource(Map$2),
			    promiseCtorString = toSource(Promise$2),
			    setCtorString = toSource(Set$2),
			    weakMapCtorString = toSource(WeakMap$1);

			/**
			 * Gets the `toStringTag` of `value`.
			 *
			 * @private
			 * @param {*} value The value to query.
			 * @returns {string} Returns the `toStringTag`.
			 */
			var getTag = baseGetTag;

			// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
			if ((DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag) ||
			    (Map$2 && getTag(new Map$2) != mapTag) ||
			    (Promise$2 && getTag(Promise$2.resolve()) != promiseTag) ||
			    (Set$2 && getTag(new Set$2) != setTag) ||
			    (WeakMap$1 && getTag(new WeakMap$1) != weakMapTag)) {
			  getTag = function(value) {
			    var result = baseGetTag(value),
			        Ctor = result == objectTag$1 ? value.constructor : undefined,
			        ctorString = Ctor ? toSource(Ctor) : '';

			    if (ctorString) {
			      switch (ctorString) {
			        case dataViewCtorString: return dataViewTag;
			        case mapCtorString: return mapTag;
			        case promiseCtorString: return promiseTag;
			        case setCtorString: return setTag;
			        case weakMapCtorString: return weakMapTag;
			      }
			    }
			    return result;
			  };
			}

			var getTag$1 = getTag;

			/** Used to compose bitmasks for value comparisons. */
			var COMPARE_PARTIAL_FLAG$2 = 1;

			/** `Object#toString` result references. */
			var argsTag = '[object Arguments]',
			    arrayTag = '[object Array]',
			    objectTag = '[object Object]';

			/** Used for built-in method references. */
			var objectProto = Object.prototype;

			/** Used to check objects for own properties. */
			var hasOwnProperty = objectProto.hasOwnProperty;

			/**
			 * A specialized version of `baseIsEqual` for arrays and objects which performs
			 * deep comparisons and tracks traversed objects enabling objects with circular
			 * references to be compared.
			 *
			 * @private
			 * @param {Object} object The object to compare.
			 * @param {Object} other The other object to compare.
			 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
			 * @param {Function} customizer The function to customize comparisons.
			 * @param {Function} equalFunc The function to determine equivalents of values.
			 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
			 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
			 */
			function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
			  var objIsArr = isArray$1(object),
			      othIsArr = isArray$1(other),
			      objTag = objIsArr ? arrayTag : getTag$1(object),
			      othTag = othIsArr ? arrayTag : getTag$1(other);

			  objTag = objTag == argsTag ? objectTag : objTag;
			  othTag = othTag == argsTag ? objectTag : othTag;

			  var objIsObj = objTag == objectTag,
			      othIsObj = othTag == objectTag,
			      isSameTag = objTag == othTag;

			  if (isSameTag && isBuffer$1(object)) {
			    if (!isBuffer$1(other)) {
			      return false;
			    }
			    objIsArr = true;
			    objIsObj = false;
			  }
			  if (isSameTag && !objIsObj) {
			    stack || (stack = new Stack);
			    return (objIsArr || isTypedArray$1(object))
			      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
			      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
			  }
			  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
			    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
			        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

			    if (objIsWrapped || othIsWrapped) {
			      var objUnwrapped = objIsWrapped ? object.value() : object,
			          othUnwrapped = othIsWrapped ? other.value() : other;

			      stack || (stack = new Stack);
			      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
			    }
			  }
			  if (!isSameTag) {
			    return false;
			  }
			  stack || (stack = new Stack);
			  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
			}

			/**
			 * The base implementation of `_.isEqual` which supports partial comparisons
			 * and tracks traversed objects.
			 *
			 * @private
			 * @param {*} value The value to compare.
			 * @param {*} other The other value to compare.
			 * @param {boolean} bitmask The bitmask flags.
			 *  1 - Unordered comparison
			 *  2 - Partial comparison
			 * @param {Function} [customizer] The function to customize comparisons.
			 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
			 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
			 */
			function baseIsEqual(value, other, bitmask, customizer, stack) {
			  if (value === other) {
			    return true;
			  }
			  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
			    return value !== value && other !== other;
			  }
			  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
			}

			/** Used to compose bitmasks for value comparisons. */
			var COMPARE_PARTIAL_FLAG$1 = 1,
			    COMPARE_UNORDERED_FLAG$1 = 2;

			/**
			 * The base implementation of `_.isMatch` without support for iteratee shorthands.
			 *
			 * @private
			 * @param {Object} object The object to inspect.
			 * @param {Object} source The object of property values to match.
			 * @param {Array} matchData The property names, values, and compare flags to match.
			 * @param {Function} [customizer] The function to customize comparisons.
			 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
			 */
			function baseIsMatch(object, source, matchData, customizer) {
			  var index = matchData.length,
			      length = index,
			      noCustomizer = !customizer;

			  if (object == null) {
			    return !length;
			  }
			  object = Object(object);
			  while (index--) {
			    var data = matchData[index];
			    if ((noCustomizer && data[2])
			          ? data[1] !== object[data[0]]
			          : !(data[0] in object)
			        ) {
			      return false;
			    }
			  }
			  while (++index < length) {
			    data = matchData[index];
			    var key = data[0],
			        objValue = object[key],
			        srcValue = data[1];

			    if (noCustomizer && data[2]) {
			      if (objValue === undefined && !(key in object)) {
			        return false;
			      }
			    } else {
			      var stack = new Stack;
			      if (customizer) {
			        var result = customizer(objValue, srcValue, key, object, source, stack);
			      }
			      if (!(result === undefined
			            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
			            : result
			          )) {
			        return false;
			      }
			    }
			  }
			  return true;
			}

			/**
			 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` if suitable for strict
			 *  equality comparisons, else `false`.
			 */
			function isStrictComparable(value) {
			  return value === value && !isObject(value);
			}

			/**
			 * Gets the property names, values, and compare flags of `object`.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the match data of `object`.
			 */
			function getMatchData(object) {
			  var result = keys(object),
			      length = result.length;

			  while (length--) {
			    var key = result[length],
			        value = object[key];

			    result[length] = [key, value, isStrictComparable(value)];
			  }
			  return result;
			}

			/**
			 * A specialized version of `matchesProperty` for source values suitable
			 * for strict equality comparisons, i.e. `===`.
			 *
			 * @private
			 * @param {string} key The key of the property to get.
			 * @param {*} srcValue The value to match.
			 * @returns {Function} Returns the new spec function.
			 */
			function matchesStrictComparable(key, srcValue) {
			  return function(object) {
			    if (object == null) {
			      return false;
			    }
			    return object[key] === srcValue &&
			      (srcValue !== undefined || (key in Object(object)));
			  };
			}

			/**
			 * The base implementation of `_.matches` which doesn't clone `source`.
			 *
			 * @private
			 * @param {Object} source The object of property values to match.
			 * @returns {Function} Returns the new spec function.
			 */
			function baseMatches(source) {
			  var matchData = getMatchData(source);
			  if (matchData.length == 1 && matchData[0][2]) {
			    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
			  }
			  return function(object) {
			    return object === source || baseIsMatch(object, source, matchData);
			  };
			}

			/** Used to match property names within property paths. */
			var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
			    reIsPlainProp = /^\w*$/;

			/**
			 * Checks if `value` is a property name and not a property path.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @param {Object} [object] The object to query keys on.
			 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
			 */
			function isKey(value, object) {
			  if (isArray$1(value)) {
			    return false;
			  }
			  var type = typeof value;
			  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
			      value == null || isSymbol(value)) {
			    return true;
			  }
			  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
			    (object != null && value in Object(object));
			}

			/** Error message constants. */
			var FUNC_ERROR_TEXT = 'Expected a function';

			/**
			 * Creates a function that memoizes the result of `func`. If `resolver` is
			 * provided, it determines the cache key for storing the result based on the
			 * arguments provided to the memoized function. By default, the first argument
			 * provided to the memoized function is used as the map cache key. The `func`
			 * is invoked with the `this` binding of the memoized function.
			 *
			 * **Note:** The cache is exposed as the `cache` property on the memoized
			 * function. Its creation may be customized by replacing the `_.memoize.Cache`
			 * constructor with one whose instances implement the
			 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
			 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Function
			 * @param {Function} func The function to have its output memoized.
			 * @param {Function} [resolver] The function to resolve the cache key.
			 * @returns {Function} Returns the new memoized function.
			 * @example
			 *
			 * var object = { 'a': 1, 'b': 2 };
			 * var other = { 'c': 3, 'd': 4 };
			 *
			 * var values = _.memoize(_.values);
			 * values(object);
			 * // => [1, 2]
			 *
			 * values(other);
			 * // => [3, 4]
			 *
			 * object.a = 2;
			 * values(object);
			 * // => [1, 2]
			 *
			 * // Modify the result cache.
			 * values.cache.set(object, ['a', 'b']);
			 * values(object);
			 * // => ['a', 'b']
			 *
			 * // Replace `_.memoize.Cache`.
			 * _.memoize.Cache = WeakMap;
			 */
			function memoize(func, resolver) {
			  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
			    throw new TypeError(FUNC_ERROR_TEXT);
			  }
			  var memoized = function() {
			    var args = arguments,
			        key = resolver ? resolver.apply(this, args) : args[0],
			        cache = memoized.cache;

			    if (cache.has(key)) {
			      return cache.get(key);
			    }
			    var result = func.apply(this, args);
			    memoized.cache = cache.set(key, result) || cache;
			    return result;
			  };
			  memoized.cache = new (memoize.Cache || MapCache);
			  return memoized;
			}

			// Expose `MapCache`.
			memoize.Cache = MapCache;

			/** Used as the maximum memoize cache size. */
			var MAX_MEMOIZE_SIZE = 500;

			/**
			 * A specialized version of `_.memoize` which clears the memoized function's
			 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
			 *
			 * @private
			 * @param {Function} func The function to have its output memoized.
			 * @returns {Function} Returns the new memoized function.
			 */
			function memoizeCapped(func) {
			  var result = memoize(func, function(key) {
			    if (cache.size === MAX_MEMOIZE_SIZE) {
			      cache.clear();
			    }
			    return key;
			  });

			  var cache = result.cache;
			  return result;
			}

			/** Used to match property names within property paths. */
			var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

			/** Used to match backslashes in property paths. */
			var reEscapeChar = /\\(\\)?/g;

			/**
			 * Converts `string` to a property path array.
			 *
			 * @private
			 * @param {string} string The string to convert.
			 * @returns {Array} Returns the property path array.
			 */
			var stringToPath = memoizeCapped(function(string) {
			  var result = [];
			  if (string.charCodeAt(0) === 46 /* . */) {
			    result.push('');
			  }
			  string.replace(rePropName, function(match, number, quote, subString) {
			    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
			  });
			  return result;
			});

			var stringToPath$1 = stringToPath;

			/** Used as references for various `Number` constants. */
			var INFINITY$1 = 1 / 0;

			/** Used to convert symbols to primitives and strings. */
			var symbolProto = Symbol$2 ? Symbol$2.prototype : undefined,
			    symbolToString = symbolProto ? symbolProto.toString : undefined;

			/**
			 * The base implementation of `_.toString` which doesn't convert nullish
			 * values to empty strings.
			 *
			 * @private
			 * @param {*} value The value to process.
			 * @returns {string} Returns the string.
			 */
			function baseToString(value) {
			  // Exit early for strings to avoid a performance hit in some environments.
			  if (typeof value == 'string') {
			    return value;
			  }
			  if (isArray$1(value)) {
			    // Recursively convert values (susceptible to call stack limits).
			    return arrayMap(value, baseToString) + '';
			  }
			  if (isSymbol(value)) {
			    return symbolToString ? symbolToString.call(value) : '';
			  }
			  var result = (value + '');
			  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
			}

			/**
			 * Converts `value` to a string. An empty string is returned for `null`
			 * and `undefined` values. The sign of `-0` is preserved.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to convert.
			 * @returns {string} Returns the converted string.
			 * @example
			 *
			 * _.toString(null);
			 * // => ''
			 *
			 * _.toString(-0);
			 * // => '-0'
			 *
			 * _.toString([1, 2, 3]);
			 * // => '1,2,3'
			 */
			function toString(value) {
			  return value == null ? '' : baseToString(value);
			}

			/**
			 * Casts `value` to a path array if it's not one.
			 *
			 * @private
			 * @param {*} value The value to inspect.
			 * @param {Object} [object] The object to query keys on.
			 * @returns {Array} Returns the cast property path array.
			 */
			function castPath(value, object) {
			  if (isArray$1(value)) {
			    return value;
			  }
			  return isKey(value, object) ? [value] : stringToPath$1(toString(value));
			}

			/** Used as references for various `Number` constants. */
			var INFINITY = 1 / 0;

			/**
			 * Converts `value` to a string key if it's not a string or symbol.
			 *
			 * @private
			 * @param {*} value The value to inspect.
			 * @returns {string|symbol} Returns the key.
			 */
			function toKey(value) {
			  if (typeof value == 'string' || isSymbol(value)) {
			    return value;
			  }
			  var result = (value + '');
			  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
			}

			/**
			 * The base implementation of `_.get` without support for default values.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @param {Array|string} path The path of the property to get.
			 * @returns {*} Returns the resolved value.
			 */
			function baseGet(object, path) {
			  path = castPath(path, object);

			  var index = 0,
			      length = path.length;

			  while (object != null && index < length) {
			    object = object[toKey(path[index++])];
			  }
			  return (index && index == length) ? object : undefined;
			}

			/**
			 * Gets the value at `path` of `object`. If the resolved value is
			 * `undefined`, the `defaultValue` is returned in its place.
			 *
			 * @static
			 * @memberOf _
			 * @since 3.7.0
			 * @category Object
			 * @param {Object} object The object to query.
			 * @param {Array|string} path The path of the property to get.
			 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
			 * @returns {*} Returns the resolved value.
			 * @example
			 *
			 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
			 *
			 * _.get(object, 'a[0].b.c');
			 * // => 3
			 *
			 * _.get(object, ['a', '0', 'b', 'c']);
			 * // => 3
			 *
			 * _.get(object, 'a.b.c', 'default');
			 * // => 'default'
			 */
			function get(object, path, defaultValue) {
			  var result = object == null ? undefined : baseGet(object, path);
			  return result === undefined ? defaultValue : result;
			}

			/**
			 * The base implementation of `_.hasIn` without support for deep paths.
			 *
			 * @private
			 * @param {Object} [object] The object to query.
			 * @param {Array|string} key The key to check.
			 * @returns {boolean} Returns `true` if `key` exists, else `false`.
			 */
			function baseHasIn(object, key) {
			  return object != null && key in Object(object);
			}

			/**
			 * Checks if `path` exists on `object`.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @param {Array|string} path The path to check.
			 * @param {Function} hasFunc The function to check properties.
			 * @returns {boolean} Returns `true` if `path` exists, else `false`.
			 */
			function hasPath(object, path, hasFunc) {
			  path = castPath(path, object);

			  var index = -1,
			      length = path.length,
			      result = false;

			  while (++index < length) {
			    var key = toKey(path[index]);
			    if (!(result = object != null && hasFunc(object, key))) {
			      break;
			    }
			    object = object[key];
			  }
			  if (result || ++index != length) {
			    return result;
			  }
			  length = object == null ? 0 : object.length;
			  return !!length && isLength(length) && isIndex(key, length) &&
			    (isArray$1(object) || isArguments$1(object));
			}

			/**
			 * Checks if `path` is a direct or inherited property of `object`.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Object
			 * @param {Object} object The object to query.
			 * @param {Array|string} path The path to check.
			 * @returns {boolean} Returns `true` if `path` exists, else `false`.
			 * @example
			 *
			 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
			 *
			 * _.hasIn(object, 'a');
			 * // => true
			 *
			 * _.hasIn(object, 'a.b');
			 * // => true
			 *
			 * _.hasIn(object, ['a', 'b']);
			 * // => true
			 *
			 * _.hasIn(object, 'b');
			 * // => false
			 */
			function hasIn(object, path) {
			  return object != null && hasPath(object, path, baseHasIn);
			}

			/** Used to compose bitmasks for value comparisons. */
			var COMPARE_PARTIAL_FLAG = 1,
			    COMPARE_UNORDERED_FLAG = 2;

			/**
			 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
			 *
			 * @private
			 * @param {string} path The path of the property to get.
			 * @param {*} srcValue The value to match.
			 * @returns {Function} Returns the new spec function.
			 */
			function baseMatchesProperty(path, srcValue) {
			  if (isKey(path) && isStrictComparable(srcValue)) {
			    return matchesStrictComparable(toKey(path), srcValue);
			  }
			  return function(object) {
			    var objValue = get(object, path);
			    return (objValue === undefined && objValue === srcValue)
			      ? hasIn(object, path)
			      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
			  };
			}

			/**
			 * The base implementation of `_.property` without support for deep paths.
			 *
			 * @private
			 * @param {string} key The key of the property to get.
			 * @returns {Function} Returns the new accessor function.
			 */
			function baseProperty(key) {
			  return function(object) {
			    return object == null ? undefined : object[key];
			  };
			}

			/**
			 * A specialized version of `baseProperty` which supports deep paths.
			 *
			 * @private
			 * @param {Array|string} path The path of the property to get.
			 * @returns {Function} Returns the new accessor function.
			 */
			function basePropertyDeep(path) {
			  return function(object) {
			    return baseGet(object, path);
			  };
			}

			/**
			 * Creates a function that returns the value at `path` of a given object.
			 *
			 * @static
			 * @memberOf _
			 * @since 2.4.0
			 * @category Util
			 * @param {Array|string} path The path of the property to get.
			 * @returns {Function} Returns the new accessor function.
			 * @example
			 *
			 * var objects = [
			 *   { 'a': { 'b': 2 } },
			 *   { 'a': { 'b': 1 } }
			 * ];
			 *
			 * _.map(objects, _.property('a.b'));
			 * // => [2, 1]
			 *
			 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
			 * // => [1, 2]
			 */
			function property(path) {
			  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
			}

			/**
			 * The base implementation of `_.iteratee`.
			 *
			 * @private
			 * @param {*} [value=_.identity] The value to convert to an iteratee.
			 * @returns {Function} Returns the iteratee.
			 */
			function baseIteratee(value) {
			  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
			  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
			  if (typeof value == 'function') {
			    return value;
			  }
			  if (value == null) {
			    return identity;
			  }
			  if (typeof value == 'object') {
			    return isArray$1(value)
			      ? baseMatchesProperty(value[0], value[1])
			      : baseMatches(value);
			  }
			  return property(value);
			}

			/**
			 * The base implementation of `_.map` without support for iteratee shorthands.
			 *
			 * @private
			 * @param {Array|Object} collection The collection to iterate over.
			 * @param {Function} iteratee The function invoked per iteration.
			 * @returns {Array} Returns the new mapped array.
			 */
			function baseMap(collection, iteratee) {
			  var index = -1,
			      result = isArrayLike(collection) ? Array(collection.length) : [];

			  baseEach$1(collection, function(value, key, collection) {
			    result[++index] = iteratee(value, key, collection);
			  });
			  return result;
			}

			/**
			 * Creates an array of values by running each element in `collection` thru
			 * `iteratee`. The iteratee is invoked with three arguments:
			 * (value, index|key, collection).
			 *
			 * Many lodash methods are guarded to work as iteratees for methods like
			 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
			 *
			 * The guarded methods are:
			 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
			 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
			 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
			 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Collection
			 * @param {Array|Object} collection The collection to iterate over.
			 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
			 * @returns {Array} Returns the new mapped array.
			 * @example
			 *
			 * function square(n) {
			 *   return n * n;
			 * }
			 *
			 * _.map([4, 8], square);
			 * // => [16, 64]
			 *
			 * _.map({ 'a': 4, 'b': 8 }, square);
			 * // => [16, 64] (iteration order is not guaranteed)
			 *
			 * var users = [
			 *   { 'user': 'barney' },
			 *   { 'user': 'fred' }
			 * ];
			 *
			 * // The `_.property` iteratee shorthand.
			 * _.map(users, 'user');
			 * // => ['barney', 'fred']
			 */
			function map(collection, iteratee) {
			  var func = isArray$1(collection) ? arrayMap : baseMap;
			  return func(collection, baseIteratee(iteratee));
			}

			var BlockSwatches = function BlockSwatches(_ref) {
			  var colors = _ref.colors,
			      onClick = _ref.onClick,
			      onSwatchHover = _ref.onSwatchHover;

			  var styles = _default$2({
			    'default': {
			      swatches: {
			        marginRight: '-10px'
			      },
			      swatch: {
			        width: '22px',
			        height: '22px',
			        float: 'left',
			        marginRight: '10px',
			        marginBottom: '10px',
			        borderRadius: '4px'
			      },
			      clear: {
			        clear: 'both'
			      }
			    }
			  });

			  return React__default.createElement(
			    'div',
			    { style: styles.swatches },
			    map(colors, function (c) {
			      return React__default.createElement(Swatch$1, {
			        key: c,
			        color: c,
			        style: styles.swatch,
			        onClick: onClick,
			        onHover: onSwatchHover,
			        focusStyle: {
			          boxShadow: '0 0 4px ' + c
			        }
			      });
			    }),
			    React__default.createElement('div', { style: styles.clear })
			  );
			};

			var Block = function Block(_ref) {
			  var onChange = _ref.onChange,
			      onSwatchHover = _ref.onSwatchHover,
			      hex = _ref.hex,
			      colors = _ref.colors,
			      width = _ref.width,
			      triangle = _ref.triangle,
			      _ref$styles = _ref.styles,
			      passedStyles = _ref$styles === undefined ? {} : _ref$styles,
			      _ref$className = _ref.className,
			      className = _ref$className === undefined ? '' : _ref$className;

			  var transparent = hex === 'transparent';
			  var handleChange = function handleChange(hexCode, e) {
			    isValidHex(hexCode) && onChange({
			      hex: hexCode,
			      source: 'hex'
			    }, e);
			  };

			  var styles = _default$2(merge$1({
			    'default': {
			      card: {
			        width: width,
			        background: '#fff',
			        boxShadow: '0 1px rgba(0,0,0,.1)',
			        borderRadius: '6px',
			        position: 'relative'
			      },
			      head: {
			        height: '110px',
			        background: hex,
			        borderRadius: '6px 6px 0 0',
			        display: 'flex',
			        alignItems: 'center',
			        justifyContent: 'center',
			        position: 'relative'
			      },
			      body: {
			        padding: '10px'
			      },
			      label: {
			        fontSize: '18px',
			        color: getContrastingColor(hex),
			        position: 'relative'
			      },
			      triangle: {
			        width: '0px',
			        height: '0px',
			        borderStyle: 'solid',
			        borderWidth: '0 10px 10px 10px',
			        borderColor: 'transparent transparent ' + hex + ' transparent',
			        position: 'absolute',
			        top: '-10px',
			        left: '50%',
			        marginLeft: '-10px'
			      },
			      input: {
			        width: '100%',
			        fontSize: '12px',
			        color: '#666',
			        border: '0px',
			        outline: 'none',
			        height: '22px',
			        boxShadow: 'inset 0 0 0 1px #ddd',
			        borderRadius: '4px',
			        padding: '0 7px',
			        boxSizing: 'border-box'
			      }
			    },
			    'hide-triangle': {
			      triangle: {
			        display: 'none'
			      }
			    }
			  }, passedStyles), { 'hide-triangle': triangle === 'hide' });

			  return React__default.createElement(
			    'div',
			    { style: styles.card, className: 'block-picker ' + className },
			    React__default.createElement('div', { style: styles.triangle }),
			    React__default.createElement(
			      'div',
			      { style: styles.head },
			      transparent && React__default.createElement(Checkboard, { borderRadius: '6px 6px 0 0' }),
			      React__default.createElement(
			        'div',
			        { style: styles.label },
			        hex
			      )
			    ),
			    React__default.createElement(
			      'div',
			      { style: styles.body },
			      React__default.createElement(BlockSwatches, { colors: colors, onClick: handleChange, onSwatchHover: onSwatchHover }),
			      React__default.createElement(EditableInput, {
			        style: { input: styles.input },
			        value: hex,
			        onChange: handleChange
			      })
			    )
			  );
			};

			Block.propTypes = {
			  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
			  colors: PropTypes.arrayOf(PropTypes.string),
			  triangle: PropTypes.oneOf(['top', 'hide']),
			  styles: PropTypes.object
			};

			Block.defaultProps = {
			  width: 170,
			  colors: ['#D9E3F0', '#F47373', '#697689', '#37D67A', '#2CCCE4', '#555555', '#dce775', '#ff8a65', '#ba68c8'],
			  triangle: 'top',
			  styles: {}
			};

			ColorWrap(Block);

			var red = {"50":"#ffebee","100":"#ffcdd2","200":"#ef9a9a","300":"#e57373","400":"#ef5350","500":"#f44336","600":"#e53935","700":"#d32f2f","800":"#c62828","900":"#b71c1c","a100":"#ff8a80","a200":"#ff5252","a400":"#ff1744","a700":"#d50000"};
			var pink = {"50":"#fce4ec","100":"#f8bbd0","200":"#f48fb1","300":"#f06292","400":"#ec407a","500":"#e91e63","600":"#d81b60","700":"#c2185b","800":"#ad1457","900":"#880e4f","a100":"#ff80ab","a200":"#ff4081","a400":"#f50057","a700":"#c51162"};
			var purple = {"50":"#f3e5f5","100":"#e1bee7","200":"#ce93d8","300":"#ba68c8","400":"#ab47bc","500":"#9c27b0","600":"#8e24aa","700":"#7b1fa2","800":"#6a1b9a","900":"#4a148c","a100":"#ea80fc","a200":"#e040fb","a400":"#d500f9","a700":"#aa00ff"};
			var deepPurple = {"50":"#ede7f6","100":"#d1c4e9","200":"#b39ddb","300":"#9575cd","400":"#7e57c2","500":"#673ab7","600":"#5e35b1","700":"#512da8","800":"#4527a0","900":"#311b92","a100":"#b388ff","a200":"#7c4dff","a400":"#651fff","a700":"#6200ea"};
			var indigo = {"50":"#e8eaf6","100":"#c5cae9","200":"#9fa8da","300":"#7986cb","400":"#5c6bc0","500":"#3f51b5","600":"#3949ab","700":"#303f9f","800":"#283593","900":"#1a237e","a100":"#8c9eff","a200":"#536dfe","a400":"#3d5afe","a700":"#304ffe"};
			var blue = {"50":"#e3f2fd","100":"#bbdefb","200":"#90caf9","300":"#64b5f6","400":"#42a5f5","500":"#2196f3","600":"#1e88e5","700":"#1976d2","800":"#1565c0","900":"#0d47a1","a100":"#82b1ff","a200":"#448aff","a400":"#2979ff","a700":"#2962ff"};
			var lightBlue = {"50":"#e1f5fe","100":"#b3e5fc","200":"#81d4fa","300":"#4fc3f7","400":"#29b6f6","500":"#03a9f4","600":"#039be5","700":"#0288d1","800":"#0277bd","900":"#01579b","a100":"#80d8ff","a200":"#40c4ff","a400":"#00b0ff","a700":"#0091ea"};
			var cyan = {"50":"#e0f7fa","100":"#b2ebf2","200":"#80deea","300":"#4dd0e1","400":"#26c6da","500":"#00bcd4","600":"#00acc1","700":"#0097a7","800":"#00838f","900":"#006064","a100":"#84ffff","a200":"#18ffff","a400":"#00e5ff","a700":"#00b8d4"};
			var teal = {"50":"#e0f2f1","100":"#b2dfdb","200":"#80cbc4","300":"#4db6ac","400":"#26a69a","500":"#009688","600":"#00897b","700":"#00796b","800":"#00695c","900":"#004d40","a100":"#a7ffeb","a200":"#64ffda","a400":"#1de9b6","a700":"#00bfa5"};
			var green = {"50":"#e8f5e9","100":"#c8e6c9","200":"#a5d6a7","300":"#81c784","400":"#66bb6a","500":"#4caf50","600":"#43a047","700":"#388e3c","800":"#2e7d32","900":"#1b5e20","a100":"#b9f6ca","a200":"#69f0ae","a400":"#00e676","a700":"#00c853"};
			var lightGreen = {"50":"#f1f8e9","100":"#dcedc8","200":"#c5e1a5","300":"#aed581","400":"#9ccc65","500":"#8bc34a","600":"#7cb342","700":"#689f38","800":"#558b2f","900":"#33691e","a100":"#ccff90","a200":"#b2ff59","a400":"#76ff03","a700":"#64dd17"};
			var lime = {"50":"#f9fbe7","100":"#f0f4c3","200":"#e6ee9c","300":"#dce775","400":"#d4e157","500":"#cddc39","600":"#c0ca33","700":"#afb42b","800":"#9e9d24","900":"#827717","a100":"#f4ff81","a200":"#eeff41","a400":"#c6ff00","a700":"#aeea00"};
			var yellow = {"50":"#fffde7","100":"#fff9c4","200":"#fff59d","300":"#fff176","400":"#ffee58","500":"#ffeb3b","600":"#fdd835","700":"#fbc02d","800":"#f9a825","900":"#f57f17","a100":"#ffff8d","a200":"#ffff00","a400":"#ffea00","a700":"#ffd600"};
			var amber = {"50":"#fff8e1","100":"#ffecb3","200":"#ffe082","300":"#ffd54f","400":"#ffca28","500":"#ffc107","600":"#ffb300","700":"#ffa000","800":"#ff8f00","900":"#ff6f00","a100":"#ffe57f","a200":"#ffd740","a400":"#ffc400","a700":"#ffab00"};
			var orange = {"50":"#fff3e0","100":"#ffe0b2","200":"#ffcc80","300":"#ffb74d","400":"#ffa726","500":"#ff9800","600":"#fb8c00","700":"#f57c00","800":"#ef6c00","900":"#e65100","a100":"#ffd180","a200":"#ffab40","a400":"#ff9100","a700":"#ff6d00"};
			var deepOrange = {"50":"#fbe9e7","100":"#ffccbc","200":"#ffab91","300":"#ff8a65","400":"#ff7043","500":"#ff5722","600":"#f4511e","700":"#e64a19","800":"#d84315","900":"#bf360c","a100":"#ff9e80","a200":"#ff6e40","a400":"#ff3d00","a700":"#dd2c00"};
			var brown = {"50":"#efebe9","100":"#d7ccc8","200":"#bcaaa4","300":"#a1887f","400":"#8d6e63","500":"#795548","600":"#6d4c41","700":"#5d4037","800":"#4e342e","900":"#3e2723"};
			var blueGrey = {"50":"#eceff1","100":"#cfd8dc","200":"#b0bec5","300":"#90a4ae","400":"#78909c","500":"#607d8b","600":"#546e7a","700":"#455a64","800":"#37474f","900":"#263238"};

			var CircleSwatch = function CircleSwatch(_ref) {
			  var color = _ref.color,
			      onClick = _ref.onClick,
			      onSwatchHover = _ref.onSwatchHover,
			      hover = _ref.hover,
			      active = _ref.active,
			      circleSize = _ref.circleSize,
			      circleSpacing = _ref.circleSpacing;

			  var styles = _default$2({
			    'default': {
			      swatch: {
			        width: circleSize,
			        height: circleSize,
			        marginRight: circleSpacing,
			        marginBottom: circleSpacing,
			        transform: 'scale(1)',
			        transition: '100ms transform ease'
			      },
			      Swatch: {
			        borderRadius: '50%',
			        background: 'transparent',
			        boxShadow: 'inset 0 0 0 ' + (circleSize / 2 + 1) + 'px ' + color,
			        transition: '100ms box-shadow ease'
			      }
			    },
			    'hover': {
			      swatch: {
			        transform: 'scale(1.2)'
			      }
			    },
			    'active': {
			      Swatch: {
			        boxShadow: 'inset 0 0 0 3px ' + color
			      }
			    }
			  }, { hover: hover, active: active });

			  return React__default.createElement(
			    'div',
			    { style: styles.swatch },
			    React__default.createElement(Swatch$1, {
			      style: styles.Swatch,
			      color: color,
			      onClick: onClick,
			      onHover: onSwatchHover,
			      focusStyle: { boxShadow: styles.Swatch.boxShadow + ', 0 0 5px ' + color }
			    })
			  );
			};

			CircleSwatch.defaultProps = {
			  circleSize: 28,
			  circleSpacing: 14
			};

			var CircleSwatch$1 = handleHover(CircleSwatch);

			var Circle = function Circle(_ref) {
			  var width = _ref.width,
			      onChange = _ref.onChange,
			      onSwatchHover = _ref.onSwatchHover,
			      colors = _ref.colors,
			      hex = _ref.hex,
			      circleSize = _ref.circleSize,
			      _ref$styles = _ref.styles,
			      passedStyles = _ref$styles === undefined ? {} : _ref$styles,
			      circleSpacing = _ref.circleSpacing,
			      _ref$className = _ref.className,
			      className = _ref$className === undefined ? '' : _ref$className;

			  var styles = _default$2(merge$1({
			    'default': {
			      card: {
			        width: width,
			        display: 'flex',
			        flexWrap: 'wrap',
			        marginRight: -circleSpacing,
			        marginBottom: -circleSpacing
			      }
			    }
			  }, passedStyles));

			  var handleChange = function handleChange(hexCode, e) {
			    return onChange({ hex: hexCode, source: 'hex' }, e);
			  };

			  return React__default.createElement(
			    'div',
			    { style: styles.card, className: 'circle-picker ' + className },
			    map(colors, function (c) {
			      return React__default.createElement(CircleSwatch$1, {
			        key: c,
			        color: c,
			        onClick: handleChange,
			        onSwatchHover: onSwatchHover,
			        active: hex === c.toLowerCase(),
			        circleSize: circleSize,
			        circleSpacing: circleSpacing
			      });
			    })
			  );
			};

			Circle.propTypes = {
			  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
			  circleSize: PropTypes.number,
			  circleSpacing: PropTypes.number,
			  styles: PropTypes.object
			};

			Circle.defaultProps = {
			  width: 252,
			  circleSize: 28,
			  circleSpacing: 14,
			  colors: [red['500'], pink['500'], purple['500'], deepPurple['500'], indigo['500'], blue['500'], lightBlue['500'], cyan['500'], teal['500'], green['500'], lightGreen['500'], lime['500'], yellow['500'], amber['500'], orange['500'], deepOrange['500'], brown['500'], blueGrey['500']],
			  styles: {}
			};

			ColorWrap(Circle);

			/**
			 * Checks if `value` is `undefined`.
			 *
			 * @static
			 * @since 0.1.0
			 * @memberOf _
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
			 * @example
			 *
			 * _.isUndefined(void 0);
			 * // => true
			 *
			 * _.isUndefined(null);
			 * // => false
			 */
			function isUndefined(value) {
			  return value === undefined;
			}

			var UnfoldMoreHorizontalIcon = {};

			Object.defineProperty(UnfoldMoreHorizontalIcon, "__esModule", {
			  value: true
			});

			var _extends$4 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

			var _react$1 = React__default;

			var _react2$1 = _interopRequireDefault$1(_react$1);

			function _interopRequireDefault$1(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function _objectWithoutProperties$1(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

			var DEFAULT_SIZE$1 = 24;

			var _default$1 = UnfoldMoreHorizontalIcon.default = function (_ref) {
			  var _ref$fill = _ref.fill,
			      fill = _ref$fill === undefined ? 'currentColor' : _ref$fill,
			      _ref$width = _ref.width,
			      width = _ref$width === undefined ? DEFAULT_SIZE$1 : _ref$width,
			      _ref$height = _ref.height,
			      height = _ref$height === undefined ? DEFAULT_SIZE$1 : _ref$height,
			      _ref$style = _ref.style,
			      style = _ref$style === undefined ? {} : _ref$style,
			      props = _objectWithoutProperties$1(_ref, ['fill', 'width', 'height', 'style']);

			  return _react2$1.default.createElement(
			    'svg',
			    _extends$4({
			      viewBox: '0 0 ' + DEFAULT_SIZE$1 + ' ' + DEFAULT_SIZE$1,
			      style: _extends$4({ fill: fill, width: width, height: height }, style)
			    }, props),
			    _react2$1.default.createElement('path', { d: 'M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z' })
			  );
			};

			var _createClass$1 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

			function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

			function _possibleConstructorReturn$1(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

			function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

			var ChromeFields = function (_React$Component) {
			  _inherits$1(ChromeFields, _React$Component);

			  function ChromeFields(props) {
			    _classCallCheck$1(this, ChromeFields);

			    var _this = _possibleConstructorReturn$1(this, (ChromeFields.__proto__ || Object.getPrototypeOf(ChromeFields)).call(this));

			    _this.toggleViews = function () {
			      if (_this.state.view === 'hex') {
			        _this.setState({ view: 'rgb' });
			      } else if (_this.state.view === 'rgb') {
			        _this.setState({ view: 'hsl' });
			      } else if (_this.state.view === 'hsl') {
			        if (_this.props.hsl.a === 1) {
			          _this.setState({ view: 'hex' });
			        } else {
			          _this.setState({ view: 'rgb' });
			        }
			      }
			    };

			    _this.handleChange = function (data, e) {
			      if (data.hex) {
			        isValidHex(data.hex) && _this.props.onChange({
			          hex: data.hex,
			          source: 'hex'
			        }, e);
			      } else if (data.r || data.g || data.b) {
			        _this.props.onChange({
			          r: data.r || _this.props.rgb.r,
			          g: data.g || _this.props.rgb.g,
			          b: data.b || _this.props.rgb.b,
			          source: 'rgb'
			        }, e);
			      } else if (data.a) {
			        if (data.a < 0) {
			          data.a = 0;
			        } else if (data.a > 1) {
			          data.a = 1;
			        }

			        _this.props.onChange({
			          h: _this.props.hsl.h,
			          s: _this.props.hsl.s,
			          l: _this.props.hsl.l,
			          a: Math.round(data.a * 100) / 100,
			          source: 'rgb'
			        }, e);
			      } else if (data.h || data.s || data.l) {
			        // Remove any occurances of '%'.
			        if (typeof data.s === 'string' && data.s.includes('%')) {
			          data.s = data.s.replace('%', '');
			        }
			        if (typeof data.l === 'string' && data.l.includes('%')) {
			          data.l = data.l.replace('%', '');
			        }

			        // We store HSL as a unit interval so we need to override the 1 input to 0.01
			        if (data.s == 1) {
			          data.s = 0.01;
			        } else if (data.l == 1) {
			          data.l = 0.01;
			        }

			        _this.props.onChange({
			          h: data.h || _this.props.hsl.h,
			          s: Number(!isUndefined(data.s) ? data.s : _this.props.hsl.s),
			          l: Number(!isUndefined(data.l) ? data.l : _this.props.hsl.l),
			          source: 'hsl'
			        }, e);
			      }
			    };

			    _this.showHighlight = function (e) {
			      e.currentTarget.style.background = '#eee';
			    };

			    _this.hideHighlight = function (e) {
			      e.currentTarget.style.background = 'transparent';
			    };

			    if (props.hsl.a !== 1 && props.view === "hex") {
			      _this.state = {
			        view: "rgb"
			      };
			    } else {
			      _this.state = {
			        view: props.view
			      };
			    }
			    return _this;
			  }

			  _createClass$1(ChromeFields, [{
			    key: 'render',
			    value: function render() {
			      var _this2 = this;

			      var styles = _default$2({
			        'default': {
			          wrap: {
			            paddingTop: '16px',
			            display: 'flex'
			          },
			          fields: {
			            flex: '1',
			            display: 'flex',
			            marginLeft: '-6px'
			          },
			          field: {
			            paddingLeft: '6px',
			            width: '100%'
			          },
			          alpha: {
			            paddingLeft: '6px',
			            width: '100%'
			          },
			          toggle: {
			            width: '32px',
			            textAlign: 'right',
			            position: 'relative'
			          },
			          icon: {
			            marginRight: '-4px',
			            marginTop: '12px',
			            cursor: 'pointer',
			            position: 'relative'
			          },
			          iconHighlight: {
			            position: 'absolute',
			            width: '24px',
			            height: '28px',
			            background: '#eee',
			            borderRadius: '4px',
			            top: '10px',
			            left: '12px',
			            display: 'none'
			          },
			          input: {
			            fontSize: '11px',
			            color: '#333',
			            width: '100%',
			            borderRadius: '2px',
			            border: 'none',
			            boxShadow: 'inset 0 0 0 1px #dadada',
			            height: '21px',
			            textAlign: 'center'
			          },
			          label: {
			            textTransform: 'uppercase',
			            fontSize: '11px',
			            lineHeight: '11px',
			            color: '#969696',
			            textAlign: 'center',
			            display: 'block',
			            marginTop: '12px'
			          },
			          svg: {
			            fill: '#333',
			            width: '24px',
			            height: '24px',
			            border: '1px transparent solid',
			            borderRadius: '5px'
			          }
			        },
			        'disableAlpha': {
			          alpha: {
			            display: 'none'
			          }
			        }
			      }, this.props, this.state);

			      var fields = void 0;
			      if (this.state.view === 'hex') {
			        fields = React__default.createElement(
			          'div',
			          { style: styles.fields, className: 'flexbox-fix' },
			          React__default.createElement(
			            'div',
			            { style: styles.field },
			            React__default.createElement(EditableInput, {
			              style: { input: styles.input, label: styles.label },
			              label: 'hex', value: this.props.hex,
			              onChange: this.handleChange
			            })
			          )
			        );
			      } else if (this.state.view === 'rgb') {
			        fields = React__default.createElement(
			          'div',
			          { style: styles.fields, className: 'flexbox-fix' },
			          React__default.createElement(
			            'div',
			            { style: styles.field },
			            React__default.createElement(EditableInput, {
			              style: { input: styles.input, label: styles.label },
			              label: 'r',
			              value: this.props.rgb.r,
			              onChange: this.handleChange
			            })
			          ),
			          React__default.createElement(
			            'div',
			            { style: styles.field },
			            React__default.createElement(EditableInput, {
			              style: { input: styles.input, label: styles.label },
			              label: 'g',
			              value: this.props.rgb.g,
			              onChange: this.handleChange
			            })
			          ),
			          React__default.createElement(
			            'div',
			            { style: styles.field },
			            React__default.createElement(EditableInput, {
			              style: { input: styles.input, label: styles.label },
			              label: 'b',
			              value: this.props.rgb.b,
			              onChange: this.handleChange
			            })
			          ),
			          React__default.createElement(
			            'div',
			            { style: styles.alpha },
			            React__default.createElement(EditableInput, {
			              style: { input: styles.input, label: styles.label },
			              label: 'a',
			              value: this.props.rgb.a,
			              arrowOffset: 0.01,
			              onChange: this.handleChange
			            })
			          )
			        );
			      } else if (this.state.view === 'hsl') {
			        fields = React__default.createElement(
			          'div',
			          { style: styles.fields, className: 'flexbox-fix' },
			          React__default.createElement(
			            'div',
			            { style: styles.field },
			            React__default.createElement(EditableInput, {
			              style: { input: styles.input, label: styles.label },
			              label: 'h',
			              value: Math.round(this.props.hsl.h),
			              onChange: this.handleChange
			            })
			          ),
			          React__default.createElement(
			            'div',
			            { style: styles.field },
			            React__default.createElement(EditableInput, {
			              style: { input: styles.input, label: styles.label },
			              label: 's',
			              value: Math.round(this.props.hsl.s * 100) + '%',
			              onChange: this.handleChange
			            })
			          ),
			          React__default.createElement(
			            'div',
			            { style: styles.field },
			            React__default.createElement(EditableInput, {
			              style: { input: styles.input, label: styles.label },
			              label: 'l',
			              value: Math.round(this.props.hsl.l * 100) + '%',
			              onChange: this.handleChange
			            })
			          ),
			          React__default.createElement(
			            'div',
			            { style: styles.alpha },
			            React__default.createElement(EditableInput, {
			              style: { input: styles.input, label: styles.label },
			              label: 'a',
			              value: this.props.hsl.a,
			              arrowOffset: 0.01,
			              onChange: this.handleChange
			            })
			          )
			        );
			      }

			      return React__default.createElement(
			        'div',
			        { style: styles.wrap, className: 'flexbox-fix' },
			        fields,
			        React__default.createElement(
			          'div',
			          { style: styles.toggle },
			          React__default.createElement(
			            'div',
			            { style: styles.icon, onClick: this.toggleViews, ref: function ref(icon) {
			                return _this2.icon = icon;
			              } },
			            React__default.createElement(_default$1, {
			              style: styles.svg,
			              onMouseOver: this.showHighlight,
			              onMouseEnter: this.showHighlight,
			              onMouseOut: this.hideHighlight
			            })
			          )
			        )
			      );
			    }
			  }], [{
			    key: 'getDerivedStateFromProps',
			    value: function getDerivedStateFromProps(nextProps, state) {
			      if (nextProps.hsl.a !== 1 && state.view === 'hex') {
			        return { view: 'rgb' };
			      }
			      return null;
			    }
			  }]);

			  return ChromeFields;
			}(React__default.Component);

			ChromeFields.defaultProps = {
			  view: "hex"
			};

			var ChromePointer = function ChromePointer() {
			  var styles = _default$2({
			    'default': {
			      picker: {
			        width: '12px',
			        height: '12px',
			        borderRadius: '6px',
			        transform: 'translate(-6px, -1px)',
			        backgroundColor: 'rgb(248, 248, 248)',
			        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'
			      }
			    }
			  });

			  return React__default.createElement('div', { style: styles.picker });
			};

			var ChromePointerCircle = function ChromePointerCircle() {
			  var styles = _default$2({
			    'default': {
			      picker: {
			        width: '12px',
			        height: '12px',
			        borderRadius: '6px',
			        boxShadow: 'inset 0 0 0 1px #fff',
			        transform: 'translate(-6px, -6px)'
			      }
			    }
			  });

			  return React__default.createElement('div', { style: styles.picker });
			};

			var Chrome = function Chrome(_ref) {
			  var width = _ref.width,
			      onChange = _ref.onChange,
			      disableAlpha = _ref.disableAlpha,
			      rgb = _ref.rgb,
			      hsl = _ref.hsl,
			      hsv = _ref.hsv,
			      hex = _ref.hex,
			      renderers = _ref.renderers,
			      _ref$styles = _ref.styles,
			      passedStyles = _ref$styles === undefined ? {} : _ref$styles,
			      _ref$className = _ref.className,
			      className = _ref$className === undefined ? '' : _ref$className,
			      defaultView = _ref.defaultView;

			  var styles = _default$2(merge$1({
			    'default': {
			      picker: {
			        width: width,
			        background: '#fff',
			        borderRadius: '2px',
			        boxShadow: '0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3)',
			        boxSizing: 'initial',
			        fontFamily: 'Menlo'
			      },
			      saturation: {
			        width: '100%',
			        paddingBottom: '55%',
			        position: 'relative',
			        borderRadius: '2px 2px 0 0',
			        overflow: 'hidden'
			      },
			      Saturation: {
			        radius: '2px 2px 0 0'
			      },
			      body: {
			        padding: '16px 16px 12px'
			      },
			      controls: {
			        display: 'flex'
			      },
			      color: {
			        width: '32px'
			      },
			      swatch: {
			        marginTop: '6px',
			        width: '16px',
			        height: '16px',
			        borderRadius: '8px',
			        position: 'relative',
			        overflow: 'hidden'
			      },
			      active: {
			        absolute: '0px 0px 0px 0px',
			        borderRadius: '8px',
			        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.1)',
			        background: 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + rgb.a + ')',
			        zIndex: '2'
			      },
			      toggles: {
			        flex: '1'
			      },
			      hue: {
			        height: '10px',
			        position: 'relative',
			        marginBottom: '8px'
			      },
			      Hue: {
			        radius: '2px'
			      },
			      alpha: {
			        height: '10px',
			        position: 'relative'
			      },
			      Alpha: {
			        radius: '2px'
			      }
			    },
			    'disableAlpha': {
			      color: {
			        width: '22px'
			      },
			      alpha: {
			        display: 'none'
			      },
			      hue: {
			        marginBottom: '0px'
			      },
			      swatch: {
			        width: '10px',
			        height: '10px',
			        marginTop: '0px'
			      }
			    }
			  }, passedStyles), { disableAlpha: disableAlpha });

			  return React__default.createElement(
			    'div',
			    { style: styles.picker, className: 'chrome-picker ' + className },
			    React__default.createElement(
			      'div',
			      { style: styles.saturation },
			      React__default.createElement(Saturation, {
			        style: styles.Saturation,
			        hsl: hsl,
			        hsv: hsv,
			        pointer: ChromePointerCircle,
			        onChange: onChange
			      })
			    ),
			    React__default.createElement(
			      'div',
			      { style: styles.body },
			      React__default.createElement(
			        'div',
			        { style: styles.controls, className: 'flexbox-fix' },
			        React__default.createElement(
			          'div',
			          { style: styles.color },
			          React__default.createElement(
			            'div',
			            { style: styles.swatch },
			            React__default.createElement('div', { style: styles.active }),
			            React__default.createElement(Checkboard, { renderers: renderers })
			          )
			        ),
			        React__default.createElement(
			          'div',
			          { style: styles.toggles },
			          React__default.createElement(
			            'div',
			            { style: styles.hue },
			            React__default.createElement(Hue, {
			              style: styles.Hue,
			              hsl: hsl,
			              pointer: ChromePointer,
			              onChange: onChange
			            })
			          ),
			          React__default.createElement(
			            'div',
			            { style: styles.alpha },
			            React__default.createElement(Alpha, {
			              style: styles.Alpha,
			              rgb: rgb,
			              hsl: hsl,
			              pointer: ChromePointer,
			              renderers: renderers,
			              onChange: onChange
			            })
			          )
			        )
			      ),
			      React__default.createElement(ChromeFields, {
			        rgb: rgb,
			        hsl: hsl,
			        hex: hex,
			        view: defaultView,
			        onChange: onChange,
			        disableAlpha: disableAlpha
			      })
			    )
			  );
			};

			Chrome.propTypes = {
			  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
			  disableAlpha: PropTypes.bool,
			  styles: PropTypes.object,
			  defaultView: PropTypes.oneOf(["hex", "rgb", "hsl"])
			};

			Chrome.defaultProps = {
			  width: 225,
			  disableAlpha: false,
			  styles: {}
			};

			ColorWrap(Chrome);

			var CompactColor = function CompactColor(_ref) {
			  var color = _ref.color,
			      _ref$onClick = _ref.onClick,
			      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,
			      onSwatchHover = _ref.onSwatchHover,
			      active = _ref.active;

			  var styles = _default$2({
			    'default': {
			      color: {
			        background: color,
			        width: '15px',
			        height: '15px',
			        float: 'left',
			        marginRight: '5px',
			        marginBottom: '5px',
			        position: 'relative',
			        cursor: 'pointer'
			      },
			      dot: {
			        absolute: '5px 5px 5px 5px',
			        background: getContrastingColor(color),
			        borderRadius: '50%',
			        opacity: '0'
			      }
			    },
			    'active': {
			      dot: {
			        opacity: '1'
			      }
			    },
			    'color-#FFFFFF': {
			      color: {
			        boxShadow: 'inset 0 0 0 1px #ddd'
			      },
			      dot: {
			        background: '#000'
			      }
			    },
			    'transparent': {
			      dot: {
			        background: '#000'
			      }
			    }
			  }, { active: active, 'color-#FFFFFF': color === '#FFFFFF', 'transparent': color === 'transparent' });

			  return React__default.createElement(
			    Swatch$1,
			    {
			      style: styles.color,
			      color: color,
			      onClick: onClick,
			      onHover: onSwatchHover,
			      focusStyle: { boxShadow: '0 0 4px ' + color }
			    },
			    React__default.createElement('div', { style: styles.dot })
			  );
			};

			var CompactFields = function CompactFields(_ref) {
			  var hex = _ref.hex,
			      rgb = _ref.rgb,
			      onChange = _ref.onChange;

			  var styles = _default$2({
			    'default': {
			      fields: {
			        display: 'flex',
			        paddingBottom: '6px',
			        paddingRight: '5px',
			        position: 'relative'
			      },
			      active: {
			        position: 'absolute',
			        top: '6px',
			        left: '5px',
			        height: '9px',
			        width: '9px',
			        background: hex
			      },
			      HEXwrap: {
			        flex: '6',
			        position: 'relative'
			      },
			      HEXinput: {
			        width: '80%',
			        padding: '0px',
			        paddingLeft: '20%',
			        border: 'none',
			        outline: 'none',
			        background: 'none',
			        fontSize: '12px',
			        color: '#333',
			        height: '16px'
			      },
			      HEXlabel: {
			        display: 'none'
			      },
			      RGBwrap: {
			        flex: '3',
			        position: 'relative'
			      },
			      RGBinput: {
			        width: '70%',
			        padding: '0px',
			        paddingLeft: '30%',
			        border: 'none',
			        outline: 'none',
			        background: 'none',
			        fontSize: '12px',
			        color: '#333',
			        height: '16px'
			      },
			      RGBlabel: {
			        position: 'absolute',
			        top: '3px',
			        left: '0px',
			        lineHeight: '16px',
			        textTransform: 'uppercase',
			        fontSize: '12px',
			        color: '#999'
			      }
			    }
			  });

			  var handleChange = function handleChange(data, e) {
			    if (data.r || data.g || data.b) {
			      onChange({
			        r: data.r || rgb.r,
			        g: data.g || rgb.g,
			        b: data.b || rgb.b,
			        source: 'rgb'
			      }, e);
			    } else {
			      onChange({
			        hex: data.hex,
			        source: 'hex'
			      }, e);
			    }
			  };

			  return React__default.createElement(
			    'div',
			    { style: styles.fields, className: 'flexbox-fix' },
			    React__default.createElement('div', { style: styles.active }),
			    React__default.createElement(EditableInput, {
			      style: { wrap: styles.HEXwrap, input: styles.HEXinput, label: styles.HEXlabel },
			      label: 'hex',
			      value: hex,
			      onChange: handleChange
			    }),
			    React__default.createElement(EditableInput, {
			      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
			      label: 'r',
			      value: rgb.r,
			      onChange: handleChange
			    }),
			    React__default.createElement(EditableInput, {
			      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
			      label: 'g',
			      value: rgb.g,
			      onChange: handleChange
			    }),
			    React__default.createElement(EditableInput, {
			      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
			      label: 'b',
			      value: rgb.b,
			      onChange: handleChange
			    })
			  );
			};

			var Compact = function Compact(_ref) {
			  var onChange = _ref.onChange,
			      onSwatchHover = _ref.onSwatchHover,
			      colors = _ref.colors,
			      hex = _ref.hex,
			      rgb = _ref.rgb,
			      _ref$styles = _ref.styles,
			      passedStyles = _ref$styles === undefined ? {} : _ref$styles,
			      _ref$className = _ref.className,
			      className = _ref$className === undefined ? '' : _ref$className;

			  var styles = _default$2(merge$1({
			    'default': {
			      Compact: {
			        background: '#f6f6f6',
			        radius: '4px'
			      },
			      compact: {
			        paddingTop: '5px',
			        paddingLeft: '5px',
			        boxSizing: 'initial',
			        width: '240px'
			      },
			      clear: {
			        clear: 'both'
			      }
			    }
			  }, passedStyles));

			  var handleChange = function handleChange(data, e) {
			    if (data.hex) {
			      isValidHex(data.hex) && onChange({
			        hex: data.hex,
			        source: 'hex'
			      }, e);
			    } else {
			      onChange(data, e);
			    }
			  };

			  return React__default.createElement(
			    Raised,
			    { style: styles.Compact, styles: passedStyles },
			    React__default.createElement(
			      'div',
			      { style: styles.compact, className: 'compact-picker ' + className },
			      React__default.createElement(
			        'div',
			        null,
			        map(colors, function (c) {
			          return React__default.createElement(CompactColor, {
			            key: c,
			            color: c,
			            active: c.toLowerCase() === hex,
			            onClick: handleChange,
			            onSwatchHover: onSwatchHover
			          });
			        }),
			        React__default.createElement('div', { style: styles.clear })
			      ),
			      React__default.createElement(CompactFields, { hex: hex, rgb: rgb, onChange: handleChange })
			    )
			  );
			};

			Compact.propTypes = {
			  colors: PropTypes.arrayOf(PropTypes.string),
			  styles: PropTypes.object
			};

			Compact.defaultProps = {
			  colors: ['#4D4D4D', '#999999', '#FFFFFF', '#F44E3B', '#FE9200', '#FCDC00', '#DBDF00', '#A4DD00', '#68CCCA', '#73D8FF', '#AEA1FF', '#FDA1FF', '#333333', '#808080', '#cccccc', '#D33115', '#E27300', '#FCC400', '#B0BC00', '#68BC00', '#16A5A5', '#009CE0', '#7B64FF', '#FA28FF', '#000000', '#666666', '#B3B3B3', '#9F0500', '#C45100', '#FB9E00', '#808900', '#194D33', '#0C797D', '#0062B1', '#653294', '#AB149E'],
			  styles: {}
			};

			ColorWrap(Compact);

			var GithubSwatch = function GithubSwatch(_ref) {
			  var hover = _ref.hover,
			      color = _ref.color,
			      onClick = _ref.onClick,
			      onSwatchHover = _ref.onSwatchHover;

			  var hoverSwatch = {
			    position: 'relative',
			    zIndex: '2',
			    outline: '2px solid #fff',
			    boxShadow: '0 0 5px 2px rgba(0,0,0,0.25)'
			  };

			  var styles = _default$2({
			    'default': {
			      swatch: {
			        width: '25px',
			        height: '25px',
			        fontSize: '0'
			      }
			    },
			    'hover': {
			      swatch: hoverSwatch
			    }
			  }, { hover: hover });

			  return React__default.createElement(
			    'div',
			    { style: styles.swatch },
			    React__default.createElement(Swatch$1, {
			      color: color,
			      onClick: onClick,
			      onHover: onSwatchHover,
			      focusStyle: hoverSwatch
			    })
			  );
			};

			var GithubSwatch$1 = handleHover(GithubSwatch);

			var Github = function Github(_ref) {
			  var width = _ref.width,
			      colors = _ref.colors,
			      onChange = _ref.onChange,
			      onSwatchHover = _ref.onSwatchHover,
			      triangle = _ref.triangle,
			      _ref$styles = _ref.styles,
			      passedStyles = _ref$styles === undefined ? {} : _ref$styles,
			      _ref$className = _ref.className,
			      className = _ref$className === undefined ? '' : _ref$className;

			  var styles = _default$2(merge$1({
			    'default': {
			      card: {
			        width: width,
			        background: '#fff',
			        border: '1px solid rgba(0,0,0,0.2)',
			        boxShadow: '0 3px 12px rgba(0,0,0,0.15)',
			        borderRadius: '4px',
			        position: 'relative',
			        padding: '5px',
			        display: 'flex',
			        flexWrap: 'wrap'
			      },
			      triangle: {
			        position: 'absolute',
			        border: '7px solid transparent',
			        borderBottomColor: '#fff'
			      },
			      triangleShadow: {
			        position: 'absolute',
			        border: '8px solid transparent',
			        borderBottomColor: 'rgba(0,0,0,0.15)'
			      }
			    },
			    'hide-triangle': {
			      triangle: {
			        display: 'none'
			      },
			      triangleShadow: {
			        display: 'none'
			      }
			    },
			    'top-left-triangle': {
			      triangle: {
			        top: '-14px',
			        left: '10px'
			      },
			      triangleShadow: {
			        top: '-16px',
			        left: '9px'
			      }
			    },
			    'top-right-triangle': {
			      triangle: {
			        top: '-14px',
			        right: '10px'
			      },
			      triangleShadow: {
			        top: '-16px',
			        right: '9px'
			      }
			    },
			    'bottom-left-triangle': {
			      triangle: {
			        top: '35px',
			        left: '10px',
			        transform: 'rotate(180deg)'
			      },
			      triangleShadow: {
			        top: '37px',
			        left: '9px',
			        transform: 'rotate(180deg)'
			      }
			    },
			    'bottom-right-triangle': {
			      triangle: {
			        top: '35px',
			        right: '10px',
			        transform: 'rotate(180deg)'
			      },
			      triangleShadow: {
			        top: '37px',
			        right: '9px',
			        transform: 'rotate(180deg)'
			      }
			    }
			  }, passedStyles), {
			    'hide-triangle': triangle === 'hide',
			    'top-left-triangle': triangle === 'top-left',
			    'top-right-triangle': triangle === 'top-right',
			    'bottom-left-triangle': triangle === 'bottom-left',
			    'bottom-right-triangle': triangle === 'bottom-right'
			  });

			  var handleChange = function handleChange(hex, e) {
			    return onChange({ hex: hex, source: 'hex' }, e);
			  };

			  return React__default.createElement(
			    'div',
			    { style: styles.card, className: 'github-picker ' + className },
			    React__default.createElement('div', { style: styles.triangleShadow }),
			    React__default.createElement('div', { style: styles.triangle }),
			    map(colors, function (c) {
			      return React__default.createElement(GithubSwatch$1, {
			        color: c,
			        key: c,
			        onClick: handleChange,
			        onSwatchHover: onSwatchHover
			      });
			    })
			  );
			};

			Github.propTypes = {
			  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
			  colors: PropTypes.arrayOf(PropTypes.string),
			  triangle: PropTypes.oneOf(['hide', 'top-left', 'top-right', 'bottom-left', 'bottom-right']),
			  styles: PropTypes.object
			};

			Github.defaultProps = {
			  width: 200,
			  colors: ['#B80000', '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', '#004DCF', '#5300EB', '#EB9694', '#FAD0C3', '#FEF3BD', '#C1E1C5', '#BEDADC', '#C4DEF6', '#BED3F3', '#D4C4FB'],
			  triangle: 'top-left',
			  styles: {}
			};

			ColorWrap(Github);

			var SliderPointer$1 = function SliderPointer(_ref) {
			  var direction = _ref.direction;

			  var styles = _default$2({
			    'default': {
			      picker: {
			        width: '18px',
			        height: '18px',
			        borderRadius: '50%',
			        transform: 'translate(-9px, -1px)',
			        backgroundColor: 'rgb(248, 248, 248)',
			        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'
			      }
			    },
			    'vertical': {
			      picker: {
			        transform: 'translate(-3px, -9px)'
			      }
			    }
			  }, { vertical: direction === 'vertical' });

			  return React__default.createElement('div', { style: styles.picker });
			};

			var _extends$3 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

			var HuePicker = function HuePicker(_ref) {
			  var width = _ref.width,
			      height = _ref.height,
			      onChange = _ref.onChange,
			      hsl = _ref.hsl,
			      direction = _ref.direction,
			      pointer = _ref.pointer,
			      _ref$styles = _ref.styles,
			      passedStyles = _ref$styles === undefined ? {} : _ref$styles,
			      _ref$className = _ref.className,
			      className = _ref$className === undefined ? '' : _ref$className;

			  var styles = _default$2(merge$1({
			    'default': {
			      picker: {
			        position: 'relative',
			        width: width,
			        height: height
			      },
			      hue: {
			        radius: '2px'
			      }
			    }
			  }, passedStyles));

			  // Overwrite to provide pure hue color
			  var handleChange = function handleChange(data) {
			    return onChange({ a: 1, h: data.h, l: 0.5, s: 1 });
			  };

			  return React__default.createElement(
			    'div',
			    { style: styles.picker, className: 'hue-picker ' + className },
			    React__default.createElement(Hue, _extends$3({}, styles.hue, {
			      hsl: hsl,
			      pointer: pointer,
			      onChange: handleChange,
			      direction: direction
			    }))
			  );
			};

			HuePicker.propTypes = {
			  styles: PropTypes.object
			};
			HuePicker.defaultProps = {
			  width: '316px',
			  height: '16px',
			  direction: 'horizontal',
			  pointer: SliderPointer$1,
			  styles: {}
			};

			ColorWrap(HuePicker);

			var Material = function Material(_ref) {
			  var onChange = _ref.onChange,
			      hex = _ref.hex,
			      rgb = _ref.rgb,
			      _ref$styles = _ref.styles,
			      passedStyles = _ref$styles === undefined ? {} : _ref$styles,
			      _ref$className = _ref.className,
			      className = _ref$className === undefined ? '' : _ref$className;

			  var styles = _default$2(merge$1({
			    'default': {
			      material: {
			        width: '98px',
			        height: '98px',
			        padding: '16px',
			        fontFamily: 'Roboto'
			      },
			      HEXwrap: {
			        position: 'relative'
			      },
			      HEXinput: {
			        width: '100%',
			        marginTop: '12px',
			        fontSize: '15px',
			        color: '#333',
			        padding: '0px',
			        border: '0px',
			        borderBottom: '2px solid ' + hex,
			        outline: 'none',
			        height: '30px'
			      },
			      HEXlabel: {
			        position: 'absolute',
			        top: '0px',
			        left: '0px',
			        fontSize: '11px',
			        color: '#999999',
			        textTransform: 'capitalize'
			      },
			      Hex: {
			        style: {}
			      },
			      RGBwrap: {
			        position: 'relative'
			      },
			      RGBinput: {
			        width: '100%',
			        marginTop: '12px',
			        fontSize: '15px',
			        color: '#333',
			        padding: '0px',
			        border: '0px',
			        borderBottom: '1px solid #eee',
			        outline: 'none',
			        height: '30px'
			      },
			      RGBlabel: {
			        position: 'absolute',
			        top: '0px',
			        left: '0px',
			        fontSize: '11px',
			        color: '#999999',
			        textTransform: 'capitalize'
			      },
			      split: {
			        display: 'flex',
			        marginRight: '-10px',
			        paddingTop: '11px'
			      },
			      third: {
			        flex: '1',
			        paddingRight: '10px'
			      }
			    }
			  }, passedStyles));

			  var handleChange = function handleChange(data, e) {
			    if (data.hex) {
			      isValidHex(data.hex) && onChange({
			        hex: data.hex,
			        source: 'hex'
			      }, e);
			    } else if (data.r || data.g || data.b) {
			      onChange({
			        r: data.r || rgb.r,
			        g: data.g || rgb.g,
			        b: data.b || rgb.b,
			        source: 'rgb'
			      }, e);
			    }
			  };

			  return React__default.createElement(
			    Raised,
			    { styles: passedStyles },
			    React__default.createElement(
			      'div',
			      { style: styles.material, className: 'material-picker ' + className },
			      React__default.createElement(EditableInput, {
			        style: { wrap: styles.HEXwrap, input: styles.HEXinput, label: styles.HEXlabel },
			        label: 'hex',
			        value: hex,
			        onChange: handleChange
			      }),
			      React__default.createElement(
			        'div',
			        { style: styles.split, className: 'flexbox-fix' },
			        React__default.createElement(
			          'div',
			          { style: styles.third },
			          React__default.createElement(EditableInput, {
			            style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
			            label: 'r', value: rgb.r,
			            onChange: handleChange
			          })
			        ),
			        React__default.createElement(
			          'div',
			          { style: styles.third },
			          React__default.createElement(EditableInput, {
			            style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
			            label: 'g',
			            value: rgb.g,
			            onChange: handleChange
			          })
			        ),
			        React__default.createElement(
			          'div',
			          { style: styles.third },
			          React__default.createElement(EditableInput, {
			            style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
			            label: 'b',
			            value: rgb.b,
			            onChange: handleChange
			          })
			        )
			      )
			    )
			  );
			};

			ColorWrap(Material);

			var PhotoshopPicker = function PhotoshopPicker(_ref) {
			  var onChange = _ref.onChange,
			      rgb = _ref.rgb,
			      hsv = _ref.hsv,
			      hex = _ref.hex;

			  var styles = _default$2({
			    'default': {
			      fields: {
			        paddingTop: '5px',
			        paddingBottom: '9px',
			        width: '80px',
			        position: 'relative'
			      },
			      divider: {
			        height: '5px'
			      },
			      RGBwrap: {
			        position: 'relative'
			      },
			      RGBinput: {
			        marginLeft: '40%',
			        width: '40%',
			        height: '18px',
			        border: '1px solid #888888',
			        boxShadow: 'inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC',
			        marginBottom: '5px',
			        fontSize: '13px',
			        paddingLeft: '3px',
			        marginRight: '10px'
			      },
			      RGBlabel: {
			        left: '0px',
			        top: '0px',
			        width: '34px',
			        textTransform: 'uppercase',
			        fontSize: '13px',
			        height: '18px',
			        lineHeight: '22px',
			        position: 'absolute'
			      },
			      HEXwrap: {
			        position: 'relative'
			      },
			      HEXinput: {
			        marginLeft: '20%',
			        width: '80%',
			        height: '18px',
			        border: '1px solid #888888',
			        boxShadow: 'inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC',
			        marginBottom: '6px',
			        fontSize: '13px',
			        paddingLeft: '3px'
			      },
			      HEXlabel: {
			        position: 'absolute',
			        top: '0px',
			        left: '0px',
			        width: '14px',
			        textTransform: 'uppercase',
			        fontSize: '13px',
			        height: '18px',
			        lineHeight: '22px'
			      },
			      fieldSymbols: {
			        position: 'absolute',
			        top: '5px',
			        right: '-7px',
			        fontSize: '13px'
			      },
			      symbol: {
			        height: '20px',
			        lineHeight: '22px',
			        paddingBottom: '7px'
			      }
			    }
			  });

			  var handleChange = function handleChange(data, e) {
			    if (data['#']) {
			      isValidHex(data['#']) && onChange({
			        hex: data['#'],
			        source: 'hex'
			      }, e);
			    } else if (data.r || data.g || data.b) {
			      onChange({
			        r: data.r || rgb.r,
			        g: data.g || rgb.g,
			        b: data.b || rgb.b,
			        source: 'rgb'
			      }, e);
			    } else if (data.h || data.s || data.v) {
			      onChange({
			        h: data.h || hsv.h,
			        s: data.s || hsv.s,
			        v: data.v || hsv.v,
			        source: 'hsv'
			      }, e);
			    }
			  };

			  return React__default.createElement(
			    'div',
			    { style: styles.fields },
			    React__default.createElement(EditableInput, {
			      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
			      label: 'h',
			      value: Math.round(hsv.h),
			      onChange: handleChange
			    }),
			    React__default.createElement(EditableInput, {
			      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
			      label: 's',
			      value: Math.round(hsv.s * 100),
			      onChange: handleChange
			    }),
			    React__default.createElement(EditableInput, {
			      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
			      label: 'v',
			      value: Math.round(hsv.v * 100),
			      onChange: handleChange
			    }),
			    React__default.createElement('div', { style: styles.divider }),
			    React__default.createElement(EditableInput, {
			      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
			      label: 'r',
			      value: rgb.r,
			      onChange: handleChange
			    }),
			    React__default.createElement(EditableInput, {
			      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
			      label: 'g',
			      value: rgb.g,
			      onChange: handleChange
			    }),
			    React__default.createElement(EditableInput, {
			      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },
			      label: 'b',
			      value: rgb.b,
			      onChange: handleChange
			    }),
			    React__default.createElement('div', { style: styles.divider }),
			    React__default.createElement(EditableInput, {
			      style: { wrap: styles.HEXwrap, input: styles.HEXinput, label: styles.HEXlabel },
			      label: '#',
			      value: hex.replace('#', ''),
			      onChange: handleChange
			    }),
			    React__default.createElement(
			      'div',
			      { style: styles.fieldSymbols },
			      React__default.createElement(
			        'div',
			        { style: styles.symbol },
			        '\xB0'
			      ),
			      React__default.createElement(
			        'div',
			        { style: styles.symbol },
			        '%'
			      ),
			      React__default.createElement(
			        'div',
			        { style: styles.symbol },
			        '%'
			      )
			    )
			  );
			};

			var PhotoshopPointerCircle$1 = function PhotoshopPointerCircle(_ref) {
			  var hsl = _ref.hsl;

			  var styles = _default$2({
			    'default': {
			      picker: {
			        width: '12px',
			        height: '12px',
			        borderRadius: '6px',
			        boxShadow: 'inset 0 0 0 1px #fff',
			        transform: 'translate(-6px, -6px)'
			      }
			    },
			    'black-outline': {
			      picker: {
			        boxShadow: 'inset 0 0 0 1px #000'
			      }
			    }
			  }, { 'black-outline': hsl.l > 0.5 });

			  return React__default.createElement('div', { style: styles.picker });
			};

			var PhotoshopPointerCircle = function PhotoshopPointerCircle() {
			  var styles = _default$2({
			    'default': {
			      triangle: {
			        width: 0,
			        height: 0,
			        borderStyle: 'solid',
			        borderWidth: '4px 0 4px 6px',
			        borderColor: 'transparent transparent transparent #fff',
			        position: 'absolute',
			        top: '1px',
			        left: '1px'
			      },
			      triangleBorder: {
			        width: 0,
			        height: 0,
			        borderStyle: 'solid',
			        borderWidth: '5px 0 5px 8px',
			        borderColor: 'transparent transparent transparent #555'
			      },

			      left: {
			        Extend: 'triangleBorder',
			        transform: 'translate(-13px, -4px)'
			      },
			      leftInside: {
			        Extend: 'triangle',
			        transform: 'translate(-8px, -5px)'
			      },

			      right: {
			        Extend: 'triangleBorder',
			        transform: 'translate(20px, -14px) rotate(180deg)'
			      },
			      rightInside: {
			        Extend: 'triangle',
			        transform: 'translate(-8px, -5px)'
			      }
			    }
			  });

			  return React__default.createElement(
			    'div',
			    { style: styles.pointer },
			    React__default.createElement(
			      'div',
			      { style: styles.left },
			      React__default.createElement('div', { style: styles.leftInside })
			    ),
			    React__default.createElement(
			      'div',
			      { style: styles.right },
			      React__default.createElement('div', { style: styles.rightInside })
			    )
			  );
			};

			var PhotoshopButton = function PhotoshopButton(_ref) {
			  var onClick = _ref.onClick,
			      label = _ref.label,
			      children = _ref.children,
			      active = _ref.active;

			  var styles = _default$2({
			    'default': {
			      button: {
			        backgroundImage: 'linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%)',
			        border: '1px solid #878787',
			        borderRadius: '2px',
			        height: '20px',
			        boxShadow: '0 1px 0 0 #EAEAEA',
			        fontSize: '14px',
			        color: '#000',
			        lineHeight: '20px',
			        textAlign: 'center',
			        marginBottom: '10px',
			        cursor: 'pointer'
			      }
			    },
			    'active': {
			      button: {
			        boxShadow: '0 0 0 1px #878787'
			      }
			    }
			  }, { active: active });

			  return React__default.createElement(
			    'div',
			    { style: styles.button, onClick: onClick },
			    label || children
			  );
			};

			var PhotoshopPreviews = function PhotoshopPreviews(_ref) {
			  var rgb = _ref.rgb,
			      currentColor = _ref.currentColor;

			  var styles = _default$2({
			    'default': {
			      swatches: {
			        border: '1px solid #B3B3B3',
			        borderBottom: '1px solid #F0F0F0',
			        marginBottom: '2px',
			        marginTop: '1px'
			      },
			      new: {
			        height: '34px',
			        background: 'rgb(' + rgb.r + ',' + rgb.g + ', ' + rgb.b + ')',
			        boxShadow: 'inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000'
			      },
			      current: {
			        height: '34px',
			        background: currentColor,
			        boxShadow: 'inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000'
			      },
			      label: {
			        fontSize: '14px',
			        color: '#000',
			        textAlign: 'center'
			      }
			    }
			  });

			  return React__default.createElement(
			    'div',
			    null,
			    React__default.createElement(
			      'div',
			      { style: styles.label },
			      'new'
			    ),
			    React__default.createElement(
			      'div',
			      { style: styles.swatches },
			      React__default.createElement('div', { style: styles.new }),
			      React__default.createElement('div', { style: styles.current })
			    ),
			    React__default.createElement(
			      'div',
			      { style: styles.label },
			      'current'
			    )
			  );
			};

			var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

			function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

			function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

			function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

			var Photoshop = function (_React$Component) {
			  _inherits(Photoshop, _React$Component);

			  function Photoshop(props) {
			    _classCallCheck(this, Photoshop);

			    var _this = _possibleConstructorReturn(this, (Photoshop.__proto__ || Object.getPrototypeOf(Photoshop)).call(this));

			    _this.state = {
			      currentColor: props.hex
			    };
			    return _this;
			  }

			  _createClass(Photoshop, [{
			    key: 'render',
			    value: function render() {
			      var _props = this.props,
			          _props$styles = _props.styles,
			          passedStyles = _props$styles === undefined ? {} : _props$styles,
			          _props$className = _props.className,
			          className = _props$className === undefined ? '' : _props$className;

			      var styles = _default$2(merge$1({
			        'default': {
			          picker: {
			            background: '#DCDCDC',
			            borderRadius: '4px',
			            boxShadow: '0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15)',
			            boxSizing: 'initial',
			            width: '513px'
			          },
			          head: {
			            backgroundImage: 'linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%)',
			            borderBottom: '1px solid #B1B1B1',
			            boxShadow: 'inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02)',
			            height: '23px',
			            lineHeight: '24px',
			            borderRadius: '4px 4px 0 0',
			            fontSize: '13px',
			            color: '#4D4D4D',
			            textAlign: 'center'
			          },
			          body: {
			            padding: '15px 15px 0',
			            display: 'flex'
			          },
			          saturation: {
			            width: '256px',
			            height: '256px',
			            position: 'relative',
			            border: '2px solid #B3B3B3',
			            borderBottom: '2px solid #F0F0F0',
			            overflow: 'hidden'
			          },
			          hue: {
			            position: 'relative',
			            height: '256px',
			            width: '19px',
			            marginLeft: '10px',
			            border: '2px solid #B3B3B3',
			            borderBottom: '2px solid #F0F0F0'
			          },
			          controls: {
			            width: '180px',
			            marginLeft: '10px'
			          },
			          top: {
			            display: 'flex'
			          },
			          previews: {
			            width: '60px'
			          },
			          actions: {
			            flex: '1',
			            marginLeft: '20px'
			          }
			        }
			      }, passedStyles));

			      return React__default.createElement(
			        'div',
			        { style: styles.picker, className: 'photoshop-picker ' + className },
			        React__default.createElement(
			          'div',
			          { style: styles.head },
			          this.props.header
			        ),
			        React__default.createElement(
			          'div',
			          { style: styles.body, className: 'flexbox-fix' },
			          React__default.createElement(
			            'div',
			            { style: styles.saturation },
			            React__default.createElement(Saturation, {
			              hsl: this.props.hsl,
			              hsv: this.props.hsv,
			              pointer: PhotoshopPointerCircle$1,
			              onChange: this.props.onChange
			            })
			          ),
			          React__default.createElement(
			            'div',
			            { style: styles.hue },
			            React__default.createElement(Hue, {
			              direction: 'vertical',
			              hsl: this.props.hsl,
			              pointer: PhotoshopPointerCircle,
			              onChange: this.props.onChange
			            })
			          ),
			          React__default.createElement(
			            'div',
			            { style: styles.controls },
			            React__default.createElement(
			              'div',
			              { style: styles.top, className: 'flexbox-fix' },
			              React__default.createElement(
			                'div',
			                { style: styles.previews },
			                React__default.createElement(PhotoshopPreviews, {
			                  rgb: this.props.rgb,
			                  currentColor: this.state.currentColor
			                })
			              ),
			              React__default.createElement(
			                'div',
			                { style: styles.actions },
			                React__default.createElement(PhotoshopButton, { label: 'OK', onClick: this.props.onAccept, active: true }),
			                React__default.createElement(PhotoshopButton, { label: 'Cancel', onClick: this.props.onCancel }),
			                React__default.createElement(PhotoshopPicker, {
			                  onChange: this.props.onChange,
			                  rgb: this.props.rgb,
			                  hsv: this.props.hsv,
			                  hex: this.props.hex
			                })
			              )
			            )
			          )
			        )
			      );
			    }
			  }]);

			  return Photoshop;
			}(React__default.Component);

			Photoshop.propTypes = {
			  header: PropTypes.string,
			  styles: PropTypes.object
			};

			Photoshop.defaultProps = {
			  header: 'Color Picker',
			  styles: {}
			};

			ColorWrap(Photoshop);

			/* eslint-disable no-param-reassign */

			var SketchFields = function SketchFields(_ref) {
			  var onChange = _ref.onChange,
			      rgb = _ref.rgb,
			      hsl = _ref.hsl,
			      hex = _ref.hex,
			      disableAlpha = _ref.disableAlpha;

			  var styles = _default$2({
			    'default': {
			      fields: {
			        display: 'flex',
			        paddingTop: '4px'
			      },
			      single: {
			        flex: '1',
			        paddingLeft: '6px'
			      },
			      alpha: {
			        flex: '1',
			        paddingLeft: '6px'
			      },
			      double: {
			        flex: '2'
			      },
			      input: {
			        width: '80%',
			        padding: '4px 10% 3px',
			        border: 'none',
			        boxShadow: 'inset 0 0 0 1px #ccc',
			        fontSize: '11px'
			      },
			      label: {
			        display: 'block',
			        textAlign: 'center',
			        fontSize: '11px',
			        color: '#222',
			        paddingTop: '3px',
			        paddingBottom: '4px',
			        textTransform: 'capitalize'
			      }
			    },
			    'disableAlpha': {
			      alpha: {
			        display: 'none'
			      }
			    }
			  }, { disableAlpha: disableAlpha });

			  var handleChange = function handleChange(data, e) {
			    if (data.hex) {
			      isValidHex(data.hex) && onChange({
			        hex: data.hex,
			        source: 'hex'
			      }, e);
			    } else if (data.r || data.g || data.b) {
			      onChange({
			        r: data.r || rgb.r,
			        g: data.g || rgb.g,
			        b: data.b || rgb.b,
			        a: rgb.a,
			        source: 'rgb'
			      }, e);
			    } else if (data.a) {
			      if (data.a < 0) {
			        data.a = 0;
			      } else if (data.a > 100) {
			        data.a = 100;
			      }

			      data.a /= 100;
			      onChange({
			        h: hsl.h,
			        s: hsl.s,
			        l: hsl.l,
			        a: data.a,
			        source: 'rgb'
			      }, e);
			    }
			  };

			  return React__default.createElement(
			    'div',
			    { style: styles.fields, className: 'flexbox-fix' },
			    React__default.createElement(
			      'div',
			      { style: styles.double },
			      React__default.createElement(EditableInput, {
			        style: { input: styles.input, label: styles.label },
			        label: 'hex',
			        value: hex.replace('#', ''),
			        onChange: handleChange
			      })
			    ),
			    React__default.createElement(
			      'div',
			      { style: styles.single },
			      React__default.createElement(EditableInput, {
			        style: { input: styles.input, label: styles.label },
			        label: 'r',
			        value: rgb.r,
			        onChange: handleChange,
			        dragLabel: 'true',
			        dragMax: '255'
			      })
			    ),
			    React__default.createElement(
			      'div',
			      { style: styles.single },
			      React__default.createElement(EditableInput, {
			        style: { input: styles.input, label: styles.label },
			        label: 'g',
			        value: rgb.g,
			        onChange: handleChange,
			        dragLabel: 'true',
			        dragMax: '255'
			      })
			    ),
			    React__default.createElement(
			      'div',
			      { style: styles.single },
			      React__default.createElement(EditableInput, {
			        style: { input: styles.input, label: styles.label },
			        label: 'b',
			        value: rgb.b,
			        onChange: handleChange,
			        dragLabel: 'true',
			        dragMax: '255'
			      })
			    ),
			    React__default.createElement(
			      'div',
			      { style: styles.alpha },
			      React__default.createElement(EditableInput, {
			        style: { input: styles.input, label: styles.label },
			        label: 'a',
			        value: Math.round(rgb.a * 100),
			        onChange: handleChange,
			        dragLabel: 'true',
			        dragMax: '100'
			      })
			    )
			  );
			};

			var _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

			var SketchPresetColors = function SketchPresetColors(_ref) {
			  var colors = _ref.colors,
			      _ref$onClick = _ref.onClick,
			      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,
			      onSwatchHover = _ref.onSwatchHover;

			  var styles = _default$2({
			    'default': {
			      colors: {
			        margin: '0 -10px',
			        padding: '10px 0 0 10px',
			        borderTop: '1px solid #eee',
			        display: 'flex',
			        flexWrap: 'wrap',
			        position: 'relative'
			      },
			      swatchWrap: {
			        width: '16px',
			        height: '16px',
			        margin: '0 10px 10px 0'
			      },
			      swatch: {
			        borderRadius: '3px',
			        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15)'
			      }
			    },
			    'no-presets': {
			      colors: {
			        display: 'none'
			      }
			    }
			  }, {
			    'no-presets': !colors || !colors.length
			  });

			  var handleClick = function handleClick(hex, e) {
			    onClick({
			      hex: hex,
			      source: 'hex'
			    }, e);
			  };

			  return React__default.createElement(
			    'div',
			    { style: styles.colors, className: 'flexbox-fix' },
			    colors.map(function (colorObjOrString) {
			      var c = typeof colorObjOrString === 'string' ? { color: colorObjOrString } : colorObjOrString;
			      var key = '' + c.color + (c.title || '');
			      return React__default.createElement(
			        'div',
			        { key: key, style: styles.swatchWrap },
			        React__default.createElement(Swatch$1, _extends$2({}, c, {
			          style: styles.swatch,
			          onClick: handleClick,
			          onHover: onSwatchHover,
			          focusStyle: {
			            boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px ' + c.color
			          }
			        }))
			      );
			    })
			  );
			};

			SketchPresetColors.propTypes = {
			  colors: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
			    color: PropTypes.string,
			    title: PropTypes.string
			  })])).isRequired
			};

			var _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

			var Sketch = function Sketch(_ref) {
			  var width = _ref.width,
			      rgb = _ref.rgb,
			      hex = _ref.hex,
			      hsv = _ref.hsv,
			      hsl = _ref.hsl,
			      onChange = _ref.onChange,
			      onSwatchHover = _ref.onSwatchHover,
			      disableAlpha = _ref.disableAlpha,
			      presetColors = _ref.presetColors,
			      renderers = _ref.renderers,
			      _ref$styles = _ref.styles,
			      passedStyles = _ref$styles === undefined ? {} : _ref$styles,
			      _ref$className = _ref.className,
			      className = _ref$className === undefined ? '' : _ref$className;

			  var styles = _default$2(merge$1({
			    'default': _extends$1({
			      picker: {
			        width: width,
			        padding: '10px 10px 0',
			        boxSizing: 'initial',
			        background: '#fff',
			        borderRadius: '4px',
			        boxShadow: '0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15)'
			      },
			      saturation: {
			        width: '100%',
			        paddingBottom: '75%',
			        position: 'relative',
			        overflow: 'hidden'
			      },
			      Saturation: {
			        radius: '3px',
			        shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'
			      },
			      controls: {
			        display: 'flex'
			      },
			      sliders: {
			        padding: '4px 0',
			        flex: '1'
			      },
			      color: {
			        width: '24px',
			        height: '24px',
			        position: 'relative',
			        marginTop: '4px',
			        marginLeft: '4px',
			        borderRadius: '3px'
			      },
			      activeColor: {
			        absolute: '0px 0px 0px 0px',
			        borderRadius: '2px',
			        background: 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + rgb.a + ')',
			        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'
			      },
			      hue: {
			        position: 'relative',
			        height: '10px',
			        overflow: 'hidden'
			      },
			      Hue: {
			        radius: '2px',
			        shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'
			      },

			      alpha: {
			        position: 'relative',
			        height: '10px',
			        marginTop: '4px',
			        overflow: 'hidden'
			      },
			      Alpha: {
			        radius: '2px',
			        shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'
			      }
			    }, passedStyles),
			    'disableAlpha': {
			      color: {
			        height: '10px'
			      },
			      hue: {
			        height: '10px'
			      },
			      alpha: {
			        display: 'none'
			      }
			    }
			  }, passedStyles), { disableAlpha: disableAlpha });

			  return React__default.createElement(
			    'div',
			    { style: styles.picker, className: 'sketch-picker ' + className },
			    React__default.createElement(
			      'div',
			      { style: styles.saturation },
			      React__default.createElement(Saturation, {
			        style: styles.Saturation,
			        hsl: hsl,
			        hsv: hsv,
			        onChange: onChange
			      })
			    ),
			    React__default.createElement(
			      'div',
			      { style: styles.controls, className: 'flexbox-fix' },
			      React__default.createElement(
			        'div',
			        { style: styles.sliders },
			        React__default.createElement(
			          'div',
			          { style: styles.hue },
			          React__default.createElement(Hue, {
			            style: styles.Hue,
			            hsl: hsl,
			            onChange: onChange
			          })
			        ),
			        React__default.createElement(
			          'div',
			          { style: styles.alpha },
			          React__default.createElement(Alpha, {
			            style: styles.Alpha,
			            rgb: rgb,
			            hsl: hsl,
			            renderers: renderers,
			            onChange: onChange
			          })
			        )
			      ),
			      React__default.createElement(
			        'div',
			        { style: styles.color },
			        React__default.createElement(Checkboard, null),
			        React__default.createElement('div', { style: styles.activeColor })
			      )
			    ),
			    React__default.createElement(SketchFields, {
			      rgb: rgb,
			      hsl: hsl,
			      hex: hex,
			      onChange: onChange,
			      disableAlpha: disableAlpha
			    }),
			    React__default.createElement(SketchPresetColors, {
			      colors: presetColors,
			      onClick: onChange,
			      onSwatchHover: onSwatchHover
			    })
			  );
			};

			Sketch.propTypes = {
			  disableAlpha: PropTypes.bool,
			  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
			  styles: PropTypes.object
			};

			Sketch.defaultProps = {
			  disableAlpha: false,
			  width: 200,
			  styles: {},
			  presetColors: ['#D0021B', '#F5A623', '#F8E71C', '#8B572A', '#7ED321', '#417505', '#BD10E0', '#9013FE', '#4A90E2', '#50E3C2', '#B8E986', '#000000', '#4A4A4A', '#9B9B9B', '#FFFFFF']
			};

			var SketchPicker = ColorWrap(Sketch);

			var SliderSwatch = function SliderSwatch(_ref) {
			  var hsl = _ref.hsl,
			      offset = _ref.offset,
			      _ref$onClick = _ref.onClick,
			      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,
			      active = _ref.active,
			      first = _ref.first,
			      last = _ref.last;

			  var styles = _default$2({
			    'default': {
			      swatch: {
			        height: '12px',
			        background: 'hsl(' + hsl.h + ', 50%, ' + offset * 100 + '%)',
			        cursor: 'pointer'
			      }
			    },
			    'first': {
			      swatch: {
			        borderRadius: '2px 0 0 2px'
			      }
			    },
			    'last': {
			      swatch: {
			        borderRadius: '0 2px 2px 0'
			      }
			    },
			    'active': {
			      swatch: {
			        transform: 'scaleY(1.8)',
			        borderRadius: '3.6px/2px'
			      }
			    }
			  }, { active: active, first: first, last: last });

			  var handleClick = function handleClick(e) {
			    return onClick({
			      h: hsl.h,
			      s: 0.5,
			      l: offset,
			      source: 'hsl'
			    }, e);
			  };

			  return React__default.createElement('div', { style: styles.swatch, onClick: handleClick });
			};

			var SliderSwatches = function SliderSwatches(_ref) {
			  var onClick = _ref.onClick,
			      hsl = _ref.hsl;

			  var styles = _default$2({
			    'default': {
			      swatches: {
			        marginTop: '20px'
			      },
			      swatch: {
			        boxSizing: 'border-box',
			        width: '20%',
			        paddingRight: '1px',
			        float: 'left'
			      },
			      clear: {
			        clear: 'both'
			      }
			    }
			  });

			  // Acceptible difference in floating point equality
			  var epsilon = 0.1;

			  return React__default.createElement(
			    'div',
			    { style: styles.swatches },
			    React__default.createElement(
			      'div',
			      { style: styles.swatch },
			      React__default.createElement(SliderSwatch, {
			        hsl: hsl,
			        offset: '.80',
			        active: Math.abs(hsl.l - 0.80) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,
			        onClick: onClick,
			        first: true
			      })
			    ),
			    React__default.createElement(
			      'div',
			      { style: styles.swatch },
			      React__default.createElement(SliderSwatch, {
			        hsl: hsl,
			        offset: '.65',
			        active: Math.abs(hsl.l - 0.65) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,
			        onClick: onClick
			      })
			    ),
			    React__default.createElement(
			      'div',
			      { style: styles.swatch },
			      React__default.createElement(SliderSwatch, {
			        hsl: hsl,
			        offset: '.50',
			        active: Math.abs(hsl.l - 0.50) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,
			        onClick: onClick
			      })
			    ),
			    React__default.createElement(
			      'div',
			      { style: styles.swatch },
			      React__default.createElement(SliderSwatch, {
			        hsl: hsl,
			        offset: '.35',
			        active: Math.abs(hsl.l - 0.35) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,
			        onClick: onClick
			      })
			    ),
			    React__default.createElement(
			      'div',
			      { style: styles.swatch },
			      React__default.createElement(SliderSwatch, {
			        hsl: hsl,
			        offset: '.20',
			        active: Math.abs(hsl.l - 0.20) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,
			        onClick: onClick,
			        last: true
			      })
			    ),
			    React__default.createElement('div', { style: styles.clear })
			  );
			};

			var SliderPointer = function SliderPointer() {
			  var styles = _default$2({
			    'default': {
			      picker: {
			        width: '14px',
			        height: '14px',
			        borderRadius: '6px',
			        transform: 'translate(-7px, -1px)',
			        backgroundColor: 'rgb(248, 248, 248)',
			        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'
			      }
			    }
			  });

			  return React__default.createElement('div', { style: styles.picker });
			};

			var Slider = function Slider(_ref) {
			  var hsl = _ref.hsl,
			      onChange = _ref.onChange,
			      pointer = _ref.pointer,
			      _ref$styles = _ref.styles,
			      passedStyles = _ref$styles === undefined ? {} : _ref$styles,
			      _ref$className = _ref.className,
			      className = _ref$className === undefined ? '' : _ref$className;

			  var styles = _default$2(merge$1({
			    'default': {
			      hue: {
			        height: '12px',
			        position: 'relative'
			      },
			      Hue: {
			        radius: '2px'
			      }
			    }
			  }, passedStyles));

			  return React__default.createElement(
			    'div',
			    { style: styles.wrap || {}, className: 'slider-picker ' + className },
			    React__default.createElement(
			      'div',
			      { style: styles.hue },
			      React__default.createElement(Hue, {
			        style: styles.Hue,
			        hsl: hsl,
			        pointer: pointer,
			        onChange: onChange
			      })
			    ),
			    React__default.createElement(
			      'div',
			      { style: styles.swatches },
			      React__default.createElement(SliderSwatches, { hsl: hsl, onClick: onChange })
			    )
			  );
			};

			Slider.propTypes = {
			  styles: PropTypes.object
			};
			Slider.defaultProps = {
			  pointer: SliderPointer,
			  styles: {}
			};

			ColorWrap(Slider);

			var CheckIcon = {};

			Object.defineProperty(CheckIcon, "__esModule", {
			  value: true
			});

			var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

			var _react = React__default;

			var _react2 = _interopRequireDefault(_react);

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

			var DEFAULT_SIZE = 24;

			var _default = CheckIcon.default = function (_ref) {
			  var _ref$fill = _ref.fill,
			      fill = _ref$fill === undefined ? 'currentColor' : _ref$fill,
			      _ref$width = _ref.width,
			      width = _ref$width === undefined ? DEFAULT_SIZE : _ref$width,
			      _ref$height = _ref.height,
			      height = _ref$height === undefined ? DEFAULT_SIZE : _ref$height,
			      _ref$style = _ref.style,
			      style = _ref$style === undefined ? {} : _ref$style,
			      props = _objectWithoutProperties(_ref, ['fill', 'width', 'height', 'style']);

			  return _react2.default.createElement(
			    'svg',
			    _extends({
			      viewBox: '0 0 ' + DEFAULT_SIZE + ' ' + DEFAULT_SIZE,
			      style: _extends({ fill: fill, width: width, height: height }, style)
			    }, props),
			    _react2.default.createElement('path', { d: 'M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z' })
			  );
			};

			var SwatchesColor = function SwatchesColor(_ref) {
			  var color = _ref.color,
			      _ref$onClick = _ref.onClick,
			      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,
			      onSwatchHover = _ref.onSwatchHover,
			      first = _ref.first,
			      last = _ref.last,
			      active = _ref.active;

			  var styles = _default$2({
			    'default': {
			      color: {
			        width: '40px',
			        height: '24px',
			        cursor: 'pointer',
			        background: color,
			        marginBottom: '1px'
			      },
			      check: {
			        color: getContrastingColor(color),
			        marginLeft: '8px',
			        display: 'none'
			      }
			    },
			    'first': {
			      color: {
			        overflow: 'hidden',
			        borderRadius: '2px 2px 0 0'
			      }
			    },
			    'last': {
			      color: {
			        overflow: 'hidden',
			        borderRadius: '0 0 2px 2px'
			      }
			    },
			    'active': {
			      check: {
			        display: 'block'
			      }
			    },
			    'color-#FFFFFF': {
			      color: {
			        boxShadow: 'inset 0 0 0 1px #ddd'
			      },
			      check: {
			        color: '#333'
			      }
			    },
			    'transparent': {
			      check: {
			        color: '#333'
			      }
			    }
			  }, {
			    first: first,
			    last: last,
			    active: active,
			    'color-#FFFFFF': color === '#FFFFFF',
			    'transparent': color === 'transparent'
			  });

			  return React__default.createElement(
			    Swatch$1,
			    {
			      color: color,
			      style: styles.color,
			      onClick: onClick,
			      onHover: onSwatchHover,
			      focusStyle: { boxShadow: '0 0 4px ' + color }
			    },
			    React__default.createElement(
			      'div',
			      { style: styles.check },
			      React__default.createElement(_default, null)
			    )
			  );
			};

			var SwatchesGroup = function SwatchesGroup(_ref) {
			  var onClick = _ref.onClick,
			      onSwatchHover = _ref.onSwatchHover,
			      group = _ref.group,
			      active = _ref.active;

			  var styles = _default$2({
			    'default': {
			      group: {
			        paddingBottom: '10px',
			        width: '40px',
			        float: 'left',
			        marginRight: '10px'
			      }
			    }
			  });

			  return React__default.createElement(
			    'div',
			    { style: styles.group },
			    map(group, function (color, i) {
			      return React__default.createElement(SwatchesColor, {
			        key: color,
			        color: color,
			        active: color.toLowerCase() === active,
			        first: i === 0,
			        last: i === group.length - 1,
			        onClick: onClick,
			        onSwatchHover: onSwatchHover
			      });
			    })
			  );
			};

			var Swatches = function Swatches(_ref) {
			  var width = _ref.width,
			      height = _ref.height,
			      onChange = _ref.onChange,
			      onSwatchHover = _ref.onSwatchHover,
			      colors = _ref.colors,
			      hex = _ref.hex,
			      _ref$styles = _ref.styles,
			      passedStyles = _ref$styles === undefined ? {} : _ref$styles,
			      _ref$className = _ref.className,
			      className = _ref$className === undefined ? '' : _ref$className;

			  var styles = _default$2(merge$1({
			    'default': {
			      picker: {
			        width: width,
			        height: height
			      },
			      overflow: {
			        height: height,
			        overflowY: 'scroll'
			      },
			      body: {
			        padding: '16px 0 6px 16px'
			      },
			      clear: {
			        clear: 'both'
			      }
			    }
			  }, passedStyles));

			  var handleChange = function handleChange(data, e) {
			    return onChange({ hex: data, source: 'hex' }, e);
			  };

			  return React__default.createElement(
			    'div',
			    { style: styles.picker, className: 'swatches-picker ' + className },
			    React__default.createElement(
			      Raised,
			      null,
			      React__default.createElement(
			        'div',
			        { style: styles.overflow },
			        React__default.createElement(
			          'div',
			          { style: styles.body },
			          map(colors, function (group) {
			            return React__default.createElement(SwatchesGroup, {
			              key: group.toString(),
			              group: group,
			              active: hex,
			              onClick: handleChange,
			              onSwatchHover: onSwatchHover
			            });
			          }),
			          React__default.createElement('div', { style: styles.clear })
			        )
			      )
			    )
			  );
			};

			Swatches.propTypes = {
			  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
			  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
			  colors: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),
			  styles: PropTypes.object

			  /* eslint-disable max-len */
			};Swatches.defaultProps = {
			  width: 320,
			  height: 240,
			  colors: [[red['900'], red['700'], red['500'], red['300'], red['100']], [pink['900'], pink['700'], pink['500'], pink['300'], pink['100']], [purple['900'], purple['700'], purple['500'], purple['300'], purple['100']], [deepPurple['900'], deepPurple['700'], deepPurple['500'], deepPurple['300'], deepPurple['100']], [indigo['900'], indigo['700'], indigo['500'], indigo['300'], indigo['100']], [blue['900'], blue['700'], blue['500'], blue['300'], blue['100']], [lightBlue['900'], lightBlue['700'], lightBlue['500'], lightBlue['300'], lightBlue['100']], [cyan['900'], cyan['700'], cyan['500'], cyan['300'], cyan['100']], [teal['900'], teal['700'], teal['500'], teal['300'], teal['100']], ['#194D33', green['700'], green['500'], green['300'], green['100']], [lightGreen['900'], lightGreen['700'], lightGreen['500'], lightGreen['300'], lightGreen['100']], [lime['900'], lime['700'], lime['500'], lime['300'], lime['100']], [yellow['900'], yellow['700'], yellow['500'], yellow['300'], yellow['100']], [amber['900'], amber['700'], amber['500'], amber['300'], amber['100']], [orange['900'], orange['700'], orange['500'], orange['300'], orange['100']], [deepOrange['900'], deepOrange['700'], deepOrange['500'], deepOrange['300'], deepOrange['100']], [brown['900'], brown['700'], brown['500'], brown['300'], brown['100']], [blueGrey['900'], blueGrey['700'], blueGrey['500'], blueGrey['300'], blueGrey['100']], ['#000000', '#525252', '#969696', '#D9D9D9', '#FFFFFF']],
			  styles: {}
			};

			ColorWrap(Swatches);

			var Twitter = function Twitter(_ref) {
			  var onChange = _ref.onChange,
			      onSwatchHover = _ref.onSwatchHover,
			      hex = _ref.hex,
			      colors = _ref.colors,
			      width = _ref.width,
			      triangle = _ref.triangle,
			      _ref$styles = _ref.styles,
			      passedStyles = _ref$styles === undefined ? {} : _ref$styles,
			      _ref$className = _ref.className,
			      className = _ref$className === undefined ? '' : _ref$className;

			  var styles = _default$2(merge$1({
			    'default': {
			      card: {
			        width: width,
			        background: '#fff',
			        border: '0 solid rgba(0,0,0,0.25)',
			        boxShadow: '0 1px 4px rgba(0,0,0,0.25)',
			        borderRadius: '4px',
			        position: 'relative'
			      },
			      body: {
			        padding: '15px 9px 9px 15px'
			      },
			      label: {
			        fontSize: '18px',
			        color: '#fff'
			      },
			      triangle: {
			        width: '0px',
			        height: '0px',
			        borderStyle: 'solid',
			        borderWidth: '0 9px 10px 9px',
			        borderColor: 'transparent transparent #fff transparent',
			        position: 'absolute'
			      },
			      triangleShadow: {
			        width: '0px',
			        height: '0px',
			        borderStyle: 'solid',
			        borderWidth: '0 9px 10px 9px',
			        borderColor: 'transparent transparent rgba(0,0,0,.1) transparent',
			        position: 'absolute'
			      },
			      hash: {
			        background: '#F0F0F0',
			        height: '30px',
			        width: '30px',
			        borderRadius: '4px 0 0 4px',
			        float: 'left',
			        color: '#98A1A4',
			        display: 'flex',
			        alignItems: 'center',
			        justifyContent: 'center'
			      },
			      input: {
			        width: '100px',
			        fontSize: '14px',
			        color: '#666',
			        border: '0px',
			        outline: 'none',
			        height: '28px',
			        boxShadow: 'inset 0 0 0 1px #F0F0F0',
			        boxSizing: 'content-box',
			        borderRadius: '0 4px 4px 0',
			        float: 'left',
			        paddingLeft: '8px'
			      },
			      swatch: {
			        width: '30px',
			        height: '30px',
			        float: 'left',
			        borderRadius: '4px',
			        margin: '0 6px 6px 0'
			      },
			      clear: {
			        clear: 'both'
			      }
			    },
			    'hide-triangle': {
			      triangle: {
			        display: 'none'
			      },
			      triangleShadow: {
			        display: 'none'
			      }
			    },
			    'top-left-triangle': {
			      triangle: {
			        top: '-10px',
			        left: '12px'
			      },
			      triangleShadow: {
			        top: '-11px',
			        left: '12px'
			      }
			    },
			    'top-right-triangle': {
			      triangle: {
			        top: '-10px',
			        right: '12px'
			      },
			      triangleShadow: {
			        top: '-11px',
			        right: '12px'
			      }
			    }
			  }, passedStyles), {
			    'hide-triangle': triangle === 'hide',
			    'top-left-triangle': triangle === 'top-left',
			    'top-right-triangle': triangle === 'top-right'
			  });

			  var handleChange = function handleChange(hexcode, e) {
			    isValidHex(hexcode) && onChange({
			      hex: hexcode,
			      source: 'hex'
			    }, e);
			  };

			  return React__default.createElement(
			    'div',
			    { style: styles.card, className: 'twitter-picker ' + className },
			    React__default.createElement('div', { style: styles.triangleShadow }),
			    React__default.createElement('div', { style: styles.triangle }),
			    React__default.createElement(
			      'div',
			      { style: styles.body },
			      map(colors, function (c, i) {
			        return React__default.createElement(Swatch$1, {
			          key: i,
			          color: c,
			          hex: c,
			          style: styles.swatch,
			          onClick: handleChange,
			          onHover: onSwatchHover,
			          focusStyle: {
			            boxShadow: '0 0 4px ' + c
			          }
			        });
			      }),
			      React__default.createElement(
			        'div',
			        { style: styles.hash },
			        '#'
			      ),
			      React__default.createElement(EditableInput, {
			        label: null,
			        style: { input: styles.input },
			        value: hex.replace('#', ''),
			        onChange: handleChange
			      }),
			      React__default.createElement('div', { style: styles.clear })
			    )
			  );
			};

			Twitter.propTypes = {
			  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
			  triangle: PropTypes.oneOf(['hide', 'top-left', 'top-right']),
			  colors: PropTypes.arrayOf(PropTypes.string),
			  styles: PropTypes.object
			};

			Twitter.defaultProps = {
			  width: 276,
			  colors: ['#FF6900', '#FCB900', '#7BDCB5', '#00D084', '#8ED1FC', '#0693E3', '#ABB8C3', '#EB144C', '#F78DA7', '#9900EF'],
			  triangle: 'top-left',
			  styles: {}
			};

			ColorWrap(Twitter);

			var GooglePointerCircle = function GooglePointerCircle(props) {
			  var styles = _default$2({
			    'default': {
			      picker: {
			        width: '20px',
			        height: '20px',
			        borderRadius: '22px',
			        border: '2px #fff solid',
			        transform: 'translate(-12px, -13px)',
			        background: 'hsl(' + Math.round(props.hsl.h) + ', ' + Math.round(props.hsl.s * 100) + '%, ' + Math.round(props.hsl.l * 100) + '%)'
			      }
			    }
			  });

			  return React__default.createElement('div', { style: styles.picker });
			};

			GooglePointerCircle.propTypes = {
			  hsl: PropTypes.shape({
			    h: PropTypes.number,
			    s: PropTypes.number,
			    l: PropTypes.number,
			    a: PropTypes.number
			  })
			};

			GooglePointerCircle.defaultProps = {
			  hsl: { a: 1, h: 249.94, l: 0.2, s: 0.50 }
			};

			var GooglePointer = function GooglePointer(props) {
			  var styles = _default$2({
			    'default': {
			      picker: {
			        width: '20px',
			        height: '20px',
			        borderRadius: '22px',
			        transform: 'translate(-10px, -7px)',
			        background: 'hsl(' + Math.round(props.hsl.h) + ', 100%, 50%)',
			        border: '2px white solid'
			      }
			    }
			  });

			  return React__default.createElement('div', { style: styles.picker });
			};

			GooglePointer.propTypes = {
			  hsl: PropTypes.shape({
			    h: PropTypes.number,
			    s: PropTypes.number,
			    l: PropTypes.number,
			    a: PropTypes.number
			  })
			};

			GooglePointer.defaultProps = {
			  hsl: { a: 1, h: 249.94, l: 0.2, s: 0.50 }
			};

			var GoogleFields = function GoogleFields(_ref) {
			  var onChange = _ref.onChange,
			      rgb = _ref.rgb,
			      hsl = _ref.hsl,
			      hex = _ref.hex,
			      hsv = _ref.hsv;


			  var handleChange = function handleChange(data, e) {
			    if (data.hex) {
			      isValidHex(data.hex) && onChange({
			        hex: data.hex,
			        source: 'hex'
			      }, e);
			    } else if (data.rgb) {
			      var values = data.rgb.split(',');
			      isvalidColorString(data.rgb, 'rgb') && onChange({
			        r: values[0],
			        g: values[1],
			        b: values[2],
			        a: 1,
			        source: 'rgb'
			      }, e);
			    } else if (data.hsv) {
			      var _values = data.hsv.split(',');
			      if (isvalidColorString(data.hsv, 'hsv')) {
			        _values[2] = _values[2].replace('%', '');
			        _values[1] = _values[1].replace('%', '');
			        _values[0] = _values[0].replace('°', '');
			        if (_values[1] == 1) {
			          _values[1] = 0.01;
			        } else if (_values[2] == 1) {
			          _values[2] = 0.01;
			        }
			        onChange({
			          h: Number(_values[0]),
			          s: Number(_values[1]),
			          v: Number(_values[2]),
			          source: 'hsv'
			        }, e);
			      }
			    } else if (data.hsl) {
			      var _values2 = data.hsl.split(',');
			      if (isvalidColorString(data.hsl, 'hsl')) {
			        _values2[2] = _values2[2].replace('%', '');
			        _values2[1] = _values2[1].replace('%', '');
			        _values2[0] = _values2[0].replace('°', '');
			        if (hsvValue[1] == 1) {
			          hsvValue[1] = 0.01;
			        } else if (hsvValue[2] == 1) {
			          hsvValue[2] = 0.01;
			        }
			        onChange({
			          h: Number(_values2[0]),
			          s: Number(_values2[1]),
			          v: Number(_values2[2]),
			          source: 'hsl'
			        }, e);
			      }
			    }
			  };

			  var styles = _default$2({
			    'default': {
			      wrap: {
			        display: 'flex',
			        height: '100px',
			        marginTop: '4px'
			      },
			      fields: {
			        width: '100%'
			      },
			      column: {
			        paddingTop: '10px',
			        display: 'flex',
			        justifyContent: 'space-between'
			      },
			      double: {
			        padding: '0px 4.4px',
			        boxSizing: 'border-box'
			      },
			      input: {
			        width: '100%',
			        height: '38px',
			        boxSizing: 'border-box',
			        padding: '4px 10% 3px',
			        textAlign: 'center',
			        border: '1px solid #dadce0',
			        fontSize: '11px',
			        textTransform: 'lowercase',
			        borderRadius: '5px',
			        outline: 'none',
			        fontFamily: 'Roboto,Arial,sans-serif'
			      },
			      input2: {
			        height: '38px',
			        width: '100%',
			        border: '1px solid #dadce0',
			        boxSizing: 'border-box',
			        fontSize: '11px',
			        textTransform: 'lowercase',
			        borderRadius: '5px',
			        outline: 'none',
			        paddingLeft: '10px',
			        fontFamily: 'Roboto,Arial,sans-serif'
			      },
			      label: {
			        textAlign: 'center',
			        fontSize: '12px',
			        background: '#fff',
			        position: 'absolute',
			        textTransform: 'uppercase',
			        color: '#3c4043',
			        width: '35px',
			        top: '-6px',
			        left: '0',
			        right: '0',
			        marginLeft: 'auto',
			        marginRight: 'auto',
			        fontFamily: 'Roboto,Arial,sans-serif'
			      },
			      label2: {
			        left: '10px',
			        textAlign: 'center',
			        fontSize: '12px',
			        background: '#fff',
			        position: 'absolute',
			        textTransform: 'uppercase',
			        color: '#3c4043',
			        width: '32px',
			        top: '-6px',
			        fontFamily: 'Roboto,Arial,sans-serif'
			      },
			      single: {
			        flexGrow: '1',
			        margin: '0px 4.4px'
			      }
			    }
			  });

			  var rgbValue = rgb.r + ', ' + rgb.g + ', ' + rgb.b;
			  var hslValue = Math.round(hsl.h) + '\xB0, ' + Math.round(hsl.s * 100) + '%, ' + Math.round(hsl.l * 100) + '%';
			  var hsvValue = Math.round(hsv.h) + '\xB0, ' + Math.round(hsv.s * 100) + '%, ' + Math.round(hsv.v * 100) + '%';

			  return React__default.createElement(
			    'div',
			    { style: styles.wrap, className: 'flexbox-fix' },
			    React__default.createElement(
			      'div',
			      { style: styles.fields },
			      React__default.createElement(
			        'div',
			        { style: styles.double },
			        React__default.createElement(EditableInput, {
			          style: { input: styles.input, label: styles.label },
			          label: 'hex',
			          value: hex,
			          onChange: handleChange
			        })
			      ),
			      React__default.createElement(
			        'div',
			        { style: styles.column },
			        React__default.createElement(
			          'div',
			          { style: styles.single },
			          React__default.createElement(EditableInput, {
			            style: { input: styles.input2, label: styles.label2 },
			            label: 'rgb',
			            value: rgbValue,
			            onChange: handleChange
			          })
			        ),
			        React__default.createElement(
			          'div',
			          { style: styles.single },
			          React__default.createElement(EditableInput, {
			            style: { input: styles.input2, label: styles.label2 },
			            label: 'hsv',
			            value: hsvValue,
			            onChange: handleChange
			          })
			        ),
			        React__default.createElement(
			          'div',
			          { style: styles.single },
			          React__default.createElement(EditableInput, {
			            style: { input: styles.input2, label: styles.label2 },
			            label: 'hsl',
			            value: hslValue,
			            onChange: handleChange
			          })
			        )
			      )
			    )
			  );
			};

			var Google = function Google(_ref) {
			  var width = _ref.width,
			      onChange = _ref.onChange,
			      rgb = _ref.rgb,
			      hsl = _ref.hsl,
			      hsv = _ref.hsv,
			      hex = _ref.hex,
			      header = _ref.header,
			      _ref$styles = _ref.styles,
			      passedStyles = _ref$styles === undefined ? {} : _ref$styles,
			      _ref$className = _ref.className,
			      className = _ref$className === undefined ? '' : _ref$className;

			  var styles = _default$2(merge$1({
			    'default': {
			      picker: {
			        width: width,
			        background: '#fff',
			        border: '1px solid #dfe1e5',
			        boxSizing: 'initial',
			        display: 'flex',
			        flexWrap: 'wrap',
			        borderRadius: '8px 8px 0px 0px'
			      },
			      head: {
			        height: '57px',
			        width: '100%',
			        paddingTop: '16px',
			        paddingBottom: '16px',
			        paddingLeft: '16px',
			        fontSize: '20px',
			        boxSizing: 'border-box',
			        fontFamily: 'Roboto-Regular,HelveticaNeue,Arial,sans-serif'
			      },
			      saturation: {
			        width: '70%',
			        padding: '0px',
			        position: 'relative',
			        overflow: 'hidden'
			      },
			      swatch: {
			        width: '30%',
			        height: '228px',
			        padding: '0px',
			        background: 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', 1)',
			        position: 'relative',
			        overflow: 'hidden'
			      },
			      body: {
			        margin: 'auto',
			        width: '95%'
			      },
			      controls: {
			        display: 'flex',
			        boxSizing: 'border-box',
			        height: '52px',
			        paddingTop: '22px'
			      },
			      color: {
			        width: '32px'
			      },
			      hue: {
			        height: '8px',
			        position: 'relative',
			        margin: '0px 16px 0px 16px',
			        width: '100%'
			      },
			      Hue: {
			        radius: '2px'
			      }
			    }
			  }, passedStyles));
			  return React__default.createElement(
			    'div',
			    { style: styles.picker, className: 'google-picker ' + className },
			    React__default.createElement(
			      'div',
			      { style: styles.head },
			      header
			    ),
			    React__default.createElement('div', { style: styles.swatch }),
			    React__default.createElement(
			      'div',
			      { style: styles.saturation },
			      React__default.createElement(Saturation, {
			        hsl: hsl,
			        hsv: hsv,
			        pointer: GooglePointerCircle,
			        onChange: onChange
			      })
			    ),
			    React__default.createElement(
			      'div',
			      { style: styles.body },
			      React__default.createElement(
			        'div',
			        { style: styles.controls, className: 'flexbox-fix' },
			        React__default.createElement(
			          'div',
			          { style: styles.hue },
			          React__default.createElement(Hue, {
			            style: styles.Hue,
			            hsl: hsl,
			            radius: '4px',
			            pointer: GooglePointer,
			            onChange: onChange
			          })
			        )
			      ),
			      React__default.createElement(GoogleFields, {
			        rgb: rgb,
			        hsl: hsl,
			        hex: hex,
			        hsv: hsv,
			        onChange: onChange
			      })
			    )
			  );
			};

			Google.propTypes = {
			  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
			  styles: PropTypes.object,
			  header: PropTypes.string

			};

			Google.defaultProps = {
			  width: 652,
			  styles: {},
			  header: 'Color picker'
			};

			ColorWrap(Google);

			function ColorPicker(props) {
			  const { value, onChange } = props;
			  const popperRef = useRef(null);
			  const reference = useRef(null);
			  const [currColor, setCurrColor] = useState({
			    r: 255,
			    g: 255,
			    b: 255,
			    a: 1
			  });
			  useEffect(() => {
			    setCurrColor(value || "#FFFFFF");
			  }, [value]);
			  function handleColorChange(color) {
			    const { rgb } = color;
			    setCurrColor(rgb);
			    onChange && onChange(color);
			  }
			  return /* @__PURE__ */ React__default.createElement("div", null, /* @__PURE__ */ React__default.createElement("div", {
			    ref: reference,
			    className: "w-16 h-16 border border-gray-300",
			    style: { backgroundColor: currColor }
			  }), /* @__PURE__ */ React__default.createElement(Popper2, {
			    ref: popperRef,
			    reference
			  }, /* @__PURE__ */ React__default.createElement(SketchPicker, {
			    color: currColor,
			    onChangeComplete: handleColorChange
			  })));
			}
			function formatRgba(rgba) {
			  let _rgba = "";
			  const { r, g, b, a } = rgba;
			  _rgba = `rgba(${r}, ${g}, ${b}, ${a})`;
			  return _rgba;
			}
			ColorPicker.formatRgba = formatRgba;

			function Textarea(props) {
			  const { placeholder, cols, rows, minLength, maxLength, required } = props;
			  return /* @__PURE__ */ React__default.createElement("div", null, /* @__PURE__ */ React__default.createElement("textarea", {
			    placeholder: placeholder || "\u8BF7\u8F93\u5165\u5185\u5BB9",
			    cols,
			    rows,
			    minLength,
			    maxLength,
			    required
			  }));
			}

			function Text({ content, isAllowSelect }) {
			  return /* @__PURE__ */ React__default.createElement("span", {
			    className: cs({
			      "user-select": isAllowSelect ? "none" : "auto"
			    })
			  }, content || "\u6587\u672C");
			}

			var css$2 = ".index_m_page__bdd6fa75 {\n  --min-height: calc(var(--pg-header-height, 44px) + 16px);\n  min-height: calc(100vh - var(--min-height));\n}";
			var modules_57c9837d$2 = {"page":"index_m_page__bdd6fa75"};
			n$3(css$2,{});

			function Page({ className, style, children }) {
			  return /* @__PURE__ */ React__default.createElement("div", {
			    className: cs(modules_57c9837d$2.page, className),
			    style
			  }, !Children.count(children) && /* @__PURE__ */ React__default.createElement("div", {
			    className: "flex flex-col items-center justify-center absolute w-full h-full"
			  }, /* @__PURE__ */ React__default.createElement(Icon$1, {
			    name: "pg-engine-empty",
			    size: 120
			  }), /* @__PURE__ */ React__default.createElement("p", {
			    className: "text-gray-400 text-12"
			  }, "\u5F00\u59CB\u6784\u5EFA\u9875\u9762\uFF0C\u4ECE\u5DE6\u4FA7 \u7EC4\u4EF6\u5E93\u6216\u6A21\u7248\u5E93 \u9762\u677F\u4E2D\u62D6\u5165\u5143\u7D20")), children);
			}

			var css$1 = ".index_m_gridElem__e7344ae4 {\n  display: grid;\n  min-height: 10px;\n}";
			var modules_57c9837d$1 = {"gridElem":"index_m_gridElem__e7344ae4"};
			n$3(css$1,{});

			var __defProp = Object.defineProperty;
			var __defProps = Object.defineProperties;
			var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
			var __getOwnPropSymbols = Object.getOwnPropertySymbols;
			var __hasOwnProp = Object.prototype.hasOwnProperty;
			var __propIsEnum = Object.prototype.propertyIsEnumerable;
			var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
			var __spreadValues = (a, b) => {
			  for (var prop in b || (b = {}))
			    if (__hasOwnProp.call(b, prop))
			      __defNormalProp(a, prop, b[prop]);
			  if (__getOwnPropSymbols)
			    for (var prop of __getOwnPropSymbols(b)) {
			      if (__propIsEnum.call(b, prop))
			        __defNormalProp(a, prop, b[prop]);
			    }
			  return a;
			};
			var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
			function Grid({ className, style, colRatio, colGap, children }) {
			  return /* @__PURE__ */ React__default.createElement("div", {
			    className: cs(modules_57c9837d$1.gridElem, className),
			    style: __spreadProps(__spreadValues({}, style), {
			      gridTemplateColumns: colRatio == null ? void 0 : colRatio.split(":").map((v) => `${v}fr`).join(" "),
			      gridColumnGap: colGap
			    })
			  }, children);
			}

			var css = ".index_m_coll__84c82e73 {\n  position: relative;\n  width: 100%;\n  height: auto;\n  min-height: 52px;\n  background: #F8FAFC;\n  border: 1px solid #CBD5E1;\n}\n.index_m_coll__84c82e73 .index_m_placeholder__84c82e73 {\n  display: grid;\n  place-content: center;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  overflow: hidden;\n}";
			var modules_57c9837d = {"coll":"index_m_coll__84c82e73","placeholder":"index_m_placeholder__84c82e73"};
			n$3(css,{});

			function Container({ className, style, children }) {
			  return /* @__PURE__ */ React__default.createElement("div", {
			    className: cs(modules_57c9837d.coll, className),
			    style
			  }, children || /* @__PURE__ */ React__default.createElement("div", {
			    className: modules_57c9837d.placeholder
			  }, "\u62D6\u62FD\u7EC4\u4EF6\u6216\u6A21\u677F\u5230\u8FD9\u91CC"));
			}

			function Link({ content, linkType, linkUrl, linkPage, isBlank, className }) {
			  return /* @__PURE__ */ React__default.createElement("a", {
			    href: linkType === "outside" ? linkUrl : linkPage,
			    className: cs("text-blue-600", className),
			    target: isBlank ? "_blank" : "_self",
			    rel: "noreferrer"
			  }, content || "\u94FE\u63A5");
			}

		})
	};
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
