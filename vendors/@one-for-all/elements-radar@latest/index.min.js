System.register(["rxjs","rxjs/operators"],(function(e){"use strict";var t,r,s,i,n,o,h,a;return{setters:[function(e){t=e.BehaviorSubject,r=e.Subject,s=e.fromEvent,i=e.merge},function(e){n=e.tap,o=e.audit,h=e.map,a=e.distinctUntilChanged}],execute:function(){const c=["height","width","x","y"];function u(e,t){return e.size===t.size&&Array.from(e.entries()).every((([e,{raw:r}])=>{const s=t.get(e);return!!s&&c.every((e=>s.raw[e]===r[e]))}))}e("default",class{constructor(e){this.targets$=new t([]),this.resizeSign$=new r,this.report=new Map,this.reportUpdatedSign$=new r,this.onResize=()=>{this.resizeSign$.next("resized")},this.intersectionObserverCallback=e=>{var t,r;if(!e.length)return;const s=this.root?{x:(null==(t=e[0].rootBounds)?void 0:t.x)||0,y:(null==(r=e[0].rootBounds)?void 0:r.y)||0}:{x:0,y:0};this.report=new Map,e.forEach((({target:e,boundingClientRect:t,isIntersecting:r})=>{if(r){const r=function(e,t){const r=t.x,s=t.y;return{height:Math.round(e.height),width:Math.round(e.width),x:Math.round(e.x-r),y:Math.round(e.y-s)}}(t,s);this.report.set(e,{relativeRect:r,raw:t})}})),this.reportUpdatedSign$.next()},this.root=e,this.visibleObserver=new IntersectionObserver(this.intersectionObserverCallback,{root:e});const h=s(document,"scroll"),a=new t(void 0);let c;h.subscribe((()=>{clearTimeout(c),c=window.setTimeout((()=>{a.next()}),250)})),this.resizeObserver=new ResizeObserver(this.onResize),this.resizeObserver.observe(document.body),this.targets$.subscribe((e=>{this.resizeObserver.disconnect(),this.resizeObserver.observe(document.body),e.forEach((e=>{this.resizeObserver.observe(e)}))})),i(this.targets$,this.resizeSign$).pipe(n((()=>{this.visibleObserver.disconnect()})),o((()=>a))).subscribe((()=>{this.targets$.value.forEach((e=>{this.visibleObserver.observe(e)}))}))}addTargets(e){this.targets$.next([...this.targets$.value,...e])}removeTargets(e){const t=this.targets$.value.filter((t=>!e.includes(t)));this.track(t)}track(e){this.targets$.next(e)}getReport$(){return this.reportUpdatedSign$.pipe(h((()=>{const e=new Map;return this.report.forEach(((t,r)=>e.set(r,t))),e})),a(u))}})}}}));
