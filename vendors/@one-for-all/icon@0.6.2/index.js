System.register(['react'], (function (exports, module) {
  'use strict';
  var React, useState, useEffect;
  return {
    setters: [function (module) {
      React = module["default"];
      useState = module.useState;
      useEffect = module.useEffect;
    }],
    execute: (function () {

      var svgSprite = new URL('assets/sprite-9a30c454.svg', module.meta.url).href;

      let fetchSpritePromise = null;
      async function getIconPathById(id) {
        var _a;
        if (!fetchSpritePromise)
          fetchSpritePromise = getSprite();
        const sprite = await fetchSpritePromise;
        return ((_a = sprite.querySelector(`#${CSS.escape(id)}`)) == null ? void 0 : _a.innerHTML) || "";
      }
      async function getSprite() {
        let spriteText = "";
        try {
          const fetchResponse = await fetch(svgSprite);
          spriteText = await fetchResponse.text();
        } catch (error) {
          console.log(error);
        }
        const spriteParent = document.createElement("div");
        spriteParent.innerHTML = spriteText;
        return spriteParent.children[0];
      }

      var __defProp = Object.defineProperty;
      var __defProps = Object.defineProperties;
      var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
      var __getOwnPropSymbols = Object.getOwnPropertySymbols;
      var __hasOwnProp = Object.prototype.hasOwnProperty;
      var __propIsEnum = Object.prototype.propertyIsEnumerable;
      var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
      var __spreadValues = (a, b) => {
        for (var prop in b || (b = {}))
          if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        if (__getOwnPropSymbols)
          for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
              __defNormalProp(a, prop, b[prop]);
          }
        return a;
      };
      var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
      var __objRest = (source, exclude) => {
        var target = {};
        for (var prop in source)
          if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
            target[prop] = source[prop];
        if (source != null && __getOwnPropSymbols)
          for (var prop of __getOwnPropSymbols(source)) {
            if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
              target[prop] = source[prop];
          }
        return target;
      };
      function Icon(_a, ref) {
        var _b = _a, { name, size = 16, color, className = "", style } = _b, props = __objRest(_b, ["name", "size", "color", "className", "style"]);
        const [iconPathStr, setIconPathStr] = useState("");
        const _style = __spreadProps(__spreadValues({}, style), {
          width: typeof size === "string" ? size : `${size}px`,
          height: typeof size === "string" ? size : `${size}px`,
          fill: color
        });
        useEffect(() => {
          let isUnmount = false;
          getIconPathById(name).then((iconPath) => {
            !isUnmount && setIconPathStr(iconPath);
          });
          return () => isUnmount = true;
        }, [name]);
        return /* @__PURE__ */ React.createElement("svg", __spreadProps(__spreadValues({}, props), {
          ref,
          "data-name": name,
          style: _style,
          className: "ofa-svg-icon " + className,
          viewBox: "0 0 24 24",
          dangerouslySetInnerHTML: { __html: iconPathStr }
        }));
      }
      var index = exports('default', React.forwardRef(Icon));

    })
  };
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zcHJpdGUuc3ZnIiwiLi4vLi4vLi4vc3JjL2dldEljb25QYXRoQnlJZC50cyIsIi4uLy4uLy4uL3NyYy9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgaW1wb3J0Lm1ldGEuUk9MTFVQX0ZJTEVfVVJMXzQxOTIwMTBmOyIsImltcG9ydCBzdmdTcHJpdGUgZnJvbSAnLi9zcHJpdGUuc3ZnJztcblxubGV0IGZldGNoU3ByaXRlUHJvbWlzZTogUHJvbWlzZTxTVkdBRWxlbWVudD4gfCBudWxsID0gbnVsbDtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0SWNvblBhdGhCeUlkKGlkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICBpZiAoIWZldGNoU3ByaXRlUHJvbWlzZSkgZmV0Y2hTcHJpdGVQcm9taXNlID0gZ2V0U3ByaXRlKCk7XG4gIGNvbnN0IHNwcml0ZSA9IGF3YWl0IGZldGNoU3ByaXRlUHJvbWlzZTtcbiAgcmV0dXJuIHNwcml0ZS5xdWVyeVNlbGVjdG9yKGAjJHtDU1MuZXNjYXBlKGlkKX1gKT8uaW5uZXJIVE1MIHx8ICcnO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRTcHJpdGUoKTogUHJvbWlzZTxTVkdBRWxlbWVudD4ge1xuICBsZXQgc3ByaXRlVGV4dCA9ICcnO1xuICB0cnkge1xuICAgIGNvbnN0IGZldGNoUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChzdmdTcHJpdGUpO1xuICAgIHNwcml0ZVRleHQgPSBhd2FpdCBmZXRjaFJlc3BvbnNlLnRleHQoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gIH1cblxuICBjb25zdCBzcHJpdGVQYXJlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgc3ByaXRlUGFyZW50LmlubmVySFRNTCA9IHNwcml0ZVRleHQ7XG4gIHJldHVybiBzcHJpdGVQYXJlbnQuY2hpbGRyZW5bMF0gYXMgU1ZHQUVsZW1lbnQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldEljb25QYXRoQnlJZDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGdldEljb25QYXRoQnlJZCBmcm9tICcuL2dldEljb25QYXRoQnlJZCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWNvblByb3BzIGV4dGVuZHMgUmVhY3QuU1ZHUHJvcHM8U1ZHU1ZHRWxlbWVudD4ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHNpemU/OiBudW1iZXIgfCBzdHJpbmc7XG4gIGNvbG9yPzogc3RyaW5nO1xufVxuXG5mdW5jdGlvbiBJY29uKFxuICB7IG5hbWUsIHNpemUgPSAxNiwgY29sb3IsIGNsYXNzTmFtZSA9ICcnLCBzdHlsZSwgLi4ucHJvcHMgfTogSWNvblByb3BzLFxuICByZWY/OiBSZWFjdC5SZWY8U1ZHU1ZHRWxlbWVudD4sXG4pOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IFtpY29uUGF0aFN0ciwgc2V0SWNvblBhdGhTdHJdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBfc3R5bGU6IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSB7XG4gICAgLi4uc3R5bGUsXG4gICAgd2lkdGg6IHR5cGVvZiBzaXplID09PSAnc3RyaW5nJyA/IHNpemUgOiBgJHtzaXplfXB4YCxcbiAgICBoZWlnaHQ6IHR5cGVvZiBzaXplID09PSAnc3RyaW5nJyA/IHNpemUgOiBgJHtzaXplfXB4YCxcbiAgICBmaWxsOiBjb2xvcixcbiAgfTtcblxuICB1c2VFZmZlY3QoKCk6ICgoKSA9PiB2b2lkKSA9PiB7XG4gICAgbGV0IGlzVW5tb3VudCA9IGZhbHNlO1xuICAgIGdldEljb25QYXRoQnlJZChuYW1lKS50aGVuKChpY29uUGF0aCkgPT4ge1xuICAgICAgIWlzVW5tb3VudCAmJiBzZXRJY29uUGF0aFN0cihpY29uUGF0aCk7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IChpc1VubW91bnQgPSB0cnVlKTtcbiAgfSwgW25hbWVdKTtcblxuICByZXR1cm4gKFxuICAgIDxzdmdcbiAgICAgIHsuLi5wcm9wc31cbiAgICAgIHJlZj17cmVmfVxuICAgICAgZGF0YS1uYW1lPXtuYW1lfVxuICAgICAgc3R5bGU9e19zdHlsZX1cbiAgICAgIGNsYXNzTmFtZT17J29mYS1zdmctaWNvbiAnICsgY2xhc3NOYW1lfVxuICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGljb25QYXRoU3RyIH19XG4gICAgLz5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QuZm9yd2FyZFJlZjxTVkdTVkdFbGVtZW50LCBJY29uUHJvcHM+KEljb24pO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsc0JBQWUsMkRBQW9DOztNQ0NuRCxJQUFJLGtCQUFrQixHQUFHLElBQUksQ0FBQztNQUM5QixlQUFlLGVBQWUsQ0FBQyxFQUFFLEVBQUU7TUFDbkMsRUFBRSxJQUFJLEVBQUUsQ0FBQztNQUNULEVBQUUsSUFBSSxDQUFDLGtCQUFrQjtNQUN6QixJQUFJLGtCQUFrQixHQUFHLFNBQVMsRUFBRSxDQUFDO01BQ3JDLEVBQUUsTUFBTSxNQUFNLEdBQUcsTUFBTSxrQkFBa0IsQ0FBQztNQUMxQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLEtBQUssRUFBRSxDQUFDO01BQ25HLENBQUM7TUFDRCxlQUFlLFNBQVMsR0FBRztNQUMzQixFQUFFLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQztNQUN0QixFQUFFLElBQUk7TUFDTixJQUFJLE1BQU0sYUFBYSxHQUFHLE1BQU0s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
