System.register(['@one-for-all/utils', 'rxjs'], (function (exports) {
	'use strict';
	var logger, Subject, filter, switchMap, from, map, interval, tap, takeUntil, take, find;
	return {
		setters: [function (module) {
			logger = module.logger;
		}, function (module) {
			Subject = module.Subject;
			filter = module.filter;
			switchMap = module.switchMap;
			from = module.from;
			map = module.map;
			interval = module.interval;
			tap = module.tap;
			takeUntil = module.takeUntil;
			take = module.take;
			find = module.find;
		}],
		execute: (function () {

			exports('n', n);

			var classnames = {exports: {}};

			/*!
			  Copyright (c) 2018 Jed Watson.
			  Licensed under the MIT License (MIT), see
			  http://jedwatson.github.io/classnames
			*/

			(function (module) {
			/* global define */

			(function () {

				var hasOwn = {}.hasOwnProperty;

				function classNames() {
					var classes = [];

					for (var i = 0; i < arguments.length; i++) {
						var arg = arguments[i];
						if (!arg) continue;

						var argType = typeof arg;

						if (argType === 'string' || argType === 'number') {
							classes.push(arg);
						} else if (Array.isArray(arg)) {
							if (arg.length) {
								var inner = classNames.apply(null, arg);
								if (inner) {
									classes.push(inner);
								}
							}
						} else if (argType === 'object') {
							if (arg.toString === Object.prototype.toString) {
								for (var key in arg) {
									if (hasOwn.call(arg, key) && arg[key]) {
										classes.push(key);
									}
								}
							} else {
								classes.push(arg.toString());
							}
						}
					}

					return classes.join(' ');
				}

				if (module.exports) {
					classNames.default = classNames;
					module.exports = classNames;
				} else {
					window.classNames = classNames;
				}
			}());
			}(classnames));

			var cs = exports('e', classnames.exports);

			class Messenger {
			  constructor(target, name) {
			    this.seq = 0;
			    this.connected = false;
			    this.responderMap = {};
			    this.target = target;
			    this.name = name;
			    this.send$ = new Subject();
			    this.receive$ = new Subject();
			    if (window === target) {
			      throw new Error("Messenger: target can not be same as current window");
			    }
			    this.isSubWin = window.parent === target;
			    window.addEventListener("message", (e) => {
			      if (e.origin !== window.origin) {
			        return;
			      }
			      if (this.name === e.data.name) {
			        return;
			      }
			      const t1 = performance.now();
			      this.receive$.next(e.data);
			      const delta = performance.now() - t1;
			      if (delta > 10) {
			        logger.log(this.name, "execute on message cost:", delta, "message type:", e.data.type);
			      }
			    });
			    this.send$.subscribe((frame) => {
			      this.target.postMessage(frame, window.origin);
			    });
			  }
			  addResponders(responders) {
			    Object.entries(responders).forEach(([type, responder]) => {
			      const subscription = this.receive$.pipe(filter((frame) => {
			        if (frame.type) {
			          return frame.type === type;
			        }
			        return false;
			      }), switchMap(({ message, seq }) => from(Promise.all([responder(message), Promise.resolve(seq)]))), map(([response, echoSeq]) => ({
			        type: `echo_${type}`,
			        message: response,
			        echoSeq,
			        seq: this.nextSeq(),
			        name: this.name
			      }))).subscribe(this.send$);
			      if (this.responderMap[type]) {
			        this.responderMap[type].unsubscribe();
			      }
			      this.responderMap[type] = subscription;
			    });
			  }
			  waitForReady() {
			    return new Promise((resolve, reject) => {
			      let subscription;
			      const timer = setTimeout(() => {
			        subscription == null ? void 0 : subscription.unsubscribe();
			        reject(new Error(`${this.name} messenger connection timeout`));
			      }, 5 * 1e3);
			      if (this.isSubWin) {
			        subscription = interval(200).pipe(tap(() => this.send("ping", "ping")), takeUntil(this.listen("ping"))).subscribe({
			          complete: () => {
			            subscription == null ? void 0 : subscription.unsubscribe();
			            clearTimeout(timer);
			            this.connected = true;
			            resolve();
			          }
			        });
			      } else {
			        this.listen("ping").pipe(take(1)).subscribe(() => {
			          this.send("ping", "ping");
			          clearTimeout(timer);
			          this.connected = true;
			          resolve();
			        });
			      }
			    });
			  }
			  nextSeq() {
			    this.seq = this.seq + 1;
			    return this.seq;
			  }
			  send(type, message) {
			    this.send$.next({
			      type,
			      message,
			      seq: this.nextSeq(),
			      name: this.name
			    });
			  }
			  listen(type) {
			    return this.receive$.pipe(filter((frame) => {
			      if (frame.type) {
			        return frame.type === type;
			      }
			      return false;
			    }), map(({ message }) => message));
			  }
			  request(type, message) {
			    const seq = this.nextSeq();
			    const wait = new Promise((resolve, reject) => {
			      const timer = setTimeout(() => {
			        reject(new Error(`messenger request timeout, request message type is: ${type}`));
			      }, 5 * 1e3);
			      const subscription = this.receive$.pipe(find(({ echoSeq }) => echoSeq === seq)).subscribe((frame) => {
			        subscription.unsubscribe();
			        clearTimeout(timer);
			        if (!frame) {
			          reject(new Error("fatal"));
			          return;
			        }
			        resolve(frame.message);
			      });
			    });
			    this.send$.next({ type, message, seq, name: this.name });
			    return wait;
			  }
			} exports('d', Messenger);

			const DND_DATA_TRANSFER_TYPE_NODE_ID = exports('D', "simulator_dragging_node_id");
			const DND_DATA_TRANSFER_TYPE_ARTERY_NODE = exports('f', "artery_node");
			const MESSAGE_TYPE_ARTERY = exports('c', "artery");
			const MESSAGE_TYPE_ACTIVE_NODE = exports('b', "active_node");
			const MESSAGE_TYPE_ACTIVE_OVER_LAYER_NODE_ID = exports('a', "active_over_layer_node_id");
			const MESSAGE_TYPE_CHECK_NODE_SUPPORT_CHILDREN = exports('M', "check_node_support_children");
			const DUMMY_ARTERY_ROOT_NODE_ID = exports('g', "dummy_artery_root_node_id");
			const FALLBACK_CONTOUR_NODE_ID = exports('F', "FALLBACK_CONTOUR_NODE_ID");
			const FALLBACK_CONTOUR = exports('h', {
			  id: FALLBACK_CONTOUR_NODE_ID,
			  absolutePosition: { height: 0, width: 0, x: 0, y: 0 },
			  relativeRect: { height: 0, width: 0, x: 0, y: 0 },
			  raw: { height: 0, width: 0, x: 0, y: 0, bottom: 0, left: 0, right: 0, top: 0 },
			  executor: "",
			  depth: 0
			});

			var e=[],t=[];function n(n,r){if(n&&"undefined"!=typeof document){var a,s=!0===r.prepend?"prepend":"append",d=!0===r.singleTag,i="string"==typeof r.container?document.querySelector(r.container):document.getElementsByTagName("head")[0];if(d){var u=e.indexOf(i);-1===u&&(u=e.push(i)-1,t[u]={}),a=t[u]&&t[u][s]?t[u][s]:t[u][s]=c();}else a=c();65279===n.charCodeAt(0)&&(n=n.substring(1)),a.styleSheet?a.styleSheet.cssText+=n:a.appendChild(document.createTextNode(n));}function c(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),r.attributes)for(var t=Object.keys(r.attributes),n=0;n<t.length;n++)e.setAttribute(t[n],r.attributes[t[n]]);var a="prepend"===s?"afterbegin":"beforeend";return i.insertAdjacentElement(a,e),e}}

		})
	};
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
