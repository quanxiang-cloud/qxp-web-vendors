System.register([], (function (exports, module) {
    'use strict';
    return {
        execute: (function () {

            var cssbeautify$1 = {exports: {}};

            /*
             Copyright (C) 2013 Sencha Inc.
             Copyright (C) 2012 Sencha Inc.
             Copyright (C) 2011 Sencha Inc.

             Author: Ariya Hidayat.

             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:

             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.

             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
            */

            (function (module, exports) {
            /*jslint continue: true, indent: 4 */
            /*global exports:true, module:true, window:true */

            (function () {

                function cssbeautify(style, opt) {

                    var options, index = 0, length = style.length, blocks, formatted = '',
                        ch, ch2, str, state, State, depth, quote, comment,
                        openbracesuffix = true,
                        autosemicolon = false,
                        trimRight;

                    options = arguments.length > 1 ? opt : {};
                    if (typeof options.indent === 'undefined') {
                        options.indent = '    ';
                    }
                    if (typeof options.openbrace === 'string') {
                        openbracesuffix = (options.openbrace === 'end-of-line');
                    }
                    if (typeof options.autosemicolon === 'boolean') {
                        autosemicolon = options.autosemicolon;
                    }

                    function isWhitespace(c) {
                        return (c === ' ') || (c === '\n') || (c === '\t') || (c === '\r') || (c === '\f');
                    }

                    function isQuote(c) {
                        return (c === '\'') || (c === '"');
                    }

                    // FIXME: handle Unicode characters
                    function isName(c) {
                        return (ch >= 'a' && ch <= 'z') ||
                            (ch >= 'A' && ch <= 'Z') ||
                            (ch >= '0' && ch <= '9') ||
                            '-_*.:#[]'.indexOf(c) >= 0;
                    }

                    function appendIndent() {
                        var i;
                        for (i = depth; i > 0; i -= 1) {
                            formatted += options.indent;
                        }
                    }

                    function openBlock() {
                        formatted = trimRight(formatted);
                        if (openbracesuffix) {
                            formatted += ' {';
                        } else {
                            formatted += '\n';
                            appendIndent();
                            formatted += '{';
                        }
                        if (ch2 !== '\n') {
                            formatted += '\n';
                        }
                        depth += 1;
                    }

                    function closeBlock() {
                        var last;
                        depth -= 1;
                        formatted = trimRight(formatted);

                        if (formatted.length > 0 && autosemicolon) {
                            last = formatted.charAt(formatted.length - 1);
                            if (last !== ';' && last !== '{') {
                                formatted += ';';
                            }
                        }

                        formatted += '\n';
                        appendIndent();
                        formatted += '}';
                        blocks.push(formatted);
                        formatted = '';
                    }

                    if (String.prototype.trimRight) {
                        trimRight = function (s) {
                            return s.trimRight();
                        };
                    } else {
                        // old Internet Explorer
                        trimRight = function (s) {
                            return s.replace(/\s+$/, '');
                        };
                    }

                    State = {
                        Start: 0,
                        AtRule: 1,
                        Block: 2,
                        Selector: 3,
                        Ruleset: 4,
                        Property: 5,
                        Separator: 6,
                        Expression: 7,
                        URL: 8
                    };

                    depth = 0;
                    state = State.Start;
                    comment = false;
                    blocks = [];

                    // We want to deal with LF (\n) only
                    style = style.replace(/\r\n/g, '\n');

                    while (index < length) {
                        ch = style.charAt(index);
                        ch2 = style.charAt(index + 1);
                        index += 1;

                        // Inside a string literal?
                        if (isQuote(quote)) {
                            formatted += ch;
                            if (ch === quote) {
                                quote = null;
                            }
                            if (ch === '\\' && ch2 === quote) {
                                // Don't treat escaped character as the closing quote
                                formatted += ch2;
                                index += 1;
                            }
                            continue;
                        }

                        // Starting a string literal?
                        if (isQuote(ch)) {
                            formatted += ch;
                            quote = ch;
                            continue;
                        }

                        // Comment
                        if (comment) {
                            formatted += ch;
                            if (ch === '*' && ch2 === '/') {
                                comment = false;
                                formatted += ch2;
                                index += 1;
                            }
                            continue;
                        }
                        if (ch === '/' && ch2 === '*') {
                            comment = true;
                            formatted += ch;
                            formatted += ch2;
                            index += 1;
                            continue;
                        }

                        if (state === State.Start) {

                            if (blocks.length === 0) {
                                if (isWhitespace(ch) && formatted.length === 0) {
                                    continue;
                                }
                            }

                            // Copy white spaces and control characters
                            if (ch <= ' ' || ch.charCodeAt(0) >= 128) {
                                state = State.Start;
                                formatted += ch;
                                continue;
                            }

                            // Selector or at-rule
                            if (isName(ch) || (ch === '@')) {

                                // Clear trailing whitespaces and linefeeds.
                                str = trimRight(formatted);

                                if (str.length === 0) {
                                    // If we have empty string after removing all the trailing
                                    // spaces, that means we are right after a block.
                                    // Ensure a blank line as the separator.
                                    if (blocks.length > 0) {
                                        formatted = '\n\n';
                                    }
                                } else {
                                    // After finishing a ruleset or directive statement,
                                    // there should be one blank line.
                                    if (str.charAt(str.length - 1) === '}' ||
                                            str.charAt(str.length - 1) === ';') {

                                        formatted = str + '\n\n';
                                    } else {
                                        // After block comment, keep all the linefeeds but
                                        // start from the first column (remove whitespaces prefix).
                                        while (true) {
                                            ch2 = formatted.charAt(formatted.length - 1);
                                            if (ch2 !== ' ' && ch2.charCodeAt(0) !== 9) {
                                                break;
                                            }
                                            formatted = formatted.substr(0, formatted.length - 1);
                                        }
                                    }
                                }
                                formatted += ch;
                                state = (ch === '@') ? State.AtRule : State.Selector;
                                continue;
                            }
                        }

                        if (state === State.AtRule) {

                            // ';' terminates a statement.
                            if (ch === ';') {
                                formatted += ch;
                                state = State.Start;
                                continue;
                            }

                            // '{' starts a block
                            if (ch === '{') {
                                str = trimRight(formatted);
                                openBlock();
                                state = (str === '@font-face') ? State.Ruleset : State.Block;
                                continue;
                            }

                            formatted += ch;
                            continue;
                        }

                        if (state === State.Block) {

                            // Selector
                            if (isName(ch)) {

                                // Clear trailing whitespaces and linefeeds.
                                str = trimRight(formatted);

                                if (str.length === 0) {
                                    // If we have empty string after removing all the trailing
                                    // spaces, that means we are right after a block.
                                    // Ensure a blank line as the separator.
                                    if (blocks.length > 0) {
                                        formatted = '\n\n';
                                    }
                                } else {
                                    // Insert blank line if necessary.
                                    if (str.charAt(str.length - 1) === '}') {
                                        formatted = str + '\n\n';
                                    } else {
                                        // After block comment, keep all the linefeeds but
                                        // start from the first column (remove whitespaces prefix).
                                        while (true) {
                                            ch2 = formatted.charAt(formatted.length - 1);
                                            if (ch2 !== ' ' && ch2.charCodeAt(0) !== 9) {
                                                break;
                                            }
                                            formatted = formatted.substr(0, formatted.length - 1);
                                        }
                                    }
                                }

                                appendIndent();
                                formatted += ch;
                                state = State.Selector;
                                continue;
                            }

                            // '}' resets the state.
                            if (ch === '}') {
                                closeBlock();
                                state = State.Start;
                                continue;
                            }

                            formatted += ch;
                            continue;
                        }

                        if (state === State.Selector) {

                            // '{' starts the ruleset.
                            if (ch === '{') {
                                openBlock();
                                state = State.Ruleset;
                                continue;
                            }

                            // '}' resets the state.
                            if (ch === '}') {
                                closeBlock();
                                state = State.Start;
                                continue;
                            }

                            formatted += ch;
                            continue;
                        }

                        if (state === State.Ruleset) {

                            // '}' finishes the ruleset.
                            if (ch === '}') {
                                closeBlock();
                                state = State.Start;
                                if (depth > 0) {
                                    state = State.Block;
                                }
                                continue;
                            }

                            // Make sure there is no blank line or trailing spaces inbetween
                            if (ch === '\n') {
                                formatted = trimRight(formatted);
                                formatted += '\n';
                                continue;
                            }

                            // property name
                            if (!isWhitespace(ch)) {
                                formatted = trimRight(formatted);
                                formatted += '\n';
                                appendIndent();
                                formatted += ch;
                                state = State.Property;
                                continue;
                            }
                            formatted += ch;
                            continue;
                        }

                        if (state === State.Property) {

                            // ':' concludes the property.
                            if (ch === ':') {
                                formatted = trimRight(formatted);
                                formatted += ': ';
                                state = State.Expression;
                                if (isWhitespace(ch2)) {
                                    state = State.Separator;
                                }
                                continue;
                            }

                            // '}' finishes the ruleset.
                            if (ch === '}') {
                                closeBlock();
                                state = State.Start;
                                if (depth > 0) {
                                    state = State.Block;
                                }
                                continue;
                            }

                            formatted += ch;
                            continue;
                        }

                        if (state === State.Separator) {

                            // Non-whitespace starts the expression.
                            if (!isWhitespace(ch)) {
                                formatted += ch;
                                state = State.Expression;
                                continue;
                            }

                            // Anticipate string literal.
                            if (isQuote(ch2)) {
                                state = State.Expression;
                            }

                            continue;
                        }

                        if (state === State.Expression) {

                            // '}' finishes the ruleset.
                            if (ch === '}') {
                                closeBlock();
                                state = State.Start;
                                if (depth > 0) {
                                    state = State.Block;
                                }
                                continue;
                            }

                            // ';' completes the declaration.
                            if (ch === ';') {
                                formatted = trimRight(formatted);
                                formatted += ';\n';
                                state = State.Ruleset;
                                continue;
                            }

                            formatted += ch;

                            if (ch === '(') {
                                if (formatted.charAt(formatted.length - 2) === 'l' &&
                                        formatted.charAt(formatted.length - 3) === 'r' &&
                                        formatted.charAt(formatted.length - 4) === 'u') {

                                    // URL starts with '(' and closes with ')'.
                                    state = State.URL;
                                    continue;
                                }
                            }

                            continue;
                        }

                        if (state === State.URL) {


                            // ')' finishes the URL (only if it is not escaped).
                            if (ch === ')' && formatted.charAt(formatted.length - 1 !== '\\')) {
                                formatted += ch;
                                state = State.Expression;
                                continue;
                            }
                        }

                        // The default action is to copy the character (to prevent
                        // infinite loop).
                        formatted += ch;
                    }

                    formatted = blocks.join('') + formatted;

                    return formatted;
                }

                {
                    // Node.js module.
                    module.exports = cssbeautify;
                }

            }());
            }(cssbeautify$1));

            var cssbeautify = cssbeautify$1.exports;

            // CSS Syntax Module Level 3
            // https://www.w3.org/TR/css-syntax-3/
            const EOF$1 = 0;                 // <EOF-token>
            const Ident = 1;               // <ident-token>
            const Function$1 = 2;            // <function-token>
            const AtKeyword = 3;           // <at-keyword-token>
            const Hash$1 = 4;                // <hash-token>
            const String$2 = 5;              // <string-token>
            const BadString = 6;           // <bad-string-token>
            const Url$1 = 7;                 // <url-token>
            const BadUrl = 8;              // <bad-url-token>
            const Delim = 9;               // <delim-token>
            const Number$2 = 10;             // <number-token>
            const Percentage$1 = 11;         // <percentage-token>
            const Dimension$1 = 12;          // <dimension-token>
            const WhiteSpace$1 = 13;         // <whitespace-token>
            const CDO$1 = 14;                // <CDO-token>
            const CDC$1 = 15;                // <CDC-token>
            const Colon = 16;              // <colon-token>     :
            const Semicolon = 17;          // <semicolon-token> ;
            const Comma = 18;              // <comma-token>     ,
            const LeftSquareBracket = 19;  // <[-token>
            const RightSquareBracket = 20; // <]-token>
            const LeftParenthesis = 21;    // <(-token>
            const RightParenthesis = 22;   // <)-token>
            const LeftCurlyBracket = 23;   // <{-token>
            const RightCurlyBracket = 24;  // <}-token>
            const Comment$1 = 25;

            const EOF = 0;

            // https://drafts.csswg.org/css-syntax-3/
            // § 4.2. Definitions

            // digit
            // A code point between U+0030 DIGIT ZERO (0) and U+0039 DIGIT NINE (9).
            function isDigit(code) {
                return code >= 0x0030 && code <= 0x0039;
            }

            // hex digit
            // A digit, or a code point between U+0041 LATIN CAPITAL LETTER A (A) and U+0046 LATIN CAPITAL LETTER F (F),
            // or a code point between U+0061 LATIN SMALL LETTER A (a) and U+0066 LATIN SMALL LETTER F (f).
            function isHexDigit(code) {
                return (
                    isDigit(code) || // 0 .. 9
                    (code >= 0x0041 && code <= 0x0046) || // A .. F
                    (code >= 0x0061 && code <= 0x0066)    // a .. f
                );
            }

            // uppercase letter
            // A code point between U+0041 LATIN CAPITAL LETTER A (A) and U+005A LATIN CAPITAL LETTER Z (Z).
            function isUppercaseLetter(code) {
                return code >= 0x0041 && code <= 0x005A;
            }

            // lowercase letter
            // A code point between U+0061 LATIN SMALL LETTER A (a) and U+007A LATIN SMALL LETTER Z (z).
            function isLowercaseLetter(code) {
                return code >= 0x0061 && code <= 0x007A;
            }

            // letter
            // An uppercase letter or a lowercase letter.
            function isLetter(code) {
                return isUppercaseLetter(code) || isLowercaseLetter(code);
            }

            // non-ASCII code point
            // A code point with a value equal to or greater than U+0080 <control>.
            function isNonAscii(code) {
                return code >= 0x0080;
            }

            // name-start code point
            // A letter, a non-ASCII code point, or U+005F LOW LINE (_).
            function isNameStart(code) {
                return isLetter(code) || isNonAscii(code) || code === 0x005F;
            }

            // name code point
            // A name-start code point, a digit, or U+002D HYPHEN-MINUS (-).
            function isName(code) {
                return isNameStart(code) || isDigit(code) || code === 0x002D;
            }

            // non-printable code point
            // A code point between U+0000 NULL and U+0008 BACKSPACE, or U+000B LINE TABULATION,
            // or a code point between U+000E SHIFT OUT and U+001F INFORMATION SEPARATOR ONE, or U+007F DELETE.
            function isNonPrintable(code) {
                return (
                    (code >= 0x0000 && code <= 0x0008) ||
                    (code === 0x000B) ||
                    (code >= 0x000E && code <= 0x001F) ||
                    (code === 0x007F)
                );
            }

            // newline
            // U+000A LINE FEED. Note that U+000D CARRIAGE RETURN and U+000C FORM FEED are not included in this definition,
            // as they are converted to U+000A LINE FEED during preprocessing.
            // TODO: we doesn't do a preprocessing, so check a code point for U+000D CARRIAGE RETURN and U+000C FORM FEED
            function isNewline(code) {
                return code === 0x000A || code === 0x000D || code === 0x000C;
            }

            // whitespace
            // A newline, U+0009 CHARACTER TABULATION, or U+0020 SPACE.
            function isWhiteSpace(code) {
                return isNewline(code) || code === 0x0020 || code === 0x0009;
            }

            // § 4.3.8. Check if two code points are a valid escape
            function isValidEscape(first, second) {
                // If the first code point is not U+005C REVERSE SOLIDUS (\), return false.
                if (first !== 0x005C) {
                    return false;
                }

                // Otherwise, if the second code point is a newline or EOF, return false.
                if (isNewline(second) || second === EOF) {
                    return false;
                }

                // Otherwise, return true.
                return true;
            }

            // § 4.3.9. Check if three code points would start an identifier
            function isIdentifierStart(first, second, third) {
                // Look at the first code point:

                // U+002D HYPHEN-MINUS
                if (first === 0x002D) {
                    // If the second code point is a name-start code point or a U+002D HYPHEN-MINUS,
                    // or the second and third code points are a valid escape, return true. Otherwise, return false.
                    return (
                        isNameStart(second) ||
                        second === 0x002D ||
                        isValidEscape(second, third)
                    );
                }

                // name-start code point
                if (isNameStart(first)) {
                    // Return true.
                    return true;
                }

                // U+005C REVERSE SOLIDUS (\)
                if (first === 0x005C) {
                    // If the first and second code points are a valid escape, return true. Otherwise, return false.
                    return isValidEscape(first, second);
                }

                // anything else
                // Return false.
                return false;
            }

            // § 4.3.10. Check if three code points would start a number
            function isNumberStart(first, second, third) {
                // Look at the first code point:

                // U+002B PLUS SIGN (+)
                // U+002D HYPHEN-MINUS (-)
                if (first === 0x002B || first === 0x002D) {
                    // If the second code point is a digit, return true.
                    if (isDigit(second)) {
                        return 2;
                    }

                    // Otherwise, if the second code point is a U+002E FULL STOP (.)
                    // and the third code point is a digit, return true.
                    // Otherwise, return false.
                    return second === 0x002E && isDigit(third) ? 3 : 0;
                }

                // U+002E FULL STOP (.)
                if (first === 0x002E) {
                    // If the second code point is a digit, return true. Otherwise, return false.
                    return isDigit(second) ? 2 : 0;
                }

                // digit
                if (isDigit(first)) {
                    // Return true.
                    return 1;
                }

                // anything else
                // Return false.
                return 0;
            }

            //
            // Misc
            //

            // detect BOM (https://en.wikipedia.org/wiki/Byte_order_mark)
            function isBOM(code) {
                // UTF-16BE
                if (code === 0xFEFF) {
                    return 1;
                }

                // UTF-16LE
                if (code === 0xFFFE) {
                    return 1;
                }

                return 0;
            }

            // Fast code category
            // Only ASCII code points has a special meaning, that's why we define a maps for 0..127 codes only
            const CATEGORY = new Array(0x80);
            const EofCategory = 0x80;
            const WhiteSpaceCategory = 0x82;
            const DigitCategory = 0x83;
            const NameStartCategory = 0x84;
            const NonPrintableCategory = 0x85;

            for (let i = 0; i < CATEGORY.length; i++) {
                CATEGORY[i] =
                    isWhiteSpace(i) && WhiteSpaceCategory ||
                    isDigit(i) && DigitCategory ||
                    isNameStart(i) && NameStartCategory ||
                    isNonPrintable(i) && NonPrintableCategory ||
                    i || EofCategory;
            }

            function charCodeCategory(code) {
                return code < 0x80 ? CATEGORY[code] : NameStartCategory;
            }

            function getCharCode(source, offset) {
                return offset < source.length ? source.charCodeAt(offset) : 0;
            }

            function getNewlineLength(source, offset, code) {
                if (code === 13 /* \r */ && getCharCode(source, offset + 1) === 10 /* \n */) {
                    return 2;
                }

                return 1;
            }

            function cmpChar(testStr, offset, referenceCode) {
                let code = testStr.charCodeAt(offset);

                // code.toLowerCase() for A..Z
                if (isUppercaseLetter(code)) {
                    code = code | 32;
                }

                return code === referenceCode;
            }

            function cmpStr(testStr, start, end, referenceStr) {
                if (end - start !== referenceStr.length) {
                    return false;
                }

                if (start < 0 || end > testStr.length) {
                    return false;
                }

                for (let i = start; i < end; i++) {
                    const referenceCode = referenceStr.charCodeAt(i - start);
                    let testCode = testStr.charCodeAt(i);

                    // testCode.toLowerCase() for A..Z
                    if (isUppercaseLetter(testCode)) {
                        testCode = testCode | 32;
                    }

                    if (testCode !== referenceCode) {
                        return false;
                    }
                }

                return true;
            }

            function findWhiteSpaceStart(source, offset) {
                for (; offset >= 0; offset--) {
                    if (!isWhiteSpace(source.charCodeAt(offset))) {
                        break;
                    }
                }

                return offset + 1;
            }

            function findWhiteSpaceEnd(source, offset) {
                for (; offset < source.length; offset++) {
                    if (!isWhiteSpace(source.charCodeAt(offset))) {
                        break;
                    }
                }

                return offset;
            }

            function findDecimalNumberEnd(source, offset) {
                for (; offset < source.length; offset++) {
                    if (!isDigit(source.charCodeAt(offset))) {
                        break;
                    }
                }

                return offset;
            }

            // § 4.3.7. Consume an escaped code point
            function consumeEscaped(source, offset) {
                // It assumes that the U+005C REVERSE SOLIDUS (\) has already been consumed and
                // that the next input code point has already been verified to be part of a valid escape.
                offset += 2;

                // hex digit
                if (isHexDigit(getCharCode(source, offset - 1))) {
                    // Consume as many hex digits as possible, but no more than 5.
                    // Note that this means 1-6 hex digits have been consumed in total.
                    for (const maxOffset = Math.min(source.length, offset + 5); offset < maxOffset; offset++) {
                        if (!isHexDigit(getCharCode(source, offset))) {
                            break;
                        }
                    }

                    // If the next input code point is whitespace, consume it as well.
                    const code = getCharCode(source, offset);
                    if (isWhiteSpace(code)) {
                        offset += getNewlineLength(source, offset, code);
                    }
                }

                return offset;
            }

            // §4.3.11. Consume a name
            // Note: This algorithm does not do the verification of the first few code points that are necessary
            // to ensure the returned code points would constitute an <ident-token>. If that is the intended use,
            // ensure that the stream starts with an identifier before calling this algorithm.
            function consumeName(source, offset) {
                // Let result initially be an empty string.
                // Repeatedly consume the next input code point from the stream:
                for (; offset < source.length; offset++) {
                    const code = source.charCodeAt(offset);

                    // name code point
                    if (isName(code)) {
                        // Append the code point to result.
                        continue;
                    }

                    // the stream starts with a valid escape
                    if (isValidEscape(code, getCharCode(source, offset + 1))) {
                        // Consume an escaped code point. Append the returned code point to result.
                        offset = consumeEscaped(source, offset) - 1;
                        continue;
                    }

                    // anything else
                    // Reconsume the current input code point. Return result.
                    break;
                }

                return offset;
            }

            // §4.3.12. Consume a number
            function consumeNumber$1(source, offset) {
                let code = source.charCodeAt(offset);

                // 2. If the next input code point is U+002B PLUS SIGN (+) or U+002D HYPHEN-MINUS (-),
                // consume it and append it to repr.
                if (code === 0x002B || code === 0x002D) {
                    code = source.charCodeAt(offset += 1);
                }

                // 3. While the next input code point is a digit, consume it and append it to repr.
                if (isDigit(code)) {
                    offset = findDecimalNumberEnd(source, offset + 1);
                    code = source.charCodeAt(offset);
                }

                // 4. If the next 2 input code points are U+002E FULL STOP (.) followed by a digit, then:
                if (code === 0x002E && isDigit(source.charCodeAt(offset + 1))) {
                    // 4.1 Consume them.
                    // 4.2 Append them to repr.
                    offset += 2;

                    // 4.3 Set type to "number".
                    // TODO

                    // 4.4 While the next input code point is a digit, consume it and append it to repr.

                    offset = findDecimalNumberEnd(source, offset);
                }

                // 5. If the next 2 or 3 input code points are U+0045 LATIN CAPITAL LETTER E (E)
                // or U+0065 LATIN SMALL LETTER E (e), ... , followed by a digit, then:
                if (cmpChar(source, offset, 101 /* e */)) {
                    let sign = 0;
                    code = source.charCodeAt(offset + 1);

                    // ... optionally followed by U+002D HYPHEN-MINUS (-) or U+002B PLUS SIGN (+) ...
                    if (code === 0x002D || code === 0x002B) {
                        sign = 1;
                        code = source.charCodeAt(offset + 2);
                    }

                    // ... followed by a digit
                    if (isDigit(code)) {
                        // 5.1 Consume them.
                        // 5.2 Append them to repr.

                        // 5.3 Set type to "number".
                        // TODO

                        // 5.4 While the next input code point is a digit, consume it and append it to repr.
                        offset = findDecimalNumberEnd(source, offset + 1 + sign + 1);
                    }
                }

                return offset;
            }

            // § 4.3.14. Consume the remnants of a bad url
            // ... its sole use is to consume enough of the input stream to reach a recovery point
            // where normal tokenizing can resume.
            function consumeBadUrlRemnants(source, offset) {
                // Repeatedly consume the next input code point from the stream:
                for (; offset < source.length; offset++) {
                    const code = source.charCodeAt(offset);

                    // U+0029 RIGHT PARENTHESIS ())
                    // EOF
                    if (code === 0x0029) {
                        // Return.
                        offset++;
                        break;
                    }

                    if (isValidEscape(code, getCharCode(source, offset + 1))) {
                        // Consume an escaped code point.
                        // Note: This allows an escaped right parenthesis ("\)") to be encountered
                        // without ending the <bad-url-token>. This is otherwise identical to
                        // the "anything else" clause.
                        offset = consumeEscaped(source, offset);
                    }
                }

                return offset;
            }

            // § 4.3.7. Consume an escaped code point
            // Note: This algorithm assumes that escaped is valid without leading U+005C REVERSE SOLIDUS (\)
            function decodeEscaped(escaped) {
                // Single char escaped that's not a hex digit
                if (escaped.length === 1 && !isHexDigit(escaped.charCodeAt(0))) {
                    return escaped[0];
                }

                // Interpret the hex digits as a hexadecimal number.
                let code = parseInt(escaped, 16);

                if (
                    (code === 0) ||                       // If this number is zero,
                    (code >= 0xD800 && code <= 0xDFFF) || // or is for a surrogate,
                    (code > 0x10FFFF)                     // or is greater than the maximum allowed code point
                ) {
                    // ... return U+FFFD REPLACEMENT CHARACTER
                    code = 0xFFFD;
                }

                // Otherwise, return the code point with that value.
                return String.fromCodePoint(code);
            }

            var tokenNames = [
                'EOF-token',
                'ident-token',
                'function-token',
                'at-keyword-token',
                'hash-token',
                'string-token',
                'bad-string-token',
                'url-token',
                'bad-url-token',
                'delim-token',
                'number-token',
                'percentage-token',
                'dimension-token',
                'whitespace-token',
                'CDO-token',
                'CDC-token',
                'colon-token',
                'semicolon-token',
                'comma-token',
                '[-token',
                ']-token',
                '(-token',
                ')-token',
                '{-token',
                '}-token'
            ];

            const MIN_SIZE = 16 * 1024;

            function adoptBuffer(buffer = null, size) {
                if (buffer === null || buffer.length < size) {
                    return new Uint32Array(Math.max(size + 1024, MIN_SIZE));
                }

                return buffer;
            }

            const N$4 = 10;
            const F$2 = 12;
            const R$2 = 13;

            function computeLinesAndColumns(host) {
                const source = host.source;
                const sourceLength = source.length;
                const startOffset = source.length > 0 ? isBOM(source.charCodeAt(0)) : 0;
                const lines = adoptBuffer(host.lines, sourceLength);
                const columns = adoptBuffer(host.columns, sourceLength);
                let line = host.startLine;
                let column = host.startColumn;

                for (let i = startOffset; i < sourceLength; i++) {
                    const code = source.charCodeAt(i);

                    lines[i] = line;
                    columns[i] = column++;

                    if (code === N$4 || code === R$2 || code === F$2) {
                        if (code === R$2 && i + 1 < sourceLength && source.charCodeAt(i + 1) === N$4) {
                            i++;
                            lines[i] = line;
                            columns[i] = column;
                        }

                        line++;
                        column = 1;
                    }
                }

                lines[sourceLength] = line;
                columns[sourceLength] = column;

                host.lines = lines;
                host.columns = columns;
                host.computed = true;
            }

            class OffsetToLocation {
                constructor() {
                    this.lines = null;
                    this.columns = null;
                    this.computed = false;
                }
                setSource(source, startOffset = 0, startLine = 1, startColumn = 1) {
                    this.source = source;
                    this.startOffset = startOffset;
                    this.startLine = startLine;
                    this.startColumn = startColumn;
                    this.computed = false;
                }
                getLocation(offset, filename) {
                    if (!this.computed) {
                        computeLinesAndColumns(this);
                    }

                    return {
                        source: filename,
                        offset: this.startOffset + offset,
                        line: this.lines[offset],
                        column: this.columns[offset]
                    };
                }
                getLocationRange(start, end, filename) {
                    if (!this.computed) {
                        computeLinesAndColumns(this);
                    }

                    return {
                        source: filename,
                        start: {
                            offset: this.startOffset + start,
                            line: this.lines[start],
                            column: this.columns[start]
                        },
                        end: {
                            offset: this.startOffset + end,
                            line: this.lines[end],
                            column: this.columns[end]
                        }
                    };
                }
            }

            const OFFSET_MASK = 0x00FFFFFF;
            const TYPE_SHIFT = 24;
            const balancePair$1 = new Map([
                [Function$1, RightParenthesis],
                [LeftParenthesis, RightParenthesis],
                [LeftSquareBracket, RightSquareBracket],
                [LeftCurlyBracket, RightCurlyBracket]
            ]);

            class TokenStream {
                constructor(source, tokenize) {
                    this.setSource(source, tokenize);
                }
                reset() {
                    this.eof = false;
                    this.tokenIndex = -1;
                    this.tokenType = 0;
                    this.tokenStart = this.firstCharOffset;
                    this.tokenEnd = this.firstCharOffset;
                }
                setSource(source = '', tokenize = () => {}) {
                    source = String(source || '');

                    const sourceLength = source.length;
                    const offsetAndType = adoptBuffer(this.offsetAndType, source.length + 1); // +1 because of eof-token
                    const balance = adoptBuffer(this.balance, source.length + 1);
                    let tokenCount = 0;
                    let balanceCloseType = 0;
                    let balanceStart = 0;
                    let firstCharOffset = -1;

                    // capture buffers
                    this.offsetAndType = null;
                    this.balance = null;

                    tokenize(source, (type, start, end) => {
                        switch (type) {
                            default:
                                balance[tokenCount] = sourceLength;
                                break;

                            case balanceCloseType: {
                                let balancePrev = balanceStart & OFFSET_MASK;
                                balanceStart = balance[balancePrev];
                                balanceCloseType = balanceStart >> TYPE_SHIFT;
                                balance[tokenCount] = balancePrev;
                                balance[balancePrev++] = tokenCount;
                                for (; balancePrev < tokenCount; balancePrev++) {
                                    if (balance[balancePrev] === sourceLength) {
                                        balance[balancePrev] = tokenCount;
                                    }
                                }
                                break;
                            }

                            case LeftParenthesis:
                            case Function$1:
                            case LeftSquareBracket:
                            case LeftCurlyBracket:
                                balance[tokenCount] = balanceStart;
                                balanceCloseType = balancePair$1.get(type);
                                balanceStart = (balanceCloseType << TYPE_SHIFT) | tokenCount;
                                break;
                        }

                        offsetAndType[tokenCount++] = (type << TYPE_SHIFT) | end;
                        if (firstCharOffset === -1) {
                            firstCharOffset = start;
                        }
                    });

                    // finalize buffers
                    offsetAndType[tokenCount] = (EOF$1 << TYPE_SHIFT) | sourceLength; // <EOF-token>
                    balance[tokenCount] = sourceLength;
                    balance[sourceLength] = sourceLength; // prevents false positive balance match with any token
                    while (balanceStart !== 0) {
                        const balancePrev = balanceStart & OFFSET_MASK;
                        balanceStart = balance[balancePrev];
                        balance[balancePrev] = sourceLength;
                    }

                    this.source = source;
                    this.firstCharOffset = firstCharOffset === -1 ? 0 : firstCharOffset;
                    this.tokenCount = tokenCount;
                    this.offsetAndType = offsetAndType;
                    this.balance = balance;

                    this.reset();
                    this.next();
                }

                lookupType(offset) {
                    offset += this.tokenIndex;

                    if (offset < this.tokenCount) {
                        return this.offsetAndType[offset] >> TYPE_SHIFT;
                    }

                    return EOF$1;
                }
                lookupOffset(offset) {
                    offset += this.tokenIndex;

                    if (offset < this.tokenCount) {
                        return this.offsetAndType[offset - 1] & OFFSET_MASK;
                    }

                    return this.source.length;
                }
                lookupValue(offset, referenceStr) {
                    offset += this.tokenIndex;

                    if (offset < this.tokenCount) {
                        return cmpStr(
                            this.source,
                            this.offsetAndType[offset - 1] & OFFSET_MASK,
                            this.offsetAndType[offset] & OFFSET_MASK,
                            referenceStr
                        );
                    }

                    return false;
                }
                getTokenStart(tokenIndex) {
                    if (tokenIndex === this.tokenIndex) {
                        return this.tokenStart;
                    }

                    if (tokenIndex > 0) {
                        return tokenIndex < this.tokenCount
                            ? this.offsetAndType[tokenIndex - 1] & OFFSET_MASK
                            : this.offsetAndType[this.tokenCount] & OFFSET_MASK;
                    }

                    return this.firstCharOffset;
                }
                substrToCursor(start) {
                    return this.source.substring(start, this.tokenStart);
                }

                isBalanceEdge(pos) {
                    return this.balance[this.tokenIndex] < pos;
                }
                isDelim(code, offset) {
                    if (offset) {
                        return (
                            this.lookupType(offset) === Delim &&
                            this.source.charCodeAt(this.lookupOffset(offset)) === code
                        );
                    }

                    return (
                        this.tokenType === Delim &&
                        this.source.charCodeAt(this.tokenStart) === code
                    );
                }

                skip(tokenCount) {
                    let next = this.tokenIndex + tokenCount;

                    if (next < this.tokenCount) {
                        this.tokenIndex = next;
                        this.tokenStart = this.offsetAndType[next - 1] & OFFSET_MASK;
                        next = this.offsetAndType[next];
                        this.tokenType = next >> TYPE_SHIFT;
                        this.tokenEnd = next & OFFSET_MASK;
                    } else {
                        this.tokenIndex = this.tokenCount;
                        this.next();
                    }
                }
                next() {
                    let next = this.tokenIndex + 1;

                    if (next < this.tokenCount) {
                        this.tokenIndex = next;
                        this.tokenStart = this.tokenEnd;
                        next = this.offsetAndType[next];
                        this.tokenType = next >> TYPE_SHIFT;
                        this.tokenEnd = next & OFFSET_MASK;
                    } else {
                        this.eof = true;
                        this.tokenIndex = this.tokenCount;
                        this.tokenType = EOF$1;
                        this.tokenStart = this.tokenEnd = this.source.length;
                    }
                }
                skipSC() {
                    while (this.tokenType === WhiteSpace$1 || this.tokenType === Comment$1) {
                        this.next();
                    }
                }
                skipUntilBalanced(startToken, stopConsume) {
                    let cursor = startToken;
                    let balanceEnd;
                    let offset;

                    loop:
                    for (; cursor < this.tokenCount; cursor++) {
                        balanceEnd = this.balance[cursor];

                        // stop scanning on balance edge that points to offset before start token
                        if (balanceEnd < startToken) {
                            break loop;
                        }

                        offset = cursor > 0 ? this.offsetAndType[cursor - 1] & OFFSET_MASK : this.firstCharOffset;

                        // check stop condition
                        switch (stopConsume(this.source.charCodeAt(offset))) {
                            case 1: // just stop
                                break loop;

                            case 2: // stop & included
                                cursor++;
                                break loop;

                            default:
                                // fast forward to the end of balanced block
                                if (this.balance[balanceEnd] === cursor) {
                                    cursor = balanceEnd;
                                }
                        }
                    }

                    this.skip(cursor - this.tokenIndex);
                }

                forEachToken(fn) {
                    for (let i = 0, offset = this.firstCharOffset; i < this.tokenCount; i++) {
                        const start = offset;
                        const item = this.offsetAndType[i];
                        const end = item & OFFSET_MASK;
                        const type = item >> TYPE_SHIFT;

                        offset = end;

                        fn(type, start, end, i);
                    }
                }
                dump() {
                    const tokens = new Array(this.tokenCount);

                    this.forEachToken((type, start, end, index) => {
                        tokens[index] = {
                            idx: index,
                            type: tokenNames[type],
                            chunk: this.source.substring(start, end),
                            balance: this.balance[index]
                        };
                    });

                    return tokens;
                }
            }

            function tokenize$1(source, onToken) {
                function getCharCode(offset) {
                    return offset < sourceLength ? source.charCodeAt(offset) : 0;
                }

                // § 4.3.3. Consume a numeric token
                function consumeNumericToken() {
                    // Consume a number and let number be the result.
                    offset = consumeNumber$1(source, offset);

                    // If the next 3 input code points would start an identifier, then:
                    if (isIdentifierStart(getCharCode(offset), getCharCode(offset + 1), getCharCode(offset + 2))) {
                        // Create a <dimension-token> with the same value and type flag as number, and a unit set initially to the empty string.
                        // Consume a name. Set the <dimension-token>’s unit to the returned value.
                        // Return the <dimension-token>.
                        type = Dimension$1;
                        offset = consumeName(source, offset);
                        return;
                    }

                    // Otherwise, if the next input code point is U+0025 PERCENTAGE SIGN (%), consume it.
                    if (getCharCode(offset) === 0x0025) {
                        // Create a <percentage-token> with the same value as number, and return it.
                        type = Percentage$1;
                        offset++;
                        return;
                    }

                    // Otherwise, create a <number-token> with the same value and type flag as number, and return it.
                    type = Number$2;
                }

                // § 4.3.4. Consume an ident-like token
                function consumeIdentLikeToken() {
                    const nameStartOffset = offset;

                    // Consume a name, and let string be the result.
                    offset = consumeName(source, offset);

                    // If string’s value is an ASCII case-insensitive match for "url",
                    // and the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.
                    if (cmpStr(source, nameStartOffset, offset, 'url') && getCharCode(offset) === 0x0028) {
                        // While the next two input code points are whitespace, consume the next input code point.
                        offset = findWhiteSpaceEnd(source, offset + 1);

                        // If the next one or two input code points are U+0022 QUOTATION MARK ("), U+0027 APOSTROPHE ('),
                        // or whitespace followed by U+0022 QUOTATION MARK (") or U+0027 APOSTROPHE ('),
                        // then create a <function-token> with its value set to string and return it.
                        if (getCharCode(offset) === 0x0022 ||
                            getCharCode(offset) === 0x0027) {
                            type = Function$1;
                            offset = nameStartOffset + 4;
                            return;
                        }

                        // Otherwise, consume a url token, and return it.
                        consumeUrlToken();
                        return;
                    }

                    // Otherwise, if the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.
                    // Create a <function-token> with its value set to string and return it.
                    if (getCharCode(offset) === 0x0028) {
                        type = Function$1;
                        offset++;
                        return;
                    }

                    // Otherwise, create an <ident-token> with its value set to string and return it.
                    type = Ident;
                }

                // § 4.3.5. Consume a string token
                function consumeStringToken(endingCodePoint) {
                    // This algorithm may be called with an ending code point, which denotes the code point
                    // that ends the string. If an ending code point is not specified,
                    // the current input code point is used.
                    if (!endingCodePoint) {
                        endingCodePoint = getCharCode(offset++);
                    }

                    // Initially create a <string-token> with its value set to the empty string.
                    type = String$2;

                    // Repeatedly consume the next input code point from the stream:
                    for (; offset < source.length; offset++) {
                        const code = source.charCodeAt(offset);

                        switch (charCodeCategory(code)) {
                            // ending code point
                            case endingCodePoint:
                                // Return the <string-token>.
                                offset++;
                                return;

                                // EOF
                                // case EofCategory:
                                // This is a parse error. Return the <string-token>.
                                // return;

                            // newline
                            case WhiteSpaceCategory:
                                if (isNewline(code)) {
                                    // This is a parse error. Reconsume the current input code point,
                                    // create a <bad-string-token>, and return it.
                                    offset += getNewlineLength(source, offset, code);
                                    type = BadString;
                                    return;
                                }
                                break;

                            // U+005C REVERSE SOLIDUS (\)
                            case 0x005C:
                                // If the next input code point is EOF, do nothing.
                                if (offset === source.length - 1) {
                                    break;
                                }

                                const nextCode = getCharCode(offset + 1);

                                // Otherwise, if the next input code point is a newline, consume it.
                                if (isNewline(nextCode)) {
                                    offset += getNewlineLength(source, offset + 1, nextCode);
                                } else if (isValidEscape(code, nextCode)) {
                                    // Otherwise, (the stream starts with a valid escape) consume
                                    // an escaped code point and append the returned code point to
                                    // the <string-token>’s value.
                                    offset = consumeEscaped(source, offset) - 1;
                                }
                                break;

                            // anything else
                            // Append the current input code point to the <string-token>’s value.
                        }
                    }
                }

                // § 4.3.6. Consume a url token
                // Note: This algorithm assumes that the initial "url(" has already been consumed.
                // This algorithm also assumes that it’s being called to consume an "unquoted" value, like url(foo).
                // A quoted value, like url("foo"), is parsed as a <function-token>. Consume an ident-like token
                // automatically handles this distinction; this algorithm shouldn’t be called directly otherwise.
                function consumeUrlToken() {
                    // Initially create a <url-token> with its value set to the empty string.
                    type = Url$1;

                    // Consume as much whitespace as possible.
                    offset = findWhiteSpaceEnd(source, offset);

                    // Repeatedly consume the next input code point from the stream:
                    for (; offset < source.length; offset++) {
                        const code = source.charCodeAt(offset);

                        switch (charCodeCategory(code)) {
                            // U+0029 RIGHT PARENTHESIS ())
                            case 0x0029:
                                // Return the <url-token>.
                                offset++;
                                return;

                                // EOF
                                // case EofCategory:
                                // This is a parse error. Return the <url-token>.
                                // return;

                            // whitespace
                            case WhiteSpaceCategory:
                                // Consume as much whitespace as possible.
                                offset = findWhiteSpaceEnd(source, offset);

                                // If the next input code point is U+0029 RIGHT PARENTHESIS ()) or EOF,
                                // consume it and return the <url-token>
                                // (if EOF was encountered, this is a parse error);
                                if (getCharCode(offset) === 0x0029 || offset >= source.length) {
                                    if (offset < source.length) {
                                        offset++;
                                    }
                                    return;
                                }

                                // otherwise, consume the remnants of a bad url, create a <bad-url-token>,
                                // and return it.
                                offset = consumeBadUrlRemnants(source, offset);
                                type = BadUrl;
                                return;

                            // U+0022 QUOTATION MARK (")
                            // U+0027 APOSTROPHE (')
                            // U+0028 LEFT PARENTHESIS (()
                            // non-printable code point
                            case 0x0022:
                            case 0x0027:
                            case 0x0028:
                            case NonPrintableCategory:
                                // This is a parse error. Consume the remnants of a bad url,
                                // create a <bad-url-token>, and return it.
                                offset = consumeBadUrlRemnants(source, offset);
                                type = BadUrl;
                                return;

                            // U+005C REVERSE SOLIDUS (\)
                            case 0x005C:
                                // If the stream starts with a valid escape, consume an escaped code point and
                                // append the returned code point to the <url-token>’s value.
                                if (isValidEscape(code, getCharCode(offset + 1))) {
                                    offset = consumeEscaped(source, offset) - 1;
                                    break;
                                }

                                // Otherwise, this is a parse error. Consume the remnants of a bad url,
                                // create a <bad-url-token>, and return it.
                                offset = consumeBadUrlRemnants(source, offset);
                                type = BadUrl;
                                return;

                            // anything else
                            // Append the current input code point to the <url-token>’s value.
                        }
                    }
                }

                // ensure source is a string
                source = String(source || '');

                const sourceLength = source.length;
                let start = isBOM(getCharCode(0));
                let offset = start;
                let type;

                // https://drafts.csswg.org/css-syntax-3/#consume-token
                // § 4.3.1. Consume a token
                while (offset < sourceLength) {
                    const code = source.charCodeAt(offset);

                    switch (charCodeCategory(code)) {
                        // whitespace
                        case WhiteSpaceCategory:
                            // Consume as much whitespace as possible. Return a <whitespace-token>.
                            type = WhiteSpace$1;
                            offset = findWhiteSpaceEnd(source, offset + 1);
                            break;

                        // U+0022 QUOTATION MARK (")
                        case 0x0022:
                            // Consume a string token and return it.
                            consumeStringToken();
                            break;

                        // U+0023 NUMBER SIGN (#)
                        case 0x0023:
                            // If the next input code point is a name code point or the next two input code points are a valid escape, then:
                            if (isName(getCharCode(offset + 1)) || isValidEscape(getCharCode(offset + 1), getCharCode(offset + 2))) {
                                // Create a <hash-token>.
                                type = Hash$1;

                                // If the next 3 input code points would start an identifier, set the <hash-token>’s type flag to "id".
                                // if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {
                                //     // TODO: set id flag
                                // }

                                // Consume a name, and set the <hash-token>’s value to the returned string.
                                offset = consumeName(source, offset + 1);

                                // Return the <hash-token>.
                            } else {
                                // Otherwise, return a <delim-token> with its value set to the current input code point.
                                type = Delim;
                                offset++;
                            }

                            break;

                        // U+0027 APOSTROPHE (')
                        case 0x0027:
                            // Consume a string token and return it.
                            consumeStringToken();
                            break;

                        // U+0028 LEFT PARENTHESIS (()
                        case 0x0028:
                            // Return a <(-token>.
                            type = LeftParenthesis;
                            offset++;
                            break;

                        // U+0029 RIGHT PARENTHESIS ())
                        case 0x0029:
                            // Return a <)-token>.
                            type = RightParenthesis;
                            offset++;
                            break;

                        // U+002B PLUS SIGN (+)
                        case 0x002B:
                            // If the input stream starts with a number, ...
                            if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {
                                // ... reconsume the current input code point, consume a numeric token, and return it.
                                consumeNumericToken();
                            } else {
                                // Otherwise, return a <delim-token> with its value set to the current input code point.
                                type = Delim;
                                offset++;
                            }
                            break;

                        // U+002C COMMA (,)
                        case 0x002C:
                            // Return a <comma-token>.
                            type = Comma;
                            offset++;
                            break;

                        // U+002D HYPHEN-MINUS (-)
                        case 0x002D:
                            // If the input stream starts with a number, reconsume the current input code point, consume a numeric token, and return it.
                            if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {
                                consumeNumericToken();
                            } else {
                                // Otherwise, if the next 2 input code points are U+002D HYPHEN-MINUS U+003E GREATER-THAN SIGN (->), consume them and return a <CDC-token>.
                                if (getCharCode(offset + 1) === 0x002D &&
                                    getCharCode(offset + 2) === 0x003E) {
                                    type = CDC$1;
                                    offset = offset + 3;
                                } else {
                                    // Otherwise, if the input stream starts with an identifier, ...
                                    if (isIdentifierStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {
                                        // ... reconsume the current input code point, consume an ident-like token, and return it.
                                        consumeIdentLikeToken();
                                    } else {
                                        // Otherwise, return a <delim-token> with its value set to the current input code point.
                                        type = Delim;
                                        offset++;
                                    }
                                }
                            }
                            break;

                        // U+002E FULL STOP (.)
                        case 0x002E:
                            // If the input stream starts with a number, ...
                            if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {
                                // ... reconsume the current input code point, consume a numeric token, and return it.
                                consumeNumericToken();
                            } else {
                                // Otherwise, return a <delim-token> with its value set to the current input code point.
                                type = Delim;
                                offset++;
                            }

                            break;

                        // U+002F SOLIDUS (/)
                        case 0x002F:
                            // If the next two input code point are U+002F SOLIDUS (/) followed by a U+002A ASTERISK (*),
                            if (getCharCode(offset + 1) === 0x002A) {
                                // ... consume them and all following code points up to and including the first U+002A ASTERISK (*)
                                // followed by a U+002F SOLIDUS (/), or up to an EOF code point.
                                type = Comment$1;
                                offset = source.indexOf('*/', offset + 2);
                                offset = offset === -1 ? source.length : offset + 2;
                            } else {
                                type = Delim;
                                offset++;
                            }
                            break;

                        // U+003A COLON (:)
                        case 0x003A:
                            // Return a <colon-token>.
                            type = Colon;
                            offset++;
                            break;

                        // U+003B SEMICOLON (;)
                        case 0x003B:
                            // Return a <semicolon-token>.
                            type = Semicolon;
                            offset++;
                            break;

                        // U+003C LESS-THAN SIGN (<)
                        case 0x003C:
                            // If the next 3 input code points are U+0021 EXCLAMATION MARK U+002D HYPHEN-MINUS U+002D HYPHEN-MINUS (!--), ...
                            if (getCharCode(offset + 1) === 0x0021 &&
                                getCharCode(offset + 2) === 0x002D &&
                                getCharCode(offset + 3) === 0x002D) {
                                // ... consume them and return a <CDO-token>.
                                type = CDO$1;
                                offset = offset + 4;
                            } else {
                                // Otherwise, return a <delim-token> with its value set to the current input code point.
                                type = Delim;
                                offset++;
                            }

                            break;

                        // U+0040 COMMERCIAL AT (@)
                        case 0x0040:
                            // If the next 3 input code points would start an identifier, ...
                            if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {
                                // ... consume a name, create an <at-keyword-token> with its value set to the returned value, and return it.
                                type = AtKeyword;
                                offset = consumeName(source, offset + 1);
                            } else {
                                // Otherwise, return a <delim-token> with its value set to the current input code point.
                                type = Delim;
                                offset++;
                            }

                            break;

                        // U+005B LEFT SQUARE BRACKET ([)
                        case 0x005B:
                            // Return a <[-token>.
                            type = LeftSquareBracket;
                            offset++;
                            break;

                        // U+005C REVERSE SOLIDUS (\)
                        case 0x005C:
                            // If the input stream starts with a valid escape, ...
                            if (isValidEscape(code, getCharCode(offset + 1))) {
                                // ... reconsume the current input code point, consume an ident-like token, and return it.
                                consumeIdentLikeToken();
                            } else {
                                // Otherwise, this is a parse error. Return a <delim-token> with its value set to the current input code point.
                                type = Delim;
                                offset++;
                            }
                            break;

                        // U+005D RIGHT SQUARE BRACKET (])
                        case 0x005D:
                            // Return a <]-token>.
                            type = RightSquareBracket;
                            offset++;
                            break;

                        // U+007B LEFT CURLY BRACKET ({)
                        case 0x007B:
                            // Return a <{-token>.
                            type = LeftCurlyBracket;
                            offset++;
                            break;

                        // U+007D RIGHT CURLY BRACKET (})
                        case 0x007D:
                            // Return a <}-token>.
                            type = RightCurlyBracket;
                            offset++;
                            break;

                        // digit
                        case DigitCategory:
                            // Reconsume the current input code point, consume a numeric token, and return it.
                            consumeNumericToken();
                            break;

                        // name-start code point
                        case NameStartCategory:
                            // Reconsume the current input code point, consume an ident-like token, and return it.
                            consumeIdentLikeToken();
                            break;

                            // EOF
                            // case EofCategory:
                            // Return an <EOF-token>.
                            // break;

                        // anything else
                        default:
                            // Return a <delim-token> with its value set to the current input code point.
                            type = Delim;
                            offset++;
                    }

                    // put token to stream
                    onToken(type, start, start = offset);
                }
            }

            //
            //                              list
            //                            ┌──────┐
            //             ┌──────────────┼─head │
            //             │              │ tail─┼──────────────┐
            //             │              └──────┘              │
            //             ▼                                    ▼
            //            item        item        item        item
            //          ┌──────┐    ┌──────┐    ┌──────┐    ┌──────┐
            //  null ◀──┼─prev │◀───┼─prev │◀───┼─prev │◀───┼─prev │
            //          │ next─┼───▶│ next─┼───▶│ next─┼───▶│ next─┼──▶ null
            //          ├──────┤    ├──────┤    ├──────┤    ├──────┤
            //          │ data │    │ data │    │ data │    │ data │
            //          └──────┘    └──────┘    └──────┘    └──────┘
            //

            let releasedCursors = null;

            class List {
                static createItem(data) {
                    return {
                        prev: null,
                        next: null,
                        data
                    };
                }

                constructor() {
                    this.head = null;
                    this.tail = null;
                    this.cursor = null;
                }
                createItem(data) {
                    return List.createItem(data);
                }

                // cursor helpers
                allocateCursor(prev, next) {
                    let cursor;

                    if (releasedCursors !== null) {
                        cursor = releasedCursors;
                        releasedCursors = releasedCursors.cursor;
                        cursor.prev = prev;
                        cursor.next = next;
                        cursor.cursor = this.cursor;
                    } else {
                        cursor = {
                            prev,
                            next,
                            cursor: this.cursor
                        };
                    }

                    this.cursor = cursor;

                    return cursor;
                }
                releaseCursor() {
                    const { cursor } = this;

                    this.cursor = cursor.cursor;
                    cursor.prev = null;
                    cursor.next = null;
                    cursor.cursor = releasedCursors;
                    releasedCursors = cursor;
                }
                updateCursors(prevOld, prevNew, nextOld, nextNew) {
                    let { cursor } = this;

                    while (cursor !== null) {
                        if (cursor.prev === prevOld) {
                            cursor.prev = prevNew;
                        }

                        if (cursor.next === nextOld) {
                            cursor.next = nextNew;
                        }

                        cursor = cursor.cursor;
                    }
                }
                *[Symbol.iterator]() {
                    for (let cursor = this.head; cursor !== null; cursor = cursor.next) {
                        yield cursor.data;
                    }
                }

                // getters
                get size() {
                    let size = 0;

                    for (let cursor = this.head; cursor !== null; cursor = cursor.next) {
                        size++;
                    }

                    return size;
                }
                get isEmpty() {
                    return this.head === null;
                }
                get first() {
                    return this.head && this.head.data;
                }
                get last() {
                    return this.tail && this.tail.data;
                }

                // convertors
                fromArray(array) {
                    let cursor = null;
                    this.head = null;

                    for (let data of array) {
                        const item = List.createItem(data);

                        if (cursor !== null) {
                            cursor.next = item;
                        } else {
                            this.head = item;
                        }

                        item.prev = cursor;
                        cursor = item;
                    }

                    this.tail = cursor;
                    return this;
                }
                toArray() {
                    return [...this];
                }
                toJSON() {
                    return [...this];
                }

                // array-like methods
                forEach(fn, thisArg = this) {
                    // push cursor
                    const cursor = this.allocateCursor(null, this.head);

                    while (cursor.next !== null) {
                        const item = cursor.next;
                        cursor.next = item.next;
                        fn.call(thisArg, item.data, item, this);
                    }

                    // pop cursor
                    this.releaseCursor();
                }
                forEachRight(fn, thisArg = this) {
                    // push cursor
                    const cursor = this.allocateCursor(this.tail, null);

                    while (cursor.prev !== null) {
                        const item = cursor.prev;
                        cursor.prev = item.prev;
                        fn.call(thisArg, item.data, item, this);
                    }

                    // pop cursor
                    this.releaseCursor();
                }
                reduce(fn, initialValue, thisArg = this) {
                    // push cursor
                    let cursor = this.allocateCursor(null, this.head);
                    let acc = initialValue;
                    let item;

                    while (cursor.next !== null) {
                        item = cursor.next;
                        cursor.next = item.next;

                        acc = fn.call(thisArg, acc, item.data, item, this);
                    }

                    // pop cursor
                    this.releaseCursor();

                    return acc;
                }
                reduceRight(fn, initialValue, thisArg = this) {
                    // push cursor
                    let cursor = this.allocateCursor(this.tail, null);
                    let acc = initialValue;
                    let item;

                    while (cursor.prev !== null) {
                        item = cursor.prev;
                        cursor.prev = item.prev;

                        acc = fn.call(thisArg, acc, item.data, item, this);
                    }

                    // pop cursor
                    this.releaseCursor();

                    return acc;
                }
                some(fn, thisArg = this) {
                    for (let cursor = this.head; cursor !== null; cursor = cursor.next) {
                        if (fn.call(thisArg, cursor.data, cursor, this)) {
                            return true;
                        }
                    }

                    return false;
                }
                map(fn, thisArg = this) {
                    const result = new List();

                    for (let cursor = this.head; cursor !== null; cursor = cursor.next) {
                        result.appendData(fn.call(thisArg, cursor.data, cursor, this));
                    }

                    return result;
                }
                filter(fn, thisArg = this) {
                    const result = new List();

                    for (let cursor = this.head; cursor !== null; cursor = cursor.next) {
                        if (fn.call(thisArg, cursor.data, cursor, this)) {
                            result.appendData(cursor.data);
                        }
                    }

                    return result;
                }

                nextUntil(start, fn, thisArg = this) {
                    if (start === null) {
                        return;
                    }

                    // push cursor
                    const cursor = this.allocateCursor(null, start);

                    while (cursor.next !== null) {
                        const item = cursor.next;
                        cursor.next = item.next;
                        if (fn.call(thisArg, item.data, item, this)) {
                            break;
                        }
                    }

                    // pop cursor
                    this.releaseCursor();
                }
                prevUntil(start, fn, thisArg = this) {
                    if (start === null) {
                        return;
                    }

                    // push cursor
                    const cursor = this.allocateCursor(start, null);

                    while (cursor.prev !== null) {
                        const item = cursor.prev;
                        cursor.prev = item.prev;
                        if (fn.call(thisArg, item.data, item, this)) {
                            break;
                        }
                    }

                    // pop cursor
                    this.releaseCursor();
                }

                // mutation
                clear() {
                    this.head = null;
                    this.tail = null;
                }
                copy() {
                    const result = new List();

                    for (let data of this) {
                        result.appendData(data);
                    }

                    return result;
                }
                prepend(item) {
                    //      head
                    //    ^
                    // item
                    this.updateCursors(null, item, this.head, item);

                    // insert to the beginning of the list
                    if (this.head !== null) {
                        // new item <- first item
                        this.head.prev = item;
                        // new item -> first item
                        item.next = this.head;
                    } else {
                        // if list has no head, then it also has no tail
                        // in this case tail points to the new item
                        this.tail = item;
                    }

                    // head always points to new item
                    this.head = item;
                    return this;
                }
                prependData(data) {
                    return this.prepend(List.createItem(data));
                }
                append(item) {
                    return this.insert(item);
                }
                appendData(data) {
                    return this.insert(List.createItem(data));
                }
                insert(item, before = null) {
                    if (before !== null) {
                        // prev   before
                        //      ^
                        //     item
                        this.updateCursors(before.prev, item, before, item);

                        if (before.prev === null) {
                            // insert to the beginning of list
                            if (this.head !== before) {
                                throw new Error('before doesn\'t belong to list');
                            }
                            // since head points to before therefore list doesn't empty
                            // no need to check tail
                            this.head = item;
                            before.prev = item;
                            item.next = before;
                            this.updateCursors(null, item);
                        } else {
                            // insert between two items
                            before.prev.next = item;
                            item.prev = before.prev;
                            before.prev = item;
                            item.next = before;
                        }
                    } else {
                        // tail
                        //      ^
                        //      item
                        this.updateCursors(this.tail, item, null, item);

                        // insert to the ending of the list
                        if (this.tail !== null) {
                            // last item -> new item
                            this.tail.next = item;
                            // last item <- new item
                            item.prev = this.tail;
                        } else {
                            // if list has no tail, then it also has no head
                            // in this case head points to new item
                            this.head = item;
                        }

                        // tail always points to new item
                        this.tail = item;
                    }

                    return this;
                }
                insertData(data, before) {
                    return this.insert(List.createItem(data), before);
                }
                remove(item) {
                    //      item
                    //       ^
                    // prev     next
                    this.updateCursors(item, item.prev, item, item.next);

                    if (item.prev !== null) {
                        item.prev.next = item.next;
                    } else {
                        if (this.head !== item) {
                            throw new Error('item doesn\'t belong to list');
                        }

                        this.head = item.next;
                    }

                    if (item.next !== null) {
                        item.next.prev = item.prev;
                    } else {
                        if (this.tail !== item) {
                            throw new Error('item doesn\'t belong to list');
                        }

                        this.tail = item.prev;
                    }

                    item.prev = null;
                    item.next = null;

                    return item;
                }
                push(data) {
                    this.insert(List.createItem(data));
                }
                pop() {
                    return this.tail !== null ? this.remove(this.tail) : null;
                }
                unshift(data) {
                    this.prepend(List.createItem(data));
                }
                shift() {
                    return this.head !== null ? this.remove(this.head) : null;
                }
                prependList(list) {
                    return this.insertList(list, this.head);
                }
                appendList(list) {
                    return this.insertList(list);
                }
                insertList(list, before) {
                    // ignore empty lists
                    if (list.head === null) {
                        return this;
                    }

                    if (before !== undefined && before !== null) {
                        this.updateCursors(before.prev, list.tail, before, list.head);

                        // insert in the middle of dist list
                        if (before.prev !== null) {
                            // before.prev <-> list.head
                            before.prev.next = list.head;
                            list.head.prev = before.prev;
                        } else {
                            this.head = list.head;
                        }

                        before.prev = list.tail;
                        list.tail.next = before;
                    } else {
                        this.updateCursors(this.tail, list.tail, null, list.head);

                        // insert to end of the list
                        if (this.tail !== null) {
                            // if destination list has a tail, then it also has a head,
                            // but head doesn't change
                            // dest tail -> source head
                            this.tail.next = list.head;
                            // dest tail <- source head
                            list.head.prev = this.tail;
                        } else {
                            // if list has no a tail, then it also has no a head
                            // in this case points head to new item
                            this.head = list.head;
                        }

                        // tail always start point to new item
                        this.tail = list.tail;
                    }

                    list.head = null;
                    list.tail = null;
                    return this;
                }
                replace(oldItem, newItemOrList) {
                    if ('head' in newItemOrList) {
                        this.insertList(newItemOrList, oldItem);
                    } else {
                        this.insert(newItemOrList, oldItem);
                    }

                    this.remove(oldItem);
                }
            }

            function createCustomError(name, message) {
                // use Object.create(), because some VMs prevent setting line/column otherwise
                // (iOS Safari 10 even throws an exception)
                const error = Object.create(SyntaxError.prototype);
                const errorStack = new Error();

                return Object.assign(error, {
                    name,
                    message,
                    get stack() {
                        return (errorStack.stack || '').replace(/^(.+\n){1,3}/, `${name}: ${message}\n`);
                    }
                });
            }

            const MAX_LINE_LENGTH = 100;
            const OFFSET_CORRECTION = 60;
            const TAB_REPLACEMENT = '    ';

            function sourceFragment({ source, line, column }, extraLines) {
                function processLines(start, end) {
                    return lines
                        .slice(start, end)
                        .map((line, idx) =>
                            String(start + idx + 1).padStart(maxNumLength) + ' |' + line
                        ).join('\n');
                }

                const lines = source.split(/\r\n?|\n|\f/);
                const startLine = Math.max(1, line - extraLines) - 1;
                const endLine = Math.min(line + extraLines, lines.length + 1);
                const maxNumLength = Math.max(4, String(endLine).length) + 1;
                let cutLeft = 0;

                // column correction according to replaced tab before column
                column += (TAB_REPLACEMENT.length - 1) * (lines[line - 1].substr(0, column - 1).match(/\t/g) || []).length;

                if (column > MAX_LINE_LENGTH) {
                    cutLeft = column - OFFSET_CORRECTION + 3;
                    column = OFFSET_CORRECTION - 2;
                }

                for (let i = startLine; i <= endLine; i++) {
                    if (i >= 0 && i < lines.length) {
                        lines[i] = lines[i].replace(/\t/g, TAB_REPLACEMENT);
                        lines[i] =
                            (cutLeft > 0 && lines[i].length > cutLeft ? '\u2026' : '') +
                            lines[i].substr(cutLeft, MAX_LINE_LENGTH - 2) +
                            (lines[i].length > cutLeft + MAX_LINE_LENGTH - 1 ? '\u2026' : '');
                    }
                }

                return [
                    processLines(startLine, line),
                    new Array(column + maxNumLength + 2).join('-') + '^',
                    processLines(line, endLine)
                ].filter(Boolean).join('\n');
            }

            function SyntaxError$2(message, source, offset, line, column) {
                const error = Object.assign(createCustomError('SyntaxError', message), {
                    source,
                    offset,
                    line,
                    column,
                    sourceFragment(extraLines) {
                        return sourceFragment({ source, line, column }, isNaN(extraLines) ? 0 : extraLines);
                    },
                    get formattedMessage() {
                        return (
                            `Parse error: ${message}\n` +
                            sourceFragment({ source, line, column }, 2)
                        );
                    }
                });

                return error;
            }

            function readSequence$1(recognizer) {
                const children = this.createList();
                let space = false;
                const context = {
                    recognizer
                };

                while (!this.eof) {
                    switch (this.tokenType) {
                        case Comment$1:
                            this.next();
                            continue;

                        case WhiteSpace$1:
                            space = true;
                            this.next();
                            continue;
                    }

                    let child = recognizer.getNode.call(this, context);

                    if (child === undefined) {
                        break;
                    }

                    if (space) {
                        if (recognizer.onWhiteSpace) {
                            recognizer.onWhiteSpace.call(this, child, children, context);
                        }
                        space = false;
                    }

                    children.push(child);
                }

                if (space && recognizer.onWhiteSpace) {
                    recognizer.onWhiteSpace.call(this, null, children, context);
                }

                return children;
            }

            const NOOP = () => {};
            const EXCLAMATIONMARK$3 = 0x0021;  // U+0021 EXCLAMATION MARK (!)
            const NUMBERSIGN$4 = 0x0023;       // U+0023 NUMBER SIGN (#)
            const SEMICOLON = 0x003B;        // U+003B SEMICOLON (;)
            const LEFTCURLYBRACKET$1 = 0x007B; // U+007B LEFT CURLY BRACKET ({)
            const NULL = 0;

            function createParseContext(name) {
                return function() {
                    return this[name]();
                };
            }

            function fetchParseValues(dict) {
                const result = Object.create(null);

                for (const name in dict) {
                    const item = dict[name];
                    const fn = item.parse || item;

                    if (fn) {
                        result[name] = fn;
                    }
                }

                return result;
            }

            function processConfig(config) {
                const parseConfig = {
                    context: Object.create(null),
                    scope: Object.assign(Object.create(null), config.scope),
                    atrule: fetchParseValues(config.atrule),
                    pseudo: fetchParseValues(config.pseudo),
                    node: fetchParseValues(config.node)
                };

                for (const name in config.parseContext) {
                    switch (typeof config.parseContext[name]) {
                        case 'function':
                            parseConfig.context[name] = config.parseContext[name];
                            break;

                        case 'string':
                            parseConfig.context[name] = createParseContext(config.parseContext[name]);
                            break;
                    }
                }

                return {
                    config: parseConfig,
                    ...parseConfig,
                    ...parseConfig.node
                };
            }

            function createParser(config) {
                let source = '';
                let filename = '<unknown>';
                let needPositions = false;
                let onParseError = NOOP;
                let onParseErrorThrow = false;

                const locationMap = new OffsetToLocation();
                const parser = Object.assign(new TokenStream(), processConfig(config || {}), {
                    parseAtrulePrelude: true,
                    parseRulePrelude: true,
                    parseValue: true,
                    parseCustomProperty: false,

                    readSequence: readSequence$1,

                    consumeUntilBalanceEnd: () => 0,
                    consumeUntilLeftCurlyBracket(code) {
                        return code === LEFTCURLYBRACKET$1 ? 1 : 0;
                    },
                    consumeUntilLeftCurlyBracketOrSemicolon(code) {
                        return code === LEFTCURLYBRACKET$1 || code === SEMICOLON ? 1 : 0;
                    },
                    consumeUntilExclamationMarkOrSemicolon(code) {
                        return code === EXCLAMATIONMARK$3 || code === SEMICOLON ? 1 : 0;
                    },
                    consumeUntilSemicolonIncluded(code) {
                        return code === SEMICOLON ? 2 : 0;
                    },

                    createList() {
                        return new List();
                    },
                    createSingleNodeList(node) {
                        return new List().appendData(node);
                    },
                    getFirstListNode(list) {
                        return list && list.first;
                    },
                    getLastListNode(list) {
                        return list && list.last;
                    },

                    parseWithFallback(consumer, fallback) {
                        const startToken = this.tokenIndex;

                        try {
                            return consumer.call(this);
                        } catch (e) {
                            if (onParseErrorThrow) {
                                throw e;
                            }

                            const fallbackNode = fallback.call(this, startToken);

                            onParseErrorThrow = true;
                            onParseError(e, fallbackNode);
                            onParseErrorThrow = false;

                            return fallbackNode;
                        }
                    },

                    lookupNonWSType(offset) {
                        let type;

                        do {
                            type = this.lookupType(offset++);
                            if (type !== WhiteSpace$1) {
                                return type;
                            }
                        } while (type !== NULL);

                        return NULL;
                    },

                    charCodeAt(offset) {
                        return offset >= 0 && offset < source.length ? source.charCodeAt(offset) : 0;
                    },
                    substring(offsetStart, offsetEnd) {
                        return source.substring(offsetStart, offsetEnd);
                    },
                    substrToCursor(start) {
                        return this.source.substring(start, this.tokenStart);
                    },

                    cmpChar(offset, charCode) {
                        return cmpChar(source, offset, charCode);
                    },
                    cmpStr(offsetStart, offsetEnd, str) {
                        return cmpStr(source, offsetStart, offsetEnd, str);
                    },

                    consume(tokenType) {
                        const start = this.tokenStart;

                        this.eat(tokenType);

                        return this.substrToCursor(start);
                    },
                    consumeFunctionName() {
                        const name = source.substring(this.tokenStart, this.tokenEnd - 1);

                        this.eat(Function$1);

                        return name;
                    },
                    consumeNumber(type) {
                        const number = source.substring(this.tokenStart, consumeNumber$1(source, this.tokenStart));

                        this.eat(type);

                        return number;
                    },

                    eat(tokenType) {
                        if (this.tokenType !== tokenType) {
                            const tokenName = tokenNames[tokenType].slice(0, -6).replace(/-/g, ' ').replace(/^./, m => m.toUpperCase());
                            let message = `${/[[\](){}]/.test(tokenName) ? `"${tokenName}"` : tokenName} is expected`;
                            let offset = this.tokenStart;

                            // tweak message and offset
                            switch (tokenType) {
                                case Ident:
                                    // when identifier is expected but there is a function or url
                                    if (this.tokenType === Function$1 || this.tokenType === Url$1) {
                                        offset = this.tokenEnd - 1;
                                        message = 'Identifier is expected but function found';
                                    } else {
                                        message = 'Identifier is expected';
                                    }
                                    break;

                                case Hash$1:
                                    if (this.isDelim(NUMBERSIGN$4)) {
                                        this.next();
                                        offset++;
                                        message = 'Name is expected';
                                    }
                                    break;

                                case Percentage$1:
                                    if (this.tokenType === Number$2) {
                                        offset = this.tokenEnd;
                                        message = 'Percent sign is expected';
                                    }
                                    break;
                            }

                            this.error(message, offset);
                        }

                        this.next();
                    },
                    eatIdent(name) {
                        if (this.tokenType !== Ident || this.lookupValue(0, name) === false) {
                            this.error(`Identifier "${name}" is expected`);
                        }

                        this.next();
                    },
                    eatDelim(code) {
                        if (!this.isDelim(code)) {
                            this.error(`Delim "${String.fromCharCode(code)}" is expected`);
                        }

                        this.next();
                    },

                    getLocation(start, end) {
                        if (needPositions) {
                            return locationMap.getLocationRange(
                                start,
                                end,
                                filename
                            );
                        }

                        return null;
                    },
                    getLocationFromList(list) {
                        if (needPositions) {
                            const head = this.getFirstListNode(list);
                            const tail = this.getLastListNode(list);
                            return locationMap.getLocationRange(
                                head !== null ? head.loc.start.offset - locationMap.startOffset : this.tokenStart,
                                tail !== null ? tail.loc.end.offset - locationMap.startOffset : this.tokenStart,
                                filename
                            );
                        }

                        return null;
                    },

                    error(message, offset) {
                        const location = typeof offset !== 'undefined' && offset < source.length
                            ? locationMap.getLocation(offset)
                            : this.eof
                                ? locationMap.getLocation(findWhiteSpaceStart(source, source.length - 1))
                                : locationMap.getLocation(this.tokenStart);

                        throw new SyntaxError$2(
                            message || 'Unexpected input',
                            source,
                            location.offset,
                            location.line,
                            location.column
                        );
                    }
                });

                const parse = function(source_, options) {
                    source = source_;
                    options = options || {};

                    parser.setSource(source, tokenize$1);
                    locationMap.setSource(
                        source,
                        options.offset,
                        options.line,
                        options.column
                    );

                    filename = options.filename || '<unknown>';
                    needPositions = Boolean(options.positions);
                    onParseError = typeof options.onParseError === 'function' ? options.onParseError : NOOP;
                    onParseErrorThrow = false;

                    parser.parseAtrulePrelude = 'parseAtrulePrelude' in options ? Boolean(options.parseAtrulePrelude) : true;
                    parser.parseRulePrelude = 'parseRulePrelude' in options ? Boolean(options.parseRulePrelude) : true;
                    parser.parseValue = 'parseValue' in options ? Boolean(options.parseValue) : true;
                    parser.parseCustomProperty = 'parseCustomProperty' in options ? Boolean(options.parseCustomProperty) : false;

                    const { context = 'default', onComment } = options;

                    if (context in parser.context === false) {
                        throw new Error('Unknown context `' + context + '`');
                    }

                    if (typeof onComment === 'function') {
                        parser.forEachToken((type, start, end) => {
                            if (type === Comment$1) {
                                const loc = parser.getLocation(start, end);
                                const value = cmpStr(source, end - 2, end, '*/')
                                    ? source.slice(start + 2, end - 2)
                                    : source.slice(start + 2, end);

                                onComment(value, loc);
                            }
                        });
                    }

                    const ast = parser.context[context].call(parser, options);

                    if (!parser.eof) {
                        parser.error();
                    }

                    return ast;
                };

                return Object.assign(parse, {
                    SyntaxError: SyntaxError$2,
                    config: parser.config
                });
            }

            var base64Vlq = {};

            var base64$1 = {};

            /* -*- Mode: js; js-indent-level: 2; -*- */

            /*
             * Copyright 2011 Mozilla Foundation and contributors
             * Licensed under the New BSD license. See LICENSE or:
             * http://opensource.org/licenses/BSD-3-Clause
             */

            var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

            /**
             * Encode an integer in the range of 0 to 63 to a single base 64 digit.
             */
            base64$1.encode = function (number) {
              if (0 <= number && number < intToCharMap.length) {
                return intToCharMap[number];
              }
              throw new TypeError("Must be between 0 and 63: " + number);
            };

            /**
             * Decode a single base 64 character code digit to an integer. Returns -1 on
             * failure.
             */
            base64$1.decode = function (charCode) {
              var bigA = 65;     // 'A'
              var bigZ = 90;     // 'Z'

              var littleA = 97;  // 'a'
              var littleZ = 122; // 'z'

              var zero = 48;     // '0'
              var nine = 57;     // '9'

              var plus = 43;     // '+'
              var slash = 47;    // '/'

              var littleOffset = 26;
              var numberOffset = 52;

              // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
              if (bigA <= charCode && charCode <= bigZ) {
                return (charCode - bigA);
              }

              // 26 - 51: abcdefghijklmnopqrstuvwxyz
              if (littleA <= charCode && charCode <= littleZ) {
                return (charCode - littleA + littleOffset);
              }

              // 52 - 61: 0123456789
              if (zero <= charCode && charCode <= nine) {
                return (charCode - zero + numberOffset);
              }

              // 62: +
              if (charCode == plus) {
                return 62;
              }

              // 63: /
              if (charCode == slash) {
                return 63;
              }

              // Invalid base64 digit.
              return -1;
            };

            /* -*- Mode: js; js-indent-level: 2; -*- */

            /*
             * Copyright 2011 Mozilla Foundation and contributors
             * Licensed under the New BSD license. See LICENSE or:
             * http://opensource.org/licenses/BSD-3-Clause
             *
             * Based on the Base 64 VLQ implementation in Closure Compiler:
             * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
             *
             * Copyright 2011 The Closure Compiler Authors. All rights reserved.
             * Redistribution and use in source and binary forms, with or without
             * modification, are permitted provided that the following conditions are
             * met:
             *
             *  * Redistributions of source code must retain the above copyright
             *    notice, this list of conditions and the following disclaimer.
             *  * Redistributions in binary form must reproduce the above
             *    copyright notice, this list of conditions and the following
             *    disclaimer in the documentation and/or other materials provided
             *    with the distribution.
             *  * Neither the name of Google Inc. nor the names of its
             *    contributors may be used to endorse or promote products derived
             *    from this software without specific prior written permission.
             *
             * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
             * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
             * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
             * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
             * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
             * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
             * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
             * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
             * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
             * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
             * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
             */

            var base64 = base64$1;

            // A single base 64 digit can contain 6 bits of data. For the base 64 variable
            // length quantities we use in the source map spec, the first bit is the sign,
            // the next four bits are the actual value, and the 6th bit is the
            // continuation bit. The continuation bit tells us whether there are more
            // digits in this value following this digit.
            //
            //   Continuation
            //   |    Sign
            //   |    |
            //   V    V
            //   101011

            var VLQ_BASE_SHIFT = 5;

            // binary: 100000
            var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

            // binary: 011111
            var VLQ_BASE_MASK = VLQ_BASE - 1;

            // binary: 100000
            var VLQ_CONTINUATION_BIT = VLQ_BASE;

            /**
             * Converts from a two-complement value to a value where the sign bit is
             * placed in the least significant bit.  For example, as decimals:
             *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
             *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
             */
            function toVLQSigned(aValue) {
              return aValue < 0
                ? ((-aValue) << 1) + 1
                : (aValue << 1) + 0;
            }

            /**
             * Converts to a two-complement value from a value where the sign bit is
             * placed in the least significant bit.  For example, as decimals:
             *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
             *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
             */
            function fromVLQSigned(aValue) {
              var isNegative = (aValue & 1) === 1;
              var shifted = aValue >> 1;
              return isNegative
                ? -shifted
                : shifted;
            }

            /**
             * Returns the base 64 VLQ encoded value.
             */
            base64Vlq.encode = function base64VLQ_encode(aValue) {
              var encoded = "";
              var digit;

              var vlq = toVLQSigned(aValue);

              do {
                digit = vlq & VLQ_BASE_MASK;
                vlq >>>= VLQ_BASE_SHIFT;
                if (vlq > 0) {
                  // There are still more digits in this value, so we must make sure the
                  // continuation bit is marked.
                  digit |= VLQ_CONTINUATION_BIT;
                }
                encoded += base64.encode(digit);
              } while (vlq > 0);

              return encoded;
            };

            /**
             * Decodes the next base 64 VLQ value from the given string and returns the
             * value and the rest of the string via the out parameter.
             */
            base64Vlq.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
              var strLen = aStr.length;
              var result = 0;
              var shift = 0;
              var continuation, digit;

              do {
                if (aIndex >= strLen) {
                  throw new Error("Expected more digits in base 64 VLQ value.");
                }

                digit = base64.decode(aStr.charCodeAt(aIndex++));
                if (digit === -1) {
                  throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
                }

                continuation = !!(digit & VLQ_CONTINUATION_BIT);
                digit &= VLQ_BASE_MASK;
                result = result + (digit << shift);
                shift += VLQ_BASE_SHIFT;
              } while (continuation);

              aOutParam.value = fromVLQSigned(result);
              aOutParam.rest = aIndex;
            };

            var util$3 = {};

            /* -*- Mode: js; js-indent-level: 2; -*- */

            (function (exports) {
            /*
             * Copyright 2011 Mozilla Foundation and contributors
             * Licensed under the New BSD license. See LICENSE or:
             * http://opensource.org/licenses/BSD-3-Clause
             */

            /**
             * This is a helper function for getting values from parameter/options
             * objects.
             *
             * @param args The object we are extracting values from
             * @param name The name of the property we are getting.
             * @param defaultValue An optional value to return if the property is missing
             * from the object. If this is not specified and the property is missing, an
             * error will be thrown.
             */
            function getArg(aArgs, aName, aDefaultValue) {
              if (aName in aArgs) {
                return aArgs[aName];
              } else if (arguments.length === 3) {
                return aDefaultValue;
              } else {
                throw new Error('"' + aName + '" is a required argument.');
              }
            }
            exports.getArg = getArg;

            var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
            var dataUrlRegexp = /^data:.+\,.+$/;

            function urlParse(aUrl) {
              var match = aUrl.match(urlRegexp);
              if (!match) {
                return null;
              }
              return {
                scheme: match[1],
                auth: match[2],
                host: match[3],
                port: match[4],
                path: match[5]
              };
            }
            exports.urlParse = urlParse;

            function urlGenerate(aParsedUrl) {
              var url = '';
              if (aParsedUrl.scheme) {
                url += aParsedUrl.scheme + ':';
              }
              url += '//';
              if (aParsedUrl.auth) {
                url += aParsedUrl.auth + '@';
              }
              if (aParsedUrl.host) {
                url += aParsedUrl.host;
              }
              if (aParsedUrl.port) {
                url += ":" + aParsedUrl.port;
              }
              if (aParsedUrl.path) {
                url += aParsedUrl.path;
              }
              return url;
            }
            exports.urlGenerate = urlGenerate;

            var MAX_CACHED_INPUTS = 32;

            /**
             * Takes some function `f(input) -> result` and returns a memoized version of
             * `f`.
             *
             * We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The
             * memoization is a dumb-simple, linear least-recently-used cache.
             */
            function lruMemoize(f) {
              var cache = [];

              return function(input) {
                for (var i = 0; i < cache.length; i++) {
                  if (cache[i].input === input) {
                    var temp = cache[0];
                    cache[0] = cache[i];
                    cache[i] = temp;
                    return cache[0].result;
                  }
                }

                var result = f(input);

                cache.unshift({
                  input,
                  result,
                });

                if (cache.length > MAX_CACHED_INPUTS) {
                  cache.pop();
                }

                return result;
              };
            }

            /**
             * Normalizes a path, or the path portion of a URL:
             *
             * - Replaces consecutive slashes with one slash.
             * - Removes unnecessary '.' parts.
             * - Removes unnecessary '<dir>/..' parts.
             *
             * Based on code in the Node.js 'path' core module.
             *
             * @param aPath The path or url to normalize.
             */
            var normalize = lruMemoize(function normalize(aPath) {
              var path = aPath;
              var url = urlParse(aPath);
              if (url) {
                if (!url.path) {
                  return aPath;
                }
                path = url.path;
              }
              var isAbsolute = exports.isAbsolute(path);
              // Split the path into parts between `/` characters. This is much faster than
              // using `.split(/\/+/g)`.
              var parts = [];
              var start = 0;
              var i = 0;
              while (true) {
                start = i;
                i = path.indexOf("/", start);
                if (i === -1) {
                  parts.push(path.slice(start));
                  break;
                } else {
                  parts.push(path.slice(start, i));
                  while (i < path.length && path[i] === "/") {
                    i++;
                  }
                }
              }

              for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
                part = parts[i];
                if (part === '.') {
                  parts.splice(i, 1);
                } else if (part === '..') {
                  up++;
                } else if (up > 0) {
                  if (part === '') {
                    // The first part is blank if the path is absolute. Trying to go
                    // above the root is a no-op. Therefore we can remove all '..' parts
                    // directly after the root.
                    parts.splice(i + 1, up);
                    up = 0;
                  } else {
                    parts.splice(i, 2);
                    up--;
                  }
                }
              }
              path = parts.join('/');

              if (path === '') {
                path = isAbsolute ? '/' : '.';
              }

              if (url) {
                url.path = path;
                return urlGenerate(url);
              }
              return path;
            });
            exports.normalize = normalize;

            /**
             * Joins two paths/URLs.
             *
             * @param aRoot The root path or URL.
             * @param aPath The path or URL to be joined with the root.
             *
             * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
             *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
             *   first.
             * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
             *   is updated with the result and aRoot is returned. Otherwise the result
             *   is returned.
             *   - If aPath is absolute, the result is aPath.
             *   - Otherwise the two paths are joined with a slash.
             * - Joining for example 'http://' and 'www.example.com' is also supported.
             */
            function join(aRoot, aPath) {
              if (aRoot === "") {
                aRoot = ".";
              }
              if (aPath === "") {
                aPath = ".";
              }
              var aPathUrl = urlParse(aPath);
              var aRootUrl = urlParse(aRoot);
              if (aRootUrl) {
                aRoot = aRootUrl.path || '/';
              }

              // `join(foo, '//www.example.org')`
              if (aPathUrl && !aPathUrl.scheme) {
                if (aRootUrl) {
                  aPathUrl.scheme = aRootUrl.scheme;
                }
                return urlGenerate(aPathUrl);
              }

              if (aPathUrl || aPath.match(dataUrlRegexp)) {
                return aPath;
              }

              // `join('http://', 'www.example.com')`
              if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
                aRootUrl.host = aPath;
                return urlGenerate(aRootUrl);
              }

              var joined = aPath.charAt(0) === '/'
                ? aPath
                : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

              if (aRootUrl) {
                aRootUrl.path = joined;
                return urlGenerate(aRootUrl);
              }
              return joined;
            }
            exports.join = join;

            exports.isAbsolute = function (aPath) {
              return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
            };

            /**
             * Make a path relative to a URL or another path.
             *
             * @param aRoot The root path or URL.
             * @param aPath The path or URL to be made relative to aRoot.
             */
            function relative(aRoot, aPath) {
              if (aRoot === "") {
                aRoot = ".";
              }

              aRoot = aRoot.replace(/\/$/, '');

              // It is possible for the path to be above the root. In this case, simply
              // checking whether the root is a prefix of the path won't work. Instead, we
              // need to remove components from the root one by one, until either we find
              // a prefix that fits, or we run out of components to remove.
              var level = 0;
              while (aPath.indexOf(aRoot + '/') !== 0) {
                var index = aRoot.lastIndexOf("/");
                if (index < 0) {
                  return aPath;
                }

                // If the only part of the root that is left is the scheme (i.e. http://,
                // file:///, etc.), one or more slashes (/), or simply nothing at all, we
                // have exhausted all components, so the path is not relative to the root.
                aRoot = aRoot.slice(0, index);
                if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
                  return aPath;
                }

                ++level;
              }

              // Make sure we add a "../" for each component we removed from the root.
              return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
            }
            exports.relative = relative;

            var supportsNullProto = (function () {
              var obj = Object.create(null);
              return !('__proto__' in obj);
            }());

            function identity (s) {
              return s;
            }

            /**
             * Because behavior goes wacky when you set `__proto__` on objects, we
             * have to prefix all the strings in our set with an arbitrary character.
             *
             * See https://github.com/mozilla/source-map/pull/31 and
             * https://github.com/mozilla/source-map/issues/30
             *
             * @param String aStr
             */
            function toSetString(aStr) {
              if (isProtoString(aStr)) {
                return '$' + aStr;
              }

              return aStr;
            }
            exports.toSetString = supportsNullProto ? identity : toSetString;

            function fromSetString(aStr) {
              if (isProtoString(aStr)) {
                return aStr.slice(1);
              }

              return aStr;
            }
            exports.fromSetString = supportsNullProto ? identity : fromSetString;

            function isProtoString(s) {
              if (!s) {
                return false;
              }

              var length = s.length;

              if (length < 9 /* "__proto__".length */) {
                return false;
              }

              if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
                  s.charCodeAt(length - 2) !== 95  /* '_' */ ||
                  s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
                  s.charCodeAt(length - 4) !== 116 /* 't' */ ||
                  s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
                  s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
                  s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
                  s.charCodeAt(length - 8) !== 95  /* '_' */ ||
                  s.charCodeAt(length - 9) !== 95  /* '_' */) {
                return false;
              }

              for (var i = length - 10; i >= 0; i--) {
                if (s.charCodeAt(i) !== 36 /* '$' */) {
                  return false;
                }
              }

              return true;
            }

            /**
             * Comparator between two mappings where the original positions are compared.
             *
             * Optionally pass in `true` as `onlyCompareGenerated` to consider two
             * mappings with the same original source/line/column, but different generated
             * line and column the same. Useful when searching for a mapping with a
             * stubbed out mapping.
             */
            function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
              var cmp = strcmp(mappingA.source, mappingB.source);
              if (cmp !== 0) {
                return cmp;
              }

              cmp = mappingA.originalLine - mappingB.originalLine;
              if (cmp !== 0) {
                return cmp;
              }

              cmp = mappingA.originalColumn - mappingB.originalColumn;
              if (cmp !== 0 || onlyCompareOriginal) {
                return cmp;
              }

              cmp = mappingA.generatedColumn - mappingB.generatedColumn;
              if (cmp !== 0) {
                return cmp;
              }

              cmp = mappingA.generatedLine - mappingB.generatedLine;
              if (cmp !== 0) {
                return cmp;
              }

              return strcmp(mappingA.name, mappingB.name);
            }
            exports.compareByOriginalPositions = compareByOriginalPositions;

            function compareByOriginalPositionsNoSource(mappingA, mappingB, onlyCompareOriginal) {
              var cmp;

              cmp = mappingA.originalLine - mappingB.originalLine;
              if (cmp !== 0) {
                return cmp;
              }

              cmp = mappingA.originalColumn - mappingB.originalColumn;
              if (cmp !== 0 || onlyCompareOriginal) {
                return cmp;
              }

              cmp = mappingA.generatedColumn - mappingB.generatedColumn;
              if (cmp !== 0) {
                return cmp;
              }

              cmp = mappingA.generatedLine - mappingB.generatedLine;
              if (cmp !== 0) {
                return cmp;
              }

              return strcmp(mappingA.name, mappingB.name);
            }
            exports.compareByOriginalPositionsNoSource = compareByOriginalPositionsNoSource;

            /**
             * Comparator between two mappings with deflated source and name indices where
             * the generated positions are compared.
             *
             * Optionally pass in `true` as `onlyCompareGenerated` to consider two
             * mappings with the same generated line and column, but different
             * source/name/original line and column the same. Useful when searching for a
             * mapping with a stubbed out mapping.
             */
            function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
              var cmp = mappingA.generatedLine - mappingB.generatedLine;
              if (cmp !== 0) {
                return cmp;
              }

              cmp = mappingA.generatedColumn - mappingB.generatedColumn;
              if (cmp !== 0 || onlyCompareGenerated) {
                return cmp;
              }

              cmp = strcmp(mappingA.source, mappingB.source);
              if (cmp !== 0) {
                return cmp;
              }

              cmp = mappingA.originalLine - mappingB.originalLine;
              if (cmp !== 0) {
                return cmp;
              }

              cmp = mappingA.originalColumn - mappingB.originalColumn;
              if (cmp !== 0) {
                return cmp;
              }

              return strcmp(mappingA.name, mappingB.name);
            }
            exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

            function compareByGeneratedPositionsDeflatedNoLine(mappingA, mappingB, onlyCompareGenerated) {
              var cmp = mappingA.generatedColumn - mappingB.generatedColumn;
              if (cmp !== 0 || onlyCompareGenerated) {
                return cmp;
              }

              cmp = strcmp(mappingA.source, mappingB.source);
              if (cmp !== 0) {
                return cmp;
              }

              cmp = mappingA.originalLine - mappingB.originalLine;
              if (cmp !== 0) {
                return cmp;
              }

              cmp = mappingA.originalColumn - mappingB.originalColumn;
              if (cmp !== 0) {
                return cmp;
              }

              return strcmp(mappingA.name, mappingB.name);
            }
            exports.compareByGeneratedPositionsDeflatedNoLine = compareByGeneratedPositionsDeflatedNoLine;

            function strcmp(aStr1, aStr2) {
              if (aStr1 === aStr2) {
                return 0;
              }

              if (aStr1 === null) {
                return 1; // aStr2 !== null
              }

              if (aStr2 === null) {
                return -1; // aStr1 !== null
              }

              if (aStr1 > aStr2) {
                return 1;
              }

              return -1;
            }

            /**
             * Comparator between two mappings with inflated source and name strings where
             * the generated positions are compared.
             */
            function compareByGeneratedPositionsInflated(mappingA, mappingB) {
              var cmp = mappingA.generatedLine - mappingB.generatedLine;
              if (cmp !== 0) {
                return cmp;
              }

              cmp = mappingA.generatedColumn - mappingB.generatedColumn;
              if (cmp !== 0) {
                return cmp;
              }

              cmp = strcmp(mappingA.source, mappingB.source);
              if (cmp !== 0) {
                return cmp;
              }

              cmp = mappingA.originalLine - mappingB.originalLine;
              if (cmp !== 0) {
                return cmp;
              }

              cmp = mappingA.originalColumn - mappingB.originalColumn;
              if (cmp !== 0) {
                return cmp;
              }

              return strcmp(mappingA.name, mappingB.name);
            }
            exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

            /**
             * Strip any JSON XSSI avoidance prefix from the string (as documented
             * in the source maps specification), and then parse the string as
             * JSON.
             */
            function parseSourceMapInput(str) {
              return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
            }
            exports.parseSourceMapInput = parseSourceMapInput;

            /**
             * Compute the URL of a source given the the source root, the source's
             * URL, and the source map's URL.
             */
            function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
              sourceURL = sourceURL || '';

              if (sourceRoot) {
                // This follows what Chrome does.
                if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
                  sourceRoot += '/';
                }
                // The spec says:
                //   Line 4: An optional source root, useful for relocating source
                //   files on a server or removing repeated values in the
                //   “sources” entry.  This value is prepended to the individual
                //   entries in the “source” field.
                sourceURL = sourceRoot + sourceURL;
              }

              // Historically, SourceMapConsumer did not take the sourceMapURL as
              // a parameter.  This mode is still somewhat supported, which is why
              // this code block is conditional.  However, it's preferable to pass
              // the source map URL to SourceMapConsumer, so that this function
              // can implement the source URL resolution algorithm as outlined in
              // the spec.  This block is basically the equivalent of:
              //    new URL(sourceURL, sourceMapURL).toString()
              // ... except it avoids using URL, which wasn't available in the
              // older releases of node still supported by this library.
              //
              // The spec says:
              //   If the sources are not absolute URLs after prepending of the
              //   “sourceRoot”, the sources are resolved relative to the
              //   SourceMap (like resolving script src in a html document).
              if (sourceMapURL) {
                var parsed = urlParse(sourceMapURL);
                if (!parsed) {
                  throw new Error("sourceMapURL could not be parsed");
                }
                if (parsed.path) {
                  // Strip the last path component, but keep the "/".
                  var index = parsed.path.lastIndexOf('/');
                  if (index >= 0) {
                    parsed.path = parsed.path.substring(0, index + 1);
                  }
                }
                sourceURL = join(urlGenerate(parsed), sourceURL);
              }

              return normalize(sourceURL);
            }
            exports.computeSourceURL = computeSourceURL;
            }(util$3));

            var arraySet = {};

            /* -*- Mode: js; js-indent-level: 2; -*- */

            /*
             * Copyright 2011 Mozilla Foundation and contributors
             * Licensed under the New BSD license. See LICENSE or:
             * http://opensource.org/licenses/BSD-3-Clause
             */

            var util$2 = util$3;
            var has = Object.prototype.hasOwnProperty;
            var hasNativeMap = typeof Map !== "undefined";

            /**
             * A data structure which is a combination of an array and a set. Adding a new
             * member is O(1), testing for membership is O(1), and finding the index of an
             * element is O(1). Removing elements from the set is not supported. Only
             * strings are supported for membership.
             */
            function ArraySet$1() {
              this._array = [];
              this._set = hasNativeMap ? new Map() : Object.create(null);
            }

            /**
             * Static method for creating ArraySet instances from an existing array.
             */
            ArraySet$1.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
              var set = new ArraySet$1();
              for (var i = 0, len = aArray.length; i < len; i++) {
                set.add(aArray[i], aAllowDuplicates);
              }
              return set;
            };

            /**
             * Return how many unique items are in this ArraySet. If duplicates have been
             * added, than those do not count towards the size.
             *
             * @returns Number
             */
            ArraySet$1.prototype.size = function ArraySet_size() {
              return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
            };

            /**
             * Add the given string to this set.
             *
             * @param String aStr
             */
            ArraySet$1.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
              var sStr = hasNativeMap ? aStr : util$2.toSetString(aStr);
              var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
              var idx = this._array.length;
              if (!isDuplicate || aAllowDuplicates) {
                this._array.push(aStr);
              }
              if (!isDuplicate) {
                if (hasNativeMap) {
                  this._set.set(aStr, idx);
                } else {
                  this._set[sStr] = idx;
                }
              }
            };

            /**
             * Is the given string a member of this set?
             *
             * @param String aStr
             */
            ArraySet$1.prototype.has = function ArraySet_has(aStr) {
              if (hasNativeMap) {
                return this._set.has(aStr);
              } else {
                var sStr = util$2.toSetString(aStr);
                return has.call(this._set, sStr);
              }
            };

            /**
             * What is the index of the given string in the array?
             *
             * @param String aStr
             */
            ArraySet$1.prototype.indexOf = function ArraySet_indexOf(aStr) {
              if (hasNativeMap) {
                var idx = this._set.get(aStr);
                if (idx >= 0) {
                    return idx;
                }
              } else {
                var sStr = util$2.toSetString(aStr);
                if (has.call(this._set, sStr)) {
                  return this._set[sStr];
                }
              }

              throw new Error('"' + aStr + '" is not in the set.');
            };

            /**
             * What is the element at the given index?
             *
             * @param Number aIdx
             */
            ArraySet$1.prototype.at = function ArraySet_at(aIdx) {
              if (aIdx >= 0 && aIdx < this._array.length) {
                return this._array[aIdx];
              }
              throw new Error('No element indexed by ' + aIdx);
            };

            /**
             * Returns the array representation of this set (which has the proper indices
             * indicated by indexOf). Note that this is a copy of the internal array used
             * for storing the members so that no one can mess with internal state.
             */
            ArraySet$1.prototype.toArray = function ArraySet_toArray() {
              return this._array.slice();
            };

            arraySet.ArraySet = ArraySet$1;

            var mappingList = {};

            /* -*- Mode: js; js-indent-level: 2; -*- */

            /*
             * Copyright 2014 Mozilla Foundation and contributors
             * Licensed under the New BSD license. See LICENSE or:
             * http://opensource.org/licenses/BSD-3-Clause
             */

            var util$1 = util$3;

            /**
             * Determine whether mappingB is after mappingA with respect to generated
             * position.
             */
            function generatedPositionAfter(mappingA, mappingB) {
              // Optimized for most common case
              var lineA = mappingA.generatedLine;
              var lineB = mappingB.generatedLine;
              var columnA = mappingA.generatedColumn;
              var columnB = mappingB.generatedColumn;
              return lineB > lineA || lineB == lineA && columnB >= columnA ||
                     util$1.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
            }

            /**
             * A data structure to provide a sorted view of accumulated mappings in a
             * performance conscious manner. It trades a neglibable overhead in general
             * case for a large speedup in case of mappings being added in order.
             */
            function MappingList$1() {
              this._array = [];
              this._sorted = true;
              // Serves as infimum
              this._last = {generatedLine: -1, generatedColumn: 0};
            }

            /**
             * Iterate through internal items. This method takes the same arguments that
             * `Array.prototype.forEach` takes.
             *
             * NOTE: The order of the mappings is NOT guaranteed.
             */
            MappingList$1.prototype.unsortedForEach =
              function MappingList_forEach(aCallback, aThisArg) {
                this._array.forEach(aCallback, aThisArg);
              };

            /**
             * Add the given source mapping.
             *
             * @param Object aMapping
             */
            MappingList$1.prototype.add = function MappingList_add(aMapping) {
              if (generatedPositionAfter(this._last, aMapping)) {
                this._last = aMapping;
                this._array.push(aMapping);
              } else {
                this._sorted = false;
                this._array.push(aMapping);
              }
            };

            /**
             * Returns the flat, sorted array of mappings. The mappings are sorted by
             * generated position.
             *
             * WARNING: This method returns internal data without copying, for
             * performance. The return value must NOT be mutated, and should be treated as
             * an immutable borrow. If you want to take ownership, you must make your own
             * copy.
             */
            MappingList$1.prototype.toArray = function MappingList_toArray() {
              if (!this._sorted) {
                this._array.sort(util$1.compareByGeneratedPositionsInflated);
                this._sorted = true;
              }
              return this._array;
            };

            mappingList.MappingList = MappingList$1;

            /* -*- Mode: js; js-indent-level: 2; -*- */

            /*
             * Copyright 2011 Mozilla Foundation and contributors
             * Licensed under the New BSD license. See LICENSE or:
             * http://opensource.org/licenses/BSD-3-Clause
             */

            var base64VLQ = base64Vlq;
            var util = util$3;
            var ArraySet = arraySet.ArraySet;
            var MappingList = mappingList.MappingList;

            /**
             * An instance of the SourceMapGenerator represents a source map which is
             * being built incrementally. You may pass an object with the following
             * properties:
             *
             *   - file: The filename of the generated source.
             *   - sourceRoot: A root for all relative URLs in this source map.
             */
            function SourceMapGenerator(aArgs) {
              if (!aArgs) {
                aArgs = {};
              }
              this._file = util.getArg(aArgs, 'file', null);
              this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
              this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
              this._sources = new ArraySet();
              this._names = new ArraySet();
              this._mappings = new MappingList();
              this._sourcesContents = null;
            }

            SourceMapGenerator.prototype._version = 3;

            /**
             * Creates a new SourceMapGenerator based on a SourceMapConsumer
             *
             * @param aSourceMapConsumer The SourceMap.
             */
            SourceMapGenerator.fromSourceMap =
              function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
                var sourceRoot = aSourceMapConsumer.sourceRoot;
                var generator = new SourceMapGenerator({
                  file: aSourceMapConsumer.file,
                  sourceRoot: sourceRoot
                });
                aSourceMapConsumer.eachMapping(function (mapping) {
                  var newMapping = {
                    generated: {
                      line: mapping.generatedLine,
                      column: mapping.generatedColumn
                    }
                  };

                  if (mapping.source != null) {
                    newMapping.source = mapping.source;
                    if (sourceRoot != null) {
                      newMapping.source = util.relative(sourceRoot, newMapping.source);
                    }

                    newMapping.original = {
                      line: mapping.originalLine,
                      column: mapping.originalColumn
                    };

                    if (mapping.name != null) {
                      newMapping.name = mapping.name;
                    }
                  }

                  generator.addMapping(newMapping);
                });
                aSourceMapConsumer.sources.forEach(function (sourceFile) {
                  var sourceRelative = sourceFile;
                  if (sourceRoot !== null) {
                    sourceRelative = util.relative(sourceRoot, sourceFile);
                  }

                  if (!generator._sources.has(sourceRelative)) {
                    generator._sources.add(sourceRelative);
                  }

                  var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                  if (content != null) {
                    generator.setSourceContent(sourceFile, content);
                  }
                });
                return generator;
              };

            /**
             * Add a single mapping from original source line and column to the generated
             * source's line and column for this source map being created. The mapping
             * object should have the following properties:
             *
             *   - generated: An object with the generated line and column positions.
             *   - original: An object with the original line and column positions.
             *   - source: The original source file (relative to the sourceRoot).
             *   - name: An optional original token name for this mapping.
             */
            SourceMapGenerator.prototype.addMapping =
              function SourceMapGenerator_addMapping(aArgs) {
                var generated = util.getArg(aArgs, 'generated');
                var original = util.getArg(aArgs, 'original', null);
                var source = util.getArg(aArgs, 'source', null);
                var name = util.getArg(aArgs, 'name', null);

                if (!this._skipValidation) {
                  this._validateMapping(generated, original, source, name);
                }

                if (source != null) {
                  source = String(source);
                  if (!this._sources.has(source)) {
                    this._sources.add(source);
                  }
                }

                if (name != null) {
                  name = String(name);
                  if (!this._names.has(name)) {
                    this._names.add(name);
                  }
                }

                this._mappings.add({
                  generatedLine: generated.line,
                  generatedColumn: generated.column,
                  originalLine: original != null && original.line,
                  originalColumn: original != null && original.column,
                  source: source,
                  name: name
                });
              };

            /**
             * Set the source content for a source file.
             */
            SourceMapGenerator.prototype.setSourceContent =
              function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
                var source = aSourceFile;
                if (this._sourceRoot != null) {
                  source = util.relative(this._sourceRoot, source);
                }

                if (aSourceContent != null) {
                  // Add the source content to the _sourcesContents map.
                  // Create a new _sourcesContents map if the property is null.
                  if (!this._sourcesContents) {
                    this._sourcesContents = Object.create(null);
                  }
                  this._sourcesContents[util.toSetString(source)] = aSourceContent;
                } else if (this._sourcesContents) {
                  // Remove the source file from the _sourcesContents map.
                  // If the _sourcesContents map is empty, set the property to null.
                  delete this._sourcesContents[util.toSetString(source)];
                  if (Object.keys(this._sourcesContents).length === 0) {
                    this._sourcesContents = null;
                  }
                }
              };

            /**
             * Applies the mappings of a sub-source-map for a specific source file to the
             * source map being generated. Each mapping to the supplied source file is
             * rewritten using the supplied source map. Note: The resolution for the
             * resulting mappings is the minimium of this map and the supplied map.
             *
             * @param aSourceMapConsumer The source map to be applied.
             * @param aSourceFile Optional. The filename of the source file.
             *        If omitted, SourceMapConsumer's file property will be used.
             * @param aSourceMapPath Optional. The dirname of the path to the source map
             *        to be applied. If relative, it is relative to the SourceMapConsumer.
             *        This parameter is needed when the two source maps aren't in the same
             *        directory, and the source map to be applied contains relative source
             *        paths. If so, those relative source paths need to be rewritten
             *        relative to the SourceMapGenerator.
             */
            SourceMapGenerator.prototype.applySourceMap =
              function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
                var sourceFile = aSourceFile;
                // If aSourceFile is omitted, we will use the file property of the SourceMap
                if (aSourceFile == null) {
                  if (aSourceMapConsumer.file == null) {
                    throw new Error(
                      'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
                      'or the source map\'s "file" property. Both were omitted.'
                    );
                  }
                  sourceFile = aSourceMapConsumer.file;
                }
                var sourceRoot = this._sourceRoot;
                // Make "sourceFile" relative if an absolute Url is passed.
                if (sourceRoot != null) {
                  sourceFile = util.relative(sourceRoot, sourceFile);
                }
                // Applying the SourceMap can add and remove items from the sources and
                // the names array.
                var newSources = new ArraySet();
                var newNames = new ArraySet();

                // Find mappings for the "sourceFile"
                this._mappings.unsortedForEach(function (mapping) {
                  if (mapping.source === sourceFile && mapping.originalLine != null) {
                    // Check if it can be mapped by the source map, then update the mapping.
                    var original = aSourceMapConsumer.originalPositionFor({
                      line: mapping.originalLine,
                      column: mapping.originalColumn
                    });
                    if (original.source != null) {
                      // Copy mapping
                      mapping.source = original.source;
                      if (aSourceMapPath != null) {
                        mapping.source = util.join(aSourceMapPath, mapping.source);
                      }
                      if (sourceRoot != null) {
                        mapping.source = util.relative(sourceRoot, mapping.source);
                      }
                      mapping.originalLine = original.line;
                      mapping.originalColumn = original.column;
                      if (original.name != null) {
                        mapping.name = original.name;
                      }
                    }
                  }

                  var source = mapping.source;
                  if (source != null && !newSources.has(source)) {
                    newSources.add(source);
                  }

                  var name = mapping.name;
                  if (name != null && !newNames.has(name)) {
                    newNames.add(name);
                  }

                }, this);
                this._sources = newSources;
                this._names = newNames;

                // Copy sourcesContents of applied map.
                aSourceMapConsumer.sources.forEach(function (sourceFile) {
                  var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                  if (content != null) {
                    if (aSourceMapPath != null) {
                      sourceFile = util.join(aSourceMapPath, sourceFile);
                    }
                    if (sourceRoot != null) {
                      sourceFile = util.relative(sourceRoot, sourceFile);
                    }
                    this.setSourceContent(sourceFile, content);
                  }
                }, this);
              };

            /**
             * A mapping can have one of the three levels of data:
             *
             *   1. Just the generated position.
             *   2. The Generated position, original position, and original source.
             *   3. Generated and original position, original source, as well as a name
             *      token.
             *
             * To maintain consistency, we validate that any new mapping being added falls
             * in to one of these categories.
             */
            SourceMapGenerator.prototype._validateMapping =
              function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                                          aName) {
                // When aOriginal is truthy but has empty values for .line and .column,
                // it is most likely a programmer error. In this case we throw a very
                // specific error message to try to guide them the right way.
                // For example: https://github.com/Polymer/polymer-bundler/pull/519
                if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
                    throw new Error(
                        'original.line and original.column are not numbers -- you probably meant to omit ' +
                        'the original mapping entirely and only map the generated position. If so, pass ' +
                        'null for the original mapping instead of an object with empty or null values.'
                    );
                }

                if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
                    && aGenerated.line > 0 && aGenerated.column >= 0
                    && !aOriginal && !aSource && !aName) {
                  // Case 1.
                  return;
                }
                else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
                         && aOriginal && 'line' in aOriginal && 'column' in aOriginal
                         && aGenerated.line > 0 && aGenerated.column >= 0
                         && aOriginal.line > 0 && aOriginal.column >= 0
                         && aSource) {
                  // Cases 2 and 3.
                  return;
                }
                else {
                  throw new Error('Invalid mapping: ' + JSON.stringify({
                    generated: aGenerated,
                    source: aSource,
                    original: aOriginal,
                    name: aName
                  }));
                }
              };

            /**
             * Serialize the accumulated mappings in to the stream of base 64 VLQs
             * specified by the source map format.
             */
            SourceMapGenerator.prototype._serializeMappings =
              function SourceMapGenerator_serializeMappings() {
                var previousGeneratedColumn = 0;
                var previousGeneratedLine = 1;
                var previousOriginalColumn = 0;
                var previousOriginalLine = 0;
                var previousName = 0;
                var previousSource = 0;
                var result = '';
                var next;
                var mapping;
                var nameIdx;
                var sourceIdx;

                var mappings = this._mappings.toArray();
                for (var i = 0, len = mappings.length; i < len; i++) {
                  mapping = mappings[i];
                  next = '';

                  if (mapping.generatedLine !== previousGeneratedLine) {
                    previousGeneratedColumn = 0;
                    while (mapping.generatedLine !== previousGeneratedLine) {
                      next += ';';
                      previousGeneratedLine++;
                    }
                  }
                  else {
                    if (i > 0) {
                      if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
                        continue;
                      }
                      next += ',';
                    }
                  }

                  next += base64VLQ.encode(mapping.generatedColumn
                                             - previousGeneratedColumn);
                  previousGeneratedColumn = mapping.generatedColumn;

                  if (mapping.source != null) {
                    sourceIdx = this._sources.indexOf(mapping.source);
                    next += base64VLQ.encode(sourceIdx - previousSource);
                    previousSource = sourceIdx;

                    // lines are stored 0-based in SourceMap spec version 3
                    next += base64VLQ.encode(mapping.originalLine - 1
                                               - previousOriginalLine);
                    previousOriginalLine = mapping.originalLine - 1;

                    next += base64VLQ.encode(mapping.originalColumn
                                               - previousOriginalColumn);
                    previousOriginalColumn = mapping.originalColumn;

                    if (mapping.name != null) {
                      nameIdx = this._names.indexOf(mapping.name);
                      next += base64VLQ.encode(nameIdx - previousName);
                      previousName = nameIdx;
                    }
                  }

                  result += next;
                }

                return result;
              };

            SourceMapGenerator.prototype._generateSourcesContent =
              function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
                return aSources.map(function (source) {
                  if (!this._sourcesContents) {
                    return null;
                  }
                  if (aSourceRoot != null) {
                    source = util.relative(aSourceRoot, source);
                  }
                  var key = util.toSetString(source);
                  return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
                    ? this._sourcesContents[key]
                    : null;
                }, this);
              };

            /**
             * Externalize the source map.
             */
            SourceMapGenerator.prototype.toJSON =
              function SourceMapGenerator_toJSON() {
                var map = {
                  version: this._version,
                  sources: this._sources.toArray(),
                  names: this._names.toArray(),
                  mappings: this._serializeMappings()
                };
                if (this._file != null) {
                  map.file = this._file;
                }
                if (this._sourceRoot != null) {
                  map.sourceRoot = this._sourceRoot;
                }
                if (this._sourcesContents) {
                  map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
                }

                return map;
              };

            /**
             * Render the source map being generated to a string.
             */
            SourceMapGenerator.prototype.toString =
              function SourceMapGenerator_toString() {
                return JSON.stringify(this.toJSON());
              };

            var SourceMapGenerator_1 = SourceMapGenerator;

            const trackNodes = new Set(['Atrule', 'Selector', 'Declaration']);

            function generateSourceMap(handlers) {
                const map = new SourceMapGenerator_1();
                const generated = {
                    line: 1,
                    column: 0
                };
                const original = {
                    line: 0, // should be zero to add first mapping
                    column: 0
                };
                const activatedGenerated = {
                    line: 1,
                    column: 0
                };
                const activatedMapping = {
                    generated: activatedGenerated
                };
                let line = 1;
                let column = 0;
                let sourceMappingActive = false;

                const origHandlersNode = handlers.node;
                handlers.node = function(node) {
                    if (node.loc && node.loc.start && trackNodes.has(node.type)) {
                        const nodeLine = node.loc.start.line;
                        const nodeColumn = node.loc.start.column - 1;

                        if (original.line !== nodeLine ||
                            original.column !== nodeColumn) {
                            original.line = nodeLine;
                            original.column = nodeColumn;

                            generated.line = line;
                            generated.column = column;

                            if (sourceMappingActive) {
                                sourceMappingActive = false;
                                if (generated.line !== activatedGenerated.line ||
                                    generated.column !== activatedGenerated.column) {
                                    map.addMapping(activatedMapping);
                                }
                            }

                            sourceMappingActive = true;
                            map.addMapping({
                                source: node.loc.source,
                                original,
                                generated
                            });
                        }
                    }

                    origHandlersNode.call(this, node);

                    if (sourceMappingActive && trackNodes.has(node.type)) {
                        activatedGenerated.line = line;
                        activatedGenerated.column = column;
                    }
                };

                const origHandlersEmit = handlers.emit;
                handlers.emit = function(value, type, auto) {
                    for (let i = 0; i < value.length; i++) {
                        if (value.charCodeAt(i) === 10) { // \n
                            line++;
                            column = 0;
                        } else {
                            column++;
                        }
                    }

                    origHandlersEmit(value, type, auto);
                };

                const origHandlersResult = handlers.result;
                handlers.result = function() {
                    if (sourceMappingActive) {
                        map.addMapping(activatedMapping);
                    }

                    return {
                        css: origHandlersResult(),
                        map
                    };
                };

                return handlers;
            }

            const PLUSSIGN$9 = 0x002B;    // U+002B PLUS SIGN (+)
            const HYPHENMINUS$6 = 0x002D; // U+002D HYPHEN-MINUS (-)

            const code = (type, value) => {
                if (type === Delim) {
                    type = value;
                }

                if (typeof type === 'string') {
                    const charCode = type.charCodeAt(0);
                    return charCode > 0x7F ? 0x8000 : charCode << 8;
                }

                return type;
            };

            // https://www.w3.org/TR/css-syntax-3/#serialization
            // The only requirement for serialization is that it must "round-trip" with parsing,
            // that is, parsing the stylesheet must produce the same data structures as parsing,
            // serializing, and parsing again, except for consecutive <whitespace-token>s,
            // which may be collapsed into a single token.

            const specPairs = [
                [Ident, Ident],
                [Ident, Function$1],
                [Ident, Url$1],
                [Ident, BadUrl],
                [Ident, '-'],
                [Ident, Number$2],
                [Ident, Percentage$1],
                [Ident, Dimension$1],
                [Ident, CDC$1],
                [Ident, LeftParenthesis],

                [AtKeyword, Ident],
                [AtKeyword, Function$1],
                [AtKeyword, Url$1],
                [AtKeyword, BadUrl],
                [AtKeyword, '-'],
                [AtKeyword, Number$2],
                [AtKeyword, Percentage$1],
                [AtKeyword, Dimension$1],
                [AtKeyword, CDC$1],

                [Hash$1, Ident],
                [Hash$1, Function$1],
                [Hash$1, Url$1],
                [Hash$1, BadUrl],
                [Hash$1, '-'],
                [Hash$1, Number$2],
                [Hash$1, Percentage$1],
                [Hash$1, Dimension$1],
                [Hash$1, CDC$1],

                [Dimension$1, Ident],
                [Dimension$1, Function$1],
                [Dimension$1, Url$1],
                [Dimension$1, BadUrl],
                [Dimension$1, '-'],
                [Dimension$1, Number$2],
                [Dimension$1, Percentage$1],
                [Dimension$1, Dimension$1],
                [Dimension$1, CDC$1],

                ['#', Ident],
                ['#', Function$1],
                ['#', Url$1],
                ['#', BadUrl],
                ['#', '-'],
                ['#', Number$2],
                ['#', Percentage$1],
                ['#', Dimension$1],
                ['#', CDC$1], // https://github.com/w3c/csswg-drafts/pull/6874

                ['-', Ident],
                ['-', Function$1],
                ['-', Url$1],
                ['-', BadUrl],
                ['-', '-'],
                ['-', Number$2],
                ['-', Percentage$1],
                ['-', Dimension$1],
                ['-', CDC$1], // https://github.com/w3c/csswg-drafts/pull/6874

                [Number$2, Ident],
                [Number$2, Function$1],
                [Number$2, Url$1],
                [Number$2, BadUrl],
                [Number$2, Number$2],
                [Number$2, Percentage$1],
                [Number$2, Dimension$1],
                [Number$2, '%'],
                [Number$2, CDC$1], // https://github.com/w3c/csswg-drafts/pull/6874

                ['@', Ident],
                ['@', Function$1],
                ['@', Url$1],
                ['@', BadUrl],
                ['@', '-'],
                ['@', CDC$1], // https://github.com/w3c/csswg-drafts/pull/6874

                ['.', Number$2],
                ['.', Percentage$1],
                ['.', Dimension$1],

                ['+', Number$2],
                ['+', Percentage$1],
                ['+', Dimension$1],

                ['/', '*']
            ];
            // validate with scripts/generate-safe
            const safePairs = specPairs.concat([
                [Ident, Hash$1],

                [Dimension$1, Hash$1],

                [Hash$1, Hash$1],

                [AtKeyword, LeftParenthesis],
                [AtKeyword, String$2],
                [AtKeyword, Colon],

                [Percentage$1, Percentage$1],
                [Percentage$1, Dimension$1],
                [Percentage$1, Function$1],
                [Percentage$1, '-'],

                [RightParenthesis, Ident],
                [RightParenthesis, Function$1],
                [RightParenthesis, Percentage$1],
                [RightParenthesis, Dimension$1],
                [RightParenthesis, Hash$1],
                [RightParenthesis, '-']
            ]);

            function createMap(pairs) {
                const isWhiteSpaceRequired = new Set(
                    pairs.map(([prev, next]) => (code(prev) << 16 | code(next)))
                );

                return function(prevCode, type, value) {
                    const nextCode = code(type, value);
                    const nextCharCode = value.charCodeAt(0);
                    const emitWs =
                        (nextCharCode === HYPHENMINUS$6 &&
                            type !== Ident &&
                            type !== Function$1 &&
                            type !== CDC$1) ||
                        (nextCharCode === PLUSSIGN$9)
                            ? isWhiteSpaceRequired.has(prevCode << 16 | nextCharCode << 8)
                            : isWhiteSpaceRequired.has(prevCode << 16 | nextCode);

                    if (emitWs) {
                        this.emit(' ', WhiteSpace$1, true);
                    }

                    return nextCode;
                };
            }

            const spec = createMap(specPairs);
            const safe = createMap(safePairs);

            var tokenBefore = /*#__PURE__*/Object.freeze({
                __proto__: null,
                spec: spec,
                safe: safe
            });

            const REVERSESOLIDUS = 0x005c; // U+005C REVERSE SOLIDUS (\)

            function processChildren(node, delimeter) {
                if (typeof delimeter === 'function') {
                    let prev = null;

                    node.children.forEach(node => {
                        if (prev !== null) {
                            delimeter.call(this, prev);
                        }

                        this.node(node);
                        prev = node;
                    });

                    return;
                }

                node.children.forEach(this.node, this);
            }

            function processChunk(chunk) {
                tokenize$1(chunk, (type, start, end) => {
                    this.token(type, chunk.slice(start, end));
                });
            }

            function createGenerator(config) {
                const types = new Map();

                for (let name in config.node) {
                    const item = config.node[name];
                    const fn = item.generate || item;

                    if (typeof fn === 'function') {
                        types.set(name, item.generate || item);
                    }
                }

                return function(node, options) {
                    let buffer = '';
                    let prevCode = 0;
                    let handlers = {
                        node(node) {
                            if (types.has(node.type)) {
                                types.get(node.type).call(publicApi, node);
                            } else {
                                throw new Error('Unknown node type: ' + node.type);
                            }
                        },
                        tokenBefore: safe,
                        token(type, value) {
                            prevCode = this.tokenBefore(prevCode, type, value);

                            this.emit(value, type, false);

                            if (type === Delim && value.charCodeAt(0) === REVERSESOLIDUS) {
                                this.emit('\n', WhiteSpace$1, true);
                            }
                        },
                        emit(value) {
                            buffer += value;
                        },
                        result() {
                            return buffer;
                        }
                    };

                    if (options) {
                        if (typeof options.decorator === 'function') {
                            handlers = options.decorator(handlers);
                        }

                        if (options.sourceMap) {
                            handlers = generateSourceMap(handlers);
                        }

                        if (options.mode in tokenBefore) {
                            handlers.tokenBefore = tokenBefore[options.mode];
                        }
                    }

                    const publicApi = {
                        node: (node) => handlers.node(node),
                        children: processChildren,
                        token: (type, value) => handlers.token(type, value),
                        tokenize: processChunk
                    };

                    handlers.node(node);

                    return handlers.result();
                };
            }

            function createConvertor(walk) {
                return {
                    fromPlainObject: function(ast) {
                        walk(ast, {
                            enter: function(node) {
                                if (node.children && node.children instanceof List === false) {
                                    node.children = new List().fromArray(node.children);
                                }
                            }
                        });

                        return ast;
                    },
                    toPlainObject: function(ast) {
                        walk(ast, {
                            leave: function(node) {
                                if (node.children && node.children instanceof List) {
                                    node.children = node.children.toArray();
                                }
                            }
                        });

                        return ast;
                    }
                };
            }

            const { hasOwnProperty: hasOwnProperty$4 } = Object.prototype;
            const noop$2 = function() {};

            function ensureFunction$1(value) {
                return typeof value === 'function' ? value : noop$2;
            }

            function invokeForType(fn, type) {
                return function(node, item, list) {
                    if (node.type === type) {
                        fn.call(this, node, item, list);
                    }
                };
            }

            function getWalkersFromStructure(name, nodeType) {
                const structure = nodeType.structure;
                const walkers = [];

                for (const key in structure) {
                    if (hasOwnProperty$4.call(structure, key) === false) {
                        continue;
                    }

                    let fieldTypes = structure[key];
                    const walker = {
                        name: key,
                        type: false,
                        nullable: false
                    };

                    if (!Array.isArray(fieldTypes)) {
                        fieldTypes = [fieldTypes];
                    }

                    for (const fieldType of fieldTypes) {
                        if (fieldType === null) {
                            walker.nullable = true;
                        } else if (typeof fieldType === 'string') {
                            walker.type = 'node';
                        } else if (Array.isArray(fieldType)) {
                            walker.type = 'list';
                        }
                    }

                    if (walker.type) {
                        walkers.push(walker);
                    }
                }

                if (walkers.length) {
                    return {
                        context: nodeType.walkContext,
                        fields: walkers
                    };
                }

                return null;
            }

            function getTypesFromConfig(config) {
                const types = {};

                for (const name in config.node) {
                    if (hasOwnProperty$4.call(config.node, name)) {
                        const nodeType = config.node[name];

                        if (!nodeType.structure) {
                            throw new Error('Missed `structure` field in `' + name + '` node type definition');
                        }

                        types[name] = getWalkersFromStructure(name, nodeType);
                    }
                }

                return types;
            }

            function createTypeIterator(config, reverse) {
                const fields = config.fields.slice();
                const contextName = config.context;
                const useContext = typeof contextName === 'string';

                if (reverse) {
                    fields.reverse();
                }

                return function(node, context, walk, walkReducer) {
                    let prevContextValue;

                    if (useContext) {
                        prevContextValue = context[contextName];
                        context[contextName] = node;
                    }

                    for (const field of fields) {
                        const ref = node[field.name];

                        if (!field.nullable || ref) {
                            if (field.type === 'list') {
                                const breakWalk = reverse
                                    ? ref.reduceRight(walkReducer, false)
                                    : ref.reduce(walkReducer, false);

                                if (breakWalk) {
                                    return true;
                                }
                            } else if (walk(ref)) {
                                return true;
                            }
                        }
                    }

                    if (useContext) {
                        context[contextName] = prevContextValue;
                    }
                };
            }

            function createFastTraveralMap({
                StyleSheet,
                Atrule,
                Rule,
                Block,
                DeclarationList
            }) {
                return {
                    Atrule: {
                        StyleSheet,
                        Atrule,
                        Rule,
                        Block
                    },
                    Rule: {
                        StyleSheet,
                        Atrule,
                        Rule,
                        Block
                    },
                    Declaration: {
                        StyleSheet,
                        Atrule,
                        Rule,
                        Block,
                        DeclarationList
                    }
                };
            }

            function createWalker(config) {
                const types = getTypesFromConfig(config);
                const iteratorsNatural = {};
                const iteratorsReverse = {};
                const breakWalk = Symbol('break-walk');
                const skipNode = Symbol('skip-node');

                for (const name in types) {
                    if (hasOwnProperty$4.call(types, name) && types[name] !== null) {
                        iteratorsNatural[name] = createTypeIterator(types[name], false);
                        iteratorsReverse[name] = createTypeIterator(types[name], true);
                    }
                }

                const fastTraversalIteratorsNatural = createFastTraveralMap(iteratorsNatural);
                const fastTraversalIteratorsReverse = createFastTraveralMap(iteratorsReverse);

                const walk = function(root, options) {
                    function walkNode(node, item, list) {
                        const enterRet = enter.call(context, node, item, list);

                        if (enterRet === breakWalk) {
                            return true;
                        }

                        if (enterRet === skipNode) {
                            return false;
                        }

                        if (iterators.hasOwnProperty(node.type)) {
                            if (iterators[node.type](node, context, walkNode, walkReducer)) {
                                return true;
                            }
                        }

                        if (leave.call(context, node, item, list) === breakWalk) {
                            return true;
                        }

                        return false;
                    }

                    let enter = noop$2;
                    let leave = noop$2;
                    let iterators = iteratorsNatural;
                    let walkReducer = (ret, data, item, list) => ret || walkNode(data, item, list);
                    const context = {
                        break: breakWalk,
                        skip: skipNode,

                        root,
                        stylesheet: null,
                        atrule: null,
                        atrulePrelude: null,
                        rule: null,
                        selector: null,
                        block: null,
                        declaration: null,
                        function: null
                    };

                    if (typeof options === 'function') {
                        enter = options;
                    } else if (options) {
                        enter = ensureFunction$1(options.enter);
                        leave = ensureFunction$1(options.leave);

                        if (options.reverse) {
                            iterators = iteratorsReverse;
                        }

                        if (options.visit) {
                            if (fastTraversalIteratorsNatural.hasOwnProperty(options.visit)) {
                                iterators = options.reverse
                                    ? fastTraversalIteratorsReverse[options.visit]
                                    : fastTraversalIteratorsNatural[options.visit];
                            } else if (!types.hasOwnProperty(options.visit)) {
                                throw new Error('Bad value `' + options.visit + '` for `visit` option (should be: ' + Object.keys(types).sort().join(', ') + ')');
                            }

                            enter = invokeForType(enter, options.visit);
                            leave = invokeForType(leave, options.visit);
                        }
                    }

                    if (enter === noop$2 && leave === noop$2) {
                        throw new Error('Neither `enter` nor `leave` walker handler is set or both aren\'t a function');
                    }

                    walkNode(root);
                };

                walk.break = breakWalk;
                walk.skip = skipNode;

                walk.find = function(ast, fn) {
                    let found = null;

                    walk(ast, function(node, item, list) {
                        if (fn.call(this, node, item, list)) {
                            found = node;
                            return breakWalk;
                        }
                    });

                    return found;
                };

                walk.findLast = function(ast, fn) {
                    let found = null;

                    walk(ast, {
                        reverse: true,
                        enter: function(node, item, list) {
                            if (fn.call(this, node, item, list)) {
                                found = node;
                                return breakWalk;
                            }
                        }
                    });

                    return found;
                };

                walk.findAll = function(ast, fn) {
                    const found = [];

                    walk(ast, function(node, item, list) {
                        if (fn.call(this, node, item, list)) {
                            found.push(node);
                        }
                    });

                    return found;
                };

                return walk;
            }

            function noop$1(value) {
                return value;
            }

            function generateMultiplier(multiplier) {
                const { min, max, comma } = multiplier;

                if (min === 0 && max === 0) {
                    return '*';
                }

                if (min === 0 && max === 1) {
                    return '?';
                }

                if (min === 1 && max === 0) {
                    return comma ? '#' : '+';
                }

                if (min === 1 && max === 1) {
                    return '';
                }

                return (
                    (comma ? '#' : '') +
                    (min === max
                        ? '{' + min + '}'
                        : '{' + min + ',' + (max !== 0 ? max : '') + '}'
                    )
                );
            }

            function generateTypeOpts(node) {
                switch (node.type) {
                    case 'Range':
                        return (
                            ' [' +
                            (node.min === null ? '-∞' : node.min) +
                            ',' +
                            (node.max === null ? '∞' : node.max) +
                            ']'
                        );

                    default:
                        throw new Error('Unknown node type `' + node.type + '`');
                }
            }

            function generateSequence(node, decorate, forceBraces, compact) {
                const combinator = node.combinator === ' ' || compact ? node.combinator : ' ' + node.combinator + ' ';
                const result = node.terms
                    .map(term => internalGenerate(term, decorate, forceBraces, compact))
                    .join(combinator);

                if (node.explicit || forceBraces) {
                    return (compact || result[0] === ',' ? '[' : '[ ') + result + (compact ? ']' : ' ]');
                }

                return result;
            }

            function internalGenerate(node, decorate, forceBraces, compact) {
                let result;

                switch (node.type) {
                    case 'Group':
                        result =
                            generateSequence(node, decorate, forceBraces, compact) +
                            (node.disallowEmpty ? '!' : '');
                        break;

                    case 'Multiplier':
                        // return since node is a composition
                        return (
                            internalGenerate(node.term, decorate, forceBraces, compact) +
                            decorate(generateMultiplier(node), node)
                        );

                    case 'Type':
                        result = '<' + node.name + (node.opts ? decorate(generateTypeOpts(node.opts), node.opts) : '') + '>';
                        break;

                    case 'Property':
                        result = '<\'' + node.name + '\'>';
                        break;

                    case 'Keyword':
                        result = node.name;
                        break;

                    case 'AtKeyword':
                        result = '@' + node.name;
                        break;

                    case 'Function':
                        result = node.name + '(';
                        break;

                    case 'String':
                    case 'Token':
                        result = node.value;
                        break;

                    case 'Comma':
                        result = ',';
                        break;

                    default:
                        throw new Error('Unknown node type `' + node.type + '`');
                }

                return decorate(result, node);
            }

            function generate$F(node, options) {
                let decorate = noop$1;
                let forceBraces = false;
                let compact = false;

                if (typeof options === 'function') {
                    decorate = options;
                } else if (options) {
                    forceBraces = Boolean(options.forceBraces);
                    compact = Boolean(options.compact);
                    if (typeof options.decorate === 'function') {
                        decorate = options.decorate;
                    }
                }

                return internalGenerate(node, decorate, forceBraces, compact);
            }

            const defaultLoc = { offset: 0, line: 1, column: 1 };

            function locateMismatch(matchResult, node) {
                const tokens = matchResult.tokens;
                const longestMatch = matchResult.longestMatch;
                const mismatchNode = longestMatch < tokens.length ? tokens[longestMatch].node || null : null;
                const badNode = mismatchNode !== node ? mismatchNode : null;
                let mismatchOffset = 0;
                let mismatchLength = 0;
                let entries = 0;
                let css = '';
                let start;
                let end;

                for (let i = 0; i < tokens.length; i++) {
                    const token = tokens[i].value;

                    if (i === longestMatch) {
                        mismatchLength = token.length;
                        mismatchOffset = css.length;
                    }

                    if (badNode !== null && tokens[i].node === badNode) {
                        if (i <= longestMatch) {
                            entries++;
                        } else {
                            entries = 0;
                        }
                    }

                    css += token;
                }

                if (longestMatch === tokens.length || entries > 1) { // last
                    start = fromLoc(badNode || node, 'end') || buildLoc(defaultLoc, css);
                    end = buildLoc(start);
                } else {
                    start = fromLoc(badNode, 'start') ||
                        buildLoc(fromLoc(node, 'start') || defaultLoc, css.slice(0, mismatchOffset));
                    end = fromLoc(badNode, 'end') ||
                        buildLoc(start, css.substr(mismatchOffset, mismatchLength));
                }

                return {
                    css,
                    mismatchOffset,
                    mismatchLength,
                    start,
                    end
                };
            }

            function fromLoc(node, point) {
                const value = node && node.loc && node.loc[point];

                if (value) {
                    return 'line' in value ? buildLoc(value) : value;
                }

                return null;
            }

            function buildLoc({ offset, line, column }, extra) {
                const loc = {
                    offset,
                    line,
                    column
                };

                if (extra) {
                    const lines = extra.split(/\n|\r\n?|\f/);

                    loc.offset += extra.length;
                    loc.line += lines.length - 1;
                    loc.column = lines.length === 1 ? loc.column + extra.length : lines.pop().length + 1;
                }

                return loc;
            }

            const SyntaxReferenceError = function(type, referenceName) {
                const error = createCustomError(
                    'SyntaxReferenceError',
                    type + (referenceName ? ' `' + referenceName + '`' : '')
                );

                error.reference = referenceName;

                return error;
            };

            const SyntaxMatchError = function(message, syntax, node, matchResult) {
                const error = createCustomError('SyntaxMatchError', message);
                const {
                    css,
                    mismatchOffset,
                    mismatchLength,
                    start,
                    end
                } = locateMismatch(matchResult, node);

                error.rawMessage = message;
                error.syntax = syntax ? generate$F(syntax) : '<generic>';
                error.css = css;
                error.mismatchOffset = mismatchOffset;
                error.mismatchLength = mismatchLength;
                error.message = message + '\n' +
                    '  syntax: ' + error.syntax + '\n' +
                    '   value: ' + (css || '<empty string>') + '\n' +
                    '  --------' + new Array(error.mismatchOffset + 1).join('-') + '^';

                Object.assign(error, start);
                error.loc = {
                    source: (node && node.loc && node.loc.source) || '<unknown>',
                    start,
                    end
                };

                return error;
            };

            const keywords = new Map();
            const properties = new Map();
            const HYPHENMINUS$5 = 45; // '-'.charCodeAt()

            const keyword = getKeywordDescriptor;
            const property = getPropertyDescriptor;
            function isCustomProperty(str, offset) {
                offset = offset || 0;

                return str.length - offset >= 2 &&
                       str.charCodeAt(offset) === HYPHENMINUS$5 &&
                       str.charCodeAt(offset + 1) === HYPHENMINUS$5;
            }

            function getVendorPrefix(str, offset) {
                offset = offset || 0;

                // verdor prefix should be at least 3 chars length
                if (str.length - offset >= 3) {
                    // vendor prefix starts with hyper minus following non-hyper minus
                    if (str.charCodeAt(offset) === HYPHENMINUS$5 &&
                        str.charCodeAt(offset + 1) !== HYPHENMINUS$5) {
                        // vendor prefix should contain a hyper minus at the ending
                        const secondDashIndex = str.indexOf('-', offset + 2);

                        if (secondDashIndex !== -1) {
                            return str.substring(offset, secondDashIndex + 1);
                        }
                    }
                }

                return '';
            }

            function getKeywordDescriptor(keyword) {
                if (keywords.has(keyword)) {
                    return keywords.get(keyword);
                }

                const name = keyword.toLowerCase();
                let descriptor = keywords.get(name);

                if (descriptor === undefined) {
                    const custom = isCustomProperty(name, 0);
                    const vendor = !custom ? getVendorPrefix(name, 0) : '';
                    descriptor = Object.freeze({
                        basename: name.substr(vendor.length),
                        name,
                        prefix: vendor,
                        vendor,
                        custom
                    });
                }

                keywords.set(keyword, descriptor);

                return descriptor;
            }

            function getPropertyDescriptor(property) {
                if (properties.has(property)) {
                    return properties.get(property);
                }

                let name = property;
                let hack = property[0];

                if (hack === '/') {
                    hack = property[1] === '/' ? '//' : '/';
                } else if (hack !== '_' &&
                           hack !== '*' &&
                           hack !== '$' &&
                           hack !== '#' &&
                           hack !== '+' &&
                           hack !== '&') {
                    hack = '';
                }

                const custom = isCustomProperty(name, hack.length);

                // re-use result when possible (the same as for lower case)
                if (!custom) {
                    name = name.toLowerCase();
                    if (properties.has(name)) {
                        const descriptor = properties.get(name);
                        properties.set(property, descriptor);
                        return descriptor;
                    }
                }

                const vendor = !custom ? getVendorPrefix(name, hack.length) : '';
                const prefix = name.substr(0, hack.length + vendor.length);
                const descriptor = Object.freeze({
                    basename: name.substr(prefix.length),
                    name: name.substr(hack.length),
                    hack,
                    vendor,
                    prefix,
                    custom
                });

                properties.set(property, descriptor);

                return descriptor;
            }

            const PLUSSIGN$8 = 0x002B;    // U+002B PLUS SIGN (+)
            const HYPHENMINUS$4 = 0x002D; // U+002D HYPHEN-MINUS (-)
            const N$3 = 0x006E;           // U+006E LATIN SMALL LETTER N (n)
            const DISALLOW_SIGN$1 = true;
            const ALLOW_SIGN$1 = false;

            function isDelim$1(token, code) {
                return token !== null && token.type === Delim && token.value.charCodeAt(0) === code;
            }

            function skipSC(token, offset, getNextToken) {
                while (token !== null && (token.type === WhiteSpace$1 || token.type === Comment$1)) {
                    token = getNextToken(++offset);
                }

                return offset;
            }

            function checkInteger$1(token, valueOffset, disallowSign, offset) {
                if (!token) {
                    return 0;
                }

                const code = token.value.charCodeAt(valueOffset);

                if (code === PLUSSIGN$8 || code === HYPHENMINUS$4) {
                    if (disallowSign) {
                        // Number sign is not allowed
                        return 0;
                    }
                    valueOffset++;
                }

                for (; valueOffset < token.value.length; valueOffset++) {
                    if (!isDigit(token.value.charCodeAt(valueOffset))) {
                        // Integer is expected
                        return 0;
                    }
                }

                return offset + 1;
            }

            // ... <signed-integer>
            // ... ['+' | '-'] <signless-integer>
            function consumeB$1(token, offset_, getNextToken) {
                let sign = false;
                let offset = skipSC(token, offset_, getNextToken);

                token = getNextToken(offset);

                if (token === null) {
                    return offset_;
                }

                if (token.type !== Number$2) {
                    if (isDelim$1(token, PLUSSIGN$8) || isDelim$1(token, HYPHENMINUS$4)) {
                        sign = true;
                        offset = skipSC(getNextToken(++offset), offset, getNextToken);
                        token = getNextToken(offset);

                        if (token === null || token.type !== Number$2) {
                            return 0;
                        }
                    } else {
                        return offset_;
                    }
                }

                if (!sign) {
                    const code = token.value.charCodeAt(0);
                    if (code !== PLUSSIGN$8 && code !== HYPHENMINUS$4) {
                        // Number sign is expected
                        return 0;
                    }
                }

                return checkInteger$1(token, sign ? 0 : 1, sign, offset);
            }

            // An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb
            function anPlusB(token, getNextToken) {
                /* eslint-disable brace-style*/
                let offset = 0;

                if (!token) {
                    return 0;
                }

                // <integer>
                if (token.type === Number$2) {
                    return checkInteger$1(token, 0, ALLOW_SIGN$1, offset); // b
                }

                // -n
                // -n <signed-integer>
                // -n ['+' | '-'] <signless-integer>
                // -n- <signless-integer>
                // <dashndashdigit-ident>
                else if (token.type === Ident && token.value.charCodeAt(0) === HYPHENMINUS$4) {
                    // expect 1st char is N
                    if (!cmpChar(token.value, 1, N$3)) {
                        return 0;
                    }

                    switch (token.value.length) {
                        // -n
                        // -n <signed-integer>
                        // -n ['+' | '-'] <signless-integer>
                        case 2:
                            return consumeB$1(getNextToken(++offset), offset, getNextToken);

                        // -n- <signless-integer>
                        case 3:
                            if (token.value.charCodeAt(2) !== HYPHENMINUS$4) {
                                return 0;
                            }

                            offset = skipSC(getNextToken(++offset), offset, getNextToken);
                            token = getNextToken(offset);

                            return checkInteger$1(token, 0, DISALLOW_SIGN$1, offset);

                        // <dashndashdigit-ident>
                        default:
                            if (token.value.charCodeAt(2) !== HYPHENMINUS$4) {
                                return 0;
                            }

                            return checkInteger$1(token, 3, DISALLOW_SIGN$1, offset);
                    }
                }

                // '+'? n
                // '+'? n <signed-integer>
                // '+'? n ['+' | '-'] <signless-integer>
                // '+'? n- <signless-integer>
                // '+'? <ndashdigit-ident>
                else if (token.type === Ident || (isDelim$1(token, PLUSSIGN$8) && getNextToken(offset + 1).type === Ident)) {
                    // just ignore a plus
                    if (token.type !== Ident) {
                        token = getNextToken(++offset);
                    }

                    if (token === null || !cmpChar(token.value, 0, N$3)) {
                        return 0;
                    }

                    switch (token.value.length) {
                        // '+'? n
                        // '+'? n <signed-integer>
                        // '+'? n ['+' | '-'] <signless-integer>
                        case 1:
                            return consumeB$1(getNextToken(++offset), offset, getNextToken);

                        // '+'? n- <signless-integer>
                        case 2:
                            if (token.value.charCodeAt(1) !== HYPHENMINUS$4) {
                                return 0;
                            }

                            offset = skipSC(getNextToken(++offset), offset, getNextToken);
                            token = getNextToken(offset);

                            return checkInteger$1(token, 0, DISALLOW_SIGN$1, offset);

                        // '+'? <ndashdigit-ident>
                        default:
                            if (token.value.charCodeAt(1) !== HYPHENMINUS$4) {
                                return 0;
                            }

                            return checkInteger$1(token, 2, DISALLOW_SIGN$1, offset);
                    }
                }

                // <ndashdigit-dimension>
                // <ndash-dimension> <signless-integer>
                // <n-dimension>
                // <n-dimension> <signed-integer>
                // <n-dimension> ['+' | '-'] <signless-integer>
                else if (token.type === Dimension$1) {
                    let code = token.value.charCodeAt(0);
                    let sign = code === PLUSSIGN$8 || code === HYPHENMINUS$4 ? 1 : 0;
                    let i = sign;

                    for (; i < token.value.length; i++) {
                        if (!isDigit(token.value.charCodeAt(i))) {
                            break;
                        }
                    }

                    if (i === sign) {
                        // Integer is expected
                        return 0;
                    }

                    if (!cmpChar(token.value, i, N$3)) {
                        return 0;
                    }

                    // <n-dimension>
                    // <n-dimension> <signed-integer>
                    // <n-dimension> ['+' | '-'] <signless-integer>
                    if (i + 1 === token.value.length) {
                        return consumeB$1(getNextToken(++offset), offset, getNextToken);
                    } else {
                        if (token.value.charCodeAt(i + 1) !== HYPHENMINUS$4) {
                            return 0;
                        }

                        // <ndash-dimension> <signless-integer>
                        if (i + 2 === token.value.length) {
                            offset = skipSC(getNextToken(++offset), offset, getNextToken);
                            token = getNextToken(offset);

                            return checkInteger$1(token, 0, DISALLOW_SIGN$1, offset);
                        }
                        // <ndashdigit-dimension>
                        else {
                            return checkInteger$1(token, i + 2, DISALLOW_SIGN$1, offset);
                        }
                    }
                }

                return 0;
            }

            const PLUSSIGN$7 = 0x002B;     // U+002B PLUS SIGN (+)
            const HYPHENMINUS$3 = 0x002D;  // U+002D HYPHEN-MINUS (-)
            const QUESTIONMARK$2 = 0x003F; // U+003F QUESTION MARK (?)
            const U$1 = 0x0075;            // U+0075 LATIN SMALL LETTER U (u)

            function isDelim(token, code) {
                return token !== null && token.type === Delim && token.value.charCodeAt(0) === code;
            }

            function startsWith$1(token, code) {
                return token.value.charCodeAt(0) === code;
            }

            function hexSequence(token, offset, allowDash) {
                let hexlen = 0;

                for (let pos = offset; pos < token.value.length; pos++) {
                    const code = token.value.charCodeAt(pos);

                    if (code === HYPHENMINUS$3 && allowDash && hexlen !== 0) {
                        hexSequence(token, offset + hexlen + 1, false);
                        return 6; // dissallow following question marks
                    }

                    if (!isHexDigit(code)) {
                        return 0; // not a hex digit
                    }

                    if (++hexlen > 6) {
                        return 0; // too many hex digits
                    }    }

                return hexlen;
            }

            function withQuestionMarkSequence(consumed, length, getNextToken) {
                if (!consumed) {
                    return 0; // nothing consumed
                }

                while (isDelim(getNextToken(length), QUESTIONMARK$2)) {
                    if (++consumed > 6) {
                        return 0; // too many question marks
                    }

                    length++;
                }

                return length;
            }

            // https://drafts.csswg.org/css-syntax/#urange
            // Informally, the <urange> production has three forms:
            // U+0001
            //      Defines a range consisting of a single code point, in this case the code point "1".
            // U+0001-00ff
            //      Defines a range of codepoints between the first and the second value, in this case
            //      the range between "1" and "ff" (255 in decimal) inclusive.
            // U+00??
            //      Defines a range of codepoints where the "?" characters range over all hex digits,
            //      in this case defining the same as the value U+0000-00ff.
            // In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat "?" as a hexadecimal digit).
            //
            // <urange> =
            //   u '+' <ident-token> '?'* |
            //   u <dimension-token> '?'* |
            //   u <number-token> '?'* |
            //   u <number-token> <dimension-token> |
            //   u <number-token> <number-token> |
            //   u '+' '?'+
            function urange(token, getNextToken) {
                let length = 0;

                // should start with `u` or `U`
                if (token === null || token.type !== Ident || !cmpChar(token.value, 0, U$1)) {
                    return 0;
                }

                token = getNextToken(++length);
                if (token === null) {
                    return 0;
                }

                // u '+' <ident-token> '?'*
                // u '+' '?'+
                if (isDelim(token, PLUSSIGN$7)) {
                    token = getNextToken(++length);
                    if (token === null) {
                        return 0;
                    }

                    if (token.type === Ident) {
                        // u '+' <ident-token> '?'*
                        return withQuestionMarkSequence(hexSequence(token, 0, true), ++length, getNextToken);
                    }

                    if (isDelim(token, QUESTIONMARK$2)) {
                        // u '+' '?'+
                        return withQuestionMarkSequence(1, ++length, getNextToken);
                    }

                    // Hex digit or question mark is expected
                    return 0;
                }

                // u <number-token> '?'*
                // u <number-token> <dimension-token>
                // u <number-token> <number-token>
                if (token.type === Number$2) {
                    const consumedHexLength = hexSequence(token, 1, true);
                    if (consumedHexLength === 0) {
                        return 0;
                    }

                    token = getNextToken(++length);
                    if (token === null) {
                        // u <number-token> <eof>
                        return length;
                    }

                    if (token.type === Dimension$1 || token.type === Number$2) {
                        // u <number-token> <dimension-token>
                        // u <number-token> <number-token>
                        if (!startsWith$1(token, HYPHENMINUS$3) || !hexSequence(token, 1, false)) {
                            return 0;
                        }

                        return length + 1;
                    }

                    // u <number-token> '?'*
                    return withQuestionMarkSequence(consumedHexLength, length, getNextToken);
                }

                // u <dimension-token> '?'*
                if (token.type === Dimension$1) {
                    return withQuestionMarkSequence(hexSequence(token, 1, true), ++length, getNextToken);
                }

                return 0;
            }

            const cssWideKeywords$1 = ['unset', 'initial', 'inherit'];
            const calcFunctionNames = ['calc(', '-moz-calc(', '-webkit-calc('];
            const balancePair = new Map([
                [Function$1, RightParenthesis],
                [LeftParenthesis, RightParenthesis],
                [LeftSquareBracket, RightSquareBracket],
                [LeftCurlyBracket, RightCurlyBracket]
            ]);

            // units
            const LENGTH = [                              // https://www.w3.org/TR/css-values-3/#lengths
                'px', 'mm', 'cm', 'in', 'pt', 'pc', 'q',  // absolute length units
                'em', 'ex', 'ch', 'rem',                  // relative length units
                'vh', 'vw', 'vmin', 'vmax', 'vm'          // viewport-percentage lengths
            ];
            const ANGLE = ['deg', 'grad', 'rad', 'turn']; // https://www.w3.org/TR/css-values-3/#angles
            const TIME = ['s', 'ms'];                     // https://www.w3.org/TR/css-values-3/#time
            const FREQUENCY = ['hz', 'khz'];              // https://www.w3.org/TR/css-values-3/#frequency
            const RESOLUTION = ['dpi', 'dpcm', 'dppx', 'x']; // https://www.w3.org/TR/css-values-3/#resolution
            const FLEX = ['fr'];                          // https://drafts.csswg.org/css-grid/#fr-unit
            const DECIBEL = ['db'];                       // https://www.w3.org/TR/css3-speech/#mixing-props-voice-volume
            const SEMITONES = ['st'];                     // https://www.w3.org/TR/css3-speech/#voice-props-voice-pitch

            // safe char code getter
            function charCodeAt(str, index) {
                return index < str.length ? str.charCodeAt(index) : 0;
            }

            function eqStr(actual, expected) {
                return cmpStr(actual, 0, actual.length, expected);
            }

            function eqStrAny(actual, expected) {
                for (let i = 0; i < expected.length; i++) {
                    if (eqStr(actual, expected[i])) {
                        return true;
                    }
                }

                return false;
            }

            // IE postfix hack, i.e. 123\0 or 123px\9
            function isPostfixIeHack(str, offset) {
                if (offset !== str.length - 2) {
                    return false;
                }

                return (
                    charCodeAt(str, offset) === 0x005C &&  // U+005C REVERSE SOLIDUS (\)
                    isDigit(charCodeAt(str, offset + 1))
                );
            }

            function outOfRange(opts, value, numEnd) {
                if (opts && opts.type === 'Range') {
                    const num = Number(
                        numEnd !== undefined && numEnd !== value.length
                            ? value.substr(0, numEnd)
                            : value
                    );

                    if (isNaN(num)) {
                        return true;
                    }

                    if (opts.min !== null && num < opts.min) {
                        return true;
                    }

                    if (opts.max !== null && num > opts.max) {
                        return true;
                    }
                }

                return false;
            }

            function consumeFunction(token, getNextToken) {
                let balanceCloseType = 0;
                let balanceStash = [];
                let length = 0;

                // balanced token consuming
                scan:
                do {
                    switch (token.type) {
                        case RightCurlyBracket:
                        case RightParenthesis:
                        case RightSquareBracket:
                            if (token.type !== balanceCloseType) {
                                break scan;
                            }

                            balanceCloseType = balanceStash.pop();

                            if (balanceStash.length === 0) {
                                length++;
                                break scan;
                            }

                            break;

                        case Function$1:
                        case LeftParenthesis:
                        case LeftSquareBracket:
                        case LeftCurlyBracket:
                            balanceStash.push(balanceCloseType);
                            balanceCloseType = balancePair.get(token.type);
                            break;
                    }

                    length++;
                } while (token = getNextToken(length));

                return length;
            }

            // TODO: implement
            // can be used wherever <length>, <frequency>, <angle>, <time>, <percentage>, <number>, or <integer> values are allowed
            // https://drafts.csswg.org/css-values/#calc-notation
            function calc(next) {
                return function(token, getNextToken, opts) {
                    if (token === null) {
                        return 0;
                    }

                    if (token.type === Function$1 && eqStrAny(token.value, calcFunctionNames)) {
                        return consumeFunction(token, getNextToken);
                    }

                    return next(token, getNextToken, opts);
                };
            }

            function tokenType(expectedTokenType) {
                return function(token) {
                    if (token === null || token.type !== expectedTokenType) {
                        return 0;
                    }

                    return 1;
                };
            }

            function func(name) {
                name = name + '(';

                return function(token, getNextToken) {
                    if (token !== null && eqStr(token.value, name)) {
                        return consumeFunction(token, getNextToken);
                    }

                    return 0;
                };
            }

            // =========================
            // Complex types
            //

            // https://drafts.csswg.org/css-values-4/#custom-idents
            // 4.2. Author-defined Identifiers: the <custom-ident> type
            // Some properties accept arbitrary author-defined identifiers as a component value.
            // This generic data type is denoted by <custom-ident>, and represents any valid CSS identifier
            // that would not be misinterpreted as a pre-defined keyword in that property’s value definition.
            //
            // See also: https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident
            function customIdent(token) {
                if (token === null || token.type !== Ident) {
                    return 0;
                }

                const name = token.value.toLowerCase();

                // The CSS-wide keywords are not valid <custom-ident>s
                if (eqStrAny(name, cssWideKeywords$1)) {
                    return 0;
                }

                // The default keyword is reserved and is also not a valid <custom-ident>
                if (eqStr(name, 'default')) {
                    return 0;
                }

                // TODO: ignore property specific keywords (as described https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident)
                // Specifications using <custom-ident> must specify clearly what other keywords
                // are excluded from <custom-ident>, if any—for example by saying that any pre-defined keywords
                // in that property’s value definition are excluded. Excluded keywords are excluded
                // in all ASCII case permutations.

                return 1;
            }

            // https://drafts.csswg.org/css-variables/#typedef-custom-property-name
            // A custom property is any property whose name starts with two dashes (U+002D HYPHEN-MINUS), like --foo.
            // The <custom-property-name> production corresponds to this: it’s defined as any valid identifier
            // that starts with two dashes, except -- itself, which is reserved for future use by CSS.
            // NOTE: Current implementation treat `--` as a valid name since most (all?) major browsers treat it as valid.
            function customPropertyName(token) {
                // ... defined as any valid identifier
                if (token === null || token.type !== Ident) {
                    return 0;
                }

                // ... that starts with two dashes (U+002D HYPHEN-MINUS)
                if (charCodeAt(token.value, 0) !== 0x002D || charCodeAt(token.value, 1) !== 0x002D) {
                    return 0;
                }

                return 1;
            }

            // https://drafts.csswg.org/css-color-4/#hex-notation
            // The syntax of a <hex-color> is a <hash-token> token whose value consists of 3, 4, 6, or 8 hexadecimal digits.
            // In other words, a hex color is written as a hash character, "#", followed by some number of digits 0-9 or
            // letters a-f (the case of the letters doesn’t matter - #00ff00 is identical to #00FF00).
            function hexColor(token) {
                if (token === null || token.type !== Hash$1) {
                    return 0;
                }

                const length = token.value.length;

                // valid values (length): #rgb (4), #rgba (5), #rrggbb (7), #rrggbbaa (9)
                if (length !== 4 && length !== 5 && length !== 7 && length !== 9) {
                    return 0;
                }

                for (let i = 1; i < length; i++) {
                    if (!isHexDigit(charCodeAt(token.value, i))) {
                        return 0;
                    }
                }

                return 1;
            }

            function idSelector(token) {
                if (token === null || token.type !== Hash$1) {
                    return 0;
                }

                if (!isIdentifierStart(charCodeAt(token.value, 1), charCodeAt(token.value, 2), charCodeAt(token.value, 3))) {
                    return 0;
                }

                return 1;
            }

            // https://drafts.csswg.org/css-syntax/#any-value
            // It represents the entirety of what a valid declaration can have as its value.
            function declarationValue(token, getNextToken) {
                if (!token) {
                    return 0;
                }

                let balanceCloseType = 0;
                let balanceStash = [];
                let length = 0;

                // The <declaration-value> production matches any sequence of one or more tokens,
                // so long as the sequence does not contain ...
                scan:
                do {
                    switch (token.type) {
                        // ... <bad-string-token>, <bad-url-token>,
                        case BadString:
                        case BadUrl:
                            break scan;

                        // ... unmatched <)-token>, <]-token>, or <}-token>,
                        case RightCurlyBracket:
                        case RightParenthesis:
                        case RightSquareBracket:
                            if (token.type !== balanceCloseType) {
                                break scan;
                            }

                            balanceCloseType = balanceStash.pop();
                            break;

                        // ... or top-level <semicolon-token> tokens
                        case Semicolon:
                            if (balanceCloseType === 0) {
                                break scan;
                            }

                            break;

                        // ... or <delim-token> tokens with a value of "!"
                        case Delim:
                            if (balanceCloseType === 0 && token.value === '!') {
                                break scan;
                            }

                            break;

                        case Function$1:
                        case LeftParenthesis:
                        case LeftSquareBracket:
                        case LeftCurlyBracket:
                            balanceStash.push(balanceCloseType);
                            balanceCloseType = balancePair.get(token.type);
                            break;
                    }

                    length++;
                } while (token = getNextToken(length));

                return length;
            }

            // https://drafts.csswg.org/css-syntax/#any-value
            // The <any-value> production is identical to <declaration-value>, but also
            // allows top-level <semicolon-token> tokens and <delim-token> tokens
            // with a value of "!". It represents the entirety of what valid CSS can be in any context.
            function anyValue(token, getNextToken) {
                if (!token) {
                    return 0;
                }

                let balanceCloseType = 0;
                let balanceStash = [];
                let length = 0;

                // The <any-value> production matches any sequence of one or more tokens,
                // so long as the sequence ...
                scan:
                do {
                    switch (token.type) {
                        // ... does not contain <bad-string-token>, <bad-url-token>,
                        case BadString:
                        case BadUrl:
                            break scan;

                        // ... unmatched <)-token>, <]-token>, or <}-token>,
                        case RightCurlyBracket:
                        case RightParenthesis:
                        case RightSquareBracket:
                            if (token.type !== balanceCloseType) {
                                break scan;
                            }

                            balanceCloseType = balanceStash.pop();
                            break;

                        case Function$1:
                        case LeftParenthesis:
                        case LeftSquareBracket:
                        case LeftCurlyBracket:
                            balanceStash.push(balanceCloseType);
                            balanceCloseType = balancePair.get(token.type);
                            break;
                    }

                    length++;
                } while (token = getNextToken(length));

                return length;
            }

            // =========================
            // Dimensions
            //

            function dimension(type) {
                if (type) {
                    type = new Set(type);
                }

                return function(token, getNextToken, opts) {
                    if (token === null || token.type !== Dimension$1) {
                        return 0;
                    }

                    const numberEnd = consumeNumber$1(token.value, 0);

                    // check unit
                    if (type !== null) {
                        // check for IE postfix hack, i.e. 123px\0 or 123px\9
                        const reverseSolidusOffset = token.value.indexOf('\\', numberEnd);
                        const unit = reverseSolidusOffset === -1 || !isPostfixIeHack(token.value, reverseSolidusOffset)
                            ? token.value.substr(numberEnd)
                            : token.value.substring(numberEnd, reverseSolidusOffset);

                        if (type.has(unit.toLowerCase()) === false) {
                            return 0;
                        }
                    }

                    // check range if specified
                    if (outOfRange(opts, token.value, numberEnd)) {
                        return 0;
                    }

                    return 1;
                };
            }

            // =========================
            // Percentage
            //

            // §5.5. Percentages: the <percentage> type
            // https://drafts.csswg.org/css-values-4/#percentages
            function percentage(token, getNextToken, opts) {
                // ... corresponds to the <percentage-token> production
                if (token === null || token.type !== Percentage$1) {
                    return 0;
                }

                // check range if specified
                if (outOfRange(opts, token.value, token.value.length - 1)) {
                    return 0;
                }

                return 1;
            }

            // =========================
            // Numeric
            //

            // https://drafts.csswg.org/css-values-4/#numbers
            // The value <zero> represents a literal number with the value 0. Expressions that merely
            // evaluate to a <number> with the value 0 (for example, calc(0)) do not match <zero>;
            // only literal <number-token>s do.
            function zero(next) {
                if (typeof next !== 'function') {
                    next = function() {
                        return 0;
                    };
                }

                return function(token, getNextToken, opts) {
                    if (token !== null && token.type === Number$2) {
                        if (Number(token.value) === 0) {
                            return 1;
                        }
                    }

                    return next(token, getNextToken, opts);
                };
            }

            // § 5.3. Real Numbers: the <number> type
            // https://drafts.csswg.org/css-values-4/#numbers
            // Number values are denoted by <number>, and represent real numbers, possibly with a fractional component.
            // ... It corresponds to the <number-token> production
            function number(token, getNextToken, opts) {
                if (token === null) {
                    return 0;
                }

                const numberEnd = consumeNumber$1(token.value, 0);
                const isNumber = numberEnd === token.value.length;
                if (!isNumber && !isPostfixIeHack(token.value, numberEnd)) {
                    return 0;
                }

                // check range if specified
                if (outOfRange(opts, token.value, numberEnd)) {
                    return 0;
                }

                return 1;
            }

            // §5.2. Integers: the <integer> type
            // https://drafts.csswg.org/css-values-4/#integers
            function integer(token, getNextToken, opts) {
                // ... corresponds to a subset of the <number-token> production
                if (token === null || token.type !== Number$2) {
                    return 0;
                }

                // The first digit of an integer may be immediately preceded by `-` or `+` to indicate the integer’s sign.
                let i = charCodeAt(token.value, 0) === 0x002B ||       // U+002B PLUS SIGN (+)
                        charCodeAt(token.value, 0) === 0x002D ? 1 : 0; // U+002D HYPHEN-MINUS (-)

                // When written literally, an integer is one or more decimal digits 0 through 9 ...
                for (; i < token.value.length; i++) {
                    if (!isDigit(charCodeAt(token.value, i))) {
                        return 0;
                    }
                }

                // check range if specified
                if (outOfRange(opts, token.value, i)) {
                    return 0;
                }

                return 1;
            }

            var generic = {
                // token types
                'ident-token': tokenType(Ident),
                'function-token': tokenType(Function$1),
                'at-keyword-token': tokenType(AtKeyword),
                'hash-token': tokenType(Hash$1),
                'string-token': tokenType(String$2),
                'bad-string-token': tokenType(BadString),
                'url-token': tokenType(Url$1),
                'bad-url-token': tokenType(BadUrl),
                'delim-token': tokenType(Delim),
                'number-token': tokenType(Number$2),
                'percentage-token': tokenType(Percentage$1),
                'dimension-token': tokenType(Dimension$1),
                'whitespace-token': tokenType(WhiteSpace$1),
                'CDO-token': tokenType(CDO$1),
                'CDC-token': tokenType(CDC$1),
                'colon-token': tokenType(Colon),
                'semicolon-token': tokenType(Semicolon),
                'comma-token': tokenType(Comma),
                '[-token': tokenType(LeftSquareBracket),
                ']-token': tokenType(RightSquareBracket),
                '(-token': tokenType(LeftParenthesis),
                ')-token': tokenType(RightParenthesis),
                '{-token': tokenType(LeftCurlyBracket),
                '}-token': tokenType(RightCurlyBracket),

                // token type aliases
                'string': tokenType(String$2),
                'ident': tokenType(Ident),

                // complex types
                'custom-ident': customIdent,
                'custom-property-name': customPropertyName,
                'hex-color': hexColor,
                'id-selector': idSelector, // element( <id-selector> )
                'an-plus-b': anPlusB,
                'urange': urange,
                'declaration-value': declarationValue,
                'any-value': anyValue,

                // dimensions
                'dimension': calc(dimension(null)),
                'angle': calc(dimension(ANGLE)),
                'decibel': calc(dimension(DECIBEL)),
                'frequency': calc(dimension(FREQUENCY)),
                'flex': calc(dimension(FLEX)),
                'length': calc(zero(dimension(LENGTH))),
                'resolution': calc(dimension(RESOLUTION)),
                'semitones': calc(dimension(SEMITONES)),
                'time': calc(dimension(TIME)),

                // percentage
                'percentage': calc(percentage),

                // numeric
                'zero': zero(),
                'number': calc(number),
                'integer': calc(integer),

                // old IE stuff
                '-ms-legacy-expression': func('expression')
            };

            function SyntaxError$1(message, input, offset) {
                return Object.assign(createCustomError('SyntaxError', message), {
                    input,
                    offset,
                    rawMessage: message,
                    message: message + '\n' +
                        '  ' + input + '\n' +
                        '--' + new Array((offset || input.length) + 1).join('-') + '^'
                });
            }

            const TAB$1 = 9;
            const N$2 = 10;
            const F$1 = 12;
            const R$1 = 13;
            const SPACE$3 = 32;

            class Tokenizer {
                constructor(str) {
                    this.str = str;
                    this.pos = 0;
                }
                charCodeAt(pos) {
                    return pos < this.str.length ? this.str.charCodeAt(pos) : 0;
                }
                charCode() {
                    return this.charCodeAt(this.pos);
                }
                nextCharCode() {
                    return this.charCodeAt(this.pos + 1);
                }
                nextNonWsCode(pos) {
                    return this.charCodeAt(this.findWsEnd(pos));
                }
                findWsEnd(pos) {
                    for (; pos < this.str.length; pos++) {
                        const code = this.str.charCodeAt(pos);
                        if (code !== R$1 && code !== N$2 && code !== F$1 && code !== SPACE$3 && code !== TAB$1) {
                            break;
                        }
                    }

                    return pos;
                }
                substringToPos(end) {
                    return this.str.substring(this.pos, this.pos = end);
                }
                eat(code) {
                    if (this.charCode() !== code) {
                        this.error('Expect `' + String.fromCharCode(code) + '`');
                    }

                    this.pos++;
                }
                peek() {
                    return this.pos < this.str.length ? this.str.charAt(this.pos++) : '';
                }
                error(message) {
                    throw new SyntaxError$1(message, this.str, this.pos);
                }
            }

            const TAB = 9;
            const N$1 = 10;
            const F = 12;
            const R = 13;
            const SPACE$2 = 32;
            const EXCLAMATIONMARK$2 = 33;    // !
            const NUMBERSIGN$3 = 35;         // #
            const AMPERSAND$1 = 38;          // &
            const APOSTROPHE$2 = 39;         // '
            const LEFTPARENTHESIS$2 = 40;    // (
            const RIGHTPARENTHESIS$2 = 41;   // )
            const ASTERISK$6 = 42;           // *
            const PLUSSIGN$6 = 43;           // +
            const COMMA = 44;              // ,
            const HYPERMINUS = 45;         // -
            const LESSTHANSIGN = 60;       // <
            const GREATERTHANSIGN$2 = 62;    // >
            const QUESTIONMARK$1 = 63;       // ?
            const COMMERCIALAT = 64;       // @
            const LEFTSQUAREBRACKET = 91;  // [
            const RIGHTSQUAREBRACKET = 93; // ]
            const LEFTCURLYBRACKET = 123;  // {
            const VERTICALLINE$3 = 124;      // |
            const RIGHTCURLYBRACKET = 125; // }
            const INFINITY = 8734;         // ∞
            const NAME_CHAR = new Uint8Array(128).map((_, idx) =>
                /[a-zA-Z0-9\-]/.test(String.fromCharCode(idx)) ? 1 : 0
            );
            const COMBINATOR_PRECEDENCE = {
                ' ': 1,
                '&&': 2,
                '||': 3,
                '|': 4
            };

            function scanSpaces(tokenizer) {
                return tokenizer.substringToPos(
                    tokenizer.findWsEnd(tokenizer.pos)
                );
            }

            function scanWord(tokenizer) {
                let end = tokenizer.pos;

                for (; end < tokenizer.str.length; end++) {
                    const code = tokenizer.str.charCodeAt(end);
                    if (code >= 128 || NAME_CHAR[code] === 0) {
                        break;
                    }
                }

                if (tokenizer.pos === end) {
                    tokenizer.error('Expect a keyword');
                }

                return tokenizer.substringToPos(end);
            }

            function scanNumber(tokenizer) {
                let end = tokenizer.pos;

                for (; end < tokenizer.str.length; end++) {
                    const code = tokenizer.str.charCodeAt(end);
                    if (code < 48 || code > 57) {
                        break;
                    }
                }

                if (tokenizer.pos === end) {
                    tokenizer.error('Expect a number');
                }

                return tokenizer.substringToPos(end);
            }

            function scanString(tokenizer) {
                const end = tokenizer.str.indexOf('\'', tokenizer.pos + 1);

                if (end === -1) {
                    tokenizer.pos = tokenizer.str.length;
                    tokenizer.error('Expect an apostrophe');
                }

                return tokenizer.substringToPos(end + 1);
            }

            function readMultiplierRange(tokenizer) {
                let min = null;
                let max = null;

                tokenizer.eat(LEFTCURLYBRACKET);

                min = scanNumber(tokenizer);

                if (tokenizer.charCode() === COMMA) {
                    tokenizer.pos++;
                    if (tokenizer.charCode() !== RIGHTCURLYBRACKET) {
                        max = scanNumber(tokenizer);
                    }
                } else {
                    max = min;
                }

                tokenizer.eat(RIGHTCURLYBRACKET);

                return {
                    min: Number(min),
                    max: max ? Number(max) : 0
                };
            }

            function readMultiplier(tokenizer) {
                let range = null;
                let comma = false;

                switch (tokenizer.charCode()) {
                    case ASTERISK$6:
                        tokenizer.pos++;

                        range = {
                            min: 0,
                            max: 0
                        };

                        break;

                    case PLUSSIGN$6:
                        tokenizer.pos++;

                        range = {
                            min: 1,
                            max: 0
                        };

                        break;

                    case QUESTIONMARK$1:
                        tokenizer.pos++;

                        range = {
                            min: 0,
                            max: 1
                        };

                        break;

                    case NUMBERSIGN$3:
                        tokenizer.pos++;

                        comma = true;

                        if (tokenizer.charCode() === LEFTCURLYBRACKET) {
                            range = readMultiplierRange(tokenizer);
                        } else {
                            range = {
                                min: 1,
                                max: 0
                            };
                        }

                        break;

                    case LEFTCURLYBRACKET:
                        range = readMultiplierRange(tokenizer);
                        break;

                    default:
                        return null;
                }

                return {
                    type: 'Multiplier',
                    comma,
                    min: range.min,
                    max: range.max,
                    term: null
                };
            }

            function maybeMultiplied(tokenizer, node) {
                const multiplier = readMultiplier(tokenizer);

                if (multiplier !== null) {
                    multiplier.term = node;
                    return multiplier;
                }

                return node;
            }

            function maybeToken(tokenizer) {
                const ch = tokenizer.peek();

                if (ch === '') {
                    return null;
                }

                return {
                    type: 'Token',
                    value: ch
                };
            }

            function readProperty$1(tokenizer) {
                let name;

                tokenizer.eat(LESSTHANSIGN);
                tokenizer.eat(APOSTROPHE$2);

                name = scanWord(tokenizer);

                tokenizer.eat(APOSTROPHE$2);
                tokenizer.eat(GREATERTHANSIGN$2);

                return maybeMultiplied(tokenizer, {
                    type: 'Property',
                    name
                });
            }

            // https://drafts.csswg.org/css-values-3/#numeric-ranges
            // 4.1. Range Restrictions and Range Definition Notation
            //
            // Range restrictions can be annotated in the numeric type notation using CSS bracketed
            // range notation—[min,max]—within the angle brackets, after the identifying keyword,
            // indicating a closed range between (and including) min and max.
            // For example, <integer [0, 10]> indicates an integer between 0 and 10, inclusive.
            function readTypeRange(tokenizer) {
                // use null for Infinity to make AST format JSON serializable/deserializable
                let min = null; // -Infinity
                let max = null; // Infinity
                let sign = 1;

                tokenizer.eat(LEFTSQUAREBRACKET);

                if (tokenizer.charCode() === HYPERMINUS) {
                    tokenizer.peek();
                    sign = -1;
                }

                if (sign == -1 && tokenizer.charCode() === INFINITY) {
                    tokenizer.peek();
                } else {
                    min = sign * Number(scanNumber(tokenizer));
                }

                scanSpaces(tokenizer);
                tokenizer.eat(COMMA);
                scanSpaces(tokenizer);

                if (tokenizer.charCode() === INFINITY) {
                    tokenizer.peek();
                } else {
                    sign = 1;

                    if (tokenizer.charCode() === HYPERMINUS) {
                        tokenizer.peek();
                        sign = -1;
                    }

                    max = sign * Number(scanNumber(tokenizer));
                }

                tokenizer.eat(RIGHTSQUAREBRACKET);

                // If no range is indicated, either by using the bracketed range notation
                // or in the property description, then [−∞,∞] is assumed.
                if (min === null && max === null) {
                    return null;
                }

                return {
                    type: 'Range',
                    min,
                    max
                };
            }

            function readType(tokenizer) {
                let name;
                let opts = null;

                tokenizer.eat(LESSTHANSIGN);
                name = scanWord(tokenizer);

                if (tokenizer.charCode() === LEFTPARENTHESIS$2 &&
                    tokenizer.nextCharCode() === RIGHTPARENTHESIS$2) {
                    tokenizer.pos += 2;
                    name += '()';
                }

                if (tokenizer.charCodeAt(tokenizer.findWsEnd(tokenizer.pos)) === LEFTSQUAREBRACKET) {
                    scanSpaces(tokenizer);
                    opts = readTypeRange(tokenizer);
                }

                tokenizer.eat(GREATERTHANSIGN$2);

                return maybeMultiplied(tokenizer, {
                    type: 'Type',
                    name,
                    opts
                });
            }

            function readKeywordOrFunction(tokenizer) {
                const name = scanWord(tokenizer);

                if (tokenizer.charCode() === LEFTPARENTHESIS$2) {
                    tokenizer.pos++;

                    return {
                        type: 'Function',
                        name
                    };
                }

                return maybeMultiplied(tokenizer, {
                    type: 'Keyword',
                    name
                });
            }

            function regroupTerms(terms, combinators) {
                function createGroup(terms, combinator) {
                    return {
                        type: 'Group',
                        terms,
                        combinator,
                        disallowEmpty: false,
                        explicit: false
                    };
                }

                let combinator;

                combinators = Object.keys(combinators)
                    .sort((a, b) => COMBINATOR_PRECEDENCE[a] - COMBINATOR_PRECEDENCE[b]);

                while (combinators.length > 0) {
                    combinator = combinators.shift();

                    let i = 0;
                    let subgroupStart = 0;

                    for (; i < terms.length; i++) {
                        const term = terms[i];

                        if (term.type === 'Combinator') {
                            if (term.value === combinator) {
                                if (subgroupStart === -1) {
                                    subgroupStart = i - 1;
                                }
                                terms.splice(i, 1);
                                i--;
                            } else {
                                if (subgroupStart !== -1 && i - subgroupStart > 1) {
                                    terms.splice(
                                        subgroupStart,
                                        i - subgroupStart,
                                        createGroup(terms.slice(subgroupStart, i), combinator)
                                    );
                                    i = subgroupStart + 1;
                                }
                                subgroupStart = -1;
                            }
                        }
                    }

                    if (subgroupStart !== -1 && combinators.length) {
                        terms.splice(
                            subgroupStart,
                            i - subgroupStart,
                            createGroup(terms.slice(subgroupStart, i), combinator)
                        );
                    }
                }

                return combinator;
            }

            function readImplicitGroup(tokenizer) {
                const terms = [];
                const combinators = {};
                let token;
                let prevToken = null;
                let prevTokenPos = tokenizer.pos;

                while (token = peek(tokenizer)) {
                    if (token.type !== 'Spaces') {
                        if (token.type === 'Combinator') {
                            // check for combinator in group beginning and double combinator sequence
                            if (prevToken === null || prevToken.type === 'Combinator') {
                                tokenizer.pos = prevTokenPos;
                                tokenizer.error('Unexpected combinator');
                            }

                            combinators[token.value] = true;
                        } else if (prevToken !== null && prevToken.type !== 'Combinator') {
                            combinators[' '] = true;  // a b
                            terms.push({
                                type: 'Combinator',
                                value: ' '
                            });
                        }

                        terms.push(token);
                        prevToken = token;
                        prevTokenPos = tokenizer.pos;
                    }
                }

                // check for combinator in group ending
                if (prevToken !== null && prevToken.type === 'Combinator') {
                    tokenizer.pos -= prevTokenPos;
                    tokenizer.error('Unexpected combinator');
                }

                return {
                    type: 'Group',
                    terms,
                    combinator: regroupTerms(terms, combinators) || ' ',
                    disallowEmpty: false,
                    explicit: false
                };
            }

            function readGroup(tokenizer) {
                let result;

                tokenizer.eat(LEFTSQUAREBRACKET);
                result = readImplicitGroup(tokenizer);
                tokenizer.eat(RIGHTSQUAREBRACKET);

                result.explicit = true;

                if (tokenizer.charCode() === EXCLAMATIONMARK$2) {
                    tokenizer.pos++;
                    result.disallowEmpty = true;
                }

                return result;
            }

            function peek(tokenizer) {
                let code = tokenizer.charCode();

                if (code < 128 && NAME_CHAR[code] === 1) {
                    return readKeywordOrFunction(tokenizer);
                }

                switch (code) {
                    case RIGHTSQUAREBRACKET:
                        // don't eat, stop scan a group
                        break;

                    case LEFTSQUAREBRACKET:
                        return maybeMultiplied(tokenizer, readGroup(tokenizer));

                    case LESSTHANSIGN:
                        return tokenizer.nextCharCode() === APOSTROPHE$2
                            ? readProperty$1(tokenizer)
                            : readType(tokenizer);

                    case VERTICALLINE$3:
                        return {
                            type: 'Combinator',
                            value: tokenizer.substringToPos(
                                tokenizer.pos + (tokenizer.nextCharCode() === VERTICALLINE$3 ? 2 : 1)
                            )
                        };

                    case AMPERSAND$1:
                        tokenizer.pos++;
                        tokenizer.eat(AMPERSAND$1);

                        return {
                            type: 'Combinator',
                            value: '&&'
                        };

                    case COMMA:
                        tokenizer.pos++;
                        return {
                            type: 'Comma'
                        };

                    case APOSTROPHE$2:
                        return maybeMultiplied(tokenizer, {
                            type: 'String',
                            value: scanString(tokenizer)
                        });

                    case SPACE$2:
                    case TAB:
                    case N$1:
                    case R:
                    case F:
                        return {
                            type: 'Spaces',
                            value: scanSpaces(tokenizer)
                        };

                    case COMMERCIALAT:
                        code = tokenizer.nextCharCode();

                        if (code < 128 && NAME_CHAR[code] === 1) {
                            tokenizer.pos++;
                            return {
                                type: 'AtKeyword',
                                name: scanWord(tokenizer)
                            };
                        }

                        return maybeToken(tokenizer);

                    case ASTERISK$6:
                    case PLUSSIGN$6:
                    case QUESTIONMARK$1:
                    case NUMBERSIGN$3:
                    case EXCLAMATIONMARK$2:
                        // prohibited tokens (used as a multiplier start)
                        break;

                    case LEFTCURLYBRACKET:
                        // LEFTCURLYBRACKET is allowed since mdn/data uses it w/o quoting
                        // check next char isn't a number, because it's likely a disjoined multiplier
                        code = tokenizer.nextCharCode();

                        if (code < 48 || code > 57) {
                            return maybeToken(tokenizer);
                        }

                        break;

                    default:
                        return maybeToken(tokenizer);
                }
            }

            function parse$F(source) {
                const tokenizer = new Tokenizer(source);
                const result = readImplicitGroup(tokenizer);

                if (tokenizer.pos !== source.length) {
                    tokenizer.error('Unexpected input');
                }

                // reduce redundant groups with single group term
                if (result.terms.length === 1 && result.terms[0].type === 'Group') {
                    return result.terms[0];
                }

                return result;
            }

            const noop = function() {};

            function ensureFunction(value) {
                return typeof value === 'function' ? value : noop;
            }

            function walk$1(node, options, context) {
                function walk(node) {
                    enter.call(context, node);

                    switch (node.type) {
                        case 'Group':
                            node.terms.forEach(walk);
                            break;

                        case 'Multiplier':
                            walk(node.term);
                            break;

                        case 'Type':
                        case 'Property':
                        case 'Keyword':
                        case 'AtKeyword':
                        case 'Function':
                        case 'String':
                        case 'Token':
                        case 'Comma':
                            break;

                        default:
                            throw new Error('Unknown type: ' + node.type);
                    }

                    leave.call(context, node);
                }

                let enter = noop;
                let leave = noop;

                if (typeof options === 'function') {
                    enter = options;
                } else if (options) {
                    enter = ensureFunction(options.enter);
                    leave = ensureFunction(options.leave);
                }

                if (enter === noop && leave === noop) {
                    throw new Error('Neither `enter` nor `leave` walker handler is set or both aren\'t a function');
                }

                walk(node);
            }

            const astToTokens = {
                decorator: function(handlers) {
                    const tokens = [];
                    let curNode = null;

                    return {
                        ...handlers,
                        node(node) {
                            const tmp = curNode;
                            curNode = node;
                            handlers.node.call(this, node);
                            curNode = tmp;
                        },
                        emit(value, type, auto) {
                            tokens.push({
                                type,
                                value,
                                node: auto ? null : curNode
                            });
                        },
                        result() {
                            return tokens;
                        }
                    };
                }
            };

            function stringToTokens(str) {
                const tokens = [];

                tokenize$1(str, (type, start, end) =>
                    tokens.push({
                        type,
                        value: str.slice(start, end),
                        node: null
                    })
                );

                return tokens;
            }

            function prepareTokens(value, syntax) {
                if (typeof value === 'string') {
                    return stringToTokens(value);
                }

                return syntax.generate(value, astToTokens);
            }

            const MATCH = { type: 'Match' };
            const MISMATCH = { type: 'Mismatch' };
            const DISALLOW_EMPTY = { type: 'DisallowEmpty' };

            const LEFTPARENTHESIS$1 = 40;  // (
            const RIGHTPARENTHESIS$1 = 41; // )

            function createCondition(match, thenBranch, elseBranch) {
                // reduce node count
                if (thenBranch === MATCH && elseBranch === MISMATCH) {
                    return match;
                }

                if (match === MATCH && thenBranch === MATCH && elseBranch === MATCH) {
                    return match;
                }

                if (match.type === 'If' && match.else === MISMATCH && thenBranch === MATCH) {
                    thenBranch = match.then;
                    match = match.match;
                }

                return {
                    type: 'If',
                    match,
                    then: thenBranch,
                    else: elseBranch
                };
            }

            function isFunctionType(name) {
                return (
                    name.length > 2 &&
                    name.charCodeAt(name.length - 2) === LEFTPARENTHESIS$1 &&
                    name.charCodeAt(name.length - 1) === RIGHTPARENTHESIS$1
                );
            }

            function isEnumCapatible(term) {
                return (
                    term.type === 'Keyword' ||
                    term.type === 'AtKeyword' ||
                    term.type === 'Function' ||
                    term.type === 'Type' && isFunctionType(term.name)
                );
            }

            function buildGroupMatchGraph(combinator, terms, atLeastOneTermMatched) {
                switch (combinator) {
                    case ' ': {
                        // Juxtaposing components means that all of them must occur, in the given order.
                        //
                        // a b c
                        // =
                        // match a
                        //   then match b
                        //     then match c
                        //       then MATCH
                        //       else MISMATCH
                        //     else MISMATCH
                        //   else MISMATCH
                        let result = MATCH;

                        for (let i = terms.length - 1; i >= 0; i--) {
                            const term = terms[i];

                            result = createCondition(
                                term,
                                result,
                                MISMATCH
                            );
                        }
                        return result;
                    }

                    case '|': {
                        // A bar (|) separates two or more alternatives: exactly one of them must occur.
                        //
                        // a | b | c
                        // =
                        // match a
                        //   then MATCH
                        //   else match b
                        //     then MATCH
                        //     else match c
                        //       then MATCH
                        //       else MISMATCH

                        let result = MISMATCH;
                        let map = null;

                        for (let i = terms.length - 1; i >= 0; i--) {
                            let term = terms[i];

                            // reduce sequence of keywords into a Enum
                            if (isEnumCapatible(term)) {
                                if (map === null && i > 0 && isEnumCapatible(terms[i - 1])) {
                                    map = Object.create(null);
                                    result = createCondition(
                                        {
                                            type: 'Enum',
                                            map
                                        },
                                        MATCH,
                                        result
                                    );
                                }

                                if (map !== null) {
                                    const key = (isFunctionType(term.name) ? term.name.slice(0, -1) : term.name).toLowerCase();
                                    if (key in map === false) {
                                        map[key] = term;
                                        continue;
                                    }
                                }
                            }

                            map = null;

                            // create a new conditonal node
                            result = createCondition(
                                term,
                                MATCH,
                                result
                            );
                        }
                        return result;
                    }

                    case '&&': {
                        // A double ampersand (&&) separates two or more components,
                        // all of which must occur, in any order.

                        // Use MatchOnce for groups with a large number of terms,
                        // since &&-groups produces at least N!-node trees
                        if (terms.length > 5) {
                            return {
                                type: 'MatchOnce',
                                terms,
                                all: true
                            };
                        }

                        // Use a combination tree for groups with small number of terms
                        //
                        // a && b && c
                        // =
                        // match a
                        //   then [b && c]
                        //   else match b
                        //     then [a && c]
                        //     else match c
                        //       then [a && b]
                        //       else MISMATCH
                        //
                        // a && b
                        // =
                        // match a
                        //   then match b
                        //     then MATCH
                        //     else MISMATCH
                        //   else match b
                        //     then match a
                        //       then MATCH
                        //       else MISMATCH
                        //     else MISMATCH
                        let result = MISMATCH;

                        for (let i = terms.length - 1; i >= 0; i--) {
                            const term = terms[i];
                            let thenClause;

                            if (terms.length > 1) {
                                thenClause = buildGroupMatchGraph(
                                    combinator,
                                    terms.filter(function(newGroupTerm) {
                                        return newGroupTerm !== term;
                                    }),
                                    false
                                );
                            } else {
                                thenClause = MATCH;
                            }

                            result = createCondition(
                                term,
                                thenClause,
                                result
                            );
                        }
                        return result;
                    }

                    case '||': {
                        // A double bar (||) separates two or more options:
                        // one or more of them must occur, in any order.

                        // Use MatchOnce for groups with a large number of terms,
                        // since ||-groups produces at least N!-node trees
                        if (terms.length > 5) {
                            return {
                                type: 'MatchOnce',
                                terms,
                                all: false
                            };
                        }

                        // Use a combination tree for groups with small number of terms
                        //
                        // a || b || c
                        // =
                        // match a
                        //   then [b || c]
                        //   else match b
                        //     then [a || c]
                        //     else match c
                        //       then [a || b]
                        //       else MISMATCH
                        //
                        // a || b
                        // =
                        // match a
                        //   then match b
                        //     then MATCH
                        //     else MATCH
                        //   else match b
                        //     then match a
                        //       then MATCH
                        //       else MATCH
                        //     else MISMATCH
                        let result = atLeastOneTermMatched ? MATCH : MISMATCH;

                        for (let i = terms.length - 1; i >= 0; i--) {
                            const term = terms[i];
                            let thenClause;

                            if (terms.length > 1) {
                                thenClause = buildGroupMatchGraph(
                                    combinator,
                                    terms.filter(function(newGroupTerm) {
                                        return newGroupTerm !== term;
                                    }),
                                    true
                                );
                            } else {
                                thenClause = MATCH;
                            }

                            result = createCondition(
                                term,
                                thenClause,
                                result
                            );
                        }
                        return result;
                    }
                }
            }

            function buildMultiplierMatchGraph(node) {
                let result = MATCH;
                let matchTerm = buildMatchGraphInternal(node.term);

                if (node.max === 0) {
                    // disable repeating of empty match to prevent infinite loop
                    matchTerm = createCondition(
                        matchTerm,
                        DISALLOW_EMPTY,
                        MISMATCH
                    );

                    // an occurrence count is not limited, make a cycle;
                    // to collect more terms on each following matching mismatch
                    result = createCondition(
                        matchTerm,
                        null, // will be a loop
                        MISMATCH
                    );

                    result.then = createCondition(
                        MATCH,
                        MATCH,
                        result // make a loop
                    );

                    if (node.comma) {
                        result.then.else = createCondition(
                            { type: 'Comma', syntax: node },
                            result,
                            MISMATCH
                        );
                    }
                } else {
                    // create a match node chain for [min .. max] interval with optional matches
                    for (let i = node.min || 1; i <= node.max; i++) {
                        if (node.comma && result !== MATCH) {
                            result = createCondition(
                                { type: 'Comma', syntax: node },
                                result,
                                MISMATCH
                            );
                        }

                        result = createCondition(
                            matchTerm,
                            createCondition(
                                MATCH,
                                MATCH,
                                result
                            ),
                            MISMATCH
                        );
                    }
                }

                if (node.min === 0) {
                    // allow zero match
                    result = createCondition(
                        MATCH,
                        MATCH,
                        result
                    );
                } else {
                    // create a match node chain to collect [0 ... min - 1] required matches
                    for (let i = 0; i < node.min - 1; i++) {
                        if (node.comma && result !== MATCH) {
                            result = createCondition(
                                { type: 'Comma', syntax: node },
                                result,
                                MISMATCH
                            );
                        }

                        result = createCondition(
                            matchTerm,
                            result,
                            MISMATCH
                        );
                    }
                }

                return result;
            }

            function buildMatchGraphInternal(node) {
                if (typeof node === 'function') {
                    return {
                        type: 'Generic',
                        fn: node
                    };
                }

                switch (node.type) {
                    case 'Group': {
                        let result = buildGroupMatchGraph(
                            node.combinator,
                            node.terms.map(buildMatchGraphInternal),
                            false
                        );

                        if (node.disallowEmpty) {
                            result = createCondition(
                                result,
                                DISALLOW_EMPTY,
                                MISMATCH
                            );
                        }

                        return result;
                    }

                    case 'Multiplier':
                        return buildMultiplierMatchGraph(node);

                    case 'Type':
                    case 'Property':
                        return {
                            type: node.type,
                            name: node.name,
                            syntax: node
                        };

                    case 'Keyword':
                        return {
                            type: node.type,
                            name: node.name.toLowerCase(),
                            syntax: node
                        };

                    case 'AtKeyword':
                        return {
                            type: node.type,
                            name: '@' + node.name.toLowerCase(),
                            syntax: node
                        };

                    case 'Function':
                        return {
                            type: node.type,
                            name: node.name.toLowerCase() + '(',
                            syntax: node
                        };

                    case 'String':
                        // convert a one char length String to a Token
                        if (node.value.length === 3) {
                            return {
                                type: 'Token',
                                value: node.value.charAt(1),
                                syntax: node
                            };
                        }

                        // otherwise use it as is
                        return {
                            type: node.type,
                            value: node.value.substr(1, node.value.length - 2).replace(/\\'/g, '\''),
                            syntax: node
                        };

                    case 'Token':
                        return {
                            type: node.type,
                            value: node.value,
                            syntax: node
                        };

                    case 'Comma':
                        return {
                            type: node.type,
                            syntax: node
                        };

                    default:
                        throw new Error('Unknown node type:', node.type);
                }
            }

            function buildMatchGraph(syntaxTree, ref) {
                if (typeof syntaxTree === 'string') {
                    syntaxTree = parse$F(syntaxTree);
                }

                return {
                    type: 'MatchGraph',
                    match: buildMatchGraphInternal(syntaxTree),
                    syntax: ref || null,
                    source: syntaxTree
                };
            }

            const { hasOwnProperty: hasOwnProperty$3 } = Object.prototype;
            const STUB = 0;
            const TOKEN = 1;
            const OPEN_SYNTAX = 2;
            const CLOSE_SYNTAX = 3;

            const EXIT_REASON_MATCH = 'Match';
            const EXIT_REASON_MISMATCH = 'Mismatch';
            const EXIT_REASON_ITERATION_LIMIT = 'Maximum iteration number exceeded (please fill an issue on https://github.com/csstree/csstree/issues)';

            const ITERATION_LIMIT = 15000;

            function reverseList(list) {
                let prev = null;
                let next = null;
                let item = list;

                while (item !== null) {
                    next = item.prev;
                    item.prev = prev;
                    prev = item;
                    item = next;
                }

                return prev;
            }

            function areStringsEqualCaseInsensitive(testStr, referenceStr) {
                if (testStr.length !== referenceStr.length) {
                    return false;
                }

                for (let i = 0; i < testStr.length; i++) {
                    const referenceCode = referenceStr.charCodeAt(i);
                    let testCode = testStr.charCodeAt(i);

                    // testCode.toLowerCase() for U+0041 LATIN CAPITAL LETTER A (A) .. U+005A LATIN CAPITAL LETTER Z (Z).
                    if (testCode >= 0x0041 && testCode <= 0x005A) {
                        testCode = testCode | 32;
                    }

                    if (testCode !== referenceCode) {
                        return false;
                    }
                }

                return true;
            }

            function isContextEdgeDelim(token) {
                if (token.type !== Delim) {
                    return false;
                }

                // Fix matching for unicode-range: U+30??, U+FF00-FF9F
                // Probably we need to check out previous match instead
                return token.value !== '?';
            }

            function isCommaContextStart(token) {
                if (token === null) {
                    return true;
                }

                return (
                    token.type === Comma ||
                    token.type === Function$1 ||
                    token.type === LeftParenthesis ||
                    token.type === LeftSquareBracket ||
                    token.type === LeftCurlyBracket ||
                    isContextEdgeDelim(token)
                );
            }

            function isCommaContextEnd(token) {
                if (token === null) {
                    return true;
                }

                return (
                    token.type === RightParenthesis ||
                    token.type === RightSquareBracket ||
                    token.type === RightCurlyBracket ||
                    token.type === Delim
                );
            }

            function internalMatch(tokens, state, syntaxes) {
                function moveToNextToken() {
                    do {
                        tokenIndex++;
                        token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;
                    } while (token !== null && (token.type === WhiteSpace$1 || token.type === Comment$1));
                }

                function getNextToken(offset) {
                    const nextIndex = tokenIndex + offset;

                    return nextIndex < tokens.length ? tokens[nextIndex] : null;
                }

                function stateSnapshotFromSyntax(nextState, prev) {
                    return {
                        nextState,
                        matchStack,
                        syntaxStack,
                        thenStack,
                        tokenIndex,
                        prev
                    };
                }

                function pushThenStack(nextState) {
                    thenStack = {
                        nextState,
                        matchStack,
                        syntaxStack,
                        prev: thenStack
                    };
                }

                function pushElseStack(nextState) {
                    elseStack = stateSnapshotFromSyntax(nextState, elseStack);
                }

                function addTokenToMatch() {
                    matchStack = {
                        type: TOKEN,
                        syntax: state.syntax,
                        token,
                        prev: matchStack
                    };

                    moveToNextToken();
                    syntaxStash = null;

                    if (tokenIndex > longestMatch) {
                        longestMatch = tokenIndex;
                    }
                }

                function openSyntax() {
                    syntaxStack = {
                        syntax: state.syntax,
                        opts: state.syntax.opts || (syntaxStack !== null && syntaxStack.opts) || null,
                        prev: syntaxStack
                    };

                    matchStack = {
                        type: OPEN_SYNTAX,
                        syntax: state.syntax,
                        token: matchStack.token,
                        prev: matchStack
                    };
                }

                function closeSyntax() {
                    if (matchStack.type === OPEN_SYNTAX) {
                        matchStack = matchStack.prev;
                    } else {
                        matchStack = {
                            type: CLOSE_SYNTAX,
                            syntax: syntaxStack.syntax,
                            token: matchStack.token,
                            prev: matchStack
                        };
                    }

                    syntaxStack = syntaxStack.prev;
                }

                let syntaxStack = null;
                let thenStack = null;
                let elseStack = null;

                // null – stashing allowed, nothing stashed
                // false – stashing disabled, nothing stashed
                // anithing else – fail stashable syntaxes, some syntax stashed
                let syntaxStash = null;

                let iterationCount = 0; // count iterations and prevent infinite loop
                let exitReason = null;

                let token = null;
                let tokenIndex = -1;
                let longestMatch = 0;
                let matchStack = {
                    type: STUB,
                    syntax: null,
                    token: null,
                    prev: null
                };

                moveToNextToken();

                while (exitReason === null && ++iterationCount < ITERATION_LIMIT) {
                    // function mapList(list, fn) {
                    //     const result = [];
                    //     while (list) {
                    //         result.unshift(fn(list));
                    //         list = list.prev;
                    //     }
                    //     return result;
                    // }
                    // console.log('--\n',
                    //     '#' + iterationCount,
                    //     require('util').inspect({
                    //         match: mapList(matchStack, x => x.type === TOKEN ? x.token && x.token.value : x.syntax ? ({ [OPEN_SYNTAX]: '<', [CLOSE_SYNTAX]: '</' }[x.type] || x.type) + '!' + x.syntax.name : null),
                    //         token: token && token.value,
                    //         tokenIndex,
                    //         syntax: syntax.type + (syntax.id ? ' #' + syntax.id : '')
                    //     }, { depth: null })
                    // );
                    switch (state.type) {
                        case 'Match':
                            if (thenStack === null) {
                                // turn to MISMATCH when some tokens left unmatched
                                if (token !== null) {
                                    // doesn't mismatch if just one token left and it's an IE hack
                                    if (tokenIndex !== tokens.length - 1 || (token.value !== '\\0' && token.value !== '\\9')) {
                                        state = MISMATCH;
                                        break;
                                    }
                                }

                                // break the main loop, return a result - MATCH
                                exitReason = EXIT_REASON_MATCH;
                                break;
                            }

                            // go to next syntax (`then` branch)
                            state = thenStack.nextState;

                            // check match is not empty
                            if (state === DISALLOW_EMPTY) {
                                if (thenStack.matchStack === matchStack) {
                                    state = MISMATCH;
                                    break;
                                } else {
                                    state = MATCH;
                                }
                            }

                            // close syntax if needed
                            while (thenStack.syntaxStack !== syntaxStack) {
                                closeSyntax();
                            }

                            // pop stack
                            thenStack = thenStack.prev;
                            break;

                        case 'Mismatch':
                            // when some syntax is stashed
                            if (syntaxStash !== null && syntaxStash !== false) {
                                // there is no else branches or a branch reduce match stack
                                if (elseStack === null || tokenIndex > elseStack.tokenIndex) {
                                    // restore state from the stash
                                    elseStack = syntaxStash;
                                    syntaxStash = false; // disable stashing
                                }
                            } else if (elseStack === null) {
                                // no else branches -> break the main loop
                                // return a result - MISMATCH
                                exitReason = EXIT_REASON_MISMATCH;
                                break;
                            }

                            // go to next syntax (`else` branch)
                            state = elseStack.nextState;

                            // restore all the rest stack states
                            thenStack = elseStack.thenStack;
                            syntaxStack = elseStack.syntaxStack;
                            matchStack = elseStack.matchStack;
                            tokenIndex = elseStack.tokenIndex;
                            token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;

                            // pop stack
                            elseStack = elseStack.prev;
                            break;

                        case 'MatchGraph':
                            state = state.match;
                            break;

                        case 'If':
                            // IMPORTANT: else stack push must go first,
                            // since it stores the state of thenStack before changes
                            if (state.else !== MISMATCH) {
                                pushElseStack(state.else);
                            }

                            if (state.then !== MATCH) {
                                pushThenStack(state.then);
                            }

                            state = state.match;
                            break;

                        case 'MatchOnce':
                            state = {
                                type: 'MatchOnceBuffer',
                                syntax: state,
                                index: 0,
                                mask: 0
                            };
                            break;

                        case 'MatchOnceBuffer': {
                            const terms = state.syntax.terms;

                            if (state.index === terms.length) {
                                // no matches at all or it's required all terms to be matched
                                if (state.mask === 0 || state.syntax.all) {
                                    state = MISMATCH;
                                    break;
                                }

                                // a partial match is ok
                                state = MATCH;
                                break;
                            }

                            // all terms are matched
                            if (state.mask === (1 << terms.length) - 1) {
                                state = MATCH;
                                break;
                            }

                            for (; state.index < terms.length; state.index++) {
                                const matchFlag = 1 << state.index;

                                if ((state.mask & matchFlag) === 0) {
                                    // IMPORTANT: else stack push must go first,
                                    // since it stores the state of thenStack before changes
                                    pushElseStack(state);
                                    pushThenStack({
                                        type: 'AddMatchOnce',
                                        syntax: state.syntax,
                                        mask: state.mask | matchFlag
                                    });

                                    // match
                                    state = terms[state.index++];
                                    break;
                                }
                            }
                            break;
                        }

                        case 'AddMatchOnce':
                            state = {
                                type: 'MatchOnceBuffer',
                                syntax: state.syntax,
                                index: 0,
                                mask: state.mask
                            };
                            break;

                        case 'Enum':
                            if (token !== null) {
                                let name = token.value.toLowerCase();

                                // drop \0 and \9 hack from keyword name
                                if (name.indexOf('\\') !== -1) {
                                    name = name.replace(/\\[09].*$/, '');
                                }

                                if (hasOwnProperty$3.call(state.map, name)) {
                                    state = state.map[name];
                                    break;
                                }
                            }

                            state = MISMATCH;
                            break;

                        case 'Generic': {
                            const opts = syntaxStack !== null ? syntaxStack.opts : null;
                            const lastTokenIndex = tokenIndex + Math.floor(state.fn(token, getNextToken, opts));

                            if (!isNaN(lastTokenIndex) && lastTokenIndex > tokenIndex) {
                                while (tokenIndex < lastTokenIndex) {
                                    addTokenToMatch();
                                }

                                state = MATCH;
                            } else {
                                state = MISMATCH;
                            }

                            break;
                        }

                        case 'Type':
                        case 'Property': {
                            const syntaxDict = state.type === 'Type' ? 'types' : 'properties';
                            const dictSyntax = hasOwnProperty$3.call(syntaxes, syntaxDict) ? syntaxes[syntaxDict][state.name] : null;

                            if (!dictSyntax || !dictSyntax.match) {
                                throw new Error(
                                    'Bad syntax reference: ' +
                                    (state.type === 'Type'
                                        ? '<' + state.name + '>'
                                        : '<\'' + state.name + '\'>')
                                );
                            }

                            // stash a syntax for types with low priority
                            if (syntaxStash !== false && token !== null && state.type === 'Type') {
                                const lowPriorityMatching =
                                    // https://drafts.csswg.org/css-values-4/#custom-idents
                                    // When parsing positionally-ambiguous keywords in a property value, a <custom-ident> production
                                    // can only claim the keyword if no other unfulfilled production can claim it.
                                    (state.name === 'custom-ident' && token.type === Ident) ||

                                    // https://drafts.csswg.org/css-values-4/#lengths
                                    // ... if a `0` could be parsed as either a <number> or a <length> in a property (such as line-height),
                                    // it must parse as a <number>
                                    (state.name === 'length' && token.value === '0');

                                if (lowPriorityMatching) {
                                    if (syntaxStash === null) {
                                        syntaxStash = stateSnapshotFromSyntax(state, elseStack);
                                    }

                                    state = MISMATCH;
                                    break;
                                }
                            }

                            openSyntax();
                            state = dictSyntax.match;
                            break;
                        }

                        case 'Keyword': {
                            const name = state.name;

                            if (token !== null) {
                                let keywordName = token.value;

                                // drop \0 and \9 hack from keyword name
                                if (keywordName.indexOf('\\') !== -1) {
                                    keywordName = keywordName.replace(/\\[09].*$/, '');
                                }

                                if (areStringsEqualCaseInsensitive(keywordName, name)) {
                                    addTokenToMatch();
                                    state = MATCH;
                                    break;
                                }
                            }

                            state = MISMATCH;
                            break;
                        }

                        case 'AtKeyword':
                        case 'Function':
                            if (token !== null && areStringsEqualCaseInsensitive(token.value, state.name)) {
                                addTokenToMatch();
                                state = MATCH;
                                break;
                            }

                            state = MISMATCH;
                            break;

                        case 'Token':
                            if (token !== null && token.value === state.value) {
                                addTokenToMatch();
                                state = MATCH;
                                break;
                            }

                            state = MISMATCH;
                            break;

                        case 'Comma':
                            if (token !== null && token.type === Comma) {
                                if (isCommaContextStart(matchStack.token)) {
                                    state = MISMATCH;
                                } else {
                                    addTokenToMatch();
                                    state = isCommaContextEnd(token) ? MISMATCH : MATCH;
                                }
                            } else {
                                state = isCommaContextStart(matchStack.token) || isCommaContextEnd(token) ? MATCH : MISMATCH;
                            }

                            break;

                        case 'String':
                            let string = '';
                            let lastTokenIndex = tokenIndex;

                            for (; lastTokenIndex < tokens.length && string.length < state.value.length; lastTokenIndex++) {
                                string += tokens[lastTokenIndex].value;
                            }

                            if (areStringsEqualCaseInsensitive(string, state.value)) {
                                while (tokenIndex < lastTokenIndex) {
                                    addTokenToMatch();
                                }

                                state = MATCH;
                            } else {
                                state = MISMATCH;
                            }

                            break;

                        default:
                            throw new Error('Unknown node type: ' + state.type);
                    }
                }

                switch (exitReason) {
                    case null:
                        console.warn('[csstree-match] BREAK after ' + ITERATION_LIMIT + ' iterations');
                        exitReason = EXIT_REASON_ITERATION_LIMIT;
                        matchStack = null;
                        break;

                    case EXIT_REASON_MATCH:
                        while (syntaxStack !== null) {
                            closeSyntax();
                        }
                        break;

                    default:
                        matchStack = null;
                }

                return {
                    tokens,
                    reason: exitReason,
                    iterations: iterationCount,
                    match: matchStack,
                    longestMatch
                };
            }

            function matchAsTree(tokens, matchGraph, syntaxes) {
                const matchResult = internalMatch(tokens, matchGraph, syntaxes || {});

                if (matchResult.match === null) {
                    return matchResult;
                }

                let item = matchResult.match;
                let host = matchResult.match = {
                    syntax: matchGraph.syntax || null,
                    match: []
                };
                const hostStack = [host];

                // revert a list and start with 2nd item since 1st is a stub item
                item = reverseList(item).prev;

                // build a tree
                while (item !== null) {
                    switch (item.type) {
                        case OPEN_SYNTAX:
                            host.match.push(host = {
                                syntax: item.syntax,
                                match: []
                            });
                            hostStack.push(host);
                            break;

                        case CLOSE_SYNTAX:
                            hostStack.pop();
                            host = hostStack[hostStack.length - 1];
                            break;

                        default:
                            host.match.push({
                                syntax: item.syntax || null,
                                token: item.token.value,
                                node: item.token.node
                            });
                    }

                    item = item.prev;
                }

                return matchResult;
            }

            function getTrace(node) {
                function shouldPutToTrace(syntax) {
                    if (syntax === null) {
                        return false;
                    }

                    return (
                        syntax.type === 'Type' ||
                        syntax.type === 'Property' ||
                        syntax.type === 'Keyword'
                    );
                }

                function hasMatch(matchNode) {
                    if (Array.isArray(matchNode.match)) {
                        // use for-loop for better perfomance
                        for (let i = 0; i < matchNode.match.length; i++) {
                            if (hasMatch(matchNode.match[i])) {
                                if (shouldPutToTrace(matchNode.syntax)) {
                                    result.unshift(matchNode.syntax);
                                }

                                return true;
                            }
                        }
                    } else if (matchNode.node === node) {
                        result = shouldPutToTrace(matchNode.syntax)
                            ? [matchNode.syntax]
                            : [];

                        return true;
                    }

                    return false;
                }

                let result = null;

                if (this.matched !== null) {
                    hasMatch(this.matched);
                }

                return result;
            }

            function isType(node, type) {
                return testNode(this, node, match => match.type === 'Type' && match.name === type);
            }

            function isProperty(node, property) {
                return testNode(this, node, match => match.type === 'Property' && match.name === property);
            }

            function isKeyword(node) {
                return testNode(this, node, match => match.type === 'Keyword');
            }

            function testNode(match, node, fn) {
                const trace = getTrace.call(match, node);

                if (trace === null) {
                    return false;
                }

                return trace.some(fn);
            }

            var trace = /*#__PURE__*/Object.freeze({
                __proto__: null,
                getTrace: getTrace,
                isType: isType,
                isProperty: isProperty,
                isKeyword: isKeyword
            });

            function getFirstMatchNode(matchNode) {
                if ('node' in matchNode) {
                    return matchNode.node;
                }

                return getFirstMatchNode(matchNode.match[0]);
            }

            function getLastMatchNode(matchNode) {
                if ('node' in matchNode) {
                    return matchNode.node;
                }

                return getLastMatchNode(matchNode.match[matchNode.match.length - 1]);
            }

            function matchFragments(lexer, ast, match, type, name) {
                function findFragments(matchNode) {
                    if (matchNode.syntax !== null &&
                        matchNode.syntax.type === type &&
                        matchNode.syntax.name === name) {
                        const start = getFirstMatchNode(matchNode);
                        const end = getLastMatchNode(matchNode);

                        lexer.syntax.walk(ast, function(node, item, list) {
                            if (node === start) {
                                const nodes = new List();

                                do {
                                    nodes.appendData(item.data);

                                    if (item.data === end) {
                                        break;
                                    }

                                    item = item.next;
                                } while (item !== null);

                                fragments.push({
                                    parent: list,
                                    nodes
                                });
                            }
                        });
                    }

                    if (Array.isArray(matchNode.match)) {
                        matchNode.match.forEach(findFragments);
                    }
                }

                const fragments = [];

                if (match.matched !== null) {
                    findFragments(match.matched);
                }

                return fragments;
            }

            const { hasOwnProperty: hasOwnProperty$2 } = Object.prototype;

            function isValidNumber(value) {
                // Number.isInteger(value) && value >= 0
                return (
                    typeof value === 'number' &&
                    isFinite(value) &&
                    Math.floor(value) === value &&
                    value >= 0
                );
            }

            function isValidLocation(loc) {
                return (
                    Boolean(loc) &&
                    isValidNumber(loc.offset) &&
                    isValidNumber(loc.line) &&
                    isValidNumber(loc.column)
                );
            }

            function createNodeStructureChecker(type, fields) {
                return function checkNode(node, warn) {
                    if (!node || node.constructor !== Object) {
                        return warn(node, 'Type of node should be an Object');
                    }

                    for (let key in node) {
                        let valid = true;

                        if (hasOwnProperty$2.call(node, key) === false) {
                            continue;
                        }

                        if (key === 'type') {
                            if (node.type !== type) {
                                warn(node, 'Wrong node type `' + node.type + '`, expected `' + type + '`');
                            }
                        } else if (key === 'loc') {
                            if (node.loc === null) {
                                continue;
                            } else if (node.loc && node.loc.constructor === Object) {
                                if (typeof node.loc.source !== 'string') {
                                    key += '.source';
                                } else if (!isValidLocation(node.loc.start)) {
                                    key += '.start';
                                } else if (!isValidLocation(node.loc.end)) {
                                    key += '.end';
                                } else {
                                    continue;
                                }
                            }

                            valid = false;
                        } else if (fields.hasOwnProperty(key)) {
                            valid = false;

                            for (let i = 0; !valid && i < fields[key].length; i++) {
                                const fieldType = fields[key][i];

                                switch (fieldType) {
                                    case String:
                                        valid = typeof node[key] === 'string';
                                        break;

                                    case Boolean:
                                        valid = typeof node[key] === 'boolean';
                                        break;

                                    case null:
                                        valid = node[key] === null;
                                        break;

                                    default:
                                        if (typeof fieldType === 'string') {
                                            valid = node[key] && node[key].type === fieldType;
                                        } else if (Array.isArray(fieldType)) {
                                            valid = node[key] instanceof List;
                                        }
                                }
                            }
                        } else {
                            warn(node, 'Unknown field `' + key + '` for ' + type + ' node type');
                        }

                        if (!valid) {
                            warn(node, 'Bad value for `' + type + '.' + key + '`');
                        }
                    }

                    for (const key in fields) {
                        if (hasOwnProperty$2.call(fields, key) &&
                            hasOwnProperty$2.call(node, key) === false) {
                            warn(node, 'Field `' + type + '.' + key + '` is missed');
                        }
                    }
                };
            }

            function processStructure(name, nodeType) {
                const structure = nodeType.structure;
                const fields = {
                    type: String,
                    loc: true
                };
                const docs = {
                    type: '"' + name + '"'
                };

                for (const key in structure) {
                    if (hasOwnProperty$2.call(structure, key) === false) {
                        continue;
                    }

                    const docsTypes = [];
                    const fieldTypes = fields[key] = Array.isArray(structure[key])
                        ? structure[key].slice()
                        : [structure[key]];

                    for (let i = 0; i < fieldTypes.length; i++) {
                        const fieldType = fieldTypes[i];
                        if (fieldType === String || fieldType === Boolean) {
                            docsTypes.push(fieldType.name);
                        } else if (fieldType === null) {
                            docsTypes.push('null');
                        } else if (typeof fieldType === 'string') {
                            docsTypes.push('<' + fieldType + '>');
                        } else if (Array.isArray(fieldType)) {
                            docsTypes.push('List'); // TODO: use type enum
                        } else {
                            throw new Error('Wrong value `' + fieldType + '` in `' + name + '.' + key + '` structure definition');
                        }
                    }

                    docs[key] = docsTypes.join(' | ');
                }

                return {
                    docs,
                    check: createNodeStructureChecker(name, fields)
                };
            }

            function getStructureFromConfig(config) {
                const structure = {};

                if (config.node) {
                    for (const name in config.node) {
                        if (hasOwnProperty$2.call(config.node, name)) {
                            const nodeType = config.node[name];

                            if (nodeType.structure) {
                                structure[name] = processStructure(name, nodeType);
                            } else {
                                throw new Error('Missed `structure` field in `' + name + '` node type definition');
                            }
                        }
                    }
                }

                return structure;
            }

            const cssWideKeywords = buildMatchGraph('inherit | initial | unset');
            const cssWideKeywordsWithExpression = buildMatchGraph('inherit | initial | unset | <-ms-legacy-expression>');

            function dumpMapSyntax(map, compact, syntaxAsAst) {
                const result = {};

                for (const name in map) {
                    if (map[name].syntax) {
                        result[name] = syntaxAsAst
                            ? map[name].syntax
                            : generate$F(map[name].syntax, { compact });
                    }
                }

                return result;
            }

            function dumpAtruleMapSyntax(map, compact, syntaxAsAst) {
                const result = {};

                for (const [name, atrule] of Object.entries(map)) {
                    result[name] = {
                        prelude: atrule.prelude && (
                            syntaxAsAst
                                ? atrule.prelude.syntax
                                : generate$F(atrule.prelude.syntax, { compact })
                        ),
                        descriptors: atrule.descriptors && dumpMapSyntax(atrule.descriptors, compact, syntaxAsAst)
                    };
                }

                return result;
            }

            function valueHasVar(tokens) {
                for (let i = 0; i < tokens.length; i++) {
                    if (tokens[i].value.toLowerCase() === 'var(') {
                        return true;
                    }
                }

                return false;
            }

            function buildMatchResult(matched, error, iterations) {
                return {
                    matched,
                    iterations,
                    error,
                    ...trace
                };
            }

            function matchSyntax(lexer, syntax, value, useCommon) {
                const tokens = prepareTokens(value, lexer.syntax);
                let result;

                if (valueHasVar(tokens)) {
                    return buildMatchResult(null, new Error('Matching for a tree with var() is not supported'));
                }

                if (useCommon) {
                    result = matchAsTree(tokens, lexer.valueCommonSyntax, lexer);
                }

                if (!useCommon || !result.match) {
                    result = matchAsTree(tokens, syntax.match, lexer);
                    if (!result.match) {
                        return buildMatchResult(
                            null,
                            new SyntaxMatchError(result.reason, syntax.syntax, value, result),
                            result.iterations
                        );
                    }
                }

                return buildMatchResult(result.match, null, result.iterations);
            }

            class Lexer {
                constructor(config, syntax, structure) {
                    this.valueCommonSyntax = cssWideKeywords;
                    this.syntax = syntax;
                    this.generic = false;
                    this.atrules = Object.create(null);
                    this.properties = Object.create(null);
                    this.types = Object.create(null);
                    this.structure = structure || getStructureFromConfig(config);

                    if (config) {
                        if (config.types) {
                            for (const name in config.types) {
                                this.addType_(name, config.types[name]);
                            }
                        }

                        if (config.generic) {
                            this.generic = true;
                            for (const name in generic) {
                                this.addType_(name, generic[name]);
                            }
                        }

                        if (config.atrules) {
                            for (const name in config.atrules) {
                                this.addAtrule_(name, config.atrules[name]);
                            }
                        }

                        if (config.properties) {
                            for (const name in config.properties) {
                                this.addProperty_(name, config.properties[name]);
                            }
                        }
                    }
                }

                checkStructure(ast) {
                    function collectWarning(node, message) {
                        warns.push({ node, message });
                    }

                    const structure = this.structure;
                    const warns = [];

                    this.syntax.walk(ast, function(node) {
                        if (structure.hasOwnProperty(node.type)) {
                            structure[node.type].check(node, collectWarning);
                        } else {
                            collectWarning(node, 'Unknown node type `' + node.type + '`');
                        }
                    });

                    return warns.length ? warns : false;
                }

                createDescriptor(syntax, type, name, parent = null) {
                    const ref = {
                        type,
                        name
                    };
                    const descriptor = {
                        type,
                        name,
                        parent,
                        serializable: typeof syntax === 'string' || (syntax && typeof syntax.type === 'string'),
                        syntax: null,
                        match: null
                    };

                    if (typeof syntax === 'function') {
                        descriptor.match = buildMatchGraph(syntax, ref);
                    } else {
                        if (typeof syntax === 'string') {
                            // lazy parsing on first access
                            Object.defineProperty(descriptor, 'syntax', {
                                get() {
                                    Object.defineProperty(descriptor, 'syntax', {
                                        value: parse$F(syntax)
                                    });

                                    return descriptor.syntax;
                                }
                            });
                        } else {
                            descriptor.syntax = syntax;
                        }

                        // lazy graph build on first access
                        Object.defineProperty(descriptor, 'match', {
                            get() {
                                Object.defineProperty(descriptor, 'match', {
                                    value: buildMatchGraph(descriptor.syntax, ref)
                                });

                                return descriptor.match;
                            }
                        });
                    }

                    return descriptor;
                }
                addAtrule_(name, syntax) {
                    if (!syntax) {
                        return;
                    }

                    this.atrules[name] = {
                        type: 'Atrule',
                        name: name,
                        prelude: syntax.prelude ? this.createDescriptor(syntax.prelude, 'AtrulePrelude', name) : null,
                        descriptors: syntax.descriptors
                            ? Object.keys(syntax.descriptors).reduce(
                                (map, descName) => {
                                    map[descName] = this.createDescriptor(syntax.descriptors[descName], 'AtruleDescriptor', descName, name);
                                    return map;
                                },
                                Object.create(null)
                            )
                            : null
                    };
                }
                addProperty_(name, syntax) {
                    if (!syntax) {
                        return;
                    }

                    this.properties[name] = this.createDescriptor(syntax, 'Property', name);
                }
                addType_(name, syntax) {
                    if (!syntax) {
                        return;
                    }

                    this.types[name] = this.createDescriptor(syntax, 'Type', name);

                    if (syntax === generic['-ms-legacy-expression']) {
                        this.valueCommonSyntax = cssWideKeywordsWithExpression;
                    }
                }

                checkAtruleName(atruleName) {
                    if (!this.getAtrule(atruleName)) {
                        return new SyntaxReferenceError('Unknown at-rule', '@' + atruleName);
                    }
                }
                checkAtrulePrelude(atruleName, prelude) {
                    const error = this.checkAtruleName(atruleName);

                    if (error) {
                        return error;
                    }

                    const atrule = this.getAtrule(atruleName);

                    if (!atrule.prelude && prelude) {
                        return new SyntaxError('At-rule `@' + atruleName + '` should not contain a prelude');
                    }

                    if (atrule.prelude && !prelude) {
                        return new SyntaxError('At-rule `@' + atruleName + '` should contain a prelude');
                    }
                }
                checkAtruleDescriptorName(atruleName, descriptorName) {
                    const error = this.checkAtruleName(atruleName);

                    if (error) {
                        return error;
                    }

                    const atrule = this.getAtrule(atruleName);
                    const descriptor = keyword(descriptorName);

                    if (!atrule.descriptors) {
                        return new SyntaxError('At-rule `@' + atruleName + '` has no known descriptors');
                    }

                    if (!atrule.descriptors[descriptor.name] &&
                        !atrule.descriptors[descriptor.basename]) {
                        return new SyntaxReferenceError('Unknown at-rule descriptor', descriptorName);
                    }
                }
                checkPropertyName(propertyName) {
                    if (!this.getProperty(propertyName)) {
                        return new SyntaxReferenceError('Unknown property', propertyName);
                    }
                }

                matchAtrulePrelude(atruleName, prelude) {
                    const error = this.checkAtrulePrelude(atruleName, prelude);

                    if (error) {
                        return buildMatchResult(null, error);
                    }

                    if (!prelude) {
                        return buildMatchResult(null, null);
                    }

                    return matchSyntax(this, this.getAtrule(atruleName).prelude, prelude, false);
                }
                matchAtruleDescriptor(atruleName, descriptorName, value) {
                    const error = this.checkAtruleDescriptorName(atruleName, descriptorName);

                    if (error) {
                        return buildMatchResult(null, error);
                    }

                    const atrule = this.getAtrule(atruleName);
                    const descriptor = keyword(descriptorName);

                    return matchSyntax(this, atrule.descriptors[descriptor.name] || atrule.descriptors[descriptor.basename], value, false);
                }
                matchDeclaration(node) {
                    if (node.type !== 'Declaration') {
                        return buildMatchResult(null, new Error('Not a Declaration node'));
                    }

                    return this.matchProperty(node.property, node.value);
                }
                matchProperty(propertyName, value) {
                    // don't match syntax for a custom property at the moment
                    if (property(propertyName).custom) {
                        return buildMatchResult(null, new Error('Lexer matching doesn\'t applicable for custom properties'));
                    }

                    const error = this.checkPropertyName(propertyName);

                    if (error) {
                        return buildMatchResult(null, error);
                    }

                    return matchSyntax(this, this.getProperty(propertyName), value, true);
                }
                matchType(typeName, value) {
                    const typeSyntax = this.getType(typeName);

                    if (!typeSyntax) {
                        return buildMatchResult(null, new SyntaxReferenceError('Unknown type', typeName));
                    }

                    return matchSyntax(this, typeSyntax, value, false);
                }
                match(syntax, value) {
                    if (typeof syntax !== 'string' && (!syntax || !syntax.type)) {
                        return buildMatchResult(null, new SyntaxReferenceError('Bad syntax'));
                    }

                    if (typeof syntax === 'string' || !syntax.match) {
                        syntax = this.createDescriptor(syntax, 'Type', 'anonymous');
                    }

                    return matchSyntax(this, syntax, value, false);
                }

                findValueFragments(propertyName, value, type, name) {
                    return matchFragments(this, value, this.matchProperty(propertyName, value), type, name);
                }
                findDeclarationValueFragments(declaration, type, name) {
                    return matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);
                }
                findAllFragments(ast, type, name) {
                    const result = [];

                    this.syntax.walk(ast, {
                        visit: 'Declaration',
                        enter: (declaration) => {
                            result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));
                        }
                    });

                    return result;
                }

                getAtrule(atruleName, fallbackBasename = true) {
                    const atrule = keyword(atruleName);
                    const atruleEntry = atrule.vendor && fallbackBasename
                        ? this.atrules[atrule.name] || this.atrules[atrule.basename]
                        : this.atrules[atrule.name];

                    return atruleEntry || null;
                }
                getAtrulePrelude(atruleName, fallbackBasename = true) {
                    const atrule = this.getAtrule(atruleName, fallbackBasename);

                    return atrule && atrule.prelude || null;
                }
                getAtruleDescriptor(atruleName, name) {
                    return this.atrules.hasOwnProperty(atruleName) && this.atrules.declarators
                        ? this.atrules[atruleName].declarators[name] || null
                        : null;
                }
                getProperty(propertyName, fallbackBasename = true) {
                    const property$1 = property(propertyName);
                    const propertyEntry = property$1.vendor && fallbackBasename
                        ? this.properties[property$1.name] || this.properties[property$1.basename]
                        : this.properties[property$1.name];

                    return propertyEntry || null;
                }
                getType(name) {
                    return hasOwnProperty.call(this.types, name) ? this.types[name] : null;
                }

                validate() {
                    function validate(syntax, name, broken, descriptor) {
                        if (broken.has(name)) {
                            return broken.get(name);
                        }

                        broken.set(name, false);
                        if (descriptor.syntax !== null) {
                            walk$1(descriptor.syntax, function(node) {
                                if (node.type !== 'Type' && node.type !== 'Property') {
                                    return;
                                }

                                const map = node.type === 'Type' ? syntax.types : syntax.properties;
                                const brokenMap = node.type === 'Type' ? brokenTypes : brokenProperties;

                                if (!hasOwnProperty.call(map, node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {
                                    broken.set(name, true);
                                }
                            }, this);
                        }
                    }

                    let brokenTypes = new Map();
                    let brokenProperties = new Map();

                    for (const key in this.types) {
                        validate(this, key, brokenTypes, this.types[key]);
                    }

                    for (const key in this.properties) {
                        validate(this, key, brokenProperties, this.properties[key]);
                    }

                    brokenTypes = [...brokenTypes.keys()].filter(name => brokenTypes.get(name));
                    brokenProperties = [...brokenProperties.keys()].filter(name => brokenProperties.get(name));

                    if (brokenTypes.length || brokenProperties.length) {
                        return {
                            types: brokenTypes,
                            properties: brokenProperties
                        };
                    }

                    return null;
                }
                dump(syntaxAsAst, pretty) {
                    return {
                        generic: this.generic,
                        types: dumpMapSyntax(this.types, !pretty, syntaxAsAst),
                        properties: dumpMapSyntax(this.properties, !pretty, syntaxAsAst),
                        atrules: dumpAtruleMapSyntax(this.atrules, !pretty, syntaxAsAst)
                    };
                }
                toString() {
                    return JSON.stringify(this.dump());
                }
            }

            const { hasOwnProperty: hasOwnProperty$1 } = Object.prototype;
            const shape = {
                generic: true,
                types: appendOrAssign,
                atrules: {
                    prelude: appendOrAssignOrNull,
                    descriptors: appendOrAssignOrNull
                },
                properties: appendOrAssign,
                parseContext: assign,
                scope: deepAssign,
                atrule: ['parse'],
                pseudo: ['parse'],
                node: ['name', 'structure', 'parse', 'generate', 'walkContext']
            };

            function isObject(value) {
                return value && value.constructor === Object;
            }

            function copy(value) {
                return isObject(value)
                    ? { ...value }
                    : value;
            }

            function assign(dest, src) {
                return Object.assign(dest, src);
            }

            function deepAssign(dest, src) {
                for (const key in src) {
                    if (hasOwnProperty$1.call(src, key)) {
                        if (isObject(dest[key])) {
                            deepAssign(dest[key], copy(src[key]));
                        } else {
                            dest[key] = copy(src[key]);
                        }
                    }
                }

                return dest;
            }

            function append(a, b) {
                if (typeof b === 'string' && /^\s*\|/.test(b)) {
                    return typeof a === 'string'
                        ? a + b
                        : b.replace(/^\s*\|\s*/, '');
                }

                return b || null;
            }

            function appendOrAssign(a, b) {
                if (typeof b === 'string') {
                    return append(a, b);
                }

                const result = { ...a };
                for (let key in b) {
                    if (hasOwnProperty$1.call(b, key)) {
                        result[key] = append(hasOwnProperty$1.call(a, key) ? a[key] : undefined, b[key]);
                    }
                }

                return result;
            }

            function appendOrAssignOrNull(a, b) {
                const result = appendOrAssign(a, b);

                return !isObject(result) || Object.keys(result).length
                    ? result
                    : null;
            }

            function mix(dest, src, shape) {
                for (const key in shape) {
                    if (hasOwnProperty$1.call(shape, key) === false) {
                        continue;
                    }

                    if (shape[key] === true) {
                        if (key in src) {
                            if (hasOwnProperty$1.call(src, key)) {
                                dest[key] = copy(src[key]);
                            }
                        }
                    } else if (shape[key]) {
                        if (typeof shape[key] === 'function') {
                            const fn = shape[key];
                            dest[key] = fn({}, dest[key]);
                            dest[key] = fn(dest[key] || {}, src[key]);
                        } else if (isObject(shape[key])) {
                            const result = {};

                            for (let name in dest[key]) {
                                result[name] = mix({}, dest[key][name], shape[key]);
                            }

                            for (let name in src[key]) {
                                result[name] = mix(result[name] || {}, src[key][name], shape[key]);
                            }

                            dest[key] = result;
                        } else if (Array.isArray(shape[key])) {
                            const res = {};
                            const innerShape = shape[key].reduce(function(s, k) {
                                s[k] = true;
                                return s;
                            }, {});

                            for (const [name, value] of Object.entries(dest[key] || {})) {
                                res[name] = {};
                                if (value) {
                                    mix(res[name], value, innerShape);
                                }
                            }

                            for (const name in src[key]) {
                                if (hasOwnProperty$1.call(src[key], name)) {
                                    if (!res[name]) {
                                        res[name] = {};
                                    }

                                    if (src[key] && src[key][name]) {
                                        mix(res[name], src[key][name], innerShape);
                                    }
                                }
                            }

                            dest[key] = res;
                        }
                    }
                }
                return dest;
            }

            var mix$1 = (dest, src) => mix(dest, src, shape);

            function createSyntax(config) {
                const parse = createParser(config);
                const walk = createWalker(config);
                const generate = createGenerator(config);
                const { fromPlainObject, toPlainObject } = createConvertor(walk);

                const syntax = {
                    lexer: null,
                    createLexer: config => new Lexer(config, syntax, syntax.lexer.structure),

                    tokenize: tokenize$1,
                    parse,
                    generate,

                    walk,
                    find: walk.find,
                    findLast: walk.findLast,
                    findAll: walk.findAll,

                    fromPlainObject,
                    toPlainObject,

                    fork(extension) {
                        const base = mix$1({}, config); // copy of config

                        return createSyntax(
                            typeof extension === 'function'
                                ? extension(base, Object.assign)
                                : mix$1(base, extension)
                        );
                    }
                };

                syntax.lexer = new Lexer({
                    generic: true,
                    types: config.types,
                    atrules: config.atrules,
                    properties: config.properties,
                    node: config.node
                }, syntax);

                return syntax;
            }
            var createSyntax$1 = config => createSyntax(mix$1({}, config));

            var definitions = {
                "generic": true,
                "types": {
                    "absolute-size": "xx-small|x-small|small|medium|large|x-large|xx-large|xxx-large",
                    "alpha-value": "<number>|<percentage>",
                    "angle-percentage": "<angle>|<percentage>",
                    "angular-color-hint": "<angle-percentage>",
                    "angular-color-stop": "<color>&&<color-stop-angle>?",
                    "angular-color-stop-list": "[<angular-color-stop> [, <angular-color-hint>]?]# , <angular-color-stop>",
                    "animateable-feature": "scroll-position|contents|<custom-ident>",
                    "attachment": "scroll|fixed|local",
                    "attr()": "attr( <attr-name> <type-or-unit>? [, <attr-fallback>]? )",
                    "attr-matcher": "['~'|'|'|'^'|'$'|'*']? '='",
                    "attr-modifier": "i|s",
                    "attribute-selector": "'[' <wq-name> ']'|'[' <wq-name> <attr-matcher> [<string-token>|<ident-token>] <attr-modifier>? ']'",
                    "auto-repeat": "repeat( [auto-fill|auto-fit] , [<line-names>? <fixed-size>]+ <line-names>? )",
                    "auto-track-list": "[<line-names>? [<fixed-size>|<fixed-repeat>]]* <line-names>? <auto-repeat> [<line-names>? [<fixed-size>|<fixed-repeat>]]* <line-names>?",
                    "baseline-position": "[first|last]? baseline",
                    "basic-shape": "<inset()>|<circle()>|<ellipse()>|<polygon()>|<path()>",
                    "bg-image": "none|<image>",
                    "bg-layer": "<bg-image>||<bg-position> [/ <bg-size>]?||<repeat-style>||<attachment>||<box>||<box>",
                    "bg-position": "[[left|center|right|top|bottom|<length-percentage>]|[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]|[center|[left|right] <length-percentage>?]&&[center|[top|bottom] <length-percentage>?]]",
                    "bg-size": "[<length-percentage>|auto]{1,2}|cover|contain",
                    "blur()": "blur( <length> )",
                    "blend-mode": "normal|multiply|screen|overlay|darken|lighten|color-dodge|color-burn|hard-light|soft-light|difference|exclusion|hue|saturation|color|luminosity",
                    "box": "border-box|padding-box|content-box",
                    "brightness()": "brightness( <number-percentage> )",
                    "calc()": "calc( <calc-sum> )",
                    "calc-sum": "<calc-product> [['+'|'-'] <calc-product>]*",
                    "calc-product": "<calc-value> ['*' <calc-value>|'/' <number>]*",
                    "calc-value": "<number>|<dimension>|<percentage>|( <calc-sum> )",
                    "cf-final-image": "<image>|<color>",
                    "cf-mixing-image": "<percentage>?&&<image>",
                    "circle()": "circle( [<shape-radius>]? [at <position>]? )",
                    "clamp()": "clamp( <calc-sum>#{3} )",
                    "class-selector": "'.' <ident-token>",
                    "clip-source": "<url>",
                    "color": "<rgb()>|<rgba()>|<hsl()>|<hsla()>|<hwb()>|<hex-color>|<named-color>|currentcolor|<deprecated-system-color>",
                    "color-stop": "<color-stop-length>|<color-stop-angle>",
                    "color-stop-angle": "<angle-percentage>{1,2}",
                    "color-stop-length": "<length-percentage>{1,2}",
                    "color-stop-list": "[<linear-color-stop> [, <linear-color-hint>]?]# , <linear-color-stop>",
                    "combinator": "'>'|'+'|'~'|['||']",
                    "common-lig-values": "[common-ligatures|no-common-ligatures]",
                    "compat-auto": "searchfield|textarea|push-button|slider-horizontal|checkbox|radio|square-button|menulist|listbox|meter|progress-bar|button",
                    "composite-style": "clear|copy|source-over|source-in|source-out|source-atop|destination-over|destination-in|destination-out|destination-atop|xor",
                    "compositing-operator": "add|subtract|intersect|exclude",
                    "compound-selector": "[<type-selector>? <subclass-selector>* [<pseudo-element-selector> <pseudo-class-selector>*]*]!",
                    "compound-selector-list": "<compound-selector>#",
                    "complex-selector": "<compound-selector> [<combinator>? <compound-selector>]*",
                    "complex-selector-list": "<complex-selector>#",
                    "conic-gradient()": "conic-gradient( [from <angle>]? [at <position>]? , <angular-color-stop-list> )",
                    "contextual-alt-values": "[contextual|no-contextual]",
                    "content-distribution": "space-between|space-around|space-evenly|stretch",
                    "content-list": "[<string>|contents|<image>|<counter>|<quote>|<target>|<leader()>]+",
                    "content-position": "center|start|end|flex-start|flex-end",
                    "content-replacement": "<image>",
                    "contrast()": "contrast( [<number-percentage>] )",
                    "counter": "<counter()>|<counters()>",
                    "counter()": "counter( <counter-name> , <counter-style>? )",
                    "counter-name": "<custom-ident>",
                    "counter-style": "<counter-style-name>|symbols( )",
                    "counter-style-name": "<custom-ident>",
                    "counters()": "counters( <counter-name> , <string> , <counter-style>? )",
                    "cross-fade()": "cross-fade( <cf-mixing-image> , <cf-final-image>? )",
                    "cubic-bezier-timing-function": "ease|ease-in|ease-out|ease-in-out|cubic-bezier( <number [0,1]> , <number> , <number [0,1]> , <number> )",
                    "deprecated-system-color": "ActiveBorder|ActiveCaption|AppWorkspace|Background|ButtonFace|ButtonHighlight|ButtonShadow|ButtonText|CaptionText|GrayText|Highlight|HighlightText|InactiveBorder|InactiveCaption|InactiveCaptionText|InfoBackground|InfoText|Menu|MenuText|Scrollbar|ThreeDDarkShadow|ThreeDFace|ThreeDHighlight|ThreeDLightShadow|ThreeDShadow|Window|WindowFrame|WindowText",
                    "discretionary-lig-values": "[discretionary-ligatures|no-discretionary-ligatures]",
                    "display-box": "contents|none",
                    "display-inside": "flow|flow-root|table|flex|grid|ruby",
                    "display-internal": "table-row-group|table-header-group|table-footer-group|table-row|table-cell|table-column-group|table-column|table-caption|ruby-base|ruby-text|ruby-base-container|ruby-text-container",
                    "display-legacy": "inline-block|inline-list-item|inline-table|inline-flex|inline-grid",
                    "display-listitem": "<display-outside>?&&[flow|flow-root]?&&list-item",
                    "display-outside": "block|inline|run-in",
                    "drop-shadow()": "drop-shadow( <length>{2,3} <color>? )",
                    "east-asian-variant-values": "[jis78|jis83|jis90|jis04|simplified|traditional]",
                    "east-asian-width-values": "[full-width|proportional-width]",
                    "element()": "element( <custom-ident> , [first|start|last|first-except]? )|element( <id-selector> )",
                    "ellipse()": "ellipse( [<shape-radius>{2}]? [at <position>]? )",
                    "ending-shape": "circle|ellipse",
                    "env()": "env( <custom-ident> , <declaration-value>? )",
                    "explicit-track-list": "[<line-names>? <track-size>]+ <line-names>?",
                    "family-name": "<string>|<custom-ident>+",
                    "feature-tag-value": "<string> [<integer>|on|off]?",
                    "feature-type": "@stylistic|@historical-forms|@styleset|@character-variant|@swash|@ornaments|@annotation",
                    "feature-value-block": "<feature-type> '{' <feature-value-declaration-list> '}'",
                    "feature-value-block-list": "<feature-value-block>+",
                    "feature-value-declaration": "<custom-ident> : <integer>+ ;",
                    "feature-value-declaration-list": "<feature-value-declaration>",
                    "feature-value-name": "<custom-ident>",
                    "fill-rule": "nonzero|evenodd",
                    "filter-function": "<blur()>|<brightness()>|<contrast()>|<drop-shadow()>|<grayscale()>|<hue-rotate()>|<invert()>|<opacity()>|<saturate()>|<sepia()>",
                    "filter-function-list": "[<filter-function>|<url>]+",
                    "final-bg-layer": "<'background-color'>||<bg-image>||<bg-position> [/ <bg-size>]?||<repeat-style>||<attachment>||<box>||<box>",
                    "fit-content()": "fit-content( [<length>|<percentage>] )",
                    "fixed-breadth": "<length-percentage>",
                    "fixed-repeat": "repeat( [<integer [1,∞]>] , [<line-names>? <fixed-size>]+ <line-names>? )",
                    "fixed-size": "<fixed-breadth>|minmax( <fixed-breadth> , <track-breadth> )|minmax( <inflexible-breadth> , <fixed-breadth> )",
                    "font-stretch-absolute": "normal|ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded|<percentage>",
                    "font-variant-css21": "[normal|small-caps]",
                    "font-weight-absolute": "normal|bold|<number [1,1000]>",
                    "frequency-percentage": "<frequency>|<percentage>",
                    "general-enclosed": "[<function-token> <any-value> )]|( <ident> <any-value> )",
                    "generic-family": "serif|sans-serif|cursive|fantasy|monospace|-apple-system",
                    "generic-name": "serif|sans-serif|cursive|fantasy|monospace",
                    "geometry-box": "<shape-box>|fill-box|stroke-box|view-box",
                    "gradient": "<linear-gradient()>|<repeating-linear-gradient()>|<radial-gradient()>|<repeating-radial-gradient()>|<conic-gradient()>|<-legacy-gradient>",
                    "grayscale()": "grayscale( <number-percentage> )",
                    "grid-line": "auto|<custom-ident>|[<integer>&&<custom-ident>?]|[span&&[<integer>||<custom-ident>]]",
                    "historical-lig-values": "[historical-ligatures|no-historical-ligatures]",
                    "hsl()": "hsl( <hue> <percentage> <percentage> [/ <alpha-value>]? )|hsl( <hue> , <percentage> , <percentage> , <alpha-value>? )",
                    "hsla()": "hsla( <hue> <percentage> <percentage> [/ <alpha-value>]? )|hsla( <hue> , <percentage> , <percentage> , <alpha-value>? )",
                    "hue": "<number>|<angle>",
                    "hue-rotate()": "hue-rotate( <angle> )",
                    "hwb()": "hwb( [<hue>|none] [<percentage>|none] [<percentage>|none] [/ [<alpha-value>|none]]? )",
                    "image": "<url>|<image()>|<image-set()>|<element()>|<paint()>|<cross-fade()>|<gradient>",
                    "image()": "image( <image-tags>? [<image-src>? , <color>?]! )",
                    "image-set()": "image-set( <image-set-option># )",
                    "image-set-option": "[<image>|<string>] [<resolution>||type( <string> )]",
                    "image-src": "<url>|<string>",
                    "image-tags": "ltr|rtl",
                    "inflexible-breadth": "<length>|<percentage>|min-content|max-content|auto",
                    "inset()": "inset( <length-percentage>{1,4} [round <'border-radius'>]? )",
                    "invert()": "invert( <number-percentage> )",
                    "keyframes-name": "<custom-ident>|<string>",
                    "keyframe-block": "<keyframe-selector># { <declaration-list> }",
                    "keyframe-block-list": "<keyframe-block>+",
                    "keyframe-selector": "from|to|<percentage>",
                    "layer()": "layer( <layer-name> )",
                    "leader()": "leader( <leader-type> )",
                    "leader-type": "dotted|solid|space|<string>",
                    "length-percentage": "<length>|<percentage>",
                    "line-names": "'[' <custom-ident>* ']'",
                    "line-name-list": "[<line-names>|<name-repeat>]+",
                    "line-style": "none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset",
                    "line-width": "<length>|thin|medium|thick",
                    "linear-color-hint": "<length-percentage>",
                    "linear-color-stop": "<color> <color-stop-length>?",
                    "linear-gradient()": "linear-gradient( [<angle>|to <side-or-corner>]? , <color-stop-list> )",
                    "mask-layer": "<mask-reference>||<position> [/ <bg-size>]?||<repeat-style>||<geometry-box>||[<geometry-box>|no-clip]||<compositing-operator>||<masking-mode>",
                    "mask-position": "[<length-percentage>|left|center|right] [<length-percentage>|top|center|bottom]?",
                    "mask-reference": "none|<image>|<mask-source>",
                    "mask-source": "<url>",
                    "masking-mode": "alpha|luminance|match-source",
                    "matrix()": "matrix( <number>#{6} )",
                    "matrix3d()": "matrix3d( <number>#{16} )",
                    "max()": "max( <calc-sum># )",
                    "media-and": "<media-in-parens> [and <media-in-parens>]+",
                    "media-condition": "<media-not>|<media-and>|<media-or>|<media-in-parens>",
                    "media-condition-without-or": "<media-not>|<media-and>|<media-in-parens>",
                    "media-feature": "( [<mf-plain>|<mf-boolean>|<mf-range>] )",
                    "media-in-parens": "( <media-condition> )|<media-feature>|<general-enclosed>",
                    "media-not": "not <media-in-parens>",
                    "media-or": "<media-in-parens> [or <media-in-parens>]+",
                    "media-query": "<media-condition>|[not|only]? <media-type> [and <media-condition-without-or>]?",
                    "media-query-list": "<media-query>#",
                    "media-type": "<ident>",
                    "mf-boolean": "<mf-name>",
                    "mf-name": "<ident>",
                    "mf-plain": "<mf-name> : <mf-value>",
                    "mf-range": "<mf-name> ['<'|'>']? '='? <mf-value>|<mf-value> ['<'|'>']? '='? <mf-name>|<mf-value> '<' '='? <mf-name> '<' '='? <mf-value>|<mf-value> '>' '='? <mf-name> '>' '='? <mf-value>",
                    "mf-value": "<number>|<dimension>|<ident>|<ratio>",
                    "min()": "min( <calc-sum># )",
                    "minmax()": "minmax( [<length>|<percentage>|min-content|max-content|auto] , [<length>|<percentage>|<flex>|min-content|max-content|auto] )",
                    "name-repeat": "repeat( [<positive-integer>|auto-fill] , <line-names>+ )",
                    "named-color": "transparent|aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen|<-non-standard-color>",
                    "namespace-prefix": "<ident>",
                    "ns-prefix": "[<ident-token>|'*']? '|'",
                    "number-percentage": "<number>|<percentage>",
                    "numeric-figure-values": "[lining-nums|oldstyle-nums]",
                    "numeric-fraction-values": "[diagonal-fractions|stacked-fractions]",
                    "numeric-spacing-values": "[proportional-nums|tabular-nums]",
                    "nth": "<an-plus-b>|even|odd",
                    "opacity()": "opacity( [<number-percentage>] )",
                    "overflow-position": "unsafe|safe",
                    "outline-radius": "<length>|<percentage>",
                    "page-body": "<declaration>? [; <page-body>]?|<page-margin-box> <page-body>",
                    "page-margin-box": "<page-margin-box-type> '{' <declaration-list> '}'",
                    "page-margin-box-type": "@top-left-corner|@top-left|@top-center|@top-right|@top-right-corner|@bottom-left-corner|@bottom-left|@bottom-center|@bottom-right|@bottom-right-corner|@left-top|@left-middle|@left-bottom|@right-top|@right-middle|@right-bottom",
                    "page-selector-list": "[<page-selector>#]?",
                    "page-selector": "<pseudo-page>+|<ident> <pseudo-page>*",
                    "page-size": "A5|A4|A3|B5|B4|JIS-B5|JIS-B4|letter|legal|ledger",
                    "path()": "path( [<fill-rule> ,]? <string> )",
                    "paint()": "paint( <ident> , <declaration-value>? )",
                    "perspective()": "perspective( <length> )",
                    "polygon()": "polygon( <fill-rule>? , [<length-percentage> <length-percentage>]# )",
                    "position": "[[left|center|right]||[top|center|bottom]|[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]?|[[left|right] <length-percentage>]&&[[top|bottom] <length-percentage>]]",
                    "pseudo-class-selector": "':' <ident-token>|':' <function-token> <any-value> ')'",
                    "pseudo-element-selector": "':' <pseudo-class-selector>",
                    "pseudo-page": ": [left|right|first|blank]",
                    "quote": "open-quote|close-quote|no-open-quote|no-close-quote",
                    "radial-gradient()": "radial-gradient( [<ending-shape>||<size>]? [at <position>]? , <color-stop-list> )",
                    "relative-selector": "<combinator>? <complex-selector>",
                    "relative-selector-list": "<relative-selector>#",
                    "relative-size": "larger|smaller",
                    "repeat-style": "repeat-x|repeat-y|[repeat|space|round|no-repeat]{1,2}",
                    "repeating-linear-gradient()": "repeating-linear-gradient( [<angle>|to <side-or-corner>]? , <color-stop-list> )",
                    "repeating-radial-gradient()": "repeating-radial-gradient( [<ending-shape>||<size>]? [at <position>]? , <color-stop-list> )",
                    "rgb()": "rgb( <percentage>{3} [/ <alpha-value>]? )|rgb( <number>{3} [/ <alpha-value>]? )|rgb( <percentage>#{3} , <alpha-value>? )|rgb( <number>#{3} , <alpha-value>? )",
                    "rgba()": "rgba( <percentage>{3} [/ <alpha-value>]? )|rgba( <number>{3} [/ <alpha-value>]? )|rgba( <percentage>#{3} , <alpha-value>? )|rgba( <number>#{3} , <alpha-value>? )",
                    "rotate()": "rotate( [<angle>|<zero>] )",
                    "rotate3d()": "rotate3d( <number> , <number> , <number> , [<angle>|<zero>] )",
                    "rotateX()": "rotateX( [<angle>|<zero>] )",
                    "rotateY()": "rotateY( [<angle>|<zero>] )",
                    "rotateZ()": "rotateZ( [<angle>|<zero>] )",
                    "saturate()": "saturate( <number-percentage> )",
                    "scale()": "scale( <number> , <number>? )",
                    "scale3d()": "scale3d( <number> , <number> , <number> )",
                    "scaleX()": "scaleX( <number> )",
                    "scaleY()": "scaleY( <number> )",
                    "scaleZ()": "scaleZ( <number> )",
                    "self-position": "center|start|end|self-start|self-end|flex-start|flex-end",
                    "shape-radius": "<length-percentage>|closest-side|farthest-side",
                    "skew()": "skew( [<angle>|<zero>] , [<angle>|<zero>]? )",
                    "skewX()": "skewX( [<angle>|<zero>] )",
                    "skewY()": "skewY( [<angle>|<zero>] )",
                    "sepia()": "sepia( <number-percentage> )",
                    "shadow": "inset?&&<length>{2,4}&&<color>?",
                    "shadow-t": "[<length>{2,3}&&<color>?]",
                    "shape": "rect( <top> , <right> , <bottom> , <left> )|rect( <top> <right> <bottom> <left> )",
                    "shape-box": "<box>|margin-box",
                    "side-or-corner": "[left|right]||[top|bottom]",
                    "single-animation": "<time>||<easing-function>||<time>||<single-animation-iteration-count>||<single-animation-direction>||<single-animation-fill-mode>||<single-animation-play-state>||[none|<keyframes-name>]",
                    "single-animation-direction": "normal|reverse|alternate|alternate-reverse",
                    "single-animation-fill-mode": "none|forwards|backwards|both",
                    "single-animation-iteration-count": "infinite|<number>",
                    "single-animation-play-state": "running|paused",
                    "single-transition": "[none|<single-transition-property>]||<time>||<easing-function>||<time>",
                    "single-transition-property": "all|<custom-ident>",
                    "size": "closest-side|farthest-side|closest-corner|farthest-corner|<length>|<length-percentage>{2}",
                    "step-position": "jump-start|jump-end|jump-none|jump-both|start|end",
                    "step-timing-function": "step-start|step-end|steps( <integer> [, <step-position>]? )",
                    "subclass-selector": "<id-selector>|<class-selector>|<attribute-selector>|<pseudo-class-selector>",
                    "supports-condition": "not <supports-in-parens>|<supports-in-parens> [and <supports-in-parens>]*|<supports-in-parens> [or <supports-in-parens>]*",
                    "supports-in-parens": "( <supports-condition> )|<supports-feature>|<general-enclosed>",
                    "supports-feature": "<supports-decl>|<supports-selector-fn>",
                    "supports-decl": "( <declaration> )",
                    "supports-selector-fn": "selector( <complex-selector> )",
                    "symbol": "<string>|<image>|<custom-ident>",
                    "target": "<target-counter()>|<target-counters()>|<target-text()>",
                    "target-counter()": "target-counter( [<string>|<url>] , <custom-ident> , <counter-style>? )",
                    "target-counters()": "target-counters( [<string>|<url>] , <custom-ident> , <string> , <counter-style>? )",
                    "target-text()": "target-text( [<string>|<url>] , [content|before|after|first-letter]? )",
                    "time-percentage": "<time>|<percentage>",
                    "easing-function": "linear|<cubic-bezier-timing-function>|<step-timing-function>",
                    "track-breadth": "<length-percentage>|<flex>|min-content|max-content|auto",
                    "track-list": "[<line-names>? [<track-size>|<track-repeat>]]+ <line-names>?",
                    "track-repeat": "repeat( [<integer [1,∞]>] , [<line-names>? <track-size>]+ <line-names>? )",
                    "track-size": "<track-breadth>|minmax( <inflexible-breadth> , <track-breadth> )|fit-content( [<length>|<percentage>] )",
                    "transform-function": "<matrix()>|<translate()>|<translateX()>|<translateY()>|<scale()>|<scaleX()>|<scaleY()>|<rotate()>|<skew()>|<skewX()>|<skewY()>|<matrix3d()>|<translate3d()>|<translateZ()>|<scale3d()>|<scaleZ()>|<rotate3d()>|<rotateX()>|<rotateY()>|<rotateZ()>|<perspective()>",
                    "transform-list": "<transform-function>+",
                    "translate()": "translate( <length-percentage> , <length-percentage>? )",
                    "translate3d()": "translate3d( <length-percentage> , <length-percentage> , <length> )",
                    "translateX()": "translateX( <length-percentage> )",
                    "translateY()": "translateY( <length-percentage> )",
                    "translateZ()": "translateZ( <length> )",
                    "type-or-unit": "string|color|url|integer|number|length|angle|time|frequency|cap|ch|em|ex|ic|lh|rlh|rem|vb|vi|vw|vh|vmin|vmax|mm|Q|cm|in|pt|pc|px|deg|grad|rad|turn|ms|s|Hz|kHz|%",
                    "type-selector": "<wq-name>|<ns-prefix>? '*'",
                    "var()": "var( <custom-property-name> , <declaration-value>? )",
                    "viewport-length": "auto|<length-percentage>",
                    "visual-box": "content-box|padding-box|border-box",
                    "wq-name": "<ns-prefix>? <ident-token>",
                    "-legacy-gradient": "<-webkit-gradient()>|<-legacy-linear-gradient>|<-legacy-repeating-linear-gradient>|<-legacy-radial-gradient>|<-legacy-repeating-radial-gradient>",
                    "-legacy-linear-gradient": "-moz-linear-gradient( <-legacy-linear-gradient-arguments> )|-webkit-linear-gradient( <-legacy-linear-gradient-arguments> )|-o-linear-gradient( <-legacy-linear-gradient-arguments> )",
                    "-legacy-repeating-linear-gradient": "-moz-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )|-webkit-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )|-o-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )",
                    "-legacy-linear-gradient-arguments": "[<angle>|<side-or-corner>]? , <color-stop-list>",
                    "-legacy-radial-gradient": "-moz-radial-gradient( <-legacy-radial-gradient-arguments> )|-webkit-radial-gradient( <-legacy-radial-gradient-arguments> )|-o-radial-gradient( <-legacy-radial-gradient-arguments> )",
                    "-legacy-repeating-radial-gradient": "-moz-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )|-webkit-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )|-o-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )",
                    "-legacy-radial-gradient-arguments": "[<position> ,]? [[[<-legacy-radial-gradient-shape>||<-legacy-radial-gradient-size>]|[<length>|<percentage>]{2}] ,]? <color-stop-list>",
                    "-legacy-radial-gradient-size": "closest-side|closest-corner|farthest-side|farthest-corner|contain|cover",
                    "-legacy-radial-gradient-shape": "circle|ellipse",
                    "-non-standard-font": "-apple-system-body|-apple-system-headline|-apple-system-subheadline|-apple-system-caption1|-apple-system-caption2|-apple-system-footnote|-apple-system-short-body|-apple-system-short-headline|-apple-system-short-subheadline|-apple-system-short-caption1|-apple-system-short-footnote|-apple-system-tall-body",
                    "-non-standard-color": "-moz-ButtonDefault|-moz-ButtonHoverFace|-moz-ButtonHoverText|-moz-CellHighlight|-moz-CellHighlightText|-moz-Combobox|-moz-ComboboxText|-moz-Dialog|-moz-DialogText|-moz-dragtargetzone|-moz-EvenTreeRow|-moz-Field|-moz-FieldText|-moz-html-CellHighlight|-moz-html-CellHighlightText|-moz-mac-accentdarkestshadow|-moz-mac-accentdarkshadow|-moz-mac-accentface|-moz-mac-accentlightesthighlight|-moz-mac-accentlightshadow|-moz-mac-accentregularhighlight|-moz-mac-accentregularshadow|-moz-mac-chrome-active|-moz-mac-chrome-inactive|-moz-mac-focusring|-moz-mac-menuselect|-moz-mac-menushadow|-moz-mac-menutextselect|-moz-MenuHover|-moz-MenuHoverText|-moz-MenuBarText|-moz-MenuBarHoverText|-moz-nativehyperlinktext|-moz-OddTreeRow|-moz-win-communicationstext|-moz-win-mediatext|-moz-activehyperlinktext|-moz-default-background-color|-moz-default-color|-moz-hyperlinktext|-moz-visitedhyperlinktext|-webkit-activelink|-webkit-focus-ring-color|-webkit-link|-webkit-text",
                    "-non-standard-image-rendering": "optimize-contrast|-moz-crisp-edges|-o-crisp-edges|-webkit-optimize-contrast",
                    "-non-standard-overflow": "-moz-scrollbars-none|-moz-scrollbars-horizontal|-moz-scrollbars-vertical|-moz-hidden-unscrollable",
                    "-non-standard-width": "fill-available|min-intrinsic|intrinsic|-moz-available|-moz-fit-content|-moz-min-content|-moz-max-content|-webkit-min-content|-webkit-max-content",
                    "-webkit-gradient()": "-webkit-gradient( <-webkit-gradient-type> , <-webkit-gradient-point> [, <-webkit-gradient-point>|, <-webkit-gradient-radius> , <-webkit-gradient-point>] [, <-webkit-gradient-radius>]? [, <-webkit-gradient-color-stop>]* )",
                    "-webkit-gradient-color-stop": "from( <color> )|color-stop( [<number-zero-one>|<percentage>] , <color> )|to( <color> )",
                    "-webkit-gradient-point": "[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]",
                    "-webkit-gradient-radius": "<length>|<percentage>",
                    "-webkit-gradient-type": "linear|radial",
                    "-webkit-mask-box-repeat": "repeat|stretch|round",
                    "-webkit-mask-clip-style": "border|border-box|padding|padding-box|content|content-box|text",
                    "-ms-filter-function-list": "<-ms-filter-function>+",
                    "-ms-filter-function": "<-ms-filter-function-progid>|<-ms-filter-function-legacy>",
                    "-ms-filter-function-progid": "'progid:' [<ident-token> '.']* [<ident-token>|<function-token> <any-value>? )]",
                    "-ms-filter-function-legacy": "<ident-token>|<function-token> <any-value>? )",
                    "-ms-filter": "<string>",
                    "age": "child|young|old",
                    "attr-name": "<wq-name>",
                    "attr-fallback": "<any-value>",
                    "border-radius": "<length-percentage>{1,2}",
                    "bottom": "<length>|auto",
                    "generic-voice": "[<age>? <gender> <integer>?]",
                    "gender": "male|female|neutral",
                    "left": "<length>|auto",
                    "layer-name": "<ident> ['.' <ident>]*",
                    "mask-image": "<mask-reference>#",
                    "paint": "none|<color>|<url> [none|<color>]?|context-fill|context-stroke",
                    "ratio": "<integer> / <integer>",
                    "right": "<length>|auto",
                    "svg-length": "<percentage>|<length>|<number>",
                    "svg-writing-mode": "lr-tb|rl-tb|tb-rl|lr|rl|tb",
                    "single-animation-timeline": "auto|none|<timeline-name>",
                    "timeline-name": "<custom-ident>|<string>",
                    "top": "<length>|auto",
                    "track-group": "'(' [<string>* <track-minmax> <string>*]+ ')' ['[' <positive-integer> ']']?|<track-minmax>",
                    "track-list-v0": "[<string>* <track-group> <string>*]+|none",
                    "track-minmax": "minmax( <track-breadth> , <track-breadth> )|auto|<track-breadth>|fit-content",
                    "x": "<number>",
                    "y": "<number>",
                    "declaration": "<ident-token> : <declaration-value>? ['!' important]?",
                    "declaration-list": "[<declaration>? ';']* <declaration>?",
                    "url": "url( <string> <url-modifier>* )|<url-token>",
                    "url-modifier": "<ident>|<function-token> <any-value> )",
                    "number-zero-one": "<number [0,1]>",
                    "number-one-or-greater": "<number [1,∞]>",
                    "positive-integer": "<integer [0,∞]>",
                    "-non-standard-display": "-ms-inline-flexbox|-ms-grid|-ms-inline-grid|-webkit-flex|-webkit-inline-flex|-webkit-box|-webkit-inline-box|-moz-inline-stack|-moz-box|-moz-inline-box"
                },
                "properties": {
                    "--*": "<declaration-value>",
                    "-ms-accelerator": "false|true",
                    "-ms-block-progression": "tb|rl|bt|lr",
                    "-ms-content-zoom-chaining": "none|chained",
                    "-ms-content-zooming": "none|zoom",
                    "-ms-content-zoom-limit": "<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>",
                    "-ms-content-zoom-limit-max": "<percentage>",
                    "-ms-content-zoom-limit-min": "<percentage>",
                    "-ms-content-zoom-snap": "<'-ms-content-zoom-snap-type'>||<'-ms-content-zoom-snap-points'>",
                    "-ms-content-zoom-snap-points": "snapInterval( <percentage> , <percentage> )|snapList( <percentage># )",
                    "-ms-content-zoom-snap-type": "none|proximity|mandatory",
                    "-ms-filter": "<string>",
                    "-ms-flow-from": "[none|<custom-ident>]#",
                    "-ms-flow-into": "[none|<custom-ident>]#",
                    "-ms-grid-columns": "none|<track-list>|<auto-track-list>",
                    "-ms-grid-rows": "none|<track-list>|<auto-track-list>",
                    "-ms-high-contrast-adjust": "auto|none",
                    "-ms-hyphenate-limit-chars": "auto|<integer>{1,3}",
                    "-ms-hyphenate-limit-lines": "no-limit|<integer>",
                    "-ms-hyphenate-limit-zone": "<percentage>|<length>",
                    "-ms-ime-align": "auto|after",
                    "-ms-overflow-style": "auto|none|scrollbar|-ms-autohiding-scrollbar",
                    "-ms-scrollbar-3dlight-color": "<color>",
                    "-ms-scrollbar-arrow-color": "<color>",
                    "-ms-scrollbar-base-color": "<color>",
                    "-ms-scrollbar-darkshadow-color": "<color>",
                    "-ms-scrollbar-face-color": "<color>",
                    "-ms-scrollbar-highlight-color": "<color>",
                    "-ms-scrollbar-shadow-color": "<color>",
                    "-ms-scrollbar-track-color": "<color>",
                    "-ms-scroll-chaining": "chained|none",
                    "-ms-scroll-limit": "<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>",
                    "-ms-scroll-limit-x-max": "auto|<length>",
                    "-ms-scroll-limit-x-min": "<length>",
                    "-ms-scroll-limit-y-max": "auto|<length>",
                    "-ms-scroll-limit-y-min": "<length>",
                    "-ms-scroll-rails": "none|railed",
                    "-ms-scroll-snap-points-x": "snapInterval( <length-percentage> , <length-percentage> )|snapList( <length-percentage># )",
                    "-ms-scroll-snap-points-y": "snapInterval( <length-percentage> , <length-percentage> )|snapList( <length-percentage># )",
                    "-ms-scroll-snap-type": "none|proximity|mandatory",
                    "-ms-scroll-snap-x": "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>",
                    "-ms-scroll-snap-y": "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>",
                    "-ms-scroll-translation": "none|vertical-to-horizontal",
                    "-ms-text-autospace": "none|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space",
                    "-ms-touch-select": "grippers|none",
                    "-ms-user-select": "none|element|text",
                    "-ms-wrap-flow": "auto|both|start|end|maximum|clear",
                    "-ms-wrap-margin": "<length>",
                    "-ms-wrap-through": "wrap|none",
                    "-moz-appearance": "none|button|button-arrow-down|button-arrow-next|button-arrow-previous|button-arrow-up|button-bevel|button-focus|caret|checkbox|checkbox-container|checkbox-label|checkmenuitem|dualbutton|groupbox|listbox|listitem|menuarrow|menubar|menucheckbox|menuimage|menuitem|menuitemtext|menulist|menulist-button|menulist-text|menulist-textfield|menupopup|menuradio|menuseparator|meterbar|meterchunk|progressbar|progressbar-vertical|progresschunk|progresschunk-vertical|radio|radio-container|radio-label|radiomenuitem|range|range-thumb|resizer|resizerpanel|scale-horizontal|scalethumbend|scalethumb-horizontal|scalethumbstart|scalethumbtick|scalethumb-vertical|scale-vertical|scrollbarbutton-down|scrollbarbutton-left|scrollbarbutton-right|scrollbarbutton-up|scrollbarthumb-horizontal|scrollbarthumb-vertical|scrollbartrack-horizontal|scrollbartrack-vertical|searchfield|separator|sheet|spinner|spinner-downbutton|spinner-textfield|spinner-upbutton|splitter|statusbar|statusbarpanel|tab|tabpanel|tabpanels|tab-scroll-arrow-back|tab-scroll-arrow-forward|textfield|textfield-multiline|toolbar|toolbarbutton|toolbarbutton-dropdown|toolbargripper|toolbox|tooltip|treeheader|treeheadercell|treeheadersortarrow|treeitem|treeline|treetwisty|treetwistyopen|treeview|-moz-mac-unified-toolbar|-moz-win-borderless-glass|-moz-win-browsertabbar-toolbox|-moz-win-communicationstext|-moz-win-communications-toolbox|-moz-win-exclude-glass|-moz-win-glass|-moz-win-mediatext|-moz-win-media-toolbox|-moz-window-button-box|-moz-window-button-box-maximized|-moz-window-button-close|-moz-window-button-maximize|-moz-window-button-minimize|-moz-window-button-restore|-moz-window-frame-bottom|-moz-window-frame-left|-moz-window-frame-right|-moz-window-titlebar|-moz-window-titlebar-maximized",
                    "-moz-binding": "<url>|none",
                    "-moz-border-bottom-colors": "<color>+|none",
                    "-moz-border-left-colors": "<color>+|none",
                    "-moz-border-right-colors": "<color>+|none",
                    "-moz-border-top-colors": "<color>+|none",
                    "-moz-context-properties": "none|[fill|fill-opacity|stroke|stroke-opacity]#",
                    "-moz-float-edge": "border-box|content-box|margin-box|padding-box",
                    "-moz-force-broken-image-icon": "0|1",
                    "-moz-image-region": "<shape>|auto",
                    "-moz-orient": "inline|block|horizontal|vertical",
                    "-moz-outline-radius": "<outline-radius>{1,4} [/ <outline-radius>{1,4}]?",
                    "-moz-outline-radius-bottomleft": "<outline-radius>",
                    "-moz-outline-radius-bottomright": "<outline-radius>",
                    "-moz-outline-radius-topleft": "<outline-radius>",
                    "-moz-outline-radius-topright": "<outline-radius>",
                    "-moz-stack-sizing": "ignore|stretch-to-fit",
                    "-moz-text-blink": "none|blink",
                    "-moz-user-focus": "ignore|normal|select-after|select-before|select-menu|select-same|select-all|none",
                    "-moz-user-input": "auto|none|enabled|disabled",
                    "-moz-user-modify": "read-only|read-write|write-only",
                    "-moz-window-dragging": "drag|no-drag",
                    "-moz-window-shadow": "default|menu|tooltip|sheet|none",
                    "-webkit-appearance": "none|button|button-bevel|caps-lock-indicator|caret|checkbox|default-button|inner-spin-button|listbox|listitem|media-controls-background|media-controls-fullscreen-background|media-current-time-display|media-enter-fullscreen-button|media-exit-fullscreen-button|media-fullscreen-button|media-mute-button|media-overlay-play-button|media-play-button|media-seek-back-button|media-seek-forward-button|media-slider|media-sliderthumb|media-time-remaining-display|media-toggle-closed-captions-button|media-volume-slider|media-volume-slider-container|media-volume-sliderthumb|menulist|menulist-button|menulist-text|menulist-textfield|meter|progress-bar|progress-bar-value|push-button|radio|scrollbarbutton-down|scrollbarbutton-left|scrollbarbutton-right|scrollbarbutton-up|scrollbargripper-horizontal|scrollbargripper-vertical|scrollbarthumb-horizontal|scrollbarthumb-vertical|scrollbartrack-horizontal|scrollbartrack-vertical|searchfield|searchfield-cancel-button|searchfield-decoration|searchfield-results-button|searchfield-results-decoration|slider-horizontal|slider-vertical|sliderthumb-horizontal|sliderthumb-vertical|square-button|textarea|textfield|-apple-pay-button",
                    "-webkit-border-before": "<'border-width'>||<'border-style'>||<color>",
                    "-webkit-border-before-color": "<color>",
                    "-webkit-border-before-style": "<'border-style'>",
                    "-webkit-border-before-width": "<'border-width'>",
                    "-webkit-box-reflect": "[above|below|right|left]? <length>? <image>?",
                    "-webkit-line-clamp": "none|<integer>",
                    "-webkit-mask": "[<mask-reference>||<position> [/ <bg-size>]?||<repeat-style>||[<box>|border|padding|content|text]||[<box>|border|padding|content]]#",
                    "-webkit-mask-attachment": "<attachment>#",
                    "-webkit-mask-clip": "[<box>|border|padding|content|text]#",
                    "-webkit-mask-composite": "<composite-style>#",
                    "-webkit-mask-image": "<mask-reference>#",
                    "-webkit-mask-origin": "[<box>|border|padding|content]#",
                    "-webkit-mask-position": "<position>#",
                    "-webkit-mask-position-x": "[<length-percentage>|left|center|right]#",
                    "-webkit-mask-position-y": "[<length-percentage>|top|center|bottom]#",
                    "-webkit-mask-repeat": "<repeat-style>#",
                    "-webkit-mask-repeat-x": "repeat|no-repeat|space|round",
                    "-webkit-mask-repeat-y": "repeat|no-repeat|space|round",
                    "-webkit-mask-size": "<bg-size>#",
                    "-webkit-overflow-scrolling": "auto|touch",
                    "-webkit-tap-highlight-color": "<color>",
                    "-webkit-text-fill-color": "<color>",
                    "-webkit-text-stroke": "<length>||<color>",
                    "-webkit-text-stroke-color": "<color>",
                    "-webkit-text-stroke-width": "<length>",
                    "-webkit-touch-callout": "default|none",
                    "-webkit-user-modify": "read-only|read-write|read-write-plaintext-only",
                    "accent-color": "auto|<color>",
                    "align-content": "normal|<baseline-position>|<content-distribution>|<overflow-position>? <content-position>",
                    "align-items": "normal|stretch|<baseline-position>|[<overflow-position>? <self-position>]",
                    "align-self": "auto|normal|stretch|<baseline-position>|<overflow-position>? <self-position>",
                    "align-tracks": "[normal|<baseline-position>|<content-distribution>|<overflow-position>? <content-position>]#",
                    "all": "initial|inherit|unset|revert",
                    "animation": "<single-animation>#",
                    "animation-delay": "<time>#",
                    "animation-direction": "<single-animation-direction>#",
                    "animation-duration": "<time>#",
                    "animation-fill-mode": "<single-animation-fill-mode>#",
                    "animation-iteration-count": "<single-animation-iteration-count>#",
                    "animation-name": "[none|<keyframes-name>]#",
                    "animation-play-state": "<single-animation-play-state>#",
                    "animation-timing-function": "<easing-function>#",
                    "animation-timeline": "<single-animation-timeline>#",
                    "appearance": "none|auto|textfield|menulist-button|<compat-auto>",
                    "aspect-ratio": "auto|<ratio>",
                    "azimuth": "<angle>|[[left-side|far-left|left|center-left|center|center-right|right|far-right|right-side]||behind]|leftwards|rightwards",
                    "backdrop-filter": "none|<filter-function-list>",
                    "backface-visibility": "visible|hidden",
                    "background": "[<bg-layer> ,]* <final-bg-layer>",
                    "background-attachment": "<attachment>#",
                    "background-blend-mode": "<blend-mode>#",
                    "background-clip": "<box>#",
                    "background-color": "<color>",
                    "background-image": "<bg-image>#",
                    "background-origin": "<box>#",
                    "background-position": "<bg-position>#",
                    "background-position-x": "[center|[[left|right|x-start|x-end]? <length-percentage>?]!]#",
                    "background-position-y": "[center|[[top|bottom|y-start|y-end]? <length-percentage>?]!]#",
                    "background-repeat": "<repeat-style>#",
                    "background-size": "<bg-size>#",
                    "block-overflow": "clip|ellipsis|<string>",
                    "block-size": "<'width'>",
                    "border": "<line-width>||<line-style>||<color>",
                    "border-block": "<'border-top-width'>||<'border-top-style'>||<color>",
                    "border-block-color": "<'border-top-color'>{1,2}",
                    "border-block-style": "<'border-top-style'>",
                    "border-block-width": "<'border-top-width'>",
                    "border-block-end": "<'border-top-width'>||<'border-top-style'>||<color>",
                    "border-block-end-color": "<'border-top-color'>",
                    "border-block-end-style": "<'border-top-style'>",
                    "border-block-end-width": "<'border-top-width'>",
                    "border-block-start": "<'border-top-width'>||<'border-top-style'>||<color>",
                    "border-block-start-color": "<'border-top-color'>",
                    "border-block-start-style": "<'border-top-style'>",
                    "border-block-start-width": "<'border-top-width'>",
                    "border-bottom": "<line-width>||<line-style>||<color>",
                    "border-bottom-color": "<'border-top-color'>",
                    "border-bottom-left-radius": "<length-percentage>{1,2}",
                    "border-bottom-right-radius": "<length-percentage>{1,2}",
                    "border-bottom-style": "<line-style>",
                    "border-bottom-width": "<line-width>",
                    "border-collapse": "collapse|separate",
                    "border-color": "<color>{1,4}",
                    "border-end-end-radius": "<length-percentage>{1,2}",
                    "border-end-start-radius": "<length-percentage>{1,2}",
                    "border-image": "<'border-image-source'>||<'border-image-slice'> [/ <'border-image-width'>|/ <'border-image-width'>? / <'border-image-outset'>]?||<'border-image-repeat'>",
                    "border-image-outset": "[<length>|<number>]{1,4}",
                    "border-image-repeat": "[stretch|repeat|round|space]{1,2}",
                    "border-image-slice": "<number-percentage>{1,4}&&fill?",
                    "border-image-source": "none|<image>",
                    "border-image-width": "[<length-percentage>|<number>|auto]{1,4}",
                    "border-inline": "<'border-top-width'>||<'border-top-style'>||<color>",
                    "border-inline-end": "<'border-top-width'>||<'border-top-style'>||<color>",
                    "border-inline-color": "<'border-top-color'>{1,2}",
                    "border-inline-style": "<'border-top-style'>",
                    "border-inline-width": "<'border-top-width'>",
                    "border-inline-end-color": "<'border-top-color'>",
                    "border-inline-end-style": "<'border-top-style'>",
                    "border-inline-end-width": "<'border-top-width'>",
                    "border-inline-start": "<'border-top-width'>||<'border-top-style'>||<color>",
                    "border-inline-start-color": "<'border-top-color'>",
                    "border-inline-start-style": "<'border-top-style'>",
                    "border-inline-start-width": "<'border-top-width'>",
                    "border-left": "<line-width>||<line-style>||<color>",
                    "border-left-color": "<color>",
                    "border-left-style": "<line-style>",
                    "border-left-width": "<line-width>",
                    "border-radius": "<length-percentage>{1,4} [/ <length-percentage>{1,4}]?",
                    "border-right": "<line-width>||<line-style>||<color>",
                    "border-right-color": "<color>",
                    "border-right-style": "<line-style>",
                    "border-right-width": "<line-width>",
                    "border-spacing": "<length> <length>?",
                    "border-start-end-radius": "<length-percentage>{1,2}",
                    "border-start-start-radius": "<length-percentage>{1,2}",
                    "border-style": "<line-style>{1,4}",
                    "border-top": "<line-width>||<line-style>||<color>",
                    "border-top-color": "<color>",
                    "border-top-left-radius": "<length-percentage>{1,2}",
                    "border-top-right-radius": "<length-percentage>{1,2}",
                    "border-top-style": "<line-style>",
                    "border-top-width": "<line-width>",
                    "border-width": "<line-width>{1,4}",
                    "bottom": "<length>|<percentage>|auto",
                    "box-align": "start|center|end|baseline|stretch",
                    "box-decoration-break": "slice|clone",
                    "box-direction": "normal|reverse|inherit",
                    "box-flex": "<number>",
                    "box-flex-group": "<integer>",
                    "box-lines": "single|multiple",
                    "box-ordinal-group": "<integer>",
                    "box-orient": "horizontal|vertical|inline-axis|block-axis|inherit",
                    "box-pack": "start|center|end|justify",
                    "box-shadow": "none|<shadow>#",
                    "box-sizing": "content-box|border-box",
                    "break-after": "auto|avoid|always|all|avoid-page|page|left|right|recto|verso|avoid-column|column|avoid-region|region",
                    "break-before": "auto|avoid|always|all|avoid-page|page|left|right|recto|verso|avoid-column|column|avoid-region|region",
                    "break-inside": "auto|avoid|avoid-page|avoid-column|avoid-region",
                    "caption-side": "top|bottom|block-start|block-end|inline-start|inline-end",
                    "caret-color": "auto|<color>",
                    "clear": "none|left|right|both|inline-start|inline-end",
                    "clip": "<shape>|auto",
                    "clip-path": "<clip-source>|[<basic-shape>||<geometry-box>]|none",
                    "color": "<color>",
                    "print-color-adjust": "economy|exact",
                    "color-scheme": "normal|[light|dark|<custom-ident>]+&&only?",
                    "column-count": "<integer>|auto",
                    "column-fill": "auto|balance|balance-all",
                    "column-gap": "normal|<length-percentage>",
                    "column-rule": "<'column-rule-width'>||<'column-rule-style'>||<'column-rule-color'>",
                    "column-rule-color": "<color>",
                    "column-rule-style": "<'border-style'>",
                    "column-rule-width": "<'border-width'>",
                    "column-span": "none|all",
                    "column-width": "<length>|auto",
                    "columns": "<'column-width'>||<'column-count'>",
                    "contain": "none|strict|content|[size||layout||style||paint]",
                    "content": "normal|none|[<content-replacement>|<content-list>] [/ [<string>|<counter>]+]?",
                    "content-visibility": "visible|auto|hidden",
                    "counter-increment": "[<counter-name> <integer>?]+|none",
                    "counter-reset": "[<counter-name> <integer>?]+|none",
                    "counter-set": "[<counter-name> <integer>?]+|none",
                    "cursor": "[[<url> [<x> <y>]? ,]* [auto|default|none|context-menu|help|pointer|progress|wait|cell|crosshair|text|vertical-text|alias|copy|move|no-drop|not-allowed|e-resize|n-resize|ne-resize|nw-resize|s-resize|se-resize|sw-resize|w-resize|ew-resize|ns-resize|nesw-resize|nwse-resize|col-resize|row-resize|all-scroll|zoom-in|zoom-out|grab|grabbing|hand|-webkit-grab|-webkit-grabbing|-webkit-zoom-in|-webkit-zoom-out|-moz-grab|-moz-grabbing|-moz-zoom-in|-moz-zoom-out]]",
                    "direction": "ltr|rtl",
                    "display": "[<display-outside>||<display-inside>]|<display-listitem>|<display-internal>|<display-box>|<display-legacy>|<-non-standard-display>",
                    "empty-cells": "show|hide",
                    "filter": "none|<filter-function-list>|<-ms-filter-function-list>",
                    "flex": "none|[<'flex-grow'> <'flex-shrink'>?||<'flex-basis'>]",
                    "flex-basis": "content|<'width'>",
                    "flex-direction": "row|row-reverse|column|column-reverse",
                    "flex-flow": "<'flex-direction'>||<'flex-wrap'>",
                    "flex-grow": "<number>",
                    "flex-shrink": "<number>",
                    "flex-wrap": "nowrap|wrap|wrap-reverse",
                    "float": "left|right|none|inline-start|inline-end",
                    "font": "[[<'font-style'>||<font-variant-css21>||<'font-weight'>||<'font-stretch'>]? <'font-size'> [/ <'line-height'>]? <'font-family'>]|caption|icon|menu|message-box|small-caption|status-bar",
                    "font-family": "[<family-name>|<generic-family>]#",
                    "font-feature-settings": "normal|<feature-tag-value>#",
                    "font-kerning": "auto|normal|none",
                    "font-language-override": "normal|<string>",
                    "font-optical-sizing": "auto|none",
                    "font-variation-settings": "normal|[<string> <number>]#",
                    "font-size": "<absolute-size>|<relative-size>|<length-percentage>",
                    "font-size-adjust": "none|[ex-height|cap-height|ch-width|ic-width|ic-height]? [from-font|<number>]",
                    "font-smooth": "auto|never|always|<absolute-size>|<length>",
                    "font-stretch": "<font-stretch-absolute>",
                    "font-style": "normal|italic|oblique <angle>?",
                    "font-synthesis": "none|[weight||style||small-caps]",
                    "font-variant": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>||stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )||[small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps]||<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero||<east-asian-variant-values>||<east-asian-width-values>||ruby]",
                    "font-variant-alternates": "normal|[stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )]",
                    "font-variant-caps": "normal|small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps",
                    "font-variant-east-asian": "normal|[<east-asian-variant-values>||<east-asian-width-values>||ruby]",
                    "font-variant-ligatures": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>]",
                    "font-variant-numeric": "normal|[<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero]",
                    "font-variant-position": "normal|sub|super",
                    "font-weight": "<font-weight-absolute>|bolder|lighter",
                    "forced-color-adjust": "auto|none",
                    "gap": "<'row-gap'> <'column-gap'>?",
                    "grid": "<'grid-template'>|<'grid-template-rows'> / [auto-flow&&dense?] <'grid-auto-columns'>?|[auto-flow&&dense?] <'grid-auto-rows'>? / <'grid-template-columns'>",
                    "grid-area": "<grid-line> [/ <grid-line>]{0,3}",
                    "grid-auto-columns": "<track-size>+",
                    "grid-auto-flow": "[row|column]||dense",
                    "grid-auto-rows": "<track-size>+",
                    "grid-column": "<grid-line> [/ <grid-line>]?",
                    "grid-column-end": "<grid-line>",
                    "grid-column-gap": "<length-percentage>",
                    "grid-column-start": "<grid-line>",
                    "grid-gap": "<'grid-row-gap'> <'grid-column-gap'>?",
                    "grid-row": "<grid-line> [/ <grid-line>]?",
                    "grid-row-end": "<grid-line>",
                    "grid-row-gap": "<length-percentage>",
                    "grid-row-start": "<grid-line>",
                    "grid-template": "none|[<'grid-template-rows'> / <'grid-template-columns'>]|[<line-names>? <string> <track-size>? <line-names>?]+ [/ <explicit-track-list>]?",
                    "grid-template-areas": "none|<string>+",
                    "grid-template-columns": "none|<track-list>|<auto-track-list>|subgrid <line-name-list>?",
                    "grid-template-rows": "none|<track-list>|<auto-track-list>|subgrid <line-name-list>?",
                    "hanging-punctuation": "none|[first||[force-end|allow-end]||last]",
                    "height": "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )",
                    "hyphenate-character": "auto|<string>",
                    "hyphens": "none|manual|auto",
                    "image-orientation": "from-image|<angle>|[<angle>? flip]",
                    "image-rendering": "auto|crisp-edges|pixelated|optimizeSpeed|optimizeQuality|<-non-standard-image-rendering>",
                    "image-resolution": "[from-image||<resolution>]&&snap?",
                    "ime-mode": "auto|normal|active|inactive|disabled",
                    "initial-letter": "normal|[<number> <integer>?]",
                    "initial-letter-align": "[auto|alphabetic|hanging|ideographic]",
                    "inline-size": "<'width'>",
                    "input-security": "auto|none",
                    "inset": "<'top'>{1,4}",
                    "inset-block": "<'top'>{1,2}",
                    "inset-block-end": "<'top'>",
                    "inset-block-start": "<'top'>",
                    "inset-inline": "<'top'>{1,2}",
                    "inset-inline-end": "<'top'>",
                    "inset-inline-start": "<'top'>",
                    "isolation": "auto|isolate",
                    "justify-content": "normal|<content-distribution>|<overflow-position>? [<content-position>|left|right]",
                    "justify-items": "normal|stretch|<baseline-position>|<overflow-position>? [<self-position>|left|right]|legacy|legacy&&[left|right|center]",
                    "justify-self": "auto|normal|stretch|<baseline-position>|<overflow-position>? [<self-position>|left|right]",
                    "justify-tracks": "[normal|<content-distribution>|<overflow-position>? [<content-position>|left|right]]#",
                    "left": "<length>|<percentage>|auto",
                    "letter-spacing": "normal|<length-percentage>",
                    "line-break": "auto|loose|normal|strict|anywhere",
                    "line-clamp": "none|<integer>",
                    "line-height": "normal|<number>|<length>|<percentage>",
                    "line-height-step": "<length>",
                    "list-style": "<'list-style-type'>||<'list-style-position'>||<'list-style-image'>",
                    "list-style-image": "<image>|none",
                    "list-style-position": "inside|outside",
                    "list-style-type": "<counter-style>|<string>|none",
                    "margin": "[<length>|<percentage>|auto]{1,4}",
                    "margin-block": "<'margin-left'>{1,2}",
                    "margin-block-end": "<'margin-left'>",
                    "margin-block-start": "<'margin-left'>",
                    "margin-bottom": "<length>|<percentage>|auto",
                    "margin-inline": "<'margin-left'>{1,2}",
                    "margin-inline-end": "<'margin-left'>",
                    "margin-inline-start": "<'margin-left'>",
                    "margin-left": "<length>|<percentage>|auto",
                    "margin-right": "<length>|<percentage>|auto",
                    "margin-top": "<length>|<percentage>|auto",
                    "margin-trim": "none|in-flow|all",
                    "mask": "<mask-layer>#",
                    "mask-border": "<'mask-border-source'>||<'mask-border-slice'> [/ <'mask-border-width'>? [/ <'mask-border-outset'>]?]?||<'mask-border-repeat'>||<'mask-border-mode'>",
                    "mask-border-mode": "luminance|alpha",
                    "mask-border-outset": "[<length>|<number>]{1,4}",
                    "mask-border-repeat": "[stretch|repeat|round|space]{1,2}",
                    "mask-border-slice": "<number-percentage>{1,4} fill?",
                    "mask-border-source": "none|<image>",
                    "mask-border-width": "[<length-percentage>|<number>|auto]{1,4}",
                    "mask-clip": "[<geometry-box>|no-clip]#",
                    "mask-composite": "<compositing-operator>#",
                    "mask-image": "<mask-reference>#",
                    "mask-mode": "<masking-mode>#",
                    "mask-origin": "<geometry-box>#",
                    "mask-position": "<position>#",
                    "mask-repeat": "<repeat-style>#",
                    "mask-size": "<bg-size>#",
                    "mask-type": "luminance|alpha",
                    "masonry-auto-flow": "[pack|next]||[definite-first|ordered]",
                    "math-style": "normal|compact",
                    "max-block-size": "<'max-width'>",
                    "max-height": "none|<length-percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )",
                    "max-inline-size": "<'max-width'>",
                    "max-lines": "none|<integer>",
                    "max-width": "none|<length-percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|<-non-standard-width>",
                    "min-block-size": "<'min-width'>",
                    "min-height": "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )",
                    "min-inline-size": "<'min-width'>",
                    "min-width": "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|<-non-standard-width>",
                    "mix-blend-mode": "<blend-mode>",
                    "object-fit": "fill|contain|cover|none|scale-down",
                    "object-position": "<position>",
                    "offset": "[<'offset-position'>? [<'offset-path'> [<'offset-distance'>||<'offset-rotate'>]?]?]! [/ <'offset-anchor'>]?",
                    "offset-anchor": "auto|<position>",
                    "offset-distance": "<length-percentage>",
                    "offset-path": "none|ray( [<angle>&&<size>&&contain?] )|<path()>|<url>|[<basic-shape>||<geometry-box>]",
                    "offset-position": "auto|<position>",
                    "offset-rotate": "[auto|reverse]||<angle>",
                    "opacity": "<alpha-value>",
                    "order": "<integer>",
                    "orphans": "<integer>",
                    "outline": "[<'outline-color'>||<'outline-style'>||<'outline-width'>]",
                    "outline-color": "<color>|invert",
                    "outline-offset": "<length>",
                    "outline-style": "auto|<'border-style'>",
                    "outline-width": "<line-width>",
                    "overflow": "[visible|hidden|clip|scroll|auto]{1,2}|<-non-standard-overflow>",
                    "overflow-anchor": "auto|none",
                    "overflow-block": "visible|hidden|clip|scroll|auto",
                    "overflow-clip-box": "padding-box|content-box",
                    "overflow-clip-margin": "<visual-box>||<length [0,∞]>",
                    "overflow-inline": "visible|hidden|clip|scroll|auto",
                    "overflow-wrap": "normal|break-word|anywhere",
                    "overflow-x": "visible|hidden|clip|scroll|auto",
                    "overflow-y": "visible|hidden|clip|scroll|auto",
                    "overscroll-behavior": "[contain|none|auto]{1,2}",
                    "overscroll-behavior-block": "contain|none|auto",
                    "overscroll-behavior-inline": "contain|none|auto",
                    "overscroll-behavior-x": "contain|none|auto",
                    "overscroll-behavior-y": "contain|none|auto",
                    "padding": "[<length>|<percentage>]{1,4}",
                    "padding-block": "<'padding-left'>{1,2}",
                    "padding-block-end": "<'padding-left'>",
                    "padding-block-start": "<'padding-left'>",
                    "padding-bottom": "<length>|<percentage>",
                    "padding-inline": "<'padding-left'>{1,2}",
                    "padding-inline-end": "<'padding-left'>",
                    "padding-inline-start": "<'padding-left'>",
                    "padding-left": "<length>|<percentage>",
                    "padding-right": "<length>|<percentage>",
                    "padding-top": "<length>|<percentage>",
                    "page-break-after": "auto|always|avoid|left|right|recto|verso",
                    "page-break-before": "auto|always|avoid|left|right|recto|verso",
                    "page-break-inside": "auto|avoid",
                    "paint-order": "normal|[fill||stroke||markers]",
                    "perspective": "none|<length>",
                    "perspective-origin": "<position>",
                    "place-content": "<'align-content'> <'justify-content'>?",
                    "place-items": "<'align-items'> <'justify-items'>?",
                    "place-self": "<'align-self'> <'justify-self'>?",
                    "pointer-events": "auto|none|visiblePainted|visibleFill|visibleStroke|visible|painted|fill|stroke|all|inherit",
                    "position": "static|relative|absolute|sticky|fixed|-webkit-sticky",
                    "quotes": "none|auto|[<string> <string>]+",
                    "resize": "none|both|horizontal|vertical|block|inline",
                    "right": "<length>|<percentage>|auto",
                    "rotate": "none|<angle>|[x|y|z|<number>{3}]&&<angle>",
                    "row-gap": "normal|<length-percentage>",
                    "ruby-align": "start|center|space-between|space-around",
                    "ruby-merge": "separate|collapse|auto",
                    "ruby-position": "[alternate||[over|under]]|inter-character",
                    "scale": "none|<number>{1,3}",
                    "scrollbar-color": "auto|<color>{2}",
                    "scrollbar-gutter": "auto|stable&&both-edges?",
                    "scrollbar-width": "auto|thin|none",
                    "scroll-behavior": "auto|smooth",
                    "scroll-margin": "<length>{1,4}",
                    "scroll-margin-block": "<length>{1,2}",
                    "scroll-margin-block-start": "<length>",
                    "scroll-margin-block-end": "<length>",
                    "scroll-margin-bottom": "<length>",
                    "scroll-margin-inline": "<length>{1,2}",
                    "scroll-margin-inline-start": "<length>",
                    "scroll-margin-inline-end": "<length>",
                    "scroll-margin-left": "<length>",
                    "scroll-margin-right": "<length>",
                    "scroll-margin-top": "<length>",
                    "scroll-padding": "[auto|<length-percentage>]{1,4}",
                    "scroll-padding-block": "[auto|<length-percentage>]{1,2}",
                    "scroll-padding-block-start": "auto|<length-percentage>",
                    "scroll-padding-block-end": "auto|<length-percentage>",
                    "scroll-padding-bottom": "auto|<length-percentage>",
                    "scroll-padding-inline": "[auto|<length-percentage>]{1,2}",
                    "scroll-padding-inline-start": "auto|<length-percentage>",
                    "scroll-padding-inline-end": "auto|<length-percentage>",
                    "scroll-padding-left": "auto|<length-percentage>",
                    "scroll-padding-right": "auto|<length-percentage>",
                    "scroll-padding-top": "auto|<length-percentage>",
                    "scroll-snap-align": "[none|start|end|center]{1,2}",
                    "scroll-snap-coordinate": "none|<position>#",
                    "scroll-snap-destination": "<position>",
                    "scroll-snap-points-x": "none|repeat( <length-percentage> )",
                    "scroll-snap-points-y": "none|repeat( <length-percentage> )",
                    "scroll-snap-stop": "normal|always",
                    "scroll-snap-type": "none|[x|y|block|inline|both] [mandatory|proximity]?",
                    "scroll-snap-type-x": "none|mandatory|proximity",
                    "scroll-snap-type-y": "none|mandatory|proximity",
                    "shape-image-threshold": "<alpha-value>",
                    "shape-margin": "<length-percentage>",
                    "shape-outside": "none|[<shape-box>||<basic-shape>]|<image>",
                    "tab-size": "<integer>|<length>",
                    "table-layout": "auto|fixed",
                    "text-align": "start|end|left|right|center|justify|match-parent",
                    "text-align-last": "auto|start|end|left|right|center|justify",
                    "text-combine-upright": "none|all|[digits <integer>?]",
                    "text-decoration": "<'text-decoration-line'>||<'text-decoration-style'>||<'text-decoration-color'>||<'text-decoration-thickness'>",
                    "text-decoration-color": "<color>",
                    "text-decoration-line": "none|[underline||overline||line-through||blink]|spelling-error|grammar-error",
                    "text-decoration-skip": "none|[objects||[spaces|[leading-spaces||trailing-spaces]]||edges||box-decoration]",
                    "text-decoration-skip-ink": "auto|all|none",
                    "text-decoration-style": "solid|double|dotted|dashed|wavy",
                    "text-decoration-thickness": "auto|from-font|<length>|<percentage>",
                    "text-emphasis": "<'text-emphasis-style'>||<'text-emphasis-color'>",
                    "text-emphasis-color": "<color>",
                    "text-emphasis-position": "[over|under]&&[right|left]",
                    "text-emphasis-style": "none|[[filled|open]||[dot|circle|double-circle|triangle|sesame]]|<string>",
                    "text-indent": "<length-percentage>&&hanging?&&each-line?",
                    "text-justify": "auto|inter-character|inter-word|none",
                    "text-orientation": "mixed|upright|sideways",
                    "text-overflow": "[clip|ellipsis|<string>]{1,2}",
                    "text-rendering": "auto|optimizeSpeed|optimizeLegibility|geometricPrecision",
                    "text-shadow": "none|<shadow-t>#",
                    "text-size-adjust": "none|auto|<percentage>",
                    "text-transform": "none|capitalize|uppercase|lowercase|full-width|full-size-kana",
                    "text-underline-offset": "auto|<length>|<percentage>",
                    "text-underline-position": "auto|from-font|[under||[left|right]]",
                    "top": "<length>|<percentage>|auto",
                    "touch-action": "auto|none|[[pan-x|pan-left|pan-right]||[pan-y|pan-up|pan-down]||pinch-zoom]|manipulation",
                    "transform": "none|<transform-list>",
                    "transform-box": "content-box|border-box|fill-box|stroke-box|view-box",
                    "transform-origin": "[<length-percentage>|left|center|right|top|bottom]|[[<length-percentage>|left|center|right]&&[<length-percentage>|top|center|bottom]] <length>?",
                    "transform-style": "flat|preserve-3d",
                    "transition": "<single-transition>#",
                    "transition-delay": "<time>#",
                    "transition-duration": "<time>#",
                    "transition-property": "none|<single-transition-property>#",
                    "transition-timing-function": "<easing-function>#",
                    "translate": "none|<length-percentage> [<length-percentage> <length>?]?",
                    "unicode-bidi": "normal|embed|isolate|bidi-override|isolate-override|plaintext|-moz-isolate|-moz-isolate-override|-moz-plaintext|-webkit-isolate|-webkit-isolate-override|-webkit-plaintext",
                    "user-select": "auto|text|none|contain|all",
                    "vertical-align": "baseline|sub|super|text-top|text-bottom|middle|top|bottom|<percentage>|<length>",
                    "visibility": "visible|hidden|collapse",
                    "white-space": "normal|pre|nowrap|pre-wrap|pre-line|break-spaces",
                    "widows": "<integer>",
                    "width": "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|fill|stretch|intrinsic|-moz-max-content|-webkit-max-content|-moz-fit-content|-webkit-fit-content",
                    "will-change": "auto|<animateable-feature>#",
                    "word-break": "normal|break-all|keep-all|break-word",
                    "word-spacing": "normal|<length>",
                    "word-wrap": "normal|break-word",
                    "writing-mode": "horizontal-tb|vertical-rl|vertical-lr|sideways-rl|sideways-lr|<svg-writing-mode>",
                    "z-index": "auto|<integer>",
                    "zoom": "normal|reset|<number>|<percentage>",
                    "-moz-background-clip": "padding|border",
                    "-moz-border-radius-bottomleft": "<'border-bottom-left-radius'>",
                    "-moz-border-radius-bottomright": "<'border-bottom-right-radius'>",
                    "-moz-border-radius-topleft": "<'border-top-left-radius'>",
                    "-moz-border-radius-topright": "<'border-bottom-right-radius'>",
                    "-moz-control-character-visibility": "visible|hidden",
                    "-moz-osx-font-smoothing": "auto|grayscale",
                    "-moz-user-select": "none|text|all|-moz-none",
                    "-ms-flex-align": "start|end|center|baseline|stretch",
                    "-ms-flex-item-align": "auto|start|end|center|baseline|stretch",
                    "-ms-flex-line-pack": "start|end|center|justify|distribute|stretch",
                    "-ms-flex-negative": "<'flex-shrink'>",
                    "-ms-flex-pack": "start|end|center|justify|distribute",
                    "-ms-flex-order": "<integer>",
                    "-ms-flex-positive": "<'flex-grow'>",
                    "-ms-flex-preferred-size": "<'flex-basis'>",
                    "-ms-interpolation-mode": "nearest-neighbor|bicubic",
                    "-ms-grid-column-align": "start|end|center|stretch",
                    "-ms-grid-row-align": "start|end|center|stretch",
                    "-ms-hyphenate-limit-last": "none|always|column|page|spread",
                    "-webkit-background-clip": "[<box>|border|padding|content|text]#",
                    "-webkit-column-break-after": "always|auto|avoid",
                    "-webkit-column-break-before": "always|auto|avoid",
                    "-webkit-column-break-inside": "always|auto|avoid",
                    "-webkit-font-smoothing": "auto|none|antialiased|subpixel-antialiased",
                    "-webkit-mask-box-image": "[<url>|<gradient>|none] [<length-percentage>{4} <-webkit-mask-box-repeat>{2}]?",
                    "-webkit-print-color-adjust": "economy|exact",
                    "-webkit-text-security": "none|circle|disc|square",
                    "-webkit-user-drag": "none|element|auto",
                    "-webkit-user-select": "auto|none|text|all",
                    "alignment-baseline": "auto|baseline|before-edge|text-before-edge|middle|central|after-edge|text-after-edge|ideographic|alphabetic|hanging|mathematical",
                    "baseline-shift": "baseline|sub|super|<svg-length>",
                    "behavior": "<url>+",
                    "clip-rule": "nonzero|evenodd",
                    "cue": "<'cue-before'> <'cue-after'>?",
                    "cue-after": "<url> <decibel>?|none",
                    "cue-before": "<url> <decibel>?|none",
                    "dominant-baseline": "auto|use-script|no-change|reset-size|ideographic|alphabetic|hanging|mathematical|central|middle|text-after-edge|text-before-edge",
                    "fill": "<paint>",
                    "fill-opacity": "<number-zero-one>",
                    "fill-rule": "nonzero|evenodd",
                    "glyph-orientation-horizontal": "<angle>",
                    "glyph-orientation-vertical": "<angle>",
                    "kerning": "auto|<svg-length>",
                    "marker": "none|<url>",
                    "marker-end": "none|<url>",
                    "marker-mid": "none|<url>",
                    "marker-start": "none|<url>",
                    "pause": "<'pause-before'> <'pause-after'>?",
                    "pause-after": "<time>|none|x-weak|weak|medium|strong|x-strong",
                    "pause-before": "<time>|none|x-weak|weak|medium|strong|x-strong",
                    "rest": "<'rest-before'> <'rest-after'>?",
                    "rest-after": "<time>|none|x-weak|weak|medium|strong|x-strong",
                    "rest-before": "<time>|none|x-weak|weak|medium|strong|x-strong",
                    "shape-rendering": "auto|optimizeSpeed|crispEdges|geometricPrecision",
                    "src": "[<url> [format( <string># )]?|local( <family-name> )]#",
                    "speak": "auto|none|normal",
                    "speak-as": "normal|spell-out||digits||[literal-punctuation|no-punctuation]",
                    "stroke": "<paint>",
                    "stroke-dasharray": "none|[<svg-length>+]#",
                    "stroke-dashoffset": "<svg-length>",
                    "stroke-linecap": "butt|round|square",
                    "stroke-linejoin": "miter|round|bevel",
                    "stroke-miterlimit": "<number-one-or-greater>",
                    "stroke-opacity": "<number-zero-one>",
                    "stroke-width": "<svg-length>",
                    "text-anchor": "start|middle|end",
                    "unicode-range": "<urange>#",
                    "voice-balance": "<number>|left|center|right|leftwards|rightwards",
                    "voice-duration": "auto|<time>",
                    "voice-family": "[[<family-name>|<generic-voice>] ,]* [<family-name>|<generic-voice>]|preserve",
                    "voice-pitch": "<frequency>&&absolute|[[x-low|low|medium|high|x-high]||[<frequency>|<semitones>|<percentage>]]",
                    "voice-range": "<frequency>&&absolute|[[x-low|low|medium|high|x-high]||[<frequency>|<semitones>|<percentage>]]",
                    "voice-rate": "[normal|x-slow|slow|medium|fast|x-fast]||<percentage>",
                    "voice-stress": "normal|strong|moderate|none|reduced",
                    "voice-volume": "silent|[[x-soft|soft|medium|loud|x-loud]||<decibel>]"
                },
                "atrules": {
                    "charset": {
                        "prelude": "<string>",
                        "descriptors": null
                    },
                    "counter-style": {
                        "prelude": "<counter-style-name>",
                        "descriptors": {
                            "additive-symbols": "[<integer>&&<symbol>]#",
                            "fallback": "<counter-style-name>",
                            "negative": "<symbol> <symbol>?",
                            "pad": "<integer>&&<symbol>",
                            "prefix": "<symbol>",
                            "range": "[[<integer>|infinite]{2}]#|auto",
                            "speak-as": "auto|bullets|numbers|words|spell-out|<counter-style-name>",
                            "suffix": "<symbol>",
                            "symbols": "<symbol>+",
                            "system": "cyclic|numeric|alphabetic|symbolic|additive|[fixed <integer>?]|[extends <counter-style-name>]"
                        }
                    },
                    "document": {
                        "prelude": "[<url>|url-prefix( <string> )|domain( <string> )|media-document( <string> )|regexp( <string> )]#",
                        "descriptors": null
                    },
                    "font-face": {
                        "prelude": null,
                        "descriptors": {
                            "ascent-override": "normal|<percentage>",
                            "descent-override": "normal|<percentage>",
                            "font-display": "[auto|block|swap|fallback|optional]",
                            "font-family": "<family-name>",
                            "font-feature-settings": "normal|<feature-tag-value>#",
                            "font-variation-settings": "normal|[<string> <number>]#",
                            "font-stretch": "<font-stretch-absolute>{1,2}",
                            "font-style": "normal|italic|oblique <angle>{0,2}",
                            "font-weight": "<font-weight-absolute>{1,2}",
                            "font-variant": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>||stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )||[small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps]||<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero||<east-asian-variant-values>||<east-asian-width-values>||ruby]",
                            "line-gap-override": "normal|<percentage>",
                            "size-adjust": "<percentage>",
                            "src": "[<url> [format( <string># )]?|local( <family-name> )]#",
                            "unicode-range": "<urange>#"
                        }
                    },
                    "font-feature-values": {
                        "prelude": "<family-name>#",
                        "descriptors": null
                    },
                    "import": {
                        "prelude": "[<string>|<url>] [layer|layer( <layer-name> )]? [supports( [<supports-condition>|<declaration>] )]? <media-query-list>?",
                        "descriptors": null
                    },
                    "keyframes": {
                        "prelude": "<keyframes-name>",
                        "descriptors": null
                    },
                    "layer": {
                        "prelude": "[<layer-name>#|<layer-name>?]",
                        "descriptors": null
                    },
                    "media": {
                        "prelude": "<media-query-list>",
                        "descriptors": null
                    },
                    "namespace": {
                        "prelude": "<namespace-prefix>? [<string>|<url>]",
                        "descriptors": null
                    },
                    "page": {
                        "prelude": "<page-selector-list>",
                        "descriptors": {
                            "bleed": "auto|<length>",
                            "marks": "none|[crop||cross]",
                            "size": "<length>{1,2}|auto|[<page-size>||[portrait|landscape]]"
                        }
                    },
                    "property": {
                        "prelude": "<custom-property-name>",
                        "descriptors": {
                            "syntax": "<string>",
                            "inherits": "true|false",
                            "initial-value": "<string>"
                        }
                    },
                    "scroll-timeline": {
                        "prelude": "<timeline-name>",
                        "descriptors": null
                    },
                    "supports": {
                        "prelude": "<supports-condition>",
                        "descriptors": null
                    },
                    "viewport": {
                        "prelude": null,
                        "descriptors": {
                            "height": "<viewport-length>{1,2}",
                            "max-height": "<viewport-length>",
                            "max-width": "<viewport-length>",
                            "max-zoom": "auto|<number>|<percentage>",
                            "min-height": "<viewport-length>",
                            "min-width": "<viewport-length>",
                            "min-zoom": "auto|<number>|<percentage>",
                            "orientation": "auto|portrait|landscape",
                            "user-zoom": "zoom|fixed",
                            "viewport-fit": "auto|contain|cover",
                            "width": "<viewport-length>{1,2}",
                            "zoom": "auto|<number>|<percentage>"
                        }
                    }
                }
            };

            const PLUSSIGN$5 = 0x002B;    // U+002B PLUS SIGN (+)
            const HYPHENMINUS$2 = 0x002D; // U+002D HYPHEN-MINUS (-)
            const N = 0x006E;           // U+006E LATIN SMALL LETTER N (n)
            const DISALLOW_SIGN = true;
            const ALLOW_SIGN = false;

            function checkInteger(offset, disallowSign) {
                let pos = this.tokenStart + offset;
                const code = this.charCodeAt(pos);

                if (code === PLUSSIGN$5 || code === HYPHENMINUS$2) {
                    if (disallowSign) {
                        this.error('Number sign is not allowed');
                    }
                    pos++;
                }

                for (; pos < this.tokenEnd; pos++) {
                    if (!isDigit(this.charCodeAt(pos))) {
                        this.error('Integer is expected', pos);
                    }
                }
            }

            function checkTokenIsInteger(disallowSign) {
                return checkInteger.call(this, 0, disallowSign);
            }

            function expectCharCode(offset, code) {
                if (!this.cmpChar(this.tokenStart + offset, code)) {
                    let msg = '';

                    switch (code) {
                        case N:
                            msg = 'N is expected';
                            break;
                        case HYPHENMINUS$2:
                            msg = 'HyphenMinus is expected';
                            break;
                    }

                    this.error(msg, this.tokenStart + offset);
                }
            }

            // ... <signed-integer>
            // ... ['+' | '-'] <signless-integer>
            function consumeB() {
                let offset = 0;
                let sign = 0;
                let type = this.tokenType;

                while (type === WhiteSpace$1 || type === Comment$1) {
                    type = this.lookupType(++offset);
                }

                if (type !== Number$2) {
                    if (this.isDelim(PLUSSIGN$5, offset) ||
                        this.isDelim(HYPHENMINUS$2, offset)) {
                        sign = this.isDelim(PLUSSIGN$5, offset) ? PLUSSIGN$5 : HYPHENMINUS$2;

                        do {
                            type = this.lookupType(++offset);
                        } while (type === WhiteSpace$1 || type === Comment$1);

                        if (type !== Number$2) {
                            this.skip(offset);
                            checkTokenIsInteger.call(this, DISALLOW_SIGN);
                        }
                    } else {
                        return null;
                    }
                }

                if (offset > 0) {
                    this.skip(offset);
                }

                if (sign === 0) {
                    type = this.charCodeAt(this.tokenStart);
                    if (type !== PLUSSIGN$5 && type !== HYPHENMINUS$2) {
                        this.error('Number sign is expected');
                    }
                }

                checkTokenIsInteger.call(this, sign !== 0);
                return sign === HYPHENMINUS$2 ? '-' + this.consume(Number$2) : this.consume(Number$2);
            }

            // An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb
            const name$D = 'AnPlusB';
            const structure$D = {
                a: [String, null],
                b: [String, null]
            };

            function parse$E() {
                /* eslint-disable brace-style*/
                const start = this.tokenStart;
                let a = null;
                let b = null;

                // <integer>
                if (this.tokenType === Number$2) {
                    checkTokenIsInteger.call(this, ALLOW_SIGN);
                    b = this.consume(Number$2);
                }

                // -n
                // -n <signed-integer>
                // -n ['+' | '-'] <signless-integer>
                // -n- <signless-integer>
                // <dashndashdigit-ident>
                else if (this.tokenType === Ident && this.cmpChar(this.tokenStart, HYPHENMINUS$2)) {
                    a = '-1';

                    expectCharCode.call(this, 1, N);

                    switch (this.tokenEnd - this.tokenStart) {
                        // -n
                        // -n <signed-integer>
                        // -n ['+' | '-'] <signless-integer>
                        case 2:
                            this.next();
                            b = consumeB.call(this);
                            break;

                        // -n- <signless-integer>
                        case 3:
                            expectCharCode.call(this, 2, HYPHENMINUS$2);

                            this.next();
                            this.skipSC();

                            checkTokenIsInteger.call(this, DISALLOW_SIGN);

                            b = '-' + this.consume(Number$2);
                            break;

                        // <dashndashdigit-ident>
                        default:
                            expectCharCode.call(this, 2, HYPHENMINUS$2);
                            checkInteger.call(this, 3, DISALLOW_SIGN);
                            this.next();

                            b = this.substrToCursor(start + 2);
                    }
                }

                // '+'? n
                // '+'? n <signed-integer>
                // '+'? n ['+' | '-'] <signless-integer>
                // '+'? n- <signless-integer>
                // '+'? <ndashdigit-ident>
                else if (this.tokenType === Ident || (this.isDelim(PLUSSIGN$5) && this.lookupType(1) === Ident)) {
                    let sign = 0;
                    a = '1';

                    // just ignore a plus
                    if (this.isDelim(PLUSSIGN$5)) {
                        sign = 1;
                        this.next();
                    }

                    expectCharCode.call(this, 0, N);

                    switch (this.tokenEnd - this.tokenStart) {
                        // '+'? n
                        // '+'? n <signed-integer>
                        // '+'? n ['+' | '-'] <signless-integer>
                        case 1:
                            this.next();
                            b = consumeB.call(this);
                            break;

                        // '+'? n- <signless-integer>
                        case 2:
                            expectCharCode.call(this, 1, HYPHENMINUS$2);

                            this.next();
                            this.skipSC();

                            checkTokenIsInteger.call(this, DISALLOW_SIGN);

                            b = '-' + this.consume(Number$2);
                            break;

                        // '+'? <ndashdigit-ident>
                        default:
                            expectCharCode.call(this, 1, HYPHENMINUS$2);
                            checkInteger.call(this, 2, DISALLOW_SIGN);
                            this.next();

                            b = this.substrToCursor(start + sign + 1);
                    }
                }

                // <ndashdigit-dimension>
                // <ndash-dimension> <signless-integer>
                // <n-dimension>
                // <n-dimension> <signed-integer>
                // <n-dimension> ['+' | '-'] <signless-integer>
                else if (this.tokenType === Dimension$1) {
                    const code = this.charCodeAt(this.tokenStart);
                    const sign = code === PLUSSIGN$5 || code === HYPHENMINUS$2;
                    let i = this.tokenStart + sign;

                    for (; i < this.tokenEnd; i++) {
                        if (!isDigit(this.charCodeAt(i))) {
                            break;
                        }
                    }

                    if (i === this.tokenStart + sign) {
                        this.error('Integer is expected', this.tokenStart + sign);
                    }

                    expectCharCode.call(this, i - this.tokenStart, N);
                    a = this.substring(start, i);

                    // <n-dimension>
                    // <n-dimension> <signed-integer>
                    // <n-dimension> ['+' | '-'] <signless-integer>
                    if (i + 1 === this.tokenEnd) {
                        this.next();
                        b = consumeB.call(this);
                    } else {
                        expectCharCode.call(this, i - this.tokenStart + 1, HYPHENMINUS$2);

                        // <ndash-dimension> <signless-integer>
                        if (i + 2 === this.tokenEnd) {
                            this.next();
                            this.skipSC();
                            checkTokenIsInteger.call(this, DISALLOW_SIGN);
                            b = '-' + this.consume(Number$2);
                        }
                        // <ndashdigit-dimension>
                        else {
                            checkInteger.call(this, i - this.tokenStart + 2, DISALLOW_SIGN);
                            this.next();
                            b = this.substrToCursor(i + 1);
                        }
                    }
                } else {
                    this.error();
                }

                if (a !== null && a.charCodeAt(0) === PLUSSIGN$5) {
                    a = a.substr(1);
                }

                if (b !== null && b.charCodeAt(0) === PLUSSIGN$5) {
                    b = b.substr(1);
                }

                return {
                    type: 'AnPlusB',
                    loc: this.getLocation(start, this.tokenStart),
                    a,
                    b
                };
            }

            function generate$E(node) {
                if (node.a) {
                    const a =
                        node.a === '+1' && 'n' ||
                        node.a ===  '1' && 'n' ||
                        node.a === '-1' && '-n' ||
                        node.a + 'n';

                    if (node.b) {
                        const b = node.b[0] === '-' || node.b[0] === '+'
                            ? node.b
                            : '+' + node.b;
                        this.tokenize(a + b);
                    } else {
                        this.tokenize(a);
                    }
                } else {
                    this.tokenize(node.b);
                }
            }

            var AnPlusB = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$D,
                structure: structure$D,
                parse: parse$E,
                generate: generate$E
            });

            function consumeRaw$5(startToken) {
                return this.Raw(startToken, this.consumeUntilLeftCurlyBracketOrSemicolon, true);
            }

            function isDeclarationBlockAtrule() {
                for (let offset = 1, type; type = this.lookupType(offset); offset++) {
                    if (type === RightCurlyBracket) {
                        return true;
                    }

                    if (type === LeftCurlyBracket ||
                        type === AtKeyword) {
                        return false;
                    }
                }

                return false;
            }


            const name$C = 'Atrule';
            const walkContext$9 = 'atrule';
            const structure$C = {
                name: String,
                prelude: ['AtrulePrelude', 'Raw', null],
                block: ['Block', null]
            };

            function parse$D() {
                const start = this.tokenStart;
                let name;
                let nameLowerCase;
                let prelude = null;
                let block = null;

                this.eat(AtKeyword);

                name = this.substrToCursor(start + 1);
                nameLowerCase = name.toLowerCase();
                this.skipSC();

                // parse prelude
                if (this.eof === false &&
                    this.tokenType !== LeftCurlyBracket &&
                    this.tokenType !== Semicolon) {
                    if (this.parseAtrulePrelude) {
                        prelude = this.parseWithFallback(this.AtrulePrelude.bind(this, name), consumeRaw$5);
                    } else {
                        prelude = consumeRaw$5.call(this, this.tokenIndex);
                    }

                    this.skipSC();
                }

                switch (this.tokenType) {
                    case Semicolon:
                        this.next();
                        break;

                    case LeftCurlyBracket:
                        if (hasOwnProperty.call(this.atrule, nameLowerCase) &&
                            typeof this.atrule[nameLowerCase].block === 'function') {
                            block = this.atrule[nameLowerCase].block.call(this);
                        } else {
                            // TODO: should consume block content as Raw?
                            block = this.Block(isDeclarationBlockAtrule.call(this));
                        }

                        break;
                }

                return {
                    type: 'Atrule',
                    loc: this.getLocation(start, this.tokenStart),
                    name,
                    prelude,
                    block
                };
            }

            function generate$D(node) {
                this.token(AtKeyword, '@' + node.name);

                if (node.prelude !== null) {
                    this.node(node.prelude);
                }

                if (node.block) {
                    this.node(node.block);
                } else {
                    this.token(Semicolon, ';');
                }
            }

            var Atrule = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$C,
                walkContext: walkContext$9,
                structure: structure$C,
                parse: parse$D,
                generate: generate$D
            });

            const name$B = 'AtrulePrelude';
            const walkContext$8 = 'atrulePrelude';
            const structure$B = {
                children: [[]]
            };

            function parse$C(name) {
                let children = null;

                if (name !== null) {
                    name = name.toLowerCase();
                }

                this.skipSC();

                if (hasOwnProperty.call(this.atrule, name) &&
                    typeof this.atrule[name].prelude === 'function') {
                    // custom consumer
                    children = this.atrule[name].prelude.call(this);
                } else {
                    // default consumer
                    children = this.readSequence(this.scope.AtrulePrelude);
                }

                this.skipSC();

                if (this.eof !== true &&
                    this.tokenType !== LeftCurlyBracket &&
                    this.tokenType !== Semicolon) {
                    this.error('Semicolon or block is expected');
                }

                return {
                    type: 'AtrulePrelude',
                    loc: this.getLocationFromList(children),
                    children
                };
            }

            function generate$C(node) {
                this.children(node);
            }

            var AtrulePrelude = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$B,
                walkContext: walkContext$8,
                structure: structure$B,
                parse: parse$C,
                generate: generate$C
            });

            const DOLLARSIGN$1 = 0x0024;       // U+0024 DOLLAR SIGN ($)
            const ASTERISK$5 = 0x002A;         // U+002A ASTERISK (*)
            const EQUALSSIGN = 0x003D;       // U+003D EQUALS SIGN (=)
            const CIRCUMFLEXACCENT = 0x005E; // U+005E (^)
            const VERTICALLINE$2 = 0x007C;     // U+007C VERTICAL LINE (|)
            const TILDE$2 = 0x007E;            // U+007E TILDE (~)

            function getAttributeName() {
                if (this.eof) {
                    this.error('Unexpected end of input');
                }

                const start = this.tokenStart;
                let expectIdent = false;

                if (this.isDelim(ASTERISK$5)) {
                    expectIdent = true;
                    this.next();
                } else if (!this.isDelim(VERTICALLINE$2)) {
                    this.eat(Ident);
                }

                if (this.isDelim(VERTICALLINE$2)) {
                    if (this.charCodeAt(this.tokenStart + 1) !== EQUALSSIGN) {
                        this.next();
                        this.eat(Ident);
                    } else if (expectIdent) {
                        this.error('Identifier is expected', this.tokenEnd);
                    }
                } else if (expectIdent) {
                    this.error('Vertical line is expected');
                }

                return {
                    type: 'Identifier',
                    loc: this.getLocation(start, this.tokenStart),
                    name: this.substrToCursor(start)
                };
            }

            function getOperator() {
                const start = this.tokenStart;
                const code = this.charCodeAt(start);

                if (code !== EQUALSSIGN &&        // =
                    code !== TILDE$2 &&             // ~=
                    code !== CIRCUMFLEXACCENT &&  // ^=
                    code !== DOLLARSIGN$1 &&        // $=
                    code !== ASTERISK$5 &&          // *=
                    code !== VERTICALLINE$2         // |=
                ) {
                    this.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');
                }

                this.next();

                if (code !== EQUALSSIGN) {
                    if (!this.isDelim(EQUALSSIGN)) {
                        this.error('Equal sign is expected');
                    }

                    this.next();
                }

                return this.substrToCursor(start);
            }

            // '[' <wq-name> ']'
            // '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'
            const name$A = 'AttributeSelector';
            const structure$A = {
                name: 'Identifier',
                matcher: [String, null],
                value: ['String', 'Identifier', null],
                flags: [String, null]
            };

            function parse$B() {
                const start = this.tokenStart;
                let name;
                let matcher = null;
                let value = null;
                let flags = null;

                this.eat(LeftSquareBracket);
                this.skipSC();

                name = getAttributeName.call(this);
                this.skipSC();

                if (this.tokenType !== RightSquareBracket) {
                    // avoid case `[name i]`
                    if (this.tokenType !== Ident) {
                        matcher = getOperator.call(this);

                        this.skipSC();

                        value = this.tokenType === String$2
                            ? this.String()
                            : this.Identifier();

                        this.skipSC();
                    }

                    // attribute flags
                    if (this.tokenType === Ident) {
                        flags = this.consume(Ident);

                        this.skipSC();
                    }
                }

                this.eat(RightSquareBracket);

                return {
                    type: 'AttributeSelector',
                    loc: this.getLocation(start, this.tokenStart),
                    name,
                    matcher,
                    value,
                    flags
                };
            }

            function generate$B(node) {
                this.token(Delim, '[');
                this.node(node.name);

                if (node.matcher !== null) {
                    this.tokenize(node.matcher);
                    this.node(node.value);
                }

                if (node.flags !== null) {
                    this.token(Ident, node.flags);
                }

                this.token(Delim, ']');
            }

            var AttributeSelector = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$A,
                structure: structure$A,
                parse: parse$B,
                generate: generate$B
            });

            function consumeRaw$4(startToken) {
                return this.Raw(startToken, null, true);
            }
            function consumeRule() {
                return this.parseWithFallback(this.Rule, consumeRaw$4);
            }
            function consumeRawDeclaration(startToken) {
                return this.Raw(startToken, this.consumeUntilSemicolonIncluded, true);
            }
            function consumeDeclaration() {
                if (this.tokenType === Semicolon) {
                    return consumeRawDeclaration.call(this, this.tokenIndex);
                }

                const node = this.parseWithFallback(this.Declaration, consumeRawDeclaration);

                if (this.tokenType === Semicolon) {
                    this.next();
                }

                return node;
            }

            const name$z = 'Block';
            const walkContext$7 = 'block';
            const structure$z = {
                children: [[
                    'Atrule',
                    'Rule',
                    'Declaration'
                ]]
            };

            function parse$A(isDeclaration) {
                const consumer = isDeclaration ? consumeDeclaration : consumeRule;
                const start = this.tokenStart;
                let children = this.createList();

                this.eat(LeftCurlyBracket);

                scan:
                while (!this.eof) {
                    switch (this.tokenType) {
                        case RightCurlyBracket:
                            break scan;

                        case WhiteSpace$1:
                        case Comment$1:
                            this.next();
                            break;

                        case AtKeyword:
                            children.push(this.parseWithFallback(this.Atrule, consumeRaw$4));
                            break;

                        default:
                            children.push(consumer.call(this));
                    }
                }

                if (!this.eof) {
                    this.eat(RightCurlyBracket);
                }

                return {
                    type: 'Block',
                    loc: this.getLocation(start, this.tokenStart),
                    children
                };
            }

            function generate$A(node) {
                this.token(LeftCurlyBracket, '{');
                this.children(node, prev => {
                    if (prev.type === 'Declaration') {
                        this.token(Semicolon, ';');
                    }
                });
                this.token(RightCurlyBracket, '}');
            }

            var Block = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$z,
                walkContext: walkContext$7,
                structure: structure$z,
                parse: parse$A,
                generate: generate$A
            });

            const name$y = 'Brackets';
            const structure$y = {
                children: [[]]
            };

            function parse$z(readSequence, recognizer) {
                const start = this.tokenStart;
                let children = null;

                this.eat(LeftSquareBracket);

                children = readSequence.call(this, recognizer);

                if (!this.eof) {
                    this.eat(RightSquareBracket);
                }

                return {
                    type: 'Brackets',
                    loc: this.getLocation(start, this.tokenStart),
                    children
                };
            }

            function generate$z(node) {
                this.token(Delim, '[');
                this.children(node);
                this.token(Delim, ']');
            }

            var Brackets = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$y,
                structure: structure$y,
                parse: parse$z,
                generate: generate$z
            });

            const name$x = 'CDC';
            const structure$x = [];

            function parse$y() {
                const start = this.tokenStart;

                this.eat(CDC$1); // -->

                return {
                    type: 'CDC',
                    loc: this.getLocation(start, this.tokenStart)
                };
            }

            function generate$y() {
                this.token(CDC$1, '-->');
            }

            var CDC = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$x,
                structure: structure$x,
                parse: parse$y,
                generate: generate$y
            });

            const name$w = 'CDO';
            const structure$w = [];

            function parse$x() {
                const start = this.tokenStart;

                this.eat(CDO$1); // <!--

                return {
                    type: 'CDO',
                    loc: this.getLocation(start, this.tokenStart)
                };
            }

            function generate$x() {
                this.token(CDO$1, '<!--');
            }

            var CDO = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$w,
                structure: structure$w,
                parse: parse$x,
                generate: generate$x
            });

            const FULLSTOP$2 = 0x002E; // U+002E FULL STOP (.)

            // '.' ident
            const name$v = 'ClassSelector';
            const structure$v = {
                name: String
            };

            function parse$w() {
                this.eatDelim(FULLSTOP$2);

                return {
                    type: 'ClassSelector',
                    loc: this.getLocation(this.tokenStart - 1, this.tokenEnd),
                    name: this.consume(Ident)
                };
            }

            function generate$w(node) {
                this.token(Delim, '.');
                this.token(Ident, node.name);
            }

            var ClassSelector = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$v,
                structure: structure$v,
                parse: parse$w,
                generate: generate$w
            });

            const PLUSSIGN$4 = 0x002B;        // U+002B PLUS SIGN (+)
            const SOLIDUS$5 = 0x002F;         // U+002F SOLIDUS (/)
            const GREATERTHANSIGN$1 = 0x003E; // U+003E GREATER-THAN SIGN (>)
            const TILDE$1 = 0x007E;           // U+007E TILDE (~)

            const name$u = 'Combinator';
            const structure$u = {
                name: String
            };

            // + | > | ~ | /deep/
            function parse$v() {
                const start = this.tokenStart;
                let name;

                switch (this.tokenType) {
                    case WhiteSpace$1:
                        name = ' ';
                        break;

                    case Delim:
                        switch (this.charCodeAt(this.tokenStart)) {
                            case GREATERTHANSIGN$1:
                            case PLUSSIGN$4:
                            case TILDE$1:
                                this.next();
                                break;

                            case SOLIDUS$5:
                                this.next();
                                this.eatIdent('deep');
                                this.eatDelim(SOLIDUS$5);
                                break;

                            default:
                                this.error('Combinator is expected');
                        }

                        name = this.substrToCursor(start);
                        break;
                }

                return {
                    type: 'Combinator',
                    loc: this.getLocation(start, this.tokenStart),
                    name
                };
            }

            function generate$v(node) {
                this.tokenize(node.name);
            }

            var Combinator = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$u,
                structure: structure$u,
                parse: parse$v,
                generate: generate$v
            });

            const ASTERISK$4 = 0x002A;        // U+002A ASTERISK (*)
            const SOLIDUS$4 = 0x002F;         // U+002F SOLIDUS (/)


            const name$t = 'Comment';
            const structure$t = {
                value: String
            };

            function parse$u() {
                const start = this.tokenStart;
                let end = this.tokenEnd;

                this.eat(Comment$1);

                if ((end - start + 2) >= 2 &&
                    this.charCodeAt(end - 2) === ASTERISK$4 &&
                    this.charCodeAt(end - 1) === SOLIDUS$4) {
                    end -= 2;
                }

                return {
                    type: 'Comment',
                    loc: this.getLocation(start, this.tokenStart),
                    value: this.substring(start + 2, end)
                };
            }

            function generate$u(node) {
                this.token(Comment$1, '/*' + node.value + '*/');
            }

            var Comment = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$t,
                structure: structure$t,
                parse: parse$u,
                generate: generate$u
            });

            const EXCLAMATIONMARK$1 = 0x0021; // U+0021 EXCLAMATION MARK (!)
            const NUMBERSIGN$2 = 0x0023;      // U+0023 NUMBER SIGN (#)
            const DOLLARSIGN = 0x0024;      // U+0024 DOLLAR SIGN ($)
            const AMPERSAND = 0x0026;       // U+0026 AMPERSAND (&)
            const ASTERISK$3 = 0x002A;        // U+002A ASTERISK (*)
            const PLUSSIGN$3 = 0x002B;        // U+002B PLUS SIGN (+)
            const SOLIDUS$3 = 0x002F;         // U+002F SOLIDUS (/)

            function consumeValueRaw(startToken) {
                return this.Raw(startToken, this.consumeUntilExclamationMarkOrSemicolon, true);
            }

            function consumeCustomPropertyRaw(startToken) {
                return this.Raw(startToken, this.consumeUntilExclamationMarkOrSemicolon, false);
            }

            function consumeValue() {
                const startValueToken = this.tokenIndex;
                const value = this.Value();

                if (value.type !== 'Raw' &&
                    this.eof === false &&
                    this.tokenType !== Semicolon &&
                    this.isDelim(EXCLAMATIONMARK$1) === false &&
                    this.isBalanceEdge(startValueToken) === false) {
                    this.error();
                }

                return value;
            }

            const name$s = 'Declaration';
            const walkContext$6 = 'declaration';
            const structure$s = {
                important: [Boolean, String],
                property: String,
                value: ['Value', 'Raw']
            };

            function parse$t() {
                const start = this.tokenStart;
                const startToken = this.tokenIndex;
                const property = readProperty.call(this);
                const customProperty = isCustomProperty(property);
                const parseValue = customProperty ? this.parseCustomProperty : this.parseValue;
                const consumeRaw = customProperty ? consumeCustomPropertyRaw : consumeValueRaw;
                let important = false;
                let value;

                this.skipSC();
                this.eat(Colon);

                const valueStart = this.tokenIndex;

                if (!customProperty) {
                    this.skipSC();
                }

                if (parseValue) {
                    value = this.parseWithFallback(consumeValue, consumeRaw);
                } else {
                    value = consumeRaw.call(this, this.tokenIndex);
                }

                if (customProperty && value.type === 'Value' && value.children.isEmpty) {
                    for (let offset = valueStart - this.tokenIndex; offset <= 0; offset++) {
                        if (this.lookupType(offset) === WhiteSpace$1) {
                            value.children.appendData({
                                type: 'WhiteSpace',
                                loc: null,
                                value: ' '
                            });
                            break;
                        }
                    }
                }

                if (this.isDelim(EXCLAMATIONMARK$1)) {
                    important = getImportant.call(this);
                    this.skipSC();
                }

                // Do not include semicolon to range per spec
                // https://drafts.csswg.org/css-syntax/#declaration-diagram

                if (this.eof === false &&
                    this.tokenType !== Semicolon &&
                    this.isBalanceEdge(startToken) === false) {
                    this.error();
                }

                return {
                    type: 'Declaration',
                    loc: this.getLocation(start, this.tokenStart),
                    important,
                    property,
                    value
                };
            }

            function generate$t(node) {
                this.token(Ident, node.property);
                this.token(Colon, ':');
                this.node(node.value);

                if (node.important) {
                    this.token(Delim, '!');
                    this.token(Ident, node.important === true ? 'important' : node.important);
                }
            }

            function readProperty() {
                const start = this.tokenStart;

                // hacks
                if (this.tokenType === Delim) {
                    switch (this.charCodeAt(this.tokenStart)) {
                        case ASTERISK$3:
                        case DOLLARSIGN:
                        case PLUSSIGN$3:
                        case NUMBERSIGN$2:
                        case AMPERSAND:
                            this.next();
                            break;

                        // TODO: not sure we should support this hack
                        case SOLIDUS$3:
                            this.next();
                            if (this.isDelim(SOLIDUS$3)) {
                                this.next();
                            }
                            break;
                    }
                }

                if (this.tokenType === Hash$1) {
                    this.eat(Hash$1);
                } else {
                    this.eat(Ident);
                }

                return this.substrToCursor(start);
            }

            // ! ws* important
            function getImportant() {
                this.eat(Delim);
                this.skipSC();

                const important = this.consume(Ident);

                // store original value in case it differ from `important`
                // for better original source restoring and hacks like `!ie` support
                return important === 'important' ? true : important;
            }

            var Declaration = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$s,
                walkContext: walkContext$6,
                structure: structure$s,
                parse: parse$t,
                generate: generate$t
            });

            function consumeRaw$3(startToken) {
                return this.Raw(startToken, this.consumeUntilSemicolonIncluded, true);
            }

            const name$r = 'DeclarationList';
            const structure$r = {
                children: [[
                    'Declaration'
                ]]
            };

            function parse$s() {
                const children = this.createList();

                while (!this.eof) {
                    switch (this.tokenType) {
                        case WhiteSpace$1:
                        case Comment$1:
                        case Semicolon:
                            this.next();
                            break;

                        default:
                            children.push(this.parseWithFallback(this.Declaration, consumeRaw$3));
                    }
                }

                return {
                    type: 'DeclarationList',
                    loc: this.getLocationFromList(children),
                    children
                };
            }

            function generate$s(node) {
                this.children(node, prev => {
                    if (prev.type === 'Declaration') {
                        this.token(Semicolon, ';');
                    }
                });
            }

            var DeclarationList = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$r,
                structure: structure$r,
                parse: parse$s,
                generate: generate$s
            });

            const name$q = 'Dimension';
            const structure$q = {
                value: String,
                unit: String
            };

            function parse$r() {
                const start = this.tokenStart;
                const value = this.consumeNumber(Dimension$1);

                return {
                    type: 'Dimension',
                    loc: this.getLocation(start, this.tokenStart),
                    value,
                    unit: this.substring(start + value.length, this.tokenStart)
                };
            }

            function generate$r(node) {
                this.token(Dimension$1, node.value + node.unit);
            }

            var Dimension = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$q,
                structure: structure$q,
                parse: parse$r,
                generate: generate$r
            });

            const name$p = 'Function';
            const walkContext$5 = 'function';
            const structure$p = {
                name: String,
                children: [[]]
            };

            // <function-token> <sequence> )
            function parse$q(readSequence, recognizer) {
                const start = this.tokenStart;
                const name = this.consumeFunctionName();
                const nameLowerCase = name.toLowerCase();
                let children;

                children = recognizer.hasOwnProperty(nameLowerCase)
                    ? recognizer[nameLowerCase].call(this, recognizer)
                    : readSequence.call(this, recognizer);

                if (!this.eof) {
                    this.eat(RightParenthesis);
                }

                return {
                    type: 'Function',
                    loc: this.getLocation(start, this.tokenStart),
                    name,
                    children
                };
            }

            function generate$q(node) {
                this.token(Function$1, node.name + '(');
                this.children(node);
                this.token(RightParenthesis, ')');
            }

            var Function = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$p,
                walkContext: walkContext$5,
                structure: structure$p,
                parse: parse$q,
                generate: generate$q
            });

            // '#' ident
            const xxx = 'XXX';
            const name$o = 'Hash';
            const structure$o = {
                value: String
            };
            function parse$p() {
                const start = this.tokenStart;

                this.eat(Hash$1);

                return {
                    type: 'Hash',
                    loc: this.getLocation(start, this.tokenStart),
                    value: this.substrToCursor(start + 1)
                };
            }
            function generate$p(node) {
                this.token(Hash$1, '#' + node.value);
            }

            var Hash = /*#__PURE__*/Object.freeze({
                __proto__: null,
                xxx: xxx,
                name: name$o,
                structure: structure$o,
                parse: parse$p,
                generate: generate$p
            });

            const name$n = 'Identifier';
            const structure$n = {
                name: String
            };

            function parse$o() {
                return {
                    type: 'Identifier',
                    loc: this.getLocation(this.tokenStart, this.tokenEnd),
                    name: this.consume(Ident)
                };
            }

            function generate$o(node) {
                this.token(Ident, node.name);
            }

            var Identifier = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$n,
                structure: structure$n,
                parse: parse$o,
                generate: generate$o
            });

            const name$m = 'IdSelector';
            const structure$m = {
                name: String
            };

            function parse$n() {
                const start = this.tokenStart;

                // TODO: check value is an ident
                this.eat(Hash$1);

                return {
                    type: 'IdSelector',
                    loc: this.getLocation(start, this.tokenStart),
                    name: this.substrToCursor(start + 1)
                };
            }

            function generate$n(node) {
                // Using Delim instead of Hash is a hack to avoid for a whitespace between ident and id-selector
                // in safe mode (e.g. "a#id"), because IE11 doesn't allow a sequence <ident-token> <hash-token>
                // without a whitespace in values (e.g. "1px solid#000")
                this.token(Delim, '#' + node.name);
            }

            var IdSelector = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$m,
                structure: structure$m,
                parse: parse$n,
                generate: generate$n
            });

            const name$l = 'MediaFeature';
            const structure$l = {
                name: String,
                value: ['Identifier', 'Number', 'Dimension', 'Ratio', null]
            };

            function parse$m() {
                const start = this.tokenStart;
                let name;
                let value = null;

                this.eat(LeftParenthesis);
                this.skipSC();

                name = this.consume(Ident);
                this.skipSC();

                if (this.tokenType !== RightParenthesis) {
                    this.eat(Colon);
                    this.skipSC();

                    switch (this.tokenType) {
                        case Number$2:
                            if (this.lookupNonWSType(1) === Delim) {
                                value = this.Ratio();
                            } else {
                                value = this.Number();
                            }

                            break;

                        case Dimension$1:
                            value = this.Dimension();
                            break;

                        case Ident:
                            value = this.Identifier();
                            break;

                        default:
                            this.error('Number, dimension, ratio or identifier is expected');
                    }

                    this.skipSC();
                }

                this.eat(RightParenthesis);

                return {
                    type: 'MediaFeature',
                    loc: this.getLocation(start, this.tokenStart),
                    name,
                    value
                };
            }

            function generate$m(node) {
                this.token(LeftParenthesis, '(');
                this.token(Ident, node.name);

                if (node.value !== null) {
                    this.token(Colon, ':');
                    this.node(node.value);
                }

                this.token(RightParenthesis, ')');
            }

            var MediaFeature = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$l,
                structure: structure$l,
                parse: parse$m,
                generate: generate$m
            });

            const name$k = 'MediaQuery';
            const structure$k = {
                children: [[
                    'Identifier',
                    'MediaFeature',
                    'WhiteSpace'
                ]]
            };

            function parse$l() {
                const children = this.createList();
                let child = null;

                this.skipSC();

                scan:
                while (!this.eof) {
                    switch (this.tokenType) {
                        case Comment$1:
                        case WhiteSpace$1:
                            this.next();
                            continue;

                        case Ident:
                            child = this.Identifier();
                            break;

                        case LeftParenthesis:
                            child = this.MediaFeature();
                            break;

                        default:
                            break scan;
                    }

                    children.push(child);
                }

                if (child === null) {
                    this.error('Identifier or parenthesis is expected');
                }

                return {
                    type: 'MediaQuery',
                    loc: this.getLocationFromList(children),
                    children
                };
            }

            function generate$l(node) {
                this.children(node);
            }

            var MediaQuery = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$k,
                structure: structure$k,
                parse: parse$l,
                generate: generate$l
            });

            const name$j = 'MediaQueryList';
            const structure$j = {
                children: [[
                    'MediaQuery'
                ]]
            };

            function parse$k() {
                const children = this.createList();

                this.skipSC();

                while (!this.eof) {
                    children.push(this.MediaQuery());

                    if (this.tokenType !== Comma) {
                        break;
                    }

                    this.next();
                }

                return {
                    type: 'MediaQueryList',
                    loc: this.getLocationFromList(children),
                    children
                };
            }

            function generate$k(node) {
                this.children(node, () => this.token(Comma, ','));
            }

            var MediaQueryList = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$j,
                structure: structure$j,
                parse: parse$k,
                generate: generate$k
            });

            const name$i = 'Nth';
            const structure$i = {
                nth: ['AnPlusB', 'Identifier'],
                selector: ['SelectorList', null]
            };

            function parse$j() {
                this.skipSC();

                const start = this.tokenStart;
                let end = start;
                let selector = null;
                let nth;

                if (this.lookupValue(0, 'odd') || this.lookupValue(0, 'even')) {
                    nth = this.Identifier();
                } else {
                    nth = this.AnPlusB();
                }

                end = this.tokenStart;
                this.skipSC();

                if (this.lookupValue(0, 'of')) {
                    this.next();

                    selector = this.SelectorList();
                    end = this.tokenStart;
                }

                return {
                    type: 'Nth',
                    loc: this.getLocation(start, end),
                    nth,
                    selector
                };
            }

            function generate$j(node) {
                this.node(node.nth);
                if (node.selector !== null) {
                    this.token(Ident, 'of');
                    this.node(node.selector);
                }
            }

            var Nth = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$i,
                structure: structure$i,
                parse: parse$j,
                generate: generate$j
            });

            const name$h = 'Number';
            const structure$h = {
                value: String
            };

            function parse$i() {
                return {
                    type: 'Number',
                    loc: this.getLocation(this.tokenStart, this.tokenEnd),
                    value: this.consume(Number$2)
                };
            }

            function generate$i(node) {
                this.token(Number$2, node.value);
            }

            var Number$1 = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$h,
                structure: structure$h,
                parse: parse$i,
                generate: generate$i
            });

            // '/' | '*' | ',' | ':' | '+' | '-'
            const name$g = 'Operator';
            const structure$g = {
                value: String
            };

            function parse$h() {
                const start = this.tokenStart;

                this.next();

                return {
                    type: 'Operator',
                    loc: this.getLocation(start, this.tokenStart),
                    value: this.substrToCursor(start)
                };
            }

            function generate$h(node) {
                this.tokenize(node.value);
            }

            var Operator = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$g,
                structure: structure$g,
                parse: parse$h,
                generate: generate$h
            });

            const name$f = 'Parentheses';
            const structure$f = {
                children: [[]]
            };

            function parse$g(readSequence, recognizer) {
                const start = this.tokenStart;
                let children = null;

                this.eat(LeftParenthesis);

                children = readSequence.call(this, recognizer);

                if (!this.eof) {
                    this.eat(RightParenthesis);
                }

                return {
                    type: 'Parentheses',
                    loc: this.getLocation(start, this.tokenStart),
                    children
                };
            }

            function generate$g(node) {
                this.token(LeftParenthesis, '(');
                this.children(node);
                this.token(RightParenthesis, ')');
            }

            var Parentheses = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$f,
                structure: structure$f,
                parse: parse$g,
                generate: generate$g
            });

            const name$e = 'Percentage';
            const structure$e = {
                value: String
            };

            function parse$f() {
                return {
                    type: 'Percentage',
                    loc: this.getLocation(this.tokenStart, this.tokenEnd),
                    value: this.consumeNumber(Percentage$1)
                };
            }

            function generate$f(node) {
                this.token(Percentage$1, node.value + '%');
            }

            var Percentage = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$e,
                structure: structure$e,
                parse: parse$f,
                generate: generate$f
            });

            const name$d = 'PseudoClassSelector';
            const walkContext$4 = 'function';
            const structure$d = {
                name: String,
                children: [['Raw'], null]
            };

            // : [ <ident> | <function-token> <any-value>? ) ]
            function parse$e() {
                const start = this.tokenStart;
                let children = null;
                let name;
                let nameLowerCase;

                this.eat(Colon);

                if (this.tokenType === Function$1) {
                    name = this.consumeFunctionName();
                    nameLowerCase = name.toLowerCase();

                    if (hasOwnProperty.call(this.pseudo, nameLowerCase)) {
                        this.skipSC();
                        children = this.pseudo[nameLowerCase].call(this);
                        this.skipSC();
                    } else {
                        children = this.createList();
                        children.push(
                            this.Raw(this.tokenIndex, null, false)
                        );
                    }

                    this.eat(RightParenthesis);
                } else {
                    name = this.consume(Ident);
                }

                return {
                    type: 'PseudoClassSelector',
                    loc: this.getLocation(start, this.tokenStart),
                    name,
                    children
                };
            }

            function generate$e(node) {
                this.token(Colon, ':');

                if (node.children === null) {
                    this.token(Ident, node.name);
                } else {
                    this.token(Function$1, node.name + '(');
                    this.children(node);
                    this.token(RightParenthesis, ')');
                }
            }

            var PseudoClassSelector = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$d,
                walkContext: walkContext$4,
                structure: structure$d,
                parse: parse$e,
                generate: generate$e
            });

            const name$c = 'PseudoElementSelector';
            const walkContext$3 = 'function';
            const structure$c = {
                name: String,
                children: [['Raw'], null]
            };

            // :: [ <ident> | <function-token> <any-value>? ) ]
            function parse$d() {
                const start = this.tokenStart;
                let children = null;
                let name;
                let nameLowerCase;

                this.eat(Colon);
                this.eat(Colon);

                if (this.tokenType === Function$1) {
                    name = this.consumeFunctionName();
                    nameLowerCase = name.toLowerCase();

                    if (hasOwnProperty.call(this.pseudo, nameLowerCase)) {
                        this.skipSC();
                        children = this.pseudo[nameLowerCase].call(this);
                        this.skipSC();
                    } else {
                        children = this.createList();
                        children.push(
                            this.Raw(this.tokenIndex, null, false)
                        );
                    }

                    this.eat(RightParenthesis);
                } else {
                    name = this.consume(Ident);
                }

                return {
                    type: 'PseudoElementSelector',
                    loc: this.getLocation(start, this.tokenStart),
                    name,
                    children
                };
            }

            function generate$d(node) {
                this.token(Colon, ':');
                this.token(Colon, ':');

                if (node.children === null) {
                    this.token(Ident, node.name);
                } else {
                    this.token(Function$1, node.name + '(');
                    this.children(node);
                    this.token(RightParenthesis, ')');
                }
            }

            var PseudoElementSelector = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$c,
                walkContext: walkContext$3,
                structure: structure$c,
                parse: parse$d,
                generate: generate$d
            });

            const SOLIDUS$2 = 0x002F;  // U+002F SOLIDUS (/)
            const FULLSTOP$1 = 0x002E; // U+002E FULL STOP (.)

            // Terms of <ratio> should be a positive numbers (not zero or negative)
            // (see https://drafts.csswg.org/mediaqueries-3/#values)
            // However, -o-min-device-pixel-ratio takes fractional values as a ratio's term
            // and this is using by various sites. Therefore we relax checking on parse
            // to test a term is unsigned number without an exponent part.
            // Additional checking may be applied on lexer validation.
            function consumeNumber() {
                this.skipSC();

                const value = this.consume(Number$2);

                for (let i = 0; i < value.length; i++) {
                    const code = value.charCodeAt(i);
                    if (!isDigit(code) && code !== FULLSTOP$1) {
                        this.error('Unsigned number is expected', this.tokenStart - value.length + i);
                    }
                }

                if (Number(value) === 0) {
                    this.error('Zero number is not allowed', this.tokenStart - value.length);
                }

                return value;
            }

            const name$b = 'Ratio';
            const structure$b = {
                left: String,
                right: String
            };

            // <positive-integer> S* '/' S* <positive-integer>
            function parse$c() {
                const start = this.tokenStart;
                const left = consumeNumber.call(this);
                let right;

                this.skipSC();
                this.eatDelim(SOLIDUS$2);
                right = consumeNumber.call(this);

                return {
                    type: 'Ratio',
                    loc: this.getLocation(start, this.tokenStart),
                    left,
                    right
                };
            }

            function generate$c(node) {
                this.token(Number$2, node.left);
                this.token(Delim, '/');
                this.token(Number$2, node.right);
            }

            var Ratio = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$b,
                structure: structure$b,
                parse: parse$c,
                generate: generate$c
            });

            function getOffsetExcludeWS() {
                if (this.tokenIndex > 0) {
                    if (this.lookupType(-1) === WhiteSpace$1) {
                        return this.tokenIndex > 1
                            ? this.getTokenStart(this.tokenIndex - 1)
                            : this.firstCharOffset;
                    }
                }

                return this.tokenStart;
            }

            const name$a = 'Raw';
            const structure$a = {
                value: String
            };

            function parse$b(startToken, consumeUntil, excludeWhiteSpace) {
                const startOffset = this.getTokenStart(startToken);
                let endOffset;

                this.skipUntilBalanced(startToken, consumeUntil || this.consumeUntilBalanceEnd);

                if (excludeWhiteSpace && this.tokenStart > startOffset) {
                    endOffset = getOffsetExcludeWS.call(this);
                } else {
                    endOffset = this.tokenStart;
                }

                return {
                    type: 'Raw',
                    loc: this.getLocation(startOffset, endOffset),
                    value: this.substring(startOffset, endOffset)
                };
            }

            function generate$b(node) {
                this.tokenize(node.value);
            }

            var Raw = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$a,
                structure: structure$a,
                parse: parse$b,
                generate: generate$b
            });

            function consumeRaw$2(startToken) {
                return this.Raw(startToken, this.consumeUntilLeftCurlyBracket, true);
            }

            function consumePrelude() {
                const prelude = this.SelectorList();

                if (prelude.type !== 'Raw' &&
                    this.eof === false &&
                    this.tokenType !== LeftCurlyBracket) {
                    this.error();
                }

                return prelude;
            }

            const name$9 = 'Rule';
            const walkContext$2 = 'rule';
            const structure$9 = {
                prelude: ['SelectorList', 'Raw'],
                block: ['Block']
            };

            function parse$a() {
                const startToken = this.tokenIndex;
                const startOffset = this.tokenStart;
                let prelude;
                let block;

                if (this.parseRulePrelude) {
                    prelude = this.parseWithFallback(consumePrelude, consumeRaw$2);
                } else {
                    prelude = consumeRaw$2.call(this, startToken);
                }

                block = this.Block(true);

                return {
                    type: 'Rule',
                    loc: this.getLocation(startOffset, this.tokenStart),
                    prelude,
                    block
                };
            }
            function generate$a(node) {
                this.node(node.prelude);
                this.node(node.block);
            }

            var Rule = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$9,
                walkContext: walkContext$2,
                structure: structure$9,
                parse: parse$a,
                generate: generate$a
            });

            const name$8 = 'Selector';
            const structure$8 = {
                children: [[
                    'TypeSelector',
                    'IdSelector',
                    'ClassSelector',
                    'AttributeSelector',
                    'PseudoClassSelector',
                    'PseudoElementSelector',
                    'Combinator',
                    'WhiteSpace'
                ]]
            };

            function parse$9() {
                const children = this.readSequence(this.scope.Selector);

                // nothing were consumed
                if (this.getFirstListNode(children) === null) {
                    this.error('Selector is expected');
                }

                return {
                    type: 'Selector',
                    loc: this.getLocationFromList(children),
                    children
                };
            }

            function generate$9(node) {
                this.children(node);
            }

            var Selector = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$8,
                structure: structure$8,
                parse: parse$9,
                generate: generate$9
            });

            const name$7 = 'SelectorList';
            const walkContext$1 = 'selector';
            const structure$7 = {
                children: [[
                    'Selector',
                    'Raw'
                ]]
            };

            function parse$8() {
                const children = this.createList();

                while (!this.eof) {
                    children.push(this.Selector());

                    if (this.tokenType === Comma) {
                        this.next();
                        continue;
                    }

                    break;
                }

                return {
                    type: 'SelectorList',
                    loc: this.getLocationFromList(children),
                    children
                };
            }

            function generate$8(node) {
                this.children(node, () => this.token(Comma, ','));
            }

            var SelectorList = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$7,
                walkContext: walkContext$1,
                structure: structure$7,
                parse: parse$8,
                generate: generate$8
            });

            const REVERSE_SOLIDUS$1 = 0x005c; // U+005C REVERSE SOLIDUS (\)
            const QUOTATION_MARK$1 = 0x0022;  // "
            const APOSTROPHE$1 = 0x0027;      // '

            function decode$1(str) {
                const len = str.length;
                const firstChar = str.charCodeAt(0);
                const start = firstChar === QUOTATION_MARK$1 || firstChar === APOSTROPHE$1 ? 1 : 0;
                const end = start === 1 && len > 1 && str.charCodeAt(len - 1) === firstChar ? len - 2 : len - 1;
                let decoded = '';

                for (let i = start; i <= end; i++) {
                    let code = str.charCodeAt(i);

                    if (code === REVERSE_SOLIDUS$1) {
                        // special case at the ending
                        if (i === end) {
                            // if the next input code point is EOF, do nothing
                            // otherwise include last quote as escaped
                            if (i !== len - 1) {
                                decoded = str.substr(i + 1);
                            }
                            break;
                        }

                        code = str.charCodeAt(++i);

                        // consume escaped
                        if (isValidEscape(REVERSE_SOLIDUS$1, code)) {
                            const escapeStart = i - 1;
                            const escapeEnd = consumeEscaped(str, escapeStart);

                            i = escapeEnd - 1;
                            decoded += decodeEscaped(str.substring(escapeStart + 1, escapeEnd));
                        } else {
                            // \r\n
                            if (code === 0x000d && str.charCodeAt(i + 1) === 0x000a) {
                                i++;
                            }
                        }
                    } else {
                        decoded += str[i];
                    }
                }

                return decoded;
            }

            // https://drafts.csswg.org/cssom/#serialize-a-string
            // § 2.1. Common Serializing Idioms
            function encode$1(str, apostrophe) {
                const quote = apostrophe ? '\'' : '"';
                const quoteCode = apostrophe ? APOSTROPHE$1 : QUOTATION_MARK$1;
                let encoded = '';
                let wsBeforeHexIsNeeded = false;

                for (let i = 0; i < str.length; i++) {
                    const code = str.charCodeAt(i);

                    // If the character is NULL (U+0000), then the REPLACEMENT CHARACTER (U+FFFD).
                    if (code === 0x0000) {
                        encoded += '\uFFFD';
                        continue;
                    }

                    // If the character is in the range [\1-\1f] (U+0001 to U+001F) or is U+007F,
                    // the character escaped as code point.
                    // Note: Do not compare with 0x0001 since 0x0000 is precessed before
                    if (code <= 0x001f || code === 0x007F) {
                        encoded += '\\' + code.toString(16);
                        wsBeforeHexIsNeeded = true;
                        continue;
                    }

                    // If the character is '"' (U+0022) or "\" (U+005C), the escaped character.
                    if (code === quoteCode || code === REVERSE_SOLIDUS$1) {
                        encoded += '\\' + str.charAt(i);
                        wsBeforeHexIsNeeded = false;
                    } else {
                        if (wsBeforeHexIsNeeded && (isHexDigit(code) || isWhiteSpace(code))) {
                            encoded += ' ';
                        }

                        // Otherwise, the character itself.
                        encoded += str.charAt(i);
                        wsBeforeHexIsNeeded = false;
                    }
                }

                return quote + encoded + quote;
            }

            const name$6 = 'String';
            const structure$6 = {
                value: String
            };

            function parse$7() {
                return {
                    type: 'String',
                    loc: this.getLocation(this.tokenStart, this.tokenEnd),
                    value: decode$1(this.consume(String$2))
                };
            }

            function generate$7(node) {
                this.token(String$2, encode$1(node.value));
            }

            var String$1 = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$6,
                structure: structure$6,
                parse: parse$7,
                generate: generate$7
            });

            const EXCLAMATIONMARK = 0x0021; // U+0021 EXCLAMATION MARK (!)

            function consumeRaw$1(startToken) {
                return this.Raw(startToken, null, false);
            }

            const name$5 = 'StyleSheet';
            const walkContext = 'stylesheet';
            const structure$5 = {
                children: [[
                    'Comment',
                    'CDO',
                    'CDC',
                    'Atrule',
                    'Rule',
                    'Raw'
                ]]
            };

            function parse$6() {
                const start = this.tokenStart;
                const children = this.createList();
                let child;

                while (!this.eof) {
                    switch (this.tokenType) {
                        case WhiteSpace$1:
                            this.next();
                            continue;

                        case Comment$1:
                            // ignore comments except exclamation comments (i.e. /*! .. */) on top level
                            if (this.charCodeAt(this.tokenStart + 2) !== EXCLAMATIONMARK) {
                                this.next();
                                continue;
                            }

                            child = this.Comment();
                            break;

                        case CDO$1: // <!--
                            child = this.CDO();
                            break;

                        case CDC$1: // -->
                            child = this.CDC();
                            break;

                        // CSS Syntax Module Level 3
                        // §2.2 Error handling
                        // At the "top level" of a stylesheet, an <at-keyword-token> starts an at-rule.
                        case AtKeyword:
                            child = this.parseWithFallback(this.Atrule, consumeRaw$1);
                            break;

                        // Anything else starts a qualified rule ...
                        default:
                            child = this.parseWithFallback(this.Rule, consumeRaw$1);
                    }

                    children.push(child);
                }

                return {
                    type: 'StyleSheet',
                    loc: this.getLocation(start, this.tokenStart),
                    children
                };
            }

            function generate$6(node) {
                this.children(node);
            }

            var StyleSheet = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$5,
                walkContext: walkContext,
                structure: structure$5,
                parse: parse$6,
                generate: generate$6
            });

            const ASTERISK$2 = 0x002A;     // U+002A ASTERISK (*)
            const VERTICALLINE$1 = 0x007C; // U+007C VERTICAL LINE (|)

            function eatIdentifierOrAsterisk() {
                if (this.tokenType !== Ident &&
                    this.isDelim(ASTERISK$2) === false) {
                    this.error('Identifier or asterisk is expected');
                }

                this.next();
            }

            const name$4 = 'TypeSelector';
            const structure$4 = {
                name: String
            };

            // ident
            // ident|ident
            // ident|*
            // *
            // *|ident
            // *|*
            // |ident
            // |*
            function parse$5() {
                const start = this.tokenStart;

                if (this.isDelim(VERTICALLINE$1)) {
                    this.next();
                    eatIdentifierOrAsterisk.call(this);
                } else {
                    eatIdentifierOrAsterisk.call(this);

                    if (this.isDelim(VERTICALLINE$1)) {
                        this.next();
                        eatIdentifierOrAsterisk.call(this);
                    }
                }

                return {
                    type: 'TypeSelector',
                    loc: this.getLocation(start, this.tokenStart),
                    name: this.substrToCursor(start)
                };
            }

            function generate$5(node) {
                this.tokenize(node.name);
            }

            var TypeSelector = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$4,
                structure: structure$4,
                parse: parse$5,
                generate: generate$5
            });

            const PLUSSIGN$2 = 0x002B;     // U+002B PLUS SIGN (+)
            const HYPHENMINUS$1 = 0x002D;  // U+002D HYPHEN-MINUS (-)
            const QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)

            function eatHexSequence(offset, allowDash) {
                let len = 0;

                for (let pos = this.tokenStart + offset; pos < this.tokenEnd; pos++) {
                    const code = this.charCodeAt(pos);

                    if (code === HYPHENMINUS$1 && allowDash && len !== 0) {
                        eatHexSequence.call(this, offset + len + 1, false);
                        return -1;
                    }

                    if (!isHexDigit(code)) {
                        this.error(
                            allowDash && len !== 0
                                ? 'Hyphen minus' + (len < 6 ? ' or hex digit' : '') + ' is expected'
                                : (len < 6 ? 'Hex digit is expected' : 'Unexpected input'),
                            pos
                        );
                    }

                    if (++len > 6) {
                        this.error('Too many hex digits', pos);
                    }    }

                this.next();
                return len;
            }

            function eatQuestionMarkSequence(max) {
                let count = 0;

                while (this.isDelim(QUESTIONMARK)) {
                    if (++count > max) {
                        this.error('Too many question marks');
                    }

                    this.next();
                }
            }

            function startsWith(code) {
                if (this.charCodeAt(this.tokenStart) !== code) {
                    this.error((code === PLUSSIGN$2 ? 'Plus sign' : 'Hyphen minus') + ' is expected');
                }
            }

            // https://drafts.csswg.org/css-syntax/#urange
            // Informally, the <urange> production has three forms:
            // U+0001
            //      Defines a range consisting of a single code point, in this case the code point "1".
            // U+0001-00ff
            //      Defines a range of codepoints between the first and the second value, in this case
            //      the range between "1" and "ff" (255 in decimal) inclusive.
            // U+00??
            //      Defines a range of codepoints where the "?" characters range over all hex digits,
            //      in this case defining the same as the value U+0000-00ff.
            // In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat "?" as a hexadecimal digit).
            //
            // <urange> =
            //   u '+' <ident-token> '?'* |
            //   u <dimension-token> '?'* |
            //   u <number-token> '?'* |
            //   u <number-token> <dimension-token> |
            //   u <number-token> <number-token> |
            //   u '+' '?'+
            function scanUnicodeRange() {
                let hexLength = 0;

                switch (this.tokenType) {
                    case Number$2:
                        // u <number-token> '?'*
                        // u <number-token> <dimension-token>
                        // u <number-token> <number-token>
                        hexLength = eatHexSequence.call(this, 1, true);

                        if (this.isDelim(QUESTIONMARK)) {
                            eatQuestionMarkSequence.call(this, 6 - hexLength);
                            break;
                        }

                        if (this.tokenType === Dimension$1 ||
                            this.tokenType === Number$2) {
                            startsWith.call(this, HYPHENMINUS$1);
                            eatHexSequence.call(this, 1, false);
                            break;
                        }

                        break;

                    case Dimension$1:
                        // u <dimension-token> '?'*
                        hexLength = eatHexSequence.call(this, 1, true);

                        if (hexLength > 0) {
                            eatQuestionMarkSequence.call(this, 6 - hexLength);
                        }

                        break;

                    default:
                        // u '+' <ident-token> '?'*
                        // u '+' '?'+
                        this.eatDelim(PLUSSIGN$2);

                        if (this.tokenType === Ident) {
                            hexLength = eatHexSequence.call(this, 0, true);
                            if (hexLength > 0) {
                                eatQuestionMarkSequence.call(this, 6 - hexLength);
                            }
                            break;
                        }

                        if (this.isDelim(QUESTIONMARK)) {
                            this.next();
                            eatQuestionMarkSequence.call(this, 5);
                            break;
                        }

                        this.error('Hex digit or question mark is expected');
                }
            }

            const name$3 = 'UnicodeRange';
            const structure$3 = {
                value: String
            };

            function parse$4() {
                const start = this.tokenStart;

                // U or u
                this.eatIdent('u');
                scanUnicodeRange.call(this);

                return {
                    type: 'UnicodeRange',
                    loc: this.getLocation(start, this.tokenStart),
                    value: this.substrToCursor(start)
                };
            }

            function generate$4(node) {
                this.tokenize(node.value);
            }

            var UnicodeRange = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$3,
                structure: structure$3,
                parse: parse$4,
                generate: generate$4
            });

            const SPACE$1 = 0x0020;            // U+0020 SPACE
            const REVERSE_SOLIDUS = 0x005c;  // U+005C REVERSE SOLIDUS (\)
            const QUOTATION_MARK = 0x0022;   // "
            const APOSTROPHE = 0x0027;       // '
            const LEFTPARENTHESIS = 0x0028;  // U+0028 LEFT PARENTHESIS (()
            const RIGHTPARENTHESIS = 0x0029; // U+0029 RIGHT PARENTHESIS ())

            function decode(str) {
                const len = str.length;
                let start = 4; // length of "url("
                let end = str.charCodeAt(len - 1) === RIGHTPARENTHESIS ? len - 2 : len - 1;
                let decoded = '';

                while (start < end && isWhiteSpace(str.charCodeAt(start))) {
                    start++;
                }

                while (start < end && isWhiteSpace(str.charCodeAt(end))) {
                    end--;
                }

                for (let i = start; i <= end; i++) {
                    let code = str.charCodeAt(i);

                    if (code === REVERSE_SOLIDUS) {
                        // special case at the ending
                        if (i === end) {
                            // if the next input code point is EOF, do nothing
                            // otherwise include last left parenthesis as escaped
                            if (i !== len - 1) {
                                decoded = str.substr(i + 1);
                            }
                            break;
                        }

                        code = str.charCodeAt(++i);

                        // consume escaped
                        if (isValidEscape(REVERSE_SOLIDUS, code)) {
                            const escapeStart = i - 1;
                            const escapeEnd = consumeEscaped(str, escapeStart);

                            i = escapeEnd - 1;
                            decoded += decodeEscaped(str.substring(escapeStart + 1, escapeEnd));
                        } else {
                            // \r\n
                            if (code === 0x000d && str.charCodeAt(i + 1) === 0x000a) {
                                i++;
                            }
                        }
                    } else {
                        decoded += str[i];
                    }
                }

                return decoded;
            }

            function encode(str) {
                let encoded = '';
                let wsBeforeHexIsNeeded = false;

                for (let i = 0; i < str.length; i++) {
                    const code = str.charCodeAt(i);

                    // If the character is NULL (U+0000), then the REPLACEMENT CHARACTER (U+FFFD).
                    if (code === 0x0000) {
                        encoded += '\uFFFD';
                        continue;
                    }

                    // If the character is in the range [\1-\1f] (U+0001 to U+001F) or is U+007F,
                    // the character escaped as code point.
                    // Note: Do not compare with 0x0001 since 0x0000 is precessed before
                    if (code <= 0x001f || code === 0x007F) {
                        encoded += '\\' + code.toString(16);
                        wsBeforeHexIsNeeded = true;
                        continue;
                    }

                    if (code === SPACE$1 ||
                        code === REVERSE_SOLIDUS ||
                        code === QUOTATION_MARK ||
                        code === APOSTROPHE ||
                        code === LEFTPARENTHESIS ||
                        code === RIGHTPARENTHESIS) {
                        encoded += '\\' + str.charAt(i);
                        wsBeforeHexIsNeeded = false;
                    } else {
                        if (wsBeforeHexIsNeeded && isHexDigit(code)) {
                            encoded += ' ';
                        }

                        encoded += str.charAt(i);
                        wsBeforeHexIsNeeded = false;
                    }
                }

                return 'url(' + encoded + ')';
            }

            const name$2 = 'Url';
            const structure$2 = {
                value: String
            };

            // <url-token> | <function-token> <string> )
            function parse$3() {
                const start = this.tokenStart;
                let value;

                switch (this.tokenType) {
                    case Url$1:
                        value = decode(this.consume(Url$1));
                        break;

                    case Function$1:
                        if (!this.cmpStr(this.tokenStart, this.tokenEnd, 'url(')) {
                            this.error('Function name must be `url`');
                        }

                        this.eat(Function$1);
                        this.skipSC();
                        value = decode$1(this.consume(String$2));
                        this.skipSC();
                        if (!this.eof) {
                            this.eat(RightParenthesis);
                        }
                        break;

                    default:
                        this.error('Url or Function is expected');
                }

                return {
                    type: 'Url',
                    loc: this.getLocation(start, this.tokenStart),
                    value
                };
            }

            function generate$3(node) {
                this.token(Url$1, encode(node.value));
            }

            var Url = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$2,
                structure: structure$2,
                parse: parse$3,
                generate: generate$3
            });

            const name$1 = 'Value';
            const structure$1 = {
                children: [[]]
            };

            function parse$2() {
                const start = this.tokenStart;
                const children = this.readSequence(this.scope.Value);

                return {
                    type: 'Value',
                    loc: this.getLocation(start, this.tokenStart),
                    children
                };
            }

            function generate$2(node) {
                this.children(node);
            }

            var Value = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name$1,
                structure: structure$1,
                parse: parse$2,
                generate: generate$2
            });

            const SPACE = Object.freeze({
                type: 'WhiteSpace',
                loc: null,
                value: ' '
            });

            const name = 'WhiteSpace';
            const structure = {
                value: String
            };

            function parse$1() {
                this.eat(WhiteSpace$1);
                return SPACE;

                // return {
                //     type: 'WhiteSpace',
                //     loc: this.getLocation(this.tokenStart, this.tokenEnd),
                //     value: this.consume(WHITESPACE)
                // };
            }

            function generate$1(node) {
                this.token(WhiteSpace$1, node.value);
            }

            var WhiteSpace = /*#__PURE__*/Object.freeze({
                __proto__: null,
                name: name,
                structure: structure,
                parse: parse$1,
                generate: generate$1
            });

            var node$1 = /*#__PURE__*/Object.freeze({
                __proto__: null,
                AnPlusB: AnPlusB,
                Atrule: Atrule,
                AtrulePrelude: AtrulePrelude,
                AttributeSelector: AttributeSelector,
                Block: Block,
                Brackets: Brackets,
                CDC: CDC,
                CDO: CDO,
                ClassSelector: ClassSelector,
                Combinator: Combinator,
                Comment: Comment,
                Declaration: Declaration,
                DeclarationList: DeclarationList,
                Dimension: Dimension,
                Function: Function,
                Hash: Hash,
                Identifier: Identifier,
                IdSelector: IdSelector,
                MediaFeature: MediaFeature,
                MediaQuery: MediaQuery,
                MediaQueryList: MediaQueryList,
                Nth: Nth,
                Number: Number$1,
                Operator: Operator,
                Parentheses: Parentheses,
                Percentage: Percentage,
                PseudoClassSelector: PseudoClassSelector,
                PseudoElementSelector: PseudoElementSelector,
                Ratio: Ratio,
                Raw: Raw,
                Rule: Rule,
                Selector: Selector,
                SelectorList: SelectorList,
                String: String$1,
                StyleSheet: StyleSheet,
                TypeSelector: TypeSelector,
                UnicodeRange: UnicodeRange,
                Url: Url,
                Value: Value,
                WhiteSpace: WhiteSpace
            });

            var lexerConfig = {
                generic: true,
                ...definitions,
                node: node$1
            };

            const NUMBERSIGN$1 = 0x0023;  // U+0023 NUMBER SIGN (#)
            const ASTERISK$1 = 0x002A;    // U+002A ASTERISK (*)
            const PLUSSIGN$1 = 0x002B;    // U+002B PLUS SIGN (+)
            const HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)
            const SOLIDUS$1 = 0x002F;     // U+002F SOLIDUS (/)
            const U = 0x0075;           // U+0075 LATIN SMALL LETTER U (u)

            function defaultRecognizer(context) {
                switch (this.tokenType) {
                    case Hash$1:
                        return this.Hash();

                    case Comma:
                        return this.Operator();

                    case LeftParenthesis:
                        return this.Parentheses(this.readSequence, context.recognizer);

                    case LeftSquareBracket:
                        return this.Brackets(this.readSequence, context.recognizer);

                    case String$2:
                        return this.String();

                    case Dimension$1:
                        return this.Dimension();

                    case Percentage$1:
                        return this.Percentage();

                    case Number$2:
                        return this.Number();

                    case Function$1:
                        return this.cmpStr(this.tokenStart, this.tokenEnd, 'url(')
                            ? this.Url()
                            : this.Function(this.readSequence, context.recognizer);

                    case Url$1:
                        return this.Url();

                    case Ident:
                        // check for unicode range, it should start with u+ or U+
                        if (this.cmpChar(this.tokenStart, U) &&
                            this.cmpChar(this.tokenStart + 1, PLUSSIGN$1)) {
                            return this.UnicodeRange();
                        } else {
                            return this.Identifier();
                        }

                    case Delim: {
                        const code = this.charCodeAt(this.tokenStart);

                        if (code === SOLIDUS$1 ||
                            code === ASTERISK$1 ||
                            code === PLUSSIGN$1 ||
                            code === HYPHENMINUS) {
                            return this.Operator(); // TODO: replace with Delim
                        }

                        // TODO: produce a node with Delim node type

                        if (code === NUMBERSIGN$1) {
                            this.error('Hex or identifier is expected', this.tokenStart + 1);
                        }

                        break;
                    }
                }
            }

            var atrulePrelude = {
                getNode: defaultRecognizer
            };

            const NUMBERSIGN = 0x0023;      // U+0023 NUMBER SIGN (#)
            const ASTERISK = 0x002A;        // U+002A ASTERISK (*)
            const PLUSSIGN = 0x002B;        // U+002B PLUS SIGN (+)
            const SOLIDUS = 0x002F;         // U+002F SOLIDUS (/)
            const FULLSTOP = 0x002E;        // U+002E FULL STOP (.)
            const GREATERTHANSIGN = 0x003E; // U+003E GREATER-THAN SIGN (>)
            const VERTICALLINE = 0x007C;    // U+007C VERTICAL LINE (|)
            const TILDE = 0x007E;           // U+007E TILDE (~)

            function onWhiteSpace(next, children) {
                if (children.last !== null && children.last.type !== 'Combinator' &&
                    next !== null && next.type !== 'Combinator') {
                    children.push({  // FIXME: this.Combinator() should be used instead
                        type: 'Combinator',
                        loc: null,
                        name: ' '
                    });
                }
            }

            function getNode() {
                switch (this.tokenType) {
                    case LeftSquareBracket:
                        return this.AttributeSelector();

                    case Hash$1:
                        return this.IdSelector();

                    case Colon:
                        if (this.lookupType(1) === Colon) {
                            return this.PseudoElementSelector();
                        } else {
                            return this.PseudoClassSelector();
                        }

                    case Ident:
                        return this.TypeSelector();

                    case Number$2:
                    case Percentage$1:
                        return this.Percentage();

                    case Dimension$1:
                        // throws when .123ident
                        if (this.charCodeAt(this.tokenStart) === FULLSTOP) {
                            this.error('Identifier is expected', this.tokenStart + 1);
                        }
                        break;

                    case Delim: {
                        const code = this.charCodeAt(this.tokenStart);

                        switch (code) {
                            case PLUSSIGN:
                            case GREATERTHANSIGN:
                            case TILDE:
                            case SOLIDUS:  // /deep/
                                return this.Combinator();

                            case FULLSTOP:
                                return this.ClassSelector();

                            case ASTERISK:
                            case VERTICALLINE:
                                return this.TypeSelector();

                            case NUMBERSIGN:
                                return this.IdSelector();
                        }

                        break;
                    }
                }
            }
            var selector$1 = {
                onWhiteSpace,
                getNode
            };

            // legacy IE function
            // expression( <any-value> )
            function expressionFn() {
                return this.createSingleNodeList(
                    this.Raw(this.tokenIndex, null, false)
                );
            }

            // var( <ident> , <value>? )
            function varFn() {
                const children = this.createList();

                this.skipSC();

                // NOTE: Don't check more than a first argument is an ident, rest checks are for lexer
                children.push(this.Identifier());

                this.skipSC();

                if (this.tokenType === Comma) {
                    children.push(this.Operator());

                    const startIndex = this.tokenIndex;
                    const value = this.parseCustomProperty
                        ? this.Value(null)
                        : this.Raw(this.tokenIndex, this.consumeUntilExclamationMarkOrSemicolon, false);

                    if (value.type === 'Value' && value.children.isEmpty) {
                        for (let offset = startIndex - this.tokenIndex; offset <= 0; offset++) {
                            if (this.lookupType(offset) === WhiteSpace$1) {
                                value.children.appendData({
                                    type: 'WhiteSpace',
                                    loc: null,
                                    value: ' '
                                });
                                break;
                            }
                        }
                    }

                    children.push(value);
                }

                return children;
            }

            function isPlusMinusOperator(node) {
                return (
                    node !== null &&
                    node.type === 'Operator' &&
                    (node.value[node.value.length - 1] === '-' || node.value[node.value.length - 1] === '+')
                );
            }

            var value = {
                getNode: defaultRecognizer,
                onWhiteSpace: function(next, children) {
                    if (isPlusMinusOperator(next)) {
                        next.value = ' ' + next.value;
                    }
                    if (isPlusMinusOperator(children.last)) {
                        children.last.value += ' ';
                    }
                },
                'expression': expressionFn,
                'var': varFn
            };

            var scope = /*#__PURE__*/Object.freeze({
                __proto__: null,
                AtrulePrelude: atrulePrelude,
                Selector: selector$1,
                Value: value
            });

            var fontFace = {
                parse: {
                    prelude: null,
                    block() {
                        return this.Block(true);
                    }
                }
            };

            var importAtrule = {
                parse: {
                    prelude() {
                        const children = this.createList();

                        this.skipSC();

                        switch (this.tokenType) {
                            case String$2:
                                children.push(this.String());
                                break;

                            case Url$1:
                            case Function$1:
                                children.push(this.Url());
                                break;

                            default:
                                this.error('String or url() is expected');
                        }

                        if (this.lookupNonWSType(0) === Ident ||
                            this.lookupNonWSType(0) === LeftParenthesis) {
                            children.push(this.MediaQueryList());
                        }

                        return children;
                    },
                    block: null
                }
            };

            var media = {
                parse: {
                    prelude() {
                        return this.createSingleNodeList(
                            this.MediaQueryList()
                        );
                    },
                    block() {
                        return this.Block(false);
                    }
                }
            };

            var page = {
                parse: {
                    prelude() {
                        return this.createSingleNodeList(
                            this.SelectorList()
                        );
                    },
                    block() {
                        return this.Block(true);
                    }
                }
            };

            function consumeRaw() {
                return this.createSingleNodeList(
                    this.Raw(this.tokenIndex, null, false)
                );
            }

            function parentheses() {
                this.skipSC();

                if (this.tokenType === Ident &&
                    this.lookupNonWSType(1) === Colon) {
                    return this.createSingleNodeList(
                        this.Declaration()
                    );
                }

                return readSequence.call(this);
            }

            function readSequence() {
                const children = this.createList();
                let child;

                this.skipSC();

                scan:
                while (!this.eof) {
                    switch (this.tokenType) {
                        case Comment$1:
                        case WhiteSpace$1:
                            this.next();
                            continue;

                        case Function$1:
                            child = this.Function(consumeRaw, this.scope.AtrulePrelude);
                            break;

                        case Ident:
                            child = this.Identifier();
                            break;

                        case LeftParenthesis:
                            child = this.Parentheses(parentheses, this.scope.AtrulePrelude);
                            break;

                        default:
                            break scan;
                    }

                    children.push(child);
                }

                return children;
            }

            var supports = {
                parse: {
                    prelude() {
                        const children = readSequence.call(this);

                        if (this.getFirstListNode(children) === null) {
                            this.error('Condition is expected');
                        }

                        return children;
                    },
                    block() {
                        return this.Block(false);
                    }
                }
            };

            var atrule = {
                'font-face': fontFace,
                'import': importAtrule,
                media,
                page,
                supports
            };

            const selectorList = {
                parse() {
                    return this.createSingleNodeList(
                        this.SelectorList()
                    );
                }
            };

            const selector = {
                parse() {
                    return this.createSingleNodeList(
                        this.Selector()
                    );
                }
            };

            const identList = {
                parse() {
                    return this.createSingleNodeList(
                        this.Identifier()
                    );
                }
            };

            const nth = {
                parse() {
                    return this.createSingleNodeList(
                        this.Nth()
                    );
                }
            };

            var pseudo = {
                'dir': identList,
                'has': selectorList,
                'lang': identList,
                'matches': selectorList,
                'is': selectorList,
                '-moz-any': selectorList,
                '-webkit-any': selectorList,
                'where': selectorList,
                'not': selectorList,
                'nth-child': nth,
                'nth-last-child': nth,
                'nth-last-of-type': nth,
                'nth-of-type': nth,
                'slotted': selector
            };

            var node = /*#__PURE__*/Object.freeze({
                __proto__: null,
                AnPlusB: parse$E,
                Atrule: parse$D,
                AtrulePrelude: parse$C,
                AttributeSelector: parse$B,
                Block: parse$A,
                Brackets: parse$z,
                CDC: parse$y,
                CDO: parse$x,
                ClassSelector: parse$w,
                Combinator: parse$v,
                Comment: parse$u,
                Declaration: parse$t,
                DeclarationList: parse$s,
                Dimension: parse$r,
                Function: parse$q,
                Hash: parse$p,
                Identifier: parse$o,
                IdSelector: parse$n,
                MediaFeature: parse$m,
                MediaQuery: parse$l,
                MediaQueryList: parse$k,
                Nth: parse$j,
                Number: parse$i,
                Operator: parse$h,
                Parentheses: parse$g,
                Percentage: parse$f,
                PseudoClassSelector: parse$e,
                PseudoElementSelector: parse$d,
                Ratio: parse$c,
                Raw: parse$b,
                Rule: parse$a,
                Selector: parse$9,
                SelectorList: parse$8,
                String: parse$7,
                StyleSheet: parse$6,
                TypeSelector: parse$5,
                UnicodeRange: parse$4,
                Url: parse$3,
                Value: parse$2,
                WhiteSpace: parse$1
            });

            var parserConfig = {
                parseContext: {
                    default: 'StyleSheet',
                    stylesheet: 'StyleSheet',
                    atrule: 'Atrule',
                    atrulePrelude: function(options) {
                        return this.AtrulePrelude(options.atrule ? String(options.atrule) : null);
                    },
                    mediaQueryList: 'MediaQueryList',
                    mediaQuery: 'MediaQuery',
                    rule: 'Rule',
                    selectorList: 'SelectorList',
                    selector: 'Selector',
                    block: function() {
                        return this.Block(true);
                    },
                    declarationList: 'DeclarationList',
                    declaration: 'Declaration',
                    value: 'Value'
                },
                scope,
                atrule,
                pseudo,
                node
            };

            var walkerConfig = {
                node: node$1
            };

            var syntax = createSyntax$1({
                ...lexerConfig,
                ...parserConfig,
                ...walkerConfig
            });

            const {
                tokenize,
                parse,
                generate,
                lexer,
                createLexer,

                walk,
                find,
                findLast,
                findAll,

                toPlainObject,
                fromPlainObject,

                fork
            } = syntax;

            const import_meta = {};
            let wasm, cachedTextDecoder = new TextDecoder("utf-8", { ignoreBOM: true, fatal: true });
            cachedTextDecoder.decode();
            let cachegetUint8Memory0 = null;
            function getUint8Memory0() {
              return cachegetUint8Memory0 !== null && cachegetUint8Memory0.buffer === wasm.memory.buffer || (cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer)), cachegetUint8Memory0;
            }
            function getStringFromWasm0(e, t) {
              return cachedTextDecoder.decode(getUint8Memory0().subarray(e, e + t));
            }
            const heap = new Array(32).fill(void 0);
            heap.push(void 0, null, true, false);
            let heap_next = heap.length;
            function addHeapObject(e) {
              heap_next === heap.length && heap.push(heap.length + 1);
              const t = heap_next;
              return heap_next = heap[t], heap[t] = e, t;
            }
            function getObject(e) {
              return heap[e];
            }
            function dropObject(e) {
              e < 36 || (heap[e] = heap_next, heap_next = e);
            }
            function takeObject(e) {
              const t = getObject(e);
              return dropObject(e), t;
            }
            let WASM_VECTOR_LEN = 0, cachedTextEncoder = new TextEncoder("utf-8");
            const encodeString = typeof cachedTextEncoder.encodeInto == "function" ? function(e, t) {
              return cachedTextEncoder.encodeInto(e, t);
            } : function(e, t) {
              const n = cachedTextEncoder.encode(e);
              return t.set(n), { read: e.length, written: n.length };
            };
            function passStringToWasm0(e, t, n) {
              if (n === void 0) {
                const n2 = cachedTextEncoder.encode(e), r2 = t(n2.length);
                return getUint8Memory0().subarray(r2, r2 + n2.length).set(n2), WASM_VECTOR_LEN = n2.length, r2;
              }
              let r = e.length, a = t(r);
              const o = getUint8Memory0();
              let s = 0;
              for (; s < r; s++) {
                const t2 = e.charCodeAt(s);
                if (t2 > 127)
                  break;
                o[a + s] = t2;
              }
              if (s !== r) {
                s !== 0 && (e = e.slice(s)), a = n(a, r, r = s + 3 * e.length);
                const t2 = getUint8Memory0().subarray(a + s, a + r);
                s += encodeString(e, t2).written;
              }
              return WASM_VECTOR_LEN = s, a;
            }
            function isLikeNone(e) {
              return e == null;
            }
            let cachegetInt32Memory0 = null;
            function getInt32Memory0() {
              return cachegetInt32Memory0 !== null && cachegetInt32Memory0.buffer === wasm.memory.buffer || (cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer)), cachegetInt32Memory0;
            }
            function getArrayU8FromWasm0(e, t) {
              return getUint8Memory0().subarray(e / 1, e / 1 + t);
            }
            function compressStringGzip(e) {
              try {
                const o = wasm.__wbindgen_add_to_stack_pointer(-16);
                var t = passStringToWasm0(e, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc), n = WASM_VECTOR_LEN;
                wasm.compressStringGzip(o, t, n);
                var r = getInt32Memory0()[o / 4 + 0], a = getInt32Memory0()[o / 4 + 1];
                let s;
                return r !== 0 && (s = getArrayU8FromWasm0(r, a).slice(), wasm.__wbindgen_free(r, 1 * a)), s;
              } finally {
                wasm.__wbindgen_add_to_stack_pointer(16);
              }
            }
            function handleError(e) {
              return function() {
                try {
                  return e.apply(this, arguments);
                } catch (e2) {
                  wasm.__wbindgen_exn_store(addHeapObject(e2));
                }
              };
            }
            async function load(e, t) {
              if (typeof Response == "function" && e instanceof Response) {
                if (typeof WebAssembly.instantiateStreaming == "function")
                  try {
                    return await WebAssembly.instantiateStreaming(e, t);
                  } catch (t2) {
                    if (e.headers.get("Content-Type") == "application/wasm")
                      throw t2;
                    console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", t2);
                  }
                const n = await e.arrayBuffer();
                return await WebAssembly.instantiate(n, t);
              }
              {
                const n = await WebAssembly.instantiate(e, t);
                return n instanceof WebAssembly.Instance ? { instance: n, module: e } : n;
              }
            }
            async function init(e) {
              e === void 0 && (e = import_meta.url.replace(/\.js$/, "_bg.wasm"));
              const t = { wbg: {} };
              t.wbg.__wbindgen_string_new = function(e2, t2) {
                return addHeapObject(getStringFromWasm0(e2, t2));
              }, t.wbg.__wbg_parse_58b7cdbfa2b3e55a = handleError(function(e2, t2) {
                return addHeapObject(JSON.parse(getStringFromWasm0(e2, t2)));
              }), t.wbg.__wbindgen_object_drop_ref = function(e2) {
                takeObject(e2);
              }, t.wbg.__wbg_stringify_e5f075a4462d77f0 = handleError(function(e2) {
                return addHeapObject(JSON.stringify(getObject(e2)));
              }), t.wbg.__wbindgen_string_get = function(e2, t2) {
                const n2 = getObject(t2);
                var r2 = typeof n2 == "string" ? n2 : void 0, a = isLikeNone(r2) ? 0 : passStringToWasm0(r2, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc), o = WASM_VECTOR_LEN;
                getInt32Memory0()[e2 / 4 + 1] = o, getInt32Memory0()[e2 / 4 + 0] = a;
              }, t.wbg.__wbindgen_throw = function(e2, t2) {
                throw new Error(getStringFromWasm0(e2, t2));
              }, t.wbg.__wbindgen_rethrow = function(e2) {
                throw takeObject(e2);
              }, (typeof e == "string" || typeof Request == "function" && e instanceof Request || typeof URL == "function" && e instanceof URL) && (e = fetch(e));
              const { instance: n, module: r } = await load(await e, t);
              return wasm = n.exports, init.__wbindgen_wasm_module = r, wasm;
            }

            var wasm_gzip_bg = new URL('assets/wasm_gzip_bg-83f4bc01.wasm', module.meta.url).href;

            (function() {
              var module = module || {};
              var parserlib = function() {
                var require;
                require = function e(t, n, r) {
                  function s(o2, u) {
                    if (!n[o2]) {
                      if (!t[o2]) {
                        var a = typeof require == "function" && require;
                        if (!u && a)
                          return a(o2, true);
                        if (i)
                          return i(o2, true);
                        var f = new Error("Cannot find module '" + o2 + "'");
                        throw f.code = "MODULE_NOT_FOUND", f;
                      }
                      var l = n[o2] = { exports: {} };
                      t[o2][0].call(l.exports, function(e2) {
                        var n2 = t[o2][1][e2];
                        return s(n2 ? n2 : e2);
                      }, l, l.exports, e, t, n, r);
                    }
                    return n[o2].exports;
                  }
                  var i = typeof require == "function" && require;
                  for (var o = 0; o < r.length; o++)
                    s(r[o]);
                  return s;
                }({ 1: [function(require2, module2, exports2) {
                  module2.exports = { __proto__: null, aliceblue: "#f0f8ff", antiquewhite: "#faebd7", aqua: "#00ffff", aquamarine: "#7fffd4", azure: "#f0ffff", beige: "#f5f5dc", bisque: "#ffe4c4", black: "#000000", blanchedalmond: "#ffebcd", blue: "#0000ff", blueviolet: "#8a2be2", brown: "#a52a2a", burlywood: "#deb887", cadetblue: "#5f9ea0", chartreuse: "#7fff00", chocolate: "#d2691e", coral: "#ff7f50", cornflowerblue: "#6495ed", cornsilk: "#fff8dc", crimson: "#dc143c", cyan: "#00ffff", darkblue: "#00008b", darkcyan: "#008b8b", darkgoldenrod: "#b8860b", darkgray: "#a9a9a9", darkgrey: "#a9a9a9", darkgreen: "#006400", darkkhaki: "#bdb76b", darkmagenta: "#8b008b", darkolivegreen: "#556b2f", darkorange: "#ff8c00", darkorchid: "#9932cc", darkred: "#8b0000", darksalmon: "#e9967a", darkseagreen: "#8fbc8f", darkslateblue: "#483d8b", darkslategray: "#2f4f4f", darkslategrey: "#2f4f4f", darkturquoise: "#00ced1", darkviolet: "#9400d3", deeppink: "#ff1493", deepskyblue: "#00bfff", dimgray: "#696969", dimgrey: "#696969", dodgerblue: "#1e90ff", firebrick: "#b22222", floralwhite: "#fffaf0", forestgreen: "#228b22", fuchsia: "#ff00ff", gainsboro: "#dcdcdc", ghostwhite: "#f8f8ff", gold: "#ffd700", goldenrod: "#daa520", gray: "#808080", grey: "#808080", green: "#008000", greenyellow: "#adff2f", honeydew: "#f0fff0", hotpink: "#ff69b4", indianred: "#cd5c5c", indigo: "#4b0082", ivory: "#fffff0", khaki: "#f0e68c", lavender: "#e6e6fa", lavenderblush: "#fff0f5", lawngreen: "#7cfc00", lemonchiffon: "#fffacd", lightblue: "#add8e6", lightcoral: "#f08080", lightcyan: "#e0ffff", lightgoldenrodyellow: "#fafad2", lightgray: "#d3d3d3", lightgrey: "#d3d3d3", lightgreen: "#90ee90", lightpink: "#ffb6c1", lightsalmon: "#ffa07a", lightseagreen: "#20b2aa", lightskyblue: "#87cefa", lightslategray: "#778899", lightslategrey: "#778899", lightsteelblue: "#b0c4de", lightyellow: "#ffffe0", lime: "#00ff00", limegreen: "#32cd32", linen: "#faf0e6", magenta: "#ff00ff", maroon: "#800000", mediumaquamarine: "#66cdaa", mediumblue: "#0000cd", mediumorchid: "#ba55d3", mediumpurple: "#9370d8", mediumseagreen: "#3cb371", mediumslateblue: "#7b68ee", mediumspringgreen: "#00fa9a", mediumturquoise: "#48d1cc", mediumvioletred: "#c71585", midnightblue: "#191970", mintcream: "#f5fffa", mistyrose: "#ffe4e1", moccasin: "#ffe4b5", navajowhite: "#ffdead", navy: "#000080", oldlace: "#fdf5e6", olive: "#808000", olivedrab: "#6b8e23", orange: "#ffa500", orangered: "#ff4500", orchid: "#da70d6", palegoldenrod: "#eee8aa", palegreen: "#98fb98", paleturquoise: "#afeeee", palevioletred: "#d87093", papayawhip: "#ffefd5", peachpuff: "#ffdab9", peru: "#cd853f", pink: "#ffc0cb", plum: "#dda0dd", powderblue: "#b0e0e6", purple: "#800080", red: "#ff0000", rosybrown: "#bc8f8f", royalblue: "#4169e1", saddlebrown: "#8b4513", salmon: "#fa8072", sandybrown: "#f4a460", seagreen: "#2e8b57", seashell: "#fff5ee", sienna: "#a0522d", silver: "#c0c0c0", skyblue: "#87ceeb", slateblue: "#6a5acd", slategray: "#708090", slategrey: "#708090", snow: "#fffafa", springgreen: "#00ff7f", steelblue: "#4682b4", tan: "#d2b48c", teal: "#008080", thistle: "#d8bfd8", tomato: "#ff6347", turquoise: "#40e0d0", violet: "#ee82ee", wheat: "#f5deb3", white: "#ffffff", whitesmoke: "#f5f5f5", yellow: "#ffff00", yellowgreen: "#9acd32", currentColor: "The value of the 'color' property.", activeBorder: "Active window border.", activecaption: "Active window caption.", appworkspace: "Background color of multiple document interface.", background: "Desktop background.", buttonface: "The face background color for 3-D elements that appear 3-D due to one layer of surrounding border.", buttonhighlight: "The color of the border facing the light source for 3-D elements that appear 3-D due to one layer of surrounding border.", buttonshadow: "The color of the border away from the light source for 3-D elements that appear 3-D due to one layer of surrounding border.", buttontext: "Text on push buttons.", captiontext: "Text in caption, size box, and scrollbar arrow box.", graytext: "Grayed (disabled) text. This color is set to #000 if the current display driver does not support a solid gray color.", greytext: "Greyed (disabled) text. This color is set to #000 if the current display driver does not support a solid grey color.", highlight: "Item(s) selected in a control.", highlighttext: "Text of item(s) selected in a control.", inactiveborder: "Inactive window border.", inactivecaption: "Inactive window caption.", inactivecaptiontext: "Color of text in an inactive caption.", infobackground: "Background color for tooltip controls.", infotext: "Text color for tooltip controls.", menu: "Menu background.", menutext: "Text in menus.", scrollbar: "Scroll bar gray area.", threeddarkshadow: "The color of the darker (generally outer) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.", threedface: "The face background color for 3-D elements that appear 3-D due to two concentric layers of surrounding border.", threedhighlight: "The color of the lighter (generally outer) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.", threedlightshadow: "The color of the darker (generally inner) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.", threedshadow: "The color of the lighter (generally inner) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.", window: "Window background.", windowframe: "Window frame.", windowtext: "Text in windows." };
                }, {}], 2: [function(require2, module2, exports2) {
                  module2.exports = Combinator;
                  var SyntaxUnit = require2("../util/SyntaxUnit");
                  var Parser = require2("./Parser");
                  function Combinator(text, line, col) {
                    SyntaxUnit.call(this, text, line, col, Parser.COMBINATOR_TYPE);
                    this.type = "unknown";
                    if (/^\s+$/.test(text)) {
                      this.type = "descendant";
                    } else if (text === ">") {
                      this.type = "child";
                    } else if (text === "+") {
                      this.type = "adjacent-sibling";
                    } else if (text === "~") {
                      this.type = "sibling";
                    }
                  }
                  Combinator.prototype = new SyntaxUnit();
                  Combinator.prototype.constructor = Combinator;
                }, { "../util/SyntaxUnit": 26, "./Parser": 6 }], 3: [function(require2, module2, exports2) {
                  module2.exports = Matcher;
                  var StringReader = require2("../util/StringReader");
                  var SyntaxError = require2("../util/SyntaxError");
                  function Matcher(matchFunc, toString) {
                    this.match = function(expression) {
                      var result;
                      expression.mark();
                      result = matchFunc(expression);
                      if (result) {
                        expression.drop();
                      } else {
                        expression.restore();
                      }
                      return result;
                    };
                    this.toString = typeof toString === "function" ? toString : function() {
                      return toString;
                    };
                  }
                  Matcher.prec = { MOD: 5, SEQ: 4, ANDAND: 3, OROR: 2, ALT: 1 };
                  Matcher.parse = function(str) {
                    var reader, eat, expr, oror, andand, seq, mod, term, result;
                    reader = new StringReader(str);
                    eat = function(matcher) {
                      var result2 = reader.readMatch(matcher);
                      if (result2 === null) {
                        throw new SyntaxError("Expected " + matcher, reader.getLine(), reader.getCol());
                      }
                      return result2;
                    };
                    expr = function() {
                      var m = [oror()];
                      while (reader.readMatch(" | ") !== null) {
                        m.push(oror());
                      }
                      return m.length === 1 ? m[0] : Matcher.alt.apply(Matcher, m);
                    };
                    oror = function() {
                      var m = [andand()];
                      while (reader.readMatch(" || ") !== null) {
                        m.push(andand());
                      }
                      return m.length === 1 ? m[0] : Matcher.oror.apply(Matcher, m);
                    };
                    andand = function() {
                      var m = [seq()];
                      while (reader.readMatch(" && ") !== null) {
                        m.push(seq());
                      }
                      return m.length === 1 ? m[0] : Matcher.andand.apply(Matcher, m);
                    };
                    seq = function() {
                      var m = [mod()];
                      while (reader.readMatch(/^ (?![&|\]])/) !== null) {
                        m.push(mod());
                      }
                      return m.length === 1 ? m[0] : Matcher.seq.apply(Matcher, m);
                    };
                    mod = function() {
                      var m = term();
                      if (reader.readMatch("?") !== null) {
                        return m.question();
                      } else if (reader.readMatch("*") !== null) {
                        return m.star();
                      } else if (reader.readMatch("+") !== null) {
                        return m.plus();
                      } else if (reader.readMatch("#") !== null) {
                        return m.hash();
                      } else if (reader.readMatch(/^\{\s*/) !== null) {
                        var min = eat(/^\d+/);
                        eat(/^\s*,\s*/);
                        var max = eat(/^\d+/);
                        eat(/^\s*\}/);
                        return m.braces(+min, +max);
                      }
                      return m;
                    };
                    term = function() {
                      if (reader.readMatch("[ ") !== null) {
                        var m = expr();
                        eat(" ]");
                        return m;
                      }
                      return Matcher.fromType(eat(/^[^ ?*+#{]+/));
                    };
                    result = expr();
                    if (!reader.eof()) {
                      throw new SyntaxError("Expected end of string", reader.getLine(), reader.getCol());
                    }
                    return result;
                  };
                  Matcher.cast = function(m) {
                    if (m instanceof Matcher) {
                      return m;
                    }
                    return Matcher.parse(m);
                  };
                  Matcher.fromType = function(type) {
                    var ValidationTypes = require2("./ValidationTypes");
                    return new Matcher(function(expression) {
                      return expression.hasNext() && ValidationTypes.isType(expression, type);
                    }, type);
                  };
                  Matcher.seq = function() {
                    var ms = Array.prototype.slice.call(arguments).map(Matcher.cast);
                    if (ms.length === 1) {
                      return ms[0];
                    }
                    return new Matcher(function(expression) {
                      var i, result = true;
                      for (i = 0; result && i < ms.length; i++) {
                        result = ms[i].match(expression);
                      }
                      return result;
                    }, function(prec) {
                      var p = Matcher.prec.SEQ;
                      var s = ms.map(function(m) {
                        return m.toString(p);
                      }).join(" ");
                      if (prec > p) {
                        s = "[ " + s + " ]";
                      }
                      return s;
                    });
                  };
                  Matcher.alt = function() {
                    var ms = Array.prototype.slice.call(arguments).map(Matcher.cast);
                    if (ms.length === 1) {
                      return ms[0];
                    }
                    return new Matcher(function(expression) {
                      var i, result = false;
                      for (i = 0; !result && i < ms.length; i++) {
                        result = ms[i].match(expression);
                      }
                      return result;
                    }, function(prec) {
                      var p = Matcher.prec.ALT;
                      var s = ms.map(function(m) {
                        return m.toString(p);
                      }).join(" | ");
                      if (prec > p) {
                        s = "[ " + s + " ]";
                      }
                      return s;
                    });
                  };
                  Matcher.many = function(required) {
                    var ms = Array.prototype.slice.call(arguments, 1).reduce(function(acc, v) {
                      if (v.expand) {
                        var ValidationTypes = require2("./ValidationTypes");
                        acc.push.apply(acc, ValidationTypes.complex[v.expand].options);
                      } else {
                        acc.push(Matcher.cast(v));
                      }
                      return acc;
                    }, []);
                    if (required === true) {
                      required = ms.map(function() {
                        return true;
                      });
                    }
                    var result = new Matcher(function(expression) {
                      var seen = [], max = 0, pass = 0;
                      var success = function(matchCount) {
                        if (pass === 0) {
                          max = Math.max(matchCount, max);
                          return matchCount === ms.length;
                        } else {
                          return matchCount === max;
                        }
                      };
                      var tryMatch = function(matchCount) {
                        for (var i2 = 0; i2 < ms.length; i2++) {
                          if (seen[i2]) {
                            continue;
                          }
                          expression.mark();
                          if (ms[i2].match(expression)) {
                            seen[i2] = true;
                            if (tryMatch(matchCount + (required === false || required[i2] ? 1 : 0))) {
                              expression.drop();
                              return true;
                            }
                            expression.restore();
                            seen[i2] = false;
                          } else {
                            expression.drop();
                          }
                        }
                        return success(matchCount);
                      };
                      if (!tryMatch(0)) {
                        pass++;
                        tryMatch(0);
                      }
                      if (required === false) {
                        return max > 0;
                      }
                      for (var i = 0; i < ms.length; i++) {
                        if (required[i] && !seen[i]) {
                          return false;
                        }
                      }
                      return true;
                    }, function(prec) {
                      var p = required === false ? Matcher.prec.OROR : Matcher.prec.ANDAND;
                      var s = ms.map(function(m, i) {
                        if (required !== false && !required[i]) {
                          return m.toString(Matcher.prec.MOD) + "?";
                        }
                        return m.toString(p);
                      }).join(required === false ? " || " : " && ");
                      if (prec > p) {
                        s = "[ " + s + " ]";
                      }
                      return s;
                    });
                    result.options = ms;
                    return result;
                  };
                  Matcher.andand = function() {
                    var args = Array.prototype.slice.call(arguments);
                    args.unshift(true);
                    return Matcher.many.apply(Matcher, args);
                  };
                  Matcher.oror = function() {
                    var args = Array.prototype.slice.call(arguments);
                    args.unshift(false);
                    return Matcher.many.apply(Matcher, args);
                  };
                  Matcher.prototype = { constructor: Matcher, match: function() {
                    throw new Error("unimplemented");
                  }, toString: function() {
                    throw new Error("unimplemented");
                  }, func: function() {
                    return this.match.bind(this);
                  }, then: function(m) {
                    return Matcher.seq(this, m);
                  }, or: function(m) {
                    return Matcher.alt(this, m);
                  }, andand: function(m) {
                    return Matcher.many(true, this, m);
                  }, oror: function(m) {
                    return Matcher.many(false, this, m);
                  }, star: function() {
                    return this.braces(0, Infinity, "*");
                  }, plus: function() {
                    return this.braces(1, Infinity, "+");
                  }, question: function() {
                    return this.braces(0, 1, "?");
                  }, hash: function() {
                    return this.braces(1, Infinity, "#", Matcher.cast(","));
                  }, braces: function(min, max, marker, optSep) {
                    var m1 = this, m2 = optSep ? optSep.then(this) : this;
                    if (!marker) {
                      marker = "{" + min + "," + max + "}";
                    }
                    return new Matcher(function(expression) {
                      var result = true, i;
                      for (i = 0; i < max; i++) {
                        if (i > 0 && optSep) {
                          result = m2.match(expression);
                        } else {
                          result = m1.match(expression);
                        }
                        if (!result) {
                          break;
                        }
                      }
                      return i >= min;
                    }, function() {
                      return m1.toString(Matcher.prec.MOD) + marker;
                    });
                  } };
                }, { "../util/StringReader": 24, "../util/SyntaxError": 25, "./ValidationTypes": 21 }], 4: [function(require2, module2, exports2) {
                  module2.exports = MediaFeature;
                  var SyntaxUnit = require2("../util/SyntaxUnit");
                  var Parser = require2("./Parser");
                  function MediaFeature(name, value) {
                    SyntaxUnit.call(this, "(" + name + (value !== null ? ":" + value : "") + ")", name.startLine, name.startCol, Parser.MEDIA_FEATURE_TYPE);
                    this.name = name;
                    this.value = value;
                  }
                  MediaFeature.prototype = new SyntaxUnit();
                  MediaFeature.prototype.constructor = MediaFeature;
                }, { "../util/SyntaxUnit": 26, "./Parser": 6 }], 5: [function(require2, module2, exports2) {
                  module2.exports = MediaQuery;
                  var SyntaxUnit = require2("../util/SyntaxUnit");
                  var Parser = require2("./Parser");
                  function MediaQuery(modifier, mediaType, features, line, col) {
                    SyntaxUnit.call(this, (modifier ? modifier + " " : "") + (mediaType ? mediaType : "") + (mediaType && features.length > 0 ? " and " : "") + features.join(" and "), line, col, Parser.MEDIA_QUERY_TYPE);
                    this.modifier = modifier;
                    this.mediaType = mediaType;
                    this.features = features;
                  }
                  MediaQuery.prototype = new SyntaxUnit();
                  MediaQuery.prototype.constructor = MediaQuery;
                }, { "../util/SyntaxUnit": 26, "./Parser": 6 }], 6: [function(require2, module2, exports2) {
                  module2.exports = Parser;
                  var EventTarget = require2("../util/EventTarget");
                  var SyntaxError = require2("../util/SyntaxError");
                  var SyntaxUnit = require2("../util/SyntaxUnit");
                  var Combinator = require2("./Combinator");
                  var MediaFeature = require2("./MediaFeature");
                  var MediaQuery = require2("./MediaQuery");
                  var PropertyName = require2("./PropertyName");
                  var PropertyValue = require2("./PropertyValue");
                  var PropertyValuePart = require2("./PropertyValuePart");
                  var Selector = require2("./Selector");
                  var SelectorPart = require2("./SelectorPart");
                  var SelectorSubPart = require2("./SelectorSubPart");
                  var TokenStream = require2("./TokenStream");
                  var Tokens = require2("./Tokens");
                  var Validation = require2("./Validation");
                  function Parser(options) {
                    EventTarget.call(this);
                    this.options = options || {};
                    this._tokenStream = null;
                  }
                  Parser.DEFAULT_TYPE = 0;
                  Parser.COMBINATOR_TYPE = 1;
                  Parser.MEDIA_FEATURE_TYPE = 2;
                  Parser.MEDIA_QUERY_TYPE = 3;
                  Parser.PROPERTY_NAME_TYPE = 4;
                  Parser.PROPERTY_VALUE_TYPE = 5;
                  Parser.PROPERTY_VALUE_PART_TYPE = 6;
                  Parser.SELECTOR_TYPE = 7;
                  Parser.SELECTOR_PART_TYPE = 8;
                  Parser.SELECTOR_SUB_PART_TYPE = 9;
                  Parser.prototype = function() {
                    var proto = new EventTarget(), prop, additions = { __proto__: null, constructor: Parser, DEFAULT_TYPE: 0, COMBINATOR_TYPE: 1, MEDIA_FEATURE_TYPE: 2, MEDIA_QUERY_TYPE: 3, PROPERTY_NAME_TYPE: 4, PROPERTY_VALUE_TYPE: 5, PROPERTY_VALUE_PART_TYPE: 6, SELECTOR_TYPE: 7, SELECTOR_PART_TYPE: 8, SELECTOR_SUB_PART_TYPE: 9, _stylesheet: function() {
                      var tokenStream = this._tokenStream, count, token, tt;
                      this.fire("startstylesheet");
                      this._charset();
                      this._skipCruft();
                      while (tokenStream.peek() === Tokens.IMPORT_SYM) {
                        this._import();
                        this._skipCruft();
                      }
                      while (tokenStream.peek() === Tokens.NAMESPACE_SYM) {
                        this._namespace();
                        this._skipCruft();
                      }
                      tt = tokenStream.peek();
                      while (tt > Tokens.EOF) {
                        try {
                          switch (tt) {
                            case Tokens.MEDIA_SYM:
                              this._media();
                              this._skipCruft();
                              break;
                            case Tokens.PAGE_SYM:
                              this._page();
                              this._skipCruft();
                              break;
                            case Tokens.FONT_FACE_SYM:
                              this._font_face();
                              this._skipCruft();
                              break;
                            case Tokens.KEYFRAMES_SYM:
                              this._keyframes();
                              this._skipCruft();
                              break;
                            case Tokens.VIEWPORT_SYM:
                              this._viewport();
                              this._skipCruft();
                              break;
                            case Tokens.DOCUMENT_SYM:
                              this._document();
                              this._skipCruft();
                              break;
                            case Tokens.SUPPORTS_SYM:
                              this._supports();
                              this._skipCruft();
                              break;
                            case Tokens.UNKNOWN_SYM:
                              tokenStream.get();
                              if (!this.options.strict) {
                                this.fire({ type: "error", error: null, message: "Unknown @ rule: " + tokenStream.LT(0).value + ".", line: tokenStream.LT(0).startLine, col: tokenStream.LT(0).startCol });
                                count = 0;
                                while (tokenStream.advance([Tokens.LBRACE, Tokens.RBRACE]) === Tokens.LBRACE) {
                                  count++;
                                }
                                while (count) {
                                  tokenStream.advance([Tokens.RBRACE]);
                                  count--;
                                }
                              } else {
                                throw new SyntaxError("Unknown @ rule.", tokenStream.LT(0).startLine, tokenStream.LT(0).startCol);
                              }
                              break;
                            case Tokens.S:
                              this._readWhitespace();
                              break;
                            default:
                              if (!this._ruleset()) {
                                switch (tt) {
                                  case Tokens.CHARSET_SYM:
                                    token = tokenStream.LT(1);
                                    this._charset(false);
                                    throw new SyntaxError("@charset not allowed here.", token.startLine, token.startCol);
                                  case Tokens.IMPORT_SYM:
                                    token = tokenStream.LT(1);
                                    this._import(false);
                                    throw new SyntaxError("@import not allowed here.", token.startLine, token.startCol);
                                  case Tokens.NAMESPACE_SYM:
                                    token = tokenStream.LT(1);
                                    this._namespace(false);
                                    throw new SyntaxError("@namespace not allowed here.", token.startLine, token.startCol);
                                  default:
                                    tokenStream.get();
                                    this._unexpectedToken(tokenStream.token());
                                }
                              }
                          }
                        } catch (ex) {
                          if (ex instanceof SyntaxError && !this.options.strict) {
                            this.fire({ type: "error", error: ex, message: ex.message, line: ex.line, col: ex.col });
                          } else {
                            throw ex;
                          }
                        }
                        tt = tokenStream.peek();
                      }
                      if (tt !== Tokens.EOF) {
                        this._unexpectedToken(tokenStream.token());
                      }
                      this.fire("endstylesheet");
                    }, _charset: function(emit) {
                      var tokenStream = this._tokenStream, charset, token, line, col;
                      if (tokenStream.match(Tokens.CHARSET_SYM)) {
                        line = tokenStream.token().startLine;
                        col = tokenStream.token().startCol;
                        this._readWhitespace();
                        tokenStream.mustMatch(Tokens.STRING);
                        token = tokenStream.token();
                        charset = token.value;
                        this._readWhitespace();
                        tokenStream.mustMatch(Tokens.SEMICOLON);
                        if (emit !== false) {
                          this.fire({ type: "charset", charset, line, col });
                        }
                      }
                    }, _import: function(emit) {
                      var tokenStream = this._tokenStream, uri, importToken, mediaList = [];
                      tokenStream.mustMatch(Tokens.IMPORT_SYM);
                      importToken = tokenStream.token();
                      this._readWhitespace();
                      tokenStream.mustMatch([Tokens.STRING, Tokens.URI]);
                      uri = tokenStream.token().value.replace(/^(?:url\()?["']?([^"']+?)["']?\)?$/, "$1");
                      this._readWhitespace();
                      mediaList = this._media_query_list();
                      tokenStream.mustMatch(Tokens.SEMICOLON);
                      this._readWhitespace();
                      if (emit !== false) {
                        this.fire({ type: "import", uri, media: mediaList, line: importToken.startLine, col: importToken.startCol });
                      }
                    }, _namespace: function(emit) {
                      var tokenStream = this._tokenStream, line, col, prefix, uri;
                      tokenStream.mustMatch(Tokens.NAMESPACE_SYM);
                      line = tokenStream.token().startLine;
                      col = tokenStream.token().startCol;
                      this._readWhitespace();
                      if (tokenStream.match(Tokens.IDENT)) {
                        prefix = tokenStream.token().value;
                        this._readWhitespace();
                      }
                      tokenStream.mustMatch([Tokens.STRING, Tokens.URI]);
                      uri = tokenStream.token().value.replace(/(?:url\()?["']([^"']+)["']\)?/, "$1");
                      this._readWhitespace();
                      tokenStream.mustMatch(Tokens.SEMICOLON);
                      this._readWhitespace();
                      if (emit !== false) {
                        this.fire({ type: "namespace", prefix, uri, line, col });
                      }
                    }, _supports: function(emit) {
                      var tokenStream = this._tokenStream, line, col;
                      if (tokenStream.match(Tokens.SUPPORTS_SYM)) {
                        line = tokenStream.token().startLine;
                        col = tokenStream.token().startCol;
                        this._readWhitespace();
                        this._supports_condition();
                        this._readWhitespace();
                        tokenStream.mustMatch(Tokens.LBRACE);
                        this._readWhitespace();
                        if (emit !== false) {
                          this.fire({ type: "startsupports", line, col });
                        }
                        while (true) {
                          if (!this._ruleset()) {
                            break;
                          }
                        }
                        tokenStream.mustMatch(Tokens.RBRACE);
                        this._readWhitespace();
                        this.fire({ type: "endsupports", line, col });
                      }
                    }, _supports_condition: function() {
                      var tokenStream = this._tokenStream, ident;
                      if (tokenStream.match(Tokens.IDENT)) {
                        ident = tokenStream.token().value.toLowerCase();
                        if (ident === "not") {
                          tokenStream.mustMatch(Tokens.S);
                          this._supports_condition_in_parens();
                        } else {
                          tokenStream.unget();
                        }
                      } else {
                        this._supports_condition_in_parens();
                        this._readWhitespace();
                        while (tokenStream.peek() === Tokens.IDENT) {
                          ident = tokenStream.LT(1).value.toLowerCase();
                          if (ident === "and" || ident === "or") {
                            tokenStream.mustMatch(Tokens.IDENT);
                            this._readWhitespace();
                            this._supports_condition_in_parens();
                            this._readWhitespace();
                          }
                        }
                      }
                    }, _supports_condition_in_parens: function() {
                      var tokenStream = this._tokenStream, ident;
                      if (tokenStream.match(Tokens.LPAREN)) {
                        this._readWhitespace();
                        if (tokenStream.match(Tokens.IDENT)) {
                          ident = tokenStream.token().value.toLowerCase();
                          if (ident === "not") {
                            this._readWhitespace();
                            this._supports_condition();
                            this._readWhitespace();
                            tokenStream.mustMatch(Tokens.RPAREN);
                          } else {
                            tokenStream.unget();
                            this._supports_declaration_condition(false);
                          }
                        } else {
                          this._supports_condition();
                          this._readWhitespace();
                          tokenStream.mustMatch(Tokens.RPAREN);
                        }
                      } else {
                        this._supports_declaration_condition();
                      }
                    }, _supports_declaration_condition: function(requireStartParen) {
                      var tokenStream = this._tokenStream;
                      if (requireStartParen !== false) {
                        tokenStream.mustMatch(Tokens.LPAREN);
                      }
                      this._readWhitespace();
                      this._declaration();
                      tokenStream.mustMatch(Tokens.RPAREN);
                    }, _media: function() {
                      var tokenStream = this._tokenStream, line, col, mediaList;
                      tokenStream.mustMatch(Tokens.MEDIA_SYM);
                      line = tokenStream.token().startLine;
                      col = tokenStream.token().startCol;
                      this._readWhitespace();
                      mediaList = this._media_query_list();
                      tokenStream.mustMatch(Tokens.LBRACE);
                      this._readWhitespace();
                      this.fire({ type: "startmedia", media: mediaList, line, col });
                      while (true) {
                        if (tokenStream.peek() === Tokens.PAGE_SYM) {
                          this._page();
                        } else if (tokenStream.peek() === Tokens.FONT_FACE_SYM) {
                          this._font_face();
                        } else if (tokenStream.peek() === Tokens.VIEWPORT_SYM) {
                          this._viewport();
                        } else if (tokenStream.peek() === Tokens.DOCUMENT_SYM) {
                          this._document();
                        } else if (tokenStream.peek() === Tokens.SUPPORTS_SYM) {
                          this._supports();
                        } else if (tokenStream.peek() === Tokens.MEDIA_SYM) {
                          this._media();
                        } else if (!this._ruleset()) {
                          break;
                        }
                      }
                      tokenStream.mustMatch(Tokens.RBRACE);
                      this._readWhitespace();
                      this.fire({ type: "endmedia", media: mediaList, line, col });
                    }, _media_query_list: function() {
                      var tokenStream = this._tokenStream, mediaList = [];
                      this._readWhitespace();
                      if (tokenStream.peek() === Tokens.IDENT || tokenStream.peek() === Tokens.LPAREN) {
                        mediaList.push(this._media_query());
                      }
                      while (tokenStream.match(Tokens.COMMA)) {
                        this._readWhitespace();
                        mediaList.push(this._media_query());
                      }
                      return mediaList;
                    }, _media_query: function() {
                      var tokenStream = this._tokenStream, type = null, ident = null, token = null, expressions = [];
                      if (tokenStream.match(Tokens.IDENT)) {
                        ident = tokenStream.token().value.toLowerCase();
                        if (ident !== "only" && ident !== "not") {
                          tokenStream.unget();
                          ident = null;
                        } else {
                          token = tokenStream.token();
                        }
                      }
                      this._readWhitespace();
                      if (tokenStream.peek() === Tokens.IDENT) {
                        type = this._media_type();
                        if (token === null) {
                          token = tokenStream.token();
                        }
                      } else if (tokenStream.peek() === Tokens.LPAREN) {
                        if (token === null) {
                          token = tokenStream.LT(1);
                        }
                        expressions.push(this._media_expression());
                      }
                      if (type === null && expressions.length === 0) {
                        return null;
                      } else {
                        this._readWhitespace();
                        while (tokenStream.match(Tokens.IDENT)) {
                          if (tokenStream.token().value.toLowerCase() !== "and") {
                            this._unexpectedToken(tokenStream.token());
                          }
                          this._readWhitespace();
                          expressions.push(this._media_expression());
                        }
                      }
                      return new MediaQuery(ident, type, expressions, token.startLine, token.startCol);
                    }, _media_type: function() {
                      return this._media_feature();
                    }, _media_expression: function() {
                      var tokenStream = this._tokenStream, feature = null, token, expression = null;
                      tokenStream.mustMatch(Tokens.LPAREN);
                      feature = this._media_feature();
                      this._readWhitespace();
                      if (tokenStream.match(Tokens.COLON)) {
                        this._readWhitespace();
                        token = tokenStream.LT(1);
                        expression = this._expression();
                      }
                      tokenStream.mustMatch(Tokens.RPAREN);
                      this._readWhitespace();
                      return new MediaFeature(feature, expression ? new SyntaxUnit(expression, token.startLine, token.startCol) : null);
                    }, _media_feature: function() {
                      var tokenStream = this._tokenStream;
                      this._readWhitespace();
                      tokenStream.mustMatch(Tokens.IDENT);
                      return SyntaxUnit.fromToken(tokenStream.token());
                    }, _page: function() {
                      var tokenStream = this._tokenStream, line, col, identifier = null, pseudoPage = null;
                      tokenStream.mustMatch(Tokens.PAGE_SYM);
                      line = tokenStream.token().startLine;
                      col = tokenStream.token().startCol;
                      this._readWhitespace();
                      if (tokenStream.match(Tokens.IDENT)) {
                        identifier = tokenStream.token().value;
                        if (identifier.toLowerCase() === "auto") {
                          this._unexpectedToken(tokenStream.token());
                        }
                      }
                      if (tokenStream.peek() === Tokens.COLON) {
                        pseudoPage = this._pseudo_page();
                      }
                      this._readWhitespace();
                      this.fire({ type: "startpage", id: identifier, pseudo: pseudoPage, line, col });
                      this._readDeclarations(true, true);
                      this.fire({ type: "endpage", id: identifier, pseudo: pseudoPage, line, col });
                    }, _margin: function() {
                      var tokenStream = this._tokenStream, line, col, marginSym = this._margin_sym();
                      if (marginSym) {
                        line = tokenStream.token().startLine;
                        col = tokenStream.token().startCol;
                        this.fire({ type: "startpagemargin", margin: marginSym, line, col });
                        this._readDeclarations(true);
                        this.fire({ type: "endpagemargin", margin: marginSym, line, col });
                        return true;
                      } else {
                        return false;
                      }
                    }, _margin_sym: function() {
                      var tokenStream = this._tokenStream;
                      if (tokenStream.match([Tokens.TOPLEFTCORNER_SYM, Tokens.TOPLEFT_SYM, Tokens.TOPCENTER_SYM, Tokens.TOPRIGHT_SYM, Tokens.TOPRIGHTCORNER_SYM, Tokens.BOTTOMLEFTCORNER_SYM, Tokens.BOTTOMLEFT_SYM, Tokens.BOTTOMCENTER_SYM, Tokens.BOTTOMRIGHT_SYM, Tokens.BOTTOMRIGHTCORNER_SYM, Tokens.LEFTTOP_SYM, Tokens.LEFTMIDDLE_SYM, Tokens.LEFTBOTTOM_SYM, Tokens.RIGHTTOP_SYM, Tokens.RIGHTMIDDLE_SYM, Tokens.RIGHTBOTTOM_SYM])) {
                        return SyntaxUnit.fromToken(tokenStream.token());
                      } else {
                        return null;
                      }
                    }, _pseudo_page: function() {
                      var tokenStream = this._tokenStream;
                      tokenStream.mustMatch(Tokens.COLON);
                      tokenStream.mustMatch(Tokens.IDENT);
                      return tokenStream.token().value;
                    }, _font_face: function() {
                      var tokenStream = this._tokenStream, line, col;
                      tokenStream.mustMatch(Tokens.FONT_FACE_SYM);
                      line = tokenStream.token().startLine;
                      col = tokenStream.token().startCol;
                      this._readWhitespace();
                      this.fire({ type: "startfontface", line, col });
                      this._readDeclarations(true);
                      this.fire({ type: "endfontface", line, col });
                    }, _viewport: function() {
                      var tokenStream = this._tokenStream, line, col;
                      tokenStream.mustMatch(Tokens.VIEWPORT_SYM);
                      line = tokenStream.token().startLine;
                      col = tokenStream.token().startCol;
                      this._readWhitespace();
                      this.fire({ type: "startviewport", line, col });
                      this._readDeclarations(true);
                      this.fire({ type: "endviewport", line, col });
                    }, _document: function() {
                      var tokenStream = this._tokenStream, token, functions = [], prefix = "";
                      tokenStream.mustMatch(Tokens.DOCUMENT_SYM);
                      token = tokenStream.token();
                      if (/^@\-([^\-]+)\-/.test(token.value)) {
                        prefix = RegExp.$1;
                      }
                      this._readWhitespace();
                      functions.push(this._document_function());
                      while (tokenStream.match(Tokens.COMMA)) {
                        this._readWhitespace();
                        functions.push(this._document_function());
                      }
                      tokenStream.mustMatch(Tokens.LBRACE);
                      this._readWhitespace();
                      this.fire({ type: "startdocument", functions, prefix, line: token.startLine, col: token.startCol });
                      var ok = true;
                      while (ok) {
                        switch (tokenStream.peek()) {
                          case Tokens.PAGE_SYM:
                            this._page();
                            break;
                          case Tokens.FONT_FACE_SYM:
                            this._font_face();
                            break;
                          case Tokens.VIEWPORT_SYM:
                            this._viewport();
                            break;
                          case Tokens.MEDIA_SYM:
                            this._media();
                            break;
                          case Tokens.KEYFRAMES_SYM:
                            this._keyframes();
                            break;
                          case Tokens.DOCUMENT_SYM:
                            this._document();
                            break;
                          default:
                            ok = Boolean(this._ruleset());
                        }
                      }
                      tokenStream.mustMatch(Tokens.RBRACE);
                      token = tokenStream.token();
                      this._readWhitespace();
                      this.fire({ type: "enddocument", functions, prefix, line: token.startLine, col: token.startCol });
                    }, _document_function: function() {
                      var tokenStream = this._tokenStream, value;
                      if (tokenStream.match(Tokens.URI)) {
                        value = tokenStream.token().value;
                        this._readWhitespace();
                      } else {
                        value = this._function();
                      }
                      return value;
                    }, _operator: function(inFunction) {
                      var tokenStream = this._tokenStream, token = null;
                      if (tokenStream.match([Tokens.SLASH, Tokens.COMMA]) || inFunction && tokenStream.match([Tokens.PLUS, Tokens.STAR, Tokens.MINUS])) {
                        token = tokenStream.token();
                        this._readWhitespace();
                      }
                      return token ? PropertyValuePart.fromToken(token) : null;
                    }, _combinator: function() {
                      var tokenStream = this._tokenStream, value = null, token;
                      if (tokenStream.match([Tokens.PLUS, Tokens.GREATER, Tokens.TILDE])) {
                        token = tokenStream.token();
                        value = new Combinator(token.value, token.startLine, token.startCol);
                        this._readWhitespace();
                      }
                      return value;
                    }, _unary_operator: function() {
                      var tokenStream = this._tokenStream;
                      if (tokenStream.match([Tokens.MINUS, Tokens.PLUS])) {
                        return tokenStream.token().value;
                      } else {
                        return null;
                      }
                    }, _property: function() {
                      var tokenStream = this._tokenStream, value = null, hack = null, tokenValue, token, line, col;
                      if (tokenStream.peek() === Tokens.STAR && this.options.starHack) {
                        tokenStream.get();
                        token = tokenStream.token();
                        hack = token.value;
                        line = token.startLine;
                        col = token.startCol;
                      }
                      if (tokenStream.match(Tokens.IDENT)) {
                        token = tokenStream.token();
                        tokenValue = token.value;
                        if (tokenValue.charAt(0) === "_" && this.options.underscoreHack) {
                          hack = "_";
                          tokenValue = tokenValue.substring(1);
                        }
                        value = new PropertyName(tokenValue, hack, line || token.startLine, col || token.startCol);
                        this._readWhitespace();
                      }
                      return value;
                    }, _ruleset: function() {
                      var tokenStream = this._tokenStream, tt, selectors;
                      try {
                        selectors = this._selectors_group();
                      } catch (ex) {
                        if (ex instanceof SyntaxError && !this.options.strict) {
                          this.fire({ type: "error", error: ex, message: ex.message, line: ex.line, col: ex.col });
                          tt = tokenStream.advance([Tokens.RBRACE]);
                          if (tt === Tokens.RBRACE) ; else {
                            throw ex;
                          }
                        } else {
                          throw ex;
                        }
                        return true;
                      }
                      if (selectors) {
                        this.fire({ type: "startrule", selectors, line: selectors[0].line, col: selectors[0].col });
                        this._readDeclarations(true);
                        this.fire({ type: "endrule", selectors, line: selectors[0].line, col: selectors[0].col });
                      }
                      return selectors;
                    }, _selectors_group: function() {
                      var tokenStream = this._tokenStream, selectors = [], selector;
                      selector = this._selector();
                      if (selector !== null) {
                        selectors.push(selector);
                        while (tokenStream.match(Tokens.COMMA)) {
                          this._readWhitespace();
                          selector = this._selector();
                          if (selector !== null) {
                            selectors.push(selector);
                          } else {
                            this._unexpectedToken(tokenStream.LT(1));
                          }
                        }
                      }
                      return selectors.length ? selectors : null;
                    }, _selector: function() {
                      var tokenStream = this._tokenStream, selector = [], nextSelector = null, combinator = null, ws = null;
                      nextSelector = this._simple_selector_sequence();
                      if (nextSelector === null) {
                        return null;
                      }
                      selector.push(nextSelector);
                      do {
                        combinator = this._combinator();
                        if (combinator !== null) {
                          selector.push(combinator);
                          nextSelector = this._simple_selector_sequence();
                          if (nextSelector === null) {
                            this._unexpectedToken(tokenStream.LT(1));
                          } else {
                            selector.push(nextSelector);
                          }
                        } else {
                          if (this._readWhitespace()) {
                            ws = new Combinator(tokenStream.token().value, tokenStream.token().startLine, tokenStream.token().startCol);
                            combinator = this._combinator();
                            nextSelector = this._simple_selector_sequence();
                            if (nextSelector === null) {
                              if (combinator !== null) {
                                this._unexpectedToken(tokenStream.LT(1));
                              }
                            } else {
                              if (combinator !== null) {
                                selector.push(combinator);
                              } else {
                                selector.push(ws);
                              }
                              selector.push(nextSelector);
                            }
                          } else {
                            break;
                          }
                        }
                      } while (true);
                      return new Selector(selector, selector[0].line, selector[0].col);
                    }, _simple_selector_sequence: function() {
                      var tokenStream = this._tokenStream, elementName = null, modifiers = [], selectorText = "", components = [function() {
                        return tokenStream.match(Tokens.HASH) ? new SelectorSubPart(tokenStream.token().value, "id", tokenStream.token().startLine, tokenStream.token().startCol) : null;
                      }, this._class, this._attrib, this._pseudo, this._negation], i = 0, len = components.length, component = null, line, col;
                      line = tokenStream.LT(1).startLine;
                      col = tokenStream.LT(1).startCol;
                      elementName = this._type_selector();
                      if (!elementName) {
                        elementName = this._universal();
                      }
                      if (elementName !== null) {
                        selectorText += elementName;
                      }
                      while (true) {
                        if (tokenStream.peek() === Tokens.S) {
                          break;
                        }
                        while (i < len && component === null) {
                          component = components[i++].call(this);
                        }
                        if (component === null) {
                          if (selectorText === "") {
                            return null;
                          } else {
                            break;
                          }
                        } else {
                          i = 0;
                          modifiers.push(component);
                          selectorText += component.toString();
                          component = null;
                        }
                      }
                      return selectorText !== "" ? new SelectorPart(elementName, modifiers, selectorText, line, col) : null;
                    }, _type_selector: function() {
                      var tokenStream = this._tokenStream, ns = this._namespace_prefix(), elementName = this._element_name();
                      if (!elementName) {
                        if (ns) {
                          tokenStream.unget();
                          if (ns.length > 1) {
                            tokenStream.unget();
                          }
                        }
                        return null;
                      } else {
                        if (ns) {
                          elementName.text = ns + elementName.text;
                          elementName.col -= ns.length;
                        }
                        return elementName;
                      }
                    }, _class: function() {
                      var tokenStream = this._tokenStream, token;
                      if (tokenStream.match(Tokens.DOT)) {
                        tokenStream.mustMatch(Tokens.IDENT);
                        token = tokenStream.token();
                        return new SelectorSubPart("." + token.value, "class", token.startLine, token.startCol - 1);
                      } else {
                        return null;
                      }
                    }, _element_name: function() {
                      var tokenStream = this._tokenStream, token;
                      if (tokenStream.match(Tokens.IDENT)) {
                        token = tokenStream.token();
                        return new SelectorSubPart(token.value, "elementName", token.startLine, token.startCol);
                      } else {
                        return null;
                      }
                    }, _namespace_prefix: function() {
                      var tokenStream = this._tokenStream, value = "";
                      if (tokenStream.LA(1) === Tokens.PIPE || tokenStream.LA(2) === Tokens.PIPE) {
                        if (tokenStream.match([Tokens.IDENT, Tokens.STAR])) {
                          value += tokenStream.token().value;
                        }
                        tokenStream.mustMatch(Tokens.PIPE);
                        value += "|";
                      }
                      return value.length ? value : null;
                    }, _universal: function() {
                      var tokenStream = this._tokenStream, value = "", ns;
                      ns = this._namespace_prefix();
                      if (ns) {
                        value += ns;
                      }
                      if (tokenStream.match(Tokens.STAR)) {
                        value += "*";
                      }
                      return value.length ? value : null;
                    }, _attrib: function() {
                      var tokenStream = this._tokenStream, value = null, ns, token;
                      if (tokenStream.match(Tokens.LBRACKET)) {
                        token = tokenStream.token();
                        value = token.value;
                        value += this._readWhitespace();
                        ns = this._namespace_prefix();
                        if (ns) {
                          value += ns;
                        }
                        tokenStream.mustMatch(Tokens.IDENT);
                        value += tokenStream.token().value;
                        value += this._readWhitespace();
                        if (tokenStream.match([Tokens.PREFIXMATCH, Tokens.SUFFIXMATCH, Tokens.SUBSTRINGMATCH, Tokens.EQUALS, Tokens.INCLUDES, Tokens.DASHMATCH])) {
                          value += tokenStream.token().value;
                          value += this._readWhitespace();
                          tokenStream.mustMatch([Tokens.IDENT, Tokens.STRING]);
                          value += tokenStream.token().value;
                          value += this._readWhitespace();
                        }
                        tokenStream.mustMatch(Tokens.RBRACKET);
                        return new SelectorSubPart(value + "]", "attribute", token.startLine, token.startCol);
                      } else {
                        return null;
                      }
                    }, _pseudo: function() {
                      var tokenStream = this._tokenStream, pseudo = null, colons = ":", line, col;
                      if (tokenStream.match(Tokens.COLON)) {
                        if (tokenStream.match(Tokens.COLON)) {
                          colons += ":";
                        }
                        if (tokenStream.match(Tokens.IDENT)) {
                          pseudo = tokenStream.token().value;
                          line = tokenStream.token().startLine;
                          col = tokenStream.token().startCol - colons.length;
                        } else if (tokenStream.peek() === Tokens.FUNCTION) {
                          line = tokenStream.LT(1).startLine;
                          col = tokenStream.LT(1).startCol - colons.length;
                          pseudo = this._functional_pseudo();
                        }
                        if (pseudo) {
                          pseudo = new SelectorSubPart(colons + pseudo, "pseudo", line, col);
                        } else {
                          var startLine = tokenStream.LT(1).startLine, startCol = tokenStream.LT(0).startCol;
                          throw new SyntaxError("Expected a `FUNCTION` or `IDENT` after colon at line " + startLine + ", col " + startCol + ".", startLine, startCol);
                        }
                      }
                      return pseudo;
                    }, _functional_pseudo: function() {
                      var tokenStream = this._tokenStream, value = null;
                      if (tokenStream.match(Tokens.FUNCTION)) {
                        value = tokenStream.token().value;
                        value += this._readWhitespace();
                        value += this._expression();
                        tokenStream.mustMatch(Tokens.RPAREN);
                        value += ")";
                      }
                      return value;
                    }, _expression: function() {
                      var tokenStream = this._tokenStream, value = "";
                      while (tokenStream.match([Tokens.PLUS, Tokens.MINUS, Tokens.DIMENSION, Tokens.NUMBER, Tokens.STRING, Tokens.IDENT, Tokens.LENGTH, Tokens.FREQ, Tokens.ANGLE, Tokens.TIME, Tokens.RESOLUTION, Tokens.SLASH])) {
                        value += tokenStream.token().value;
                        value += this._readWhitespace();
                      }
                      return value.length ? value : null;
                    }, _negation: function() {
                      var tokenStream = this._tokenStream, line, col, value = "", arg, subpart = null;
                      if (tokenStream.match(Tokens.NOT)) {
                        value = tokenStream.token().value;
                        line = tokenStream.token().startLine;
                        col = tokenStream.token().startCol;
                        value += this._readWhitespace();
                        arg = this._negation_arg();
                        value += arg;
                        value += this._readWhitespace();
                        tokenStream.match(Tokens.RPAREN);
                        value += tokenStream.token().value;
                        subpart = new SelectorSubPart(value, "not", line, col);
                        subpart.args.push(arg);
                      }
                      return subpart;
                    }, _negation_arg: function() {
                      var tokenStream = this._tokenStream, args = [this._type_selector, this._universal, function() {
                        return tokenStream.match(Tokens.HASH) ? new SelectorSubPart(tokenStream.token().value, "id", tokenStream.token().startLine, tokenStream.token().startCol) : null;
                      }, this._class, this._attrib, this._pseudo], arg = null, i = 0, len = args.length, line, col, part;
                      line = tokenStream.LT(1).startLine;
                      col = tokenStream.LT(1).startCol;
                      while (i < len && arg === null) {
                        arg = args[i].call(this);
                        i++;
                      }
                      if (arg === null) {
                        this._unexpectedToken(tokenStream.LT(1));
                      }
                      if (arg.type === "elementName") {
                        part = new SelectorPart(arg, [], arg.toString(), line, col);
                      } else {
                        part = new SelectorPart(null, [arg], arg.toString(), line, col);
                      }
                      return part;
                    }, _declaration: function() {
                      var tokenStream = this._tokenStream, property = null, expr = null, prio = null, invalid = null, propertyName = "";
                      property = this._property();
                      if (property !== null) {
                        tokenStream.mustMatch(Tokens.COLON);
                        this._readWhitespace();
                        expr = this._expr();
                        if (!expr || expr.length === 0) {
                          this._unexpectedToken(tokenStream.LT(1));
                        }
                        prio = this._prio();
                        propertyName = property.toString();
                        if (this.options.starHack && property.hack === "*" || this.options.underscoreHack && property.hack === "_") {
                          propertyName = property.text;
                        }
                        try {
                          this._validateProperty(propertyName, expr);
                        } catch (ex) {
                          invalid = ex;
                        }
                        this.fire({ type: "property", property, value: expr, important: prio, line: property.line, col: property.col, invalid });
                        return true;
                      } else {
                        return false;
                      }
                    }, _prio: function() {
                      var tokenStream = this._tokenStream, result = tokenStream.match(Tokens.IMPORTANT_SYM);
                      this._readWhitespace();
                      return result;
                    }, _expr: function(inFunction) {
                      var values = [], value = null, operator = null;
                      value = this._term(inFunction);
                      if (value !== null) {
                        values.push(value);
                        do {
                          operator = this._operator(inFunction);
                          if (operator) {
                            values.push(operator);
                          }
                          value = this._term(inFunction);
                          if (value === null) {
                            break;
                          } else {
                            values.push(value);
                          }
                        } while (true);
                      }
                      return values.length > 0 ? new PropertyValue(values, values[0].line, values[0].col) : null;
                    }, _term: function(inFunction) {
                      var tokenStream = this._tokenStream, unary = null, value = null, endChar = null, part = null, token, line, col;
                      unary = this._unary_operator();
                      if (unary !== null) {
                        line = tokenStream.token().startLine;
                        col = tokenStream.token().startCol;
                      }
                      if (tokenStream.peek() === Tokens.IE_FUNCTION && this.options.ieFilters) {
                        value = this._ie_function();
                        if (unary === null) {
                          line = tokenStream.token().startLine;
                          col = tokenStream.token().startCol;
                        }
                      } else if (inFunction && tokenStream.match([Tokens.LPAREN, Tokens.LBRACE, Tokens.LBRACKET])) {
                        token = tokenStream.token();
                        endChar = token.endChar;
                        value = token.value + this._expr(inFunction).text;
                        if (unary === null) {
                          line = tokenStream.token().startLine;
                          col = tokenStream.token().startCol;
                        }
                        tokenStream.mustMatch(Tokens.type(endChar));
                        value += endChar;
                        this._readWhitespace();
                      } else if (tokenStream.match([Tokens.NUMBER, Tokens.PERCENTAGE, Tokens.LENGTH, Tokens.ANGLE, Tokens.TIME, Tokens.FREQ, Tokens.STRING, Tokens.IDENT, Tokens.URI, Tokens.UNICODE_RANGE])) {
                        value = tokenStream.token().value;
                        if (unary === null) {
                          line = tokenStream.token().startLine;
                          col = tokenStream.token().startCol;
                          part = PropertyValuePart.fromToken(tokenStream.token());
                        }
                        this._readWhitespace();
                      } else {
                        token = this._hexcolor();
                        if (token === null) {
                          if (unary === null) {
                            line = tokenStream.LT(1).startLine;
                            col = tokenStream.LT(1).startCol;
                          }
                          if (value === null) {
                            if (tokenStream.LA(3) === Tokens.EQUALS && this.options.ieFilters) {
                              value = this._ie_function();
                            } else {
                              value = this._function();
                            }
                          }
                        } else {
                          value = token.value;
                          if (unary === null) {
                            line = token.startLine;
                            col = token.startCol;
                          }
                        }
                      }
                      return part !== null ? part : value !== null ? new PropertyValuePart(unary !== null ? unary + value : value, line, col) : null;
                    }, _function: function() {
                      var tokenStream = this._tokenStream, functionText = null, expr = null, lt;
                      if (tokenStream.match(Tokens.FUNCTION)) {
                        functionText = tokenStream.token().value;
                        this._readWhitespace();
                        expr = this._expr(true);
                        functionText += expr;
                        if (this.options.ieFilters && tokenStream.peek() === Tokens.EQUALS) {
                          do {
                            if (this._readWhitespace()) {
                              functionText += tokenStream.token().value;
                            }
                            if (tokenStream.LA(0) === Tokens.COMMA) {
                              functionText += tokenStream.token().value;
                            }
                            tokenStream.match(Tokens.IDENT);
                            functionText += tokenStream.token().value;
                            tokenStream.match(Tokens.EQUALS);
                            functionText += tokenStream.token().value;
                            lt = tokenStream.peek();
                            while (lt !== Tokens.COMMA && lt !== Tokens.S && lt !== Tokens.RPAREN) {
                              tokenStream.get();
                              functionText += tokenStream.token().value;
                              lt = tokenStream.peek();
                            }
                          } while (tokenStream.match([Tokens.COMMA, Tokens.S]));
                        }
                        tokenStream.match(Tokens.RPAREN);
                        functionText += ")";
                        this._readWhitespace();
                      }
                      return functionText;
                    }, _ie_function: function() {
                      var tokenStream = this._tokenStream, functionText = null, lt;
                      if (tokenStream.match([Tokens.IE_FUNCTION, Tokens.FUNCTION])) {
                        functionText = tokenStream.token().value;
                        do {
                          if (this._readWhitespace()) {
                            functionText += tokenStream.token().value;
                          }
                          if (tokenStream.LA(0) === Tokens.COMMA) {
                            functionText += tokenStream.token().value;
                          }
                          tokenStream.match(Tokens.IDENT);
                          functionText += tokenStream.token().value;
                          tokenStream.match(Tokens.EQUALS);
                          functionText += tokenStream.token().value;
                          lt = tokenStream.peek();
                          while (lt !== Tokens.COMMA && lt !== Tokens.S && lt !== Tokens.RPAREN) {
                            tokenStream.get();
                            functionText += tokenStream.token().value;
                            lt = tokenStream.peek();
                          }
                        } while (tokenStream.match([Tokens.COMMA, Tokens.S]));
                        tokenStream.match(Tokens.RPAREN);
                        functionText += ")";
                        this._readWhitespace();
                      }
                      return functionText;
                    }, _hexcolor: function() {
                      var tokenStream = this._tokenStream, token = null, color;
                      if (tokenStream.match(Tokens.HASH)) {
                        token = tokenStream.token();
                        color = token.value;
                        if (!/#[a-f0-9]{3,6}/i.test(color)) {
                          throw new SyntaxError("Expected a hex color but found '" + color + "' at line " + token.startLine + ", col " + token.startCol + ".", token.startLine, token.startCol);
                        }
                        this._readWhitespace();
                      }
                      return token;
                    }, _keyframes: function() {
                      var tokenStream = this._tokenStream, token, tt, name, prefix = "";
                      tokenStream.mustMatch(Tokens.KEYFRAMES_SYM);
                      token = tokenStream.token();
                      if (/^@\-([^\-]+)\-/.test(token.value)) {
                        prefix = RegExp.$1;
                      }
                      this._readWhitespace();
                      name = this._keyframe_name();
                      this._readWhitespace();
                      tokenStream.mustMatch(Tokens.LBRACE);
                      this.fire({ type: "startkeyframes", name, prefix, line: token.startLine, col: token.startCol });
                      this._readWhitespace();
                      tt = tokenStream.peek();
                      while (tt === Tokens.IDENT || tt === Tokens.PERCENTAGE) {
                        this._keyframe_rule();
                        this._readWhitespace();
                        tt = tokenStream.peek();
                      }
                      this.fire({ type: "endkeyframes", name, prefix, line: token.startLine, col: token.startCol });
                      this._readWhitespace();
                      tokenStream.mustMatch(Tokens.RBRACE);
                      this._readWhitespace();
                    }, _keyframe_name: function() {
                      var tokenStream = this._tokenStream;
                      tokenStream.mustMatch([Tokens.IDENT, Tokens.STRING]);
                      return SyntaxUnit.fromToken(tokenStream.token());
                    }, _keyframe_rule: function() {
                      var keyList = this._key_list();
                      this.fire({ type: "startkeyframerule", keys: keyList, line: keyList[0].line, col: keyList[0].col });
                      this._readDeclarations(true);
                      this.fire({ type: "endkeyframerule", keys: keyList, line: keyList[0].line, col: keyList[0].col });
                    }, _key_list: function() {
                      var tokenStream = this._tokenStream, keyList = [];
                      keyList.push(this._key());
                      this._readWhitespace();
                      while (tokenStream.match(Tokens.COMMA)) {
                        this._readWhitespace();
                        keyList.push(this._key());
                        this._readWhitespace();
                      }
                      return keyList;
                    }, _key: function() {
                      var tokenStream = this._tokenStream, token;
                      if (tokenStream.match(Tokens.PERCENTAGE)) {
                        return SyntaxUnit.fromToken(tokenStream.token());
                      } else if (tokenStream.match(Tokens.IDENT)) {
                        token = tokenStream.token();
                        if (/from|to/i.test(token.value)) {
                          return SyntaxUnit.fromToken(token);
                        }
                        tokenStream.unget();
                      }
                      this._unexpectedToken(tokenStream.LT(1));
                    }, _skipCruft: function() {
                      while (this._tokenStream.match([Tokens.S, Tokens.CDO, Tokens.CDC])) {
                      }
                    }, _readDeclarations: function(checkStart, readMargins) {
                      var tokenStream = this._tokenStream, tt;
                      this._readWhitespace();
                      if (checkStart) {
                        tokenStream.mustMatch(Tokens.LBRACE);
                      }
                      this._readWhitespace();
                      try {
                        while (true) {
                          if (tokenStream.match(Tokens.SEMICOLON) || readMargins && this._margin()) {
                          } else if (this._declaration()) {
                            if (!tokenStream.match(Tokens.SEMICOLON)) {
                              break;
                            }
                          } else {
                            break;
                          }
                          this._readWhitespace();
                        }
                        tokenStream.mustMatch(Tokens.RBRACE);
                        this._readWhitespace();
                      } catch (ex) {
                        if (ex instanceof SyntaxError && !this.options.strict) {
                          this.fire({ type: "error", error: ex, message: ex.message, line: ex.line, col: ex.col });
                          tt = tokenStream.advance([Tokens.SEMICOLON, Tokens.RBRACE]);
                          if (tt === Tokens.SEMICOLON) {
                            this._readDeclarations(false, readMargins);
                          } else if (tt !== Tokens.RBRACE) {
                            throw ex;
                          }
                        } else {
                          throw ex;
                        }
                      }
                    }, _readWhitespace: function() {
                      var tokenStream = this._tokenStream, ws = "";
                      while (tokenStream.match(Tokens.S)) {
                        ws += tokenStream.token().value;
                      }
                      return ws;
                    }, _unexpectedToken: function(token) {
                      throw new SyntaxError("Unexpected token '" + token.value + "' at line " + token.startLine + ", col " + token.startCol + ".", token.startLine, token.startCol);
                    }, _verifyEnd: function() {
                      if (this._tokenStream.LA(1) !== Tokens.EOF) {
                        this._unexpectedToken(this._tokenStream.LT(1));
                      }
                    }, _validateProperty: function(property, value) {
                      Validation.validate(property, value);
                    }, parse: function(input) {
                      this._tokenStream = new TokenStream(input, Tokens);
                      this._stylesheet();
                    }, parseStyleSheet: function(input) {
                      return this.parse(input);
                    }, parseMediaQuery: function(input) {
                      this._tokenStream = new TokenStream(input, Tokens);
                      var result = this._media_query();
                      this._verifyEnd();
                      return result;
                    }, parsePropertyValue: function(input) {
                      this._tokenStream = new TokenStream(input, Tokens);
                      this._readWhitespace();
                      var result = this._expr();
                      this._readWhitespace();
                      this._verifyEnd();
                      return result;
                    }, parseRule: function(input) {
                      this._tokenStream = new TokenStream(input, Tokens);
                      this._readWhitespace();
                      var result = this._ruleset();
                      this._readWhitespace();
                      this._verifyEnd();
                      return result;
                    }, parseSelector: function(input) {
                      this._tokenStream = new TokenStream(input, Tokens);
                      this._readWhitespace();
                      var result = this._selector();
                      this._readWhitespace();
                      this._verifyEnd();
                      return result;
                    }, parseStyleAttribute: function(input) {
                      input += "}";
                      this._tokenStream = new TokenStream(input, Tokens);
                      this._readDeclarations();
                    } };
                    for (prop in additions) {
                      if (Object.prototype.hasOwnProperty.call(additions, prop)) {
                        proto[prop] = additions[prop];
                      }
                    }
                    return proto;
                  }();
                }, { "../util/EventTarget": 23, "../util/SyntaxError": 25, "../util/SyntaxUnit": 26, "./Combinator": 2, "./MediaFeature": 4, "./MediaQuery": 5, "./PropertyName": 8, "./PropertyValue": 9, "./PropertyValuePart": 11, "./Selector": 13, "./SelectorPart": 14, "./SelectorSubPart": 15, "./TokenStream": 17, "./Tokens": 18, "./Validation": 19 }], 7: [function(require2, module2, exports2) {
                  module2.exports = { __proto__: null, "align-items": "flex-start | flex-end | center | baseline | stretch", "align-content": "flex-start | flex-end | center | space-between | space-around | stretch", "align-self": "auto | flex-start | flex-end | center | baseline | stretch", "all": "initial | inherit | unset", "-webkit-align-items": "flex-start | flex-end | center | baseline | stretch", "-webkit-align-content": "flex-start | flex-end | center | space-between | space-around | stretch", "-webkit-align-self": "auto | flex-start | flex-end | center | baseline | stretch", "alignment-adjust": "auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical | <percentage> | <length>", "alignment-baseline": "auto | baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical", "animation": 1, "animation-delay": "<time>#", "animation-direction": "<single-animation-direction>#", "animation-duration": "<time>#", "animation-fill-mode": "[ none | forwards | backwards | both ]#", "animation-iteration-count": "[ <number> | infinite ]#", "animation-name": "[ none | <single-animation-name> ]#", "animation-play-state": "[ running | paused ]#", "animation-timing-function": 1, "-moz-animation-delay": "<time>#", "-moz-animation-direction": "[ normal | alternate ]#", "-moz-animation-duration": "<time>#", "-moz-animation-iteration-count": "[ <number> | infinite ]#", "-moz-animation-name": "[ none | <single-animation-name> ]#", "-moz-animation-play-state": "[ running | paused ]#", "-ms-animation-delay": "<time>#", "-ms-animation-direction": "[ normal | alternate ]#", "-ms-animation-duration": "<time>#", "-ms-animation-iteration-count": "[ <number> | infinite ]#", "-ms-animation-name": "[ none | <single-animation-name> ]#", "-ms-animation-play-state": "[ running | paused ]#", "-webkit-animation-delay": "<time>#", "-webkit-animation-direction": "[ normal | alternate ]#", "-webkit-animation-duration": "<time>#", "-webkit-animation-fill-mode": "[ none | forwards | backwards | both ]#", "-webkit-animation-iteration-count": "[ <number> | infinite ]#", "-webkit-animation-name": "[ none | <single-animation-name> ]#", "-webkit-animation-play-state": "[ running | paused ]#", "-o-animation-delay": "<time>#", "-o-animation-direction": "[ normal | alternate ]#", "-o-animation-duration": "<time>#", "-o-animation-iteration-count": "[ <number> | infinite ]#", "-o-animation-name": "[ none | <single-animation-name> ]#", "-o-animation-play-state": "[ running | paused ]#", "appearance": "none | auto", "-moz-appearance": "none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized", "-ms-appearance": "none | icon | window | desktop | workspace | document | tooltip | dialog | button | push-button | hyperlink | radio | radio-button | checkbox | menu-item | tab | menu | menubar | pull-down-menu | pop-up-menu | list-menu | radio-group | checkbox-group | outline-tree | range | field | combo-box | signature | password | normal", "-webkit-appearance": "none | button | button-bevel | caps-lock-indicator | caret | checkbox | default-button | listbox	| listitem | media-fullscreen-button | media-mute-button | media-play-button | media-seek-back-button	| media-seek-forward-button	| media-slider | media-sliderthumb | menulist	| menulist-button	| menulist-text	| menulist-textfield | push-button	| radio	| searchfield	| searchfield-cancel-button	| searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical	| square-button	| textarea	| textfield	| scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbargripper-horizontal | scrollbargripper-vertical | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical", "-o-appearance": "none | window | desktop | workspace | document | tooltip | dialog | button | push-button | hyperlink | radio | radio-button | checkbox | menu-item | tab | menu | menubar | pull-down-menu | pop-up-menu | list-menu | radio-group | checkbox-group | outline-tree | range | field | combo-box | signature | password | normal", "azimuth": "<azimuth>", "backface-visibility": "visible | hidden", "background": 1, "background-attachment": "<attachment>#", "background-clip": "<box>#", "background-color": "<color>", "background-image": "<bg-image>#", "background-origin": "<box>#", "background-position": "<bg-position>", "background-repeat": "<repeat-style>#", "background-size": "<bg-size>#", "baseline-shift": "baseline | sub | super | <percentage> | <length>", "behavior": 1, "binding": 1, "bleed": "<length>", "bookmark-label": "<content> | <attr> | <string>", "bookmark-level": "none | <integer>", "bookmark-state": "open | closed", "bookmark-target": "none | <uri> | <attr>", "border": "<border-width> || <border-style> || <color>", "border-bottom": "<border-width> || <border-style> || <color>", "border-bottom-color": "<color>", "border-bottom-left-radius": "<x-one-radius>", "border-bottom-right-radius": "<x-one-radius>", "border-bottom-style": "<border-style>", "border-bottom-width": "<border-width>", "border-collapse": "collapse | separate", "border-color": "<color>{1,4}", "border-image": 1, "border-image-outset": "[ <length> | <number> ]{1,4}", "border-image-repeat": "[ stretch | repeat | round ]{1,2}", "border-image-slice": "<border-image-slice>", "border-image-source": "<image> | none", "border-image-width": "[ <length> | <percentage> | <number> | auto ]{1,4}", "border-left": "<border-width> || <border-style> || <color>", "border-left-color": "<color>", "border-left-style": "<border-style>", "border-left-width": "<border-width>", "border-radius": "<border-radius>", "border-right": "<border-width> || <border-style> || <color>", "border-right-color": "<color>", "border-right-style": "<border-style>", "border-right-width": "<border-width>", "border-spacing": "<length>{1,2}", "border-style": "<border-style>{1,4}", "border-top": "<border-width> || <border-style> || <color>", "border-top-color": "<color>", "border-top-left-radius": "<x-one-radius>", "border-top-right-radius": "<x-one-radius>", "border-top-style": "<border-style>", "border-top-width": "<border-width>", "border-width": "<border-width>{1,4}", "bottom": "<margin-width>", "-moz-box-align": "start | end | center | baseline | stretch", "-moz-box-decoration-break": "slice | clone", "-moz-box-direction": "normal | reverse", "-moz-box-flex": "<number>", "-moz-box-flex-group": "<integer>", "-moz-box-lines": "single | multiple", "-moz-box-ordinal-group": "<integer>", "-moz-box-orient": "horizontal | vertical | inline-axis | block-axis", "-moz-box-pack": "start | end | center | justify", "-o-box-decoration-break": "slice | clone", "-webkit-box-align": "start | end | center | baseline | stretch", "-webkit-box-decoration-break": "slice | clone", "-webkit-box-direction": "normal | reverse", "-webkit-box-flex": "<number>", "-webkit-box-flex-group": "<integer>", "-webkit-box-lines": "single | multiple", "-webkit-box-ordinal-group": "<integer>", "-webkit-box-orient": "horizontal | vertical | inline-axis | block-axis", "-webkit-box-pack": "start | end | center | justify", "box-decoration-break": "slice | clone", "box-shadow": "<box-shadow>", "box-sizing": "content-box | border-box", "break-after": "auto | always | avoid | left | right | page | column | avoid-page | avoid-column", "break-before": "auto | always | avoid | left | right | page | column | avoid-page | avoid-column", "break-inside": "auto | avoid | avoid-page | avoid-column", "caption-side": "top | bottom", "clear": "none | right | left | both", "clip": "<shape> | auto", "-webkit-clip-path": "<clip-source> | <clip-path> | none", "clip-path": "<clip-source> | <clip-path> | none", "clip-rule": "nonzero | evenodd", "color": "<color>", "color-interpolation": "auto | sRGB | linearRGB", "color-interpolation-filters": "auto | sRGB | linearRGB", "color-profile": 1, "color-rendering": "auto | optimizeSpeed | optimizeQuality", "column-count": "<integer> | auto", "column-fill": "auto | balance", "column-gap": "<length> | normal", "column-rule": "<border-width> || <border-style> || <color>", "column-rule-color": "<color>", "column-rule-style": "<border-style>", "column-rule-width": "<border-width>", "column-span": "none | all", "column-width": "<length> | auto", "columns": 1, "content": 1, "counter-increment": 1, "counter-reset": 1, "crop": "<shape> | auto", "cue": "cue-after | cue-before", "cue-after": 1, "cue-before": 1, "cursor": 1, "direction": "ltr | rtl", "display": "inline | block | list-item | inline-block | table | inline-table | table-row-group | table-header-group | table-footer-group | table-row | table-column-group | table-column | table-cell | table-caption | grid | inline-grid | run-in | ruby | ruby-base | ruby-text | ruby-base-container | ruby-text-container | contents | none | -moz-box | -moz-inline-block | -moz-inline-box | -moz-inline-grid | -moz-inline-stack | -moz-inline-table | -moz-grid | -moz-grid-group | -moz-grid-line | -moz-groupbox | -moz-deck | -moz-popup | -moz-stack | -moz-marker | -webkit-box | -webkit-inline-box | -ms-flexbox | -ms-inline-flexbox | flex | -webkit-flex | inline-flex | -webkit-inline-flex", "dominant-baseline": "auto | use-script | no-change | reset-size | ideographic | alphabetic | hanging | mathematical | central | middle | text-after-edge | text-before-edge", "drop-initial-after-adjust": "central | middle | after-edge | text-after-edge | ideographic | alphabetic | mathematical | <percentage> | <length>", "drop-initial-after-align": "baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical", "drop-initial-before-adjust": "before-edge | text-before-edge | central | middle | hanging | mathematical | <percentage> | <length>", "drop-initial-before-align": "caps-height | baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical", "drop-initial-size": "auto | line | <length> | <percentage>", "drop-initial-value": "<integer>", "elevation": "<angle> | below | level | above | higher | lower", "empty-cells": "show | hide", "enable-background": 1, "fill": "<paint>", "fill-opacity": "<opacity-value>", "fill-rule": "nonzero | evenodd", "filter": "<filter-function-list> | none", "fit": "fill | hidden | meet | slice", "fit-position": 1, "flex": "<flex>", "flex-basis": "<width>", "flex-direction": "row | row-reverse | column | column-reverse", "flex-flow": "<flex-direction> || <flex-wrap>", "flex-grow": "<number>", "flex-shrink": "<number>", "flex-wrap": "nowrap | wrap | wrap-reverse", "-webkit-flex": "<flex>", "-webkit-flex-basis": "<width>", "-webkit-flex-direction": "row | row-reverse | column | column-reverse", "-webkit-flex-flow": "<flex-direction> || <flex-wrap>", "-webkit-flex-grow": "<number>", "-webkit-flex-shrink": "<number>", "-webkit-flex-wrap": "nowrap | wrap | wrap-reverse", "-ms-flex": "<flex>", "-ms-flex-align": "start | end | center | stretch | baseline", "-ms-flex-direction": "row | row-reverse | column | column-reverse", "-ms-flex-order": "<number>", "-ms-flex-pack": "start | end | center | justify", "-ms-flex-wrap": "nowrap | wrap | wrap-reverse", "float": "left | right | none", "float-offset": 1, "flood-color": 1, "flood-opacity": "<opacity-value>", "font": "<font-shorthand> | caption | icon | menu | message-box | small-caption | status-bar", "font-family": "<font-family>", "font-feature-settings": "<feature-tag-value> | normal", "font-kerning": "auto | normal | none", "font-size": "<font-size>", "font-size-adjust": "<number> | none", "font-stretch": "<font-stretch>", "font-style": "<font-style>", "font-variant": "<font-variant> | normal | none", "font-variant-alternates": "<font-variant-alternates> | normal", "font-variant-caps": "<font-variant-caps> | normal", "font-variant-east-asian": "<font-variant-east-asian> | normal", "font-variant-ligatures": "<font-variant-ligatures> | normal | none", "font-variant-numeric": "<font-variant-numeric> | normal", "font-variant-position": "normal | sub | super", "font-weight": "<font-weight>", "glyph-orientation-horizontal": "<glyph-angle>", "glyph-orientation-vertical": "auto | <glyph-angle>", "grid": 1, "grid-area": 1, "grid-auto-columns": 1, "grid-auto-flow": 1, "grid-auto-position": 1, "grid-auto-rows": 1, "grid-cell-stacking": "columns | rows | layer", "grid-column": 1, "grid-columns": 1, "grid-column-align": "start | end | center | stretch", "grid-column-sizing": 1, "grid-column-start": 1, "grid-column-end": 1, "grid-column-span": "<integer>", "grid-flow": "none | rows | columns", "grid-layer": "<integer>", "grid-row": 1, "grid-rows": 1, "grid-row-align": "start | end | center | stretch", "grid-row-start": 1, "grid-row-end": 1, "grid-row-span": "<integer>", "grid-row-sizing": 1, "grid-template": 1, "grid-template-areas": 1, "grid-template-columns": 1, "grid-template-rows": 1, "hanging-punctuation": 1, "height": "<margin-width> | <content-sizing>", "hyphenate-after": "<integer> | auto", "hyphenate-before": "<integer> | auto", "hyphenate-character": "<string> | auto", "hyphenate-lines": "no-limit | <integer>", "hyphenate-resource": 1, "hyphens": "none | manual | auto", "icon": 1, "image-orientation": "angle | auto", "image-rendering": "auto | optimizeSpeed | optimizeQuality", "image-resolution": 1, "ime-mode": "auto | normal | active | inactive | disabled", "inline-box-align": "last | <integer>", "justify-content": "flex-start | flex-end | center | space-between | space-around", "-webkit-justify-content": "flex-start | flex-end | center | space-between | space-around", "kerning": "auto | <length>", "left": "<margin-width>", "letter-spacing": "<length> | normal", "line-height": "<line-height>", "line-break": "auto | loose | normal | strict", "line-stacking": 1, "line-stacking-ruby": "exclude-ruby | include-ruby", "line-stacking-shift": "consider-shifts | disregard-shifts", "line-stacking-strategy": "inline-line-height | block-line-height | max-height | grid-height", "list-style": 1, "list-style-image": "<uri> | none", "list-style-position": "inside | outside", "list-style-type": "disc | circle | square | decimal | decimal-leading-zero | lower-roman | upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha | upper-alpha | none", "margin": "<margin-width>{1,4}", "margin-bottom": "<margin-width>", "margin-left": "<margin-width>", "margin-right": "<margin-width>", "margin-top": "<margin-width>", "mark": 1, "mark-after": 1, "mark-before": 1, "marker": 1, "marker-end": 1, "marker-mid": 1, "marker-start": 1, "marks": 1, "marquee-direction": 1, "marquee-play-count": 1, "marquee-speed": 1, "marquee-style": 1, "mask": 1, "max-height": "<length> | <percentage> | <content-sizing> | none", "max-width": "<length> | <percentage> | <content-sizing> | none", "min-height": "<length> | <percentage> | <content-sizing> | contain-floats | -moz-contain-floats | -webkit-contain-floats", "min-width": "<length> | <percentage> | <content-sizing> | contain-floats | -moz-contain-floats | -webkit-contain-floats", "move-to": 1, "nav-down": 1, "nav-index": 1, "nav-left": 1, "nav-right": 1, "nav-up": 1, "object-fit": "fill | contain | cover | none | scale-down", "object-position": "<position>", "opacity": "<opacity-value>", "order": "<integer>", "-webkit-order": "<integer>", "orphans": "<integer>", "outline": 1, "outline-color": "<color> | invert", "outline-offset": 1, "outline-style": "<border-style>", "outline-width": "<border-width>", "overflow": "visible | hidden | scroll | auto", "overflow-style": 1, "overflow-wrap": "normal | break-word", "overflow-x": 1, "overflow-y": 1, "padding": "<padding-width>{1,4}", "padding-bottom": "<padding-width>", "padding-left": "<padding-width>", "padding-right": "<padding-width>", "padding-top": "<padding-width>", "page": 1, "page-break-after": "auto | always | avoid | left | right", "page-break-before": "auto | always | avoid | left | right", "page-break-inside": "auto | avoid", "page-policy": 1, "pause": 1, "pause-after": 1, "pause-before": 1, "perspective": 1, "perspective-origin": 1, "phonemes": 1, "pitch": 1, "pitch-range": 1, "play-during": 1, "pointer-events": "auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all", "position": "static | relative | absolute | fixed", "presentation-level": 1, "punctuation-trim": 1, "quotes": 1, "rendering-intent": 1, "resize": 1, "rest": 1, "rest-after": 1, "rest-before": 1, "richness": 1, "right": "<margin-width>", "rotation": 1, "rotation-point": 1, "ruby-align": 1, "ruby-overhang": 1, "ruby-position": 1, "ruby-span": 1, "shape-rendering": "auto | optimizeSpeed | crispEdges | geometricPrecision", "size": 1, "speak": "normal | none | spell-out", "speak-header": "once | always", "speak-numeral": "digits | continuous", "speak-punctuation": "code | none", "speech-rate": 1, "src": 1, "stop-color": 1, "stop-opacity": "<opacity-value>", "stress": 1, "string-set": 1, "stroke": "<paint>", "stroke-dasharray": "none | <dasharray>", "stroke-dashoffset": "<percentage> | <length>", "stroke-linecap": "butt | round | square", "stroke-linejoin": "miter | round | bevel", "stroke-miterlimit": "<miterlimit>", "stroke-opacity": "<opacity-value>", "stroke-width": "<percentage> | <length>", "table-layout": "auto | fixed", "tab-size": "<integer> | <length>", "target": 1, "target-name": 1, "target-new": 1, "target-position": 1, "text-align": "left | right | center | justify | match-parent | start | end", "text-align-last": 1, "text-anchor": "start | middle | end", "text-decoration": "<text-decoration-line> || <text-decoration-style> || <text-decoration-color>", "text-decoration-color": "<text-decoration-color>", "text-decoration-line": "<text-decoration-line>", "text-decoration-style": "<text-decoration-style>", "text-emphasis": 1, "text-height": 1, "text-indent": "<length> | <percentage>", "text-justify": "auto | none | inter-word | inter-ideograph | inter-cluster | distribute | kashida", "text-outline": 1, "text-overflow": 1, "text-rendering": "auto | optimizeSpeed | optimizeLegibility | geometricPrecision", "text-shadow": 1, "text-transform": "capitalize | uppercase | lowercase | none", "text-wrap": "normal | none | avoid", "top": "<margin-width>", "-ms-touch-action": "auto | none | pan-x | pan-y | pan-left | pan-right | pan-up | pan-down | manipulation", "touch-action": "auto | none | pan-x | pan-y | pan-left | pan-right | pan-up | pan-down | manipulation", "transform": 1, "transform-origin": 1, "transform-style": 1, "transition": 1, "transition-delay": 1, "transition-duration": 1, "transition-property": 1, "transition-timing-function": 1, "unicode-bidi": "normal | embed | isolate | bidi-override | isolate-override | plaintext", "user-modify": "read-only | read-write | write-only", "user-select": "none | text | toggle | element | elements | all", "vertical-align": "auto | use-script | baseline | sub | super | top | text-top | central | middle | bottom | text-bottom | <percentage> | <length>", "visibility": "visible | hidden | collapse", "voice-balance": 1, "voice-duration": 1, "voice-family": 1, "voice-pitch": 1, "voice-pitch-range": 1, "voice-rate": 1, "voice-stress": 1, "voice-volume": 1, "volume": 1, "white-space": "normal | pre | nowrap | pre-wrap | pre-line | -pre-wrap | -o-pre-wrap | -moz-pre-wrap | -hp-pre-wrap", "white-space-collapse": 1, "widows": "<integer>", "width": "<length> | <percentage> | <content-sizing> | auto", "will-change": "<will-change>", "word-break": "normal | keep-all | break-all", "word-spacing": "<length> | normal", "word-wrap": "normal | break-word", "writing-mode": "horizontal-tb | vertical-rl | vertical-lr | lr-tb | rl-tb | tb-rl | bt-rl | tb-lr | bt-lr | lr-bt | rl-bt | lr | rl | tb", "z-index": "<integer> | auto", "zoom": "<number> | <percentage> | normal" };
                }, {}], 8: [function(require2, module2, exports2) {
                  module2.exports = PropertyName;
                  var SyntaxUnit = require2("../util/SyntaxUnit");
                  var Parser = require2("./Parser");
                  function PropertyName(text, hack, line, col) {
                    SyntaxUnit.call(this, text, line, col, Parser.PROPERTY_NAME_TYPE);
                    this.hack = hack;
                  }
                  PropertyName.prototype = new SyntaxUnit();
                  PropertyName.prototype.constructor = PropertyName;
                  PropertyName.prototype.toString = function() {
                    return (this.hack ? this.hack : "") + this.text;
                  };
                }, { "../util/SyntaxUnit": 26, "./Parser": 6 }], 9: [function(require2, module2, exports2) {
                  module2.exports = PropertyValue;
                  var SyntaxUnit = require2("../util/SyntaxUnit");
                  var Parser = require2("./Parser");
                  function PropertyValue(parts, line, col) {
                    SyntaxUnit.call(this, parts.join(" "), line, col, Parser.PROPERTY_VALUE_TYPE);
                    this.parts = parts;
                  }
                  PropertyValue.prototype = new SyntaxUnit();
                  PropertyValue.prototype.constructor = PropertyValue;
                }, { "../util/SyntaxUnit": 26, "./Parser": 6 }], 10: [function(require2, module2, exports2) {
                  module2.exports = PropertyValueIterator;
                  function PropertyValueIterator(value) {
                    this._i = 0;
                    this._parts = value.parts;
                    this._marks = [];
                    this.value = value;
                  }
                  PropertyValueIterator.prototype.count = function() {
                    return this._parts.length;
                  };
                  PropertyValueIterator.prototype.isFirst = function() {
                    return this._i === 0;
                  };
                  PropertyValueIterator.prototype.hasNext = function() {
                    return this._i < this._parts.length;
                  };
                  PropertyValueIterator.prototype.mark = function() {
                    this._marks.push(this._i);
                  };
                  PropertyValueIterator.prototype.peek = function(count) {
                    return this.hasNext() ? this._parts[this._i + (count || 0)] : null;
                  };
                  PropertyValueIterator.prototype.next = function() {
                    return this.hasNext() ? this._parts[this._i++] : null;
                  };
                  PropertyValueIterator.prototype.previous = function() {
                    return this._i > 0 ? this._parts[--this._i] : null;
                  };
                  PropertyValueIterator.prototype.restore = function() {
                    if (this._marks.length) {
                      this._i = this._marks.pop();
                    }
                  };
                  PropertyValueIterator.prototype.drop = function() {
                    this._marks.pop();
                  };
                }, {}], 11: [function(require2, module2, exports2) {
                  module2.exports = PropertyValuePart;
                  var SyntaxUnit = require2("../util/SyntaxUnit");
                  var Colors = require2("./Colors");
                  var Parser = require2("./Parser");
                  var Tokens = require2("./Tokens");
                  function PropertyValuePart(text, line, col, optionalHint) {
                    var hint = optionalHint || {};
                    SyntaxUnit.call(this, text, line, col, Parser.PROPERTY_VALUE_PART_TYPE);
                    this.type = "unknown";
                    var temp;
                    if (/^([+\-]?[\d\.]+)([a-z]+)$/i.test(text)) {
                      this.type = "dimension";
                      this.value = +RegExp.$1;
                      this.units = RegExp.$2;
                      switch (this.units.toLowerCase()) {
                        case "em":
                        case "rem":
                        case "ex":
                        case "px":
                        case "cm":
                        case "mm":
                        case "in":
                        case "pt":
                        case "pc":
                        case "ch":
                        case "vh":
                        case "vw":
                        case "vmax":
                        case "vmin":
                          this.type = "length";
                          break;
                        case "fr":
                          this.type = "grid";
                          break;
                        case "deg":
                        case "rad":
                        case "grad":
                        case "turn":
                          this.type = "angle";
                          break;
                        case "ms":
                        case "s":
                          this.type = "time";
                          break;
                        case "hz":
                        case "khz":
                          this.type = "frequency";
                          break;
                        case "dpi":
                        case "dpcm":
                          this.type = "resolution";
                          break;
                      }
                    } else if (/^([+\-]?[\d\.]+)%$/i.test(text)) {
                      this.type = "percentage";
                      this.value = +RegExp.$1;
                    } else if (/^([+\-]?\d+)$/i.test(text)) {
                      this.type = "integer";
                      this.value = +RegExp.$1;
                    } else if (/^([+\-]?[\d\.]+)$/i.test(text)) {
                      this.type = "number";
                      this.value = +RegExp.$1;
                    } else if (/^#([a-f0-9]{3,6})/i.test(text)) {
                      this.type = "color";
                      temp = RegExp.$1;
                      if (temp.length === 3) {
                        this.red = parseInt(temp.charAt(0) + temp.charAt(0), 16);
                        this.green = parseInt(temp.charAt(1) + temp.charAt(1), 16);
                        this.blue = parseInt(temp.charAt(2) + temp.charAt(2), 16);
                      } else {
                        this.red = parseInt(temp.substring(0, 2), 16);
                        this.green = parseInt(temp.substring(2, 4), 16);
                        this.blue = parseInt(temp.substring(4, 6), 16);
                      }
                    } else if (/^rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/i.test(text)) {
                      this.type = "color";
                      this.red = +RegExp.$1;
                      this.green = +RegExp.$2;
                      this.blue = +RegExp.$3;
                    } else if (/^rgb\(\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)/i.test(text)) {
                      this.type = "color";
                      this.red = +RegExp.$1 * 255 / 100;
                      this.green = +RegExp.$2 * 255 / 100;
                      this.blue = +RegExp.$3 * 255 / 100;
                    } else if (/^rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d\.]+)\s*\)/i.test(text)) {
                      this.type = "color";
                      this.red = +RegExp.$1;
                      this.green = +RegExp.$2;
                      this.blue = +RegExp.$3;
                      this.alpha = +RegExp.$4;
                    } else if (/^rgba\(\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*,\s*([\d\.]+)\s*\)/i.test(text)) {
                      this.type = "color";
                      this.red = +RegExp.$1 * 255 / 100;
                      this.green = +RegExp.$2 * 255 / 100;
                      this.blue = +RegExp.$3 * 255 / 100;
                      this.alpha = +RegExp.$4;
                    } else if (/^hsl\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)/i.test(text)) {
                      this.type = "color";
                      this.hue = +RegExp.$1;
                      this.saturation = +RegExp.$2 / 100;
                      this.lightness = +RegExp.$3 / 100;
                    } else if (/^hsla\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*,\s*([\d\.]+)\s*\)/i.test(text)) {
                      this.type = "color";
                      this.hue = +RegExp.$1;
                      this.saturation = +RegExp.$2 / 100;
                      this.lightness = +RegExp.$3 / 100;
                      this.alpha = +RegExp.$4;
                    } else if (/^url\(("([^\\"]|\\.)*")\)/i.test(text)) {
                      this.type = "uri";
                      this.uri = PropertyValuePart.parseString(RegExp.$1);
                    } else if (/^([^\(]+)\(/i.test(text)) {
                      this.type = "function";
                      this.name = RegExp.$1;
                      this.value = text;
                    } else if (/^"([^\n\r\f\\"]|\\\r\n|\\[^\r0-9a-f]|\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)*"/i.test(text)) {
                      this.type = "string";
                      this.value = PropertyValuePart.parseString(text);
                    } else if (/^'([^\n\r\f\\']|\\\r\n|\\[^\r0-9a-f]|\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)*'/i.test(text)) {
                      this.type = "string";
                      this.value = PropertyValuePart.parseString(text);
                    } else if (Colors[text.toLowerCase()]) {
                      this.type = "color";
                      temp = Colors[text.toLowerCase()].substring(1);
                      this.red = parseInt(temp.substring(0, 2), 16);
                      this.green = parseInt(temp.substring(2, 4), 16);
                      this.blue = parseInt(temp.substring(4, 6), 16);
                    } else if (/^[,\/]$/.test(text)) {
                      this.type = "operator";
                      this.value = text;
                    } else if (/^-?[a-z_\u00A0-\uFFFF][a-z0-9\-_\u00A0-\uFFFF]*$/i.test(text)) {
                      this.type = "identifier";
                      this.value = text;
                    }
                    this.wasIdent = Boolean(hint.ident);
                  }
                  PropertyValuePart.prototype = new SyntaxUnit();
                  PropertyValuePart.prototype.constructor = PropertyValuePart;
                  PropertyValuePart.parseString = function(str) {
                    str = str.slice(1, -1);
                    var replacer = function(match, esc) {
                      if (/^(\n|\r\n|\r|\f)$/.test(esc)) {
                        return "";
                      }
                      var m = /^[0-9a-f]{1,6}/i.exec(esc);
                      if (m) {
                        var codePoint = parseInt(m[0], 16);
                        if (String.fromCodePoint) {
                          return String.fromCodePoint(codePoint);
                        } else {
                          return String.fromCharCode(codePoint);
                        }
                      }
                      return esc;
                    };
                    return str.replace(/\\(\r\n|[^\r0-9a-f]|[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)/ig, replacer);
                  };
                  PropertyValuePart.serializeString = function(value) {
                    var replacer = function(match, c) {
                      if (c === '"') {
                        return "\\" + c;
                      }
                      var cp = String.codePointAt ? String.codePointAt(0) : String.charCodeAt(0);
                      return "\\" + cp.toString(16) + " ";
                    };
                    return '"' + value.replace(/["\r\n\f]/g, replacer) + '"';
                  };
                  PropertyValuePart.fromToken = function(token) {
                    var part = new PropertyValuePart(token.value, token.startLine, token.startCol, { ident: token.type === Tokens.IDENT });
                    return part;
                  };
                }, { "../util/SyntaxUnit": 26, "./Colors": 1, "./Parser": 6, "./Tokens": 18 }], 12: [function(require2, module2, exports2) {
                  var Pseudos = module2.exports = { __proto__: null, ":first-letter": 1, ":first-line": 1, ":before": 1, ":after": 1 };
                  Pseudos.ELEMENT = 1;
                  Pseudos.CLASS = 2;
                  Pseudos.isElement = function(pseudo) {
                    return pseudo.indexOf("::") === 0 || Pseudos[pseudo.toLowerCase()] === Pseudos.ELEMENT;
                  };
                }, {}], 13: [function(require2, module2, exports2) {
                  module2.exports = Selector;
                  var SyntaxUnit = require2("../util/SyntaxUnit");
                  var Parser = require2("./Parser");
                  var Specificity = require2("./Specificity");
                  function Selector(parts, line, col) {
                    SyntaxUnit.call(this, parts.join(" "), line, col, Parser.SELECTOR_TYPE);
                    this.parts = parts;
                    this.specificity = Specificity.calculate(this);
                  }
                  Selector.prototype = new SyntaxUnit();
                  Selector.prototype.constructor = Selector;
                }, { "../util/SyntaxUnit": 26, "./Parser": 6, "./Specificity": 16 }], 14: [function(require2, module2, exports2) {
                  module2.exports = SelectorPart;
                  var SyntaxUnit = require2("../util/SyntaxUnit");
                  var Parser = require2("./Parser");
                  function SelectorPart(elementName, modifiers, text, line, col) {
                    SyntaxUnit.call(this, text, line, col, Parser.SELECTOR_PART_TYPE);
                    this.elementName = elementName;
                    this.modifiers = modifiers;
                  }
                  SelectorPart.prototype = new SyntaxUnit();
                  SelectorPart.prototype.constructor = SelectorPart;
                }, { "../util/SyntaxUnit": 26, "./Parser": 6 }], 15: [function(require2, module2, exports2) {
                  module2.exports = SelectorSubPart;
                  var SyntaxUnit = require2("../util/SyntaxUnit");
                  var Parser = require2("./Parser");
                  function SelectorSubPart(text, type, line, col) {
                    SyntaxUnit.call(this, text, line, col, Parser.SELECTOR_SUB_PART_TYPE);
                    this.type = type;
                    this.args = [];
                  }
                  SelectorSubPart.prototype = new SyntaxUnit();
                  SelectorSubPart.prototype.constructor = SelectorSubPart;
                }, { "../util/SyntaxUnit": 26, "./Parser": 6 }], 16: [function(require2, module2, exports2) {
                  module2.exports = Specificity;
                  var Pseudos = require2("./Pseudos");
                  var SelectorPart = require2("./SelectorPart");
                  function Specificity(a, b, c, d) {
                    this.a = a;
                    this.b = b;
                    this.c = c;
                    this.d = d;
                  }
                  Specificity.prototype = { constructor: Specificity, compare: function(other) {
                    var comps = ["a", "b", "c", "d"], i, len;
                    for (i = 0, len = comps.length; i < len; i++) {
                      if (this[comps[i]] < other[comps[i]]) {
                        return -1;
                      } else if (this[comps[i]] > other[comps[i]]) {
                        return 1;
                      }
                    }
                    return 0;
                  }, valueOf: function() {
                    return this.a * 1e3 + this.b * 100 + this.c * 10 + this.d;
                  }, toString: function() {
                    return this.a + "," + this.b + "," + this.c + "," + this.d;
                  } };
                  Specificity.calculate = function(selector) {
                    var i, len, part, b = 0, c = 0, d = 0;
                    function updateValues(part2) {
                      var i2, j, len2, num, elementName = part2.elementName ? part2.elementName.text : "", modifier;
                      if (elementName && elementName.charAt(elementName.length - 1) !== "*") {
                        d++;
                      }
                      for (i2 = 0, len2 = part2.modifiers.length; i2 < len2; i2++) {
                        modifier = part2.modifiers[i2];
                        switch (modifier.type) {
                          case "class":
                          case "attribute":
                            c++;
                            break;
                          case "id":
                            b++;
                            break;
                          case "pseudo":
                            if (Pseudos.isElement(modifier.text)) {
                              d++;
                            } else {
                              c++;
                            }
                            break;
                          case "not":
                            for (j = 0, num = modifier.args.length; j < num; j++) {
                              updateValues(modifier.args[j]);
                            }
                        }
                      }
                    }
                    for (i = 0, len = selector.parts.length; i < len; i++) {
                      part = selector.parts[i];
                      if (part instanceof SelectorPart) {
                        updateValues(part);
                      }
                    }
                    return new Specificity(0, b, c, d);
                  };
                }, { "./Pseudos": 12, "./SelectorPart": 14 }], 17: [function(require2, module2, exports2) {
                  module2.exports = TokenStream;
                  var TokenStreamBase = require2("../util/TokenStreamBase");
                  var PropertyValuePart = require2("./PropertyValuePart");
                  var Tokens = require2("./Tokens");
                  var h = /^[0-9a-fA-F]$/, nonascii = /^[\u00A0-\uFFFF]$/, nl = /\n|\r\n|\r|\f/, whitespace = /\u0009|\u000a|\u000c|\u000d|\u0020/;
                  function isHexDigit(c) {
                    return c !== null && h.test(c);
                  }
                  function isDigit(c) {
                    return c !== null && /\d/.test(c);
                  }
                  function isWhitespace(c) {
                    return c !== null && whitespace.test(c);
                  }
                  function isNewLine(c) {
                    return c !== null && nl.test(c);
                  }
                  function isNameStart(c) {
                    return c !== null && /[a-z_\u00A0-\uFFFF\\]/i.test(c);
                  }
                  function isNameChar(c) {
                    return c !== null && (isNameStart(c) || /[0-9\-\\]/.test(c));
                  }
                  function isIdentStart(c) {
                    return c !== null && (isNameStart(c) || /\-\\/.test(c));
                  }
                  function mix(receiver, supplier) {
                    for (var prop in supplier) {
                      if (Object.prototype.hasOwnProperty.call(supplier, prop)) {
                        receiver[prop] = supplier[prop];
                      }
                    }
                    return receiver;
                  }
                  function TokenStream(input) {
                    TokenStreamBase.call(this, input, Tokens);
                  }
                  TokenStream.prototype = mix(new TokenStreamBase(), { _getToken: function() {
                    var c, reader = this._reader, token = null, startLine = reader.getLine(), startCol = reader.getCol();
                    c = reader.read();
                    while (c) {
                      switch (c) {
                        case "/":
                          if (reader.peek() === "*") {
                            token = this.commentToken(c, startLine, startCol);
                          } else {
                            token = this.charToken(c, startLine, startCol);
                          }
                          break;
                        case "|":
                        case "~":
                        case "^":
                        case "$":
                        case "*":
                          if (reader.peek() === "=") {
                            token = this.comparisonToken(c, startLine, startCol);
                          } else {
                            token = this.charToken(c, startLine, startCol);
                          }
                          break;
                        case '"':
                        case "'":
                          token = this.stringToken(c, startLine, startCol);
                          break;
                        case "#":
                          if (isNameChar(reader.peek())) {
                            token = this.hashToken(c, startLine, startCol);
                          } else {
                            token = this.charToken(c, startLine, startCol);
                          }
                          break;
                        case ".":
                          if (isDigit(reader.peek())) {
                            token = this.numberToken(c, startLine, startCol);
                          } else {
                            token = this.charToken(c, startLine, startCol);
                          }
                          break;
                        case "-":
                          if (reader.peek() === "-") {
                            token = this.htmlCommentEndToken(c, startLine, startCol);
                          } else if (isNameStart(reader.peek())) {
                            token = this.identOrFunctionToken(c, startLine, startCol);
                          } else {
                            token = this.charToken(c, startLine, startCol);
                          }
                          break;
                        case "!":
                          token = this.importantToken(c, startLine, startCol);
                          break;
                        case "@":
                          token = this.atRuleToken(c, startLine, startCol);
                          break;
                        case ":":
                          token = this.notToken(c, startLine, startCol);
                          break;
                        case "<":
                          token = this.htmlCommentStartToken(c, startLine, startCol);
                          break;
                        case "\\":
                          if (/[^\r\n\f]/.test(reader.peek())) {
                            token = this.identOrFunctionToken(this.readEscape(c, true), startLine, startCol);
                          } else {
                            token = this.charToken(c, startLine, startCol);
                          }
                          break;
                        case "U":
                        case "u":
                          if (reader.peek() === "+") {
                            token = this.unicodeRangeToken(c, startLine, startCol);
                            break;
                          }
                        default:
                          if (isDigit(c)) {
                            token = this.numberToken(c, startLine, startCol);
                          } else if (isWhitespace(c)) {
                            token = this.whitespaceToken(c, startLine, startCol);
                          } else if (isIdentStart(c)) {
                            token = this.identOrFunctionToken(c, startLine, startCol);
                          } else {
                            token = this.charToken(c, startLine, startCol);
                          }
                      }
                      break;
                    }
                    if (!token && c === null) {
                      token = this.createToken(Tokens.EOF, null, startLine, startCol);
                    }
                    return token;
                  }, createToken: function(tt, value, startLine, startCol, options) {
                    var reader = this._reader;
                    options = options || {};
                    return { value, type: tt, channel: options.channel, endChar: options.endChar, hide: options.hide || false, startLine, startCol, endLine: reader.getLine(), endCol: reader.getCol() };
                  }, atRuleToken: function(first, startLine, startCol) {
                    var rule = first, reader = this._reader, tt = Tokens.CHAR, ident;
                    reader.mark();
                    ident = this.readName();
                    rule = first + ident;
                    tt = Tokens.type(rule.toLowerCase());
                    if (tt === Tokens.CHAR || tt === Tokens.UNKNOWN) {
                      if (rule.length > 1) {
                        tt = Tokens.UNKNOWN_SYM;
                      } else {
                        tt = Tokens.CHAR;
                        rule = first;
                        reader.reset();
                      }
                    }
                    return this.createToken(tt, rule, startLine, startCol);
                  }, charToken: function(c, startLine, startCol) {
                    var tt = Tokens.type(c);
                    var opts = {};
                    if (tt === -1) {
                      tt = Tokens.CHAR;
                    } else {
                      opts.endChar = Tokens[tt].endChar;
                    }
                    return this.createToken(tt, c, startLine, startCol, opts);
                  }, commentToken: function(first, startLine, startCol) {
                    var comment = this.readComment(first);
                    return this.createToken(Tokens.COMMENT, comment, startLine, startCol);
                  }, comparisonToken: function(c, startLine, startCol) {
                    var reader = this._reader, comparison = c + reader.read(), tt = Tokens.type(comparison) || Tokens.CHAR;
                    return this.createToken(tt, comparison, startLine, startCol);
                  }, hashToken: function(first, startLine, startCol) {
                    var name = this.readName(first);
                    return this.createToken(Tokens.HASH, name, startLine, startCol);
                  }, htmlCommentStartToken: function(first, startLine, startCol) {
                    var reader = this._reader, text = first;
                    reader.mark();
                    text += reader.readCount(3);
                    if (text === "<!--") {
                      return this.createToken(Tokens.CDO, text, startLine, startCol);
                    } else {
                      reader.reset();
                      return this.charToken(first, startLine, startCol);
                    }
                  }, htmlCommentEndToken: function(first, startLine, startCol) {
                    var reader = this._reader, text = first;
                    reader.mark();
                    text += reader.readCount(2);
                    if (text === "-->") {
                      return this.createToken(Tokens.CDC, text, startLine, startCol);
                    } else {
                      reader.reset();
                      return this.charToken(first, startLine, startCol);
                    }
                  }, identOrFunctionToken: function(first, startLine, startCol) {
                    var reader = this._reader, ident = this.readName(first), tt = Tokens.IDENT, uriFns = ["url(", "url-prefix(", "domain("], uri;
                    if (reader.peek() === "(") {
                      ident += reader.read();
                      if (uriFns.indexOf(ident.toLowerCase()) > -1) {
                        reader.mark();
                        uri = this.readURI(ident);
                        if (uri === null) {
                          reader.reset();
                          tt = Tokens.FUNCTION;
                        } else {
                          tt = Tokens.URI;
                          ident = uri;
                        }
                      } else {
                        tt = Tokens.FUNCTION;
                      }
                    } else if (reader.peek() === ":") {
                      if (ident.toLowerCase() === "progid") {
                        ident += reader.readTo("(");
                        tt = Tokens.IE_FUNCTION;
                      }
                    }
                    return this.createToken(tt, ident, startLine, startCol);
                  }, importantToken: function(first, startLine, startCol) {
                    var reader = this._reader, important = first, tt = Tokens.CHAR, temp, c;
                    reader.mark();
                    c = reader.read();
                    while (c) {
                      if (c === "/") {
                        if (reader.peek() !== "*") {
                          break;
                        } else {
                          temp = this.readComment(c);
                          if (temp === "") {
                            break;
                          }
                        }
                      } else if (isWhitespace(c)) {
                        important += c + this.readWhitespace();
                      } else if (/i/i.test(c)) {
                        temp = reader.readCount(8);
                        if (/mportant/i.test(temp)) {
                          important += c + temp;
                          tt = Tokens.IMPORTANT_SYM;
                        }
                        break;
                      } else {
                        break;
                      }
                      c = reader.read();
                    }
                    if (tt === Tokens.CHAR) {
                      reader.reset();
                      return this.charToken(first, startLine, startCol);
                    } else {
                      return this.createToken(tt, important, startLine, startCol);
                    }
                  }, notToken: function(first, startLine, startCol) {
                    var reader = this._reader, text = first;
                    reader.mark();
                    text += reader.readCount(4);
                    if (text.toLowerCase() === ":not(") {
                      return this.createToken(Tokens.NOT, text, startLine, startCol);
                    } else {
                      reader.reset();
                      return this.charToken(first, startLine, startCol);
                    }
                  }, numberToken: function(first, startLine, startCol) {
                    var reader = this._reader, value = this.readNumber(first), ident, tt = Tokens.NUMBER, c = reader.peek();
                    if (isIdentStart(c)) {
                      ident = this.readName(reader.read());
                      value += ident;
                      if (/^em$|^ex$|^px$|^gd$|^rem$|^vw$|^vh$|^vmax$|^vmin$|^ch$|^cm$|^mm$|^in$|^pt$|^pc$/i.test(ident)) {
                        tt = Tokens.LENGTH;
                      } else if (/^deg|^rad$|^grad$|^turn$/i.test(ident)) {
                        tt = Tokens.ANGLE;
                      } else if (/^ms$|^s$/i.test(ident)) {
                        tt = Tokens.TIME;
                      } else if (/^hz$|^khz$/i.test(ident)) {
                        tt = Tokens.FREQ;
                      } else if (/^dpi$|^dpcm$/i.test(ident)) {
                        tt = Tokens.RESOLUTION;
                      } else {
                        tt = Tokens.DIMENSION;
                      }
                    } else if (c === "%") {
                      value += reader.read();
                      tt = Tokens.PERCENTAGE;
                    }
                    return this.createToken(tt, value, startLine, startCol);
                  }, stringToken: function(first, startLine, startCol) {
                    var delim = first, string = first, reader = this._reader, tt = Tokens.STRING, c = reader.read(), i;
                    while (c) {
                      string += c;
                      if (c === "\\") {
                        c = reader.read();
                        if (c === null) {
                          break;
                        } else if (/[^\r\n\f0-9a-f]/i.test(c)) {
                          string += c;
                        } else {
                          for (i = 0; isHexDigit(c) && i < 6; i++) {
                            string += c;
                            c = reader.read();
                          }
                          if (c === "\r" && reader.peek() === "\n") {
                            string += c;
                            c = reader.read();
                          }
                          if (isWhitespace(c)) {
                            string += c;
                          } else {
                            continue;
                          }
                        }
                      } else if (c === delim) {
                        break;
                      } else if (isNewLine(reader.peek())) {
                        tt = Tokens.INVALID;
                        break;
                      }
                      c = reader.read();
                    }
                    if (c === null) {
                      tt = Tokens.INVALID;
                    }
                    return this.createToken(tt, string, startLine, startCol);
                  }, unicodeRangeToken: function(first, startLine, startCol) {
                    var reader = this._reader, value = first, temp, tt = Tokens.CHAR;
                    if (reader.peek() === "+") {
                      reader.mark();
                      value += reader.read();
                      value += this.readUnicodeRangePart(true);
                      if (value.length === 2) {
                        reader.reset();
                      } else {
                        tt = Tokens.UNICODE_RANGE;
                        if (value.indexOf("?") === -1) {
                          if (reader.peek() === "-") {
                            reader.mark();
                            temp = reader.read();
                            temp += this.readUnicodeRangePart(false);
                            if (temp.length === 1) {
                              reader.reset();
                            } else {
                              value += temp;
                            }
                          }
                        }
                      }
                    }
                    return this.createToken(tt, value, startLine, startCol);
                  }, whitespaceToken: function(first, startLine, startCol) {
                    var value = first + this.readWhitespace();
                    return this.createToken(Tokens.S, value, startLine, startCol);
                  }, readUnicodeRangePart: function(allowQuestionMark) {
                    var reader = this._reader, part = "", c = reader.peek();
                    while (isHexDigit(c) && part.length < 6) {
                      reader.read();
                      part += c;
                      c = reader.peek();
                    }
                    if (allowQuestionMark) {
                      while (c === "?" && part.length < 6) {
                        reader.read();
                        part += c;
                        c = reader.peek();
                      }
                    }
                    return part;
                  }, readWhitespace: function() {
                    var reader = this._reader, whitespace2 = "", c = reader.peek();
                    while (isWhitespace(c)) {
                      reader.read();
                      whitespace2 += c;
                      c = reader.peek();
                    }
                    return whitespace2;
                  }, readNumber: function(first) {
                    var reader = this._reader, number = first, hasDot = first === ".", c = reader.peek();
                    while (c) {
                      if (isDigit(c)) {
                        number += reader.read();
                      } else if (c === ".") {
                        if (hasDot) {
                          break;
                        } else {
                          hasDot = true;
                          number += reader.read();
                        }
                      } else {
                        break;
                      }
                      c = reader.peek();
                    }
                    return number;
                  }, readString: function() {
                    var token = this.stringToken(this._reader.read(), 0, 0);
                    return token.type === Tokens.INVALID ? null : token.value;
                  }, readURI: function(first) {
                    var reader = this._reader, uri = first, inner = "", c = reader.peek();
                    while (c && isWhitespace(c)) {
                      reader.read();
                      c = reader.peek();
                    }
                    if (c === "'" || c === '"') {
                      inner = this.readString();
                      if (inner !== null) {
                        inner = PropertyValuePart.parseString(inner);
                      }
                    } else {
                      inner = this.readUnquotedURL();
                    }
                    c = reader.peek();
                    while (c && isWhitespace(c)) {
                      reader.read();
                      c = reader.peek();
                    }
                    if (inner === null || c !== ")") {
                      uri = null;
                    } else {
                      uri += PropertyValuePart.serializeString(inner) + reader.read();
                    }
                    return uri;
                  }, readUnquotedURL: function(first) {
                    var reader = this._reader, url = first || "", c;
                    for (c = reader.peek(); c; c = reader.peek()) {
                      if (nonascii.test(c) || /^[\-!#$%&*-\[\]-~]$/.test(c)) {
                        url += c;
                        reader.read();
                      } else if (c === "\\") {
                        if (/^[^\r\n\f]$/.test(reader.peek(2))) {
                          url += this.readEscape(reader.read(), true);
                        } else {
                          break;
                        }
                      } else {
                        break;
                      }
                    }
                    return url;
                  }, readName: function(first) {
                    var reader = this._reader, ident = first || "", c;
                    for (c = reader.peek(); c; c = reader.peek()) {
                      if (c === "\\") {
                        if (/^[^\r\n\f]$/.test(reader.peek(2))) {
                          ident += this.readEscape(reader.read(), true);
                        } else {
                          break;
                        }
                      } else if (isNameChar(c)) {
                        ident += reader.read();
                      } else {
                        break;
                      }
                    }
                    return ident;
                  }, readEscape: function(first, unescape) {
                    var reader = this._reader, cssEscape = first || "", i = 0, c = reader.peek();
                    if (isHexDigit(c)) {
                      do {
                        cssEscape += reader.read();
                        c = reader.peek();
                      } while (c && isHexDigit(c) && ++i < 6);
                    }
                    if (cssEscape.length === 1) {
                      if (/^[^\r\n\f0-9a-f]$/.test(c)) {
                        reader.read();
                        if (unescape) {
                          return c;
                        }
                      } else {
                        throw new Error("Bad escape sequence.");
                      }
                    } else if (c === "\r") {
                      reader.read();
                      if (reader.peek() === "\n") {
                        c += reader.read();
                      }
                    } else if (/^[ \t\n\f]$/.test(c)) {
                      reader.read();
                    } else {
                      c = "";
                    }
                    if (unescape) {
                      var cp = parseInt(cssEscape.slice(first.length), 16);
                      return String.fromCodePoint ? String.fromCodePoint(cp) : String.fromCharCode(cp);
                    }
                    return cssEscape + c;
                  }, readComment: function(first) {
                    var reader = this._reader, comment = first || "", c = reader.read();
                    if (c === "*") {
                      while (c) {
                        comment += c;
                        if (comment.length > 2 && c === "*" && reader.peek() === "/") {
                          comment += reader.read();
                          break;
                        }
                        c = reader.read();
                      }
                      return comment;
                    } else {
                      return "";
                    }
                  } });
                }, { "../util/TokenStreamBase": 27, "./PropertyValuePart": 11, "./Tokens": 18 }], 18: [function(require2, module2, exports2) {
                  var Tokens = module2.exports = [{ name: "CDO" }, { name: "CDC" }, { name: "S", whitespace: true }, { name: "COMMENT", comment: true, hide: true, channel: "comment" }, { name: "INCLUDES", text: "~=" }, { name: "DASHMATCH", text: "|=" }, { name: "PREFIXMATCH", text: "^=" }, { name: "SUFFIXMATCH", text: "$=" }, { name: "SUBSTRINGMATCH", text: "*=" }, { name: "STRING" }, { name: "IDENT" }, { name: "HASH" }, { name: "IMPORT_SYM", text: "@import" }, { name: "PAGE_SYM", text: "@page" }, { name: "MEDIA_SYM", text: "@media" }, { name: "FONT_FACE_SYM", text: "@font-face" }, { name: "CHARSET_SYM", text: "@charset" }, { name: "NAMESPACE_SYM", text: "@namespace" }, { name: "SUPPORTS_SYM", text: "@supports" }, { name: "VIEWPORT_SYM", text: ["@viewport", "@-ms-viewport", "@-o-viewport"] }, { name: "DOCUMENT_SYM", text: ["@document", "@-moz-document"] }, { name: "UNKNOWN_SYM" }, { name: "KEYFRAMES_SYM", text: ["@keyframes", "@-webkit-keyframes", "@-moz-keyframes", "@-o-keyframes"] }, { name: "IMPORTANT_SYM" }, { name: "LENGTH" }, { name: "ANGLE" }, { name: "TIME" }, { name: "FREQ" }, { name: "DIMENSION" }, { name: "PERCENTAGE" }, { name: "NUMBER" }, { name: "URI" }, { name: "FUNCTION" }, { name: "UNICODE_RANGE" }, { name: "INVALID" }, { name: "PLUS", text: "+" }, { name: "GREATER", text: ">" }, { name: "COMMA", text: "," }, { name: "TILDE", text: "~" }, { name: "NOT" }, { name: "TOPLEFTCORNER_SYM", text: "@top-left-corner" }, { name: "TOPLEFT_SYM", text: "@top-left" }, { name: "TOPCENTER_SYM", text: "@top-center" }, { name: "TOPRIGHT_SYM", text: "@top-right" }, { name: "TOPRIGHTCORNER_SYM", text: "@top-right-corner" }, { name: "BOTTOMLEFTCORNER_SYM", text: "@bottom-left-corner" }, { name: "BOTTOMLEFT_SYM", text: "@bottom-left" }, { name: "BOTTOMCENTER_SYM", text: "@bottom-center" }, { name: "BOTTOMRIGHT_SYM", text: "@bottom-right" }, { name: "BOTTOMRIGHTCORNER_SYM", text: "@bottom-right-corner" }, { name: "LEFTTOP_SYM", text: "@left-top" }, { name: "LEFTMIDDLE_SYM", text: "@left-middle" }, { name: "LEFTBOTTOM_SYM", text: "@left-bottom" }, { name: "RIGHTTOP_SYM", text: "@right-top" }, { name: "RIGHTMIDDLE_SYM", text: "@right-middle" }, { name: "RIGHTBOTTOM_SYM", text: "@right-bottom" }, { name: "RESOLUTION", state: "media" }, { name: "IE_FUNCTION" }, { name: "CHAR" }, { name: "PIPE", text: "|" }, { name: "SLASH", text: "/" }, { name: "MINUS", text: "-" }, { name: "STAR", text: "*" }, { name: "LBRACE", endChar: "}", text: "{" }, { name: "RBRACE", text: "}" }, { name: "LBRACKET", endChar: "]", text: "[" }, { name: "RBRACKET", text: "]" }, { name: "EQUALS", text: "=" }, { name: "COLON", text: ":" }, { name: "SEMICOLON", text: ";" }, { name: "LPAREN", endChar: ")", text: "(" }, { name: "RPAREN", text: ")" }, { name: "DOT", text: "." }];
                  (function() {
                    var nameMap = [], typeMap = /* @__PURE__ */ Object.create(null);
                    Tokens.UNKNOWN = -1;
                    Tokens.unshift({ name: "EOF" });
                    for (var i = 0, len = Tokens.length; i < len; i++) {
                      nameMap.push(Tokens[i].name);
                      Tokens[Tokens[i].name] = i;
                      if (Tokens[i].text) {
                        if (Tokens[i].text instanceof Array) {
                          for (var j = 0; j < Tokens[i].text.length; j++) {
                            typeMap[Tokens[i].text[j]] = i;
                          }
                        } else {
                          typeMap[Tokens[i].text] = i;
                        }
                      }
                    }
                    Tokens.name = function(tt) {
                      return nameMap[tt];
                    };
                    Tokens.type = function(c) {
                      return typeMap[c] || -1;
                    };
                  })();
                }, {}], 19: [function(require2, module2, exports2) {
                  var Matcher = require2("./Matcher");
                  var Properties = require2("./Properties");
                  var ValidationTypes = require2("./ValidationTypes");
                  var ValidationError = require2("./ValidationError");
                  var PropertyValueIterator = require2("./PropertyValueIterator");
                  module2.exports = { validate: function(property, value) {
                    var name = property.toString().toLowerCase(), expression = new PropertyValueIterator(value), spec = Properties[name], part;
                    if (!spec) {
                      if (name.indexOf("-") !== 0) {
                        throw new ValidationError("Unknown property '" + property + "'.", property.line, property.col);
                      }
                    } else if (typeof spec !== "number") {
                      if (ValidationTypes.isAny(expression, "inherit | initial | unset")) {
                        if (expression.hasNext()) {
                          part = expression.next();
                          throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
                        }
                        return;
                      }
                      this.singleProperty(spec, expression);
                    }
                  }, singleProperty: function(types, expression) {
                    var result = false, value = expression.value, part;
                    result = Matcher.parse(types).match(expression);
                    if (!result) {
                      if (expression.hasNext() && !expression.isFirst()) {
                        part = expression.peek();
                        throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
                      } else {
                        throw new ValidationError("Expected (" + ValidationTypes.describe(types) + ") but found '" + value + "'.", value.line, value.col);
                      }
                    } else if (expression.hasNext()) {
                      part = expression.next();
                      throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
                    }
                  } };
                }, { "./Matcher": 3, "./Properties": 7, "./PropertyValueIterator": 10, "./ValidationError": 20, "./ValidationTypes": 21 }], 20: [function(require2, module2, exports2) {
                  module2.exports = ValidationError;
                  function ValidationError(message, line, col) {
                    this.col = col;
                    this.line = line;
                    this.message = message;
                  }
                  ValidationError.prototype = new Error();
                }, {}], 21: [function(require2, module2, exports2) {
                  var ValidationTypes = module2.exports;
                  var Matcher = require2("./Matcher");
                  function copy(to, from) {
                    Object.keys(from).forEach(function(prop) {
                      to[prop] = from[prop];
                    });
                  }
                  copy(ValidationTypes, { isLiteral: function(part, literals) {
                    var text = part.text.toString().toLowerCase(), args = literals.split(" | "), i, len, found = false;
                    for (i = 0, len = args.length; i < len && !found; i++) {
                      if (args[i].charAt(0) === "<") {
                        found = this.simple[args[i]](part);
                      } else if (args[i].slice(-2) === "()") {
                        found = part.type === "function" && part.name === args[i].slice(0, -2);
                      } else if (text === args[i].toLowerCase()) {
                        found = true;
                      }
                    }
                    return found;
                  }, isSimple: function(type) {
                    return Boolean(this.simple[type]);
                  }, isComplex: function(type) {
                    return Boolean(this.complex[type]);
                  }, describe: function(type) {
                    if (this.complex[type] instanceof Matcher) {
                      return this.complex[type].toString(0);
                    }
                    return type;
                  }, isAny: function(expression, types) {
                    var args = types.split(" | "), i, len, found = false;
                    for (i = 0, len = args.length; i < len && !found && expression.hasNext(); i++) {
                      found = this.isType(expression, args[i]);
                    }
                    return found;
                  }, isAnyOfGroup: function(expression, types) {
                    var args = types.split(" || "), i, len, found = false;
                    for (i = 0, len = args.length; i < len && !found; i++) {
                      found = this.isType(expression, args[i]);
                    }
                    return found ? args[i - 1] : false;
                  }, isType: function(expression, type) {
                    var part = expression.peek(), result = false;
                    if (type.charAt(0) !== "<") {
                      result = this.isLiteral(part, type);
                      if (result) {
                        expression.next();
                      }
                    } else if (this.simple[type]) {
                      result = this.simple[type](part);
                      if (result) {
                        expression.next();
                      }
                    } else if (this.complex[type] instanceof Matcher) {
                      result = this.complex[type].match(expression);
                    } else {
                      result = this.complex[type](expression);
                    }
                    return result;
                  }, simple: { __proto__: null, "<absolute-size>": "xx-small | x-small | small | medium | large | x-large | xx-large", "<animateable-feature>": "scroll-position | contents | <animateable-feature-name>", "<animateable-feature-name>": function(part) {
                    return this["<ident>"](part) && !/^(unset|initial|inherit|will-change|auto|scroll-position|contents)$/i.test(part);
                  }, "<angle>": function(part) {
                    return part.type === "angle";
                  }, "<attachment>": "scroll | fixed | local", "<attr>": "attr()", "<basic-shape>": "inset() | circle() | ellipse() | polygon()", "<bg-image>": "<image> | <gradient> | none", "<border-style>": "none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset", "<border-width>": "<length> | thin | medium | thick", "<box>": "padding-box | border-box | content-box", "<clip-source>": "<uri>", "<color>": function(part) {
                    return part.type === "color" || String(part) === "transparent" || String(part) === "currentColor";
                  }, "<color-svg>": function(part) {
                    return part.type === "color";
                  }, "<content>": "content()", "<content-sizing>": "fill-available | -moz-available | -webkit-fill-available | max-content | -moz-max-content | -webkit-max-content | min-content | -moz-min-content | -webkit-min-content | fit-content | -moz-fit-content | -webkit-fit-content", "<feature-tag-value>": function(part) {
                    return part.type === "function" && /^[A-Z0-9]{4}$/i.test(part);
                  }, "<filter-function>": "blur() | brightness() | contrast() | custom() | drop-shadow() | grayscale() | hue-rotate() | invert() | opacity() | saturate() | sepia()", "<flex-basis>": "<width>", "<flex-direction>": "row | row-reverse | column | column-reverse", "<flex-grow>": "<number>", "<flex-shrink>": "<number>", "<flex-wrap>": "nowrap | wrap | wrap-reverse", "<font-size>": "<absolute-size> | <relative-size> | <length> | <percentage>", "<font-stretch>": "normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded", "<font-style>": "normal | italic | oblique", "<font-variant-caps>": "small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps", "<font-variant-css21>": "normal | small-caps", "<font-weight>": "normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900", "<generic-family>": "serif | sans-serif | cursive | fantasy | monospace", "<geometry-box>": "<shape-box> | fill-box | stroke-box | view-box", "<glyph-angle>": function(part) {
                    return part.type === "angle" && part.units === "deg";
                  }, "<gradient>": function(part) {
                    return part.type === "function" && /^(?:\-(?:ms|moz|o|webkit)\-)?(?:repeating\-)?(?:radial\-|linear\-)?gradient/i.test(part);
                  }, "<icccolor>": "cielab() | cielch() | cielchab() | icc-color() | icc-named-color()", "<ident>": function(part) {
                    return part.type === "identifier" || part.wasIdent;
                  }, "<ident-not-generic-family>": function(part) {
                    return this["<ident>"](part) && !this["<generic-family>"](part);
                  }, "<image>": "<uri>", "<integer>": function(part) {
                    return part.type === "integer";
                  }, "<length>": function(part) {
                    if (part.type === "function" && /^(?:\-(?:ms|moz|o|webkit)\-)?calc/i.test(part)) {
                      return true;
                    } else {
                      return part.type === "length" || part.type === "number" || part.type === "integer" || String(part) === "0";
                    }
                  }, "<line>": function(part) {
                    return part.type === "integer";
                  }, "<line-height>": "<number> | <length> | <percentage> | normal", "<margin-width>": "<length> | <percentage> | auto", "<miterlimit>": function(part) {
                    return this["<number>"](part) && part.value >= 1;
                  }, "<nonnegative-length-or-percentage>": function(part) {
                    return (this["<length>"](part) || this["<percentage>"](part)) && (String(part) === "0" || part.type === "function" || part.value >= 0);
                  }, "<nonnegative-number-or-percentage>": function(part) {
                    return (this["<number>"](part) || this["<percentage>"](part)) && (String(part) === "0" || part.type === "function" || part.value >= 0);
                  }, "<number>": function(part) {
                    return part.type === "number" || this["<integer>"](part);
                  }, "<opacity-value>": function(part) {
                    return this["<number>"](part) && part.value >= 0 && part.value <= 1;
                  }, "<padding-width>": "<nonnegative-length-or-percentage>", "<percentage>": function(part) {
                    return part.type === "percentage" || String(part) === "0";
                  }, "<relative-size>": "smaller | larger", "<shape>": "rect() | inset-rect()", "<shape-box>": "<box> | margin-box", "<single-animation-direction>": "normal | reverse | alternate | alternate-reverse", "<single-animation-name>": function(part) {
                    return this["<ident>"](part) && /^-?[a-z_][-a-z0-9_]+$/i.test(part) && !/^(none|unset|initial|inherit)$/i.test(part);
                  }, "<string>": function(part) {
                    return part.type === "string";
                  }, "<time>": function(part) {
                    return part.type === "time";
                  }, "<uri>": function(part) {
                    return part.type === "uri";
                  }, "<width>": "<margin-width>" }, complex: { __proto__: null, "<azimuth>": "<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards", "<bg-position>": "<position>#", "<bg-size>": "[ <length> | <percentage> | auto ]{1,2} | cover | contain", "<border-image-slice>": Matcher.many([true], Matcher.cast("<nonnegative-number-or-percentage>"), Matcher.cast("<nonnegative-number-or-percentage>"), Matcher.cast("<nonnegative-number-or-percentage>"), Matcher.cast("<nonnegative-number-or-percentage>"), "fill"), "<border-radius>": "<nonnegative-length-or-percentage>{1,4} [ / <nonnegative-length-or-percentage>{1,4} ]?", "<box-shadow>": "none | <shadow>#", "<clip-path>": "<basic-shape> || <geometry-box>", "<dasharray>": Matcher.cast("<nonnegative-length-or-percentage>").braces(1, Infinity, "#", Matcher.cast(",").question()), "<family-name>": "<string> | <ident-not-generic-family> <ident>*", "<filter-function-list>": "[ <filter-function> | <uri> ]+", "<flex>": "none | [ <flex-grow> <flex-shrink>? || <flex-basis> ]", "<font-family>": "[ <generic-family> | <family-name> ]#", "<font-shorthand>": "[ <font-style> || <font-variant-css21> || <font-weight> || <font-stretch> ]? <font-size> [ / <line-height> ]? <font-family>", "<font-variant-alternates>": "stylistic() || historical-forms || styleset() || character-variant() || swash() || ornaments() || annotation()", "<font-variant-ligatures>": "[ common-ligatures | no-common-ligatures ] || [ discretionary-ligatures | no-discretionary-ligatures ] || [ historical-ligatures | no-historical-ligatures ] || [ contextual | no-contextual ]", "<font-variant-numeric>": "[ lining-nums | oldstyle-nums ] || [ proportional-nums | tabular-nums ] || [ diagonal-fractions | stacked-fractions ] || ordinal || slashed-zero", "<font-variant-east-asian>": "[ jis78 | jis83 | jis90 | jis04 | simplified | traditional ] || [ full-width | proportional-width ] || ruby", "<paint>": "<paint-basic> | <uri> <paint-basic>?", "<paint-basic>": "none | currentColor | <color-svg> <icccolor>?", "<position>": "[ center | [ left | right ] [ <percentage> | <length> ]? ] && [ center | [ top | bottom ] [ <percentage> | <length> ]? ] | [ left | center | right | <percentage> | <length> ] [ top | center | bottom | <percentage> | <length> ] | [ left | center | right | top | bottom | <percentage> | <length> ]", "<repeat-style>": "repeat-x | repeat-y | [ repeat | space | round | no-repeat ]{1,2}", "<shadow>": Matcher.many([true], Matcher.cast("<length>").braces(2, 4), "inset", "<color>"), "<text-decoration-color>": "<color>", "<text-decoration-line>": "none | [ underline || overline || line-through || blink ]", "<text-decoration-style>": "solid | double | dotted | dashed | wavy", "<will-change>": "auto | <animateable-feature>#", "<x-one-radius>": "[ <length> | <percentage> ]{1,2}" } });
                  Object.keys(ValidationTypes.simple).forEach(function(nt) {
                    var rule = ValidationTypes.simple[nt];
                    if (typeof rule === "string") {
                      ValidationTypes.simple[nt] = function(part) {
                        return ValidationTypes.isLiteral(part, rule);
                      };
                    }
                  });
                  Object.keys(ValidationTypes.complex).forEach(function(nt) {
                    var rule = ValidationTypes.complex[nt];
                    if (typeof rule === "string") {
                      ValidationTypes.complex[nt] = Matcher.parse(rule);
                    }
                  });
                  ValidationTypes.complex["<font-variant>"] = Matcher.oror({ expand: "<font-variant-ligatures>" }, { expand: "<font-variant-alternates>" }, "<font-variant-caps>", { expand: "<font-variant-numeric>" }, { expand: "<font-variant-east-asian>" });
                }, { "./Matcher": 3 }], 22: [function(require2, module2, exports2) {
                  module2.exports = { Colors: require2("./Colors"), Combinator: require2("./Combinator"), Parser: require2("./Parser"), PropertyName: require2("./PropertyName"), PropertyValue: require2("./PropertyValue"), PropertyValuePart: require2("./PropertyValuePart"), Matcher: require2("./Matcher"), MediaFeature: require2("./MediaFeature"), MediaQuery: require2("./MediaQuery"), Selector: require2("./Selector"), SelectorPart: require2("./SelectorPart"), SelectorSubPart: require2("./SelectorSubPart"), Specificity: require2("./Specificity"), TokenStream: require2("./TokenStream"), Tokens: require2("./Tokens"), ValidationError: require2("./ValidationError") };
                }, { "./Colors": 1, "./Combinator": 2, "./Matcher": 3, "./MediaFeature": 4, "./MediaQuery": 5, "./Parser": 6, "./PropertyName": 8, "./PropertyValue": 9, "./PropertyValuePart": 11, "./Selector": 13, "./SelectorPart": 14, "./SelectorSubPart": 15, "./Specificity": 16, "./TokenStream": 17, "./Tokens": 18, "./ValidationError": 20 }], 23: [function(require2, module2, exports2) {
                  module2.exports = EventTarget;
                  function EventTarget() {
                    this._listeners = /* @__PURE__ */ Object.create(null);
                  }
                  EventTarget.prototype = { constructor: EventTarget, addListener: function(type, listener) {
                    if (!this._listeners[type]) {
                      this._listeners[type] = [];
                    }
                    this._listeners[type].push(listener);
                  }, fire: function(event) {
                    if (typeof event === "string") {
                      event = { type: event };
                    }
                    if (typeof event.target !== "undefined") {
                      event.target = this;
                    }
                    if (typeof event.type === "undefined") {
                      throw new Error("Event object missing 'type' property.");
                    }
                    if (this._listeners[event.type]) {
                      var listeners = this._listeners[event.type].concat();
                      for (var i = 0, len = listeners.length; i < len; i++) {
                        listeners[i].call(this, event);
                      }
                    }
                  }, removeListener: function(type, listener) {
                    if (this._listeners[type]) {
                      var listeners = this._listeners[type];
                      for (var i = 0, len = listeners.length; i < len; i++) {
                        if (listeners[i] === listener) {
                          listeners.splice(i, 1);
                          break;
                        }
                      }
                    }
                  } };
                }, {}], 24: [function(require2, module2, exports2) {
                  module2.exports = StringReader;
                  function StringReader(text) {
                    this._input = text.replace(/(\r\n?|\n)/g, "\n");
                    this._line = 1;
                    this._col = 1;
                    this._cursor = 0;
                  }
                  StringReader.prototype = { constructor: StringReader, getCol: function() {
                    return this._col;
                  }, getLine: function() {
                    return this._line;
                  }, eof: function() {
                    return this._cursor === this._input.length;
                  }, peek: function(count) {
                    var c = null;
                    count = typeof count === "undefined" ? 1 : count;
                    if (this._cursor < this._input.length) {
                      c = this._input.charAt(this._cursor + count - 1);
                    }
                    return c;
                  }, read: function() {
                    var c = null;
                    if (this._cursor < this._input.length) {
                      if (this._input.charAt(this._cursor) === "\n") {
                        this._line++;
                        this._col = 1;
                      } else {
                        this._col++;
                      }
                      c = this._input.charAt(this._cursor++);
                    }
                    return c;
                  }, mark: function() {
                    this._bookmark = { cursor: this._cursor, line: this._line, col: this._col };
                  }, reset: function() {
                    if (this._bookmark) {
                      this._cursor = this._bookmark.cursor;
                      this._line = this._bookmark.line;
                      this._col = this._bookmark.col;
                      delete this._bookmark;
                    }
                  }, readTo: function(pattern) {
                    var buffer = "", c;
                    while (buffer.length < pattern.length || buffer.lastIndexOf(pattern) !== buffer.length - pattern.length) {
                      c = this.read();
                      if (c) {
                        buffer += c;
                      } else {
                        throw new Error('Expected "' + pattern + '" at line ' + this._line + ", col " + this._col + ".");
                      }
                    }
                    return buffer;
                  }, readWhile: function(filter) {
                    var buffer = "", c = this.peek();
                    while (c !== null && filter(c)) {
                      buffer += this.read();
                      c = this.peek();
                    }
                    return buffer;
                  }, readMatch: function(matcher) {
                    var source = this._input.substring(this._cursor), value = null;
                    if (typeof matcher === "string") {
                      if (source.slice(0, matcher.length) === matcher) {
                        value = this.readCount(matcher.length);
                      }
                    } else if (matcher instanceof RegExp) {
                      if (matcher.test(source)) {
                        value = this.readCount(RegExp.lastMatch.length);
                      }
                    }
                    return value;
                  }, readCount: function(count) {
                    var buffer = "";
                    while (count--) {
                      buffer += this.read();
                    }
                    return buffer;
                  } };
                }, {}], 25: [function(require2, module2, exports2) {
                  module2.exports = SyntaxError;
                  function SyntaxError(message, line, col) {
                    Error.call(this);
                    this.name = this.constructor.name;
                    this.col = col;
                    this.line = line;
                    this.message = message;
                  }
                  SyntaxError.prototype = Object.create(Error.prototype);
                  SyntaxError.prototype.constructor = SyntaxError;
                }, {}], 26: [function(require2, module2, exports2) {
                  module2.exports = SyntaxUnit;
                  function SyntaxUnit(text, line, col, type) {
                    this.col = col;
                    this.line = line;
                    this.text = text;
                    this.type = type;
                  }
                  SyntaxUnit.fromToken = function(token) {
                    return new SyntaxUnit(token.value, token.startLine, token.startCol);
                  };
                  SyntaxUnit.prototype = { constructor: SyntaxUnit, valueOf: function() {
                    return this.toString();
                  }, toString: function() {
                    return this.text;
                  } };
                }, {}], 27: [function(require2, module2, exports2) {
                  module2.exports = TokenStreamBase;
                  var StringReader = require2("./StringReader");
                  var SyntaxError = require2("./SyntaxError");
                  function TokenStreamBase(input, tokenData) {
                    this._reader = new StringReader(input ? input.toString() : "");
                    this._token = null;
                    this._tokenData = tokenData;
                    this._lt = [];
                    this._ltIndex = 0;
                    this._ltIndexCache = [];
                  }
                  TokenStreamBase.createTokenData = function(tokens) {
                    var nameMap = [], typeMap = /* @__PURE__ */ Object.create(null), tokenData = tokens.concat([]), i = 0, len = tokenData.length + 1;
                    tokenData.UNKNOWN = -1;
                    tokenData.unshift({ name: "EOF" });
                    for (; i < len; i++) {
                      nameMap.push(tokenData[i].name);
                      tokenData[tokenData[i].name] = i;
                      if (tokenData[i].text) {
                        typeMap[tokenData[i].text] = i;
                      }
                    }
                    tokenData.name = function(tt) {
                      return nameMap[tt];
                    };
                    tokenData.type = function(c) {
                      return typeMap[c];
                    };
                    return tokenData;
                  };
                  TokenStreamBase.prototype = { constructor: TokenStreamBase, match: function(tokenTypes, channel) {
                    if (!(tokenTypes instanceof Array)) {
                      tokenTypes = [tokenTypes];
                    }
                    var tt = this.get(channel), i = 0, len = tokenTypes.length;
                    while (i < len) {
                      if (tt === tokenTypes[i++]) {
                        return true;
                      }
                    }
                    this.unget();
                    return false;
                  }, mustMatch: function(tokenTypes) {
                    var token;
                    if (!(tokenTypes instanceof Array)) {
                      tokenTypes = [tokenTypes];
                    }
                    if (!this.match.apply(this, arguments)) {
                      token = this.LT(1);
                      throw new SyntaxError("Expected " + this._tokenData[tokenTypes[0]].name + " at line " + token.startLine + ", col " + token.startCol + ".", token.startLine, token.startCol);
                    }
                  }, advance: function(tokenTypes, channel) {
                    while (this.LA(0) !== 0 && !this.match(tokenTypes, channel)) {
                      this.get();
                    }
                    return this.LA(0);
                  }, get: function(channel) {
                    var tokenInfo = this._tokenData, i = 0, token, info;
                    if (this._lt.length && this._ltIndex >= 0 && this._ltIndex < this._lt.length) {
                      i++;
                      this._token = this._lt[this._ltIndex++];
                      info = tokenInfo[this._token.type];
                      while (info.channel !== void 0 && channel !== info.channel && this._ltIndex < this._lt.length) {
                        this._token = this._lt[this._ltIndex++];
                        info = tokenInfo[this._token.type];
                        i++;
                      }
                      if ((info.channel === void 0 || channel === info.channel) && this._ltIndex <= this._lt.length) {
                        this._ltIndexCache.push(i);
                        return this._token.type;
                      }
                    }
                    token = this._getToken();
                    if (token.type > -1 && !tokenInfo[token.type].hide) {
                      token.channel = tokenInfo[token.type].channel;
                      this._token = token;
                      this._lt.push(token);
                      this._ltIndexCache.push(this._lt.length - this._ltIndex + i);
                      if (this._lt.length > 5) {
                        this._lt.shift();
                      }
                      if (this._ltIndexCache.length > 5) {
                        this._ltIndexCache.shift();
                      }
                      this._ltIndex = this._lt.length;
                    }
                    info = tokenInfo[token.type];
                    if (info && (info.hide || info.channel !== void 0 && channel !== info.channel)) {
                      return this.get(channel);
                    } else {
                      return token.type;
                    }
                  }, LA: function(index) {
                    var total = index, tt;
                    if (index > 0) {
                      if (index > 5) {
                        throw new Error("Too much lookahead.");
                      }
                      while (total) {
                        tt = this.get();
                        total--;
                      }
                      while (total < index) {
                        this.unget();
                        total++;
                      }
                    } else if (index < 0) {
                      if (this._lt[this._ltIndex + index]) {
                        tt = this._lt[this._ltIndex + index].type;
                      } else {
                        throw new Error("Too much lookbehind.");
                      }
                    } else {
                      tt = this._token.type;
                    }
                    return tt;
                  }, LT: function(index) {
                    this.LA(index);
                    return this._lt[this._ltIndex + index - 1];
                  }, peek: function() {
                    return this.LA(1);
                  }, token: function() {
                    return this._token;
                  }, tokenName: function(tokenType) {
                    if (tokenType < 0 || tokenType > this._tokenData.length) {
                      return "UNKNOWN_TOKEN";
                    } else {
                      return this._tokenData[tokenType].name;
                    }
                  }, tokenType: function(tokenName) {
                    return this._tokenData[tokenName] || -1;
                  }, unget: function() {
                    if (this._ltIndexCache.length) {
                      this._ltIndex -= this._ltIndexCache.pop();
                      this._token = this._lt[this._ltIndex - 1];
                    } else {
                      throw new Error("Too much lookahead.");
                    }
                  } };
                }, { "./StringReader": 24, "./SyntaxError": 25 }], 28: [function(require2, module2, exports2) {
                  module2.exports = { StringReader: require2("./StringReader"), SyntaxError: require2("./SyntaxError"), SyntaxUnit: require2("./SyntaxUnit"), EventTarget: require2("./EventTarget"), TokenStreamBase: require2("./TokenStreamBase") };
                }, { "./EventTarget": 23, "./StringReader": 24, "./SyntaxError": 25, "./SyntaxUnit": 26, "./TokenStreamBase": 27 }], "parserlib": [function(require2, module2, exports2) {
                  module2.exports = { css: require2("./css"), util: require2("./util") };
                }, { "./css": 22, "./util": 28 }] }, {}, []);
                return require("parserlib");
              }();
              var clone = function() {
                var nativeMap;
                try {
                  nativeMap = Map;
                } catch (_) {
                  nativeMap = function() {
                  };
                }
                var nativeSet;
                try {
                  nativeSet = Set;
                } catch (_) {
                  nativeSet = function() {
                  };
                }
                var nativePromise;
                try {
                  nativePromise = Promise;
                } catch (_) {
                  nativePromise = function() {
                  };
                }
                function clone2(parent, circular, depth, prototype, includeNonEnumerable) {
                  if (typeof circular === "object") {
                    depth = circular.depth;
                    prototype = circular.prototype;
                    includeNonEnumerable = circular.includeNonEnumerable;
                    circular = circular.circular;
                  }
                  var allParents = [];
                  var allChildren = [];
                  var useBuffer = typeof Buffer != "undefined";
                  if (typeof circular == "undefined")
                    circular = true;
                  if (typeof depth == "undefined")
                    depth = Infinity;
                  function _clone(parent2, depth2) {
                    if (parent2 === null)
                      return null;
                    if (depth2 === 0)
                      return parent2;
                    var child;
                    var proto;
                    if (typeof parent2 != "object") {
                      return parent2;
                    }
                    if (parent2 instanceof nativeMap) {
                      child = new nativeMap();
                    } else if (parent2 instanceof nativeSet) {
                      child = new nativeSet();
                    } else if (parent2 instanceof nativePromise) {
                      child = new nativePromise(function(resolve, reject) {
                        parent2.then(function(value) {
                          resolve(_clone(value, depth2 - 1));
                        }, function(err) {
                          reject(_clone(err, depth2 - 1));
                        });
                      });
                    } else if (clone2.__isArray(parent2)) {
                      child = [];
                    } else if (clone2.__isRegExp(parent2)) {
                      child = new RegExp(parent2.source, __getRegExpFlags(parent2));
                      if (parent2.lastIndex)
                        child.lastIndex = parent2.lastIndex;
                    } else if (clone2.__isDate(parent2)) {
                      child = new Date(parent2.getTime());
                    } else if (useBuffer && Buffer.isBuffer(parent2)) {
                      child = new Buffer(parent2.length);
                      parent2.copy(child);
                      return child;
                    } else if (parent2 instanceof Error) {
                      child = Object.create(parent2);
                    } else {
                      if (typeof prototype == "undefined") {
                        proto = Object.getPrototypeOf(parent2);
                        child = Object.create(proto);
                      } else {
                        child = Object.create(prototype);
                        proto = prototype;
                      }
                    }
                    if (circular) {
                      var index = allParents.indexOf(parent2);
                      if (index != -1) {
                        return allChildren[index];
                      }
                      allParents.push(parent2);
                      allChildren.push(child);
                    }
                    if (parent2 instanceof nativeMap) {
                      var keyIterator = parent2.keys();
                      while (true) {
                        var next = keyIterator.next();
                        if (next.done) {
                          break;
                        }
                        var keyChild = _clone(next.value, depth2 - 1);
                        var valueChild = _clone(parent2.get(next.value), depth2 - 1);
                        child.set(keyChild, valueChild);
                      }
                    }
                    if (parent2 instanceof nativeSet) {
                      var iterator = parent2.keys();
                      while (true) {
                        var next = iterator.next();
                        if (next.done) {
                          break;
                        }
                        var entryChild = _clone(next.value, depth2 - 1);
                        child.add(entryChild);
                      }
                    }
                    for (var i in parent2) {
                      var attrs;
                      if (proto) {
                        attrs = Object.getOwnPropertyDescriptor(proto, i);
                      }
                      if (attrs && attrs.set == null) {
                        continue;
                      }
                      child[i] = _clone(parent2[i], depth2 - 1);
                    }
                    if (Object.getOwnPropertySymbols) {
                      var symbols = Object.getOwnPropertySymbols(parent2);
                      for (var i = 0; i < symbols.length; i++) {
                        var symbol = symbols[i];
                        var descriptor = Object.getOwnPropertyDescriptor(parent2, symbol);
                        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                          continue;
                        }
                        child[symbol] = _clone(parent2[symbol], depth2 - 1);
                        if (!descriptor.enumerable) {
                          Object.defineProperty(child, symbol, { enumerable: false });
                        }
                      }
                    }
                    if (includeNonEnumerable) {
                      var allPropertyNames = Object.getOwnPropertyNames(parent2);
                      for (var i = 0; i < allPropertyNames.length; i++) {
                        var propertyName = allPropertyNames[i];
                        var descriptor = Object.getOwnPropertyDescriptor(parent2, propertyName);
                        if (descriptor && descriptor.enumerable) {
                          continue;
                        }
                        child[propertyName] = _clone(parent2[propertyName], depth2 - 1);
                        Object.defineProperty(child, propertyName, { enumerable: false });
                      }
                    }
                    return child;
                  }
                  return _clone(parent, depth);
                }
                clone2.clonePrototype = function clonePrototype(parent) {
                  if (parent === null)
                    return null;
                  var c = function() {
                  };
                  c.prototype = parent;
                  return new c();
                };
                function __objToStr(o) {
                  return Object.prototype.toString.call(o);
                }
                clone2.__objToStr = __objToStr;
                function __isDate(o) {
                  return typeof o === "object" && __objToStr(o) === "[object Date]";
                }
                clone2.__isDate = __isDate;
                function __isArray(o) {
                  return typeof o === "object" && __objToStr(o) === "[object Array]";
                }
                clone2.__isArray = __isArray;
                function __isRegExp(o) {
                  return typeof o === "object" && __objToStr(o) === "[object RegExp]";
                }
                clone2.__isRegExp = __isRegExp;
                function __getRegExpFlags(re) {
                  var flags = "";
                  if (re.global)
                    flags += "g";
                  if (re.ignoreCase)
                    flags += "i";
                  if (re.multiline)
                    flags += "m";
                  return flags;
                }
                clone2.__getRegExpFlags = __getRegExpFlags;
                return clone2;
              }();
              if (typeof module === "object" && module.exports) {
                module.exports = clone;
              }
              var CSSLint2 = function() {
                var rules = [], formatters = [], embeddedRuleset = /\/\*\s*csslint([^\*]*)\*\//, api = new parserlib.util.EventTarget();
                api.version = "1.0.4";
                api.addRule = function(rule) {
                  rules.push(rule);
                  rules[rule.id] = rule;
                };
                api.clearRules = function() {
                  rules = [];
                };
                api.getRules = function() {
                  return [].concat(rules).sort(function(a, b) {
                    return a.id > b.id ? 1 : 0;
                  });
                };
                api.getRuleset = function() {
                  var ruleset = {}, i = 0, len = rules.length;
                  while (i < len) {
                    ruleset[rules[i++].id] = 1;
                  }
                  return ruleset;
                };
                function applyEmbeddedRuleset(text, ruleset) {
                  var valueMap, embedded = text && text.match(embeddedRuleset), rules2 = embedded && embedded[1];
                  if (rules2) {
                    valueMap = { "true": 2, "": 1, "false": 0, "2": 2, "1": 1, "0": 0 };
                    rules2.toLowerCase().split(",").forEach(function(rule) {
                      var pair = rule.split(":"), property = pair[0] || "", value = pair[1] || "";
                      ruleset[property.trim()] = valueMap[value.trim()];
                    });
                  }
                  return ruleset;
                }
                api.addFormatter = function(formatter) {
                  formatters[formatter.id] = formatter;
                };
                api.getFormatter = function(formatId) {
                  return formatters[formatId];
                };
                api.format = function(results, filename, formatId, options) {
                  var formatter = this.getFormatter(formatId), result = null;
                  if (formatter) {
                    result = formatter.startFormat();
                    result += formatter.formatResults(results, filename, options || {});
                    result += formatter.endFormat();
                  }
                  return result;
                };
                api.hasFormat = function(formatId) {
                  return formatters.hasOwnProperty(formatId);
                };
                api.verify = function(text, ruleset) {
                  var i = 0, reporter, lines, allow = {}, ignore = [], report, parser = new parserlib.css.Parser({ starHack: true, ieFilters: true, underscoreHack: true, strict: false });
                  lines = text.replace(/\n\r?/g, "$split$").split("$split$");
                  CSSLint2.Util.forEach(lines, function(line, lineno) {
                    var allowLine = line && line.match(/\/\*[ \t]*csslint[ \t]+allow:[ \t]*([^\*]*)\*\//i), allowRules = allowLine && allowLine[1], allowRuleset = {};
                    if (allowRules) {
                      allowRules.toLowerCase().split(",").forEach(function(allowRule) {
                        allowRuleset[allowRule.trim()] = true;
                      });
                      if (Object.keys(allowRuleset).length > 0) {
                        allow[lineno + 1] = allowRuleset;
                      }
                    }
                  });
                  var ignoreStart = null, ignoreEnd = null;
                  CSSLint2.Util.forEach(lines, function(line, lineno) {
                    if (ignoreStart === null && line.match(/\/\*[ \t]*csslint[ \t]+ignore:start[ \t]*\*\//i)) {
                      ignoreStart = lineno;
                    }
                    if (line.match(/\/\*[ \t]*csslint[ \t]+ignore:end[ \t]*\*\//i)) {
                      ignoreEnd = lineno;
                    }
                    if (ignoreStart !== null && ignoreEnd !== null) {
                      ignore.push([ignoreStart, ignoreEnd]);
                      ignoreStart = ignoreEnd = null;
                    }
                  });
                  if (ignoreStart !== null) {
                    ignore.push([ignoreStart, lines.length]);
                  }
                  if (!ruleset) {
                    ruleset = this.getRuleset();
                  }
                  if (embeddedRuleset.test(text)) {
                    ruleset = clone(ruleset);
                    ruleset = applyEmbeddedRuleset(text, ruleset);
                  }
                  reporter = new Reporter(lines, ruleset, allow, ignore);
                  ruleset.errors = 2;
                  for (i in ruleset) {
                    if (ruleset.hasOwnProperty(i) && ruleset[i]) {
                      if (rules[i]) {
                        rules[i].init(parser, reporter);
                      }
                    }
                  }
                  try {
                    parser.parse(text);
                  } catch (ex) {
                    reporter.error("Fatal error, cannot continue: " + ex.message, ex.line, ex.col, {});
                  }
                  report = { messages: reporter.messages, stats: reporter.stats, ruleset: reporter.ruleset, allow: reporter.allow, ignore: reporter.ignore };
                  report.messages.sort(function(a, b) {
                    if (a.rollup && !b.rollup) {
                      return 1;
                    } else if (!a.rollup && b.rollup) {
                      return -1;
                    } else {
                      return a.line - b.line;
                    }
                  });
                  return report;
                };
                return api;
              }();
              function Reporter(lines, ruleset, allow, ignore) {
                this.messages = [];
                this.stats = [];
                this.lines = lines;
                this.ruleset = ruleset;
                this.allow = allow;
                if (!this.allow) {
                  this.allow = {};
                }
                this.ignore = ignore;
                if (!this.ignore) {
                  this.ignore = [];
                }
              }
              Reporter.prototype = { constructor: Reporter, error: function(message, line, col, rule) {
                this.messages.push({ type: "error", line, col, message, evidence: this.lines[line - 1], rule: rule || {} });
              }, warn: function(message, line, col, rule) {
                this.report(message, line, col, rule);
              }, report: function(message, line, col, rule) {
                if (this.allow.hasOwnProperty(line) && this.allow[line].hasOwnProperty(rule.id)) {
                  return;
                }
                var ignore = false;
                CSSLint2.Util.forEach(this.ignore, function(range) {
                  if (range[0] <= line && line <= range[1]) {
                    ignore = true;
                  }
                });
                if (ignore) {
                  return;
                }
                this.messages.push({ type: this.ruleset[rule.id] === 2 ? "error" : "warning", line, col, message, evidence: this.lines[line - 1], rule });
              }, info: function(message, line, col, rule) {
                this.messages.push({ type: "info", line, col, message, evidence: this.lines[line - 1], rule });
              }, rollupError: function(message, rule) {
                this.messages.push({ type: "error", rollup: true, message, rule });
              }, rollupWarn: function(message, rule) {
                this.messages.push({ type: "warning", rollup: true, message, rule });
              }, stat: function(name, value) {
                this.stats[name] = value;
              } };
              CSSLint2._Reporter = Reporter;
              CSSLint2.Util = { mix: function(receiver, supplier) {
                var prop;
                for (prop in supplier) {
                  if (supplier.hasOwnProperty(prop)) {
                    receiver[prop] = supplier[prop];
                  }
                }
                return prop;
              }, indexOf: function(values, value) {
                if (values.indexOf) {
                  return values.indexOf(value);
                } else {
                  for (var i = 0, len = values.length; i < len; i++) {
                    if (values[i] === value) {
                      return i;
                    }
                  }
                  return -1;
                }
              }, forEach: function(values, func) {
                if (values.forEach) {
                  return values.forEach(func);
                } else {
                  for (var i = 0, len = values.length; i < len; i++) {
                    func(values[i], i, values);
                  }
                }
              } };
              CSSLint2.addRule({ id: "adjoining-classes", name: "Disallow adjoining classes", desc: "Don't use adjoining classes.", url: "https://github.com/CSSLint/csslint/wiki/Disallow-adjoining-classes", browsers: "IE6", init: function(parser, reporter) {
                var rule = this;
                parser.addListener("startrule", function(event) {
                  var selectors = event.selectors, selector, part, modifier, classCount, i, j, k;
                  for (i = 0; i < selectors.length; i++) {
                    selector = selectors[i];
                    for (j = 0; j < selector.parts.length; j++) {
                      part = selector.parts[j];
                      if (part.type === parser.SELECTOR_PART_TYPE) {
                        classCount = 0;
                        for (k = 0; k < part.modifiers.length; k++) {
                          modifier = part.modifiers[k];
                          if (modifier.type === "class") {
                            classCount++;
                          }
                          if (classCount > 1) {
                            reporter.report("Adjoining classes: " + selectors[i].text, part.line, part.col, rule);
                          }
                        }
                      }
                    }
                  }
                });
              } });
              CSSLint2.addRule({ id: "box-model", name: "Beware of broken box size", desc: "Don't use width or height when using padding or border.", url: "https://github.com/CSSLint/csslint/wiki/Beware-of-box-model-size", browsers: "All", init: function(parser, reporter) {
                var rule = this, widthProperties = { border: 1, "border-left": 1, "border-right": 1, padding: 1, "padding-left": 1, "padding-right": 1 }, heightProperties = { border: 1, "border-bottom": 1, "border-top": 1, padding: 1, "padding-bottom": 1, "padding-top": 1 }, properties, boxSizing = false;
                function startRule() {
                  properties = {};
                  boxSizing = false;
                }
                function endRule() {
                  var prop, value;
                  if (!boxSizing) {
                    if (properties.height) {
                      for (prop in heightProperties) {
                        if (heightProperties.hasOwnProperty(prop) && properties[prop]) {
                          value = properties[prop].value;
                          if (!(prop === "padding" && value.parts.length === 2 && value.parts[0].value === 0)) {
                            reporter.report("Using height with " + prop + " can sometimes make elements larger than you expect.", properties[prop].line, properties[prop].col, rule);
                          }
                        }
                      }
                    }
                    if (properties.width) {
                      for (prop in widthProperties) {
                        if (widthProperties.hasOwnProperty(prop) && properties[prop]) {
                          value = properties[prop].value;
                          if (!(prop === "padding" && value.parts.length === 2 && value.parts[1].value === 0)) {
                            reporter.report("Using width with " + prop + " can sometimes make elements larger than you expect.", properties[prop].line, properties[prop].col, rule);
                          }
                        }
                      }
                    }
                  }
                }
                parser.addListener("startrule", startRule);
                parser.addListener("startfontface", startRule);
                parser.addListener("startpage", startRule);
                parser.addListener("startpagemargin", startRule);
                parser.addListener("startkeyframerule", startRule);
                parser.addListener("startviewport", startRule);
                parser.addListener("property", function(event) {
                  var name = event.property.text.toLowerCase();
                  if (heightProperties[name] || widthProperties[name]) {
                    if (!/^0\S*$/.test(event.value) && !(name === "border" && event.value.toString() === "none")) {
                      properties[name] = { line: event.property.line, col: event.property.col, value: event.value };
                    }
                  } else {
                    if (/^(width|height)/i.test(name) && /^(length|percentage)/.test(event.value.parts[0].type)) {
                      properties[name] = 1;
                    } else if (name === "box-sizing") {
                      boxSizing = true;
                    }
                  }
                });
                parser.addListener("endrule", endRule);
                parser.addListener("endfontface", endRule);
                parser.addListener("endpage", endRule);
                parser.addListener("endpagemargin", endRule);
                parser.addListener("endkeyframerule", endRule);
                parser.addListener("endviewport", endRule);
              } });
              CSSLint2.addRule({ id: "box-sizing", name: "Disallow use of box-sizing", desc: "The box-sizing properties isn't supported in IE6 and IE7.", url: "https://github.com/CSSLint/csslint/wiki/Disallow-box-sizing", browsers: "IE6, IE7", tags: ["Compatibility"], init: function(parser, reporter) {
                var rule = this;
                parser.addListener("property", function(event) {
                  var name = event.property.text.toLowerCase();
                  if (name === "box-sizing") {
                    reporter.report("The box-sizing property isn't supported in IE6 and IE7.", event.line, event.col, rule);
                  }
                });
              } });
              CSSLint2.addRule({ id: "bulletproof-font-face", name: "Use the bulletproof @font-face syntax", desc: "Use the bulletproof @font-face syntax to avoid 404's in old IE (http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax).", url: "https://github.com/CSSLint/csslint/wiki/Bulletproof-font-face", browsers: "All", init: function(parser, reporter) {
                var rule = this, fontFaceRule = false, firstSrc = true, ruleFailed = false, line, col;
                parser.addListener("startfontface", function() {
                  fontFaceRule = true;
                });
                parser.addListener("property", function(event) {
                  if (!fontFaceRule) {
                    return;
                  }
                  var propertyName = event.property.toString().toLowerCase(), value = event.value.toString();
                  line = event.line;
                  col = event.col;
                  if (propertyName === "src") {
                    var regex = /^\s?url\(['"].+\.eot\?.*['"]\)\s*format\(['"]embedded-opentype['"]\).*$/i;
                    if (!value.match(regex) && firstSrc) {
                      ruleFailed = true;
                      firstSrc = false;
                    } else if (value.match(regex) && !firstSrc) {
                      ruleFailed = false;
                    }
                  }
                });
                parser.addListener("endfontface", function() {
                  fontFaceRule = false;
                  if (ruleFailed) {
                    reporter.report("@font-face declaration doesn't follow the fontspring bulletproof syntax.", line, col, rule);
                  }
                });
              } });
              CSSLint2.addRule({ id: "compatible-vendor-prefixes", name: "Require compatible vendor prefixes", desc: "Include all compatible vendor prefixes to reach a wider range of users.", url: "https://github.com/CSSLint/csslint/wiki/Require-compatible-vendor-prefixes", browsers: "All", init: function(parser, reporter) {
                var rule = this, compatiblePrefixes, properties, prop, variations, prefixed, i, len, inKeyFrame = false, arrayPush = Array.prototype.push, applyTo = [];
                compatiblePrefixes = { "animation": "webkit", "animation-delay": "webkit", "animation-direction": "webkit", "animation-duration": "webkit", "animation-fill-mode": "webkit", "animation-iteration-count": "webkit", "animation-name": "webkit", "animation-play-state": "webkit", "animation-timing-function": "webkit", "appearance": "webkit moz", "border-end": "webkit moz", "border-end-color": "webkit moz", "border-end-style": "webkit moz", "border-end-width": "webkit moz", "border-image": "webkit moz o", "border-radius": "webkit", "border-start": "webkit moz", "border-start-color": "webkit moz", "border-start-style": "webkit moz", "border-start-width": "webkit moz", "box-align": "webkit moz ms", "box-direction": "webkit moz ms", "box-flex": "webkit moz ms", "box-lines": "webkit ms", "box-ordinal-group": "webkit moz ms", "box-orient": "webkit moz ms", "box-pack": "webkit moz ms", "box-sizing": "", "box-shadow": "", "column-count": "webkit moz ms", "column-gap": "webkit moz ms", "column-rule": "webkit moz ms", "column-rule-color": "webkit moz ms", "column-rule-style": "webkit moz ms", "column-rule-width": "webkit moz ms", "column-width": "webkit moz ms", "hyphens": "epub moz", "line-break": "webkit ms", "margin-end": "webkit moz", "margin-start": "webkit moz", "marquee-speed": "webkit wap", "marquee-style": "webkit wap", "padding-end": "webkit moz", "padding-start": "webkit moz", "tab-size": "moz o", "text-size-adjust": "webkit ms", "transform": "webkit ms", "transform-origin": "webkit ms", "transition": "", "transition-delay": "", "transition-duration": "", "transition-property": "", "transition-timing-function": "", "user-modify": "webkit moz", "user-select": "webkit moz ms", "word-break": "epub ms", "writing-mode": "epub ms" };
                for (prop in compatiblePrefixes) {
                  if (compatiblePrefixes.hasOwnProperty(prop)) {
                    variations = [];
                    prefixed = compatiblePrefixes[prop].split(" ");
                    for (i = 0, len = prefixed.length; i < len; i++) {
                      variations.push("-" + prefixed[i] + "-" + prop);
                    }
                    compatiblePrefixes[prop] = variations;
                    arrayPush.apply(applyTo, variations);
                  }
                }
                parser.addListener("startrule", function() {
                  properties = [];
                });
                parser.addListener("startkeyframes", function(event) {
                  inKeyFrame = event.prefix || true;
                });
                parser.addListener("endkeyframes", function() {
                  inKeyFrame = false;
                });
                parser.addListener("property", function(event) {
                  var name = event.property;
                  if (CSSLint2.Util.indexOf(applyTo, name.text) > -1) {
                    if (!inKeyFrame || typeof inKeyFrame !== "string" || name.text.indexOf("-" + inKeyFrame + "-") !== 0) {
                      properties.push(name);
                    }
                  }
                });
                parser.addListener("endrule", function() {
                  if (!properties.length) {
                    return;
                  }
                  var propertyGroups = {}, i2, len2, name, prop2, variations2, value, full, actual, item, propertiesSpecified;
                  for (i2 = 0, len2 = properties.length; i2 < len2; i2++) {
                    name = properties[i2];
                    for (prop2 in compatiblePrefixes) {
                      if (compatiblePrefixes.hasOwnProperty(prop2)) {
                        variations2 = compatiblePrefixes[prop2];
                        if (CSSLint2.Util.indexOf(variations2, name.text) > -1) {
                          if (!propertyGroups[prop2]) {
                            propertyGroups[prop2] = { full: variations2.slice(0), actual: [], actualNodes: [] };
                          }
                          if (CSSLint2.Util.indexOf(propertyGroups[prop2].actual, name.text) === -1) {
                            propertyGroups[prop2].actual.push(name.text);
                            propertyGroups[prop2].actualNodes.push(name);
                          }
                        }
                      }
                    }
                  }
                  for (prop2 in propertyGroups) {
                    if (propertyGroups.hasOwnProperty(prop2)) {
                      value = propertyGroups[prop2];
                      full = value.full;
                      actual = value.actual;
                      if (full.length > actual.length) {
                        for (i2 = 0, len2 = full.length; i2 < len2; i2++) {
                          item = full[i2];
                          if (CSSLint2.Util.indexOf(actual, item) === -1) {
                            propertiesSpecified = actual.length === 1 ? actual[0] : actual.length === 2 ? actual.join(" and ") : actual.join(", ");
                            reporter.report("The property " + item + " is compatible with " + propertiesSpecified + " and should be included as well.", value.actualNodes[0].line, value.actualNodes[0].col, rule);
                          }
                        }
                      }
                    }
                  }
                });
              } });
              CSSLint2.addRule({ id: "display-property-grouping", name: "Require properties appropriate for display", desc: "Certain properties shouldn't be used with certain display property values.", url: "https://github.com/CSSLint/csslint/wiki/Require-properties-appropriate-for-display", browsers: "All", init: function(parser, reporter) {
                var rule = this;
                var propertiesToCheck = { display: 1, "float": "none", height: 1, width: 1, margin: 1, "margin-left": 1, "margin-right": 1, "margin-bottom": 1, "margin-top": 1, padding: 1, "padding-left": 1, "padding-right": 1, "padding-bottom": 1, "padding-top": 1, "vertical-align": 1 }, properties;
                function reportProperty(name, display, msg) {
                  if (properties[name]) {
                    if (typeof propertiesToCheck[name] !== "string" || properties[name].value.toLowerCase() !== propertiesToCheck[name]) {
                      reporter.report(msg || name + " can't be used with display: " + display + ".", properties[name].line, properties[name].col, rule);
                    }
                  }
                }
                function startRule() {
                  properties = {};
                }
                function endRule() {
                  var display = properties.display ? properties.display.value : null;
                  if (display) {
                    switch (display) {
                      case "inline":
                        reportProperty("height", display);
                        reportProperty("width", display);
                        reportProperty("margin", display);
                        reportProperty("margin-top", display);
                        reportProperty("margin-bottom", display);
                        reportProperty("float", display, "display:inline has no effect on floated elements (but may be used to fix the IE6 double-margin bug).");
                        break;
                      case "block":
                        reportProperty("vertical-align", display);
                        break;
                      case "inline-block":
                        reportProperty("float", display);
                        break;
                      default:
                        if (display.indexOf("table-") === 0) {
                          reportProperty("margin", display);
                          reportProperty("margin-left", display);
                          reportProperty("margin-right", display);
                          reportProperty("margin-top", display);
                          reportProperty("margin-bottom", display);
                          reportProperty("float", display);
                        }
                    }
                  }
                }
                parser.addListener("startrule", startRule);
                parser.addListener("startfontface", startRule);
                parser.addListener("startkeyframerule", startRule);
                parser.addListener("startpagemargin", startRule);
                parser.addListener("startpage", startRule);
                parser.addListener("startviewport", startRule);
                parser.addListener("property", function(event) {
                  var name = event.property.text.toLowerCase();
                  if (propertiesToCheck[name]) {
                    properties[name] = { value: event.value.text, line: event.property.line, col: event.property.col };
                  }
                });
                parser.addListener("endrule", endRule);
                parser.addListener("endfontface", endRule);
                parser.addListener("endkeyframerule", endRule);
                parser.addListener("endpagemargin", endRule);
                parser.addListener("endpage", endRule);
                parser.addListener("endviewport", endRule);
              } });
              CSSLint2.addRule({ id: "duplicate-background-images", name: "Disallow duplicate background images", desc: "Every background-image should be unique. Use a common class for e.g. sprites.", url: "https://github.com/CSSLint/csslint/wiki/Disallow-duplicate-background-images", browsers: "All", init: function(parser, reporter) {
                var rule = this, stack = {};
                parser.addListener("property", function(event) {
                  var name = event.property.text, value = event.value, i, len;
                  if (name.match(/background/i)) {
                    for (i = 0, len = value.parts.length; i < len; i++) {
                      if (value.parts[i].type === "uri") {
                        if (typeof stack[value.parts[i].uri] === "undefined") {
                          stack[value.parts[i].uri] = event;
                        } else {
                          reporter.report("Background image '" + value.parts[i].uri + "' was used multiple times, first declared at line " + stack[value.parts[i].uri].line + ", col " + stack[value.parts[i].uri].col + ".", event.line, event.col, rule);
                        }
                      }
                    }
                  }
                });
              } });
              CSSLint2.addRule({ id: "duplicate-properties", name: "Disallow duplicate properties", desc: "Duplicate properties must appear one after the other.", url: "https://github.com/CSSLint/csslint/wiki/Disallow-duplicate-properties", browsers: "All", init: function(parser, reporter) {
                var rule = this, properties, lastProperty;
                function startRule() {
                  properties = {};
                }
                parser.addListener("startrule", startRule);
                parser.addListener("startfontface", startRule);
                parser.addListener("startpage", startRule);
                parser.addListener("startpagemargin", startRule);
                parser.addListener("startkeyframerule", startRule);
                parser.addListener("startviewport", startRule);
                parser.addListener("property", function(event) {
                  var property = event.property, name = property.text.toLowerCase();
                  if (properties[name] && (lastProperty !== name || properties[name] === event.value.text)) {
                    reporter.report("Duplicate property '" + event.property + "' found.", event.line, event.col, rule);
                  }
                  properties[name] = event.value.text;
                  lastProperty = name;
                });
              } });
              CSSLint2.addRule({ id: "empty-rules", name: "Disallow empty rules", desc: "Rules without any properties specified should be removed.", url: "https://github.com/CSSLint/csslint/wiki/Disallow-empty-rules", browsers: "All", init: function(parser, reporter) {
                var rule = this, count = 0;
                parser.addListener("startrule", function() {
                  count = 0;
                });
                parser.addListener("property", function() {
                  count++;
                });
                parser.addListener("endrule", function(event) {
                  var selectors = event.selectors;
                  if (count === 0) {
                    reporter.report("Rule is empty.", selectors[0].line, selectors[0].col, rule);
                  }
                });
              } });
              CSSLint2.addRule({ id: "errors", name: "Parsing Errors", desc: "This rule looks for recoverable syntax errors.", browsers: "All", init: function(parser, reporter) {
                var rule = this;
                parser.addListener("error", function(event) {
                  reporter.error(event.message, event.line, event.col, rule);
                });
              } });
              CSSLint2.addRule({ id: "fallback-colors", name: "Require fallback colors", desc: "For older browsers that don't support RGBA, HSL, or HSLA, provide a fallback color.", url: "https://github.com/CSSLint/csslint/wiki/Require-fallback-colors", browsers: "IE6,IE7,IE8", init: function(parser, reporter) {
                var rule = this, lastProperty, propertiesToCheck = { color: 1, background: 1, "border-color": 1, "border-top-color": 1, "border-right-color": 1, "border-bottom-color": 1, "border-left-color": 1, border: 1, "border-top": 1, "border-right": 1, "border-bottom": 1, "border-left": 1, "background-color": 1 };
                function startRule() {
                  lastProperty = null;
                }
                parser.addListener("startrule", startRule);
                parser.addListener("startfontface", startRule);
                parser.addListener("startpage", startRule);
                parser.addListener("startpagemargin", startRule);
                parser.addListener("startkeyframerule", startRule);
                parser.addListener("startviewport", startRule);
                parser.addListener("property", function(event) {
                  var property = event.property, name = property.text.toLowerCase(), parts = event.value.parts, i = 0, colorType = "", len = parts.length;
                  if (propertiesToCheck[name]) {
                    while (i < len) {
                      if (parts[i].type === "color") {
                        if ("alpha" in parts[i] || "hue" in parts[i]) {
                          if (/([^\)]+)\(/.test(parts[i])) {
                            colorType = RegExp.$1.toUpperCase();
                          }
                          if (!lastProperty || (lastProperty.property.text.toLowerCase() !== name || lastProperty.colorType !== "compat")) {
                            reporter.report("Fallback " + name + " (hex or RGB) should precede " + colorType + " " + name + ".", event.line, event.col, rule);
                          }
                        } else {
                          event.colorType = "compat";
                        }
                      }
                      i++;
                    }
                  }
                  lastProperty = event;
                });
              } });
              CSSLint2.addRule({ id: "floats", name: "Disallow too many floats", desc: "This rule tests if the float property is used too many times", url: "https://github.com/CSSLint/csslint/wiki/Disallow-too-many-floats", browsers: "All", init: function(parser, reporter) {
                var rule = this;
                var count = 0;
                parser.addListener("property", function(event) {
                  if (event.property.text.toLowerCase() === "float" && event.value.text.toLowerCase() !== "none") {
                    count++;
                  }
                });
                parser.addListener("endstylesheet", function() {
                  reporter.stat("floats", count);
                  if (count >= 10) {
                    reporter.rollupWarn("Too many floats (" + count + "), you're probably using them for layout. Consider using a grid system instead.", rule);
                  }
                });
              } });
              CSSLint2.addRule({ id: "font-faces", name: "Don't use too many web fonts", desc: "Too many different web fonts in the same stylesheet.", url: "https://github.com/CSSLint/csslint/wiki/Don%27t-use-too-many-web-fonts", browsers: "All", init: function(parser, reporter) {
                var rule = this, count = 0;
                parser.addListener("startfontface", function() {
                  count++;
                });
                parser.addListener("endstylesheet", function() {
                  if (count > 5) {
                    reporter.rollupWarn("Too many @font-face declarations (" + count + ").", rule);
                  }
                });
              } });
              CSSLint2.addRule({ id: "font-sizes", name: "Disallow too many font sizes", desc: "Checks the number of font-size declarations.", url: "https://github.com/CSSLint/csslint/wiki/Don%27t-use-too-many-font-size-declarations", browsers: "All", init: function(parser, reporter) {
                var rule = this, count = 0;
                parser.addListener("property", function(event) {
                  if (event.property.toString() === "font-size") {
                    count++;
                  }
                });
                parser.addListener("endstylesheet", function() {
                  reporter.stat("font-sizes", count);
                  if (count >= 10) {
                    reporter.rollupWarn("Too many font-size declarations (" + count + "), abstraction needed.", rule);
                  }
                });
              } });
              CSSLint2.addRule({ id: "gradients", name: "Require all gradient definitions", desc: "When using a vendor-prefixed gradient, make sure to use them all.", url: "https://github.com/CSSLint/csslint/wiki/Require-all-gradient-definitions", browsers: "All", init: function(parser, reporter) {
                var rule = this, gradients;
                parser.addListener("startrule", function() {
                  gradients = { moz: 0, webkit: 0, oldWebkit: 0, o: 0 };
                });
                parser.addListener("property", function(event) {
                  if (/\-(moz|o|webkit)(?:\-(?:linear|radial))\-gradient/i.test(event.value)) {
                    gradients[RegExp.$1] = 1;
                  } else if (/\-webkit\-gradient/i.test(event.value)) {
                    gradients.oldWebkit = 1;
                  }
                });
                parser.addListener("endrule", function(event) {
                  var missing = [];
                  if (!gradients.moz) {
                    missing.push("Firefox 3.6+");
                  }
                  if (!gradients.webkit) {
                    missing.push("Webkit (Safari 5+, Chrome)");
                  }
                  if (!gradients.oldWebkit) {
                    missing.push("Old Webkit (Safari 4+, Chrome)");
                  }
                  if (!gradients.o) {
                    missing.push("Opera 11.1+");
                  }
                  if (missing.length && missing.length < 4) {
                    reporter.report("Missing vendor-prefixed CSS gradients for " + missing.join(", ") + ".", event.selectors[0].line, event.selectors[0].col, rule);
                  }
                });
              } });
              CSSLint2.addRule({ id: "ids", name: "Disallow IDs in selectors", desc: "Selectors should not contain IDs.", url: "https://github.com/CSSLint/csslint/wiki/Disallow-IDs-in-selectors", browsers: "All", init: function(parser, reporter) {
                var rule = this;
                parser.addListener("startrule", function(event) {
                  var selectors = event.selectors, selector, part, modifier, idCount, i, j, k;
                  for (i = 0; i < selectors.length; i++) {
                    selector = selectors[i];
                    idCount = 0;
                    for (j = 0; j < selector.parts.length; j++) {
                      part = selector.parts[j];
                      if (part.type === parser.SELECTOR_PART_TYPE) {
                        for (k = 0; k < part.modifiers.length; k++) {
                          modifier = part.modifiers[k];
                          if (modifier.type === "id") {
                            idCount++;
                          }
                        }
                      }
                    }
                    if (idCount === 1) {
                      reporter.report("Don't use IDs in selectors.", selector.line, selector.col, rule);
                    } else if (idCount > 1) {
                      reporter.report(idCount + " IDs in the selector, really?", selector.line, selector.col, rule);
                    }
                  }
                });
              } });
              CSSLint2.addRule({ id: "import-ie-limit", name: "@import limit on IE6-IE9", desc: "IE6-9 supports up to 31 @import per stylesheet", browsers: "IE6, IE7, IE8, IE9", init: function(parser, reporter) {
                var rule = this, MAX_IMPORT_COUNT = 31, count = 0;
                function startPage() {
                  count = 0;
                }
                parser.addListener("startpage", startPage);
                parser.addListener("import", function() {
                  count++;
                });
                parser.addListener("endstylesheet", function() {
                  if (count > MAX_IMPORT_COUNT) {
                    reporter.rollupError("Too many @import rules (" + count + "). IE6-9 supports up to 31 import per stylesheet.", rule);
                  }
                });
              } });
              CSSLint2.addRule({ id: "import", name: "Disallow @import", desc: "Don't use @import, use <link> instead.", url: "https://github.com/CSSLint/csslint/wiki/Disallow-%40import", browsers: "All", init: function(parser, reporter) {
                var rule = this;
                parser.addListener("import", function(event) {
                  reporter.report("@import prevents parallel downloads, use <link> instead.", event.line, event.col, rule);
                });
              } });
              CSSLint2.addRule({ id: "important", name: "Disallow !important", desc: "Be careful when using !important declaration", url: "https://github.com/CSSLint/csslint/wiki/Disallow-%21important", browsers: "All", init: function(parser, reporter) {
                var rule = this, count = 0;
                parser.addListener("property", function(event) {
                  if (event.important === true) {
                    count++;
                    reporter.report("Use of !important", event.line, event.col, rule);
                  }
                });
                parser.addListener("endstylesheet", function() {
                  reporter.stat("important", count);
                  if (count >= 10) {
                    reporter.rollupWarn("Too many !important declarations (" + count + "), try to use less than 10 to avoid specificity issues.", rule);
                  }
                });
              } });
              CSSLint2.addRule({ id: "known-properties", name: "Require use of known properties", desc: "Properties should be known (listed in CSS3 specification) or be a vendor-prefixed property.", url: "https://github.com/CSSLint/csslint/wiki/Require-use-of-known-properties", browsers: "All", init: function(parser, reporter) {
                var rule = this;
                parser.addListener("property", function(event) {
                  if (event.invalid) {
                    reporter.report(event.invalid.message, event.line, event.col, rule);
                  }
                });
              } });
              CSSLint2.addRule({ id: "order-alphabetical", name: "Alphabetical order", desc: "Assure properties are in alphabetical order", browsers: "All", init: function(parser, reporter) {
                var rule = this, properties;
                var startRule = function() {
                  properties = [];
                };
                var endRule = function(event) {
                  var currentProperties = properties.join(","), expectedProperties = properties.sort().join(",");
                  if (currentProperties !== expectedProperties) {
                    reporter.report("Rule doesn't have all its properties in alphabetical order.", event.line, event.col, rule);
                  }
                };
                parser.addListener("startrule", startRule);
                parser.addListener("startfontface", startRule);
                parser.addListener("startpage", startRule);
                parser.addListener("startpagemargin", startRule);
                parser.addListener("startkeyframerule", startRule);
                parser.addListener("startviewport", startRule);
                parser.addListener("property", function(event) {
                  var name = event.property.text, lowerCasePrefixLessName = name.toLowerCase().replace(/^-.*?-/, "");
                  properties.push(lowerCasePrefixLessName);
                });
                parser.addListener("endrule", endRule);
                parser.addListener("endfontface", endRule);
                parser.addListener("endpage", endRule);
                parser.addListener("endpagemargin", endRule);
                parser.addListener("endkeyframerule", endRule);
                parser.addListener("endviewport", endRule);
              } });
              CSSLint2.addRule({ id: "outline-none", name: "Disallow outline: none", desc: "Use of outline: none or outline: 0 should be limited to :focus rules.", url: "https://github.com/CSSLint/csslint/wiki/Disallow-outline%3Anone", browsers: "All", tags: ["Accessibility"], init: function(parser, reporter) {
                var rule = this, lastRule;
                function startRule(event) {
                  if (event.selectors) {
                    lastRule = { line: event.line, col: event.col, selectors: event.selectors, propCount: 0, outline: false };
                  } else {
                    lastRule = null;
                  }
                }
                function endRule() {
                  if (lastRule) {
                    if (lastRule.outline) {
                      if (lastRule.selectors.toString().toLowerCase().indexOf(":focus") === -1) {
                        reporter.report("Outlines should only be modified using :focus.", lastRule.line, lastRule.col, rule);
                      } else if (lastRule.propCount === 1) {
                        reporter.report("Outlines shouldn't be hidden unless other visual changes are made.", lastRule.line, lastRule.col, rule);
                      }
                    }
                  }
                }
                parser.addListener("startrule", startRule);
                parser.addListener("startfontface", startRule);
                parser.addListener("startpage", startRule);
                parser.addListener("startpagemargin", startRule);
                parser.addListener("startkeyframerule", startRule);
                parser.addListener("startviewport", startRule);
                parser.addListener("property", function(event) {
                  var name = event.property.text.toLowerCase(), value = event.value;
                  if (lastRule) {
                    lastRule.propCount++;
                    if (name === "outline" && (value.toString() === "none" || value.toString() === "0")) {
                      lastRule.outline = true;
                    }
                  }
                });
                parser.addListener("endrule", endRule);
                parser.addListener("endfontface", endRule);
                parser.addListener("endpage", endRule);
                parser.addListener("endpagemargin", endRule);
                parser.addListener("endkeyframerule", endRule);
                parser.addListener("endviewport", endRule);
              } });
              CSSLint2.addRule({ id: "overqualified-elements", name: "Disallow overqualified elements", desc: "Don't use classes or IDs with elements (a.foo or a#foo).", url: "https://github.com/CSSLint/csslint/wiki/Disallow-overqualified-elements", browsers: "All", init: function(parser, reporter) {
                var rule = this, classes = {};
                parser.addListener("startrule", function(event) {
                  var selectors = event.selectors, selector, part, modifier, i, j, k;
                  for (i = 0; i < selectors.length; i++) {
                    selector = selectors[i];
                    for (j = 0; j < selector.parts.length; j++) {
                      part = selector.parts[j];
                      if (part.type === parser.SELECTOR_PART_TYPE) {
                        for (k = 0; k < part.modifiers.length; k++) {
                          modifier = part.modifiers[k];
                          if (part.elementName && modifier.type === "id") {
                            reporter.report("Element (" + part + ") is overqualified, just use " + modifier + " without element name.", part.line, part.col, rule);
                          } else if (modifier.type === "class") {
                            if (!classes[modifier]) {
                              classes[modifier] = [];
                            }
                            classes[modifier].push({ modifier, part });
                          }
                        }
                      }
                    }
                  }
                });
                parser.addListener("endstylesheet", function() {
                  var prop;
                  for (prop in classes) {
                    if (classes.hasOwnProperty(prop)) {
                      if (classes[prop].length === 1 && classes[prop][0].part.elementName) {
                        reporter.report("Element (" + classes[prop][0].part + ") is overqualified, just use " + classes[prop][0].modifier + " without element name.", classes[prop][0].part.line, classes[prop][0].part.col, rule);
                      }
                    }
                  }
                });
              } });
              CSSLint2.addRule({ id: "qualified-headings", name: "Disallow qualified headings", desc: "Headings should not be qualified (namespaced).", url: "https://github.com/CSSLint/csslint/wiki/Disallow-qualified-headings", browsers: "All", init: function(parser, reporter) {
                var rule = this;
                parser.addListener("startrule", function(event) {
                  var selectors = event.selectors, selector, part, i, j;
                  for (i = 0; i < selectors.length; i++) {
                    selector = selectors[i];
                    for (j = 0; j < selector.parts.length; j++) {
                      part = selector.parts[j];
                      if (part.type === parser.SELECTOR_PART_TYPE) {
                        if (part.elementName && /h[1-6]/.test(part.elementName.toString()) && j > 0) {
                          reporter.report("Heading (" + part.elementName + ") should not be qualified.", part.line, part.col, rule);
                        }
                      }
                    }
                  }
                });
              } });
              CSSLint2.addRule({ id: "regex-selectors", name: "Disallow selectors that look like regexs", desc: "Selectors that look like regular expressions are slow and should be avoided.", url: "https://github.com/CSSLint/csslint/wiki/Disallow-selectors-that-look-like-regular-expressions", browsers: "All", init: function(parser, reporter) {
                var rule = this;
                parser.addListener("startrule", function(event) {
                  var selectors = event.selectors, selector, part, modifier, i, j, k;
                  for (i = 0; i < selectors.length; i++) {
                    selector = selectors[i];
                    for (j = 0; j < selector.parts.length; j++) {
                      part = selector.parts[j];
                      if (part.type === parser.SELECTOR_PART_TYPE) {
                        for (k = 0; k < part.modifiers.length; k++) {
                          modifier = part.modifiers[k];
                          if (modifier.type === "attribute") {
                            if (/([~\|\^\$\*]=)/.test(modifier)) {
                              reporter.report("Attribute selectors with " + RegExp.$1 + " are slow!", modifier.line, modifier.col, rule);
                            }
                          }
                        }
                      }
                    }
                  }
                });
              } });
              CSSLint2.addRule({ id: "rules-count", name: "Rules Count", desc: "Track how many rules there are.", browsers: "All", init: function(parser, reporter) {
                var count = 0;
                parser.addListener("startrule", function() {
                  count++;
                });
                parser.addListener("endstylesheet", function() {
                  reporter.stat("rule-count", count);
                });
              } });
              CSSLint2.addRule({ id: "selector-max-approaching", name: "Warn when approaching the 4095 selector limit for IE", desc: "Will warn when selector count is >= 3800 selectors.", browsers: "IE", init: function(parser, reporter) {
                var rule = this, count = 0;
                parser.addListener("startrule", function(event) {
                  count += event.selectors.length;
                });
                parser.addListener("endstylesheet", function() {
                  if (count >= 3800) {
                    reporter.report("You have " + count + " selectors. Internet Explorer supports a maximum of 4095 selectors per stylesheet. Consider refactoring.", 0, 0, rule);
                  }
                });
              } });
              CSSLint2.addRule({ id: "selector-max", name: "Error when past the 4095 selector limit for IE", desc: "Will error when selector count is > 4095.", browsers: "IE", init: function(parser, reporter) {
                var rule = this, count = 0;
                parser.addListener("startrule", function(event) {
                  count += event.selectors.length;
                });
                parser.addListener("endstylesheet", function() {
                  if (count > 4095) {
                    reporter.report("You have " + count + " selectors. Internet Explorer supports a maximum of 4095 selectors per stylesheet. Consider refactoring.", 0, 0, rule);
                  }
                });
              } });
              CSSLint2.addRule({ id: "selector-newline", name: "Disallow new-line characters in selectors", desc: "New-line characters in selectors are usually a forgotten comma and not a descendant combinator.", browsers: "All", init: function(parser, reporter) {
                var rule = this;
                function startRule(event) {
                  var i, len, selector, p, n, pLen, part, part2, type, currentLine, nextLine, selectors = event.selectors;
                  for (i = 0, len = selectors.length; i < len; i++) {
                    selector = selectors[i];
                    for (p = 0, pLen = selector.parts.length; p < pLen; p++) {
                      for (n = p + 1; n < pLen; n++) {
                        part = selector.parts[p];
                        part2 = selector.parts[n];
                        type = part.type;
                        currentLine = part.line;
                        nextLine = part2.line;
                        if (type === "descendant" && nextLine > currentLine) {
                          reporter.report("newline character found in selector (forgot a comma?)", currentLine, selectors[i].parts[0].col, rule);
                        }
                      }
                    }
                  }
                }
                parser.addListener("startrule", startRule);
              } });
              CSSLint2.addRule({ id: "shorthand", name: "Require shorthand properties", desc: "Use shorthand properties where possible.", url: "https://github.com/CSSLint/csslint/wiki/Require-shorthand-properties", browsers: "All", init: function(parser, reporter) {
                var rule = this, prop, i, len, propertiesToCheck = {}, properties, mapping = { "margin": ["margin-top", "margin-bottom", "margin-left", "margin-right"], "padding": ["padding-top", "padding-bottom", "padding-left", "padding-right"] };
                for (prop in mapping) {
                  if (mapping.hasOwnProperty(prop)) {
                    for (i = 0, len = mapping[prop].length; i < len; i++) {
                      propertiesToCheck[mapping[prop][i]] = prop;
                    }
                  }
                }
                function startRule() {
                  properties = {};
                }
                function endRule(event) {
                  var prop2, i2, len2, total;
                  for (prop2 in mapping) {
                    if (mapping.hasOwnProperty(prop2)) {
                      total = 0;
                      for (i2 = 0, len2 = mapping[prop2].length; i2 < len2; i2++) {
                        total += properties[mapping[prop2][i2]] ? 1 : 0;
                      }
                      if (total === mapping[prop2].length) {
                        reporter.report("The properties " + mapping[prop2].join(", ") + " can be replaced by " + prop2 + ".", event.line, event.col, rule);
                      }
                    }
                  }
                }
                parser.addListener("startrule", startRule);
                parser.addListener("startfontface", startRule);
                parser.addListener("property", function(event) {
                  var name = event.property.toString().toLowerCase();
                  if (propertiesToCheck[name]) {
                    properties[name] = 1;
                  }
                });
                parser.addListener("endrule", endRule);
                parser.addListener("endfontface", endRule);
              } });
              CSSLint2.addRule({ id: "star-property-hack", name: "Disallow properties with a star prefix", desc: "Checks for the star property hack (targets IE6/7)", url: "https://github.com/CSSLint/csslint/wiki/Disallow-star-hack", browsers: "All", init: function(parser, reporter) {
                var rule = this;
                parser.addListener("property", function(event) {
                  var property = event.property;
                  if (property.hack === "*") {
                    reporter.report("Property with star prefix found.", event.property.line, event.property.col, rule);
                  }
                });
              } });
              CSSLint2.addRule({ id: "text-indent", name: "Disallow negative text-indent", desc: "Checks for text indent less than -99px", url: "https://github.com/CSSLint/csslint/wiki/Disallow-negative-text-indent", browsers: "All", init: function(parser, reporter) {
                var rule = this, textIndent, direction;
                function startRule() {
                  textIndent = false;
                  direction = "inherit";
                }
                function endRule() {
                  if (textIndent && direction !== "ltr") {
                    reporter.report("Negative text-indent doesn't work well with RTL. If you use text-indent for image replacement explicitly set direction for that item to ltr.", textIndent.line, textIndent.col, rule);
                  }
                }
                parser.addListener("startrule", startRule);
                parser.addListener("startfontface", startRule);
                parser.addListener("property", function(event) {
                  var name = event.property.toString().toLowerCase(), value = event.value;
                  if (name === "text-indent" && value.parts[0].value < -99) {
                    textIndent = event.property;
                  } else if (name === "direction" && value.toString() === "ltr") {
                    direction = "ltr";
                  }
                });
                parser.addListener("endrule", endRule);
                parser.addListener("endfontface", endRule);
              } });
              CSSLint2.addRule({ id: "underscore-property-hack", name: "Disallow properties with an underscore prefix", desc: "Checks for the underscore property hack (targets IE6)", url: "https://github.com/CSSLint/csslint/wiki/Disallow-underscore-hack", browsers: "All", init: function(parser, reporter) {
                var rule = this;
                parser.addListener("property", function(event) {
                  var property = event.property;
                  if (property.hack === "_") {
                    reporter.report("Property with underscore prefix found.", event.property.line, event.property.col, rule);
                  }
                });
              } });
              CSSLint2.addRule({ id: "unique-headings", name: "Headings should only be defined once", desc: "Headings should be defined only once.", url: "https://github.com/CSSLint/csslint/wiki/Headings-should-only-be-defined-once", browsers: "All", init: function(parser, reporter) {
                var rule = this;
                var headings = { h1: 0, h2: 0, h3: 0, h4: 0, h5: 0, h6: 0 };
                parser.addListener("startrule", function(event) {
                  var selectors = event.selectors, selector, part, pseudo, i, j;
                  for (i = 0; i < selectors.length; i++) {
                    selector = selectors[i];
                    part = selector.parts[selector.parts.length - 1];
                    if (part.elementName && /(h[1-6])/i.test(part.elementName.toString())) {
                      for (j = 0; j < part.modifiers.length; j++) {
                        if (part.modifiers[j].type === "pseudo") {
                          pseudo = true;
                          break;
                        }
                      }
                      if (!pseudo) {
                        headings[RegExp.$1]++;
                        if (headings[RegExp.$1] > 1) {
                          reporter.report("Heading (" + part.elementName + ") has already been defined.", part.line, part.col, rule);
                        }
                      }
                    }
                  }
                });
                parser.addListener("endstylesheet", function() {
                  var prop, messages = [];
                  for (prop in headings) {
                    if (headings.hasOwnProperty(prop)) {
                      if (headings[prop] > 1) {
                        messages.push(headings[prop] + " " + prop + "s");
                      }
                    }
                  }
                  if (messages.length) {
                    reporter.rollupWarn("You have " + messages.join(", ") + " defined in this stylesheet.", rule);
                  }
                });
              } });
              CSSLint2.addRule({ id: "universal-selector", name: "Disallow universal selector", desc: "The universal selector (*) is known to be slow.", url: "https://github.com/CSSLint/csslint/wiki/Disallow-universal-selector", browsers: "All", init: function(parser, reporter) {
                var rule = this;
                parser.addListener("startrule", function(event) {
                  var selectors = event.selectors, selector, part, i;
                  for (i = 0; i < selectors.length; i++) {
                    selector = selectors[i];
                    part = selector.parts[selector.parts.length - 1];
                    if (part.elementName === "*") {
                      reporter.report(rule.desc, part.line, part.col, rule);
                    }
                  }
                });
              } });
              CSSLint2.addRule({ id: "unqualified-attributes", name: "Disallow unqualified attribute selectors", desc: "Unqualified attribute selectors are known to be slow.", url: "https://github.com/CSSLint/csslint/wiki/Disallow-unqualified-attribute-selectors", browsers: "All", init: function(parser, reporter) {
                var rule = this;
                parser.addListener("startrule", function(event) {
                  var selectors = event.selectors, selectorContainsClassOrId = false, selector, part, modifier, i, k;
                  for (i = 0; i < selectors.length; i++) {
                    selector = selectors[i];
                    part = selector.parts[selector.parts.length - 1];
                    if (part.type === parser.SELECTOR_PART_TYPE) {
                      for (k = 0; k < part.modifiers.length; k++) {
                        modifier = part.modifiers[k];
                        if (modifier.type === "class" || modifier.type === "id") {
                          selectorContainsClassOrId = true;
                          break;
                        }
                      }
                      if (!selectorContainsClassOrId) {
                        for (k = 0; k < part.modifiers.length; k++) {
                          modifier = part.modifiers[k];
                          if (modifier.type === "attribute" && (!part.elementName || part.elementName === "*")) {
                            reporter.report(rule.desc, part.line, part.col, rule);
                          }
                        }
                      }
                    }
                  }
                });
              } });
              CSSLint2.addRule({ id: "vendor-prefix", name: "Require standard property with vendor prefix", desc: "When using a vendor-prefixed property, make sure to include the standard one.", url: "https://github.com/CSSLint/csslint/wiki/Require-standard-property-with-vendor-prefix", browsers: "All", init: function(parser, reporter) {
                var rule = this, properties, num, propertiesToCheck = { "-webkit-border-radius": "border-radius", "-webkit-border-top-left-radius": "border-top-left-radius", "-webkit-border-top-right-radius": "border-top-right-radius", "-webkit-border-bottom-left-radius": "border-bottom-left-radius", "-webkit-border-bottom-right-radius": "border-bottom-right-radius", "-o-border-radius": "border-radius", "-o-border-top-left-radius": "border-top-left-radius", "-o-border-top-right-radius": "border-top-right-radius", "-o-border-bottom-left-radius": "border-bottom-left-radius", "-o-border-bottom-right-radius": "border-bottom-right-radius", "-moz-border-radius": "border-radius", "-moz-border-radius-topleft": "border-top-left-radius", "-moz-border-radius-topright": "border-top-right-radius", "-moz-border-radius-bottomleft": "border-bottom-left-radius", "-moz-border-radius-bottomright": "border-bottom-right-radius", "-moz-column-count": "column-count", "-webkit-column-count": "column-count", "-moz-column-gap": "column-gap", "-webkit-column-gap": "column-gap", "-moz-column-rule": "column-rule", "-webkit-column-rule": "column-rule", "-moz-column-rule-style": "column-rule-style", "-webkit-column-rule-style": "column-rule-style", "-moz-column-rule-color": "column-rule-color", "-webkit-column-rule-color": "column-rule-color", "-moz-column-rule-width": "column-rule-width", "-webkit-column-rule-width": "column-rule-width", "-moz-column-width": "column-width", "-webkit-column-width": "column-width", "-webkit-column-span": "column-span", "-webkit-columns": "columns", "-moz-box-shadow": "box-shadow", "-webkit-box-shadow": "box-shadow", "-moz-transform": "transform", "-webkit-transform": "transform", "-o-transform": "transform", "-ms-transform": "transform", "-moz-transform-origin": "transform-origin", "-webkit-transform-origin": "transform-origin", "-o-transform-origin": "transform-origin", "-ms-transform-origin": "transform-origin", "-moz-box-sizing": "box-sizing", "-webkit-box-sizing": "box-sizing" };
                function startRule() {
                  properties = {};
                  num = 1;
                }
                function endRule() {
                  var prop, i, len, needed, actual, needsStandard = [];
                  for (prop in properties) {
                    if (propertiesToCheck[prop]) {
                      needsStandard.push({ actual: prop, needed: propertiesToCheck[prop] });
                    }
                  }
                  for (i = 0, len = needsStandard.length; i < len; i++) {
                    needed = needsStandard[i].needed;
                    actual = needsStandard[i].actual;
                    if (!properties[needed]) {
                      reporter.report("Missing standard property '" + needed + "' to go along with '" + actual + "'.", properties[actual][0].name.line, properties[actual][0].name.col, rule);
                    } else {
                      if (properties[needed][0].pos < properties[actual][0].pos) {
                        reporter.report("Standard property '" + needed + "' should come after vendor-prefixed property '" + actual + "'.", properties[actual][0].name.line, properties[actual][0].name.col, rule);
                      }
                    }
                  }
                }
                parser.addListener("startrule", startRule);
                parser.addListener("startfontface", startRule);
                parser.addListener("startpage", startRule);
                parser.addListener("startpagemargin", startRule);
                parser.addListener("startkeyframerule", startRule);
                parser.addListener("startviewport", startRule);
                parser.addListener("property", function(event) {
                  var name = event.property.text.toLowerCase();
                  if (!properties[name]) {
                    properties[name] = [];
                  }
                  properties[name].push({ name: event.property, value: event.value, pos: num++ });
                });
                parser.addListener("endrule", endRule);
                parser.addListener("endfontface", endRule);
                parser.addListener("endpage", endRule);
                parser.addListener("endpagemargin", endRule);
                parser.addListener("endkeyframerule", endRule);
                parser.addListener("endviewport", endRule);
              } });
              CSSLint2.addRule({ id: "zero-units", name: "Disallow units for 0 values", desc: "You don't need to specify units when a value is 0.", url: "https://github.com/CSSLint/csslint/wiki/Disallow-units-for-zero-values", browsers: "All", init: function(parser, reporter) {
                var rule = this;
                parser.addListener("property", function(event) {
                  var parts = event.value.parts, i = 0, len = parts.length;
                  while (i < len) {
                    if ((parts[i].units || parts[i].type === "percentage") && parts[i].value === 0 && parts[i].type !== "time") {
                      reporter.report("Values of 0 shouldn't have units specified.", parts[i].line, parts[i].col, rule);
                    }
                    i++;
                  }
                });
              } });
              (function() {
                var xmlEscape = function(str) {
                  if (!str || str.constructor !== String) {
                    return "";
                  }
                  return str.replace(/["&><]/g, function(match) {
                    switch (match) {
                      case '"':
                        return "&quot;";
                      case "&":
                        return "&amp;";
                      case "<":
                        return "&lt;";
                      case ">":
                        return "&gt;";
                    }
                  });
                };
                CSSLint2.addFormatter({ id: "checkstyle-xml", name: "Checkstyle XML format", startFormat: function() {
                  return '<?xml version="1.0" encoding="utf-8"?><checkstyle>';
                }, endFormat: function() {
                  return "</checkstyle>";
                }, readError: function(filename, message) {
                  return '<file name="' + xmlEscape(filename) + '"><error line="0" column="0" severty="error" message="' + xmlEscape(message) + '"></error></file>';
                }, formatResults: function(results, filename) {
                  var messages = results.messages, output = [];
                  var generateSource = function(rule) {
                    if (!rule || !("name" in rule)) {
                      return "";
                    }
                    return "net.csslint." + rule.name.replace(/\s/g, "");
                  };
                  if (messages.length > 0) {
                    output.push('<file name="' + filename + '">');
                    CSSLint2.Util.forEach(messages, function(message) {
                      if (!message.rollup) {
                        output.push('<error line="' + message.line + '" column="' + message.col + '" severity="' + message.type + '" message="' + xmlEscape(message.message) + '" source="' + generateSource(message.rule) + '"/>');
                      }
                    });
                    output.push("</file>");
                  }
                  return output.join("");
                } });
              })();
              CSSLint2.addFormatter({ id: "compact", name: "Compact, 'porcelain' format", startFormat: function() {
                return "";
              }, endFormat: function() {
                return "";
              }, formatResults: function(results, filename, options) {
                var messages = results.messages, output = "";
                options = options || {};
                var capitalize = function(str) {
                  return str.charAt(0).toUpperCase() + str.slice(1);
                };
                if (messages.length === 0) {
                  return options.quiet ? "" : filename + ": Lint Free!";
                }
                CSSLint2.Util.forEach(messages, function(message) {
                  if (message.rollup) {
                    output += filename + ": " + capitalize(message.type) + " - " + message.message + " (" + message.rule.id + ")\n";
                  } else {
                    output += filename + ": line " + message.line + ", col " + message.col + ", " + capitalize(message.type) + " - " + message.message + " (" + message.rule.id + ")\n";
                  }
                });
                return output;
              } });
              CSSLint2.addFormatter({ id: "csslint-xml", name: "CSSLint XML format", startFormat: function() {
                return '<?xml version="1.0" encoding="utf-8"?><csslint>';
              }, endFormat: function() {
                return "</csslint>";
              }, formatResults: function(results, filename) {
                var messages = results.messages, output = [];
                var escapeSpecialCharacters = function(str) {
                  if (!str || str.constructor !== String) {
                    return "";
                  }
                  return str.replace(/"/g, "'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                };
                if (messages.length > 0) {
                  output.push('<file name="' + filename + '">');
                  CSSLint2.Util.forEach(messages, function(message) {
                    if (message.rollup) {
                      output.push('<issue severity="' + message.type + '" reason="' + escapeSpecialCharacters(message.message) + '" evidence="' + escapeSpecialCharacters(message.evidence) + '"/>');
                    } else {
                      output.push('<issue line="' + message.line + '" char="' + message.col + '" severity="' + message.type + '" reason="' + escapeSpecialCharacters(message.message) + '" evidence="' + escapeSpecialCharacters(message.evidence) + '"/>');
                    }
                  });
                  output.push("</file>");
                }
                return output.join("");
              } });
              CSSLint2.addFormatter({ id: "json", name: "JSON", startFormat: function() {
                this.json = [];
                return "";
              }, endFormat: function() {
                var ret = "";
                if (this.json.length > 0) {
                  if (this.json.length === 1) {
                    ret = JSON.stringify(this.json[0]);
                  } else {
                    ret = JSON.stringify(this.json);
                  }
                }
                return ret;
              }, formatResults: function(results, filename, options) {
                if (results.messages.length > 0 || !options.quiet) {
                  this.json.push({ filename, messages: results.messages, stats: results.stats });
                }
                return "";
              } });
              CSSLint2.addFormatter({ id: "junit-xml", name: "JUNIT XML format", startFormat: function() {
                return '<?xml version="1.0" encoding="utf-8"?><testsuites>';
              }, endFormat: function() {
                return "</testsuites>";
              }, formatResults: function(results, filename) {
                var messages = results.messages, output = [], tests = { "error": 0, "failure": 0 };
                var generateSource = function(rule) {
                  if (!rule || !("name" in rule)) {
                    return "";
                  }
                  return "net.csslint." + rule.name.replace(/\s/g, "");
                };
                var escapeSpecialCharacters = function(str) {
                  if (!str || str.constructor !== String) {
                    return "";
                  }
                  return str.replace(/"/g, "'").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                };
                if (messages.length > 0) {
                  messages.forEach(function(message) {
                    var type = message.type === "warning" ? "error" : message.type;
                    if (!message.rollup) {
                      output.push('<testcase time="0" name="' + generateSource(message.rule) + '">');
                      output.push("<" + type + ' message="' + escapeSpecialCharacters(message.message) + '"><![CDATA[' + message.line + ":" + message.col + ":" + escapeSpecialCharacters(message.evidence) + "]]></" + type + ">");
                      output.push("</testcase>");
                      tests[type] += 1;
                    }
                  });
                  output.unshift('<testsuite time="0" tests="' + messages.length + '" skipped="0" errors="' + tests.error + '" failures="' + tests.failure + '" package="net.csslint" name="' + filename + '">');
                  output.push("</testsuite>");
                }
                return output.join("");
              } });
              CSSLint2.addFormatter({ id: "lint-xml", name: "Lint XML format", startFormat: function() {
                return '<?xml version="1.0" encoding="utf-8"?><lint>';
              }, endFormat: function() {
                return "</lint>";
              }, formatResults: function(results, filename) {
                var messages = results.messages, output = [];
                var escapeSpecialCharacters = function(str) {
                  if (!str || str.constructor !== String) {
                    return "";
                  }
                  return str.replace(/"/g, "'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                };
                if (messages.length > 0) {
                  output.push('<file name="' + filename + '">');
                  CSSLint2.Util.forEach(messages, function(message) {
                    if (message.rollup) {
                      output.push('<issue severity="' + message.type + '" reason="' + escapeSpecialCharacters(message.message) + '" evidence="' + escapeSpecialCharacters(message.evidence) + '"/>');
                    } else {
                      var rule = "";
                      if (message.rule && message.rule.id) {
                        rule = 'rule="' + escapeSpecialCharacters(message.rule.id) + '" ';
                      }
                      output.push("<issue " + rule + 'line="' + message.line + '" char="' + message.col + '" severity="' + message.type + '" reason="' + escapeSpecialCharacters(message.message) + '" evidence="' + escapeSpecialCharacters(message.evidence) + '"/>');
                    }
                  });
                  output.push("</file>");
                }
                return output.join("");
              } });
              CSSLint2.addFormatter({ id: "text", name: "Plain Text", startFormat: function() {
                return "";
              }, endFormat: function() {
                return "";
              }, formatResults: function(results, filename, options) {
                var messages = results.messages, output = "";
                options = options || {};
                if (messages.length === 0) {
                  return options.quiet ? "" : "\n\ncsslint: No errors in " + filename + ".";
                }
                output = "\n\ncsslint: There ";
                if (messages.length === 1) {
                  output += "is 1 problem";
                } else {
                  output += "are " + messages.length + " problems";
                }
                output += " in " + filename + ".";
                var pos = filename.lastIndexOf("/"), shortFilename = filename;
                if (pos === -1) {
                  pos = filename.lastIndexOf("\\");
                }
                if (pos > -1) {
                  shortFilename = filename.substring(pos + 1);
                }
                CSSLint2.Util.forEach(messages, function(message, i) {
                  output = output + "\n\n" + shortFilename;
                  if (message.rollup) {
                    output += "\n" + (i + 1) + ": " + message.type;
                    output += "\n" + message.message;
                  } else {
                    output += "\n" + (i + 1) + ": " + message.type + " at line " + message.line + ", col " + message.col;
                    output += "\n" + message.message;
                    output += "\n" + message.evidence;
                  }
                });
                return output;
              } });
              return CSSLint2;
            })();

            var __defProp = Object.defineProperty;
            var __defProps = Object.defineProperties;
            var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
            var __getOwnPropSymbols = Object.getOwnPropertySymbols;
            var __hasOwnProp = Object.prototype.hasOwnProperty;
            var __propIsEnum = Object.prototype.propertyIsEnumerable;
            var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
            var __spreadValues = (a, b) => {
              for (var prop in b || (b = {}))
                if (__hasOwnProp.call(b, prop))
                  __defNormalProp(a, prop, b[prop]);
              if (__getOwnPropSymbols)
                for (var prop of __getOwnPropSymbols(b)) {
                  if (__propIsEnum.call(b, prop))
                    __defNormalProp(a, prop, b[prop]);
                }
              return a;
            };
            var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
            function toAST(css) {
              return toPlainObject(parse(css));
            }
            function toCSSString(ast, isBeautify = false) {
              const cssString = generate(fromPlainObject(JSON.parse(JSON.stringify(ast))));
              return isBeautify ? cssbeautify(cssString) : cssString;
            }
            function schemaToInitCss(configSchemas, prefix) {
              let _initialValues = "";
              configSchemas.forEach((config) => {
                const _selector = `${prefix ? prefix + " " : ""}${config.selector}`;
                config.desc ? _initialValues += `/* ${config.desc} */
` : "";
                _initialValues += `${_selector} {

} 
`;
                if (config.pseudo) {
                  config.pseudo.forEach(({ desc, selector }) => {
                    desc ? _initialValues += `/* ${desc} */
` : "";
                    _initialValues += `${config.selector}:${selector} {

} 
`;
                  });
                }
                if (config.children) {
                  _initialValues += schemaToInitCss(config.children, _selector);
                }
              });
              return _initialValues;
            }
            function getSelectorsAST(rule) {
              const list = rule.prelude.children;
              if (list.length) {
                return list[0].children;
              }
              return;
            }
            function selectorDetection(cssAst, classNameSchema) {
              const initCssAst = toAST(schemaToInitCss(classNameSchema));
              const newRules = initCssAst.children.map((rule) => {
                const targetRule = cssAst.children.find((customRule) => {
                  return JSON.stringify(getSelectorsAST(customRule)) === JSON.stringify(getSelectorsAST(rule));
                });
                return __spreadProps(__spreadValues({}, rule), {
                  block: (targetRule == null ? void 0 : targetRule.block) || {
                    children: [],
                    loc: null,
                    type: "Block"
                  }
                });
              });
              return __spreadProps(__spreadValues({}, initCssAst), { children: newRules });
            }
            function cssGzip(cssStr) {
              return init(wasm_gzip_bg).then(() => {
                let compressed = compressStringGzip(cssStr);
                if (!compressed) {
                  return null;
                }
                return new Blob([compressed], { type: "application/x-gzip" });
              });
            }
            function getColorVariablesCss(variables, themeColorVariables) {
              const cssVariables = variables.colors.map(({ name, colorValues }) => {
                if (name === variables.primaryColor) {
                  let primaryColorCss = "";
                  const str = variables.colorNos.map((no, index) => {
                    primaryColorCss += `--primary-${no}: ${colorValues[index]};`;
                    return `--${name}-${no}: ${colorValues[index]};`;
                  }).join("");
                  return str + primaryColorCss;
                }
                return variables.colorNos.map((no, index) => {
                  return `--${name}-${no}: ${colorValues[index]};`;
                }).join("");
              });
              if (themeColorVariables) {
                Object.entries(themeColorVariables).map(([key, value]) => {
                  cssVariables.push(`${key}:${value};`);
                });
              }
              return `:root{${cssVariables.join("")}}`;
            }
            class CssASTStore {
              constructor({ initCssMap, baseColorVariables, themeColorVariables, componentConfigs }) {
                this.cssASTMap = initCssMap || {};
                this.themeColorVariables = themeColorVariables || {};
                this.baseVariables = baseColorVariables || {
                  colorNos: [],
                  primaryColor: "blue",
                  primaryColorNo: 0,
                  colors: []
                };
                this.componentSortList = componentConfigs.reduce((acc, config) => {
                  const keys = config.specs.map((spec) => {
                    return `${config.key}.${spec.title}`;
                  });
                  return [...acc, ...keys];
                }, []);
              }
              getCssAST(key) {
                return this.cssASTMap[key];
              }
              setCss(key, css, rules, failBack) {
                const results = window.CSSLint.verify(css);
                if (!results.messages.every(({ type }) => type !== "error")) {
                  failBack("css \u683C\u5F0F\u9519\u8BEF");
                  return;
                }
                this.cssASTMap[key] = selectorDetection(toAST(css), rules);
              }
              getCssString(isBeautify = false) {
                const compCss = this.componentSortList.map((key) => {
                  return this.cssASTMap[key] ? toCSSString(this.cssASTMap[key], isBeautify) : "";
                }).join("");
                const variablesCss = getColorVariablesCss(this.baseVariables, this.themeColorVariables);
                return `${variablesCss} ${compCss}`;
              }
              getComponentCss(componentKey, specs) {
                const cssList = specs.map((spec) => {
                  const key = `${componentKey}.${spec.title}`;
                  return this.cssASTMap[key] ? toCSSString(this.cssASTMap[key]) : "";
                });
                return cssList.join("");
              }
              getInitCompCss(componentKey, rules) {
                if (this.cssASTMap[componentKey]) {
                  return toCSSString(selectorDetection(this.cssASTMap[componentKey], rules), true);
                }
                return schemaToInitCss(rules);
              }
              getGzipFile() {
                return cssGzip(this.getCssString());
              }
            } exports('default', CssASTStore);

        })
    };
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
