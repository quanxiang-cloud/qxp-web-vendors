System.register([], (function (exports) {
  'use strict';
  return {
    execute: (function () {

      exports('toKeyPathPair', toKeyPathPair);

      var HttpMethods = /* @__PURE__ */ ((HttpMethods2) => {
        HttpMethods2["GET"] = "get";
        HttpMethods2["PUT"] = "put";
        HttpMethods2["POST"] = "post";
        HttpMethods2["DELETE"] = "delete";
        HttpMethods2["OPTIONS"] = "options";
        HttpMethods2["HEAD"] = "head";
        HttpMethods2["PATCH"] = "patch";
        return HttpMethods2;
      })(HttpMethods || {});
      const METHODS = exports('METHODS', Object.values(HttpMethods));

      function indexOperation(spec) {
        const operationMap = {};
        for (const [pathName, pathObj] of Object.entries(spec.paths || {})) {
          if (!pathObj) {
            continue;
          }
          for (const method of METHODS) {
            const operationObject = pathObj[method];
            if (!operationObject) {
              continue;
            }
            operationMap[`${method}:${pathName}`] = operationObject;
          }
        }
        return operationMap;
      }
      function join(...segments) {
        const parts = segments.reduce((parts2, segment) => {
          const fragment = segment.replace(/^\//, "").replace(/\/$/, "");
          if (!fragment) {
            return parts2;
          }
          const fragments = fragment.split("/");
          return parts2.concat(fragments);
        }, []);
        const resultParts = [];
        for (const part of parts) {
          if (part === ".") {
            continue;
          }
          if (part === "..") {
            resultParts.pop();
            continue;
          }
          resultParts.push(part);
        }
        return `/${resultParts.join("/")}`;
      }
      function isPrimaryValue(v) {
        return typeof v === "boolean" || typeof v === "number" || typeof v === "string" || v === null;
      }
      function shouldGoIn(v) {
        return typeof v === "object" && v !== null;
      }
      function _toKeyPathPair(v, pairs, parentPath) {
        if (typeof v !== "object" || v === null) {
          return [];
        }
        Object.entries(v).forEach(([key, value]) => {
          const keyPath = parentPath ? `${parentPath}.${key}` : key;
          if (isPrimaryValue(value)) {
            pairs.push([keyPath, value]);
            return;
          }
          if (!shouldGoIn(v)) {
            return;
          }
          _toKeyPathPair(v[key], pairs, keyPath);
        });
        return pairs;
      }
      function toKeyPathPair(v, prefix) {
        return _toKeyPathPair(v, [], prefix);
      }

      class SwaggerSpecAdapter {
        constructor(spec) {
          this.operationMap = indexOperation(spec);
          this.spec = spec;
        }
        build(apiID, fetchParams) {
          var _a;
          const [method, path] = apiID.split(":");
          const operation = this.operationMap[apiID];
          if (!operation) {
            throw new Error(`can not find operation for path: ${path}, method: ${method}.`);
          }
          let url = join(this.spec.basePath || "", path);
          const queryParams = {};
          const headers = {};
          (_a = operation.parameters) == null ? void 0 : _a.forEach((p) => {
            var _a2, _b, _c;
            if ("$ref" in p) {
              return;
            }
            if (p.in === "path" && ((_a2 = fetchParams == null ? void 0 : fetchParams.params) == null ? void 0 : _a2[p.name])) {
              url = url.replace(`{${p.name}}`, fetchParams.params[p.name]);
            }
            if (p.in === "query" && ((_b = fetchParams == null ? void 0 : fetchParams.params) == null ? void 0 : _b[p.name]) !== void 0) {
              queryParams[p.name] = fetchParams.params[p.name];
            }
            if (p.in === "header" && ((_c = fetchParams == null ? void 0 : fetchParams.params) == null ? void 0 : _c[p.name]) !== void 0) {
              headers[p.name] = fetchParams.params[p.name];
            }
          });
          return { method, url, queryParams, headers, body: fetchParams == null ? void 0 : fetchParams.body };
        }
      } exports('SwaggerSpecAdapter', SwaggerSpecAdapter);

    })
  };
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
