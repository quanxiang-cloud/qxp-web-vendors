System.register(['react', 'react-dom', '@one-for-all/artery-utils', '@one-for-all/utils'], (function (exports) {
  'use strict';
  var useMemo, useCallback, useLayoutEffect, useEffect, useRef, React, useState, createContext, memo, useReducer, useContext, cloneElement, forwardRef, unstable_batchedUpdates, createPortal, ReactDOM, _flat, _insertChildAt, _insertRightSiblingTo, ancestors, patchNode, deleteByID, logger;
  return {
    setters: [function (module) {
      useMemo = module.useMemo;
      useCallback = module.useCallback;
      useLayoutEffect = module.useLayoutEffect;
      useEffect = module.useEffect;
      useRef = module.useRef;
      React = module["default"];
      useState = module.useState;
      createContext = module.createContext;
      memo = module.memo;
      useReducer = module.useReducer;
      useContext = module.useContext;
      cloneElement = module.cloneElement;
      forwardRef = module.forwardRef;
    }, function (module) {
      unstable_batchedUpdates = module.unstable_batchedUpdates;
      createPortal = module.createPortal;
      ReactDOM = module["default"];
    }, function (module) {
      _flat = module._flat;
      _insertChildAt = module._insertChildAt;
      _insertRightSiblingTo = module._insertRightSiblingTo;
      ancestors = module.ancestors;
      patchNode = module.patchNode;
      deleteByID = module.deleteByID;
    }, function (module) {
      logger = module.logger;
    }],
    execute: (function () {

      /**
       * MIT License
       * 
       * Copyright (c) 2014-present, Lee Byron and other contributors.
       * 
       * Permission is hereby granted, free of charge, to any person obtaining a copy
       * of this software and associated documentation files (the "Software"), to deal
       * in the Software without restriction, including without limitation the rights
       * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
       * copies of the Software, and to permit persons to whom the Software is
       * furnished to do so, subject to the following conditions:
       * 
       * The above copyright notice and this permission notice shall be included in all
       * copies or substantial portions of the Software.
       * 
       * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
       * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
       * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
       * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
       * SOFTWARE.
       */
      var DELETE = 'delete';

      // Constants describing the size of trie nodes.
      var SHIFT = 5; // Resulted in best performance after ______?
      var SIZE = 1 << SHIFT;
      var MASK = SIZE - 1;

      // A consistent shared value representing "not set" which equals nothing other
      // than itself, and nothing that could be provided externally.
      var NOT_SET = {};

      // Boolean references, Rough equivalent of `bool &`.
      function MakeRef() {
        return { value: false };
      }

      function SetRef(ref) {
        if (ref) {
          ref.value = true;
        }
      }

      // A function which returns a value representing an "owner" for transient writes
      // to tries. The return value will only ever equal itself, and will not equal
      // the return of any subsequent call of this function.
      function OwnerID() {}

      function ensureSize(iter) {
        if (iter.size === undefined) {
          iter.size = iter.__iterate(returnTrue);
        }
        return iter.size;
      }

      function wrapIndex(iter, index) {
        // This implements "is array index" which the ECMAString spec defines as:
        //
        //     A String property name P is an array index if and only if
        //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
        //     to 2^32âˆ’1.
        //
        // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
        if (typeof index !== 'number') {
          var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32
          if ('' + uint32Index !== index || uint32Index === 4294967295) {
            return NaN;
          }
          index = uint32Index;
        }
        return index < 0 ? ensureSize(iter) + index : index;
      }

      function returnTrue() {
        return true;
      }

      function wholeSlice(begin, end, size) {
        return (
          ((begin === 0 && !isNeg(begin)) ||
            (size !== undefined && begin <= -size)) &&
          (end === undefined || (size !== undefined && end >= size))
        );
      }

      function resolveBegin(begin, size) {
        return resolveIndex(begin, size, 0);
      }

      function resolveEnd(end, size) {
        return resolveIndex(end, size, size);
      }

      function resolveIndex(index, size, defaultIndex) {
        // Sanitize indices using this shorthand for ToInt32(argument)
        // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
        return index === undefined
          ? defaultIndex
          : isNeg(index)
          ? size === Infinity
            ? size
            : Math.max(0, size + index) | 0
          : size === undefined || size === index
          ? index
          : Math.min(size, index) | 0;
      }

      function isNeg(value) {
        // Account for -0 which is negative, but not less than 0.
        return value < 0 || (value === 0 && 1 / value === -Infinity);
      }

      var IS_COLLECTION_SYMBOL = '@@__IMMUTABLE_ITERABLE__@@';

      function isCollection(maybeCollection) {
        return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL]);
      }

      var IS_KEYED_SYMBOL = '@@__IMMUTABLE_KEYED__@@';

      function isKeyed(maybeKeyed) {
        return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL]);
      }

      var IS_INDEXED_SYMBOL = '@@__IMMUTABLE_INDEXED__@@';

      function isIndexed(maybeIndexed) {
        return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL]);
      }

      function isAssociative(maybeAssociative) {
        return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
      }

      var Collection = function Collection(value) {
        return isCollection(value) ? value : Seq(value);
      };

      var KeyedCollection = /*@__PURE__*/(function (Collection) {
        function KeyedCollection(value) {
          return isKeyed(value) ? value : KeyedSeq(value);
        }

        if ( Collection ) KeyedCollection.__proto__ = Collection;
        KeyedCollection.prototype = Object.create( Collection && Collection.prototype );
        KeyedCollection.prototype.constructor = KeyedCollection;

        return KeyedCollection;
      }(Collection));

      var IndexedCollection = /*@__PURE__*/(function (Collection) {
        function IndexedCollection(value) {
          return isIndexed(value) ? value : IndexedSeq(value);
        }

        if ( Collection ) IndexedCollection.__proto__ = Collection;
        IndexedCollection.prototype = Object.create( Collection && Collection.prototype );
        IndexedCollection.prototype.constructor = IndexedCollection;

        return IndexedCollection;
      }(Collection));

      var SetCollection = /*@__PURE__*/(function (Collection) {
        function SetCollection(value) {
          return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);
        }

        if ( Collection ) SetCollection.__proto__ = Collection;
        SetCollection.prototype = Object.create( Collection && Collection.prototype );
        SetCollection.prototype.constructor = SetCollection;

        return SetCollection;
      }(Collection));

      Collection.Keyed = KeyedCollection;
      Collection.Indexed = IndexedCollection;
      Collection.Set = SetCollection;

      var IS_SEQ_SYMBOL = '@@__IMMUTABLE_SEQ__@@';

      function isSeq(maybeSeq) {
        return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL]);
      }

      var IS_RECORD_SYMBOL = '@@__IMMUTABLE_RECORD__@@';

      function isRecord(maybeRecord) {
        return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL]);
      }

      function isImmutable(maybeImmutable) {
        return isCollection(maybeImmutable) || isRecord(maybeImmutable);
      }

      var IS_ORDERED_SYMBOL = '@@__IMMUTABLE_ORDERED__@@';

      function isOrdered(maybeOrdered) {
        return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL]);
      }

      var ITERATE_KEYS = 0;
      var ITERATE_VALUES = 1;
      var ITERATE_ENTRIES = 2;

      var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = '@@iterator';

      var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;

      var Iterator = function Iterator(next) {
        this.next = next;
      };

      Iterator.prototype.toString = function toString () {
        return '[Iterator]';
      };

      Iterator.KEYS = ITERATE_KEYS;
      Iterator.VALUES = ITERATE_VALUES;
      Iterator.ENTRIES = ITERATE_ENTRIES;

      Iterator.prototype.inspect = Iterator.prototype.toSource = function () {
        return this.toString();
      };
      Iterator.prototype[ITERATOR_SYMBOL] = function () {
        return this;
      };

      function iteratorValue(type, k, v, iteratorResult) {
        var value = type === 0 ? k : type === 1 ? v : [k, v];
        iteratorResult
          ? (iteratorResult.value = value)
          : (iteratorResult = {
              value: value,
              done: false,
            });
        return iteratorResult;
      }

      function iteratorDone() {
        return { value: undefined, done: true };
      }

      function hasIterator(maybeIterable) {
        if (Array.isArray(maybeIterable)) {
          // IE11 trick as it does not support `Symbol.iterator`
          return true;
        }

        return !!getIteratorFn(maybeIterable);
      }

      function isIterator(maybeIterator) {
        return maybeIterator && typeof maybeIterator.next === 'function';
      }

      function getIterator(iterable) {
        var iteratorFn = getIteratorFn(iterable);
        return iteratorFn && iteratorFn.call(iterable);
      }

      function getIteratorFn(iterable) {
        var iteratorFn =
          iterable &&
          ((REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
            iterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') {
          return iteratorFn;
        }
      }

      function isEntriesIterable(maybeIterable) {
        var iteratorFn = getIteratorFn(maybeIterable);
        return iteratorFn && iteratorFn === maybeIterable.entries;
      }

      function isKeysIterable(maybeIterable) {
        var iteratorFn = getIteratorFn(maybeIterable);
        return iteratorFn && iteratorFn === maybeIterable.keys;
      }

      var hasOwnProperty = Object.prototype.hasOwnProperty;

      function isArrayLike(value) {
        if (Array.isArray(value) || typeof value === 'string') {
          return true;
        }

        return (
          value &&
          typeof value === 'object' &&
          Number.isInteger(value.length) &&
          value.length >= 0 &&
          (value.length === 0
            ? // Only {length: 0} is considered Array-like.
              Object.keys(value).length === 1
            : // An object is only Array-like if it has a property where the last value
              // in the array-like may be found (which could be undefined).
              value.hasOwnProperty(value.length - 1))
        );
      }

      var Seq = /*@__PURE__*/(function (Collection) {
        function Seq(value) {
          return value === null || value === undefined
            ? emptySequence()
            : isImmutable(value)
            ? value.toSeq()
            : seqFromValue(value);
        }

        if ( Collection ) Seq.__proto__ = Collection;
        Seq.prototype = Object.create( Collection && Collection.prototype );
        Seq.prototype.constructor = Seq;

        Seq.prototype.toSeq = function toSeq () {
          return this;
        };

        Seq.prototype.toString = function toString () {
          return this.__toString('Seq {', '}');
        };

        Seq.prototype.cacheResult = function cacheResult () {
          if (!this._cache && this.__iterateUncached) {
            this._cache = this.entrySeq().toArray();
            this.size = this._cache.length;
          }
          return this;
        };

        // abstract __iterateUncached(fn, reverse)

        Seq.prototype.__iterate = function __iterate (fn, reverse) {
          var cache = this._cache;
          if (cache) {
            var size = cache.length;
            var i = 0;
            while (i !== size) {
              var entry = cache[reverse ? size - ++i : i++];
              if (fn(entry[1], entry[0], this) === false) {
                break;
              }
            }
            return i;
          }
          return this.__iterateUncached(fn, reverse);
        };

        // abstract __iteratorUncached(type, reverse)

        Seq.prototype.__iterator = function __iterator (type, reverse) {
          var cache = this._cache;
          if (cache) {
            var size = cache.length;
            var i = 0;
            return new Iterator(function () {
              if (i === size) {
                return iteratorDone();
              }
              var entry = cache[reverse ? size - ++i : i++];
              return iteratorValue(type, entry[0], entry[1]);
            });
          }
          return this.__iteratorUncached(type, reverse);
        };

        return Seq;
      }(Collection));

      var KeyedSeq = /*@__PURE__*/(function (Seq) {
        function KeyedSeq(value) {
          return value === null || value === undefined
            ? emptySequence().toKeyedSeq()
            : isCollection(value)
            ? isKeyed(value)
              ? value.toSeq()
              : value.fromEntrySeq()
            : isRecord(value)
            ? value.toSeq()
            : keyedSeqFromValue(value);
        }

        if ( Seq ) KeyedSeq.__proto__ = Seq;
        KeyedSeq.prototype = Object.create( Seq && Seq.prototype );
        KeyedSeq.prototype.constructor = KeyedSeq;

        KeyedSeq.prototype.toKeyedSeq = function toKeyedSeq () {
          return this;
        };

        return KeyedSeq;
      }(Seq));

      var IndexedSeq = /*@__PURE__*/(function (Seq) {
        function IndexedSeq(value) {
          return value === null || value === undefined
            ? emptySequence()
            : isCollection(value)
            ? isKeyed(value)
              ? value.entrySeq()
              : value.toIndexedSeq()
            : isRecord(value)
            ? value.toSeq().entrySeq()
            : indexedSeqFromValue(value);
        }

        if ( Seq ) IndexedSeq.__proto__ = Seq;
        IndexedSeq.prototype = Object.create( Seq && Seq.prototype );
        IndexedSeq.prototype.constructor = IndexedSeq;

        IndexedSeq.of = function of (/*...values*/) {
          return IndexedSeq(arguments);
        };

        IndexedSeq.prototype.toIndexedSeq = function toIndexedSeq () {
          return this;
        };

        IndexedSeq.prototype.toString = function toString () {
          return this.__toString('Seq [', ']');
        };

        return IndexedSeq;
      }(Seq));

      var SetSeq = /*@__PURE__*/(function (Seq) {
        function SetSeq(value) {
          return (
            isCollection(value) && !isAssociative(value) ? value : IndexedSeq(value)
          ).toSetSeq();
        }

        if ( Seq ) SetSeq.__proto__ = Seq;
        SetSeq.prototype = Object.create( Seq && Seq.prototype );
        SetSeq.prototype.constructor = SetSeq;

        SetSeq.of = function of (/*...values*/) {
          return SetSeq(arguments);
        };

        SetSeq.prototype.toSetSeq = function toSetSeq () {
          return this;
        };

        return SetSeq;
      }(Seq));

      Seq.isSeq = isSeq;
      Seq.Keyed = KeyedSeq;
      Seq.Set = SetSeq;
      Seq.Indexed = IndexedSeq;

      Seq.prototype[IS_SEQ_SYMBOL] = true;

      // #pragma Root Sequences

      var ArraySeq = /*@__PURE__*/(function (IndexedSeq) {
        function ArraySeq(array) {
          this._array = array;
          this.size = array.length;
        }

        if ( IndexedSeq ) ArraySeq.__proto__ = IndexedSeq;
        ArraySeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );
        ArraySeq.prototype.constructor = ArraySeq;

        ArraySeq.prototype.get = function get (index, notSetValue) {
          return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
        };

        ArraySeq.prototype.__iterate = function __iterate (fn, reverse) {
          var array = this._array;
          var size = array.length;
          var i = 0;
          while (i !== size) {
            var ii = reverse ? size - ++i : i++;
            if (fn(array[ii], ii, this) === false) {
              break;
            }
          }
          return i;
        };

        ArraySeq.prototype.__iterator = function __iterator (type, reverse) {
          var array = this._array;
          var size = array.length;
          var i = 0;
          return new Iterator(function () {
            if (i === size) {
              return iteratorDone();
            }
            var ii = reverse ? size - ++i : i++;
            return iteratorValue(type, ii, array[ii]);
          });
        };

        return ArraySeq;
      }(IndexedSeq));

      var ObjectSeq = /*@__PURE__*/(function (KeyedSeq) {
        function ObjectSeq(object) {
          var keys = Object.keys(object);
          this._object = object;
          this._keys = keys;
          this.size = keys.length;
        }

        if ( KeyedSeq ) ObjectSeq.__proto__ = KeyedSeq;
        ObjectSeq.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );
        ObjectSeq.prototype.constructor = ObjectSeq;

        ObjectSeq.prototype.get = function get (key, notSetValue) {
          if (notSetValue !== undefined && !this.has(key)) {
            return notSetValue;
          }
          return this._object[key];
        };

        ObjectSeq.prototype.has = function has (key) {
          return hasOwnProperty.call(this._object, key);
        };

        ObjectSeq.prototype.__iterate = function __iterate (fn, reverse) {
          var object = this._object;
          var keys = this._keys;
          var size = keys.length;
          var i = 0;
          while (i !== size) {
            var key = keys[reverse ? size - ++i : i++];
            if (fn(object[key], key, this) === false) {
              break;
            }
          }
          return i;
        };

        ObjectSeq.prototype.__iterator = function __iterator (type, reverse) {
          var object = this._object;
          var keys = this._keys;
          var size = keys.length;
          var i = 0;
          return new Iterator(function () {
            if (i === size) {
              return iteratorDone();
            }
            var key = keys[reverse ? size - ++i : i++];
            return iteratorValue(type, key, object[key]);
          });
        };

        return ObjectSeq;
      }(KeyedSeq));
      ObjectSeq.prototype[IS_ORDERED_SYMBOL] = true;

      var CollectionSeq = /*@__PURE__*/(function (IndexedSeq) {
        function CollectionSeq(collection) {
          this._collection = collection;
          this.size = collection.length || collection.size;
        }

        if ( IndexedSeq ) CollectionSeq.__proto__ = IndexedSeq;
        CollectionSeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );
        CollectionSeq.prototype.constructor = CollectionSeq;

        CollectionSeq.prototype.__iterateUncached = function __iterateUncached (fn, reverse) {
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var collection = this._collection;
          var iterator = getIterator(collection);
          var iterations = 0;
          if (isIterator(iterator)) {
            var step;
            while (!(step = iterator.next()).done) {
              if (fn(step.value, iterations++, this) === false) {
                break;
              }
            }
          }
          return iterations;
        };

        CollectionSeq.prototype.__iteratorUncached = function __iteratorUncached (type, reverse) {
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var collection = this._collection;
          var iterator = getIterator(collection);
          if (!isIterator(iterator)) {
            return new Iterator(iteratorDone);
          }
          var iterations = 0;
          return new Iterator(function () {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, iterations++, step.value);
          });
        };

        return CollectionSeq;
      }(IndexedSeq));

      // # pragma Helper functions

      var EMPTY_SEQ;

      function emptySequence() {
        return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
      }

      function keyedSeqFromValue(value) {
        var seq = maybeIndexedSeqFromValue(value);
        if (seq) {
          return seq.fromEntrySeq();
        }
        if (typeof value === 'object') {
          return new ObjectSeq(value);
        }
        throw new TypeError(
          'Expected Array or collection object of [k, v] entries, or keyed object: ' +
            value
        );
      }

      function indexedSeqFromValue(value) {
        var seq = maybeIndexedSeqFromValue(value);
        if (seq) {
          return seq;
        }
        throw new TypeError(
          'Expected Array or collection object of values: ' + value
        );
      }

      function seqFromValue(value) {
        var seq = maybeIndexedSeqFromValue(value);
        if (seq) {
          return isEntriesIterable(value)
            ? seq.fromEntrySeq()
            : isKeysIterable(value)
            ? seq.toSetSeq()
            : seq;
        }
        if (typeof value === 'object') {
          return new ObjectSeq(value);
        }
        throw new TypeError(
          'Expected Array or collection object of values, or keyed object: ' + value
        );
      }

      function maybeIndexedSeqFromValue(value) {
        return isArrayLike(value)
          ? new ArraySeq(value)
          : hasIterator(value)
          ? new CollectionSeq(value)
          : undefined;
      }

      var IS_MAP_SYMBOL = '@@__IMMUTABLE_MAP__@@';

      function isMap(maybeMap) {
        return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL]);
      }

      function isOrderedMap(maybeOrderedMap) {
        return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
      }

      function isValueObject(maybeValue) {
        return Boolean(
          maybeValue &&
            typeof maybeValue.equals === 'function' &&
            typeof maybeValue.hashCode === 'function'
        );
      }

      /**
       * An extension of the "same-value" algorithm as [described for use by ES6 Map
       * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
       *
       * NaN is considered the same as NaN, however -0 and 0 are considered the same
       * value, which is different from the algorithm described by
       * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
       *
       * This is extended further to allow Objects to describe the values they
       * represent, by way of `valueOf` or `equals` (and `hashCode`).
       *
       * Note: because of this extension, the key equality of Immutable.Map and the
       * value equality of Immutable.Set will differ from ES6 Map and Set.
       *
       * ### Defining custom values
       *
       * The easiest way to describe the value an object represents is by implementing
       * `valueOf`. For example, `Date` represents a value by returning a unix
       * timestamp for `valueOf`:
       *
       *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
       *     var date2 = new Date(1234567890000);
       *     date1.valueOf(); // 1234567890000
       *     assert( date1 !== date2 );
       *     assert( Immutable.is( date1, date2 ) );
       *
       * Note: overriding `valueOf` may have other implications if you use this object
       * where JavaScript expects a primitive, such as implicit string coercion.
       *
       * For more complex types, especially collections, implementing `valueOf` may
       * not be performant. An alternative is to implement `equals` and `hashCode`.
       *
       * `equals` takes another object, presumably of similar type, and returns true
       * if it is equal. Equality is symmetrical, so the same result should be
       * returned if this and the argument are flipped.
       *
       *     assert( a.equals(b) === b.equals(a) );
       *
       * `hashCode` returns a 32bit integer number representing the object which will
       * be used to determine how to store the value object in a Map or Set. You must
       * provide both or neither methods, one must not exist without the other.
       *
       * Also, an important relationship between these methods must be upheld: if two
       * values are equal, they *must* return the same hashCode. If the values are not
       * equal, they might have the same hashCode; this is called a hash collision,
       * and while undesirable for performance reasons, it is acceptable.
       *
       *     if (a.equals(b)) {
       *       assert( a.hashCode() === b.hashCode() );
       *     }
       *
       * All Immutable collections are Value Objects: they implement `equals()`
       * and `hashCode()`.
       */
      function is(valueA, valueB) {
        if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
          return true;
        }
        if (!valueA || !valueB) {
          return false;
        }
        if (
          typeof valueA.valueOf === 'function' &&
          typeof valueB.valueOf === 'function'
        ) {
          valueA = valueA.valueOf();
          valueB = valueB.valueOf();
          if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
            return true;
          }
          if (!valueA || !valueB) {
            return false;
          }
        }
        return !!(
          isValueObject(valueA) &&
          isValueObject(valueB) &&
          valueA.equals(valueB)
        );
      }

      var imul =
        typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2
          ? Math.imul
          : function imul(a, b) {
              a |= 0; // int
              b |= 0; // int
              var c = a & 0xffff;
              var d = b & 0xffff;
              // Shift by 0 fixes the sign on the high part.
              return (c * d + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0)) | 0; // int
            };

      // v8 has an optimization for storing 31-bit signed numbers.
      // Values which have either 00 or 11 as the high order bits qualify.
      // This function drops the highest order bit in a signed number, maintaining
      // the sign bit.
      function smi(i32) {
        return ((i32 >>> 1) & 0x40000000) | (i32 & 0xbfffffff);
      }

      var defaultValueOf = Object.prototype.valueOf;

      function hash(o) {
        if (o == null) {
          return hashNullish(o);
        }

        if (typeof o.hashCode === 'function') {
          // Drop any high bits from accidentally long hash codes.
          return smi(o.hashCode(o));
        }

        var v = valueOf(o);

        if (v == null) {
          return hashNullish(v);
        }

        switch (typeof v) {
          case 'boolean':
            // The hash values for built-in constants are a 1 value for each 5-byte
            // shift region expect for the first, which encodes the value. This
            // reduces the odds of a hash collision for these common values.
            return v ? 0x42108421 : 0x42108420;
          case 'number':
            return hashNumber(v);
          case 'string':
            return v.length > STRING_HASH_CACHE_MIN_STRLEN
              ? cachedHashString(v)
              : hashString(v);
          case 'object':
          case 'function':
            return hashJSObj(v);
          case 'symbol':
            return hashSymbol(v);
          default:
            if (typeof v.toString === 'function') {
              return hashString(v.toString());
            }
            throw new Error('Value type ' + typeof v + ' cannot be hashed.');
        }
      }

      function hashNullish(nullish) {
        return nullish === null ? 0x42108422 : /* undefined */ 0x42108423;
      }

      // Compress arbitrarily large numbers into smi hashes.
      function hashNumber(n) {
        if (n !== n || n === Infinity) {
          return 0;
        }
        var hash = n | 0;
        if (hash !== n) {
          hash ^= n * 0xffffffff;
        }
        while (n > 0xffffffff) {
          n /= 0xffffffff;
          hash ^= n;
        }
        return smi(hash);
      }

      function cachedHashString(string) {
        var hashed = stringHashCache[string];
        if (hashed === undefined) {
          hashed = hashString(string);
          if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
            STRING_HASH_CACHE_SIZE = 0;
            stringHashCache = {};
          }
          STRING_HASH_CACHE_SIZE++;
          stringHashCache[string] = hashed;
        }
        return hashed;
      }

      // http://jsperf.com/hashing-strings
      function hashString(string) {
        // This is the hash from JVM
        // The hash code for a string is computed as
        // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
        // where s[i] is the ith character of the string and n is the length of
        // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
        // (exclusive) by dropping high bits.
        var hashed = 0;
        for (var ii = 0; ii < string.length; ii++) {
          hashed = (31 * hashed + string.charCodeAt(ii)) | 0;
        }
        return smi(hashed);
      }

      function hashSymbol(sym) {
        var hashed = symbolMap[sym];
        if (hashed !== undefined) {
          return hashed;
        }

        hashed = nextHash();

        symbolMap[sym] = hashed;

        return hashed;
      }

      function hashJSObj(obj) {
        var hashed;
        if (usingWeakMap) {
          hashed = weakMap.get(obj);
          if (hashed !== undefined) {
            return hashed;
          }
        }

        hashed = obj[UID_HASH_KEY];
        if (hashed !== undefined) {
          return hashed;
        }

        if (!canDefineProperty) {
          hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
          if (hashed !== undefined) {
            return hashed;
          }

          hashed = getIENodeHash(obj);
          if (hashed !== undefined) {
            return hashed;
          }
        }

        hashed = nextHash();

        if (usingWeakMap) {
          weakMap.set(obj, hashed);
        } else if (isExtensible !== undefined && isExtensible(obj) === false) {
          throw new Error('Non-extensible objects are not allowed as keys.');
        } else if (canDefineProperty) {
          Object.defineProperty(obj, UID_HASH_KEY, {
            enumerable: false,
            configurable: false,
            writable: false,
            value: hashed,
          });
        } else if (
          obj.propertyIsEnumerable !== undefined &&
          obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable
        ) {
          // Since we can't define a non-enumerable property on the object
          // we'll hijack one of the less-used non-enumerable properties to
          // save our hash on it. Since this is a function it will not show up in
          // `JSON.stringify` which is what we want.
          obj.propertyIsEnumerable = function () {
            return this.constructor.prototype.propertyIsEnumerable.apply(
              this,
              arguments
            );
          };
          obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;
        } else if (obj.nodeType !== undefined) {
          // At this point we couldn't get the IE `uniqueID` to use as a hash
          // and we couldn't use a non-enumerable property to exploit the
          // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
          // itself.
          obj[UID_HASH_KEY] = hashed;
        } else {
          throw new Error('Unable to set a non-enumerable property on object.');
        }

        return hashed;
      }

      // Get references to ES5 object methods.
      var isExtensible = Object.isExtensible;

      // True if Object.defineProperty works as expected. IE8 fails this test.
      var canDefineProperty = (function () {
        try {
          Object.defineProperty({}, '@', {});
          return true;
        } catch (e) {
          return false;
        }
      })();

      // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
      // and avoid memory leaks from the IE cloneNode bug.
      function getIENodeHash(node) {
        if (node && node.nodeType > 0) {
          switch (node.nodeType) {
            case 1: // Element
              return node.uniqueID;
            case 9: // Document
              return node.documentElement && node.documentElement.uniqueID;
          }
        }
      }

      function valueOf(obj) {
        return obj.valueOf !== defaultValueOf && typeof obj.valueOf === 'function'
          ? obj.valueOf(obj)
          : obj;
      }

      function nextHash() {
        var nextHash = ++_objHashUID;
        if (_objHashUID & 0x40000000) {
          _objHashUID = 0;
        }
        return nextHash;
      }

      // If possible, use a WeakMap.
      var usingWeakMap = typeof WeakMap === 'function';
      var weakMap;
      if (usingWeakMap) {
        weakMap = new WeakMap();
      }

      var symbolMap = Object.create(null);

      var _objHashUID = 0;

      var UID_HASH_KEY = '__immutablehash__';
      if (typeof Symbol === 'function') {
        UID_HASH_KEY = Symbol(UID_HASH_KEY);
      }

      var STRING_HASH_CACHE_MIN_STRLEN = 16;
      var STRING_HASH_CACHE_MAX_SIZE = 255;
      var STRING_HASH_CACHE_SIZE = 0;
      var stringHashCache = {};

      var ToKeyedSequence = /*@__PURE__*/(function (KeyedSeq) {
        function ToKeyedSequence(indexed, useKeys) {
          this._iter = indexed;
          this._useKeys = useKeys;
          this.size = indexed.size;
        }

        if ( KeyedSeq ) ToKeyedSequence.__proto__ = KeyedSeq;
        ToKeyedSequence.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );
        ToKeyedSequence.prototype.constructor = ToKeyedSequence;

        ToKeyedSequence.prototype.get = function get (key, notSetValue) {
          return this._iter.get(key, notSetValue);
        };

        ToKeyedSequence.prototype.has = function has (key) {
          return this._iter.has(key);
        };

        ToKeyedSequence.prototype.valueSeq = function valueSeq () {
          return this._iter.valueSeq();
        };

        ToKeyedSequence.prototype.reverse = function reverse () {
          var this$1$1 = this;

          var reversedSequence = reverseFactory(this, true);
          if (!this._useKeys) {
            reversedSequence.valueSeq = function () { return this$1$1._iter.toSeq().reverse(); };
          }
          return reversedSequence;
        };

        ToKeyedSequence.prototype.map = function map (mapper, context) {
          var this$1$1 = this;

          var mappedSequence = mapFactory(this, mapper, context);
          if (!this._useKeys) {
            mappedSequence.valueSeq = function () { return this$1$1._iter.toSeq().map(mapper, context); };
          }
          return mappedSequence;
        };

        ToKeyedSequence.prototype.__iterate = function __iterate (fn, reverse) {
          var this$1$1 = this;

          return this._iter.__iterate(function (v, k) { return fn(v, k, this$1$1); }, reverse);
        };

        ToKeyedSequence.prototype.__iterator = function __iterator (type, reverse) {
          return this._iter.__iterator(type, reverse);
        };

        return ToKeyedSequence;
      }(KeyedSeq));
      ToKeyedSequence.prototype[IS_ORDERED_SYMBOL] = true;

      var ToIndexedSequence = /*@__PURE__*/(function (IndexedSeq) {
        function ToIndexedSequence(iter) {
          this._iter = iter;
          this.size = iter.size;
        }

        if ( IndexedSeq ) ToIndexedSequence.__proto__ = IndexedSeq;
        ToIndexedSequence.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );
        ToIndexedSequence.prototype.constructor = ToIndexedSequence;

        ToIndexedSequence.prototype.includes = function includes (value) {
          return this._iter.includes(value);
        };

        ToIndexedSequence.prototype.__iterate = function __iterate (fn, reverse) {
          var this$1$1 = this;

          var i = 0;
          reverse && ensureSize(this);
          return this._iter.__iterate(
            function (v) { return fn(v, reverse ? this$1$1.size - ++i : i++, this$1$1); },
            reverse
          );
        };

        ToIndexedSequence.prototype.__iterator = function __iterator (type, reverse) {
          var this$1$1 = this;

          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          var i = 0;
          reverse && ensureSize(this);
          return new Iterator(function () {
            var step = iterator.next();
            return step.done
              ? step
              : iteratorValue(
                  type,
                  reverse ? this$1$1.size - ++i : i++,
                  step.value,
                  step
                );
          });
        };

        return ToIndexedSequence;
      }(IndexedSeq));

      var ToSetSequence = /*@__PURE__*/(function (SetSeq) {
        function ToSetSequence(iter) {
          this._iter = iter;
          this.size = iter.size;
        }

        if ( SetSeq ) ToSetSequence.__proto__ = SetSeq;
        ToSetSequence.prototype = Object.create( SetSeq && SetSeq.prototype );
        ToSetSequence.prototype.constructor = ToSetSequence;

        ToSetSequence.prototype.has = function has (key) {
          return this._iter.includes(key);
        };

        ToSetSequence.prototype.__iterate = function __iterate (fn, reverse) {
          var this$1$1 = this;

          return this._iter.__iterate(function (v) { return fn(v, v, this$1$1); }, reverse);
        };

        ToSetSequence.prototype.__iterator = function __iterator (type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          return new Iterator(function () {
            var step = iterator.next();
            return step.done
              ? step
              : iteratorValue(type, step.value, step.value, step);
          });
        };

        return ToSetSequence;
      }(SetSeq));

      var FromEntriesSequence = /*@__PURE__*/(function (KeyedSeq) {
        function FromEntriesSequence(entries) {
          this._iter = entries;
          this.size = entries.size;
        }

        if ( KeyedSeq ) FromEntriesSequence.__proto__ = KeyedSeq;
        FromEntriesSequence.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );
        FromEntriesSequence.prototype.constructor = FromEntriesSequence;

        FromEntriesSequence.prototype.entrySeq = function entrySeq () {
          return this._iter.toSeq();
        };

        FromEntriesSequence.prototype.__iterate = function __iterate (fn, reverse) {
          var this$1$1 = this;

          return this._iter.__iterate(function (entry) {
            // Check if entry exists first so array access doesn't throw for holes
            // in the parent iteration.
            if (entry) {
              validateEntry(entry);
              var indexedCollection = isCollection(entry);
              return fn(
                indexedCollection ? entry.get(1) : entry[1],
                indexedCollection ? entry.get(0) : entry[0],
                this$1$1
              );
            }
          }, reverse);
        };

        FromEntriesSequence.prototype.__iterator = function __iterator (type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          return new Iterator(function () {
            while (true) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              // Check if entry exists first so array access doesn't throw for holes
              // in the parent iteration.
              if (entry) {
                validateEntry(entry);
                var indexedCollection = isCollection(entry);
                return iteratorValue(
                  type,
                  indexedCollection ? entry.get(0) : entry[0],
                  indexedCollection ? entry.get(1) : entry[1],
                  step
                );
              }
            }
          });
        };

        return FromEntriesSequence;
      }(KeyedSeq));

      ToIndexedSequence.prototype.cacheResult =
        ToKeyedSequence.prototype.cacheResult =
        ToSetSequence.prototype.cacheResult =
        FromEntriesSequence.prototype.cacheResult =
          cacheResultThrough;

      function flipFactory(collection) {
        var flipSequence = makeSequence(collection);
        flipSequence._iter = collection;
        flipSequence.size = collection.size;
        flipSequence.flip = function () { return collection; };
        flipSequence.reverse = function () {
          var reversedSequence = collection.reverse.apply(this); // super.reverse()
          reversedSequence.flip = function () { return collection.reverse(); };
          return reversedSequence;
        };
        flipSequence.has = function (key) { return collection.includes(key); };
        flipSequence.includes = function (key) { return collection.has(key); };
        flipSequence.cacheResult = cacheResultThrough;
        flipSequence.__iterateUncached = function (fn, reverse) {
          var this$1$1 = this;

          return collection.__iterate(function (v, k) { return fn(k, v, this$1$1) !== false; }, reverse);
        };
        flipSequence.__iteratorUncached = function (type, reverse) {
          if (type === ITERATE_ENTRIES) {
            var iterator = collection.__iterator(type, reverse);
            return new Iterator(function () {
              var step = iterator.next();
              if (!step.done) {
                var k = step.value[0];
                step.value[0] = step.value[1];
                step.value[1] = k;
              }
              return step;
            });
          }
          return collection.__iterator(
            type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
            reverse
          );
        };
        return flipSequence;
      }

      function mapFactory(collection, mapper, context) {
        var mappedSequence = makeSequence(collection);
        mappedSequence.size = collection.size;
        mappedSequence.has = function (key) { return collection.has(key); };
        mappedSequence.get = function (key, notSetValue) {
          var v = collection.get(key, NOT_SET);
          return v === NOT_SET
            ? notSetValue
            : mapper.call(context, v, key, collection);
        };
        mappedSequence.__iterateUncached = function (fn, reverse) {
          var this$1$1 = this;

          return collection.__iterate(
            function (v, k, c) { return fn(mapper.call(context, v, k, c), k, this$1$1) !== false; },
            reverse
          );
        };
        mappedSequence.__iteratorUncached = function (type, reverse) {
          var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
          return new Iterator(function () {
            var step = iterator.next();
            if (step.done) {
              return step;
            }
            var entry = step.value;
            var key = entry[0];
            return iteratorValue(
              type,
              key,
              mapper.call(context, entry[1], key, collection),
              step
            );
          });
        };
        return mappedSequence;
      }

      function reverseFactory(collection, useKeys) {
        var this$1$1 = this;

        var reversedSequence = makeSequence(collection);
        reversedSequence._iter = collection;
        reversedSequence.size = collection.size;
        reversedSequence.reverse = function () { return collection; };
        if (collection.flip) {
          reversedSequence.flip = function () {
            var flipSequence = flipFactory(collection);
            flipSequence.reverse = function () { return collection.flip(); };
            return flipSequence;
          };
        }
        reversedSequence.get = function (key, notSetValue) { return collection.get(useKeys ? key : -1 - key, notSetValue); };
        reversedSequence.has = function (key) { return collection.has(useKeys ? key : -1 - key); };
        reversedSequence.includes = function (value) { return collection.includes(value); };
        reversedSequence.cacheResult = cacheResultThrough;
        reversedSequence.__iterate = function (fn, reverse) {
          var this$1$1 = this;

          var i = 0;
          reverse && ensureSize(collection);
          return collection.__iterate(
            function (v, k) { return fn(v, useKeys ? k : reverse ? this$1$1.size - ++i : i++, this$1$1); },
            !reverse
          );
        };
        reversedSequence.__iterator = function (type, reverse) {
          var i = 0;
          reverse && ensureSize(collection);
          var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);
          return new Iterator(function () {
            var step = iterator.next();
            if (step.done) {
              return step;
            }
            var entry = step.value;
            return iteratorValue(
              type,
              useKeys ? entry[0] : reverse ? this$1$1.size - ++i : i++,
              entry[1],
              step
            );
          });
        };
        return reversedSequence;
      }

      function filterFactory(collection, predicate, context, useKeys) {
        var filterSequence = makeSequence(collection);
        if (useKeys) {
          filterSequence.has = function (key) {
            var v = collection.get(key, NOT_SET);
            return v !== NOT_SET && !!predicate.call(context, v, key, collection);
          };
          filterSequence.get = function (key, notSetValue) {
            var v = collection.get(key, NOT_SET);
            return v !== NOT_SET && predicate.call(context, v, key, collection)
              ? v
              : notSetValue;
          };
        }
        filterSequence.__iterateUncached = function (fn, reverse) {
          var this$1$1 = this;

          var iterations = 0;
          collection.__iterate(function (v, k, c) {
            if (predicate.call(context, v, k, c)) {
              iterations++;
              return fn(v, useKeys ? k : iterations - 1, this$1$1);
            }
          }, reverse);
          return iterations;
        };
        filterSequence.__iteratorUncached = function (type, reverse) {
          var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
          var iterations = 0;
          return new Iterator(function () {
            while (true) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              var key = entry[0];
              var value = entry[1];
              if (predicate.call(context, value, key, collection)) {
                return iteratorValue(type, useKeys ? key : iterations++, value, step);
              }
            }
          });
        };
        return filterSequence;
      }

      function countByFactory(collection, grouper, context) {
        var groups = Map$1().asMutable();
        collection.__iterate(function (v, k) {
          groups.update(grouper.call(context, v, k, collection), 0, function (a) { return a + 1; });
        });
        return groups.asImmutable();
      }

      function groupByFactory(collection, grouper, context) {
        var isKeyedIter = isKeyed(collection);
        var groups = (isOrdered(collection) ? OrderedMap() : Map$1()).asMutable();
        collection.__iterate(function (v, k) {
          groups.update(
            grouper.call(context, v, k, collection),
            function (a) { return ((a = a || []), a.push(isKeyedIter ? [k, v] : v), a); }
          );
        });
        var coerce = collectionClass(collection);
        return groups.map(function (arr) { return reify(collection, coerce(arr)); }).asImmutable();
      }

      function sliceFactory(collection, begin, end, useKeys) {
        var originalSize = collection.size;

        if (wholeSlice(begin, end, originalSize)) {
          return collection;
        }

        var resolvedBegin = resolveBegin(begin, originalSize);
        var resolvedEnd = resolveEnd(end, originalSize);

        // begin or end will be NaN if they were provided as negative numbers and
        // this collection's size is unknown. In that case, cache first so there is
        // a known size and these do not resolve to NaN.
        if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
          return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);
        }

        // Note: resolvedEnd is undefined when the original sequence's length is
        // unknown and this slice did not supply an end and should contain all
        // elements after resolvedBegin.
        // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
        var resolvedSize = resolvedEnd - resolvedBegin;
        var sliceSize;
        if (resolvedSize === resolvedSize) {
          sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
        }

        var sliceSeq = makeSequence(collection);

        // If collection.size is undefined, the size of the realized sliceSeq is
        // unknown at this point unless the number of items to slice is 0
        sliceSeq.size =
          sliceSize === 0 ? sliceSize : (collection.size && sliceSize) || undefined;

        if (!useKeys && isSeq(collection) && sliceSize >= 0) {
          sliceSeq.get = function (index, notSetValue) {
            index = wrapIndex(this, index);
            return index >= 0 && index < sliceSize
              ? collection.get(index + resolvedBegin, notSetValue)
              : notSetValue;
          };
        }

        sliceSeq.__iterateUncached = function (fn, reverse) {
          var this$1$1 = this;

          if (sliceSize === 0) {
            return 0;
          }
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var skipped = 0;
          var isSkipping = true;
          var iterations = 0;
          collection.__iterate(function (v, k) {
            if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
              iterations++;
              return (
                fn(v, useKeys ? k : iterations - 1, this$1$1) !== false &&
                iterations !== sliceSize
              );
            }
          });
          return iterations;
        };

        sliceSeq.__iteratorUncached = function (type, reverse) {
          if (sliceSize !== 0 && reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          // Don't bother instantiating parent iterator if taking 0.
          if (sliceSize === 0) {
            return new Iterator(iteratorDone);
          }
          var iterator = collection.__iterator(type, reverse);
          var skipped = 0;
          var iterations = 0;
          return new Iterator(function () {
            while (skipped++ < resolvedBegin) {
              iterator.next();
            }
            if (++iterations > sliceSize) {
              return iteratorDone();
            }
            var step = iterator.next();
            if (useKeys || type === ITERATE_VALUES || step.done) {
              return step;
            }
            if (type === ITERATE_KEYS) {
              return iteratorValue(type, iterations - 1, undefined, step);
            }
            return iteratorValue(type, iterations - 1, step.value[1], step);
          });
        };

        return sliceSeq;
      }

      function takeWhileFactory(collection, predicate, context) {
        var takeSequence = makeSequence(collection);
        takeSequence.__iterateUncached = function (fn, reverse) {
          var this$1$1 = this;

          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterations = 0;
          collection.__iterate(
            function (v, k, c) { return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1$1); }
          );
          return iterations;
        };
        takeSequence.__iteratorUncached = function (type, reverse) {
          var this$1$1 = this;

          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
          var iterating = true;
          return new Iterator(function () {
            if (!iterating) {
              return iteratorDone();
            }
            var step = iterator.next();
            if (step.done) {
              return step;
            }
            var entry = step.value;
            var k = entry[0];
            var v = entry[1];
            if (!predicate.call(context, v, k, this$1$1)) {
              iterating = false;
              return iteratorDone();
            }
            return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
          });
        };
        return takeSequence;
      }

      function skipWhileFactory(collection, predicate, context, useKeys) {
        var skipSequence = makeSequence(collection);
        skipSequence.__iterateUncached = function (fn, reverse) {
          var this$1$1 = this;

          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var isSkipping = true;
          var iterations = 0;
          collection.__iterate(function (v, k, c) {
            if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
              iterations++;
              return fn(v, useKeys ? k : iterations - 1, this$1$1);
            }
          });
          return iterations;
        };
        skipSequence.__iteratorUncached = function (type, reverse) {
          var this$1$1 = this;

          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
          var skipping = true;
          var iterations = 0;
          return new Iterator(function () {
            var step;
            var k;
            var v;
            do {
              step = iterator.next();
              if (step.done) {
                if (useKeys || type === ITERATE_VALUES) {
                  return step;
                }
                if (type === ITERATE_KEYS) {
                  return iteratorValue(type, iterations++, undefined, step);
                }
                return iteratorValue(type, iterations++, step.value[1], step);
              }
              var entry = step.value;
              k = entry[0];
              v = entry[1];
              skipping && (skipping = predicate.call(context, v, k, this$1$1));
            } while (skipping);
            return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
          });
        };
        return skipSequence;
      }

      function concatFactory(collection, values) {
        var isKeyedCollection = isKeyed(collection);
        var iters = [collection]
          .concat(values)
          .map(function (v) {
            if (!isCollection(v)) {
              v = isKeyedCollection
                ? keyedSeqFromValue(v)
                : indexedSeqFromValue(Array.isArray(v) ? v : [v]);
            } else if (isKeyedCollection) {
              v = KeyedCollection(v);
            }
            return v;
          })
          .filter(function (v) { return v.size !== 0; });

        if (iters.length === 0) {
          return collection;
        }

        if (iters.length === 1) {
          var singleton = iters[0];
          if (
            singleton === collection ||
            (isKeyedCollection && isKeyed(singleton)) ||
            (isIndexed(collection) && isIndexed(singleton))
          ) {
            return singleton;
          }
        }

        var concatSeq = new ArraySeq(iters);
        if (isKeyedCollection) {
          concatSeq = concatSeq.toKeyedSeq();
        } else if (!isIndexed(collection)) {
          concatSeq = concatSeq.toSetSeq();
        }
        concatSeq = concatSeq.flatten(true);
        concatSeq.size = iters.reduce(function (sum, seq) {
          if (sum !== undefined) {
            var size = seq.size;
            if (size !== undefined) {
              return sum + size;
            }
          }
        }, 0);
        return concatSeq;
      }

      function flattenFactory(collection, depth, useKeys) {
        var flatSequence = makeSequence(collection);
        flatSequence.__iterateUncached = function (fn, reverse) {
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterations = 0;
          var stopped = false;
          function flatDeep(iter, currentDepth) {
            iter.__iterate(function (v, k) {
              if ((!depth || currentDepth < depth) && isCollection(v)) {
                flatDeep(v, currentDepth + 1);
              } else {
                iterations++;
                if (fn(v, useKeys ? k : iterations - 1, flatSequence) === false) {
                  stopped = true;
                }
              }
              return !stopped;
            }, reverse);
          }
          flatDeep(collection, 0);
          return iterations;
        };
        flatSequence.__iteratorUncached = function (type, reverse) {
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterator = collection.__iterator(type, reverse);
          var stack = [];
          var iterations = 0;
          return new Iterator(function () {
            while (iterator) {
              var step = iterator.next();
              if (step.done !== false) {
                iterator = stack.pop();
                continue;
              }
              var v = step.value;
              if (type === ITERATE_ENTRIES) {
                v = v[1];
              }
              if ((!depth || stack.length < depth) && isCollection(v)) {
                stack.push(iterator);
                iterator = v.__iterator(type, reverse);
              } else {
                return useKeys ? step : iteratorValue(type, iterations++, v, step);
              }
            }
            return iteratorDone();
          });
        };
        return flatSequence;
      }

      function flatMapFactory(collection, mapper, context) {
        var coerce = collectionClass(collection);
        return collection
          .toSeq()
          .map(function (v, k) { return coerce(mapper.call(context, v, k, collection)); })
          .flatten(true);
      }

      function interposeFactory(collection, separator) {
        var interposedSequence = makeSequence(collection);
        interposedSequence.size = collection.size && collection.size * 2 - 1;
        interposedSequence.__iterateUncached = function (fn, reverse) {
          var this$1$1 = this;

          var iterations = 0;
          collection.__iterate(
            function (v) { return (!iterations || fn(separator, iterations++, this$1$1) !== false) &&
              fn(v, iterations++, this$1$1) !== false; },
            reverse
          );
          return iterations;
        };
        interposedSequence.__iteratorUncached = function (type, reverse) {
          var iterator = collection.__iterator(ITERATE_VALUES, reverse);
          var iterations = 0;
          var step;
          return new Iterator(function () {
            if (!step || iterations % 2) {
              step = iterator.next();
              if (step.done) {
                return step;
              }
            }
            return iterations % 2
              ? iteratorValue(type, iterations++, separator)
              : iteratorValue(type, iterations++, step.value, step);
          });
        };
        return interposedSequence;
      }

      function sortFactory(collection, comparator, mapper) {
        if (!comparator) {
          comparator = defaultComparator;
        }
        var isKeyedCollection = isKeyed(collection);
        var index = 0;
        var entries = collection
          .toSeq()
          .map(function (v, k) { return [k, v, index++, mapper ? mapper(v, k, collection) : v]; })
          .valueSeq()
          .toArray();
        entries
          .sort(function (a, b) { return comparator(a[3], b[3]) || a[2] - b[2]; })
          .forEach(
            isKeyedCollection
              ? function (v, i) {
                  entries[i].length = 2;
                }
              : function (v, i) {
                  entries[i] = v[1];
                }
          );
        return isKeyedCollection
          ? KeyedSeq(entries)
          : isIndexed(collection)
          ? IndexedSeq(entries)
          : SetSeq(entries);
      }

      function maxFactory(collection, comparator, mapper) {
        if (!comparator) {
          comparator = defaultComparator;
        }
        if (mapper) {
          var entry = collection
            .toSeq()
            .map(function (v, k) { return [v, mapper(v, k, collection)]; })
            .reduce(function (a, b) { return (maxCompare(comparator, a[1], b[1]) ? b : a); });
          return entry && entry[0];
        }
        return collection.reduce(function (a, b) { return (maxCompare(comparator, a, b) ? b : a); });
      }

      function maxCompare(comparator, a, b) {
        var comp = comparator(b, a);
        // b is considered the new max if the comparator declares them equal, but
        // they are not equal and b is in fact a nullish value.
        return (
          (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) ||
          comp > 0
        );
      }

      function zipWithFactory(keyIter, zipper, iters, zipAll) {
        var zipSequence = makeSequence(keyIter);
        var sizes = new ArraySeq(iters).map(function (i) { return i.size; });
        zipSequence.size = zipAll ? sizes.max() : sizes.min();
        // Note: this a generic base implementation of __iterate in terms of
        // __iterator which may be more generically useful in the future.
        zipSequence.__iterate = function (fn, reverse) {
          /* generic:
          var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
          var step;
          var iterations = 0;
          while (!(step = iterator.next()).done) {
            iterations++;
            if (fn(step.value[1], step.value[0], this) === false) {
              break;
            }
          }
          return iterations;
          */
          // indexed:
          var iterator = this.__iterator(ITERATE_VALUES, reverse);
          var step;
          var iterations = 0;
          while (!(step = iterator.next()).done) {
            if (fn(step.value, iterations++, this) === false) {
              break;
            }
          }
          return iterations;
        };
        zipSequence.__iteratorUncached = function (type, reverse) {
          var iterators = iters.map(
            function (i) { return ((i = Collection(i)), getIterator(reverse ? i.reverse() : i)); }
          );
          var iterations = 0;
          var isDone = false;
          return new Iterator(function () {
            var steps;
            if (!isDone) {
              steps = iterators.map(function (i) { return i.next(); });
              isDone = zipAll ? steps.every(function (s) { return s.done; }) : steps.some(function (s) { return s.done; });
            }
            if (isDone) {
              return iteratorDone();
            }
            return iteratorValue(
              type,
              iterations++,
              zipper.apply(
                null,
                steps.map(function (s) { return s.value; })
              )
            );
          });
        };
        return zipSequence;
      }

      // #pragma Helper Functions

      function reify(iter, seq) {
        return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);
      }

      function validateEntry(entry) {
        if (entry !== Object(entry)) {
          throw new TypeError('Expected [K, V] tuple: ' + entry);
        }
      }

      function collectionClass(collection) {
        return isKeyed(collection)
          ? KeyedCollection
          : isIndexed(collection)
          ? IndexedCollection
          : SetCollection;
      }

      function makeSequence(collection) {
        return Object.create(
          (isKeyed(collection)
            ? KeyedSeq
            : isIndexed(collection)
            ? IndexedSeq
            : SetSeq
          ).prototype
        );
      }

      function cacheResultThrough() {
        if (this._iter.cacheResult) {
          this._iter.cacheResult();
          this.size = this._iter.size;
          return this;
        }
        return Seq.prototype.cacheResult.call(this);
      }

      function defaultComparator(a, b) {
        if (a === undefined && b === undefined) {
          return 0;
        }

        if (a === undefined) {
          return 1;
        }

        if (b === undefined) {
          return -1;
        }

        return a > b ? 1 : a < b ? -1 : 0;
      }

      function arrCopy(arr, offset) {
        offset = offset || 0;
        var len = Math.max(0, arr.length - offset);
        var newArr = new Array(len);
        for (var ii = 0; ii < len; ii++) {
          newArr[ii] = arr[ii + offset];
        }
        return newArr;
      }

      function invariant(condition, error) {
        if (!condition) { throw new Error(error); }
      }

      function assertNotInfinite(size) {
        invariant(
          size !== Infinity,
          'Cannot perform this action with an infinite size.'
        );
      }

      function coerceKeyPath(keyPath) {
        if (isArrayLike(keyPath) && typeof keyPath !== 'string') {
          return keyPath;
        }
        if (isOrdered(keyPath)) {
          return keyPath.toArray();
        }
        throw new TypeError(
          'Invalid keyPath: expected Ordered Collection or Array: ' + keyPath
        );
      }

      var toString = Object.prototype.toString;

      function isPlainObject(value) {
        // The base prototype's toString deals with Argument objects and native namespaces like Math
        if (
          !value ||
          typeof value !== 'object' ||
          toString.call(value) !== '[object Object]'
        ) {
          return false;
        }

        var proto = Object.getPrototypeOf(value);
        if (proto === null) {
          return true;
        }

        // Iteratively going up the prototype chain is needed for cross-realm environments (differing contexts, iframes, etc)
        var parentProto = proto;
        var nextProto = Object.getPrototypeOf(proto);
        while (nextProto !== null) {
          parentProto = nextProto;
          nextProto = Object.getPrototypeOf(parentProto);
        }
        return parentProto === proto;
      }

      /**
       * Returns true if the value is a potentially-persistent data structure, either
       * provided by Immutable.js or a plain Array or Object.
       */
      function isDataStructure(value) {
        return (
          typeof value === 'object' &&
          (isImmutable(value) || Array.isArray(value) || isPlainObject(value))
        );
      }

      function quoteString(value) {
        try {
          return typeof value === 'string' ? JSON.stringify(value) : String(value);
        } catch (_ignoreError) {
          return JSON.stringify(value);
        }
      }

      function has(collection, key) {
        return isImmutable(collection)
          ? collection.has(key)
          : isDataStructure(collection) && hasOwnProperty.call(collection, key);
      }

      function get(collection, key, notSetValue) {
        return isImmutable(collection)
          ? collection.get(key, notSetValue)
          : !has(collection, key)
          ? notSetValue
          : typeof collection.get === 'function'
          ? collection.get(key)
          : collection[key];
      }

      function shallowCopy(from) {
        if (Array.isArray(from)) {
          return arrCopy(from);
        }
        var to = {};
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        return to;
      }

      function remove(collection, key) {
        if (!isDataStructure(collection)) {
          throw new TypeError(
            'Cannot update non-data-structure value: ' + collection
          );
        }
        if (isImmutable(collection)) {
          if (!collection.remove) {
            throw new TypeError(
              'Cannot update immutable value without .remove() method: ' + collection
            );
          }
          return collection.remove(key);
        }
        if (!hasOwnProperty.call(collection, key)) {
          return collection;
        }
        var collectionCopy = shallowCopy(collection);
        if (Array.isArray(collectionCopy)) {
          collectionCopy.splice(key, 1);
        } else {
          delete collectionCopy[key];
        }
        return collectionCopy;
      }

      function set(collection, key, value) {
        if (!isDataStructure(collection)) {
          throw new TypeError(
            'Cannot update non-data-structure value: ' + collection
          );
        }
        if (isImmutable(collection)) {
          if (!collection.set) {
            throw new TypeError(
              'Cannot update immutable value without .set() method: ' + collection
            );
          }
          return collection.set(key, value);
        }
        if (hasOwnProperty.call(collection, key) && value === collection[key]) {
          return collection;
        }
        var collectionCopy = shallowCopy(collection);
        collectionCopy[key] = value;
        return collectionCopy;
      }

      function updateIn$1(collection, keyPath, notSetValue, updater) {
        if (!updater) {
          updater = notSetValue;
          notSetValue = undefined;
        }
        var updatedValue = updateInDeeply(
          isImmutable(collection),
          collection,
          coerceKeyPath(keyPath),
          0,
          notSetValue,
          updater
        );
        return updatedValue === NOT_SET ? notSetValue : updatedValue;
      }

      function updateInDeeply(
        inImmutable,
        existing,
        keyPath,
        i,
        notSetValue,
        updater
      ) {
        var wasNotSet = existing === NOT_SET;
        if (i === keyPath.length) {
          var existingValue = wasNotSet ? notSetValue : existing;
          var newValue = updater(existingValue);
          return newValue === existingValue ? existing : newValue;
        }
        if (!wasNotSet && !isDataStructure(existing)) {
          throw new TypeError(
            'Cannot update within non-data-structure value in path [' +
              keyPath.slice(0, i).map(quoteString) +
              ']: ' +
              existing
          );
        }
        var key = keyPath[i];
        var nextExisting = wasNotSet ? NOT_SET : get(existing, key, NOT_SET);
        var nextUpdated = updateInDeeply(
          nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting),
          nextExisting,
          keyPath,
          i + 1,
          notSetValue,
          updater
        );
        return nextUpdated === nextExisting
          ? existing
          : nextUpdated === NOT_SET
          ? remove(existing, key)
          : set(
              wasNotSet ? (inImmutable ? emptyMap() : {}) : existing,
              key,
              nextUpdated
            );
      }

      function setIn$1(collection, keyPath, value) {
        return updateIn$1(collection, keyPath, NOT_SET, function () { return value; });
      }

      function setIn(keyPath, v) {
        return setIn$1(this, keyPath, v);
      }

      function removeIn(collection, keyPath) {
        return updateIn$1(collection, keyPath, function () { return NOT_SET; });
      }

      function deleteIn(keyPath) {
        return removeIn(this, keyPath);
      }

      function update$1(collection, key, notSetValue, updater) {
        return updateIn$1(collection, [key], notSetValue, updater);
      }

      function update(key, notSetValue, updater) {
        return arguments.length === 1
          ? key(this)
          : update$1(this, key, notSetValue, updater);
      }

      function updateIn(keyPath, notSetValue, updater) {
        return updateIn$1(this, keyPath, notSetValue, updater);
      }

      function merge$1() {
        var iters = [], len = arguments.length;
        while ( len-- ) iters[ len ] = arguments[ len ];

        return mergeIntoKeyedWith(this, iters);
      }

      function mergeWith$1(merger) {
        var iters = [], len = arguments.length - 1;
        while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];

        if (typeof merger !== 'function') {
          throw new TypeError('Invalid merger function: ' + merger);
        }
        return mergeIntoKeyedWith(this, iters, merger);
      }

      function mergeIntoKeyedWith(collection, collections, merger) {
        var iters = [];
        for (var ii = 0; ii < collections.length; ii++) {
          var collection$1 = KeyedCollection(collections[ii]);
          if (collection$1.size !== 0) {
            iters.push(collection$1);
          }
        }
        if (iters.length === 0) {
          return collection;
        }
        if (
          collection.toSeq().size === 0 &&
          !collection.__ownerID &&
          iters.length === 1
        ) {
          return collection.constructor(iters[0]);
        }
        return collection.withMutations(function (collection) {
          var mergeIntoCollection = merger
            ? function (value, key) {
                update$1(collection, key, NOT_SET, function (oldVal) { return oldVal === NOT_SET ? value : merger(oldVal, value, key); }
                );
              }
            : function (value, key) {
                collection.set(key, value);
              };
          for (var ii = 0; ii < iters.length; ii++) {
            iters[ii].forEach(mergeIntoCollection);
          }
        });
      }

      function mergeDeepWithSources(collection, sources, merger) {
        return mergeWithSources(collection, sources, deepMergerWith(merger));
      }

      function mergeWithSources(collection, sources, merger) {
        if (!isDataStructure(collection)) {
          throw new TypeError(
            'Cannot merge into non-data-structure value: ' + collection
          );
        }
        if (isImmutable(collection)) {
          return typeof merger === 'function' && collection.mergeWith
            ? collection.mergeWith.apply(collection, [ merger ].concat( sources ))
            : collection.merge
            ? collection.merge.apply(collection, sources)
            : collection.concat.apply(collection, sources);
        }
        var isArray = Array.isArray(collection);
        var merged = collection;
        var Collection = isArray ? IndexedCollection : KeyedCollection;
        var mergeItem = isArray
          ? function (value) {
              // Copy on write
              if (merged === collection) {
                merged = shallowCopy(merged);
              }
              merged.push(value);
            }
          : function (value, key) {
              var hasVal = hasOwnProperty.call(merged, key);
              var nextVal =
                hasVal && merger ? merger(merged[key], value, key) : value;
              if (!hasVal || nextVal !== merged[key]) {
                // Copy on write
                if (merged === collection) {
                  merged = shallowCopy(merged);
                }
                merged[key] = nextVal;
              }
            };
        for (var i = 0; i < sources.length; i++) {
          Collection(sources[i]).forEach(mergeItem);
        }
        return merged;
      }

      function deepMergerWith(merger) {
        function deepMerger(oldValue, newValue, key) {
          return isDataStructure(oldValue) &&
            isDataStructure(newValue) &&
            areMergeable(oldValue, newValue)
            ? mergeWithSources(oldValue, [newValue], deepMerger)
            : merger
            ? merger(oldValue, newValue, key)
            : newValue;
        }
        return deepMerger;
      }

      /**
       * It's unclear what the desired behavior is for merging two collections that
       * fall into separate categories between keyed, indexed, or set-like, so we only
       * consider them mergeable if they fall into the same category.
       */
      function areMergeable(oldDataStructure, newDataStructure) {
        var oldSeq = Seq(oldDataStructure);
        var newSeq = Seq(newDataStructure);
        // This logic assumes that a sequence can only fall into one of the three
        // categories mentioned above (since there's no `isSetLike()` method).
        return (
          isIndexed(oldSeq) === isIndexed(newSeq) &&
          isKeyed(oldSeq) === isKeyed(newSeq)
        );
      }

      function mergeDeep() {
        var iters = [], len = arguments.length;
        while ( len-- ) iters[ len ] = arguments[ len ];

        return mergeDeepWithSources(this, iters);
      }

      function mergeDeepWith(merger) {
        var iters = [], len = arguments.length - 1;
        while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];

        return mergeDeepWithSources(this, iters, merger);
      }

      function mergeIn(keyPath) {
        var iters = [], len = arguments.length - 1;
        while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];

        return updateIn$1(this, keyPath, emptyMap(), function (m) { return mergeWithSources(m, iters); });
      }

      function mergeDeepIn(keyPath) {
        var iters = [], len = arguments.length - 1;
        while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];

        return updateIn$1(this, keyPath, emptyMap(), function (m) { return mergeDeepWithSources(m, iters); }
        );
      }

      function withMutations(fn) {
        var mutable = this.asMutable();
        fn(mutable);
        return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
      }

      function asMutable() {
        return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
      }

      function asImmutable() {
        return this.__ensureOwner();
      }

      function wasAltered() {
        return this.__altered;
      }

      var Map$1 = /*@__PURE__*/(function (KeyedCollection) {
        function Map(value) {
          return value === null || value === undefined
            ? emptyMap()
            : isMap(value) && !isOrdered(value)
            ? value
            : emptyMap().withMutations(function (map) {
                var iter = KeyedCollection(value);
                assertNotInfinite(iter.size);
                iter.forEach(function (v, k) { return map.set(k, v); });
              });
        }

        if ( KeyedCollection ) Map.__proto__ = KeyedCollection;
        Map.prototype = Object.create( KeyedCollection && KeyedCollection.prototype );
        Map.prototype.constructor = Map;

        Map.of = function of () {
          var keyValues = [], len = arguments.length;
          while ( len-- ) keyValues[ len ] = arguments[ len ];

          return emptyMap().withMutations(function (map) {
            for (var i = 0; i < keyValues.length; i += 2) {
              if (i + 1 >= keyValues.length) {
                throw new Error('Missing value for key: ' + keyValues[i]);
              }
              map.set(keyValues[i], keyValues[i + 1]);
            }
          });
        };

        Map.prototype.toString = function toString () {
          return this.__toString('Map {', '}');
        };

        // @pragma Access

        Map.prototype.get = function get (k, notSetValue) {
          return this._root
            ? this._root.get(0, undefined, k, notSetValue)
            : notSetValue;
        };

        // @pragma Modification

        Map.prototype.set = function set (k, v) {
          return updateMap(this, k, v);
        };

        Map.prototype.remove = function remove (k) {
          return updateMap(this, k, NOT_SET);
        };

        Map.prototype.deleteAll = function deleteAll (keys) {
          var collection = Collection(keys);

          if (collection.size === 0) {
            return this;
          }

          return this.withMutations(function (map) {
            collection.forEach(function (key) { return map.remove(key); });
          });
        };

        Map.prototype.clear = function clear () {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._root = null;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return emptyMap();
        };

        // @pragma Composition

        Map.prototype.sort = function sort (comparator) {
          // Late binding
          return OrderedMap(sortFactory(this, comparator));
        };

        Map.prototype.sortBy = function sortBy (mapper, comparator) {
          // Late binding
          return OrderedMap(sortFactory(this, comparator, mapper));
        };

        Map.prototype.map = function map (mapper, context) {
          var this$1$1 = this;

          return this.withMutations(function (map) {
            map.forEach(function (value, key) {
              map.set(key, mapper.call(context, value, key, this$1$1));
            });
          });
        };

        // @pragma Mutability

        Map.prototype.__iterator = function __iterator (type, reverse) {
          return new MapIterator(this, type, reverse);
        };

        Map.prototype.__iterate = function __iterate (fn, reverse) {
          var this$1$1 = this;

          var iterations = 0;
          this._root &&
            this._root.iterate(function (entry) {
              iterations++;
              return fn(entry[1], entry[0], this$1$1);
            }, reverse);
          return iterations;
        };

        Map.prototype.__ensureOwner = function __ensureOwner (ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            if (this.size === 0) {
              return emptyMap();
            }
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeMap(this.size, this._root, ownerID, this.__hash);
        };

        return Map;
      }(KeyedCollection));

      Map$1.isMap = isMap;

      var MapPrototype = Map$1.prototype;
      MapPrototype[IS_MAP_SYMBOL] = true;
      MapPrototype[DELETE] = MapPrototype.remove;
      MapPrototype.removeAll = MapPrototype.deleteAll;
      MapPrototype.setIn = setIn;
      MapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;
      MapPrototype.update = update;
      MapPrototype.updateIn = updateIn;
      MapPrototype.merge = MapPrototype.concat = merge$1;
      MapPrototype.mergeWith = mergeWith$1;
      MapPrototype.mergeDeep = mergeDeep;
      MapPrototype.mergeDeepWith = mergeDeepWith;
      MapPrototype.mergeIn = mergeIn;
      MapPrototype.mergeDeepIn = mergeDeepIn;
      MapPrototype.withMutations = withMutations;
      MapPrototype.wasAltered = wasAltered;
      MapPrototype.asImmutable = asImmutable;
      MapPrototype['@@transducer/init'] = MapPrototype.asMutable = asMutable;
      MapPrototype['@@transducer/step'] = function (result, arr) {
        return result.set(arr[0], arr[1]);
      };
      MapPrototype['@@transducer/result'] = function (obj) {
        return obj.asImmutable();
      };

      // #pragma Trie Nodes

      var ArrayMapNode = function ArrayMapNode(ownerID, entries) {
        this.ownerID = ownerID;
        this.entries = entries;
      };

      ArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {
        var entries = this.entries;
        for (var ii = 0, len = entries.length; ii < len; ii++) {
          if (is(key, entries[ii][0])) {
            return entries[ii][1];
          }
        }
        return notSetValue;
      };

      ArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        var removed = value === NOT_SET;

        var entries = this.entries;
        var idx = 0;
        var len = entries.length;
        for (; idx < len; idx++) {
          if (is(key, entries[idx][0])) {
            break;
          }
        }
        var exists = idx < len;

        if (exists ? entries[idx][1] === value : removed) {
          return this;
        }

        SetRef(didAlter);
        (removed || !exists) && SetRef(didChangeSize);

        if (removed && entries.length === 1) {
          return; // undefined
        }

        if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
          return createNodes(ownerID, entries, key, value);
        }

        var isEditable = ownerID && ownerID === this.ownerID;
        var newEntries = isEditable ? entries : arrCopy(entries);

        if (exists) {
          if (removed) {
            idx === len - 1
              ? newEntries.pop()
              : (newEntries[idx] = newEntries.pop());
          } else {
            newEntries[idx] = [key, value];
          }
        } else {
          newEntries.push([key, value]);
        }

        if (isEditable) {
          this.entries = newEntries;
          return this;
        }

        return new ArrayMapNode(ownerID, newEntries);
      };

      var BitmapIndexedNode = function BitmapIndexedNode(ownerID, bitmap, nodes) {
        this.ownerID = ownerID;
        this.bitmap = bitmap;
        this.nodes = nodes;
      };

      BitmapIndexedNode.prototype.get = function get (shift, keyHash, key, notSetValue) {
        if (keyHash === undefined) {
          keyHash = hash(key);
        }
        var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
        var bitmap = this.bitmap;
        return (bitmap & bit) === 0
          ? notSetValue
          : this.nodes[popCount(bitmap & (bit - 1))].get(
              shift + SHIFT,
              keyHash,
              key,
              notSetValue
            );
      };

      BitmapIndexedNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        if (keyHash === undefined) {
          keyHash = hash(key);
        }
        var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
        var bit = 1 << keyHashFrag;
        var bitmap = this.bitmap;
        var exists = (bitmap & bit) !== 0;

        if (!exists && value === NOT_SET) {
          return this;
        }

        var idx = popCount(bitmap & (bit - 1));
        var nodes = this.nodes;
        var node = exists ? nodes[idx] : undefined;
        var newNode = updateNode(
          node,
          ownerID,
          shift + SHIFT,
          keyHash,
          key,
          value,
          didChangeSize,
          didAlter
        );

        if (newNode === node) {
          return this;
        }

        if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
          return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
        }

        if (
          exists &&
          !newNode &&
          nodes.length === 2 &&
          isLeafNode(nodes[idx ^ 1])
        ) {
          return nodes[idx ^ 1];
        }

        if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
          return newNode;
        }

        var isEditable = ownerID && ownerID === this.ownerID;
        var newBitmap = exists ? (newNode ? bitmap : bitmap ^ bit) : bitmap | bit;
        var newNodes = exists
          ? newNode
            ? setAt(nodes, idx, newNode, isEditable)
            : spliceOut(nodes, idx, isEditable)
          : spliceIn(nodes, idx, newNode, isEditable);

        if (isEditable) {
          this.bitmap = newBitmap;
          this.nodes = newNodes;
          return this;
        }

        return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
      };

      var HashArrayMapNode = function HashArrayMapNode(ownerID, count, nodes) {
        this.ownerID = ownerID;
        this.count = count;
        this.nodes = nodes;
      };

      HashArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {
        if (keyHash === undefined) {
          keyHash = hash(key);
        }
        var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
        var node = this.nodes[idx];
        return node
          ? node.get(shift + SHIFT, keyHash, key, notSetValue)
          : notSetValue;
      };

      HashArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        if (keyHash === undefined) {
          keyHash = hash(key);
        }
        var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
        var removed = value === NOT_SET;
        var nodes = this.nodes;
        var node = nodes[idx];

        if (removed && !node) {
          return this;
        }

        var newNode = updateNode(
          node,
          ownerID,
          shift + SHIFT,
          keyHash,
          key,
          value,
          didChangeSize,
          didAlter
        );
        if (newNode === node) {
          return this;
        }

        var newCount = this.count;
        if (!node) {
          newCount++;
        } else if (!newNode) {
          newCount--;
          if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
            return packNodes(ownerID, nodes, newCount, idx);
          }
        }

        var isEditable = ownerID && ownerID === this.ownerID;
        var newNodes = setAt(nodes, idx, newNode, isEditable);

        if (isEditable) {
          this.count = newCount;
          this.nodes = newNodes;
          return this;
        }

        return new HashArrayMapNode(ownerID, newCount, newNodes);
      };

      var HashCollisionNode = function HashCollisionNode(ownerID, keyHash, entries) {
        this.ownerID = ownerID;
        this.keyHash = keyHash;
        this.entries = entries;
      };

      HashCollisionNode.prototype.get = function get (shift, keyHash, key, notSetValue) {
        var entries = this.entries;
        for (var ii = 0, len = entries.length; ii < len; ii++) {
          if (is(key, entries[ii][0])) {
            return entries[ii][1];
          }
        }
        return notSetValue;
      };

      HashCollisionNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        if (keyHash === undefined) {
          keyHash = hash(key);
        }

        var removed = value === NOT_SET;

        if (keyHash !== this.keyHash) {
          if (removed) {
            return this;
          }
          SetRef(didAlter);
          SetRef(didChangeSize);
          return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
        }

        var entries = this.entries;
        var idx = 0;
        var len = entries.length;
        for (; idx < len; idx++) {
          if (is(key, entries[idx][0])) {
            break;
          }
        }
        var exists = idx < len;

        if (exists ? entries[idx][1] === value : removed) {
          return this;
        }

        SetRef(didAlter);
        (removed || !exists) && SetRef(didChangeSize);

        if (removed && len === 2) {
          return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
        }

        var isEditable = ownerID && ownerID === this.ownerID;
        var newEntries = isEditable ? entries : arrCopy(entries);

        if (exists) {
          if (removed) {
            idx === len - 1
              ? newEntries.pop()
              : (newEntries[idx] = newEntries.pop());
          } else {
            newEntries[idx] = [key, value];
          }
        } else {
          newEntries.push([key, value]);
        }

        if (isEditable) {
          this.entries = newEntries;
          return this;
        }

        return new HashCollisionNode(ownerID, this.keyHash, newEntries);
      };

      var ValueNode = function ValueNode(ownerID, keyHash, entry) {
        this.ownerID = ownerID;
        this.keyHash = keyHash;
        this.entry = entry;
      };

      ValueNode.prototype.get = function get (shift, keyHash, key, notSetValue) {
        return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
      };

      ValueNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        var removed = value === NOT_SET;
        var keyMatch = is(key, this.entry[0]);
        if (keyMatch ? value === this.entry[1] : removed) {
          return this;
        }

        SetRef(didAlter);

        if (removed) {
          SetRef(didChangeSize);
          return; // undefined
        }

        if (keyMatch) {
          if (ownerID && ownerID === this.ownerID) {
            this.entry[1] = value;
            return this;
          }
          return new ValueNode(ownerID, this.keyHash, [key, value]);
        }

        SetRef(didChangeSize);
        return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
      };

      // #pragma Iterators

      ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate =
        function (fn, reverse) {
          var entries = this.entries;
          for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
            if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
              return false;
            }
          }
        };

      BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate =
        function (fn, reverse) {
          var nodes = this.nodes;
          for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
            var node = nodes[reverse ? maxIndex - ii : ii];
            if (node && node.iterate(fn, reverse) === false) {
              return false;
            }
          }
        };

      // eslint-disable-next-line no-unused-vars
      ValueNode.prototype.iterate = function (fn, reverse) {
        return fn(this.entry);
      };

      var MapIterator = /*@__PURE__*/(function (Iterator) {
        function MapIterator(map, type, reverse) {
          this._type = type;
          this._reverse = reverse;
          this._stack = map._root && mapIteratorFrame(map._root);
        }

        if ( Iterator ) MapIterator.__proto__ = Iterator;
        MapIterator.prototype = Object.create( Iterator && Iterator.prototype );
        MapIterator.prototype.constructor = MapIterator;

        MapIterator.prototype.next = function next () {
          var type = this._type;
          var stack = this._stack;
          while (stack) {
            var node = stack.node;
            var index = stack.index++;
            var maxIndex = (void 0);
            if (node.entry) {
              if (index === 0) {
                return mapIteratorValue(type, node.entry);
              }
            } else if (node.entries) {
              maxIndex = node.entries.length - 1;
              if (index <= maxIndex) {
                return mapIteratorValue(
                  type,
                  node.entries[this._reverse ? maxIndex - index : index]
                );
              }
            } else {
              maxIndex = node.nodes.length - 1;
              if (index <= maxIndex) {
                var subNode = node.nodes[this._reverse ? maxIndex - index : index];
                if (subNode) {
                  if (subNode.entry) {
                    return mapIteratorValue(type, subNode.entry);
                  }
                  stack = this._stack = mapIteratorFrame(subNode, stack);
                }
                continue;
              }
            }
            stack = this._stack = this._stack.__prev;
          }
          return iteratorDone();
        };

        return MapIterator;
      }(Iterator));

      function mapIteratorValue(type, entry) {
        return iteratorValue(type, entry[0], entry[1]);
      }

      function mapIteratorFrame(node, prev) {
        return {
          node: node,
          index: 0,
          __prev: prev,
        };
      }

      function makeMap(size, root, ownerID, hash) {
        var map = Object.create(MapPrototype);
        map.size = size;
        map._root = root;
        map.__ownerID = ownerID;
        map.__hash = hash;
        map.__altered = false;
        return map;
      }

      var EMPTY_MAP;
      function emptyMap() {
        return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
      }

      function updateMap(map, k, v) {
        var newRoot;
        var newSize;
        if (!map._root) {
          if (v === NOT_SET) {
            return map;
          }
          newSize = 1;
          newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
        } else {
          var didChangeSize = MakeRef();
          var didAlter = MakeRef();
          newRoot = updateNode(
            map._root,
            map.__ownerID,
            0,
            undefined,
            k,
            v,
            didChangeSize,
            didAlter
          );
          if (!didAlter.value) {
            return map;
          }
          newSize = map.size + (didChangeSize.value ? (v === NOT_SET ? -1 : 1) : 0);
        }
        if (map.__ownerID) {
          map.size = newSize;
          map._root = newRoot;
          map.__hash = undefined;
          map.__altered = true;
          return map;
        }
        return newRoot ? makeMap(newSize, newRoot) : emptyMap();
      }

      function updateNode(
        node,
        ownerID,
        shift,
        keyHash,
        key,
        value,
        didChangeSize,
        didAlter
      ) {
        if (!node) {
          if (value === NOT_SET) {
            return node;
          }
          SetRef(didAlter);
          SetRef(didChangeSize);
          return new ValueNode(ownerID, keyHash, [key, value]);
        }
        return node.update(
          ownerID,
          shift,
          keyHash,
          key,
          value,
          didChangeSize,
          didAlter
        );
      }

      function isLeafNode(node) {
        return (
          node.constructor === ValueNode || node.constructor === HashCollisionNode
        );
      }

      function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
        if (node.keyHash === keyHash) {
          return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
        }

        var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
        var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

        var newNode;
        var nodes =
          idx1 === idx2
            ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)]
            : ((newNode = new ValueNode(ownerID, keyHash, entry)),
              idx1 < idx2 ? [node, newNode] : [newNode, node]);

        return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);
      }

      function createNodes(ownerID, entries, key, value) {
        if (!ownerID) {
          ownerID = new OwnerID();
        }
        var node = new ValueNode(ownerID, hash(key), [key, value]);
        for (var ii = 0; ii < entries.length; ii++) {
          var entry = entries[ii];
          node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
        }
        return node;
      }

      function packNodes(ownerID, nodes, count, excluding) {
        var bitmap = 0;
        var packedII = 0;
        var packedNodes = new Array(count);
        for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
          var node = nodes[ii];
          if (node !== undefined && ii !== excluding) {
            bitmap |= bit;
            packedNodes[packedII++] = node;
          }
        }
        return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
      }

      function expandNodes(ownerID, nodes, bitmap, including, node) {
        var count = 0;
        var expandedNodes = new Array(SIZE);
        for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
          expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
        }
        expandedNodes[including] = node;
        return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
      }

      function popCount(x) {
        x -= (x >> 1) & 0x55555555;
        x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
        x = (x + (x >> 4)) & 0x0f0f0f0f;
        x += x >> 8;
        x += x >> 16;
        return x & 0x7f;
      }

      function setAt(array, idx, val, canEdit) {
        var newArray = canEdit ? array : arrCopy(array);
        newArray[idx] = val;
        return newArray;
      }

      function spliceIn(array, idx, val, canEdit) {
        var newLen = array.length + 1;
        if (canEdit && idx + 1 === newLen) {
          array[idx] = val;
          return array;
        }
        var newArray = new Array(newLen);
        var after = 0;
        for (var ii = 0; ii < newLen; ii++) {
          if (ii === idx) {
            newArray[ii] = val;
            after = -1;
          } else {
            newArray[ii] = array[ii + after];
          }
        }
        return newArray;
      }

      function spliceOut(array, idx, canEdit) {
        var newLen = array.length - 1;
        if (canEdit && idx === newLen) {
          array.pop();
          return array;
        }
        var newArray = new Array(newLen);
        var after = 0;
        for (var ii = 0; ii < newLen; ii++) {
          if (ii === idx) {
            after = 1;
          }
          newArray[ii] = array[ii + after];
        }
        return newArray;
      }

      var MAX_ARRAY_MAP_SIZE = SIZE / 4;
      var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
      var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

      var IS_LIST_SYMBOL = '@@__IMMUTABLE_LIST__@@';

      function isList(maybeList) {
        return Boolean(maybeList && maybeList[IS_LIST_SYMBOL]);
      }

      var List = /*@__PURE__*/(function (IndexedCollection) {
        function List(value) {
          var empty = emptyList();
          if (value === null || value === undefined) {
            return empty;
          }
          if (isList(value)) {
            return value;
          }
          var iter = IndexedCollection(value);
          var size = iter.size;
          if (size === 0) {
            return empty;
          }
          assertNotInfinite(size);
          if (size > 0 && size < SIZE) {
            return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
          }
          return empty.withMutations(function (list) {
            list.setSize(size);
            iter.forEach(function (v, i) { return list.set(i, v); });
          });
        }

        if ( IndexedCollection ) List.__proto__ = IndexedCollection;
        List.prototype = Object.create( IndexedCollection && IndexedCollection.prototype );
        List.prototype.constructor = List;

        List.of = function of (/*...values*/) {
          return this(arguments);
        };

        List.prototype.toString = function toString () {
          return this.__toString('List [', ']');
        };

        // @pragma Access

        List.prototype.get = function get (index, notSetValue) {
          index = wrapIndex(this, index);
          if (index >= 0 && index < this.size) {
            index += this._origin;
            var node = listNodeFor(this, index);
            return node && node.array[index & MASK];
          }
          return notSetValue;
        };

        // @pragma Modification

        List.prototype.set = function set (index, value) {
          return updateList(this, index, value);
        };

        List.prototype.remove = function remove (index) {
          return !this.has(index)
            ? this
            : index === 0
            ? this.shift()
            : index === this.size - 1
            ? this.pop()
            : this.splice(index, 1);
        };

        List.prototype.insert = function insert (index, value) {
          return this.splice(index, 0, value);
        };

        List.prototype.clear = function clear () {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = this._origin = this._capacity = 0;
            this._level = SHIFT;
            this._root = this._tail = this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return emptyList();
        };

        List.prototype.push = function push (/*...values*/) {
          var values = arguments;
          var oldSize = this.size;
          return this.withMutations(function (list) {
            setListBounds(list, 0, oldSize + values.length);
            for (var ii = 0; ii < values.length; ii++) {
              list.set(oldSize + ii, values[ii]);
            }
          });
        };

        List.prototype.pop = function pop () {
          return setListBounds(this, 0, -1);
        };

        List.prototype.unshift = function unshift (/*...values*/) {
          var values = arguments;
          return this.withMutations(function (list) {
            setListBounds(list, -values.length);
            for (var ii = 0; ii < values.length; ii++) {
              list.set(ii, values[ii]);
            }
          });
        };

        List.prototype.shift = function shift () {
          return setListBounds(this, 1);
        };

        // @pragma Composition

        List.prototype.concat = function concat (/*...collections*/) {
          var arguments$1 = arguments;

          var seqs = [];
          for (var i = 0; i < arguments.length; i++) {
            var argument = arguments$1[i];
            var seq = IndexedCollection(
              typeof argument !== 'string' && hasIterator(argument)
                ? argument
                : [argument]
            );
            if (seq.size !== 0) {
              seqs.push(seq);
            }
          }
          if (seqs.length === 0) {
            return this;
          }
          if (this.size === 0 && !this.__ownerID && seqs.length === 1) {
            return this.constructor(seqs[0]);
          }
          return this.withMutations(function (list) {
            seqs.forEach(function (seq) { return seq.forEach(function (value) { return list.push(value); }); });
          });
        };

        List.prototype.setSize = function setSize (size) {
          return setListBounds(this, 0, size);
        };

        List.prototype.map = function map (mapper, context) {
          var this$1$1 = this;

          return this.withMutations(function (list) {
            for (var i = 0; i < this$1$1.size; i++) {
              list.set(i, mapper.call(context, list.get(i), i, this$1$1));
            }
          });
        };

        // @pragma Iteration

        List.prototype.slice = function slice (begin, end) {
          var size = this.size;
          if (wholeSlice(begin, end, size)) {
            return this;
          }
          return setListBounds(
            this,
            resolveBegin(begin, size),
            resolveEnd(end, size)
          );
        };

        List.prototype.__iterator = function __iterator (type, reverse) {
          var index = reverse ? this.size : 0;
          var values = iterateList(this, reverse);
          return new Iterator(function () {
            var value = values();
            return value === DONE
              ? iteratorDone()
              : iteratorValue(type, reverse ? --index : index++, value);
          });
        };

        List.prototype.__iterate = function __iterate (fn, reverse) {
          var index = reverse ? this.size : 0;
          var values = iterateList(this, reverse);
          var value;
          while ((value = values()) !== DONE) {
            if (fn(value, reverse ? --index : index++, this) === false) {
              break;
            }
          }
          return index;
        };

        List.prototype.__ensureOwner = function __ensureOwner (ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            if (this.size === 0) {
              return emptyList();
            }
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeList(
            this._origin,
            this._capacity,
            this._level,
            this._root,
            this._tail,
            ownerID,
            this.__hash
          );
        };

        return List;
      }(IndexedCollection));

      List.isList = isList;

      var ListPrototype = List.prototype;
      ListPrototype[IS_LIST_SYMBOL] = true;
      ListPrototype[DELETE] = ListPrototype.remove;
      ListPrototype.merge = ListPrototype.concat;
      ListPrototype.setIn = setIn;
      ListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;
      ListPrototype.update = update;
      ListPrototype.updateIn = updateIn;
      ListPrototype.mergeIn = mergeIn;
      ListPrototype.mergeDeepIn = mergeDeepIn;
      ListPrototype.withMutations = withMutations;
      ListPrototype.wasAltered = wasAltered;
      ListPrototype.asImmutable = asImmutable;
      ListPrototype['@@transducer/init'] = ListPrototype.asMutable = asMutable;
      ListPrototype['@@transducer/step'] = function (result, arr) {
        return result.push(arr);
      };
      ListPrototype['@@transducer/result'] = function (obj) {
        return obj.asImmutable();
      };

      var VNode = function VNode(array, ownerID) {
        this.array = array;
        this.ownerID = ownerID;
      };

      // TODO: seems like these methods are very similar

      VNode.prototype.removeBefore = function removeBefore (ownerID, level, index) {
        if (index === level ? 1 << level : this.array.length === 0) {
          return this;
        }
        var originIndex = (index >>> level) & MASK;
        if (originIndex >= this.array.length) {
          return new VNode([], ownerID);
        }
        var removingFirst = originIndex === 0;
        var newChild;
        if (level > 0) {
          var oldChild = this.array[originIndex];
          newChild =
            oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
          if (newChild === oldChild && removingFirst) {
            return this;
          }
        }
        if (removingFirst && !newChild) {
          return this;
        }
        var editable = editableVNode(this, ownerID);
        if (!removingFirst) {
          for (var ii = 0; ii < originIndex; ii++) {
            editable.array[ii] = undefined;
          }
        }
        if (newChild) {
          editable.array[originIndex] = newChild;
        }
        return editable;
      };

      VNode.prototype.removeAfter = function removeAfter (ownerID, level, index) {
        if (index === (level ? 1 << level : 0) || this.array.length === 0) {
          return this;
        }
        var sizeIndex = ((index - 1) >>> level) & MASK;
        if (sizeIndex >= this.array.length) {
          return this;
        }

        var newChild;
        if (level > 0) {
          var oldChild = this.array[sizeIndex];
          newChild =
            oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
          if (newChild === oldChild && sizeIndex === this.array.length - 1) {
            return this;
          }
        }

        var editable = editableVNode(this, ownerID);
        editable.array.splice(sizeIndex + 1);
        if (newChild) {
          editable.array[sizeIndex] = newChild;
        }
        return editable;
      };

      var DONE = {};

      function iterateList(list, reverse) {
        var left = list._origin;
        var right = list._capacity;
        var tailPos = getTailOffset(right);
        var tail = list._tail;

        return iterateNodeOrLeaf(list._root, list._level, 0);

        function iterateNodeOrLeaf(node, level, offset) {
          return level === 0
            ? iterateLeaf(node, offset)
            : iterateNode(node, level, offset);
        }

        function iterateLeaf(node, offset) {
          var array = offset === tailPos ? tail && tail.array : node && node.array;
          var from = offset > left ? 0 : left - offset;
          var to = right - offset;
          if (to > SIZE) {
            to = SIZE;
          }
          return function () {
            if (from === to) {
              return DONE;
            }
            var idx = reverse ? --to : from++;
            return array && array[idx];
          };
        }

        function iterateNode(node, level, offset) {
          var values;
          var array = node && node.array;
          var from = offset > left ? 0 : (left - offset) >> level;
          var to = ((right - offset) >> level) + 1;
          if (to > SIZE) {
            to = SIZE;
          }
          return function () {
            while (true) {
              if (values) {
                var value = values();
                if (value !== DONE) {
                  return value;
                }
                values = null;
              }
              if (from === to) {
                return DONE;
              }
              var idx = reverse ? --to : from++;
              values = iterateNodeOrLeaf(
                array && array[idx],
                level - SHIFT,
                offset + (idx << level)
              );
            }
          };
        }
      }

      function makeList(origin, capacity, level, root, tail, ownerID, hash) {
        var list = Object.create(ListPrototype);
        list.size = capacity - origin;
        list._origin = origin;
        list._capacity = capacity;
        list._level = level;
        list._root = root;
        list._tail = tail;
        list.__ownerID = ownerID;
        list.__hash = hash;
        list.__altered = false;
        return list;
      }

      var EMPTY_LIST;
      function emptyList() {
        return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
      }

      function updateList(list, index, value) {
        index = wrapIndex(list, index);

        if (index !== index) {
          return list;
        }

        if (index >= list.size || index < 0) {
          return list.withMutations(function (list) {
            index < 0
              ? setListBounds(list, index).set(0, value)
              : setListBounds(list, 0, index + 1).set(index, value);
          });
        }

        index += list._origin;

        var newTail = list._tail;
        var newRoot = list._root;
        var didAlter = MakeRef();
        if (index >= getTailOffset(list._capacity)) {
          newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
        } else {
          newRoot = updateVNode(
            newRoot,
            list.__ownerID,
            list._level,
            index,
            value,
            didAlter
          );
        }

        if (!didAlter.value) {
          return list;
        }

        if (list.__ownerID) {
          list._root = newRoot;
          list._tail = newTail;
          list.__hash = undefined;
          list.__altered = true;
          return list;
        }
        return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
      }

      function updateVNode(node, ownerID, level, index, value, didAlter) {
        var idx = (index >>> level) & MASK;
        var nodeHas = node && idx < node.array.length;
        if (!nodeHas && value === undefined) {
          return node;
        }

        var newNode;

        if (level > 0) {
          var lowerNode = node && node.array[idx];
          var newLowerNode = updateVNode(
            lowerNode,
            ownerID,
            level - SHIFT,
            index,
            value,
            didAlter
          );
          if (newLowerNode === lowerNode) {
            return node;
          }
          newNode = editableVNode(node, ownerID);
          newNode.array[idx] = newLowerNode;
          return newNode;
        }

        if (nodeHas && node.array[idx] === value) {
          return node;
        }

        if (didAlter) {
          SetRef(didAlter);
        }

        newNode = editableVNode(node, ownerID);
        if (value === undefined && idx === newNode.array.length - 1) {
          newNode.array.pop();
        } else {
          newNode.array[idx] = value;
        }
        return newNode;
      }

      function editableVNode(node, ownerID) {
        if (ownerID && node && ownerID === node.ownerID) {
          return node;
        }
        return new VNode(node ? node.array.slice() : [], ownerID);
      }

      function listNodeFor(list, rawIndex) {
        if (rawIndex >= getTailOffset(list._capacity)) {
          return list._tail;
        }
        if (rawIndex < 1 << (list._level + SHIFT)) {
          var node = list._root;
          var level = list._level;
          while (node && level > 0) {
            node = node.array[(rawIndex >>> level) & MASK];
            level -= SHIFT;
          }
          return node;
        }
      }

      function setListBounds(list, begin, end) {
        // Sanitize begin & end using this shorthand for ToInt32(argument)
        // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
        if (begin !== undefined) {
          begin |= 0;
        }
        if (end !== undefined) {
          end |= 0;
        }
        var owner = list.__ownerID || new OwnerID();
        var oldOrigin = list._origin;
        var oldCapacity = list._capacity;
        var newOrigin = oldOrigin + begin;
        var newCapacity =
          end === undefined
            ? oldCapacity
            : end < 0
            ? oldCapacity + end
            : oldOrigin + end;
        if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
          return list;
        }

        // If it's going to end after it starts, it's empty.
        if (newOrigin >= newCapacity) {
          return list.clear();
        }

        var newLevel = list._level;
        var newRoot = list._root;

        // New origin might need creating a higher root.
        var offsetShift = 0;
        while (newOrigin + offsetShift < 0) {
          newRoot = new VNode(
            newRoot && newRoot.array.length ? [undefined, newRoot] : [],
            owner
          );
          newLevel += SHIFT;
          offsetShift += 1 << newLevel;
        }
        if (offsetShift) {
          newOrigin += offsetShift;
          oldOrigin += offsetShift;
          newCapacity += offsetShift;
          oldCapacity += offsetShift;
        }

        var oldTailOffset = getTailOffset(oldCapacity);
        var newTailOffset = getTailOffset(newCapacity);

        // New size might need creating a higher root.
        while (newTailOffset >= 1 << (newLevel + SHIFT)) {
          newRoot = new VNode(
            newRoot && newRoot.array.length ? [newRoot] : [],
            owner
          );
          newLevel += SHIFT;
        }

        // Locate or create the new tail.
        var oldTail = list._tail;
        var newTail =
          newTailOffset < oldTailOffset
            ? listNodeFor(list, newCapacity - 1)
            : newTailOffset > oldTailOffset
            ? new VNode([], owner)
            : oldTail;

        // Merge Tail into tree.
        if (
          oldTail &&
          newTailOffset > oldTailOffset &&
          newOrigin < oldCapacity &&
          oldTail.array.length
        ) {
          newRoot = editableVNode(newRoot, owner);
          var node = newRoot;
          for (var level = newLevel; level > SHIFT; level -= SHIFT) {
            var idx = (oldTailOffset >>> level) & MASK;
            node = node.array[idx] = editableVNode(node.array[idx], owner);
          }
          node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
        }

        // If the size has been reduced, there's a chance the tail needs to be trimmed.
        if (newCapacity < oldCapacity) {
          newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
        }

        // If the new origin is within the tail, then we do not need a root.
        if (newOrigin >= newTailOffset) {
          newOrigin -= newTailOffset;
          newCapacity -= newTailOffset;
          newLevel = SHIFT;
          newRoot = null;
          newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);

          // Otherwise, if the root has been trimmed, garbage collect.
        } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
          offsetShift = 0;

          // Identify the new top root node of the subtree of the old root.
          while (newRoot) {
            var beginIndex = (newOrigin >>> newLevel) & MASK;
            if ((beginIndex !== newTailOffset >>> newLevel) & MASK) {
              break;
            }
            if (beginIndex) {
              offsetShift += (1 << newLevel) * beginIndex;
            }
            newLevel -= SHIFT;
            newRoot = newRoot.array[beginIndex];
          }

          // Trim the new sides of the new root.
          if (newRoot && newOrigin > oldOrigin) {
            newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
          }
          if (newRoot && newTailOffset < oldTailOffset) {
            newRoot = newRoot.removeAfter(
              owner,
              newLevel,
              newTailOffset - offsetShift
            );
          }
          if (offsetShift) {
            newOrigin -= offsetShift;
            newCapacity -= offsetShift;
          }
        }

        if (list.__ownerID) {
          list.size = newCapacity - newOrigin;
          list._origin = newOrigin;
          list._capacity = newCapacity;
          list._level = newLevel;
          list._root = newRoot;
          list._tail = newTail;
          list.__hash = undefined;
          list.__altered = true;
          return list;
        }
        return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
      }

      function getTailOffset(size) {
        return size < SIZE ? 0 : ((size - 1) >>> SHIFT) << SHIFT;
      }

      var OrderedMap = /*@__PURE__*/(function (Map) {
        function OrderedMap(value) {
          return value === null || value === undefined
            ? emptyOrderedMap()
            : isOrderedMap(value)
            ? value
            : emptyOrderedMap().withMutations(function (map) {
                var iter = KeyedCollection(value);
                assertNotInfinite(iter.size);
                iter.forEach(function (v, k) { return map.set(k, v); });
              });
        }

        if ( Map ) OrderedMap.__proto__ = Map;
        OrderedMap.prototype = Object.create( Map && Map.prototype );
        OrderedMap.prototype.constructor = OrderedMap;

        OrderedMap.of = function of (/*...values*/) {
          return this(arguments);
        };

        OrderedMap.prototype.toString = function toString () {
          return this.__toString('OrderedMap {', '}');
        };

        // @pragma Access

        OrderedMap.prototype.get = function get (k, notSetValue) {
          var index = this._map.get(k);
          return index !== undefined ? this._list.get(index)[1] : notSetValue;
        };

        // @pragma Modification

        OrderedMap.prototype.clear = function clear () {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._map.clear();
            this._list.clear();
            this.__altered = true;
            return this;
          }
          return emptyOrderedMap();
        };

        OrderedMap.prototype.set = function set (k, v) {
          return updateOrderedMap(this, k, v);
        };

        OrderedMap.prototype.remove = function remove (k) {
          return updateOrderedMap(this, k, NOT_SET);
        };

        OrderedMap.prototype.__iterate = function __iterate (fn, reverse) {
          var this$1$1 = this;

          return this._list.__iterate(
            function (entry) { return entry && fn(entry[1], entry[0], this$1$1); },
            reverse
          );
        };

        OrderedMap.prototype.__iterator = function __iterator (type, reverse) {
          return this._list.fromEntrySeq().__iterator(type, reverse);
        };

        OrderedMap.prototype.__ensureOwner = function __ensureOwner (ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map.__ensureOwner(ownerID);
          var newList = this._list.__ensureOwner(ownerID);
          if (!ownerID) {
            if (this.size === 0) {
              return emptyOrderedMap();
            }
            this.__ownerID = ownerID;
            this.__altered = false;
            this._map = newMap;
            this._list = newList;
            return this;
          }
          return makeOrderedMap(newMap, newList, ownerID, this.__hash);
        };

        return OrderedMap;
      }(Map$1));

      OrderedMap.isOrderedMap = isOrderedMap;

      OrderedMap.prototype[IS_ORDERED_SYMBOL] = true;
      OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;

      function makeOrderedMap(map, list, ownerID, hash) {
        var omap = Object.create(OrderedMap.prototype);
        omap.size = map ? map.size : 0;
        omap._map = map;
        omap._list = list;
        omap.__ownerID = ownerID;
        omap.__hash = hash;
        omap.__altered = false;
        return omap;
      }

      var EMPTY_ORDERED_MAP;
      function emptyOrderedMap() {
        return (
          EMPTY_ORDERED_MAP ||
          (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()))
        );
      }

      function updateOrderedMap(omap, k, v) {
        var map = omap._map;
        var list = omap._list;
        var i = map.get(k);
        var has = i !== undefined;
        var newMap;
        var newList;
        if (v === NOT_SET) {
          // removed
          if (!has) {
            return omap;
          }
          if (list.size >= SIZE && list.size >= map.size * 2) {
            newList = list.filter(function (entry, idx) { return entry !== undefined && i !== idx; });
            newMap = newList
              .toKeyedSeq()
              .map(function (entry) { return entry[0]; })
              .flip()
              .toMap();
            if (omap.__ownerID) {
              newMap.__ownerID = newList.__ownerID = omap.__ownerID;
            }
          } else {
            newMap = map.remove(k);
            newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
          }
        } else if (has) {
          if (v === list.get(i)[1]) {
            return omap;
          }
          newMap = map;
          newList = list.set(i, [k, v]);
        } else {
          newMap = map.set(k, list.size);
          newList = list.set(list.size, [k, v]);
        }
        if (omap.__ownerID) {
          omap.size = newMap.size;
          omap._map = newMap;
          omap._list = newList;
          omap.__hash = undefined;
          omap.__altered = true;
          return omap;
        }
        return makeOrderedMap(newMap, newList);
      }

      var IS_STACK_SYMBOL = '@@__IMMUTABLE_STACK__@@';

      function isStack(maybeStack) {
        return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL]);
      }

      var Stack = /*@__PURE__*/(function (IndexedCollection) {
        function Stack(value) {
          return value === null || value === undefined
            ? emptyStack()
            : isStack(value)
            ? value
            : emptyStack().pushAll(value);
        }

        if ( IndexedCollection ) Stack.__proto__ = IndexedCollection;
        Stack.prototype = Object.create( IndexedCollection && IndexedCollection.prototype );
        Stack.prototype.constructor = Stack;

        Stack.of = function of (/*...values*/) {
          return this(arguments);
        };

        Stack.prototype.toString = function toString () {
          return this.__toString('Stack [', ']');
        };

        // @pragma Access

        Stack.prototype.get = function get (index, notSetValue) {
          var head = this._head;
          index = wrapIndex(this, index);
          while (head && index--) {
            head = head.next;
          }
          return head ? head.value : notSetValue;
        };

        Stack.prototype.peek = function peek () {
          return this._head && this._head.value;
        };

        // @pragma Modification

        Stack.prototype.push = function push (/*...values*/) {
          var arguments$1 = arguments;

          if (arguments.length === 0) {
            return this;
          }
          var newSize = this.size + arguments.length;
          var head = this._head;
          for (var ii = arguments.length - 1; ii >= 0; ii--) {
            head = {
              value: arguments$1[ii],
              next: head,
            };
          }
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };

        Stack.prototype.pushAll = function pushAll (iter) {
          iter = IndexedCollection(iter);
          if (iter.size === 0) {
            return this;
          }
          if (this.size === 0 && isStack(iter)) {
            return iter;
          }
          assertNotInfinite(iter.size);
          var newSize = this.size;
          var head = this._head;
          iter.__iterate(function (value) {
            newSize++;
            head = {
              value: value,
              next: head,
            };
          }, /* reverse */ true);
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };

        Stack.prototype.pop = function pop () {
          return this.slice(1);
        };

        Stack.prototype.clear = function clear () {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._head = undefined;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return emptyStack();
        };

        Stack.prototype.slice = function slice (begin, end) {
          if (wholeSlice(begin, end, this.size)) {
            return this;
          }
          var resolvedBegin = resolveBegin(begin, this.size);
          var resolvedEnd = resolveEnd(end, this.size);
          if (resolvedEnd !== this.size) {
            // super.slice(begin, end);
            return IndexedCollection.prototype.slice.call(this, begin, end);
          }
          var newSize = this.size - resolvedBegin;
          var head = this._head;
          while (resolvedBegin--) {
            head = head.next;
          }
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };

        // @pragma Mutability

        Stack.prototype.__ensureOwner = function __ensureOwner (ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            if (this.size === 0) {
              return emptyStack();
            }
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeStack(this.size, this._head, ownerID, this.__hash);
        };

        // @pragma Iteration

        Stack.prototype.__iterate = function __iterate (fn, reverse) {
          var this$1$1 = this;

          if (reverse) {
            return new ArraySeq(this.toArray()).__iterate(
              function (v, k) { return fn(v, k, this$1$1); },
              reverse
            );
          }
          var iterations = 0;
          var node = this._head;
          while (node) {
            if (fn(node.value, iterations++, this) === false) {
              break;
            }
            node = node.next;
          }
          return iterations;
        };

        Stack.prototype.__iterator = function __iterator (type, reverse) {
          if (reverse) {
            return new ArraySeq(this.toArray()).__iterator(type, reverse);
          }
          var iterations = 0;
          var node = this._head;
          return new Iterator(function () {
            if (node) {
              var value = node.value;
              node = node.next;
              return iteratorValue(type, iterations++, value);
            }
            return iteratorDone();
          });
        };

        return Stack;
      }(IndexedCollection));

      Stack.isStack = isStack;

      var StackPrototype = Stack.prototype;
      StackPrototype[IS_STACK_SYMBOL] = true;
      StackPrototype.shift = StackPrototype.pop;
      StackPrototype.unshift = StackPrototype.push;
      StackPrototype.unshiftAll = StackPrototype.pushAll;
      StackPrototype.withMutations = withMutations;
      StackPrototype.wasAltered = wasAltered;
      StackPrototype.asImmutable = asImmutable;
      StackPrototype['@@transducer/init'] = StackPrototype.asMutable = asMutable;
      StackPrototype['@@transducer/step'] = function (result, arr) {
        return result.unshift(arr);
      };
      StackPrototype['@@transducer/result'] = function (obj) {
        return obj.asImmutable();
      };

      function makeStack(size, head, ownerID, hash) {
        var map = Object.create(StackPrototype);
        map.size = size;
        map._head = head;
        map.__ownerID = ownerID;
        map.__hash = hash;
        map.__altered = false;
        return map;
      }

      var EMPTY_STACK;
      function emptyStack() {
        return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
      }

      var IS_SET_SYMBOL = '@@__IMMUTABLE_SET__@@';

      function isSet(maybeSet) {
        return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL]);
      }

      function isOrderedSet(maybeOrderedSet) {
        return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
      }

      function deepEqual(a, b) {
        if (a === b) {
          return true;
        }

        if (
          !isCollection(b) ||
          (a.size !== undefined && b.size !== undefined && a.size !== b.size) ||
          (a.__hash !== undefined &&
            b.__hash !== undefined &&
            a.__hash !== b.__hash) ||
          isKeyed(a) !== isKeyed(b) ||
          isIndexed(a) !== isIndexed(b) ||
          isOrdered(a) !== isOrdered(b)
        ) {
          return false;
        }

        if (a.size === 0 && b.size === 0) {
          return true;
        }

        var notAssociative = !isAssociative(a);

        if (isOrdered(a)) {
          var entries = a.entries();
          return (
            b.every(function (v, k) {
              var entry = entries.next().value;
              return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
            }) && entries.next().done
          );
        }

        var flipped = false;

        if (a.size === undefined) {
          if (b.size === undefined) {
            if (typeof a.cacheResult === 'function') {
              a.cacheResult();
            }
          } else {
            flipped = true;
            var _ = a;
            a = b;
            b = _;
          }
        }

        var allEqual = true;
        var bSize = b.__iterate(function (v, k) {
          if (
            notAssociative
              ? !a.has(v)
              : flipped
              ? !is(v, a.get(k, NOT_SET))
              : !is(a.get(k, NOT_SET), v)
          ) {
            allEqual = false;
            return false;
          }
        });

        return allEqual && a.size === bSize;
      }

      function mixin(ctor, methods) {
        var keyCopier = function (key) {
          ctor.prototype[key] = methods[key];
        };
        Object.keys(methods).forEach(keyCopier);
        Object.getOwnPropertySymbols &&
          Object.getOwnPropertySymbols(methods).forEach(keyCopier);
        return ctor;
      }

      function toJS(value) {
        if (!value || typeof value !== 'object') {
          return value;
        }
        if (!isCollection(value)) {
          if (!isDataStructure(value)) {
            return value;
          }
          value = Seq(value);
        }
        if (isKeyed(value)) {
          var result$1 = {};
          value.__iterate(function (v, k) {
            result$1[k] = toJS(v);
          });
          return result$1;
        }
        var result = [];
        value.__iterate(function (v) {
          result.push(toJS(v));
        });
        return result;
      }

      var Set$1 = /*@__PURE__*/(function (SetCollection) {
        function Set(value) {
          return value === null || value === undefined
            ? emptySet()
            : isSet(value) && !isOrdered(value)
            ? value
            : emptySet().withMutations(function (set) {
                var iter = SetCollection(value);
                assertNotInfinite(iter.size);
                iter.forEach(function (v) { return set.add(v); });
              });
        }

        if ( SetCollection ) Set.__proto__ = SetCollection;
        Set.prototype = Object.create( SetCollection && SetCollection.prototype );
        Set.prototype.constructor = Set;

        Set.of = function of (/*...values*/) {
          return this(arguments);
        };

        Set.fromKeys = function fromKeys (value) {
          return this(KeyedCollection(value).keySeq());
        };

        Set.intersect = function intersect (sets) {
          sets = Collection(sets).toArray();
          return sets.length
            ? SetPrototype.intersect.apply(Set(sets.pop()), sets)
            : emptySet();
        };

        Set.union = function union (sets) {
          sets = Collection(sets).toArray();
          return sets.length
            ? SetPrototype.union.apply(Set(sets.pop()), sets)
            : emptySet();
        };

        Set.prototype.toString = function toString () {
          return this.__toString('Set {', '}');
        };

        // @pragma Access

        Set.prototype.has = function has (value) {
          return this._map.has(value);
        };

        // @pragma Modification

        Set.prototype.add = function add (value) {
          return updateSet(this, this._map.set(value, value));
        };

        Set.prototype.remove = function remove (value) {
          return updateSet(this, this._map.remove(value));
        };

        Set.prototype.clear = function clear () {
          return updateSet(this, this._map.clear());
        };

        // @pragma Composition

        Set.prototype.map = function map (mapper, context) {
          var this$1$1 = this;

          // keep track if the set is altered by the map function
          var didChanges = false;

          var newMap = updateSet(
            this,
            this._map.mapEntries(function (ref) {
              var v = ref[1];

              var mapped = mapper.call(context, v, v, this$1$1);

              if (mapped !== v) {
                didChanges = true;
              }

              return [mapped, mapped];
            }, context)
          );

          return didChanges ? newMap : this;
        };

        Set.prototype.union = function union () {
          var iters = [], len = arguments.length;
          while ( len-- ) iters[ len ] = arguments[ len ];

          iters = iters.filter(function (x) { return x.size !== 0; });
          if (iters.length === 0) {
            return this;
          }
          if (this.size === 0 && !this.__ownerID && iters.length === 1) {
            return this.constructor(iters[0]);
          }
          return this.withMutations(function (set) {
            for (var ii = 0; ii < iters.length; ii++) {
              SetCollection(iters[ii]).forEach(function (value) { return set.add(value); });
            }
          });
        };

        Set.prototype.intersect = function intersect () {
          var iters = [], len = arguments.length;
          while ( len-- ) iters[ len ] = arguments[ len ];

          if (iters.length === 0) {
            return this;
          }
          iters = iters.map(function (iter) { return SetCollection(iter); });
          var toRemove = [];
          this.forEach(function (value) {
            if (!iters.every(function (iter) { return iter.includes(value); })) {
              toRemove.push(value);
            }
          });
          return this.withMutations(function (set) {
            toRemove.forEach(function (value) {
              set.remove(value);
            });
          });
        };

        Set.prototype.subtract = function subtract () {
          var iters = [], len = arguments.length;
          while ( len-- ) iters[ len ] = arguments[ len ];

          if (iters.length === 0) {
            return this;
          }
          iters = iters.map(function (iter) { return SetCollection(iter); });
          var toRemove = [];
          this.forEach(function (value) {
            if (iters.some(function (iter) { return iter.includes(value); })) {
              toRemove.push(value);
            }
          });
          return this.withMutations(function (set) {
            toRemove.forEach(function (value) {
              set.remove(value);
            });
          });
        };

        Set.prototype.sort = function sort (comparator) {
          // Late binding
          return OrderedSet(sortFactory(this, comparator));
        };

        Set.prototype.sortBy = function sortBy (mapper, comparator) {
          // Late binding
          return OrderedSet(sortFactory(this, comparator, mapper));
        };

        Set.prototype.wasAltered = function wasAltered () {
          return this._map.wasAltered();
        };

        Set.prototype.__iterate = function __iterate (fn, reverse) {
          var this$1$1 = this;

          return this._map.__iterate(function (k) { return fn(k, k, this$1$1); }, reverse);
        };

        Set.prototype.__iterator = function __iterator (type, reverse) {
          return this._map.__iterator(type, reverse);
        };

        Set.prototype.__ensureOwner = function __ensureOwner (ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map.__ensureOwner(ownerID);
          if (!ownerID) {
            if (this.size === 0) {
              return this.__empty();
            }
            this.__ownerID = ownerID;
            this._map = newMap;
            return this;
          }
          return this.__make(newMap, ownerID);
        };

        return Set;
      }(SetCollection));

      Set$1.isSet = isSet;

      var SetPrototype = Set$1.prototype;
      SetPrototype[IS_SET_SYMBOL] = true;
      SetPrototype[DELETE] = SetPrototype.remove;
      SetPrototype.merge = SetPrototype.concat = SetPrototype.union;
      SetPrototype.withMutations = withMutations;
      SetPrototype.asImmutable = asImmutable;
      SetPrototype['@@transducer/init'] = SetPrototype.asMutable = asMutable;
      SetPrototype['@@transducer/step'] = function (result, arr) {
        return result.add(arr);
      };
      SetPrototype['@@transducer/result'] = function (obj) {
        return obj.asImmutable();
      };

      SetPrototype.__empty = emptySet;
      SetPrototype.__make = makeSet;

      function updateSet(set, newMap) {
        if (set.__ownerID) {
          set.size = newMap.size;
          set._map = newMap;
          return set;
        }
        return newMap === set._map
          ? set
          : newMap.size === 0
          ? set.__empty()
          : set.__make(newMap);
      }

      function makeSet(map, ownerID) {
        var set = Object.create(SetPrototype);
        set.size = map ? map.size : 0;
        set._map = map;
        set.__ownerID = ownerID;
        return set;
      }

      var EMPTY_SET;
      function emptySet() {
        return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
      }

      /**
       * Returns a lazy seq of nums from start (inclusive) to end
       * (exclusive), by step, where start defaults to 0, step to 1, and end to
       * infinity. When start is equal to end, returns empty list.
       */
      var Range = /*@__PURE__*/(function (IndexedSeq) {
        function Range(start, end, step) {
          if (!(this instanceof Range)) {
            return new Range(start, end, step);
          }
          invariant(step !== 0, 'Cannot step a Range by 0');
          start = start || 0;
          if (end === undefined) {
            end = Infinity;
          }
          step = step === undefined ? 1 : Math.abs(step);
          if (end < start) {
            step = -step;
          }
          this._start = start;
          this._end = end;
          this._step = step;
          this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
          if (this.size === 0) {
            if (EMPTY_RANGE) {
              return EMPTY_RANGE;
            }
            EMPTY_RANGE = this;
          }
        }

        if ( IndexedSeq ) Range.__proto__ = IndexedSeq;
        Range.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );
        Range.prototype.constructor = Range;

        Range.prototype.toString = function toString () {
          if (this.size === 0) {
            return 'Range []';
          }
          return (
            'Range [ ' +
            this._start +
            '...' +
            this._end +
            (this._step !== 1 ? ' by ' + this._step : '') +
            ' ]'
          );
        };

        Range.prototype.get = function get (index, notSetValue) {
          return this.has(index)
            ? this._start + wrapIndex(this, index) * this._step
            : notSetValue;
        };

        Range.prototype.includes = function includes (searchValue) {
          var possibleIndex = (searchValue - this._start) / this._step;
          return (
            possibleIndex >= 0 &&
            possibleIndex < this.size &&
            possibleIndex === Math.floor(possibleIndex)
          );
        };

        Range.prototype.slice = function slice (begin, end) {
          if (wholeSlice(begin, end, this.size)) {
            return this;
          }
          begin = resolveBegin(begin, this.size);
          end = resolveEnd(end, this.size);
          if (end <= begin) {
            return new Range(0, 0);
          }
          return new Range(
            this.get(begin, this._end),
            this.get(end, this._end),
            this._step
          );
        };

        Range.prototype.indexOf = function indexOf (searchValue) {
          var offsetValue = searchValue - this._start;
          if (offsetValue % this._step === 0) {
            var index = offsetValue / this._step;
            if (index >= 0 && index < this.size) {
              return index;
            }
          }
          return -1;
        };

        Range.prototype.lastIndexOf = function lastIndexOf (searchValue) {
          return this.indexOf(searchValue);
        };

        Range.prototype.__iterate = function __iterate (fn, reverse) {
          var size = this.size;
          var step = this._step;
          var value = reverse ? this._start + (size - 1) * step : this._start;
          var i = 0;
          while (i !== size) {
            if (fn(value, reverse ? size - ++i : i++, this) === false) {
              break;
            }
            value += reverse ? -step : step;
          }
          return i;
        };

        Range.prototype.__iterator = function __iterator (type, reverse) {
          var size = this.size;
          var step = this._step;
          var value = reverse ? this._start + (size - 1) * step : this._start;
          var i = 0;
          return new Iterator(function () {
            if (i === size) {
              return iteratorDone();
            }
            var v = value;
            value += reverse ? -step : step;
            return iteratorValue(type, reverse ? size - ++i : i++, v);
          });
        };

        Range.prototype.equals = function equals (other) {
          return other instanceof Range
            ? this._start === other._start &&
                this._end === other._end &&
                this._step === other._step
            : deepEqual(this, other);
        };

        return Range;
      }(IndexedSeq));

      var EMPTY_RANGE;

      function getIn$1(collection, searchKeyPath, notSetValue) {
        var keyPath = coerceKeyPath(searchKeyPath);
        var i = 0;
        while (i !== keyPath.length) {
          collection = get(collection, keyPath[i++], NOT_SET);
          if (collection === NOT_SET) {
            return notSetValue;
          }
        }
        return collection;
      }

      function getIn(searchKeyPath, notSetValue) {
        return getIn$1(this, searchKeyPath, notSetValue);
      }

      function hasIn$1(collection, keyPath) {
        return getIn$1(collection, keyPath, NOT_SET) !== NOT_SET;
      }

      function hasIn(searchKeyPath) {
        return hasIn$1(this, searchKeyPath);
      }

      function toObject() {
        assertNotInfinite(this.size);
        var object = {};
        this.__iterate(function (v, k) {
          object[k] = v;
        });
        return object;
      }

      // Note: all of these methods are deprecated.
      Collection.isIterable = isCollection;
      Collection.isKeyed = isKeyed;
      Collection.isIndexed = isIndexed;
      Collection.isAssociative = isAssociative;
      Collection.isOrdered = isOrdered;

      Collection.Iterator = Iterator;

      mixin(Collection, {
        // ### Conversion to other types

        toArray: function toArray() {
          assertNotInfinite(this.size);
          var array = new Array(this.size || 0);
          var useTuples = isKeyed(this);
          var i = 0;
          this.__iterate(function (v, k) {
            // Keyed collections produce an array of tuples.
            array[i++] = useTuples ? [k, v] : v;
          });
          return array;
        },

        toIndexedSeq: function toIndexedSeq() {
          return new ToIndexedSequence(this);
        },

        toJS: function toJS$1() {
          return toJS(this);
        },

        toKeyedSeq: function toKeyedSeq() {
          return new ToKeyedSequence(this, true);
        },

        toMap: function toMap() {
          // Use Late Binding here to solve the circular dependency.
          return Map$1(this.toKeyedSeq());
        },

        toObject: toObject,

        toOrderedMap: function toOrderedMap() {
          // Use Late Binding here to solve the circular dependency.
          return OrderedMap(this.toKeyedSeq());
        },

        toOrderedSet: function toOrderedSet() {
          // Use Late Binding here to solve the circular dependency.
          return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
        },

        toSet: function toSet() {
          // Use Late Binding here to solve the circular dependency.
          return Set$1(isKeyed(this) ? this.valueSeq() : this);
        },

        toSetSeq: function toSetSeq() {
          return new ToSetSequence(this);
        },

        toSeq: function toSeq() {
          return isIndexed(this)
            ? this.toIndexedSeq()
            : isKeyed(this)
            ? this.toKeyedSeq()
            : this.toSetSeq();
        },

        toStack: function toStack() {
          // Use Late Binding here to solve the circular dependency.
          return Stack(isKeyed(this) ? this.valueSeq() : this);
        },

        toList: function toList() {
          // Use Late Binding here to solve the circular dependency.
          return List(isKeyed(this) ? this.valueSeq() : this);
        },

        // ### Common JavaScript methods and properties

        toString: function toString() {
          return '[Collection]';
        },

        __toString: function __toString(head, tail) {
          if (this.size === 0) {
            return head + tail;
          }
          return (
            head +
            ' ' +
            this.toSeq().map(this.__toStringMapper).join(', ') +
            ' ' +
            tail
          );
        },

        // ### ES6 Collection methods (ES6 Array and Map)

        concat: function concat() {
          var values = [], len = arguments.length;
          while ( len-- ) values[ len ] = arguments[ len ];

          return reify(this, concatFactory(this, values));
        },

        includes: function includes(searchValue) {
          return this.some(function (value) { return is(value, searchValue); });
        },

        entries: function entries() {
          return this.__iterator(ITERATE_ENTRIES);
        },

        every: function every(predicate, context) {
          assertNotInfinite(this.size);
          var returnValue = true;
          this.__iterate(function (v, k, c) {
            if (!predicate.call(context, v, k, c)) {
              returnValue = false;
              return false;
            }
          });
          return returnValue;
        },

        filter: function filter(predicate, context) {
          return reify(this, filterFactory(this, predicate, context, true));
        },

        find: function find(predicate, context, notSetValue) {
          var entry = this.findEntry(predicate, context);
          return entry ? entry[1] : notSetValue;
        },

        forEach: function forEach(sideEffect, context) {
          assertNotInfinite(this.size);
          return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
        },

        join: function join(separator) {
          assertNotInfinite(this.size);
          separator = separator !== undefined ? '' + separator : ',';
          var joined = '';
          var isFirst = true;
          this.__iterate(function (v) {
            isFirst ? (isFirst = false) : (joined += separator);
            joined += v !== null && v !== undefined ? v.toString() : '';
          });
          return joined;
        },

        keys: function keys() {
          return this.__iterator(ITERATE_KEYS);
        },

        map: function map(mapper, context) {
          return reify(this, mapFactory(this, mapper, context));
        },

        reduce: function reduce$1(reducer, initialReduction, context) {
          return reduce(
            this,
            reducer,
            initialReduction,
            context,
            arguments.length < 2,
            false
          );
        },

        reduceRight: function reduceRight(reducer, initialReduction, context) {
          return reduce(
            this,
            reducer,
            initialReduction,
            context,
            arguments.length < 2,
            true
          );
        },

        reverse: function reverse() {
          return reify(this, reverseFactory(this, true));
        },

        slice: function slice(begin, end) {
          return reify(this, sliceFactory(this, begin, end, true));
        },

        some: function some(predicate, context) {
          return !this.every(not(predicate), context);
        },

        sort: function sort(comparator) {
          return reify(this, sortFactory(this, comparator));
        },

        values: function values() {
          return this.__iterator(ITERATE_VALUES);
        },

        // ### More sequential methods

        butLast: function butLast() {
          return this.slice(0, -1);
        },

        isEmpty: function isEmpty() {
          return this.size !== undefined ? this.size === 0 : !this.some(function () { return true; });
        },

        count: function count(predicate, context) {
          return ensureSize(
            predicate ? this.toSeq().filter(predicate, context) : this
          );
        },

        countBy: function countBy(grouper, context) {
          return countByFactory(this, grouper, context);
        },

        equals: function equals(other) {
          return deepEqual(this, other);
        },

        entrySeq: function entrySeq() {
          var collection = this;
          if (collection._cache) {
            // We cache as an entries array, so we can just return the cache!
            return new ArraySeq(collection._cache);
          }
          var entriesSequence = collection.toSeq().map(entryMapper).toIndexedSeq();
          entriesSequence.fromEntrySeq = function () { return collection.toSeq(); };
          return entriesSequence;
        },

        filterNot: function filterNot(predicate, context) {
          return this.filter(not(predicate), context);
        },

        findEntry: function findEntry(predicate, context, notSetValue) {
          var found = notSetValue;
          this.__iterate(function (v, k, c) {
            if (predicate.call(context, v, k, c)) {
              found = [k, v];
              return false;
            }
          });
          return found;
        },

        findKey: function findKey(predicate, context) {
          var entry = this.findEntry(predicate, context);
          return entry && entry[0];
        },

        findLast: function findLast(predicate, context, notSetValue) {
          return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
        },

        findLastEntry: function findLastEntry(predicate, context, notSetValue) {
          return this.toKeyedSeq()
            .reverse()
            .findEntry(predicate, context, notSetValue);
        },

        findLastKey: function findLastKey(predicate, context) {
          return this.toKeyedSeq().reverse().findKey(predicate, context);
        },

        first: function first(notSetValue) {
          return this.find(returnTrue, null, notSetValue);
        },

        flatMap: function flatMap(mapper, context) {
          return reify(this, flatMapFactory(this, mapper, context));
        },

        flatten: function flatten(depth) {
          return reify(this, flattenFactory(this, depth, true));
        },

        fromEntrySeq: function fromEntrySeq() {
          return new FromEntriesSequence(this);
        },

        get: function get(searchKey, notSetValue) {
          return this.find(function (_, key) { return is(key, searchKey); }, undefined, notSetValue);
        },

        getIn: getIn,

        groupBy: function groupBy(grouper, context) {
          return groupByFactory(this, grouper, context);
        },

        has: function has(searchKey) {
          return this.get(searchKey, NOT_SET) !== NOT_SET;
        },

        hasIn: hasIn,

        isSubset: function isSubset(iter) {
          iter = typeof iter.includes === 'function' ? iter : Collection(iter);
          return this.every(function (value) { return iter.includes(value); });
        },

        isSuperset: function isSuperset(iter) {
          iter = typeof iter.isSubset === 'function' ? iter : Collection(iter);
          return iter.isSubset(this);
        },

        keyOf: function keyOf(searchValue) {
          return this.findKey(function (value) { return is(value, searchValue); });
        },

        keySeq: function keySeq() {
          return this.toSeq().map(keyMapper).toIndexedSeq();
        },

        last: function last(notSetValue) {
          return this.toSeq().reverse().first(notSetValue);
        },

        lastKeyOf: function lastKeyOf(searchValue) {
          return this.toKeyedSeq().reverse().keyOf(searchValue);
        },

        max: function max(comparator) {
          return maxFactory(this, comparator);
        },

        maxBy: function maxBy(mapper, comparator) {
          return maxFactory(this, comparator, mapper);
        },

        min: function min(comparator) {
          return maxFactory(
            this,
            comparator ? neg(comparator) : defaultNegComparator
          );
        },

        minBy: function minBy(mapper, comparator) {
          return maxFactory(
            this,
            comparator ? neg(comparator) : defaultNegComparator,
            mapper
          );
        },

        rest: function rest() {
          return this.slice(1);
        },

        skip: function skip(amount) {
          return amount === 0 ? this : this.slice(Math.max(0, amount));
        },

        skipLast: function skipLast(amount) {
          return amount === 0 ? this : this.slice(0, -Math.max(0, amount));
        },

        skipWhile: function skipWhile(predicate, context) {
          return reify(this, skipWhileFactory(this, predicate, context, true));
        },

        skipUntil: function skipUntil(predicate, context) {
          return this.skipWhile(not(predicate), context);
        },

        sortBy: function sortBy(mapper, comparator) {
          return reify(this, sortFactory(this, comparator, mapper));
        },

        take: function take(amount) {
          return this.slice(0, Math.max(0, amount));
        },

        takeLast: function takeLast(amount) {
          return this.slice(-Math.max(0, amount));
        },

        takeWhile: function takeWhile(predicate, context) {
          return reify(this, takeWhileFactory(this, predicate, context));
        },

        takeUntil: function takeUntil(predicate, context) {
          return this.takeWhile(not(predicate), context);
        },

        update: function update(fn) {
          return fn(this);
        },

        valueSeq: function valueSeq() {
          return this.toIndexedSeq();
        },

        // ### Hashable Object

        hashCode: function hashCode() {
          return this.__hash || (this.__hash = hashCollection(this));
        },

        // ### Internal

        // abstract __iterate(fn, reverse)

        // abstract __iterator(type, reverse)
      });

      var CollectionPrototype = Collection.prototype;
      CollectionPrototype[IS_COLLECTION_SYMBOL] = true;
      CollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;
      CollectionPrototype.toJSON = CollectionPrototype.toArray;
      CollectionPrototype.__toStringMapper = quoteString;
      CollectionPrototype.inspect = CollectionPrototype.toSource = function () {
        return this.toString();
      };
      CollectionPrototype.chain = CollectionPrototype.flatMap;
      CollectionPrototype.contains = CollectionPrototype.includes;

      mixin(KeyedCollection, {
        // ### More sequential methods

        flip: function flip() {
          return reify(this, flipFactory(this));
        },

        mapEntries: function mapEntries(mapper, context) {
          var this$1$1 = this;

          var iterations = 0;
          return reify(
            this,
            this.toSeq()
              .map(function (v, k) { return mapper.call(context, [k, v], iterations++, this$1$1); })
              .fromEntrySeq()
          );
        },

        mapKeys: function mapKeys(mapper, context) {
          var this$1$1 = this;

          return reify(
            this,
            this.toSeq()
              .flip()
              .map(function (k, v) { return mapper.call(context, k, v, this$1$1); })
              .flip()
          );
        },
      });

      var KeyedCollectionPrototype = KeyedCollection.prototype;
      KeyedCollectionPrototype[IS_KEYED_SYMBOL] = true;
      KeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;
      KeyedCollectionPrototype.toJSON = toObject;
      KeyedCollectionPrototype.__toStringMapper = function (v, k) { return quoteString(k) + ': ' + quoteString(v); };

      mixin(IndexedCollection, {
        // ### Conversion to other types

        toKeyedSeq: function toKeyedSeq() {
          return new ToKeyedSequence(this, false);
        },

        // ### ES6 Collection methods (ES6 Array and Map)

        filter: function filter(predicate, context) {
          return reify(this, filterFactory(this, predicate, context, false));
        },

        findIndex: function findIndex(predicate, context) {
          var entry = this.findEntry(predicate, context);
          return entry ? entry[0] : -1;
        },

        indexOf: function indexOf(searchValue) {
          var key = this.keyOf(searchValue);
          return key === undefined ? -1 : key;
        },

        lastIndexOf: function lastIndexOf(searchValue) {
          var key = this.lastKeyOf(searchValue);
          return key === undefined ? -1 : key;
        },

        reverse: function reverse() {
          return reify(this, reverseFactory(this, false));
        },

        slice: function slice(begin, end) {
          return reify(this, sliceFactory(this, begin, end, false));
        },

        splice: function splice(index, removeNum /*, ...values*/) {
          var numArgs = arguments.length;
          removeNum = Math.max(removeNum || 0, 0);
          if (numArgs === 0 || (numArgs === 2 && !removeNum)) {
            return this;
          }
          // If index is negative, it should resolve relative to the size of the
          // collection. However size may be expensive to compute if not cached, so
          // only call count() if the number is in fact negative.
          index = resolveBegin(index, index < 0 ? this.count() : this.size);
          var spliced = this.slice(0, index);
          return reify(
            this,
            numArgs === 1
              ? spliced
              : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
          );
        },

        // ### More collection methods

        findLastIndex: function findLastIndex(predicate, context) {
          var entry = this.findLastEntry(predicate, context);
          return entry ? entry[0] : -1;
        },

        first: function first(notSetValue) {
          return this.get(0, notSetValue);
        },

        flatten: function flatten(depth) {
          return reify(this, flattenFactory(this, depth, false));
        },

        get: function get(index, notSetValue) {
          index = wrapIndex(this, index);
          return index < 0 ||
            this.size === Infinity ||
            (this.size !== undefined && index > this.size)
            ? notSetValue
            : this.find(function (_, key) { return key === index; }, undefined, notSetValue);
        },

        has: function has(index) {
          index = wrapIndex(this, index);
          return (
            index >= 0 &&
            (this.size !== undefined
              ? this.size === Infinity || index < this.size
              : this.indexOf(index) !== -1)
          );
        },

        interpose: function interpose(separator) {
          return reify(this, interposeFactory(this, separator));
        },

        interleave: function interleave(/*...collections*/) {
          var collections = [this].concat(arrCopy(arguments));
          var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);
          var interleaved = zipped.flatten(true);
          if (zipped.size) {
            interleaved.size = zipped.size * collections.length;
          }
          return reify(this, interleaved);
        },

        keySeq: function keySeq() {
          return Range(0, this.size);
        },

        last: function last(notSetValue) {
          return this.get(-1, notSetValue);
        },

        skipWhile: function skipWhile(predicate, context) {
          return reify(this, skipWhileFactory(this, predicate, context, false));
        },

        zip: function zip(/*, ...collections */) {
          var collections = [this].concat(arrCopy(arguments));
          return reify(this, zipWithFactory(this, defaultZipper, collections));
        },

        zipAll: function zipAll(/*, ...collections */) {
          var collections = [this].concat(arrCopy(arguments));
          return reify(this, zipWithFactory(this, defaultZipper, collections, true));
        },

        zipWith: function zipWith(zipper /*, ...collections */) {
          var collections = arrCopy(arguments);
          collections[0] = this;
          return reify(this, zipWithFactory(this, zipper, collections));
        },
      });

      var IndexedCollectionPrototype = IndexedCollection.prototype;
      IndexedCollectionPrototype[IS_INDEXED_SYMBOL] = true;
      IndexedCollectionPrototype[IS_ORDERED_SYMBOL] = true;

      mixin(SetCollection, {
        // ### ES6 Collection methods (ES6 Array and Map)

        get: function get(value, notSetValue) {
          return this.has(value) ? value : notSetValue;
        },

        includes: function includes(value) {
          return this.has(value);
        },

        // ### More sequential methods

        keySeq: function keySeq() {
          return this.valueSeq();
        },
      });

      var SetCollectionPrototype = SetCollection.prototype;
      SetCollectionPrototype.has = CollectionPrototype.includes;
      SetCollectionPrototype.contains = SetCollectionPrototype.includes;
      SetCollectionPrototype.keys = SetCollectionPrototype.values;

      // Mixin subclasses

      mixin(KeyedSeq, KeyedCollectionPrototype);
      mixin(IndexedSeq, IndexedCollectionPrototype);
      mixin(SetSeq, SetCollectionPrototype);

      // #pragma Helper functions

      function reduce(collection, reducer, reduction, context, useFirst, reverse) {
        assertNotInfinite(collection.size);
        collection.__iterate(function (v, k, c) {
          if (useFirst) {
            useFirst = false;
            reduction = v;
          } else {
            reduction = reducer.call(context, reduction, v, k, c);
          }
        }, reverse);
        return reduction;
      }

      function keyMapper(v, k) {
        return k;
      }

      function entryMapper(v, k) {
        return [k, v];
      }

      function not(predicate) {
        return function () {
          return !predicate.apply(this, arguments);
        };
      }

      function neg(predicate) {
        return function () {
          return -predicate.apply(this, arguments);
        };
      }

      function defaultZipper() {
        return arrCopy(arguments);
      }

      function defaultNegComparator(a, b) {
        return a < b ? 1 : a > b ? -1 : 0;
      }

      function hashCollection(collection) {
        if (collection.size === Infinity) {
          return 0;
        }
        var ordered = isOrdered(collection);
        var keyed = isKeyed(collection);
        var h = ordered ? 1 : 0;
        var size = collection.__iterate(
          keyed
            ? ordered
              ? function (v, k) {
                  h = (31 * h + hashMerge(hash(v), hash(k))) | 0;
                }
              : function (v, k) {
                  h = (h + hashMerge(hash(v), hash(k))) | 0;
                }
            : ordered
            ? function (v) {
                h = (31 * h + hash(v)) | 0;
              }
            : function (v) {
                h = (h + hash(v)) | 0;
              }
        );
        return murmurHashOfSize(size, h);
      }

      function murmurHashOfSize(size, h) {
        h = imul(h, 0xcc9e2d51);
        h = imul((h << 15) | (h >>> -15), 0x1b873593);
        h = imul((h << 13) | (h >>> -13), 5);
        h = ((h + 0xe6546b64) | 0) ^ size;
        h = imul(h ^ (h >>> 16), 0x85ebca6b);
        h = imul(h ^ (h >>> 13), 0xc2b2ae35);
        h = smi(h ^ (h >>> 16));
        return h;
      }

      function hashMerge(a, b) {
        return (a ^ (b + 0x9e3779b9 + (a << 6) + (a >> 2))) | 0; // int
      }

      var OrderedSet = /*@__PURE__*/(function (Set) {
        function OrderedSet(value) {
          return value === null || value === undefined
            ? emptyOrderedSet()
            : isOrderedSet(value)
            ? value
            : emptyOrderedSet().withMutations(function (set) {
                var iter = SetCollection(value);
                assertNotInfinite(iter.size);
                iter.forEach(function (v) { return set.add(v); });
              });
        }

        if ( Set ) OrderedSet.__proto__ = Set;
        OrderedSet.prototype = Object.create( Set && Set.prototype );
        OrderedSet.prototype.constructor = OrderedSet;

        OrderedSet.of = function of (/*...values*/) {
          return this(arguments);
        };

        OrderedSet.fromKeys = function fromKeys (value) {
          return this(KeyedCollection(value).keySeq());
        };

        OrderedSet.prototype.toString = function toString () {
          return this.__toString('OrderedSet {', '}');
        };

        return OrderedSet;
      }(Set$1));

      OrderedSet.isOrderedSet = isOrderedSet;

      var OrderedSetPrototype = OrderedSet.prototype;
      OrderedSetPrototype[IS_ORDERED_SYMBOL] = true;
      OrderedSetPrototype.zip = IndexedCollectionPrototype.zip;
      OrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;
      OrderedSetPrototype.zipAll = IndexedCollectionPrototype.zipAll;

      OrderedSetPrototype.__empty = emptyOrderedSet;
      OrderedSetPrototype.__make = makeOrderedSet;

      function makeOrderedSet(map, ownerID) {
        var set = Object.create(OrderedSetPrototype);
        set.size = map ? map.size : 0;
        set._map = map;
        set.__ownerID = ownerID;
        return set;
      }

      var EMPTY_ORDERED_SET;
      function emptyOrderedSet() {
        return (
          EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()))
        );
      }

      function fromJS(value, converter) {
        return fromJSWith(
          [],
          converter || defaultConverter,
          value,
          '',
          converter && converter.length > 2 ? [] : undefined,
          { '': value }
        );
      }

      function fromJSWith(stack, converter, value, key, keyPath, parentValue) {
        if (
          typeof value !== 'string' &&
          !isImmutable(value) &&
          (isArrayLike(value) || hasIterator(value) || isPlainObject(value))
        ) {
          if (~stack.indexOf(value)) {
            throw new TypeError('Cannot convert circular structure to Immutable');
          }
          stack.push(value);
          keyPath && key !== '' && keyPath.push(key);
          var converted = converter.call(
            parentValue,
            key,
            Seq(value).map(function (v, k) { return fromJSWith(stack, converter, v, k, keyPath, value); }
            ),
            keyPath && keyPath.slice()
          );
          stack.pop();
          keyPath && keyPath.pop();
          return converted;
        }
        return value;
      }

      function defaultConverter(k, v) {
        // Effectively the opposite of "Collection.toSeq()"
        return isIndexed(v) ? v.toList() : isKeyed(v) ? v.toMap() : v.toSet();
      }

      function useCombinedRefs(...refs) {
        return useMemo(() => node => {
          refs.forEach(ref => ref(node));
        }, // eslint-disable-next-line react-hooks/exhaustive-deps
        refs);
      }

      // https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js
      const canUseDOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';

      function isWindow(element) {
        const elementString = Object.prototype.toString.call(element);
        return elementString === '[object Window]' || // In Electron context the Window object serializes to [object global]
        elementString === '[object global]';
      }

      function isNode(node) {
        return 'nodeType' in node;
      }

      function getWindow(target) {
        var _target$ownerDocument, _target$ownerDocument2;

        if (!target) {
          return window;
        }

        if (isWindow(target)) {
          return target;
        }

        if (!isNode(target)) {
          return window;
        }

        return (_target$ownerDocument = (_target$ownerDocument2 = target.ownerDocument) == null ? void 0 : _target$ownerDocument2.defaultView) != null ? _target$ownerDocument : window;
      }

      function isDocument(node) {
        const {
          Document
        } = getWindow(node);
        return node instanceof Document;
      }

      function isHTMLElement(node) {
        if (isWindow(node)) {
          return false;
        }

        return node instanceof getWindow(node).HTMLElement;
      }

      function isSVGElement(node) {
        return node instanceof getWindow(node).SVGElement;
      }

      function getOwnerDocument(target) {
        if (!target) {
          return document;
        }

        if (isWindow(target)) {
          return target.document;
        }

        if (!isNode(target)) {
          return document;
        }

        if (isDocument(target)) {
          return target;
        }

        if (isHTMLElement(target)) {
          return target.ownerDocument;
        }

        return document;
      }

      /**
       * A hook that resolves to useEffect on the server and useLayoutEffect on the client
       * @param callback {function} Callback function that is invoked when the dependencies of the hook change
       */

      const useIsomorphicLayoutEffect = canUseDOM ? useLayoutEffect : useEffect;

      function useEvent(handler) {
        const handlerRef = useRef(handler);
        useIsomorphicLayoutEffect(() => {
          handlerRef.current = handler;
        });
        return useCallback(function (...args) {
          return handlerRef.current == null ? void 0 : handlerRef.current(...args);
        }, []);
      }

      function useInterval() {
        const intervalRef = useRef(null);
        const set = useCallback((listener, duration) => {
          intervalRef.current = setInterval(listener, duration);
        }, []);
        const clear = useCallback(() => {
          if (intervalRef.current !== null) {
            clearInterval(intervalRef.current);
            intervalRef.current = null;
          }
        }, []);
        return [set, clear];
      }

      function useLatestValue(value, dependencies = [value]) {
        const valueRef = useRef(value);
        useIsomorphicLayoutEffect(() => {
          if (valueRef.current !== value) {
            valueRef.current = value;
          }
        }, dependencies);
        return valueRef;
      }

      function useLazyMemo(callback, dependencies) {
        const valueRef = useRef();
        return useMemo(() => {
          const newValue = callback(valueRef.current);
          valueRef.current = newValue;
          return newValue;
        }, // eslint-disable-next-line react-hooks/exhaustive-deps
        [...dependencies]);
      }

      function useNodeRef(onChange) {
        const onChangeHandler = useEvent(onChange);
        const node = useRef(null);
        const setNodeRef = useCallback(element => {
          if (element !== node.current) {
            onChangeHandler == null ? void 0 : onChangeHandler(element, node.current);
          }

          node.current = element;
        }, //eslint-disable-next-line
        []);
        return [node, setNodeRef];
      }

      function usePrevious(value) {
        const ref = useRef();
        useEffect(() => {
          ref.current = value;
        }, [value]);
        return ref.current;
      }

      let ids = {};
      function useUniqueId(prefix, value) {
        return useMemo(() => {
          if (value) {
            return value;
          }

          const id = ids[prefix] == null ? 0 : ids[prefix] + 1;
          ids[prefix] = id;
          return `${prefix}-${id}`;
        }, [prefix, value]);
      }

      function createAdjustmentFn(modifier) {
        return (object, ...adjustments) => {
          return adjustments.reduce((accumulator, adjustment) => {
            const entries = Object.entries(adjustment);

            for (const [key, valueAdjustment] of entries) {
              const value = accumulator[key];

              if (value != null) {
                accumulator[key] = value + modifier * valueAdjustment;
              }
            }

            return accumulator;
          }, { ...object
          });
        };
      }

      const add = /*#__PURE__*/createAdjustmentFn(1);
      const subtract = /*#__PURE__*/createAdjustmentFn(-1);

      function hasViewportRelativeCoordinates(event) {
        return 'clientX' in event && 'clientY' in event;
      }

      function isKeyboardEvent(event) {
        if (!event) {
          return false;
        }

        const {
          KeyboardEvent
        } = getWindow(event.target);
        return KeyboardEvent && event instanceof KeyboardEvent;
      }

      function isTouchEvent(event) {
        if (!event) {
          return false;
        }

        const {
          TouchEvent
        } = getWindow(event.target);
        return TouchEvent && event instanceof TouchEvent;
      }

      /**
       * Returns the normalized x and y coordinates for mouse and touch events.
       */

      function getEventCoordinates(event) {
        if (isTouchEvent(event)) {
          if (event.touches && event.touches.length) {
            const {
              clientX: x,
              clientY: y
            } = event.touches[0];
            return {
              x,
              y
            };
          } else if (event.changedTouches && event.changedTouches.length) {
            const {
              clientX: x,
              clientY: y
            } = event.changedTouches[0];
            return {
              x,
              y
            };
          }
        }

        if (hasViewportRelativeCoordinates(event)) {
          return {
            x: event.clientX,
            y: event.clientY
          };
        }

        return null;
      }

      const CSS = /*#__PURE__*/Object.freeze({
        Translate: {
          toString(transform) {
            if (!transform) {
              return;
            }

            const {
              x,
              y
            } = transform;
            return `translate3d(${x ? Math.round(x) : 0}px, ${y ? Math.round(y) : 0}px, 0)`;
          }

        },
        Scale: {
          toString(transform) {
            if (!transform) {
              return;
            }

            const {
              scaleX,
              scaleY
            } = transform;
            return `scaleX(${scaleX}) scaleY(${scaleY})`;
          }

        },
        Transform: {
          toString(transform) {
            if (!transform) {
              return;
            }

            return [CSS.Translate.toString(transform), CSS.Scale.toString(transform)].join(' ');
          }

        },
        Transition: {
          toString({
            property,
            duration,
            easing
          }) {
            return `${property} ${duration}ms ${easing}`;
          }

        }
      });

      const SELECTOR = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]';
      function findFirstFocusableNode(element) {
        if (element.matches(SELECTOR)) {
          return element;
        }

        return element.querySelector(SELECTOR);
      }

      const hiddenStyles = {
        display: 'none'
      };
      function HiddenText(_ref) {
        let {
          id,
          value
        } = _ref;
        return React.createElement("div", {
          id: id,
          style: hiddenStyles
        }, value);
      }

      const visuallyHidden = {
        position: 'fixed',
        width: 1,
        height: 1,
        margin: -1,
        border: 0,
        padding: 0,
        overflow: 'hidden',
        clip: 'rect(0 0 0 0)',
        clipPath: 'inset(100%)',
        whiteSpace: 'nowrap'
      };
      function LiveRegion(_ref) {
        let {
          id,
          announcement
        } = _ref;
        return React.createElement("div", {
          id: id,
          style: visuallyHidden,
          role: "status",
          "aria-live": "assertive",
          "aria-atomic": true
        }, announcement);
      }

      function useAnnouncement() {
        const [announcement, setAnnouncement] = useState('');
        const announce = useCallback(value => {
          if (value != null) {
            setAnnouncement(value);
          }
        }, []);
        return {
          announce,
          announcement
        };
      }

      const DndMonitorContext = /*#__PURE__*/createContext(null);

      function useDndMonitor(listener) {
        const registerListener = useContext(DndMonitorContext);
        useEffect(() => {
          if (!registerListener) {
            throw new Error('useDndMonitor must be used within a children of <DndContext>');
          }

          const unsubscribe = registerListener(listener);
          return unsubscribe;
        }, [listener, registerListener]);
      }

      function useDndMonitorProvider() {
        const [listeners] = useState(() => new Set());
        const registerListener = useCallback(listener => {
          listeners.add(listener);
          return () => listeners.delete(listener);
        }, [listeners]);
        const dispatch = useCallback(_ref => {
          let {
            type,
            event
          } = _ref;
          listeners.forEach(listener => {
            var _listener$type;

            return (_listener$type = listener[type]) == null ? void 0 : _listener$type.call(listener, event);
          });
        }, [listeners]);
        return [dispatch, registerListener];
      }

      const defaultScreenReaderInstructions = {
        draggable: "\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  "
      };
      const defaultAnnouncements = {
        onDragStart(_ref) {
          let {
            active
          } = _ref;
          return "Picked up draggable item " + active.id + ".";
        },

        onDragOver(_ref2) {
          let {
            active,
            over
          } = _ref2;

          if (over) {
            return "Draggable item " + active.id + " was moved over droppable area " + over.id + ".";
          }

          return "Draggable item " + active.id + " is no longer over a droppable area.";
        },

        onDragEnd(_ref3) {
          let {
            active,
            over
          } = _ref3;

          if (over) {
            return "Draggable item " + active.id + " was dropped over droppable area " + over.id;
          }

          return "Draggable item " + active.id + " was dropped.";
        },

        onDragCancel(_ref4) {
          let {
            active
          } = _ref4;
          return "Dragging was cancelled. Draggable item " + active.id + " was dropped.";
        }

      };

      function Accessibility(_ref) {
        let {
          announcements = defaultAnnouncements,
          container,
          hiddenTextDescribedById,
          screenReaderInstructions = defaultScreenReaderInstructions
        } = _ref;
        const {
          announce,
          announcement
        } = useAnnouncement();
        const liveRegionId = useUniqueId("DndLiveRegion");
        const [mounted, setMounted] = useState(false);
        useEffect(() => {
          setMounted(true);
        }, []);
        useDndMonitor(useMemo(() => ({
          onDragStart(_ref2) {
            let {
              active
            } = _ref2;
            announce(announcements.onDragStart({
              active
            }));
          },

          onDragMove(_ref3) {
            let {
              active,
              over
            } = _ref3;

            if (announcements.onDragMove) {
              announce(announcements.onDragMove({
                active,
                over
              }));
            }
          },

          onDragOver(_ref4) {
            let {
              active,
              over
            } = _ref4;
            announce(announcements.onDragOver({
              active,
              over
            }));
          },

          onDragEnd(_ref5) {
            let {
              active,
              over
            } = _ref5;
            announce(announcements.onDragEnd({
              active,
              over
            }));
          },

          onDragCancel(_ref6) {
            let {
              active,
              over
            } = _ref6;
            announce(announcements.onDragCancel({
              active,
              over
            }));
          }

        }), [announce, announcements]));

        if (!mounted) {
          return null;
        }

        const markup = React.createElement(React.Fragment, null, React.createElement(HiddenText, {
          id: hiddenTextDescribedById,
          value: screenReaderInstructions.draggable
        }), React.createElement(LiveRegion, {
          id: liveRegionId,
          announcement: announcement
        }));
        return container ? createPortal(markup, container) : markup;
      }

      var Action;

      (function (Action) {
        Action["DragStart"] = "dragStart";
        Action["DragMove"] = "dragMove";
        Action["DragEnd"] = "dragEnd";
        Action["DragCancel"] = "dragCancel";
        Action["DragOver"] = "dragOver";
        Action["RegisterDroppable"] = "registerDroppable";
        Action["SetDroppableDisabled"] = "setDroppableDisabled";
        Action["UnregisterDroppable"] = "unregisterDroppable";
      })(Action || (Action = {}));

      function noop() {}

      function useSensor(sensor, options) {
        return useMemo(() => ({
          sensor,
          options: options != null ? options : {}
        }), // eslint-disable-next-line react-hooks/exhaustive-deps
        [sensor, options]);
      }

      function useSensors() {
        for (var _len = arguments.length, sensors = new Array(_len), _key = 0; _key < _len; _key++) {
          sensors[_key] = arguments[_key];
        }

        return useMemo(() => [...sensors].filter(sensor => sensor != null), // eslint-disable-next-line react-hooks/exhaustive-deps
        [...sensors]);
      }

      const defaultCoordinates = /*#__PURE__*/Object.freeze({
        x: 0,
        y: 0
      });

      /**
       * Returns the distance between two points
       */
      function distanceBetween(p1, p2) {
        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
      }

      function getRelativeTransformOrigin(event, rect) {
        const eventCoordinates = getEventCoordinates(event);

        if (!eventCoordinates) {
          return '0 0';
        }

        const transformOrigin = {
          x: (eventCoordinates.x - rect.left) / rect.width * 100,
          y: (eventCoordinates.y - rect.top) / rect.height * 100
        };
        return transformOrigin.x + "% " + transformOrigin.y + "%";
      }

      /**
       * Sort collisions from smallest to greatest value
       */
      function sortCollisionsAsc(_ref, _ref2) {
        let {
          data: {
            value: a
          }
        } = _ref;
        let {
          data: {
            value: b
          }
        } = _ref2;
        return a - b;
      }
      /**
       * Sort collisions from greatest to smallest value
       */

      function sortCollisionsDesc(_ref3, _ref4) {
        let {
          data: {
            value: a
          }
        } = _ref3;
        let {
          data: {
            value: b
          }
        } = _ref4;
        return b - a;
      }
      function getFirstCollision(collisions, property) {
        if (!collisions || collisions.length === 0) {
          return null;
        }

        const [firstCollision] = collisions;
        return property ? firstCollision[property] : firstCollision;
      }

      /**
       * Returns the coordinates of the center of a given ClientRect
       */

      function centerOfRectangle(rect, left, top) {
        if (left === void 0) {
          left = rect.left;
        }

        if (top === void 0) {
          top = rect.top;
        }

        return {
          x: left + rect.width * 0.5,
          y: top + rect.height * 0.5
        };
      }
      /**
       * Returns the closest rectangles from an array of rectangles to the center of a given
       * rectangle.
       */


      const closestCenter = _ref => {
        let {
          collisionRect,
          droppableRects,
          droppableContainers
        } = _ref;
        const centerRect = centerOfRectangle(collisionRect, collisionRect.left, collisionRect.top);
        const collisions = [];

        for (const droppableContainer of droppableContainers) {
          const {
            id
          } = droppableContainer;
          const rect = droppableRects.get(id);

          if (rect) {
            const distBetween = distanceBetween(centerOfRectangle(rect), centerRect);
            collisions.push({
              id,
              data: {
                droppableContainer,
                value: distBetween
              }
            });
          }
        }

        return collisions.sort(sortCollisionsAsc);
      };

      /**
       * Returns the intersecting rectangle area between two rectangles
       */

      function getIntersectionRatio(entry, target) {
        const top = Math.max(target.top, entry.top);
        const left = Math.max(target.left, entry.left);
        const right = Math.min(target.left + target.width, entry.left + entry.width);
        const bottom = Math.min(target.top + target.height, entry.top + entry.height);
        const width = right - left;
        const height = bottom - top;

        if (left < right && top < bottom) {
          const targetArea = target.width * target.height;
          const entryArea = entry.width * entry.height;
          const intersectionArea = width * height;
          const intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);
          return Number(intersectionRatio.toFixed(4));
        } // Rectangles do not overlap, or overlap has an area of zero (edge/corner overlap)


        return 0;
      }
      /**
       * Returns the rectangles that has the greatest intersection area with a given
       * rectangle in an array of rectangles.
       */

      const rectIntersection = _ref => {
        let {
          collisionRect,
          droppableRects,
          droppableContainers
        } = _ref;
        const collisions = [];

        for (const droppableContainer of droppableContainers) {
          const {
            id
          } = droppableContainer;
          const rect = droppableRects.get(id);

          if (rect) {
            const intersectionRatio = getIntersectionRatio(rect, collisionRect);

            if (intersectionRatio > 0) {
              collisions.push({
                id,
                data: {
                  droppableContainer,
                  value: intersectionRatio
                }
              });
            }
          }
        }

        return collisions.sort(sortCollisionsDesc);
      };

      function adjustScale(transform, rect1, rect2) {
        return { ...transform,
          scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,
          scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1
        };
      }

      function getRectDelta(rect1, rect2) {
        return rect1 && rect2 ? {
          x: rect1.left - rect2.left,
          y: rect1.top - rect2.top
        } : defaultCoordinates;
      }

      function createRectAdjustmentFn(modifier) {
        return function adjustClientRect(rect) {
          for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            adjustments[_key - 1] = arguments[_key];
          }

          return adjustments.reduce((acc, adjustment) => ({ ...acc,
            top: acc.top + modifier * adjustment.y,
            bottom: acc.bottom + modifier * adjustment.y,
            left: acc.left + modifier * adjustment.x,
            right: acc.right + modifier * adjustment.x
          }), { ...rect
          });
        };
      }
      const getAdjustedRect = /*#__PURE__*/createRectAdjustmentFn(1);

      function parseTransform(transform) {
        if (transform.startsWith('matrix3d(')) {
          const transformArray = transform.slice(9, -1).split(/, /);
          return {
            x: +transformArray[12],
            y: +transformArray[13],
            scaleX: +transformArray[0],
            scaleY: +transformArray[5]
          };
        } else if (transform.startsWith('matrix(')) {
          const transformArray = transform.slice(7, -1).split(/, /);
          return {
            x: +transformArray[4],
            y: +transformArray[5],
            scaleX: +transformArray[0],
            scaleY: +transformArray[3]
          };
        }

        return null;
      }

      function inverseTransform(rect, transform, transformOrigin) {
        const parsedTransform = parseTransform(transform);

        if (!parsedTransform) {
          return rect;
        }

        const {
          scaleX,
          scaleY,
          x: translateX,
          y: translateY
        } = parsedTransform;
        const x = rect.left - translateX - (1 - scaleX) * parseFloat(transformOrigin);
        const y = rect.top - translateY - (1 - scaleY) * parseFloat(transformOrigin.slice(transformOrigin.indexOf(' ') + 1));
        const w = scaleX ? rect.width / scaleX : rect.width;
        const h = scaleY ? rect.height / scaleY : rect.height;
        return {
          width: w,
          height: h,
          top: y,
          right: x + w,
          bottom: y + h,
          left: x
        };
      }

      const defaultOptions = {
        ignoreTransform: false
      };
      /**
       * Returns the bounding client rect of an element relative to the viewport.
       */

      function getClientRect(element, options) {
        if (options === void 0) {
          options = defaultOptions;
        }

        let rect = element.getBoundingClientRect();

        if (options.ignoreTransform) {
          const {
            getComputedStyle
          } = getWindow(element);
          const {
            transform,
            transformOrigin
          } = getComputedStyle(element);

          if (transform) {
            rect = inverseTransform(rect, transform, transformOrigin);
          }
        }

        const {
          top,
          left,
          width,
          height,
          bottom,
          right
        } = rect;
        return {
          top,
          left,
          width,
          height,
          bottom,
          right
        };
      }
      /**
       * Returns the bounding client rect of an element relative to the viewport.
       *
       * @remarks
       * The ClientRect returned by this method does not take into account transforms
       * applied to the element it measures.
       *
       */

      function getTransformAgnosticClientRect(element) {
        return getClientRect(element, {
          ignoreTransform: true
        });
      }

      function getWindowClientRect(element) {
        const width = element.innerWidth;
        const height = element.innerHeight;
        return {
          top: 0,
          left: 0,
          right: width,
          bottom: height,
          width,
          height
        };
      }

      function isFixed(node, computedStyle) {
        if (computedStyle === void 0) {
          computedStyle = getWindow(node).getComputedStyle(node);
        }

        return computedStyle.position === 'fixed';
      }

      function isScrollable(element, computedStyle) {
        if (computedStyle === void 0) {
          computedStyle = getWindow(element).getComputedStyle(element);
        }

        const overflowRegex = /(auto|scroll|overlay)/;
        const properties = ['overflow', 'overflowX', 'overflowY'];
        return properties.some(property => {
          const value = computedStyle[property];
          return typeof value === 'string' ? overflowRegex.test(value) : false;
        });
      }

      function getScrollableAncestors(element, limit) {
        const scrollParents = [];

        function findScrollableAncestors(node) {
          if (limit != null && scrollParents.length >= limit) {
            return scrollParents;
          }

          if (!node) {
            return scrollParents;
          }

          if (isDocument(node) && node.scrollingElement != null && !scrollParents.includes(node.scrollingElement)) {
            scrollParents.push(node.scrollingElement);
            return scrollParents;
          }

          if (!isHTMLElement(node) || isSVGElement(node)) {
            return scrollParents;
          }

          if (scrollParents.includes(node)) {
            return scrollParents;
          }

          const {
            getComputedStyle
          } = getWindow(node);
          const computedStyle = getComputedStyle(node);

          if (node !== element) {
            if (isScrollable(node, computedStyle)) {
              scrollParents.push(node);
            }
          }

          if (isFixed(node, computedStyle)) {
            return scrollParents;
          }

          return findScrollableAncestors(node.parentNode);
        }

        if (!element) {
          return scrollParents;
        }

        return findScrollableAncestors(element);
      }
      function getFirstScrollableAncestor(node) {
        const [firstScrollableAncestor] = getScrollableAncestors(node, 1);
        return firstScrollableAncestor != null ? firstScrollableAncestor : null;
      }

      function getScrollableElement(element) {
        if (!canUseDOM || !element) {
          return null;
        }

        if (isWindow(element)) {
          return element;
        }

        if (!isNode(element)) {
          return null;
        }

        if (isDocument(element) || element === getOwnerDocument(element).scrollingElement) {
          return window;
        }

        if (isHTMLElement(element)) {
          return element;
        }

        return null;
      }

      function getScrollXCoordinate(element) {
        if (isWindow(element)) {
          return element.scrollX;
        }

        return element.scrollLeft;
      }
      function getScrollYCoordinate(element) {
        if (isWindow(element)) {
          return element.scrollY;
        }

        return element.scrollTop;
      }
      function getScrollCoordinates(element) {
        return {
          x: getScrollXCoordinate(element),
          y: getScrollYCoordinate(element)
        };
      }

      var Direction;

      (function (Direction) {
        Direction[Direction["Forward"] = 1] = "Forward";
        Direction[Direction["Backward"] = -1] = "Backward";
      })(Direction || (Direction = {}));

      function isDocumentScrollingElement(element) {
        if (!canUseDOM || !element) {
          return false;
        }

        return element === document.scrollingElement;
      }

      function getScrollPosition(scrollingContainer) {
        const minScroll = {
          x: 0,
          y: 0
        };
        const dimensions = isDocumentScrollingElement(scrollingContainer) ? {
          height: window.innerHeight,
          width: window.innerWidth
        } : {
          height: scrollingContainer.clientHeight,
          width: scrollingContainer.clientWidth
        };
        const maxScroll = {
          x: scrollingContainer.scrollWidth - dimensions.width,
          y: scrollingContainer.scrollHeight - dimensions.height
        };
        const isTop = scrollingContainer.scrollTop <= minScroll.y;
        const isLeft = scrollingContainer.scrollLeft <= minScroll.x;
        const isBottom = scrollingContainer.scrollTop >= maxScroll.y;
        const isRight = scrollingContainer.scrollLeft >= maxScroll.x;
        return {
          isTop,
          isLeft,
          isBottom,
          isRight,
          maxScroll,
          minScroll
        };
      }

      const defaultThreshold = {
        x: 0.2,
        y: 0.2
      };
      function getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, _ref, acceleration, thresholdPercentage) {
        let {
          top,
          left,
          right,
          bottom
        } = _ref;

        if (acceleration === void 0) {
          acceleration = 10;
        }

        if (thresholdPercentage === void 0) {
          thresholdPercentage = defaultThreshold;
        }

        const {
          isTop,
          isBottom,
          isLeft,
          isRight
        } = getScrollPosition(scrollContainer);
        const direction = {
          x: 0,
          y: 0
        };
        const speed = {
          x: 0,
          y: 0
        };
        const threshold = {
          height: scrollContainerRect.height * thresholdPercentage.y,
          width: scrollContainerRect.width * thresholdPercentage.x
        };

        if (!isTop && top <= scrollContainerRect.top + threshold.height) {
          // Scroll Up
          direction.y = Direction.Backward;
          speed.y = acceleration * Math.abs((scrollContainerRect.top + threshold.height - top) / threshold.height);
        } else if (!isBottom && bottom >= scrollContainerRect.bottom - threshold.height) {
          // Scroll Down
          direction.y = Direction.Forward;
          speed.y = acceleration * Math.abs((scrollContainerRect.bottom - threshold.height - bottom) / threshold.height);
        }

        if (!isRight && right >= scrollContainerRect.right - threshold.width) {
          // Scroll Right
          direction.x = Direction.Forward;
          speed.x = acceleration * Math.abs((scrollContainerRect.right - threshold.width - right) / threshold.width);
        } else if (!isLeft && left <= scrollContainerRect.left + threshold.width) {
          // Scroll Left
          direction.x = Direction.Backward;
          speed.x = acceleration * Math.abs((scrollContainerRect.left + threshold.width - left) / threshold.width);
        }

        return {
          direction,
          speed
        };
      }

      function getScrollElementRect(element) {
        if (element === document.scrollingElement) {
          const {
            innerWidth,
            innerHeight
          } = window;
          return {
            top: 0,
            left: 0,
            right: innerWidth,
            bottom: innerHeight,
            width: innerWidth,
            height: innerHeight
          };
        }

        const {
          top,
          left,
          right,
          bottom
        } = element.getBoundingClientRect();
        return {
          top,
          left,
          right,
          bottom,
          width: element.clientWidth,
          height: element.clientHeight
        };
      }

      function getScrollOffsets(scrollableAncestors) {
        return scrollableAncestors.reduce((acc, node) => {
          return add(acc, getScrollCoordinates(node));
        }, defaultCoordinates);
      }
      function getScrollXOffset(scrollableAncestors) {
        return scrollableAncestors.reduce((acc, node) => {
          return acc + getScrollXCoordinate(node);
        }, 0);
      }
      function getScrollYOffset(scrollableAncestors) {
        return scrollableAncestors.reduce((acc, node) => {
          return acc + getScrollYCoordinate(node);
        }, 0);
      }

      function scrollIntoViewIfNeeded(element, measure) {
        if (measure === void 0) {
          measure = getClientRect;
        }

        if (!element) {
          return;
        }

        const {
          top,
          left,
          bottom,
          right
        } = measure(element);
        const firstScrollableAncestor = getFirstScrollableAncestor(element);

        if (!firstScrollableAncestor) {
          return;
        }

        if (bottom <= 0 || right <= 0 || top >= window.innerHeight || left >= window.innerWidth) {
          element.scrollIntoView({
            block: 'center',
            inline: 'center'
          });
        }
      }

      const properties = [['x', ['left', 'right'], getScrollXOffset], ['y', ['top', 'bottom'], getScrollYOffset]];
      class Rect {
        constructor(rect, element) {
          this.rect = void 0;
          this.width = void 0;
          this.height = void 0;
          this.top = void 0;
          this.bottom = void 0;
          this.right = void 0;
          this.left = void 0;
          const scrollableAncestors = getScrollableAncestors(element);
          const scrollOffsets = getScrollOffsets(scrollableAncestors);
          this.rect = { ...rect
          };
          this.width = rect.width;
          this.height = rect.height;

          for (const [axis, keys, getScrollOffset] of properties) {
            for (const key of keys) {
              Object.defineProperty(this, key, {
                get: () => {
                  const currentOffsets = getScrollOffset(scrollableAncestors);
                  const scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;
                  return this.rect[key] + scrollOffsetsDeltla;
                },
                enumerable: true
              });
            }
          }

          Object.defineProperty(this, 'rect', {
            enumerable: false
          });
        }

      }

      class Listeners {
        constructor(target) {
          this.target = void 0;
          this.listeners = [];

          this.removeAll = () => {
            this.listeners.forEach(listener => {
              var _this$target;

              return (_this$target = this.target) == null ? void 0 : _this$target.removeEventListener(...listener);
            });
          };

          this.target = target;
        }

        add(eventName, handler, options) {
          var _this$target2;

          (_this$target2 = this.target) == null ? void 0 : _this$target2.addEventListener(eventName, handler, options);
          this.listeners.push([eventName, handler, options]);
        }

      }

      function getEventListenerTarget(target) {
        // If the `event.target` element is removed from the document events will still be targeted
        // at it, and hence won't always bubble up to the window or document anymore.
        // If there is any risk of an element being removed while it is being dragged,
        // the best practice is to attach the event listeners directly to the target.
        // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget
        const {
          EventTarget
        } = getWindow(target);
        return target instanceof EventTarget ? target : getOwnerDocument(target);
      }

      function hasExceededDistance(delta, measurement) {
        const dx = Math.abs(delta.x);
        const dy = Math.abs(delta.y);

        if (typeof measurement === 'number') {
          return Math.sqrt(dx ** 2 + dy ** 2) > measurement;
        }

        if ('x' in measurement && 'y' in measurement) {
          return dx > measurement.x && dy > measurement.y;
        }

        if ('x' in measurement) {
          return dx > measurement.x;
        }

        if ('y' in measurement) {
          return dy > measurement.y;
        }

        return false;
      }

      var EventName;

      (function (EventName) {
        EventName["Click"] = "click";
        EventName["DragStart"] = "dragstart";
        EventName["Keydown"] = "keydown";
        EventName["ContextMenu"] = "contextmenu";
        EventName["Resize"] = "resize";
        EventName["SelectionChange"] = "selectionchange";
        EventName["VisibilityChange"] = "visibilitychange";
      })(EventName || (EventName = {}));

      function preventDefault(event) {
        event.preventDefault();
      }
      function stopPropagation(event) {
        event.stopPropagation();
      }

      var KeyboardCode;

      (function (KeyboardCode) {
        KeyboardCode["Space"] = "Space";
        KeyboardCode["Down"] = "ArrowDown";
        KeyboardCode["Right"] = "ArrowRight";
        KeyboardCode["Left"] = "ArrowLeft";
        KeyboardCode["Up"] = "ArrowUp";
        KeyboardCode["Esc"] = "Escape";
        KeyboardCode["Enter"] = "Enter";
      })(KeyboardCode || (KeyboardCode = {}));

      const defaultKeyboardCodes = {
        start: [KeyboardCode.Space, KeyboardCode.Enter],
        cancel: [KeyboardCode.Esc],
        end: [KeyboardCode.Space, KeyboardCode.Enter]
      };
      const defaultKeyboardCoordinateGetter = (event, _ref) => {
        let {
          currentCoordinates
        } = _ref;

        switch (event.code) {
          case KeyboardCode.Right:
            return { ...currentCoordinates,
              x: currentCoordinates.x + 25
            };

          case KeyboardCode.Left:
            return { ...currentCoordinates,
              x: currentCoordinates.x - 25
            };

          case KeyboardCode.Down:
            return { ...currentCoordinates,
              y: currentCoordinates.y + 25
            };

          case KeyboardCode.Up:
            return { ...currentCoordinates,
              y: currentCoordinates.y - 25
            };
        }

        return undefined;
      };

      class KeyboardSensor {
        constructor(props) {
          this.props = void 0;
          this.autoScrollEnabled = false;
          this.referenceCoordinates = void 0;
          this.listeners = void 0;
          this.windowListeners = void 0;
          this.props = props;
          const {
            event: {
              target
            }
          } = props;
          this.props = props;
          this.listeners = new Listeners(getOwnerDocument(target));
          this.windowListeners = new Listeners(getWindow(target));
          this.handleKeyDown = this.handleKeyDown.bind(this);
          this.handleCancel = this.handleCancel.bind(this);
          this.attach();
        }

        attach() {
          this.handleStart();
          this.windowListeners.add(EventName.Resize, this.handleCancel);
          this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
          setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));
        }

        handleStart() {
          const {
            activeNode,
            onStart
          } = this.props;
          const node = activeNode.node.current;

          if (node) {
            scrollIntoViewIfNeeded(node);
          }

          onStart(defaultCoordinates);
        }

        handleKeyDown(event) {
          if (isKeyboardEvent(event)) {
            const {
              active,
              context,
              options
            } = this.props;
            const {
              keyboardCodes = defaultKeyboardCodes,
              coordinateGetter = defaultKeyboardCoordinateGetter,
              scrollBehavior = 'smooth'
            } = options;
            const {
              code
            } = event;

            if (keyboardCodes.end.includes(code)) {
              this.handleEnd(event);
              return;
            }

            if (keyboardCodes.cancel.includes(code)) {
              this.handleCancel(event);
              return;
            }

            const {
              collisionRect
            } = context.current;
            const currentCoordinates = collisionRect ? {
              x: collisionRect.left,
              y: collisionRect.top
            } : defaultCoordinates;

            if (!this.referenceCoordinates) {
              this.referenceCoordinates = currentCoordinates;
            }

            const newCoordinates = coordinateGetter(event, {
              active,
              context: context.current,
              currentCoordinates
            });

            if (newCoordinates) {
              const coordinatesDelta = subtract(newCoordinates, currentCoordinates);
              const scrollDelta = {
                x: 0,
                y: 0
              };
              const {
                scrollableAncestors
              } = context.current;

              for (const scrollContainer of scrollableAncestors) {
                const direction = event.code;
                const {
                  isTop,
                  isRight,
                  isLeft,
                  isBottom,
                  maxScroll,
                  minScroll
                } = getScrollPosition(scrollContainer);
                const scrollElementRect = getScrollElementRect(scrollContainer);
                const clampedCoordinates = {
                  x: Math.min(direction === KeyboardCode.Right ? scrollElementRect.right - scrollElementRect.width / 2 : scrollElementRect.right, Math.max(direction === KeyboardCode.Right ? scrollElementRect.left : scrollElementRect.left + scrollElementRect.width / 2, newCoordinates.x)),
                  y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))
                };
                const canScrollX = direction === KeyboardCode.Right && !isRight || direction === KeyboardCode.Left && !isLeft;
                const canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;

                if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {
                  const newScrollCoordinates = scrollContainer.scrollLeft + coordinatesDelta.x;
                  const canFullyScrollToNewCoordinates = direction === KeyboardCode.Right && newScrollCoordinates <= maxScroll.x || direction === KeyboardCode.Left && newScrollCoordinates >= minScroll.x;

                  if (canFullyScrollToNewCoordinates && !coordinatesDelta.y) {
                    // We don't need to update coordinates, the scroll adjustment alone will trigger
                    // logic to auto-detect the new container we are over
                    scrollContainer.scrollTo({
                      left: newScrollCoordinates,
                      behavior: scrollBehavior
                    });
                    return;
                  }

                  scrollDelta.x = direction === KeyboardCode.Right ? scrollContainer.scrollLeft - maxScroll.x : scrollContainer.scrollLeft - minScroll.x;
                  scrollContainer.scrollBy({
                    left: -scrollDelta.x,
                    behavior: scrollBehavior
                  });
                  break;
                } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {
                  const newScrollCoordinates = scrollContainer.scrollTop + coordinatesDelta.y;
                  const canFullyScrollToNewCoordinates = direction === KeyboardCode.Down && newScrollCoordinates <= maxScroll.y || direction === KeyboardCode.Up && newScrollCoordinates >= minScroll.y;

                  if (canFullyScrollToNewCoordinates && !coordinatesDelta.x) {
                    // We don't need to update coordinates, the scroll adjustment alone will trigger
                    // logic to auto-detect the new container we are over
                    scrollContainer.scrollTo({
                      top: newScrollCoordinates,
                      behavior: scrollBehavior
                    });
                    return;
                  }

                  scrollDelta.y = direction === KeyboardCode.Down ? scrollContainer.scrollTop - maxScroll.y : scrollContainer.scrollTop - minScroll.y;
                  scrollContainer.scrollBy({
                    top: -scrollDelta.y,
                    behavior: scrollBehavior
                  });
                  break;
                }
              }

              this.handleMove(event, add(subtract(newCoordinates, this.referenceCoordinates), scrollDelta));
            }
          }
        }

        handleMove(event, coordinates) {
          const {
            onMove
          } = this.props;
          event.preventDefault();
          onMove(coordinates);
        }

        handleEnd(event) {
          const {
            onEnd
          } = this.props;
          event.preventDefault();
          this.detach();
          onEnd();
        }

        handleCancel(event) {
          const {
            onCancel
          } = this.props;
          event.preventDefault();
          this.detach();
          onCancel();
        }

        detach() {
          this.listeners.removeAll();
          this.windowListeners.removeAll();
        }

      }
      KeyboardSensor.activators = [{
        eventName: 'onKeyDown',
        handler: (event, _ref, _ref2) => {
          let {
            keyboardCodes = defaultKeyboardCodes,
            onActivation
          } = _ref;
          let {
            active
          } = _ref2;
          const {
            code
          } = event.nativeEvent;

          if (keyboardCodes.start.includes(code)) {
            const activator = active.activatorNode.current;

            if (activator && event.target !== activator) {
              return false;
            }

            event.preventDefault();
            onActivation == null ? void 0 : onActivation({
              event: event.nativeEvent
            });
            return true;
          }

          return false;
        }
      }];

      function isDistanceConstraint(constraint) {
        return Boolean(constraint && 'distance' in constraint);
      }

      function isDelayConstraint(constraint) {
        return Boolean(constraint && 'delay' in constraint);
      }

      class AbstractPointerSensor {
        constructor(props, events, listenerTarget) {
          var _getEventCoordinates;

          if (listenerTarget === void 0) {
            listenerTarget = getEventListenerTarget(props.event.target);
          }

          this.props = void 0;
          this.events = void 0;
          this.autoScrollEnabled = true;
          this.document = void 0;
          this.activated = false;
          this.initialCoordinates = void 0;
          this.timeoutId = null;
          this.listeners = void 0;
          this.documentListeners = void 0;
          this.windowListeners = void 0;
          this.props = props;
          this.events = events;
          const {
            event
          } = props;
          const {
            target
          } = event;
          this.props = props;
          this.events = events;
          this.document = getOwnerDocument(target);
          this.documentListeners = new Listeners(this.document);
          this.listeners = new Listeners(listenerTarget);
          this.windowListeners = new Listeners(getWindow(target));
          this.initialCoordinates = (_getEventCoordinates = getEventCoordinates(event)) != null ? _getEventCoordinates : defaultCoordinates;
          this.handleStart = this.handleStart.bind(this);
          this.handleMove = this.handleMove.bind(this);
          this.handleEnd = this.handleEnd.bind(this);
          this.handleCancel = this.handleCancel.bind(this);
          this.handleKeydown = this.handleKeydown.bind(this);
          this.removeTextSelection = this.removeTextSelection.bind(this);
          this.attach();
        }

        attach() {
          const {
            events,
            props: {
              options: {
                activationConstraint
              }
            }
          } = this;
          this.listeners.add(events.move.name, this.handleMove, {
            passive: false
          });
          this.listeners.add(events.end.name, this.handleEnd);
          this.windowListeners.add(EventName.Resize, this.handleCancel);
          this.windowListeners.add(EventName.DragStart, preventDefault);
          this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
          this.windowListeners.add(EventName.ContextMenu, preventDefault);
          this.documentListeners.add(EventName.Keydown, this.handleKeydown);

          if (activationConstraint) {
            if (isDistanceConstraint(activationConstraint)) {
              return;
            }

            if (isDelayConstraint(activationConstraint)) {
              this.timeoutId = setTimeout(this.handleStart, activationConstraint.delay);
              return;
            }
          }

          this.handleStart();
        }

        detach() {
          this.listeners.removeAll();
          this.windowListeners.removeAll(); // Wait until the next event loop before removing document listeners
          // This is necessary because we listen for `click` and `selection` events on the document

          setTimeout(this.documentListeners.removeAll, 50);

          if (this.timeoutId !== null) {
            clearTimeout(this.timeoutId);
            this.timeoutId = null;
          }
        }

        handleStart() {
          const {
            initialCoordinates
          } = this;
          const {
            onStart
          } = this.props;

          if (initialCoordinates) {
            this.activated = true; // Stop propagation of click events once activation constraints are met

            this.documentListeners.add(EventName.Click, stopPropagation, {
              capture: true
            }); // Remove any text selection from the document

            this.removeTextSelection(); // Prevent further text selection while dragging

            this.documentListeners.add(EventName.SelectionChange, this.removeTextSelection);
            onStart(initialCoordinates);
          }
        }

        handleMove(event) {
          var _getEventCoordinates2;

          const {
            activated,
            initialCoordinates,
            props
          } = this;
          const {
            onMove,
            options: {
              activationConstraint
            }
          } = props;

          if (!initialCoordinates) {
            return;
          }

          const coordinates = (_getEventCoordinates2 = getEventCoordinates(event)) != null ? _getEventCoordinates2 : defaultCoordinates;
          const delta = subtract(initialCoordinates, coordinates);

          if (!activated && activationConstraint) {
            // Constraint validation
            if (isDelayConstraint(activationConstraint)) {
              if (hasExceededDistance(delta, activationConstraint.tolerance)) {
                return this.handleCancel();
              }

              return;
            }

            if (isDistanceConstraint(activationConstraint)) {
              if (activationConstraint.tolerance != null && hasExceededDistance(delta, activationConstraint.tolerance)) {
                return this.handleCancel();
              }

              if (hasExceededDistance(delta, activationConstraint.distance)) {
                return this.handleStart();
              }

              return;
            }
          }

          if (event.cancelable) {
            event.preventDefault();
          }

          onMove(coordinates);
        }

        handleEnd() {
          const {
            onEnd
          } = this.props;
          this.detach();
          onEnd();
        }

        handleCancel() {
          const {
            onCancel
          } = this.props;
          this.detach();
          onCancel();
        }

        handleKeydown(event) {
          if (event.code === KeyboardCode.Esc) {
            this.handleCancel();
          }
        }

        removeTextSelection() {
          var _this$document$getSel;

          (_this$document$getSel = this.document.getSelection()) == null ? void 0 : _this$document$getSel.removeAllRanges();
        }

      }

      const events = {
        move: {
          name: 'pointermove'
        },
        end: {
          name: 'pointerup'
        }
      };
      class PointerSensor extends AbstractPointerSensor {
        constructor(props) {
          const {
            event
          } = props; // Pointer events stop firing if the target is unmounted while dragging
          // Therefore we attach listeners to the owner document instead

          const listenerTarget = getOwnerDocument(event.target);
          super(props, events, listenerTarget);
        }

      }
      PointerSensor.activators = [{
        eventName: 'onPointerDown',
        handler: (_ref, _ref2) => {
          let {
            nativeEvent: event
          } = _ref;
          let {
            onActivation
          } = _ref2;

          if (!event.isPrimary || event.button !== 0) {
            return false;
          }

          onActivation == null ? void 0 : onActivation({
            event
          });
          return true;
        }
      }];

      const events$1 = {
        move: {
          name: 'mousemove'
        },
        end: {
          name: 'mouseup'
        }
      };
      var MouseButton;

      (function (MouseButton) {
        MouseButton[MouseButton["RightClick"] = 2] = "RightClick";
      })(MouseButton || (MouseButton = {}));

      class MouseSensor extends AbstractPointerSensor {
        constructor(props) {
          super(props, events$1, getOwnerDocument(props.event.target));
        }

      }
      MouseSensor.activators = [{
        eventName: 'onMouseDown',
        handler: (_ref, _ref2) => {
          let {
            nativeEvent: event
          } = _ref;
          let {
            onActivation
          } = _ref2;

          if (event.button === MouseButton.RightClick) {
            return false;
          }

          onActivation == null ? void 0 : onActivation({
            event
          });
          return true;
        }
      }];

      const events$2 = {
        move: {
          name: 'touchmove'
        },
        end: {
          name: 'touchend'
        }
      };
      class TouchSensor extends AbstractPointerSensor {
        constructor(props) {
          super(props, events$2);
        }

        static setup() {
          // Adding a non-capture and non-passive `touchmove` listener in order
          // to force `event.preventDefault()` calls to work in dynamically added
          // touchmove event handlers. This is required for iOS Safari.
          window.addEventListener(events$2.move.name, noop, {
            capture: false,
            passive: false
          });
          return function teardown() {
            window.removeEventListener(events$2.move.name, noop);
          }; // We create a new handler because the teardown function of another sensor
          // could remove our event listener if we use a referentially equal listener.

          function noop() {}
        }

      }
      TouchSensor.activators = [{
        eventName: 'onTouchStart',
        handler: (_ref, _ref2) => {
          let {
            nativeEvent: event
          } = _ref;
          let {
            onActivation
          } = _ref2;
          const {
            touches
          } = event;

          if (touches.length > 1) {
            return false;
          }

          onActivation == null ? void 0 : onActivation({
            event
          });
          return true;
        }
      }];

      var AutoScrollActivator;

      (function (AutoScrollActivator) {
        AutoScrollActivator[AutoScrollActivator["Pointer"] = 0] = "Pointer";
        AutoScrollActivator[AutoScrollActivator["DraggableRect"] = 1] = "DraggableRect";
      })(AutoScrollActivator || (AutoScrollActivator = {}));

      var TraversalOrder;

      (function (TraversalOrder) {
        TraversalOrder[TraversalOrder["TreeOrder"] = 0] = "TreeOrder";
        TraversalOrder[TraversalOrder["ReversedTreeOrder"] = 1] = "ReversedTreeOrder";
      })(TraversalOrder || (TraversalOrder = {}));

      function useAutoScroller(_ref) {
        let {
          acceleration,
          activator = AutoScrollActivator.Pointer,
          canScroll,
          draggingRect,
          enabled,
          interval = 5,
          order = TraversalOrder.TreeOrder,
          pointerCoordinates,
          scrollableAncestors,
          scrollableAncestorRects,
          delta,
          threshold
        } = _ref;
        const scrollIntent = useScrollIntent({
          delta,
          disabled: !enabled
        });
        const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();
        const scrollSpeed = useRef({
          x: 0,
          y: 0
        });
        const scrollDirection = useRef({
          x: 0,
          y: 0
        });
        const rect = useMemo(() => {
          switch (activator) {
            case AutoScrollActivator.Pointer:
              return pointerCoordinates ? {
                top: pointerCoordinates.y,
                bottom: pointerCoordinates.y,
                left: pointerCoordinates.x,
                right: pointerCoordinates.x
              } : null;

            case AutoScrollActivator.DraggableRect:
              return draggingRect;
          }
        }, [activator, draggingRect, pointerCoordinates]);
        const scrollContainerRef = useRef(null);
        const autoScroll = useCallback(() => {
          const scrollContainer = scrollContainerRef.current;

          if (!scrollContainer) {
            return;
          }

          const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;
          const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;
          scrollContainer.scrollBy(scrollLeft, scrollTop);
        }, []);
        const sortedScrollableAncestors = useMemo(() => order === TraversalOrder.TreeOrder ? [...scrollableAncestors].reverse() : scrollableAncestors, [order, scrollableAncestors]);
        useEffect(() => {
          if (!enabled || !scrollableAncestors.length || !rect) {
            clearAutoScrollInterval();
            return;
          }

          for (const scrollContainer of sortedScrollableAncestors) {
            if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {
              continue;
            }

            const index = scrollableAncestors.indexOf(scrollContainer);
            const scrollContainerRect = scrollableAncestorRects[index];

            if (!scrollContainerRect) {
              continue;
            }

            const {
              direction,
              speed
            } = getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, rect, acceleration, threshold);

            for (const axis of ['x', 'y']) {
              if (!scrollIntent[axis][direction[axis]]) {
                speed[axis] = 0;
                direction[axis] = 0;
              }
            }

            if (speed.x > 0 || speed.y > 0) {
              clearAutoScrollInterval();
              scrollContainerRef.current = scrollContainer;
              setAutoScrollInterval(autoScroll, interval);
              scrollSpeed.current = speed;
              scrollDirection.current = direction;
              return;
            }
          }

          scrollSpeed.current = {
            x: 0,
            y: 0
          };
          scrollDirection.current = {
            x: 0,
            y: 0
          };
          clearAutoScrollInterval();
        }, // eslint-disable-next-line react-hooks/exhaustive-deps
        [acceleration, autoScroll, canScroll, clearAutoScrollInterval, enabled, interval, // eslint-disable-next-line react-hooks/exhaustive-deps
        JSON.stringify(rect), // eslint-disable-next-line react-hooks/exhaustive-deps
        JSON.stringify(scrollIntent), setAutoScrollInterval, scrollableAncestors, sortedScrollableAncestors, scrollableAncestorRects, // eslint-disable-next-line react-hooks/exhaustive-deps
        JSON.stringify(threshold)]);
      }
      const defaultScrollIntent = {
        x: {
          [Direction.Backward]: false,
          [Direction.Forward]: false
        },
        y: {
          [Direction.Backward]: false,
          [Direction.Forward]: false
        }
      };

      function useScrollIntent(_ref2) {
        let {
          delta,
          disabled
        } = _ref2;
        const previousDelta = usePrevious(delta);
        return useLazyMemo(previousIntent => {
          if (disabled || !previousDelta || !previousIntent) {
            // Reset scroll intent tracking when auto-scrolling is disabled
            return defaultScrollIntent;
          }

          const direction = {
            x: Math.sign(delta.x - previousDelta.x),
            y: Math.sign(delta.y - previousDelta.y)
          }; // Keep track of the user intent to scroll in each direction for both axis

          return {
            x: {
              [Direction.Backward]: previousIntent.x[Direction.Backward] || direction.x === -1,
              [Direction.Forward]: previousIntent.x[Direction.Forward] || direction.x === 1
            },
            y: {
              [Direction.Backward]: previousIntent.y[Direction.Backward] || direction.y === -1,
              [Direction.Forward]: previousIntent.y[Direction.Forward] || direction.y === 1
            }
          };
        }, [disabled, delta, previousDelta]);
      }

      function useCachedNode(draggableNodes, id) {
        const draggableNode = id !== null ? draggableNodes.get(id) : undefined;
        const node = draggableNode ? draggableNode.node.current : null;
        return useLazyMemo(cachedNode => {
          var _ref;

          if (id === null) {
            return null;
          } // In some cases, the draggable node can unmount while dragging
          // This is the case for virtualized lists. In those situations,
          // we fall back to the last known value for that node.


          return (_ref = node != null ? node : cachedNode) != null ? _ref : null;
        }, [node, id]);
      }

      function useCombineActivators(sensors, getSyntheticHandler) {
        return useMemo(() => sensors.reduce((accumulator, sensor) => {
          const {
            sensor: Sensor
          } = sensor;
          const sensorActivators = Sensor.activators.map(activator => ({
            eventName: activator.eventName,
            handler: getSyntheticHandler(activator.handler, sensor)
          }));
          return [...accumulator, ...sensorActivators];
        }, []), [sensors, getSyntheticHandler]);
      }

      var MeasuringStrategy;

      (function (MeasuringStrategy) {
        MeasuringStrategy[MeasuringStrategy["Always"] = 0] = "Always";
        MeasuringStrategy[MeasuringStrategy["BeforeDragging"] = 1] = "BeforeDragging";
        MeasuringStrategy[MeasuringStrategy["WhileDragging"] = 2] = "WhileDragging";
      })(MeasuringStrategy || (MeasuringStrategy = {}));

      var MeasuringFrequency;

      (function (MeasuringFrequency) {
        MeasuringFrequency["Optimized"] = "optimized";
      })(MeasuringFrequency || (MeasuringFrequency = {}));

      const defaultValue = /*#__PURE__*/new Map();
      function useDroppableMeasuring(containers, _ref) {
        let {
          dragging,
          dependencies,
          config
        } = _ref;
        const [containerIdsScheduledForMeasurement, setContainerIdsScheduledForMeasurement] = useState(null);
        const measuringScheduled = containerIdsScheduledForMeasurement != null;
        const {
          frequency,
          measure,
          strategy
        } = config;
        const containersRef = useRef(containers);
        const disabled = isDisabled();
        const disabledRef = useLatestValue(disabled);
        const measureDroppableContainers = useCallback(function (ids) {
          if (ids === void 0) {
            ids = [];
          }

          if (disabledRef.current) {
            return;
          }

          setContainerIdsScheduledForMeasurement(value => value ? value.concat(ids) : ids);
        }, [disabledRef]);
        const timeoutId = useRef(null);
        const droppableRects = useLazyMemo(previousValue => {
          if (disabled && !dragging) {
            return defaultValue;
          }

          const ids = containerIdsScheduledForMeasurement;

          if (!previousValue || previousValue === defaultValue || containersRef.current !== containers || ids != null) {
            const map = new Map();

            for (let container of containers) {
              if (!container) {
                continue;
              }

              if (ids && ids.length > 0 && !ids.includes(container.id) && container.rect.current) {
                // This container does not need to be re-measured
                map.set(container.id, container.rect.current);
                continue;
              }

              const node = container.node.current;
              const rect = node ? new Rect(measure(node), node) : null;
              container.rect.current = rect;

              if (rect) {
                map.set(container.id, rect);
              }
            }

            return map;
          }

          return previousValue;
        }, [containers, containerIdsScheduledForMeasurement, dragging, disabled, measure]);
        useEffect(() => {
          containersRef.current = containers;
        }, [containers]);
        useEffect(() => {
          if (disabled) {
            return;
          }

          requestAnimationFrame(() => measureDroppableContainers());
        }, // eslint-disable-next-line react-hooks/exhaustive-deps
        [dragging, disabled]);
        useEffect(() => {
          if (measuringScheduled) {
            setContainerIdsScheduledForMeasurement(null);
          }
        }, [measuringScheduled]);
        useEffect(() => {
          if (disabled || typeof frequency !== 'number' || timeoutId.current !== null) {
            return;
          }

          timeoutId.current = setTimeout(() => {
            measureDroppableContainers();
            timeoutId.current = null;
          }, frequency);
        }, // eslint-disable-next-line react-hooks/exhaustive-deps
        [frequency, disabled, measureDroppableContainers, ...dependencies]);
        return {
          droppableRects,
          measureDroppableContainers,
          measuringScheduled
        };

        function isDisabled() {
          switch (strategy) {
            case MeasuringStrategy.Always:
              return false;

            case MeasuringStrategy.BeforeDragging:
              return dragging;

            default:
              return !dragging;
          }
        }
      }

      function useInitialValue(value, computeFn) {
        return useLazyMemo(previousValue => {
          if (!value) {
            return null;
          }

          if (previousValue) {
            return previousValue;
          }

          return typeof computeFn === 'function' ? computeFn(value) : value;
        }, [computeFn, value]);
      }

      function useInitialRect(node, measure) {
        return useInitialValue(node, measure);
      }

      /**
       * Returns a new MutationObserver instance.
       * If `MutationObserver` is undefined in the execution environment, returns `undefined`.
       */

      function useMutationObserver(_ref) {
        let {
          callback,
          disabled
        } = _ref;
        const handleMutations = useEvent(callback);
        const mutationObserver = useMemo(() => {
          if (disabled || typeof window === 'undefined' || typeof window.MutationObserver === 'undefined') {
            return undefined;
          }

          const {
            MutationObserver
          } = window;
          return new MutationObserver(handleMutations);
        }, [handleMutations, disabled]);
        useEffect(() => {
          return () => mutationObserver == null ? void 0 : mutationObserver.disconnect();
        }, [mutationObserver]);
        return mutationObserver;
      }

      /**
       * Returns a new ResizeObserver instance bound to the `onResize` callback.
       * If `ResizeObserver` is undefined in the execution environment, returns `undefined`.
       */

      function useResizeObserver(_ref) {
        let {
          callback,
          disabled
        } = _ref;
        const handleResize = useEvent(callback);
        const resizeObserver = useMemo(() => {
          if (disabled || typeof window === 'undefined' || typeof window.ResizeObserver === 'undefined') {
            return undefined;
          }

          const {
            ResizeObserver
          } = window;
          return new ResizeObserver(handleResize);
        }, // eslint-disable-next-line react-hooks/exhaustive-deps
        [disabled]);
        useEffect(() => {
          return () => resizeObserver == null ? void 0 : resizeObserver.disconnect();
        }, [resizeObserver]);
        return resizeObserver;
      }

      function defaultMeasure(element) {
        return new Rect(getClientRect(element), element);
      }

      function useRect(element, measure, fallbackRect) {
        if (measure === void 0) {
          measure = defaultMeasure;
        }

        const [rect, measureRect] = useReducer(reducer, null);
        const mutationObserver = useMutationObserver({
          callback(records) {
            if (!element) {
              return;
            }

            for (const record of records) {
              const {
                type,
                target
              } = record;

              if (type === 'childList' && target instanceof HTMLElement && target.contains(element)) {
                measureRect();
                break;
              }
            }
          }

        });
        const resizeObserver = useResizeObserver({
          callback: measureRect
        });
        useIsomorphicLayoutEffect(() => {
          measureRect();

          if (element) {
            resizeObserver == null ? void 0 : resizeObserver.observe(element);
            mutationObserver == null ? void 0 : mutationObserver.observe(document.body, {
              childList: true,
              subtree: true
            });
          } else {
            resizeObserver == null ? void 0 : resizeObserver.disconnect();
            mutationObserver == null ? void 0 : mutationObserver.disconnect();
          }
        }, [element]);
        return rect;

        function reducer(currentRect) {
          if (!element) {
            return null;
          }

          if (element.isConnected === false) {
            var _ref;

            // Fall back to last rect we measured if the element is
            // no longer connected to the DOM.
            return (_ref = currentRect != null ? currentRect : fallbackRect) != null ? _ref : null;
          }

          const newRect = measure(element);

          if (JSON.stringify(currentRect) === JSON.stringify(newRect)) {
            return currentRect;
          }

          return newRect;
        }
      }

      function useRectDelta(rect) {
        const initialRect = useInitialValue(rect);
        return getRectDelta(rect, initialRect);
      }

      const defaultValue$1 = [];
      function useScrollableAncestors(node) {
        const previousNode = useRef(node);
        const ancestors = useLazyMemo(previousValue => {
          if (!node) {
            return defaultValue$1;
          }

          if (previousValue && previousValue !== defaultValue$1 && node && previousNode.current && node.parentNode === previousNode.current.parentNode) {
            return previousValue;
          }

          return getScrollableAncestors(node);
        }, [node]);
        useEffect(() => {
          previousNode.current = node;
        }, [node]);
        return ancestors;
      }

      function useScrollOffsets(elements) {
        const [scrollCoordinates, setScrollCoordinates] = useState(null);
        const prevElements = useRef(elements); // To-do: Throttle the handleScroll callback

        const handleScroll = useCallback(event => {
          const scrollingElement = getScrollableElement(event.target);

          if (!scrollingElement) {
            return;
          }

          setScrollCoordinates(scrollCoordinates => {
            if (!scrollCoordinates) {
              return null;
            }

            scrollCoordinates.set(scrollingElement, getScrollCoordinates(scrollingElement));
            return new Map(scrollCoordinates);
          });
        }, []);
        useEffect(() => {
          const previousElements = prevElements.current;

          if (elements !== previousElements) {
            cleanup(previousElements);
            const entries = elements.map(element => {
              const scrollableElement = getScrollableElement(element);

              if (scrollableElement) {
                scrollableElement.addEventListener('scroll', handleScroll, {
                  passive: true
                });
                return [scrollableElement, getScrollCoordinates(scrollableElement)];
              }

              return null;
            }).filter(entry => entry != null);
            setScrollCoordinates(entries.length ? new Map(entries) : null);
            prevElements.current = elements;
          }

          return () => {
            cleanup(elements);
            cleanup(previousElements);
          };

          function cleanup(elements) {
            elements.forEach(element => {
              const scrollableElement = getScrollableElement(element);
              scrollableElement == null ? void 0 : scrollableElement.removeEventListener('scroll', handleScroll);
            });
          }
        }, [handleScroll, elements]);
        return useMemo(() => {
          if (elements.length) {
            return scrollCoordinates ? Array.from(scrollCoordinates.values()).reduce((acc, coordinates) => add(acc, coordinates), defaultCoordinates) : getScrollOffsets(elements);
          }

          return defaultCoordinates;
        }, [elements, scrollCoordinates]);
      }

      function useScrollOffsetsDelta(scrollOffsets, dependencies) {
        if (dependencies === void 0) {
          dependencies = [];
        }

        const initialScrollOffsets = useRef(null);
        useEffect(() => {
          initialScrollOffsets.current = null;
        }, // eslint-disable-next-line react-hooks/exhaustive-deps
        dependencies);
        useEffect(() => {
          const hasScrollOffsets = scrollOffsets !== defaultCoordinates;

          if (hasScrollOffsets && !initialScrollOffsets.current) {
            initialScrollOffsets.current = scrollOffsets;
          }

          if (!hasScrollOffsets && initialScrollOffsets.current) {
            initialScrollOffsets.current = null;
          }
        }, [scrollOffsets]);
        return initialScrollOffsets.current ? subtract(scrollOffsets, initialScrollOffsets.current) : defaultCoordinates;
      }

      function useSensorSetup(sensors) {
        useEffect(() => {
          if (!canUseDOM) {
            return;
          }

          const teardownFns = sensors.map(_ref => {
            let {
              sensor
            } = _ref;
            return sensor.setup == null ? void 0 : sensor.setup();
          });
          return () => {
            for (const teardown of teardownFns) {
              teardown == null ? void 0 : teardown();
            }
          };
        }, // TO-DO: Sensors length could theoretically change which would not be a valid dependency
        // eslint-disable-next-line react-hooks/exhaustive-deps
        sensors.map(_ref2 => {
          let {
            sensor
          } = _ref2;
          return sensor;
        }));
      }

      function useSyntheticListeners(listeners, id) {
        return useMemo(() => {
          return listeners.reduce((acc, _ref) => {
            let {
              eventName,
              handler
            } = _ref;

            acc[eventName] = event => {
              handler(event, id);
            };

            return acc;
          }, {});
        }, [listeners, id]);
      }

      function useWindowRect(element) {
        return useMemo(() => element ? getWindowClientRect(element) : null, [element]);
      }

      const defaultValue$2 = [];
      function useRects(elements, measure) {
        if (measure === void 0) {
          measure = getClientRect;
        }

        const [firstElement] = elements;
        const windowRect = useWindowRect(firstElement ? getWindow(firstElement) : null);
        const [rects, measureRects] = useReducer(reducer, defaultValue$2);
        const resizeObserver = useResizeObserver({
          callback: measureRects
        });

        if (elements.length > 0 && rects === defaultValue$2) {
          measureRects();
        }

        useIsomorphicLayoutEffect(() => {
          if (elements.length) {
            elements.forEach(element => resizeObserver == null ? void 0 : resizeObserver.observe(element));
          } else {
            resizeObserver == null ? void 0 : resizeObserver.disconnect();
            measureRects();
          }
        }, [elements]);
        return rects;

        function reducer() {
          if (!elements.length) {
            return defaultValue$2;
          }

          return elements.map(element => isDocumentScrollingElement(element) ? windowRect : new Rect(measure(element), element));
        }
      }

      function getMeasurableNode(node) {
        if (!node) {
          return null;
        }

        if (node.children.length > 1) {
          return node;
        }

        const firstChild = node.children[0];
        return isHTMLElement(firstChild) ? firstChild : node;
      }

      function useDragOverlayMeasuring(_ref) {
        let {
          measure
        } = _ref;
        const [rect, setRect] = useState(null);
        const handleResize = useCallback(entries => {
          for (const {
            target
          } of entries) {
            if (isHTMLElement(target)) {
              setRect(rect => {
                const newRect = measure(target);
                return rect ? { ...rect,
                  width: newRect.width,
                  height: newRect.height
                } : newRect;
              });
              break;
            }
          }
        }, [measure]);
        const resizeObserver = useResizeObserver({
          callback: handleResize
        });
        const handleNodeChange = useCallback(element => {
          const node = getMeasurableNode(element);
          resizeObserver == null ? void 0 : resizeObserver.disconnect();

          if (node) {
            resizeObserver == null ? void 0 : resizeObserver.observe(node);
          }

          setRect(node ? measure(node) : null);
        }, [measure, resizeObserver]);
        const [nodeRef, setRef] = useNodeRef(handleNodeChange);
        return useMemo(() => ({
          nodeRef,
          rect,
          setRef
        }), [rect, nodeRef, setRef]);
      }

      const defaultSensors = [{
        sensor: PointerSensor,
        options: {}
      }, {
        sensor: KeyboardSensor,
        options: {}
      }];
      const defaultData = {
        current: {}
      };
      const defaultMeasuringConfiguration = {
        draggable: {
          measure: getTransformAgnosticClientRect
        },
        droppable: {
          measure: getTransformAgnosticClientRect,
          strategy: MeasuringStrategy.WhileDragging,
          frequency: MeasuringFrequency.Optimized
        },
        dragOverlay: {
          measure: getClientRect
        }
      };

      class DroppableContainersMap extends Map {
        get(id) {
          var _super$get;

          return id != null ? (_super$get = super.get(id)) != null ? _super$get : undefined : undefined;
        }

        toArray() {
          return Array.from(this.values());
        }

        getEnabled() {
          return this.toArray().filter(_ref => {
            let {
              disabled
            } = _ref;
            return !disabled;
          });
        }

        getNodeFor(id) {
          var _this$get$node$curren, _this$get;

          return (_this$get$node$curren = (_this$get = this.get(id)) == null ? void 0 : _this$get.node.current) != null ? _this$get$node$curren : undefined;
        }

      }

      const defaultPublicContext = {
        activatorEvent: null,
        active: null,
        activeNode: null,
        activeNodeRect: null,
        collisions: null,
        containerNodeRect: null,
        draggableNodes: /*#__PURE__*/new Map(),
        droppableRects: /*#__PURE__*/new Map(),
        droppableContainers: /*#__PURE__*/new DroppableContainersMap(),
        over: null,
        dragOverlay: {
          nodeRef: {
            current: null
          },
          rect: null,
          setRef: noop
        },
        scrollableAncestors: [],
        scrollableAncestorRects: [],
        measuringConfiguration: defaultMeasuringConfiguration,
        measureDroppableContainers: noop,
        windowRect: null,
        measuringScheduled: false
      };
      const defaultInternalContext = {
        activatorEvent: null,
        activators: [],
        active: null,
        activeNodeRect: null,
        ariaDescribedById: {
          draggable: ''
        },
        dispatch: noop,
        draggableNodes: /*#__PURE__*/new Map(),
        over: null,
        measureDroppableContainers: noop
      };
      const InternalContext = /*#__PURE__*/createContext(defaultInternalContext);
      const PublicContext = /*#__PURE__*/createContext(defaultPublicContext);

      function getInitialState() {
        return {
          draggable: {
            active: null,
            initialCoordinates: {
              x: 0,
              y: 0
            },
            nodes: new Map(),
            translate: {
              x: 0,
              y: 0
            }
          },
          droppable: {
            containers: new DroppableContainersMap()
          }
        };
      }
      function reducer(state, action) {
        switch (action.type) {
          case Action.DragStart:
            return { ...state,
              draggable: { ...state.draggable,
                initialCoordinates: action.initialCoordinates,
                active: action.active
              }
            };

          case Action.DragMove:
            if (!state.draggable.active) {
              return state;
            }

            return { ...state,
              draggable: { ...state.draggable,
                translate: {
                  x: action.coordinates.x - state.draggable.initialCoordinates.x,
                  y: action.coordinates.y - state.draggable.initialCoordinates.y
                }
              }
            };

          case Action.DragEnd:
          case Action.DragCancel:
            return { ...state,
              draggable: { ...state.draggable,
                active: null,
                initialCoordinates: {
                  x: 0,
                  y: 0
                },
                translate: {
                  x: 0,
                  y: 0
                }
              }
            };

          case Action.RegisterDroppable:
            {
              const {
                element
              } = action;
              const {
                id
              } = element;
              const containers = new DroppableContainersMap(state.droppable.containers);
              containers.set(id, element);
              return { ...state,
                droppable: { ...state.droppable,
                  containers
                }
              };
            }

          case Action.SetDroppableDisabled:
            {
              const {
                id,
                key,
                disabled
              } = action;
              const element = state.droppable.containers.get(id);

              if (!element || key !== element.key) {
                return state;
              }

              const containers = new DroppableContainersMap(state.droppable.containers);
              containers.set(id, { ...element,
                disabled
              });
              return { ...state,
                droppable: { ...state.droppable,
                  containers
                }
              };
            }

          case Action.UnregisterDroppable:
            {
              const {
                id,
                key
              } = action;
              const element = state.droppable.containers.get(id);

              if (!element || key !== element.key) {
                return state;
              }

              const containers = new DroppableContainersMap(state.droppable.containers);
              containers.delete(id);
              return { ...state,
                droppable: { ...state.droppable,
                  containers
                }
              };
            }

          default:
            {
              return state;
            }
        }
      }

      function RestoreFocus(_ref) {
        let {
          disabled
        } = _ref;
        const {
          active,
          activatorEvent,
          draggableNodes
        } = useContext(InternalContext);
        const previousActivatorEvent = usePrevious(activatorEvent);
        const previousActiveId = usePrevious(active == null ? void 0 : active.id); // Restore keyboard focus on the activator node

        useEffect(() => {
          if (disabled) {
            return;
          }

          if (!activatorEvent && previousActivatorEvent && previousActiveId != null) {
            if (!isKeyboardEvent(previousActivatorEvent)) {
              return;
            }

            if (document.activeElement === previousActivatorEvent.target) {
              // No need to restore focus
              return;
            }

            const draggableNode = draggableNodes.get(previousActiveId);

            if (!draggableNode) {
              return;
            }

            const {
              activatorNode,
              node
            } = draggableNode;

            if (!activatorNode.current && !node.current) {
              return;
            }

            requestAnimationFrame(() => {
              for (const element of [activatorNode.current, node.current]) {
                if (!element) {
                  continue;
                }

                const focusableNode = findFirstFocusableNode(element);

                if (focusableNode) {
                  focusableNode.focus();
                  break;
                }
              }
            });
          }
        }, [activatorEvent, disabled, draggableNodes, previousActiveId, previousActivatorEvent]);
        return null;
      }

      function applyModifiers(modifiers, _ref) {
        let {
          transform,
          ...args
        } = _ref;
        return modifiers != null && modifiers.length ? modifiers.reduce((accumulator, modifier) => {
          return modifier({
            transform: accumulator,
            ...args
          });
        }, transform) : transform;
      }

      function useMeasuringConfiguration(config) {
        return useMemo(() => ({
          draggable: { ...defaultMeasuringConfiguration.draggable,
            ...(config == null ? void 0 : config.draggable)
          },
          droppable: { ...defaultMeasuringConfiguration.droppable,
            ...(config == null ? void 0 : config.droppable)
          },
          dragOverlay: { ...defaultMeasuringConfiguration.dragOverlay,
            ...(config == null ? void 0 : config.dragOverlay)
          }
        }), // eslint-disable-next-line react-hooks/exhaustive-deps
        [config == null ? void 0 : config.draggable, config == null ? void 0 : config.droppable, config == null ? void 0 : config.dragOverlay]);
      }

      function useLayoutShiftScrollCompensation(_ref) {
        let {
          activeNode,
          measure,
          initialRect,
          config = true
        } = _ref;
        const initialized = useRef(false);
        const {
          x,
          y
        } = typeof config === 'boolean' ? {
          x: config,
          y: config
        } : config;
        useIsomorphicLayoutEffect(() => {
          const disabled = !x && !y;

          if (disabled || !activeNode) {
            initialized.current = false;
            return;
          }

          if (initialized.current || !initialRect) {
            // Return early if layout shift scroll compensation was already attempted
            // or if there is no initialRect to compare to.
            return;
          } // Get the most up to date node ref for the active draggable


          const node = activeNode == null ? void 0 : activeNode.node.current;

          if (!node || node.isConnected === false) {
            // Return early if there is no attached node ref or if the node is
            // disconnected from the document.
            return;
          }

          const rect = measure(node);
          const rectDelta = getRectDelta(rect, initialRect);

          if (!x) {
            rectDelta.x = 0;
          }

          if (!y) {
            rectDelta.y = 0;
          } // Only perform layout shift scroll compensation once


          initialized.current = true;

          if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {
            const firstScrollableAncestor = getFirstScrollableAncestor(node);

            if (firstScrollableAncestor) {
              firstScrollableAncestor.scrollBy({
                top: rectDelta.y,
                left: rectDelta.x
              });
            }
          }
        }, [activeNode, x, y, initialRect, measure]);
      }

      const ActiveDraggableContext = /*#__PURE__*/createContext({ ...defaultCoordinates,
        scaleX: 1,
        scaleY: 1
      });
      var Status;

      (function (Status) {
        Status[Status["Uninitialized"] = 0] = "Uninitialized";
        Status[Status["Initializing"] = 1] = "Initializing";
        Status[Status["Initialized"] = 2] = "Initialized";
      })(Status || (Status = {}));

      const DndContext = /*#__PURE__*/memo(function DndContext(_ref) {
        var _sensorContext$curren, _dragOverlay$nodeRef$, _dragOverlay$rect, _over$rect;

        let {
          id,
          accessibility,
          autoScroll = true,
          children,
          sensors = defaultSensors,
          collisionDetection = rectIntersection,
          measuring,
          modifiers,
          ...props
        } = _ref;
        const store = useReducer(reducer, undefined, getInitialState);
        const [state, dispatch] = store;
        const [dispatchMonitorEvent, registerMonitorListener] = useDndMonitorProvider();
        const [status, setStatus] = useState(Status.Uninitialized);
        const isInitialized = status === Status.Initialized;
        const {
          draggable: {
            active: activeId,
            nodes: draggableNodes,
            translate
          },
          droppable: {
            containers: droppableContainers
          }
        } = state;
        const node = activeId ? draggableNodes.get(activeId) : null;
        const activeRects = useRef({
          initial: null,
          translated: null
        });
        const active = useMemo(() => {
          var _node$data;

          return activeId != null ? {
            id: activeId,
            // It's possible for the active node to unmount while dragging
            data: (_node$data = node == null ? void 0 : node.data) != null ? _node$data : defaultData,
            rect: activeRects
          } : null;
        }, [activeId, node]);
        const activeRef = useRef(null);
        const [activeSensor, setActiveSensor] = useState(null);
        const [activatorEvent, setActivatorEvent] = useState(null);
        const latestProps = useLatestValue(props, Object.values(props));
        const draggableDescribedById = useUniqueId("DndDescribedBy", id);
        const enabledDroppableContainers = useMemo(() => droppableContainers.getEnabled(), [droppableContainers]);
        const measuringConfiguration = useMeasuringConfiguration(measuring);
        const {
          droppableRects,
          measureDroppableContainers,
          measuringScheduled
        } = useDroppableMeasuring(enabledDroppableContainers, {
          dragging: isInitialized,
          dependencies: [translate.x, translate.y],
          config: measuringConfiguration.droppable
        });
        const activeNode = useCachedNode(draggableNodes, activeId);
        const activationCoordinates = useMemo(() => activatorEvent ? getEventCoordinates(activatorEvent) : null, [activatorEvent]);
        const autoScrollOptions = getAutoScrollerOptions();
        const initialActiveNodeRect = useInitialRect(activeNode, measuringConfiguration.draggable.measure);
        useLayoutShiftScrollCompensation({
          activeNode: activeId ? draggableNodes.get(activeId) : null,
          config: autoScrollOptions.layoutShiftCompensation,
          initialRect: initialActiveNodeRect,
          measure: measuringConfiguration.draggable.measure
        });
        const activeNodeRect = useRect(activeNode, measuringConfiguration.draggable.measure, initialActiveNodeRect);
        const containerNodeRect = useRect(activeNode ? activeNode.parentElement : null);
        const sensorContext = useRef({
          activatorEvent: null,
          active: null,
          activeNode,
          collisionRect: null,
          collisions: null,
          droppableRects,
          draggableNodes,
          draggingNode: null,
          draggingNodeRect: null,
          droppableContainers,
          over: null,
          scrollableAncestors: [],
          scrollAdjustedTranslate: null
        });
        const overNode = droppableContainers.getNodeFor((_sensorContext$curren = sensorContext.current.over) == null ? void 0 : _sensorContext$curren.id);
        const dragOverlay = useDragOverlayMeasuring({
          measure: measuringConfiguration.dragOverlay.measure
        }); // Use the rect of the drag overlay if it is mounted

        const draggingNode = (_dragOverlay$nodeRef$ = dragOverlay.nodeRef.current) != null ? _dragOverlay$nodeRef$ : activeNode;
        const draggingNodeRect = isInitialized ? (_dragOverlay$rect = dragOverlay.rect) != null ? _dragOverlay$rect : activeNodeRect : null;
        const usesDragOverlay = Boolean(dragOverlay.nodeRef.current && dragOverlay.rect); // The delta between the previous and new position of the draggable node
        // is only relevant when there is no drag overlay

        const nodeRectDelta = useRectDelta(usesDragOverlay ? null : activeNodeRect); // Get the window rect of the dragging node

        const windowRect = useWindowRect(draggingNode ? getWindow(draggingNode) : null); // Get scrollable ancestors of the dragging node

        const scrollableAncestors = useScrollableAncestors(isInitialized ? overNode != null ? overNode : activeNode : null);
        const scrollableAncestorRects = useRects(scrollableAncestors); // Apply modifiers

        const modifiedTranslate = applyModifiers(modifiers, {
          transform: {
            x: translate.x - nodeRectDelta.x,
            y: translate.y - nodeRectDelta.y,
            scaleX: 1,
            scaleY: 1
          },
          activatorEvent,
          active,
          activeNodeRect,
          containerNodeRect,
          draggingNodeRect,
          over: sensorContext.current.over,
          overlayNodeRect: dragOverlay.rect,
          scrollableAncestors,
          scrollableAncestorRects,
          windowRect
        });
        const pointerCoordinates = activationCoordinates ? add(activationCoordinates, translate) : null;
        const scrollOffsets = useScrollOffsets(scrollableAncestors); // Represents the scroll delta since dragging was initiated

        const scrollAdjustment = useScrollOffsetsDelta(scrollOffsets); // Represents the scroll delta since the last time the active node rect was measured

        const activeNodeScrollDelta = useScrollOffsetsDelta(scrollOffsets, [activeNodeRect]);
        const scrollAdjustedTranslate = add(modifiedTranslate, scrollAdjustment);
        const collisionRect = draggingNodeRect ? getAdjustedRect(draggingNodeRect, modifiedTranslate) : null;
        const collisions = active && collisionRect ? collisionDetection({
          active,
          collisionRect,
          droppableRects,
          droppableContainers: enabledDroppableContainers,
          pointerCoordinates
        }) : null;
        const overId = getFirstCollision(collisions, 'id');
        const [over, setOver] = useState(null); // When there is no drag overlay used, we need to account for the
        // window scroll delta

        const appliedTranslate = usesDragOverlay ? modifiedTranslate : add(modifiedTranslate, activeNodeScrollDelta);
        const transform = adjustScale(appliedTranslate, (_over$rect = over == null ? void 0 : over.rect) != null ? _over$rect : null, activeNodeRect);
        const instantiateSensor = useCallback((event, _ref2) => {
          let {
            sensor: Sensor,
            options
          } = _ref2;

          if (activeRef.current == null) {
            return;
          }

          const activeNode = draggableNodes.get(activeRef.current);

          if (!activeNode) {
            return;
          }

          const activatorEvent = event.nativeEvent;
          const sensorInstance = new Sensor({
            active: activeRef.current,
            activeNode,
            event: activatorEvent,
            options,
            // Sensors need to be instantiated with refs for arguments that change over time
            // otherwise they are frozen in time with the stale arguments
            context: sensorContext,

            onStart(initialCoordinates) {
              const id = activeRef.current;

              if (id == null) {
                return;
              }

              const draggableNode = draggableNodes.get(id);

              if (!draggableNode) {
                return;
              }

              const {
                onDragStart
              } = latestProps.current;
              const event = {
                active: {
                  id,
                  data: draggableNode.data,
                  rect: activeRects
                }
              };
              unstable_batchedUpdates(() => {
                onDragStart == null ? void 0 : onDragStart(event);
                setStatus(Status.Initializing);
                dispatch({
                  type: Action.DragStart,
                  initialCoordinates,
                  active: id
                });
                dispatchMonitorEvent({
                  type: 'onDragStart',
                  event
                });
              });
            },

            onMove(coordinates) {
              dispatch({
                type: Action.DragMove,
                coordinates
              });
            },

            onEnd: createHandler(Action.DragEnd),
            onCancel: createHandler(Action.DragCancel)
          });
          unstable_batchedUpdates(() => {
            setActiveSensor(sensorInstance);
            setActivatorEvent(event.nativeEvent);
          });

          function createHandler(type) {
            return async function handler() {
              const {
                active,
                collisions,
                over,
                scrollAdjustedTranslate
              } = sensorContext.current;
              let event = null;

              if (active && scrollAdjustedTranslate) {
                const {
                  cancelDrop
                } = latestProps.current;
                event = {
                  activatorEvent,
                  active: active,
                  collisions,
                  delta: scrollAdjustedTranslate,
                  over
                };

                if (type === Action.DragEnd && typeof cancelDrop === 'function') {
                  const shouldCancel = await Promise.resolve(cancelDrop(event));

                  if (shouldCancel) {
                    type = Action.DragCancel;
                  }
                }
              }

              activeRef.current = null;
              unstable_batchedUpdates(() => {
                dispatch({
                  type
                });
                setStatus(Status.Uninitialized);
                setOver(null);
                setActiveSensor(null);
                setActivatorEvent(null);
                const eventName = type === Action.DragEnd ? 'onDragEnd' : 'onDragCancel';

                if (event) {
                  const handler = latestProps.current[eventName];
                  handler == null ? void 0 : handler(event);
                  dispatchMonitorEvent({
                    type: eventName,
                    event
                  });
                }
              });
            };
          }
        }, // eslint-disable-next-line react-hooks/exhaustive-deps
        [draggableNodes]);
        const bindActivatorToSensorInstantiator = useCallback((handler, sensor) => {
          return (event, active) => {
            const nativeEvent = event.nativeEvent;
            const activeDraggableNode = draggableNodes.get(active);

            if ( // Another sensor is already instantiating
            activeRef.current !== null || // No active draggable
            !activeDraggableNode || // Event has already been captured
            nativeEvent.dndKit || nativeEvent.defaultPrevented) {
              return;
            }

            const activationContext = {
              active: activeDraggableNode
            };
            const shouldActivate = handler(event, sensor.options, activationContext);

            if (shouldActivate === true) {
              nativeEvent.dndKit = {
                capturedBy: sensor.sensor
              };
              activeRef.current = active;
              instantiateSensor(event, sensor);
            }
          };
        }, [draggableNodes, instantiateSensor]);
        const activators = useCombineActivators(sensors, bindActivatorToSensorInstantiator);
        useSensorSetup(sensors);
        useIsomorphicLayoutEffect(() => {
          if (activeNodeRect && status === Status.Initializing) {
            setStatus(Status.Initialized);
          }
        }, [activeNodeRect, status]);
        useEffect(() => {
          const {
            onDragMove
          } = latestProps.current;
          const {
            active,
            activatorEvent,
            collisions,
            over
          } = sensorContext.current;

          if (!active || !activatorEvent) {
            return;
          }

          const event = {
            active,
            activatorEvent,
            collisions,
            delta: {
              x: scrollAdjustedTranslate.x,
              y: scrollAdjustedTranslate.y
            },
            over
          };
          unstable_batchedUpdates(() => {
            onDragMove == null ? void 0 : onDragMove(event);
            dispatchMonitorEvent({
              type: 'onDragMove',
              event
            });
          });
        }, // eslint-disable-next-line react-hooks/exhaustive-deps
        [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]);
        useEffect(() => {
          const {
            active,
            activatorEvent,
            collisions,
            droppableContainers,
            scrollAdjustedTranslate
          } = sensorContext.current;

          if (!active || activeRef.current == null || !activatorEvent || !scrollAdjustedTranslate) {
            return;
          }

          const {
            onDragOver
          } = latestProps.current;
          const overContainer = droppableContainers.get(overId);
          const over = overContainer && overContainer.rect.current ? {
            id: overContainer.id,
            rect: overContainer.rect.current,
            data: overContainer.data,
            disabled: overContainer.disabled
          } : null;
          const event = {
            active,
            activatorEvent,
            collisions,
            delta: {
              x: scrollAdjustedTranslate.x,
              y: scrollAdjustedTranslate.y
            },
            over
          };
          unstable_batchedUpdates(() => {
            setOver(over);
            onDragOver == null ? void 0 : onDragOver(event);
            dispatchMonitorEvent({
              type: 'onDragOver',
              event
            });
          });
        }, // eslint-disable-next-line react-hooks/exhaustive-deps
        [overId]);
        useIsomorphicLayoutEffect(() => {
          sensorContext.current = {
            activatorEvent,
            active,
            activeNode,
            collisionRect,
            collisions,
            droppableRects,
            draggableNodes,
            draggingNode,
            draggingNodeRect,
            droppableContainers,
            over,
            scrollableAncestors,
            scrollAdjustedTranslate
          };
          activeRects.current = {
            initial: draggingNodeRect,
            translated: collisionRect
          };
        }, [active, activeNode, collisions, collisionRect, draggableNodes, draggingNode, draggingNodeRect, droppableRects, droppableContainers, over, scrollableAncestors, scrollAdjustedTranslate]);
        useAutoScroller({ ...autoScrollOptions,
          delta: translate,
          draggingRect: collisionRect,
          pointerCoordinates,
          scrollableAncestors,
          scrollableAncestorRects
        });
        const publicContext = useMemo(() => {
          const context = {
            active,
            activeNode,
            activeNodeRect,
            activatorEvent,
            collisions,
            containerNodeRect,
            dragOverlay,
            draggableNodes,
            droppableContainers,
            droppableRects,
            over,
            measureDroppableContainers,
            scrollableAncestors,
            scrollableAncestorRects,
            measuringConfiguration,
            measuringScheduled,
            windowRect
          };
          return context;
        }, [active, activeNode, activeNodeRect, activatorEvent, collisions, containerNodeRect, dragOverlay, draggableNodes, droppableContainers, droppableRects, over, measureDroppableContainers, scrollableAncestors, scrollableAncestorRects, measuringConfiguration, measuringScheduled, windowRect]);
        const internalContext = useMemo(() => {
          const context = {
            activatorEvent,
            activators,
            active,
            activeNodeRect,
            ariaDescribedById: {
              draggable: draggableDescribedById
            },
            dispatch,
            draggableNodes,
            over,
            measureDroppableContainers
          };
          return context;
        }, [activatorEvent, activators, active, activeNodeRect, dispatch, draggableDescribedById, draggableNodes, over, measureDroppableContainers]);
        return React.createElement(DndMonitorContext.Provider, {
          value: registerMonitorListener
        }, React.createElement(InternalContext.Provider, {
          value: internalContext
        }, React.createElement(PublicContext.Provider, {
          value: publicContext
        }, React.createElement(ActiveDraggableContext.Provider, {
          value: transform
        }, children)), React.createElement(RestoreFocus, {
          disabled: (accessibility == null ? void 0 : accessibility.restoreFocus) === false
        })), React.createElement(Accessibility, { ...accessibility,
          hiddenTextDescribedById: draggableDescribedById
        }));

        function getAutoScrollerOptions() {
          const activeSensorDisablesAutoscroll = (activeSensor == null ? void 0 : activeSensor.autoScrollEnabled) === false;
          const autoScrollGloballyDisabled = typeof autoScroll === 'object' ? autoScroll.enabled === false : autoScroll === false;
          const enabled = isInitialized && !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;

          if (typeof autoScroll === 'object') {
            return { ...autoScroll,
              enabled
            };
          }

          return {
            enabled
          };
        }
      });

      const NullContext = /*#__PURE__*/createContext(null);
      const defaultRole = 'button';
      const ID_PREFIX$1 = 'Droppable';
      function useDraggable(_ref) {
        let {
          id,
          data,
          disabled = false,
          attributes
        } = _ref;
        const key = useUniqueId(ID_PREFIX$1);
        const {
          activators,
          activatorEvent,
          active,
          activeNodeRect,
          ariaDescribedById,
          draggableNodes,
          over
        } = useContext(InternalContext);
        const {
          role = defaultRole,
          roleDescription = 'draggable',
          tabIndex = 0
        } = attributes != null ? attributes : {};
        const isDragging = (active == null ? void 0 : active.id) === id;
        const transform = useContext(isDragging ? ActiveDraggableContext : NullContext);
        const [node, setNodeRef] = useNodeRef();
        const [activatorNode, setActivatorNodeRef] = useNodeRef();
        const listeners = useSyntheticListeners(activators, id);
        const dataRef = useLatestValue(data);
        useIsomorphicLayoutEffect(() => {
          draggableNodes.set(id, {
            id,
            key,
            node,
            activatorNode,
            data: dataRef
          });
          return () => {
            const node = draggableNodes.get(id);

            if (node && node.key === key) {
              draggableNodes.delete(id);
            }
          };
        }, // eslint-disable-next-line react-hooks/exhaustive-deps
        [draggableNodes, id]);
        const memoizedAttributes = useMemo(() => ({
          role,
          tabIndex,
          'aria-disabled': disabled,
          'aria-pressed': isDragging && role === defaultRole ? true : undefined,
          'aria-roledescription': roleDescription,
          'aria-describedby': ariaDescribedById.draggable
        }), [disabled, role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]);
        return {
          active,
          activatorEvent,
          activeNodeRect,
          attributes: memoizedAttributes,
          isDragging,
          listeners: disabled ? undefined : listeners,
          node,
          over,
          setNodeRef,
          setActivatorNodeRef,
          transform
        };
      }

      function useDndContext() {
        return useContext(PublicContext);
      }

      const ID_PREFIX$1$1 = 'Droppable';
      const defaultResizeObserverConfig = {
        timeout: 25
      };
      function useDroppable(_ref) {
        let {
          data,
          disabled = false,
          id,
          resizeObserverConfig
        } = _ref;
        const key = useUniqueId(ID_PREFIX$1$1);
        const {
          active,
          dispatch,
          over,
          measureDroppableContainers
        } = useContext(InternalContext);
        const previous = useRef({
          disabled
        });
        const resizeObserverConnected = useRef(false);
        const rect = useRef(null);
        const callbackId = useRef(null);
        const {
          disabled: resizeObserverDisabled,
          updateMeasurementsFor,
          timeout: resizeObserverTimeout
        } = { ...defaultResizeObserverConfig,
          ...resizeObserverConfig
        };
        const ids = useLatestValue(updateMeasurementsFor != null ? updateMeasurementsFor : id);
        const handleResize = useCallback(() => {
          if (!resizeObserverConnected.current) {
            // ResizeObserver invokes the `handleResize` callback as soon as `observe` is called,
            // assuming the element is rendered and displayed.
            resizeObserverConnected.current = true;
            return;
          }

          if (callbackId.current != null) {
            clearTimeout(callbackId.current);
          }

          callbackId.current = setTimeout(() => {
            measureDroppableContainers(Array.isArray(ids.current) ? ids.current : [ids.current]);
            callbackId.current = null;
          }, resizeObserverTimeout);
        }, //eslint-disable-next-line react-hooks/exhaustive-deps
        [resizeObserverTimeout]);
        const resizeObserver = useResizeObserver({
          callback: handleResize,
          disabled: resizeObserverDisabled || !active
        });
        const handleNodeChange = useCallback((newElement, previousElement) => {
          if (!resizeObserver) {
            return;
          }

          if (previousElement) {
            resizeObserver.unobserve(previousElement);
            resizeObserverConnected.current = false;
          }

          if (newElement) {
            resizeObserver.observe(newElement);
          }
        }, [resizeObserver]);
        const [nodeRef, setNodeRef] = useNodeRef(handleNodeChange);
        const dataRef = useLatestValue(data);
        useEffect(() => {
          if (!resizeObserver || !nodeRef.current) {
            return;
          }

          resizeObserver.disconnect();
          resizeObserverConnected.current = false;
          resizeObserver.observe(nodeRef.current);
        }, [nodeRef, resizeObserver]);
        useIsomorphicLayoutEffect(() => {
          dispatch({
            type: Action.RegisterDroppable,
            element: {
              id,
              key,
              disabled,
              node: nodeRef,
              rect,
              data: dataRef
            }
          });
          return () => dispatch({
            type: Action.UnregisterDroppable,
            key,
            id
          });
        }, // eslint-disable-next-line react-hooks/exhaustive-deps
        [id]);
        useEffect(() => {
          if (disabled !== previous.current.disabled) {
            dispatch({
              type: Action.SetDroppableDisabled,
              id,
              key,
              disabled
            });
            previous.current.disabled = disabled;
          }
        }, [id, key, disabled, dispatch]);
        return {
          active,
          rect,
          isOver: (over == null ? void 0 : over.id) === id,
          node: nodeRef,
          over,
          setNodeRef
        };
      }

      function AnimationManager(_ref) {
        let {
          animation,
          children
        } = _ref;
        const [clonedChildren, setClonedChildren] = useState(null);
        const [element, setElement] = useState(null);
        const previousChildren = usePrevious(children);

        if (!children && !clonedChildren && previousChildren) {
          setClonedChildren(previousChildren);
        }

        useIsomorphicLayoutEffect(() => {
          if (!element) {
            return;
          }

          const key = clonedChildren == null ? void 0 : clonedChildren.key;
          const id = clonedChildren == null ? void 0 : clonedChildren.props.id;

          if (key == null || id == null) {
            setClonedChildren(null);
            return;
          }

          Promise.resolve(animation(id, element)).then(() => {
            setClonedChildren(null);
          });
        }, [animation, clonedChildren, element]);
        return React.createElement(React.Fragment, null, children, clonedChildren ? cloneElement(clonedChildren, {
          ref: setElement
        }) : null);
      }

      const defaultTransform = {
        x: 0,
        y: 0,
        scaleX: 1,
        scaleY: 1
      };
      function NullifiedContextProvider(_ref) {
        let {
          children
        } = _ref;
        return React.createElement(InternalContext.Provider, {
          value: defaultInternalContext
        }, React.createElement(ActiveDraggableContext.Provider, {
          value: defaultTransform
        }, children));
      }

      const baseStyles = {
        position: 'fixed',
        touchAction: 'none'
      };

      const defaultTransition$1 = activatorEvent => {
        const isKeyboardActivator = isKeyboardEvent(activatorEvent);
        return isKeyboardActivator ? 'transform 250ms ease' : undefined;
      };

      const PositionedOverlay = /*#__PURE__*/forwardRef((_ref, ref) => {
        let {
          as,
          activatorEvent,
          adjustScale,
          children,
          className,
          rect,
          style,
          transform,
          transition = defaultTransition$1
        } = _ref;

        if (!rect) {
          return null;
        }

        const scaleAdjustedTransform = adjustScale ? transform : { ...transform,
          scaleX: 1,
          scaleY: 1
        };
        const styles = { ...baseStyles,
          width: rect.width,
          height: rect.height,
          top: rect.top,
          left: rect.left,
          transform: CSS.Transform.toString(scaleAdjustedTransform),
          transformOrigin: adjustScale && activatorEvent ? getRelativeTransformOrigin(activatorEvent, rect) : undefined,
          transition: typeof transition === 'function' ? transition(activatorEvent) : transition,
          ...style
        };
        return React.createElement(as, {
          className,
          style: styles,
          ref
        }, children);
      });

      const defaultDropAnimationSideEffects = options => _ref => {
        let {
          active,
          dragOverlay
        } = _ref;
        const originalStyles = {};
        const {
          styles,
          className
        } = options;

        if (styles != null && styles.active) {
          for (const [key, value] of Object.entries(styles.active)) {
            if (value === undefined) {
              continue;
            }

            originalStyles[key] = active.node.style.getPropertyValue(key);
            active.node.style.setProperty(key, value);
          }
        }

        if (styles != null && styles.dragOverlay) {
          for (const [key, value] of Object.entries(styles.dragOverlay)) {
            if (value === undefined) {
              continue;
            }

            dragOverlay.node.style.setProperty(key, value);
          }
        }

        if (className != null && className.active) {
          active.node.classList.add(className.active);
        }

        if (className != null && className.dragOverlay) {
          dragOverlay.node.classList.add(className.dragOverlay);
        }

        return function cleanup() {
          for (const [key, value] of Object.entries(originalStyles)) {
            active.node.style.setProperty(key, value);
          }

          if (className != null && className.active) {
            active.node.classList.remove(className.active);
          }
        };
      };

      const defaultKeyframeResolver = _ref2 => {
        let {
          transform: {
            initial,
            final
          }
        } = _ref2;
        return [{
          transform: CSS.Transform.toString(initial)
        }, {
          transform: CSS.Transform.toString(final)
        }];
      };

      const defaultDropAnimationConfiguration = {
        duration: 250,
        easing: 'ease',
        keyframes: defaultKeyframeResolver,
        sideEffects: /*#__PURE__*/defaultDropAnimationSideEffects({
          styles: {
            active: {
              opacity: '0'
            }
          }
        })
      };
      function useDropAnimation(_ref3) {
        let {
          config,
          draggableNodes,
          droppableContainers,
          measuringConfiguration
        } = _ref3;
        return useEvent((id, node) => {
          if (config === null) {
            return;
          }

          const activeDraggable = draggableNodes.get(id);

          if (!activeDraggable) {
            return;
          }

          const activeNode = activeDraggable.node.current;

          if (!activeNode) {
            return;
          }

          const measurableNode = getMeasurableNode(node);

          if (!measurableNode) {
            return;
          }

          const {
            transform
          } = getWindow(node).getComputedStyle(node);
          const parsedTransform = parseTransform(transform);

          if (!parsedTransform) {
            return;
          }

          const animation = typeof config === 'function' ? config : createDefaultDropAnimation(config);
          scrollIntoViewIfNeeded(activeNode, measuringConfiguration.draggable.measure);
          return animation({
            active: {
              id,
              data: activeDraggable.data,
              node: activeNode,
              rect: measuringConfiguration.draggable.measure(activeNode)
            },
            draggableNodes,
            dragOverlay: {
              node,
              rect: measuringConfiguration.dragOverlay.measure(measurableNode)
            },
            droppableContainers,
            measuringConfiguration,
            transform: parsedTransform
          });
        });
      }

      function createDefaultDropAnimation(options) {
        const {
          duration,
          easing,
          sideEffects,
          keyframes
        } = { ...defaultDropAnimationConfiguration,
          ...options
        };
        return _ref4 => {
          let {
            active,
            dragOverlay,
            transform,
            ...rest
          } = _ref4;

          if (!duration) {
            // Do not animate if animation duration is zero.
            return;
          }

          const delta = {
            x: dragOverlay.rect.left - active.rect.left,
            y: dragOverlay.rect.top - active.rect.top
          };
          const scale = {
            scaleX: transform.scaleX !== 1 ? active.rect.width * transform.scaleX / dragOverlay.rect.width : 1,
            scaleY: transform.scaleY !== 1 ? active.rect.height * transform.scaleY / dragOverlay.rect.height : 1
          };
          const finalTransform = {
            x: transform.x - delta.x,
            y: transform.y - delta.y,
            ...scale
          };
          const animationKeyframes = keyframes({ ...rest,
            active,
            dragOverlay,
            transform: {
              initial: transform,
              final: finalTransform
            }
          });
          const [firstKeyframe] = animationKeyframes;
          const lastKeyframe = animationKeyframes[animationKeyframes.length - 1];

          if (JSON.stringify(firstKeyframe) === JSON.stringify(lastKeyframe)) {
            // The start and end keyframes are the same, infer that there is no animation needed.
            return;
          }

          const cleanup = sideEffects == null ? void 0 : sideEffects({
            active,
            dragOverlay,
            ...rest
          });
          const animation = dragOverlay.node.animate(animationKeyframes, {
            duration,
            easing,
            fill: 'forwards'
          });
          return new Promise(resolve => {
            animation.onfinish = () => {
              cleanup == null ? void 0 : cleanup();
              resolve();
            };
          });
        };
      }

      let key = 0;
      function useKey(id) {
        return useMemo(() => {
          if (id == null) {
            return;
          }

          key++;
          return key;
        }, [id]);
      }

      const DragOverlay = /*#__PURE__*/React.memo(_ref => {
        let {
          adjustScale = false,
          children,
          dropAnimation: dropAnimationConfig,
          style,
          transition,
          modifiers,
          wrapperElement = 'div',
          className,
          zIndex = 999
        } = _ref;
        const {
          activatorEvent,
          active,
          activeNodeRect,
          containerNodeRect,
          draggableNodes,
          droppableContainers,
          dragOverlay,
          over,
          measuringConfiguration,
          scrollableAncestors,
          scrollableAncestorRects,
          windowRect
        } = useDndContext();
        const transform = useContext(ActiveDraggableContext);
        const key = useKey(active == null ? void 0 : active.id);
        const modifiedTransform = applyModifiers(modifiers, {
          activatorEvent,
          active,
          activeNodeRect,
          containerNodeRect,
          draggingNodeRect: dragOverlay.rect,
          over,
          overlayNodeRect: dragOverlay.rect,
          scrollableAncestors,
          scrollableAncestorRects,
          transform,
          windowRect
        });
        const initialRect = useInitialValue(activeNodeRect);
        const dropAnimation = useDropAnimation({
          config: dropAnimationConfig,
          draggableNodes,
          droppableContainers,
          measuringConfiguration
        }); // We need to wait for the active node to be measured before connecting the drag overlay ref
        // otherwise collisions can be computed against a mispositioned drag overlay

        const ref = initialRect ? dragOverlay.setRef : undefined;
        return React.createElement(NullifiedContextProvider, null, React.createElement(AnimationManager, {
          animation: dropAnimation
        }, active && key ? React.createElement(PositionedOverlay, {
          key: key,
          id: active.id,
          ref: ref,
          as: wrapperElement,
          activatorEvent: activatorEvent,
          adjustScale: adjustScale,
          className: className,
          transition: transition,
          rect: initialRect,
          style: {
            zIndex,
            ...style
          },
          transform: modifiedTransform
        }, children) : null));
      });

      /**
       * Move an array item to a different position. Returns a new array with the item moved to the new position.
       */
      function arrayMove(array, from, to) {
        const newArray = array.slice();
        newArray.splice(to < 0 ? newArray.length + to : to, 0, newArray.splice(from, 1)[0]);
        return newArray;
      }

      function getSortedRects(items, rects) {
        return items.reduce((accumulator, id, index) => {
          const rect = rects.get(id);

          if (rect) {
            accumulator[index] = rect;
          }

          return accumulator;
        }, Array(items.length));
      }

      function isValidIndex(index) {
        return index !== null && index >= 0;
      }

      function itemsEqual(a, b) {
        if (a === b) {
          return true;
        }

        if (a.length !== b.length) {
          return false;
        }

        for (let i = 0; i < a.length; i++) {
          if (a[i] !== b[i]) {
            return false;
          }
        }

        return true;
      }

      function normalizeDisabled(disabled) {
        if (typeof disabled === 'boolean') {
          return {
            draggable: disabled,
            droppable: disabled
          };
        }

        return disabled;
      }

      const rectSortingStrategy = ({
        rects,
        activeIndex,
        overIndex,
        index
      }) => {
        const newRects = arrayMove(rects, overIndex, activeIndex);
        const oldRect = rects[index];
        const newRect = newRects[index];

        if (!newRect || !oldRect) {
          return null;
        }

        return {
          x: newRect.left - oldRect.left,
          y: newRect.top - oldRect.top,
          scaleX: newRect.width / oldRect.width,
          scaleY: newRect.height / oldRect.height
        };
      };

      // To-do: We should be calculating scale transformation
      const defaultScale$1 = {
        scaleX: 1,
        scaleY: 1
      };
      const verticalListSortingStrategy = ({
        activeIndex,
        activeNodeRect: fallbackActiveRect,
        index,
        rects,
        overIndex
      }) => {
        var _rects$activeIndex;

        const activeNodeRect = (_rects$activeIndex = rects[activeIndex]) != null ? _rects$activeIndex : fallbackActiveRect;

        if (!activeNodeRect) {
          return null;
        }

        if (index === activeIndex) {
          const overIndexRect = rects[overIndex];

          if (!overIndexRect) {
            return null;
          }

          return {
            x: 0,
            y: activeIndex < overIndex ? overIndexRect.top + overIndexRect.height - (activeNodeRect.top + activeNodeRect.height) : overIndexRect.top - activeNodeRect.top,
            ...defaultScale$1
          };
        }

        const itemGap = getItemGap$1(rects, index, activeIndex);

        if (index > activeIndex && index <= overIndex) {
          return {
            x: 0,
            y: -activeNodeRect.height - itemGap,
            ...defaultScale$1
          };
        }

        if (index < activeIndex && index >= overIndex) {
          return {
            x: 0,
            y: activeNodeRect.height + itemGap,
            ...defaultScale$1
          };
        }

        return {
          x: 0,
          y: 0,
          ...defaultScale$1
        };
      };

      function getItemGap$1(clientRects, index, activeIndex) {
        const currentRect = clientRects[index];
        const previousRect = clientRects[index - 1];
        const nextRect = clientRects[index + 1];

        if (!currentRect) {
          return 0;
        }

        if (activeIndex < index) {
          return previousRect ? currentRect.top - (previousRect.top + previousRect.height) : nextRect ? nextRect.top - (currentRect.top + currentRect.height) : 0;
        }

        return nextRect ? nextRect.top - (currentRect.top + currentRect.height) : previousRect ? currentRect.top - (previousRect.top + previousRect.height) : 0;
      }

      const ID_PREFIX = 'Sortable';
      const Context = /*#__PURE__*/React.createContext({
        activeIndex: -1,
        containerId: ID_PREFIX,
        disableTransforms: false,
        items: [],
        overIndex: -1,
        useDragOverlay: false,
        sortedRects: [],
        strategy: rectSortingStrategy,
        disabled: {
          draggable: false,
          droppable: false
        }
      });
      function SortableContext({
        children,
        id,
        items: userDefinedItems,
        strategy = rectSortingStrategy,
        disabled: disabledProp = false
      }) {
        const {
          active,
          dragOverlay,
          droppableRects,
          over,
          measureDroppableContainers,
          measuringScheduled
        } = useDndContext();
        const containerId = useUniqueId(ID_PREFIX, id);
        const useDragOverlay = Boolean(dragOverlay.rect !== null);
        const items = useMemo(() => userDefinedItems.map(item => typeof item === 'object' && 'id' in item ? item.id : item), [userDefinedItems]);
        const isDragging = active != null;
        const activeIndex = active ? items.indexOf(active.id) : -1;
        const overIndex = over ? items.indexOf(over.id) : -1;
        const previousItemsRef = useRef(items);
        const itemsHaveChanged = !itemsEqual(items, previousItemsRef.current);
        const disableTransforms = overIndex !== -1 && activeIndex === -1 || itemsHaveChanged;
        const disabled = normalizeDisabled(disabledProp);
        useIsomorphicLayoutEffect(() => {
          if (itemsHaveChanged && isDragging && !measuringScheduled) {
            measureDroppableContainers(items);
          }
        }, [itemsHaveChanged, items, isDragging, measureDroppableContainers, measuringScheduled]);
        useEffect(() => {
          previousItemsRef.current = items;
        }, [items]);
        const contextValue = useMemo(() => ({
          activeIndex,
          containerId,
          disabled,
          disableTransforms,
          items,
          overIndex,
          useDragOverlay,
          sortedRects: getSortedRects(items, droppableRects),
          strategy
        }), // eslint-disable-next-line react-hooks/exhaustive-deps
        [activeIndex, containerId, disabled.draggable, disabled.droppable, disableTransforms, items, overIndex, droppableRects, useDragOverlay, strategy]);
        return React.createElement(Context.Provider, {
          value: contextValue
        }, children);
      }

      const defaultNewIndexGetter = ({
        id,
        items,
        activeIndex,
        overIndex
      }) => arrayMove(items, activeIndex, overIndex).indexOf(id);
      const defaultAnimateLayoutChanges = ({
        containerId,
        isSorting,
        wasDragging,
        index,
        items,
        newIndex,
        previousItems,
        previousContainerId,
        transition
      }) => {
        if (!transition || !wasDragging) {
          return false;
        }

        if (previousItems !== items && index === newIndex) {
          return false;
        }

        if (isSorting) {
          return true;
        }

        return newIndex !== index && containerId === previousContainerId;
      };
      const defaultTransition = {
        duration: 200,
        easing: 'ease'
      };
      const transitionProperty = 'transform';
      const disabledTransition = /*#__PURE__*/CSS.Transition.toString({
        property: transitionProperty,
        duration: 0,
        easing: 'linear'
      });
      const defaultAttributes = {
        roleDescription: 'sortable'
      };

      /*
       * When the index of an item changes while sorting,
       * we need to temporarily disable the transforms
       */

      function useDerivedTransform({
        disabled,
        index,
        node,
        rect
      }) {
        const [derivedTransform, setDerivedtransform] = useState(null);
        const previousIndex = useRef(index);
        useIsomorphicLayoutEffect(() => {
          if (!disabled && index !== previousIndex.current && node.current) {
            const initial = rect.current;

            if (initial) {
              const current = getClientRect(node.current, {
                ignoreTransform: true
              });
              const delta = {
                x: initial.left - current.left,
                y: initial.top - current.top,
                scaleX: initial.width / current.width,
                scaleY: initial.height / current.height
              };

              if (delta.x || delta.y) {
                setDerivedtransform(delta);
              }
            }
          }

          if (index !== previousIndex.current) {
            previousIndex.current = index;
          }
        }, [disabled, index, node, rect]);
        useEffect(() => {
          if (derivedTransform) {
            requestAnimationFrame(() => {
              setDerivedtransform(null);
            });
          }
        }, [derivedTransform]);
        return derivedTransform;
      }

      function useSortable({
        animateLayoutChanges = defaultAnimateLayoutChanges,
        attributes: userDefinedAttributes,
        disabled: localDisabled,
        data: customData,
        getNewIndex = defaultNewIndexGetter,
        id,
        strategy: localStrategy,
        resizeObserverConfig,
        transition = defaultTransition
      }) {
        const {
          items,
          containerId,
          activeIndex,
          disabled: globalDisabled,
          disableTransforms,
          sortedRects,
          overIndex,
          useDragOverlay,
          strategy: globalStrategy
        } = useContext(Context);
        const disabled = normalizeLocalDisabled(localDisabled, globalDisabled);
        const index = items.indexOf(id);
        const data = useMemo(() => ({
          sortable: {
            containerId,
            index,
            items
          },
          ...customData
        }), [containerId, customData, index, items]);
        const itemsAfterCurrentSortable = useMemo(() => items.slice(items.indexOf(id)), [items, id]);
        const {
          rect,
          node,
          isOver,
          setNodeRef: setDroppableNodeRef
        } = useDroppable({
          id,
          data,
          disabled: disabled.droppable,
          resizeObserverConfig: {
            updateMeasurementsFor: itemsAfterCurrentSortable,
            ...resizeObserverConfig
          }
        });
        const {
          active,
          activatorEvent,
          activeNodeRect,
          attributes,
          setNodeRef: setDraggableNodeRef,
          listeners,
          isDragging,
          over,
          setActivatorNodeRef,
          transform
        } = useDraggable({
          id,
          data,
          attributes: { ...defaultAttributes,
            ...userDefinedAttributes
          },
          disabled: disabled.draggable
        });
        const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);
        const isSorting = Boolean(active);
        const displaceItem = isSorting && !disableTransforms && isValidIndex(activeIndex) && isValidIndex(overIndex);
        const shouldDisplaceDragSource = !useDragOverlay && isDragging;
        const dragSourceDisplacement = shouldDisplaceDragSource && displaceItem ? transform : null;
        const strategy = localStrategy != null ? localStrategy : globalStrategy;
        const finalTransform = displaceItem ? dragSourceDisplacement != null ? dragSourceDisplacement : strategy({
          rects: sortedRects,
          activeNodeRect,
          activeIndex,
          overIndex,
          index
        }) : null;
        const newIndex = isValidIndex(activeIndex) && isValidIndex(overIndex) ? getNewIndex({
          id,
          items,
          activeIndex,
          overIndex
        }) : index;
        const activeId = active == null ? void 0 : active.id;
        const previous = useRef({
          activeId,
          items,
          newIndex,
          containerId
        });
        const itemsHaveChanged = items !== previous.current.items;
        const shouldAnimateLayoutChanges = animateLayoutChanges({
          active,
          containerId,
          isDragging,
          isSorting,
          id,
          index,
          items,
          newIndex: previous.current.newIndex,
          previousItems: previous.current.items,
          previousContainerId: previous.current.containerId,
          transition,
          wasDragging: previous.current.activeId != null
        });
        const derivedTransform = useDerivedTransform({
          disabled: !shouldAnimateLayoutChanges,
          index,
          node,
          rect
        });
        useEffect(() => {
          if (isSorting && previous.current.newIndex !== newIndex) {
            previous.current.newIndex = newIndex;
          }

          if (containerId !== previous.current.containerId) {
            previous.current.containerId = containerId;
          }

          if (items !== previous.current.items) {
            previous.current.items = items;
          }
        }, [isSorting, newIndex, containerId, items]);
        useEffect(() => {
          if (activeId === previous.current.activeId) {
            return;
          }

          if (activeId && !previous.current.activeId) {
            previous.current.activeId = activeId;
            return;
          }

          const timeoutId = setTimeout(() => {
            previous.current.activeId = activeId;
          }, 50);
          return () => clearTimeout(timeoutId);
        }, [activeId]);
        return {
          active,
          activeIndex,
          attributes,
          data,
          rect,
          index,
          newIndex,
          items,
          isOver,
          isSorting,
          isDragging,
          listeners,
          node,
          overIndex,
          over,
          setNodeRef,
          setActivatorNodeRef,
          setDroppableNodeRef,
          setDraggableNodeRef,
          transform: derivedTransform != null ? derivedTransform : finalTransform,
          transition: getTransition()
        };

        function getTransition() {
          if ( // Temporarily disable transitions for a single frame to set up derived transforms
          derivedTransform || // Or to prevent items jumping to back to their "new" position when items change
          itemsHaveChanged && previous.current.newIndex === index) {
            return disabledTransition;
          }

          if (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent) || !transition) {
            return undefined;
          }

          if (isSorting || shouldAnimateLayoutChanges) {
            return CSS.Transition.toString({ ...transition,
              property: transitionProperty
            });
          }

          return undefined;
        }
      }

      function normalizeLocalDisabled(localDisabled, globalDisabled) {
        var _localDisabled$dragga, _localDisabled$droppa;

        if (typeof localDisabled === 'boolean') {
          return {
            draggable: localDisabled,
            // Backwards compatibility
            droppable: false
          };
        }

        return {
          draggable: (_localDisabled$dragga = localDisabled == null ? void 0 : localDisabled.draggable) != null ? _localDisabled$dragga : globalDisabled.draggable,
          droppable: (_localDisabled$droppa = localDisabled == null ? void 0 : localDisabled.droppable) != null ? _localDisabled$droppa : globalDisabled.droppable
        };
      }

      [KeyboardCode.Down, KeyboardCode.Right, KeyboardCode.Up, KeyboardCode.Left];

      var classnames = {exports: {}};

      /*!
        Copyright (c) 2018 Jed Watson.
        Licensed under the MIT License (MIT), see
        http://jedwatson.github.io/classnames
      */

      (function (module) {
      /* global define */

      (function () {

      	var hasOwn = {}.hasOwnProperty;

      	function classNames() {
      		var classes = [];

      		for (var i = 0; i < arguments.length; i++) {
      			var arg = arguments[i];
      			if (!arg) continue;

      			var argType = typeof arg;

      			if (argType === 'string' || argType === 'number') {
      				classes.push(arg);
      			} else if (Array.isArray(arg)) {
      				if (arg.length) {
      					var inner = classNames.apply(null, arg);
      					if (inner) {
      						classes.push(inner);
      					}
      				}
      			} else if (argType === 'object') {
      				if (arg.toString === Object.prototype.toString) {
      					for (var key in arg) {
      						if (hasOwn.call(arg, key) && arg[key]) {
      							classes.push(key);
      						}
      					}
      				} else {
      					classes.push(arg.toString());
      				}
      			}
      		}

      		return classes.join(' ');
      	}

      	if (module.exports) {
      		classNames.default = classNames;
      		module.exports = classNames;
      	} else {
      		window.classNames = classNames;
      	}
      }());
      }(classnames));

      var cs = classnames.exports;

      function EntryNameInput({ name, onCancel, onChange }) {
        const ref = useRef(null);
        useEffect(() => {
          var _a;
          (_a = ref.current) == null ? void 0 : _a.focus();
          function onClickOutSide(e) {
            if (e.target !== ref.current) {
              onCancel();
            }
          }
          document.addEventListener("click", onClickOutSide);
          return () => document.removeEventListener("click", onClickOutSide);
        }, []);
        function handleEnterKeyDown(e) {
          var _a;
          if (e.key === "Escape" && !e.nativeEvent.isComposing) {
            onCancel();
            return;
          }
          if (e.key !== "Enter") {
            return;
          }
          const newName = (_a = ref.current) == null ? void 0 : _a.value.trim().slice(0, 50);
          if (!newName || newName === name) {
            onCancel();
            return;
          }
          onChange(newName);
        }
        return /* @__PURE__ */ React.createElement("div", {
          className: "outline-entry__name"
        }, /* @__PURE__ */ React.createElement("input", {
          ref,
          type: "text",
          defaultValue: name,
          onKeyDown: handleEnterKeyDown,
          placeholder: "\u6700\u957F 50 \u4E2A\u5B57\u7B26"
        }));
      }

      const style = {
        "--spacing": `4px`
      };
      function RootEntry({ name, onNameChange, onClick, isSelected }) {
        const [renaming, setRenaming] = useState(false);
        return /* @__PURE__ */ React.createElement("div", {
          style,
          className: cs("outline-entry", { "outline-entry--selected": isSelected })
        }, /* @__PURE__ */ React.createElement("div", {
          className: cs("outline-entry-content")
        }, renaming ? /* @__PURE__ */ React.createElement(EntryNameInput, {
          name,
          onCancel: () => setRenaming(false),
          onChange: (newName) => {
            onNameChange(newName);
            setRenaming(false);
          }
        }) : /* @__PURE__ */ React.createElement("span", {
          onClick,
          onDoubleClick: () => setRenaming(true),
          className: "outline-entry__name"
        }, name)));
      }
      var root_entry_default = RootEntry;

      var __defProp$2 = Object.defineProperty;
      var __defProps$1 = Object.defineProperties;
      var __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;
      var __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;
      var __hasOwnProp$2 = Object.prototype.hasOwnProperty;
      var __propIsEnum$2 = Object.prototype.propertyIsEnumerable;
      var __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
      var __spreadValues$2 = (a, b) => {
        for (var prop in b || (b = {}))
          if (__hasOwnProp$2.call(b, prop))
            __defNormalProp$2(a, prop, b[prop]);
        if (__getOwnPropSymbols$2)
          for (var prop of __getOwnPropSymbols$2(b)) {
            if (__propIsEnum$2.call(b, prop))
              __defNormalProp$2(a, prop, b[prop]);
          }
        return a;
      };
      var __spreadProps$1 = (a, b) => __defProps$1(a, __getOwnPropDescs$1(b));
      const INDENTATION_WIDTH = 25;
      const dropAnimationConfig = {
        keyframes({ transform }) {
          return [
            { opacity: 1, transform: CSS.Transform.toString(transform.initial) },
            {
              opacity: 0,
              transform: CSS.Transform.toString(__spreadProps$1(__spreadValues$2({}, transform.final), {
                x: transform.final.x + 5,
                y: transform.final.y + 5
              }))
            }
          ];
        },
        easing: "ease-out",
        sideEffects({ active }) {
          active.node.animate([{ opacity: 0 }, { opacity: 1 }], {
            duration: defaultDropAnimationConfiguration.duration,
            easing: defaultDropAnimationConfiguration.easing
          });
        }
      };
      const adjustTranslate = ({ transform }) => {
        return __spreadProps$1(__spreadValues$2({}, transform), {
          y: transform.y,
          x: transform.x + 20
        });
      };
      const animateLayoutChanges = ({ isSorting, wasDragging }) => isSorting || wasDragging ? false : true;
      const measuring = {
        droppable: {
          strategy: MeasuringStrategy.Always
        }
      };
      const mouseSensorOptions = {
        activationConstraint: {
          delay: 100,
          tolerance: 5
        }
      };

      const collapseIcon = /* @__PURE__ */ React.createElement("svg", {
        width: "10",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 70 41"
      }, /* @__PURE__ */ React.createElement("path", {
        d: "M30.76 39.2402C31.885 40.3638 33.41 40.995 35 40.995C36.59 40.995 38.115 40.3638 39.24 39.2402L68.24 10.2402C69.2998 9.10284 69.8768 7.59846 69.8494 6.04406C69.822 4.48965 69.1923 3.00657 68.093 1.90726C66.9937 0.807959 65.5106 0.178263 63.9562 0.150837C62.4018 0.123411 60.8974 0.700397 59.76 1.76024L35 26.5102L10.24 1.76024C9.10259 0.700397 7.59822 0.123411 6.04381 0.150837C4.4894 0.178263 3.00632 0.807959 1.90702 1.90726C0.807714 3.00657 0.178019 4.48965 0.150593 6.04406C0.123167 7.59846 0.700153 9.10284 1.75999 10.2402L30.76 39.2402Z"
      }));
      const handleSVG = /* @__PURE__ */ React.createElement("svg", {
        viewBox: "0 0 20 20",
        width: "12"
      }, /* @__PURE__ */ React.createElement("path", {
        d: "M7 2a2 2 0 1 0 .001 4.001A2 2 0 0 0 7 2zm0 6a2 2 0 1 0 .001 4.001A2 2 0 0 0 7 8zm0 6a2 2 0 1 0 .001 4.001A2 2 0 0 0 7 14zm6-8a2 2 0 1 0-.001-4.001A2 2 0 0 0 13 6zm0 2a2 2 0 1 0 .001 4.001A2 2 0 0 0 13 8zm0 6a2 2 0 1 0 .001 4.001A2 2 0 0 0 13 14z"
      }));
      const removeSVG = /* @__PURE__ */ React.createElement("svg", {
        width: "8",
        viewBox: "0 0 22 22",
        xmlns: "http://www.w3.org/2000/svg"
      }, /* @__PURE__ */ React.createElement("path", {
        d: "M2.99998 -0.000206962C2.7441 -0.000206962 2.48794 0.0972617 2.29294 0.292762L0.292945 2.29276C-0.0980552 2.68376 -0.0980552 3.31682 0.292945 3.70682L7.58591 10.9998L0.292945 18.2928C-0.0980552 18.6838 -0.0980552 19.3168 0.292945 19.7068L2.29294 21.7068C2.68394 22.0978 3.31701 22.0978 3.70701 21.7068L11 14.4139L18.2929 21.7068C18.6829 22.0978 19.317 22.0978 19.707 21.7068L21.707 19.7068C22.098 19.3158 22.098 18.6828 21.707 18.2928L14.414 10.9998L21.707 3.70682C22.098 3.31682 22.098 2.68276 21.707 2.29276L19.707 0.292762C19.316 -0.0982383 18.6829 -0.0982383 18.2929 0.292762L11 7.58573L3.70701 0.292762C3.51151 0.0972617 3.25585 -0.000206962 2.99998 -0.000206962Z"
      }));

      var __defProp$1 = Object.defineProperty;
      var __defProps = Object.defineProperties;
      var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
      var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
      var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
      var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
      var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
      var __spreadValues$1 = (a, b) => {
        for (var prop in b || (b = {}))
          if (__hasOwnProp$1.call(b, prop))
            __defNormalProp$1(a, prop, b[prop]);
        if (__getOwnPropSymbols$1)
          for (var prop of __getOwnPropSymbols$1(b)) {
            if (__propIsEnum$1.call(b, prop))
              __defNormalProp$1(a, prop, b[prop]);
          }
        return a;
      };
      var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
      function RenderEntry({
        id,
        name,
        isSelected,
        depth,
        onCollapse,
        collapsedStatus,
        onRemove,
        onNameChange,
        onClick
      }) {
        const {
          attributes,
          isDragging,
          listeners,
          isSorting,
          isOver,
          setDraggableNodeRef,
          setDroppableNodeRef,
          transform,
          transition
        } = useSortable({ id, animateLayoutChanges });
        const [renaming, setRenaming] = useState(false);
        const style = {
          transform: CSS.Translate.toString(transform),
          "--spacing": `${INDENTATION_WIDTH * (depth - 1)}px`,
          transition
        };
        return /* @__PURE__ */ React.createElement("div", {
          ref: setDroppableNodeRef,
          style,
          onClick: (e) => {
            if (e.target === e.currentTarget || e.target.dataset.entryName) {
              onClick();
            }
          },
          className: cs("outline-entry", {
            "outline-entry--dragging": isDragging,
            "outline-entry--selected": isSelected
          })
        }, /* @__PURE__ */ React.createElement("div", {
          className: cs("outline-entry-content", {
            "outline-entry-content--dragging": isDragging,
            "outline-entry-content--isOver": isOver
          })
        }, !isDragging && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("button", __spreadProps(__spreadValues$1(__spreadValues$1({}, attributes), listeners), {
          ref: setDraggableNodeRef,
          className: cs("action", "entry-handle")
        }), handleSVG), collapsedStatus !== "none" && /* @__PURE__ */ React.createElement("button", {
          onClick: onCollapse,
          className: cs("collapse-icon", "action", {
            "collapse-icon--collapsed": collapsedStatus === "collapsed"
          })
        }, collapseIcon), renaming ? /* @__PURE__ */ React.createElement(EntryNameInput, {
          name,
          onCancel: () => setRenaming(false),
          onChange: (newName) => {
            onNameChange(newName);
            setRenaming(false);
          }
        }) : /* @__PURE__ */ React.createElement("span", {
          onDoubleClick: () => setRenaming(true),
          className: "outline-entry__name",
          "data-entry-name": name
        }, name), !isSorting && !renaming && /* @__PURE__ */ React.createElement("button", {
          onClick: onRemove,
          className: "action action-remove"
        }, removeSVG))));
      }
      var render_entry_default = RenderEntry;

      const NODE_TYPE_WHITE_LIST = ["html-element", "react-component", "loop-container"];
      function useFlattenNodes(rootNode, collapsedNodeIDs, draggingId) {
        const rawPairs = useMemo(() => {
          var _a;
          let pairs = _flat(fromJS(rootNode)).slice();
          for (let i = 0; i < pairs.length; ) {
            const nodeType = pairs[i][1].getIn(["type"]);
            if (NODE_TYPE_WHITE_LIST.includes(nodeType)) {
              i = i + 1;
              continue;
            }
            const keyPathStr = pairs[i][0].toJS().join("/");
            while ((_a = pairs[i]) == null ? void 0 : _a[0].toJS().join("/").startsWith(keyPathStr)) {
              pairs.splice(i, 1);
            }
          }
          return pairs;
        }, [rootNode]);
        return useMemo(() => {
          let _rawPairs = rawPairs.slice();
          const idsShouldRemoveChildren = draggingId ? [draggingId, ...Array.from(collapsedNodeIDs)] : Array.from(collapsedNodeIDs);
          for (const id of idsShouldRemoveChildren) {
            const parentIndex = _rawPairs.findIndex(([_, n]) => n.getIn(["id"]) === id);
            if (parentIndex === -1) {
              continue;
            }
            const [keyPath] = _rawPairs[parentIndex];
            const keyPathStr = keyPath.toJS().join("/");
            let lastDeleteIndex = parentIndex;
            for (let i = lastDeleteIndex + 1; i < _rawPairs.length; i += 1) {
              if (_rawPairs[i][0].toJS().join("/").startsWith(keyPathStr)) {
                lastDeleteIndex = i;
                continue;
              }
              break;
            }
            _rawPairs.splice(parentIndex + 1, lastDeleteIndex - parentIndex);
          }
          return _rawPairs;
        }, [draggingId, collapsedNodeIDs, rawPairs]);
      }
      function pairToEntry([keyPath, n], isContainer) {
        const id = n.getIn(["id"]);
        const primaryNode = {
          type: n.getIn(["type"]),
          name: n.getIn(["name"]),
          packageName: n.getIn(["packageName"]),
          packageVersion: n.getIn(["packageVersion"]),
          exportName: n.getIn(["exportName"])
        };
        const _keyPath = keyPath.toArray().filter((path) => path === "children" || path === "nodes");
        return {
          id,
          name: n.getIn(["label"]) || id,
          depth: _keyPath.length,
          isContainer: isContainer(primaryNode)
        };
      }
      function getProjectionDepth(entries, draggingId, overId, dragOffset) {
        const overEntryIndex = entries.findIndex(({ id }) => id === overId);
        const draggingEntryIndex = entries.findIndex(({ id }) => id === draggingId);
        const draggingEntry = entries[draggingEntryIndex];
        const newEntries = arrayMove(entries, draggingEntryIndex, overEntryIndex);
        const previousEntry = newEntries[overEntryIndex - 1];
        const nextEntry = newEntries[overEntryIndex + 1];
        const dragDepth = Math.round(dragOffset / INDENTATION_WIDTH);
        const projectedDepth = draggingEntry.depth + dragDepth;
        const maxDepth = getMaxDepth(previousEntry);
        const minDepth = nextEntry ? nextEntry.depth : 0;
        let depth = projectedDepth;
        if (projectedDepth >= maxDepth) {
          depth = maxDepth;
        } else if (projectedDepth < minDepth) {
          depth = minDepth;
        }
        return depth;
      }
      function getMaxDepth(entry) {
        if (!entry) {
          return 0;
        }
        return entry.isContainer ? entry.depth + 1 : entry.depth;
      }
      function insertBelowTo(rootNode, targetEntry, projectedDepth, node) {
        if (targetEntry.id === rootNode.getIn(["id"])) {
          return _insertChildAt(rootNode, targetEntry.id, 0, node);
        }
        if (projectedDepth === targetEntry.depth) {
          logger.debug(`[artery-outline] move [${node.getIn(["id"])}] to right of [${targetEntry.id}]`);
          return _insertRightSiblingTo(rootNode, targetEntry.id, node);
        }
        if (projectedDepth > targetEntry.depth) {
          logger.debug(`[artery-outline] move [${node.getIn(["id"])}] to the first position of [${targetEntry.id}]'s children`);
          return _insertChildAt(rootNode, targetEntry.id, 0, node);
        }
        const parentIndex = targetEntry.depth - projectedDepth - 1;
        const parentList = ancestors(rootNode, targetEntry.id) || List();
        if (!parentList || !parentList.size) {
          logger.error(`[artery-outline] fatal error, can not find over node parents`);
          return;
        }
        const parentKeyPath = parentList.get(parentIndex);
        if (!parentKeyPath) {
          logger.error(`[artery-outline] fatal error, no ancestor at index ${parentIndex}`);
          return;
        }
        logger.debug(`[artery-outline] move [${node.getIn(["id"])}] to right of [${parentKeyPath.toJS()}]`);
        return _insertRightSiblingTo(rootNode, parentKeyPath, node);
      }

      var e=[],t=[];function n(n,r){if(n&&"undefined"!=typeof document){var a,s=!0===r.prepend?"prepend":"append",d=!0===r.singleTag,i="string"==typeof r.container?document.querySelector(r.container):document.getElementsByTagName("head")[0];if(d){var u=e.indexOf(i);-1===u&&(u=e.push(i)-1,t[u]={}),a=t[u]&&t[u][s]?t[u][s]:t[u][s]=c();}else a=c();65279===n.charCodeAt(0)&&(n=n.substring(1)),a.styleSheet?a.styleSheet.cssText+=n:a.appendChild(document.createTextNode(n));}function c(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),r.attributes)for(var t=Object.keys(r.attributes),n=0;n<t.length;n++)e.setAttribute(t[n],r.attributes[t[n]]);var a="prepend"===s?"afterbegin":"beforeend";return i.insertAdjacentElement(a,e),e}}

      var css = ".outline-entry {\n  position: relative;\n  padding-left: var(--spacing, 0);\n  font-size: 14px;\n  color: #222;\n  background-color: white;\n  border-radius: 4px;\n}\n.outline-entry:hover {\n  background-color: #f0f6ff;\n}\n\n.outline-entry--dragging {\n  z-index: 1;\n}\n\n.outline-entry--selected:not(.outline-entry--dragging) {\n  background-color: #dee9ff;\n}\n\n.outline-entry-content {\n  position: relative;\n  display: flex;\n  align-items: center;\n  height: 28px;\n}\n.outline-entry-content .action-remove {\n  display: none;\n}\n.outline-entry-content:hover .action-remove {\n  display: inline-block;\n}\n\n.outline-entry-content--dragging {\n  height: 4px;\n  border-color: #2389ff;\n  background-color: #56a1f8;\n}\n.outline-entry-content--dragging:before {\n  position: absolute;\n  top: -4px;\n  display: block;\n  content: \"\";\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  border: 1px solid #2389ff;\n  background-color: #ffffff;\n}\n\n.outline-entry__name {\n  flex-grow: 1;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  user-select: none;\n}\n\n.action {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 22px;\n  margin-right: 4px;\n  padding: 1px 4px;\n  appearance: none;\n  background-color: transparent;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n.action:hover {\n  background-color: rgba(0, 0, 0, 0.05);\n}\n.action svg {\n  fill: #868788;\n}\n\n.collapse-icon--collapsed svg {\n  transform: rotate(-90deg);\n}\n\n.dragging-entry-overlay {\n  display: inline-block;\n  max-width: 300px;\n  font-size: 12px;\n  padding: 2px;\n  outline: 1px solid #e2e8f0;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  background-color: white;\n  border-radius: 4px;\n}";
      n(css,{});

      var __defProp = Object.defineProperty;
      var __getOwnPropSymbols = Object.getOwnPropertySymbols;
      var __hasOwnProp = Object.prototype.hasOwnProperty;
      var __propIsEnum = Object.prototype.propertyIsEnumerable;
      var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
      var __spreadValues = (a, b) => {
        for (var prop in b || (b = {}))
          if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        if (__getOwnPropSymbols)
          for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
              __defNormalProp(a, prop, b[prop]);
          }
        return a;
      };
      function Outline({
        rootNode,
        isContainer,
        onChange,
        activeNode,
        onActiveNodeChange
      }) {
        const [collapsedNodeIDs, setCollapsedNodeIDs] = useState(/* @__PURE__ */ new Set([]));
        const [draggingId, setDraggingId] = useState("");
        const [offsetLeft, setOffsetLeft] = useState(0);
        const [overId, setOverId] = useState(null);
        const flattenNodePairs = useFlattenNodes(rootNode, Array.from(collapsedNodeIDs), draggingId);
        const entries = flattenNodePairs.map(([keyPath, n]) => pairToEntry([keyPath, n], isContainer));
        const entryIDs = useMemo(() => entries.map(({ id }) => id), [entries]);
        const draggingEntry = useMemo(() => entries.find(({ id }) => id === draggingId), [draggingId]);
        const mouseSensor = useSensor(MouseSensor, mouseSensorOptions);
        const sensors = useSensors(mouseSensor);
        const projectionDepth = useMemo(() => {
          if (!draggingId || !overId) {
            return 0;
          }
          return getProjectionDepth(entries, draggingId, overId, offsetLeft);
        }, [entries, draggingId, overId, offsetLeft]);
        function onChangeWithLog(node) {
          if (!node) {
            logger.error("[artery-outline] ignored for calling onChange by a undefined rootNode.");
            return;
          }
          onChange(node.toJS());
        }
        function handleDragEnd({ active, over }) {
          var _a, _b;
          resetState();
          if (!over || over.id === active.id) {
            return;
          }
          const draggingIndex = entries.findIndex(({ id }) => id === active.id);
          const overIndex = entries.findIndex(({ id }) => id === over.id);
          if (draggingIndex === -1 || overIndex === -1) {
            logger.error(`[artery-outline] fatal error, can not find over entry [${over.id}] or dragging entry [${active.id}]`);
            return;
          }
          const draggingDirection = draggingIndex < overIndex ? "below" : "above";
          let _rootNode = fromJS(rootNode);
          const draggingNodeKeyPath = (_a = flattenNodePairs.find(([, node]) => node.getIn(["id"]) === draggingId)) == null ? void 0 : _a[0];
          if (!draggingNodeKeyPath) {
            logger.error("[artery-outline] fatal error, can not find dragging node keyPath of", draggingId);
            return;
          }
          const draggingNode = _rootNode.getIn(draggingNodeKeyPath);
          if (!draggingNode) {
            logger.error("[artery-outline] fatal error, can not find dragging node of keyPath", draggingNodeKeyPath.toJS());
            return;
          }
          _rootNode = removeIn(_rootNode, draggingNodeKeyPath);
          const overNodeKeyPath = (_b = flattenNodePairs.find(([, node]) => node.getIn(["id"]) === over.id)) == null ? void 0 : _b[0];
          if (!overNodeKeyPath) {
            logger.error("[artery-outline] fatal error, can not find overNodeKeyPath of", over.id);
            return;
          }
          if (draggingDirection === "below") {
            _rootNode = insertBelowTo(_rootNode, entries[overIndex], projectionDepth, draggingNode);
            onChangeWithLog(_rootNode);
            return;
          }
          const entryAboveOverEntry = entries[Math.max(overIndex - 1, 0)];
          _rootNode = insertBelowTo(_rootNode, entryAboveOverEntry, projectionDepth, draggingNode);
          onChangeWithLog(_rootNode);
        }
        function resetState() {
          setOverId(null);
          setDraggingId("");
          setOffsetLeft(0);
          document.body.style.setProperty("cursor", "");
        }
        function removeNode(id) {
          onChange(deleteByID(rootNode, id));
        }
        function toggleCollapse(id) {
          if (collapsedNodeIDs.has(id)) {
            collapsedNodeIDs.delete(id);
          } else {
            collapsedNodeIDs.add(id);
          }
          setCollapsedNodeIDs(new Set(Array.from(collapsedNodeIDs)));
        }
        function handleEntryClick(id) {
          var _a;
          onActiveNodeChange((_a = flattenNodePairs.find(([_, node]) => node.getIn(["id"]) === id)) == null ? void 0 : _a[1].toJS());
        }
        if (!entries.length) {
          return null;
        }
        return /* @__PURE__ */ React.createElement(DndContext, {
          sensors,
          collisionDetection: closestCenter,
          measuring,
          onDragStart: ({ active: { id: activeId } }) => {
            setDraggingId(activeId);
            document.body.style.setProperty("cursor", "grabbing");
          },
          onDragMove: ({ delta }) => setOffsetLeft(delta.x),
          onDragOver: ({ over }) => {
            var _a;
            return setOverId((_a = over == null ? void 0 : over.id.toString()) != null ? _a : null);
          },
          onDragEnd: handleDragEnd,
          onDragCancel: () => resetState()
        }, /* @__PURE__ */ React.createElement(root_entry_default, {
          id: entries[0].id,
          name: entries[0].name,
          iconRender: () => /* @__PURE__ */ React.createElement("span", null, "i"),
          isSelected: (activeNode == null ? void 0 : activeNode.id) === entries[0].id,
          onClick: () => handleEntryClick(entries[0].id),
          onNameChange: (newName) => {
            rootNode.label = newName;
            onChange(__spreadValues({}, rootNode));
          }
        }), /* @__PURE__ */ React.createElement(SortableContext, {
          items: entryIDs.slice(1),
          strategy: verticalListSortingStrategy
        }, entries.slice(1).map(({ id, name, depth, isContainer: isContainer2 }) => {
          let collapsedStatus = "none";
          if (isContainer2) {
            collapsedStatus = collapsedNodeIDs.has(id) ? "collapsed" : "expended";
          }
          return /* @__PURE__ */ React.createElement(render_entry_default, {
            key: id,
            id,
            name,
            onClick: () => handleEntryClick(id),
            isSelected: (activeNode == null ? void 0 : activeNode.id) === id,
            iconRender: () => /* @__PURE__ */ React.createElement("span", null, "i"),
            depth: draggingId === id ? projectionDepth : depth,
            collapsedStatus,
            onCollapse: () => toggleCollapse(id),
            onRemove: () => removeNode(id),
            onNameChange: (newName) => {
              const newRoot = patchNode(rootNode, { id, label: newName });
              if (newRoot) {
                onChange(newRoot);
              }
            }
          });
        }), ReactDOM.createPortal(/* @__PURE__ */ React.createElement(DragOverlay, {
          dropAnimation: dropAnimationConfig,
          modifiers: [adjustTranslate]
        }, draggingId && draggingEntry && /* @__PURE__ */ React.createElement("div", {
          className: "dragging-entry-overlay"
        }, draggingEntry.name)), document.body)));
      }
      var src_default = exports('default', Outline);

    })
  };
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
