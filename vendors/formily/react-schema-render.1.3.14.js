System.register(['@formily/react', 'react', '@formily/validator', '@formily/shared', 'react-dom'], (function (exports) {
	'use strict';
	var _starExcludes = {
		FormComponentsContext: 1,
		FormExpressionScopeContext: 1,
		FormSchemaContext: 1,
		FormSlot: 1,
		JSONCondition: 1,
		MarkupContext: 1,
		Schema: 1,
		SchemaField: 1,
		SchemaFieldPropsContext: 1,
		SchemaForm: 1,
		SchemaMarkupField: 1,
		SchemaMarkupForm: 1,
		cleanRegistry: 1,
		complieExpression: 1,
		connect: 1,
		createAsyncFormActions: 1,
		createControllerBox: 1,
		createFormActions: 1,
		createVirtualBox: 1,
		getRegistry: 1,
		parseLinkages: 1,
		registerFieldMiddleware: 1,
		registerFormComponent: 1,
		registerFormField: 1,
		registerFormFields: 1,
		registerFormItemComponent: 1,
		registerPreviewTextComponent: 1,
		registerVirtualBox: 1,
		useSchemaForm: 1,
		useSchemaProps: 1,
		useValueLinkageEffect: 1,
		'default': 1,
		BigData: 1,
		FormConsumer: 1,
		FormEffectHooks: 1,
		FormPath: 1,
		FormPathPattern: 1,
		FormProvider: 1,
		FormSpy: 1,
		InternalField: 1,
		InternalFieldList: 1,
		InternalForm: 1,
		InternalVirtualField: 1,
		createEffectHook: 1,
		registerValidationFormats: 1,
		registerValidationMTEngine: 1,
		registerValidationRules: 1,
		setValidationLanguage: 1,
		setValidationLocale: 1,
		useField: 1,
		useFieldState: 1,
		useForm: 1,
		useFormEffects: 1,
		useFormQuery: 1,
		useFormSpy: 1,
		useFormState: 1,
		useVirtualField: 1
	};
	var createFormActions$1, createAsyncFormActions$1, useLayout, FormEffectHooks, useForm, Field, VirtualField, Form, React, useRef, useMemo, createElement, createContext, useContext, Fragment, getMessage, each, FormPath, isEmpty$2, isArr, isValid, toArr, isEqual, isBool, deprecate, map$2, lowercase, reduce$2, isFn$1, log, defaults, isStr, isPlainObj, BigData, merge$4, globalThisPolyfill, createPortal;
	return {
		setters: [function (module) {
			createFormActions$1 = module.createFormActions;
			createAsyncFormActions$1 = module.createAsyncFormActions;
			useLayout = module.useLayout;
			FormEffectHooks = module.FormEffectHooks;
			useForm = module.useForm;
			Field = module.Field;
			VirtualField = module.VirtualField;
			Form = module.Form;
			var setter = { BigData: module.BigData, FormConsumer: module.FormConsumer, FormEffectHooks: module.FormEffectHooks, FormPath: module.FormPath, FormPathPattern: module.FormPathPattern, FormProvider: module.FormProvider, FormSpy: module.FormSpy, InternalField: module.Field, InternalFieldList: module.FieldList, InternalForm: module.Form, InternalVirtualField: module.VirtualField, createEffectHook: module.createEffectHook, registerValidationFormats: module.registerValidationFormats, registerValidationMTEngine: module.registerValidationMTEngine, registerValidationRules: module.registerValidationRules, setValidationLanguage: module.setValidationLanguage, setValidationLocale: module.setValidationLocale, useField: module.useField, useFieldState: module.useFieldState, useForm: module.useForm, useFormEffects: module.useFormEffects, useFormQuery: module.useFormQuery, useFormSpy: module.useFormSpy, useFormState: module.useFormState, useVirtualField: module.useVirtualField };
			for (var name in module) {
				if (!_starExcludes[name]) setter[name] = module[name];
			}
			exports(setter);
		}, function (module) {
			React = module["default"];
			useRef = module.useRef;
			useMemo = module.useMemo;
			createElement = module.createElement;
			createContext = module.createContext;
			useContext = module.useContext;
			Fragment = module.Fragment;
		}, function (module) {
			getMessage = module.getMessage;
		}, function (module) {
			each = module.each;
			FormPath = module.FormPath;
			isEmpty$2 = module.isEmpty;
			isArr = module.isArr;
			isValid = module.isValid;
			toArr = module.toArr;
			isEqual = module.isEqual;
			isBool = module.isBool;
			deprecate = module.deprecate;
			map$2 = module.map;
			lowercase = module.lowercase;
			reduce$2 = module.reduce;
			isFn$1 = module.isFn;
			log = module.log;
			defaults = module.defaults;
			isStr = module.isStr;
			isPlainObj = module.isPlainObj;
			BigData = module.BigData;
			merge$4 = module.merge;
			globalThisPolyfill = module.globalThisPolyfill;
		}, function (module) {
			createPortal = module.createPortal;
		}],
		execute: (function () {

			exports({
				createControllerBox: createControllerBox,
				createVirtualBox: createVirtualBox,
				registerFormComponent: registerFormComponent,
				registerFormField: registerFormField,
				registerFormFields: registerFormFields,
				registerFormItemComponent: registerFormItemComponent,
				registerPreviewTextComponent: registerPreviewTextComponent,
				registerVirtualBox: registerVirtualBox
			});

			var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

			var Subject$3 = {};

			var Subject$2 = {};

			var rxjs = {};

			var Observable$1 = {};

			var canReportError$1 = {};

			var Subscriber$1 = {};

			var isFunction$1 = {};

			Object.defineProperty(isFunction$1, "__esModule", { value: true });
			function isFunction(x) {
			    return typeof x === 'function';
			}
			isFunction$1.isFunction = isFunction;

			var Observer = {};

			var config = {};

			Object.defineProperty(config, "__esModule", { value: true });
			var _enable_super_gross_mode_that_will_cause_bad_things = false;
			config.config = {
			    Promise: undefined,
			    set useDeprecatedSynchronousErrorHandling(value) {
			        if (value) {
			            var error = new Error();
			            console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
			        }
			        else if (_enable_super_gross_mode_that_will_cause_bad_things) {
			            console.log('RxJS: Back to a better error behavior. Thank you. <3');
			        }
			        _enable_super_gross_mode_that_will_cause_bad_things = value;
			    },
			    get useDeprecatedSynchronousErrorHandling() {
			        return _enable_super_gross_mode_that_will_cause_bad_things;
			    },
			};

			var hostReportError$1 = {};

			Object.defineProperty(hostReportError$1, "__esModule", { value: true });
			function hostReportError(err) {
			    setTimeout(function () { throw err; }, 0);
			}
			hostReportError$1.hostReportError = hostReportError;

			Object.defineProperty(Observer, "__esModule", { value: true });
			var config_1$3 = config;
			var hostReportError_1$2 = hostReportError$1;
			Observer.empty = {
			    closed: true,
			    next: function (value) { },
			    error: function (err) {
			        if (config_1$3.config.useDeprecatedSynchronousErrorHandling) {
			            throw err;
			        }
			        else {
			            hostReportError_1$2.hostReportError(err);
			        }
			    },
			    complete: function () { }
			};

			var Subscription$1 = {};

			var isArray = {};

			Object.defineProperty(isArray, "__esModule", { value: true });
			isArray.isArray = (function () { return Array.isArray || (function (x) { return x && typeof x.length === 'number'; }); })();

			var isObject$1 = {};

			Object.defineProperty(isObject$1, "__esModule", { value: true });
			function isObject(x) {
			    return x !== null && typeof x === 'object';
			}
			isObject$1.isObject = isObject;

			var UnsubscriptionError = {};

			Object.defineProperty(UnsubscriptionError, "__esModule", { value: true });
			var UnsubscriptionErrorImpl = (function () {
			    function UnsubscriptionErrorImpl(errors) {
			        Error.call(this);
			        this.message = errors ?
			            errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
			        this.name = 'UnsubscriptionError';
			        this.errors = errors;
			        return this;
			    }
			    UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);
			    return UnsubscriptionErrorImpl;
			})();
			UnsubscriptionError.UnsubscriptionError = UnsubscriptionErrorImpl;

			Object.defineProperty(Subscription$1, "__esModule", { value: true });
			var isArray_1$d = isArray;
			var isObject_1$2 = isObject$1;
			var isFunction_1$4 = isFunction$1;
			var UnsubscriptionError_1$1 = UnsubscriptionError;
			var Subscription = (function () {
			    function Subscription(unsubscribe) {
			        this.closed = false;
			        this._parentOrParents = null;
			        this._subscriptions = null;
			        if (unsubscribe) {
			            this._ctorUnsubscribe = true;
			            this._unsubscribe = unsubscribe;
			        }
			    }
			    Subscription.prototype.unsubscribe = function () {
			        var errors;
			        if (this.closed) {
			            return;
			        }
			        var _a = this, _parentOrParents = _a._parentOrParents, _ctorUnsubscribe = _a._ctorUnsubscribe, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
			        this.closed = true;
			        this._parentOrParents = null;
			        this._subscriptions = null;
			        if (_parentOrParents instanceof Subscription) {
			            _parentOrParents.remove(this);
			        }
			        else if (_parentOrParents !== null) {
			            for (var index = 0; index < _parentOrParents.length; ++index) {
			                var parent_1 = _parentOrParents[index];
			                parent_1.remove(this);
			            }
			        }
			        if (isFunction_1$4.isFunction(_unsubscribe)) {
			            if (_ctorUnsubscribe) {
			                this._unsubscribe = undefined;
			            }
			            try {
			                _unsubscribe.call(this);
			            }
			            catch (e) {
			                errors = e instanceof UnsubscriptionError_1$1.UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
			            }
			        }
			        if (isArray_1$d.isArray(_subscriptions)) {
			            var index = -1;
			            var len = _subscriptions.length;
			            while (++index < len) {
			                var sub = _subscriptions[index];
			                if (isObject_1$2.isObject(sub)) {
			                    try {
			                        sub.unsubscribe();
			                    }
			                    catch (e) {
			                        errors = errors || [];
			                        if (e instanceof UnsubscriptionError_1$1.UnsubscriptionError) {
			                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
			                        }
			                        else {
			                            errors.push(e);
			                        }
			                    }
			                }
			            }
			        }
			        if (errors) {
			            throw new UnsubscriptionError_1$1.UnsubscriptionError(errors);
			        }
			    };
			    Subscription.prototype.add = function (teardown) {
			        var subscription = teardown;
			        if (!teardown) {
			            return Subscription.EMPTY;
			        }
			        switch (typeof teardown) {
			            case 'function':
			                subscription = new Subscription(teardown);
			            case 'object':
			                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
			                    return subscription;
			                }
			                else if (this.closed) {
			                    subscription.unsubscribe();
			                    return subscription;
			                }
			                else if (!(subscription instanceof Subscription)) {
			                    var tmp = subscription;
			                    subscription = new Subscription();
			                    subscription._subscriptions = [tmp];
			                }
			                break;
			            default: {
			                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
			            }
			        }
			        var _parentOrParents = subscription._parentOrParents;
			        if (_parentOrParents === null) {
			            subscription._parentOrParents = this;
			        }
			        else if (_parentOrParents instanceof Subscription) {
			            if (_parentOrParents === this) {
			                return subscription;
			            }
			            subscription._parentOrParents = [_parentOrParents, this];
			        }
			        else if (_parentOrParents.indexOf(this) === -1) {
			            _parentOrParents.push(this);
			        }
			        else {
			            return subscription;
			        }
			        var subscriptions = this._subscriptions;
			        if (subscriptions === null) {
			            this._subscriptions = [subscription];
			        }
			        else {
			            subscriptions.push(subscription);
			        }
			        return subscription;
			    };
			    Subscription.prototype.remove = function (subscription) {
			        var subscriptions = this._subscriptions;
			        if (subscriptions) {
			            var subscriptionIndex = subscriptions.indexOf(subscription);
			            if (subscriptionIndex !== -1) {
			                subscriptions.splice(subscriptionIndex, 1);
			            }
			        }
			    };
			    Subscription.EMPTY = (function (empty) {
			        empty.closed = true;
			        return empty;
			    }(new Subscription()));
			    return Subscription;
			}());
			Subscription$1.Subscription = Subscription;
			function flattenUnsubscriptionErrors(errors) {
			    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1$1.UnsubscriptionError) ? err.errors : err); }, []);
			}

			var rxSubscriber = {};

			(function (exports) {
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.rxSubscriber = (function () {
			    return typeof Symbol === 'function'
			        ? Symbol('rxSubscriber')
			        : '@@rxSubscriber_' + Math.random();
			})();
			exports.$$rxSubscriber = exports.rxSubscriber;

			}(rxSubscriber));

			var __extends$1m = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(Subscriber$1, "__esModule", { value: true });
			var isFunction_1$3 = isFunction$1;
			var Observer_1$1 = Observer;
			var Subscription_1$h = Subscription$1;
			var rxSubscriber_1$2 = rxSubscriber;
			var config_1$2 = config;
			var hostReportError_1$1 = hostReportError$1;
			var Subscriber = (function (_super) {
			    __extends$1m(Subscriber, _super);
			    function Subscriber(destinationOrNext, error, complete) {
			        var _this = _super.call(this) || this;
			        _this.syncErrorValue = null;
			        _this.syncErrorThrown = false;
			        _this.syncErrorThrowable = false;
			        _this.isStopped = false;
			        switch (arguments.length) {
			            case 0:
			                _this.destination = Observer_1$1.empty;
			                break;
			            case 1:
			                if (!destinationOrNext) {
			                    _this.destination = Observer_1$1.empty;
			                    break;
			                }
			                if (typeof destinationOrNext === 'object') {
			                    if (destinationOrNext instanceof Subscriber) {
			                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
			                        _this.destination = destinationOrNext;
			                        destinationOrNext.add(_this);
			                    }
			                    else {
			                        _this.syncErrorThrowable = true;
			                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
			                    }
			                    break;
			                }
			            default:
			                _this.syncErrorThrowable = true;
			                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
			                break;
			        }
			        return _this;
			    }
			    Subscriber.prototype[rxSubscriber_1$2.rxSubscriber] = function () { return this; };
			    Subscriber.create = function (next, error, complete) {
			        var subscriber = new Subscriber(next, error, complete);
			        subscriber.syncErrorThrowable = false;
			        return subscriber;
			    };
			    Subscriber.prototype.next = function (value) {
			        if (!this.isStopped) {
			            this._next(value);
			        }
			    };
			    Subscriber.prototype.error = function (err) {
			        if (!this.isStopped) {
			            this.isStopped = true;
			            this._error(err);
			        }
			    };
			    Subscriber.prototype.complete = function () {
			        if (!this.isStopped) {
			            this.isStopped = true;
			            this._complete();
			        }
			    };
			    Subscriber.prototype.unsubscribe = function () {
			        if (this.closed) {
			            return;
			        }
			        this.isStopped = true;
			        _super.prototype.unsubscribe.call(this);
			    };
			    Subscriber.prototype._next = function (value) {
			        this.destination.next(value);
			    };
			    Subscriber.prototype._error = function (err) {
			        this.destination.error(err);
			        this.unsubscribe();
			    };
			    Subscriber.prototype._complete = function () {
			        this.destination.complete();
			        this.unsubscribe();
			    };
			    Subscriber.prototype._unsubscribeAndRecycle = function () {
			        var _parentOrParents = this._parentOrParents;
			        this._parentOrParents = null;
			        this.unsubscribe();
			        this.closed = false;
			        this.isStopped = false;
			        this._parentOrParents = _parentOrParents;
			        return this;
			    };
			    return Subscriber;
			}(Subscription_1$h.Subscription));
			Subscriber$1.Subscriber = Subscriber;
			var SafeSubscriber = (function (_super) {
			    __extends$1m(SafeSubscriber, _super);
			    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
			        var _this = _super.call(this) || this;
			        _this._parentSubscriber = _parentSubscriber;
			        var next;
			        var context = _this;
			        if (isFunction_1$3.isFunction(observerOrNext)) {
			            next = observerOrNext;
			        }
			        else if (observerOrNext) {
			            next = observerOrNext.next;
			            error = observerOrNext.error;
			            complete = observerOrNext.complete;
			            if (observerOrNext !== Observer_1$1.empty) {
			                context = Object.create(observerOrNext);
			                if (isFunction_1$3.isFunction(context.unsubscribe)) {
			                    _this.add(context.unsubscribe.bind(context));
			                }
			                context.unsubscribe = _this.unsubscribe.bind(_this);
			            }
			        }
			        _this._context = context;
			        _this._next = next;
			        _this._error = error;
			        _this._complete = complete;
			        return _this;
			    }
			    SafeSubscriber.prototype.next = function (value) {
			        if (!this.isStopped && this._next) {
			            var _parentSubscriber = this._parentSubscriber;
			            if (!config_1$2.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
			                this.__tryOrUnsub(this._next, value);
			            }
			            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
			                this.unsubscribe();
			            }
			        }
			    };
			    SafeSubscriber.prototype.error = function (err) {
			        if (!this.isStopped) {
			            var _parentSubscriber = this._parentSubscriber;
			            var useDeprecatedSynchronousErrorHandling = config_1$2.config.useDeprecatedSynchronousErrorHandling;
			            if (this._error) {
			                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
			                    this.__tryOrUnsub(this._error, err);
			                    this.unsubscribe();
			                }
			                else {
			                    this.__tryOrSetError(_parentSubscriber, this._error, err);
			                    this.unsubscribe();
			                }
			            }
			            else if (!_parentSubscriber.syncErrorThrowable) {
			                this.unsubscribe();
			                if (useDeprecatedSynchronousErrorHandling) {
			                    throw err;
			                }
			                hostReportError_1$1.hostReportError(err);
			            }
			            else {
			                if (useDeprecatedSynchronousErrorHandling) {
			                    _parentSubscriber.syncErrorValue = err;
			                    _parentSubscriber.syncErrorThrown = true;
			                }
			                else {
			                    hostReportError_1$1.hostReportError(err);
			                }
			                this.unsubscribe();
			            }
			        }
			    };
			    SafeSubscriber.prototype.complete = function () {
			        var _this = this;
			        if (!this.isStopped) {
			            var _parentSubscriber = this._parentSubscriber;
			            if (this._complete) {
			                var wrappedComplete = function () { return _this._complete.call(_this._context); };
			                if (!config_1$2.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
			                    this.__tryOrUnsub(wrappedComplete);
			                    this.unsubscribe();
			                }
			                else {
			                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
			                    this.unsubscribe();
			                }
			            }
			            else {
			                this.unsubscribe();
			            }
			        }
			    };
			    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
			        try {
			            fn.call(this._context, value);
			        }
			        catch (err) {
			            this.unsubscribe();
			            if (config_1$2.config.useDeprecatedSynchronousErrorHandling) {
			                throw err;
			            }
			            else {
			                hostReportError_1$1.hostReportError(err);
			            }
			        }
			    };
			    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
			        if (!config_1$2.config.useDeprecatedSynchronousErrorHandling) {
			            throw new Error('bad call');
			        }
			        try {
			            fn.call(this._context, value);
			        }
			        catch (err) {
			            if (config_1$2.config.useDeprecatedSynchronousErrorHandling) {
			                parent.syncErrorValue = err;
			                parent.syncErrorThrown = true;
			                return true;
			            }
			            else {
			                hostReportError_1$1.hostReportError(err);
			                return true;
			            }
			        }
			        return false;
			    };
			    SafeSubscriber.prototype._unsubscribe = function () {
			        var _parentSubscriber = this._parentSubscriber;
			        this._context = null;
			        this._parentSubscriber = null;
			        _parentSubscriber.unsubscribe();
			    };
			    return SafeSubscriber;
			}(Subscriber));
			Subscriber$1.SafeSubscriber = SafeSubscriber;

			Object.defineProperty(canReportError$1, "__esModule", { value: true });
			var Subscriber_1$L = Subscriber$1;
			function canReportError(observer) {
			    while (observer) {
			        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
			        if (closed_1 || isStopped) {
			            return false;
			        }
			        else if (destination && destination instanceof Subscriber_1$L.Subscriber) {
			            observer = destination;
			        }
			        else {
			            observer = null;
			        }
			    }
			    return true;
			}
			canReportError$1.canReportError = canReportError;

			var toSubscriber$1 = {};

			Object.defineProperty(toSubscriber$1, "__esModule", { value: true });
			var Subscriber_1$K = Subscriber$1;
			var rxSubscriber_1$1 = rxSubscriber;
			var Observer_1 = Observer;
			function toSubscriber(nextOrObserver, error, complete) {
			    if (nextOrObserver) {
			        if (nextOrObserver instanceof Subscriber_1$K.Subscriber) {
			            return nextOrObserver;
			        }
			        if (nextOrObserver[rxSubscriber_1$1.rxSubscriber]) {
			            return nextOrObserver[rxSubscriber_1$1.rxSubscriber]();
			        }
			    }
			    if (!nextOrObserver && !error && !complete) {
			        return new Subscriber_1$K.Subscriber(Observer_1.empty);
			    }
			    return new Subscriber_1$K.Subscriber(nextOrObserver, error, complete);
			}
			toSubscriber$1.toSubscriber = toSubscriber;

			var observable = {};

			Object.defineProperty(observable, "__esModule", { value: true });
			observable.observable = (function () { return typeof Symbol === 'function' && Symbol.observable || '@@observable'; })();

			var pipe$1 = {};

			var identity$1 = {};

			Object.defineProperty(identity$1, "__esModule", { value: true });
			function identity(x) {
			    return x;
			}
			identity$1.identity = identity;

			Object.defineProperty(pipe$1, "__esModule", { value: true });
			var identity_1$6 = identity$1;
			function pipe() {
			    var fns = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        fns[_i] = arguments[_i];
			    }
			    return pipeFromArray(fns);
			}
			pipe$1.pipe = pipe;
			function pipeFromArray(fns) {
			    if (fns.length === 0) {
			        return identity_1$6.identity;
			    }
			    if (fns.length === 1) {
			        return fns[0];
			    }
			    return function piped(input) {
			        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
			    };
			}
			pipe$1.pipeFromArray = pipeFromArray;

			Object.defineProperty(Observable$1, "__esModule", { value: true });
			var canReportError_1$2 = canReportError$1;
			var toSubscriber_1 = toSubscriber$1;
			var observable_1$5 = observable;
			var pipe_1$2 = pipe$1;
			var config_1$1 = config;
			var Observable = (function () {
			    function Observable(subscribe) {
			        this._isScalar = false;
			        if (subscribe) {
			            this._subscribe = subscribe;
			        }
			    }
			    Observable.prototype.lift = function (operator) {
			        var observable = new Observable();
			        observable.source = this;
			        observable.operator = operator;
			        return observable;
			    };
			    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
			        var operator = this.operator;
			        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
			        if (operator) {
			            sink.add(operator.call(sink, this.source));
			        }
			        else {
			            sink.add(this.source || (config_1$1.config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
			                this._subscribe(sink) :
			                this._trySubscribe(sink));
			        }
			        if (config_1$1.config.useDeprecatedSynchronousErrorHandling) {
			            if (sink.syncErrorThrowable) {
			                sink.syncErrorThrowable = false;
			                if (sink.syncErrorThrown) {
			                    throw sink.syncErrorValue;
			                }
			            }
			        }
			        return sink;
			    };
			    Observable.prototype._trySubscribe = function (sink) {
			        try {
			            return this._subscribe(sink);
			        }
			        catch (err) {
			            if (config_1$1.config.useDeprecatedSynchronousErrorHandling) {
			                sink.syncErrorThrown = true;
			                sink.syncErrorValue = err;
			            }
			            if (canReportError_1$2.canReportError(sink)) {
			                sink.error(err);
			            }
			            else {
			                console.warn(err);
			            }
			        }
			    };
			    Observable.prototype.forEach = function (next, promiseCtor) {
			        var _this = this;
			        promiseCtor = getPromiseCtor(promiseCtor);
			        return new promiseCtor(function (resolve, reject) {
			            var subscription;
			            subscription = _this.subscribe(function (value) {
			                try {
			                    next(value);
			                }
			                catch (err) {
			                    reject(err);
			                    if (subscription) {
			                        subscription.unsubscribe();
			                    }
			                }
			            }, reject, resolve);
			        });
			    };
			    Observable.prototype._subscribe = function (subscriber) {
			        var source = this.source;
			        return source && source.subscribe(subscriber);
			    };
			    Observable.prototype[observable_1$5.observable] = function () {
			        return this;
			    };
			    Observable.prototype.pipe = function () {
			        var operations = [];
			        for (var _i = 0; _i < arguments.length; _i++) {
			            operations[_i] = arguments[_i];
			        }
			        if (operations.length === 0) {
			            return this;
			        }
			        return pipe_1$2.pipeFromArray(operations)(this);
			    };
			    Observable.prototype.toPromise = function (promiseCtor) {
			        var _this = this;
			        promiseCtor = getPromiseCtor(promiseCtor);
			        return new promiseCtor(function (resolve, reject) {
			            var value;
			            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
			        });
			    };
			    Observable.create = function (subscribe) {
			        return new Observable(subscribe);
			    };
			    return Observable;
			}());
			Observable$1.Observable = Observable;
			function getPromiseCtor(promiseCtor) {
			    if (!promiseCtor) {
			        promiseCtor = config_1$1.config.Promise || Promise;
			    }
			    if (!promiseCtor) {
			        throw new Error('no Promise impl found');
			    }
			    return promiseCtor;
			}

			var ConnectableObservable$1 = {};

			var Subject$1 = {};

			var ObjectUnsubscribedError = {};

			Object.defineProperty(ObjectUnsubscribedError, "__esModule", { value: true });
			var ObjectUnsubscribedErrorImpl = (function () {
			    function ObjectUnsubscribedErrorImpl() {
			        Error.call(this);
			        this.message = 'object unsubscribed';
			        this.name = 'ObjectUnsubscribedError';
			        return this;
			    }
			    ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);
			    return ObjectUnsubscribedErrorImpl;
			})();
			ObjectUnsubscribedError.ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;

			var SubjectSubscription$1 = {};

			var __extends$1l = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(SubjectSubscription$1, "__esModule", { value: true });
			var Subscription_1$g = Subscription$1;
			var SubjectSubscription = (function (_super) {
			    __extends$1l(SubjectSubscription, _super);
			    function SubjectSubscription(subject, subscriber) {
			        var _this = _super.call(this) || this;
			        _this.subject = subject;
			        _this.subscriber = subscriber;
			        _this.closed = false;
			        return _this;
			    }
			    SubjectSubscription.prototype.unsubscribe = function () {
			        if (this.closed) {
			            return;
			        }
			        this.closed = true;
			        var subject = this.subject;
			        var observers = subject.observers;
			        this.subject = null;
			        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
			            return;
			        }
			        var subscriberIndex = observers.indexOf(this.subscriber);
			        if (subscriberIndex !== -1) {
			            observers.splice(subscriberIndex, 1);
			        }
			    };
			    return SubjectSubscription;
			}(Subscription_1$g.Subscription));
			SubjectSubscription$1.SubjectSubscription = SubjectSubscription;

			var __extends$1k = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(Subject$1, "__esModule", { value: true });
			var Observable_1$u = Observable$1;
			var Subscriber_1$J = Subscriber$1;
			var Subscription_1$f = Subscription$1;
			var ObjectUnsubscribedError_1$3 = ObjectUnsubscribedError;
			var SubjectSubscription_1$1 = SubjectSubscription$1;
			var rxSubscriber_1 = rxSubscriber;
			var SubjectSubscriber = (function (_super) {
			    __extends$1k(SubjectSubscriber, _super);
			    function SubjectSubscriber(destination) {
			        var _this = _super.call(this, destination) || this;
			        _this.destination = destination;
			        return _this;
			    }
			    return SubjectSubscriber;
			}(Subscriber_1$J.Subscriber));
			Subject$1.SubjectSubscriber = SubjectSubscriber;
			var Subject = (function (_super) {
			    __extends$1k(Subject, _super);
			    function Subject() {
			        var _this = _super.call(this) || this;
			        _this.observers = [];
			        _this.closed = false;
			        _this.isStopped = false;
			        _this.hasError = false;
			        _this.thrownError = null;
			        return _this;
			    }
			    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {
			        return new SubjectSubscriber(this);
			    };
			    Subject.prototype.lift = function (operator) {
			        var subject = new AnonymousSubject(this, this);
			        subject.operator = operator;
			        return subject;
			    };
			    Subject.prototype.next = function (value) {
			        if (this.closed) {
			            throw new ObjectUnsubscribedError_1$3.ObjectUnsubscribedError();
			        }
			        if (!this.isStopped) {
			            var observers = this.observers;
			            var len = observers.length;
			            var copy = observers.slice();
			            for (var i = 0; i < len; i++) {
			                copy[i].next(value);
			            }
			        }
			    };
			    Subject.prototype.error = function (err) {
			        if (this.closed) {
			            throw new ObjectUnsubscribedError_1$3.ObjectUnsubscribedError();
			        }
			        this.hasError = true;
			        this.thrownError = err;
			        this.isStopped = true;
			        var observers = this.observers;
			        var len = observers.length;
			        var copy = observers.slice();
			        for (var i = 0; i < len; i++) {
			            copy[i].error(err);
			        }
			        this.observers.length = 0;
			    };
			    Subject.prototype.complete = function () {
			        if (this.closed) {
			            throw new ObjectUnsubscribedError_1$3.ObjectUnsubscribedError();
			        }
			        this.isStopped = true;
			        var observers = this.observers;
			        var len = observers.length;
			        var copy = observers.slice();
			        for (var i = 0; i < len; i++) {
			            copy[i].complete();
			        }
			        this.observers.length = 0;
			    };
			    Subject.prototype.unsubscribe = function () {
			        this.isStopped = true;
			        this.closed = true;
			        this.observers = null;
			    };
			    Subject.prototype._trySubscribe = function (subscriber) {
			        if (this.closed) {
			            throw new ObjectUnsubscribedError_1$3.ObjectUnsubscribedError();
			        }
			        else {
			            return _super.prototype._trySubscribe.call(this, subscriber);
			        }
			    };
			    Subject.prototype._subscribe = function (subscriber) {
			        if (this.closed) {
			            throw new ObjectUnsubscribedError_1$3.ObjectUnsubscribedError();
			        }
			        else if (this.hasError) {
			            subscriber.error(this.thrownError);
			            return Subscription_1$f.Subscription.EMPTY;
			        }
			        else if (this.isStopped) {
			            subscriber.complete();
			            return Subscription_1$f.Subscription.EMPTY;
			        }
			        else {
			            this.observers.push(subscriber);
			            return new SubjectSubscription_1$1.SubjectSubscription(this, subscriber);
			        }
			    };
			    Subject.prototype.asObservable = function () {
			        var observable = new Observable_1$u.Observable();
			        observable.source = this;
			        return observable;
			    };
			    Subject.create = function (destination, source) {
			        return new AnonymousSubject(destination, source);
			    };
			    return Subject;
			}(Observable_1$u.Observable));
			Subject$1.Subject = Subject;
			var AnonymousSubject = (function (_super) {
			    __extends$1k(AnonymousSubject, _super);
			    function AnonymousSubject(destination, source) {
			        var _this = _super.call(this) || this;
			        _this.destination = destination;
			        _this.source = source;
			        return _this;
			    }
			    AnonymousSubject.prototype.next = function (value) {
			        var destination = this.destination;
			        if (destination && destination.next) {
			            destination.next(value);
			        }
			    };
			    AnonymousSubject.prototype.error = function (err) {
			        var destination = this.destination;
			        if (destination && destination.error) {
			            this.destination.error(err);
			        }
			    };
			    AnonymousSubject.prototype.complete = function () {
			        var destination = this.destination;
			        if (destination && destination.complete) {
			            this.destination.complete();
			        }
			    };
			    AnonymousSubject.prototype._subscribe = function (subscriber) {
			        var source = this.source;
			        if (source) {
			            return this.source.subscribe(subscriber);
			        }
			        else {
			            return Subscription_1$f.Subscription.EMPTY;
			        }
			    };
			    return AnonymousSubject;
			}(Subject));
			Subject$1.AnonymousSubject = AnonymousSubject;

			var refCount$1 = {};

			var __extends$1j = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(refCount$1, "__esModule", { value: true });
			var Subscriber_1$I = Subscriber$1;
			function refCount() {
			    return function refCountOperatorFunction(source) {
			        return source.lift(new RefCountOperator(source));
			    };
			}
			refCount$1.refCount = refCount;
			var RefCountOperator = (function () {
			    function RefCountOperator(connectable) {
			        this.connectable = connectable;
			    }
			    RefCountOperator.prototype.call = function (subscriber, source) {
			        var connectable = this.connectable;
			        connectable._refCount++;
			        var refCounter = new RefCountSubscriber(subscriber, connectable);
			        var subscription = source.subscribe(refCounter);
			        if (!refCounter.closed) {
			            refCounter.connection = connectable.connect();
			        }
			        return subscription;
			    };
			    return RefCountOperator;
			}());
			var RefCountSubscriber = (function (_super) {
			    __extends$1j(RefCountSubscriber, _super);
			    function RefCountSubscriber(destination, connectable) {
			        var _this = _super.call(this, destination) || this;
			        _this.connectable = connectable;
			        return _this;
			    }
			    RefCountSubscriber.prototype._unsubscribe = function () {
			        var connectable = this.connectable;
			        if (!connectable) {
			            this.connection = null;
			            return;
			        }
			        this.connectable = null;
			        var refCount = connectable._refCount;
			        if (refCount <= 0) {
			            this.connection = null;
			            return;
			        }
			        connectable._refCount = refCount - 1;
			        if (refCount > 1) {
			            this.connection = null;
			            return;
			        }
			        var connection = this.connection;
			        var sharedConnection = connectable._connection;
			        this.connection = null;
			        if (sharedConnection && (!connection || sharedConnection === connection)) {
			            sharedConnection.unsubscribe();
			        }
			    };
			    return RefCountSubscriber;
			}(Subscriber_1$I.Subscriber));

			var __extends$1i = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(ConnectableObservable$1, "__esModule", { value: true });
			var Subject_1$e = Subject$1;
			var Observable_1$t = Observable$1;
			var Subscriber_1$H = Subscriber$1;
			var Subscription_1$e = Subscription$1;
			var refCount_1$2 = refCount$1;
			var ConnectableObservable = (function (_super) {
			    __extends$1i(ConnectableObservable, _super);
			    function ConnectableObservable(source, subjectFactory) {
			        var _this = _super.call(this) || this;
			        _this.source = source;
			        _this.subjectFactory = subjectFactory;
			        _this._refCount = 0;
			        _this._isComplete = false;
			        return _this;
			    }
			    ConnectableObservable.prototype._subscribe = function (subscriber) {
			        return this.getSubject().subscribe(subscriber);
			    };
			    ConnectableObservable.prototype.getSubject = function () {
			        var subject = this._subject;
			        if (!subject || subject.isStopped) {
			            this._subject = this.subjectFactory();
			        }
			        return this._subject;
			    };
			    ConnectableObservable.prototype.connect = function () {
			        var connection = this._connection;
			        if (!connection) {
			            this._isComplete = false;
			            connection = this._connection = new Subscription_1$e.Subscription();
			            connection.add(this.source
			                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
			            if (connection.closed) {
			                this._connection = null;
			                connection = Subscription_1$e.Subscription.EMPTY;
			            }
			        }
			        return connection;
			    };
			    ConnectableObservable.prototype.refCount = function () {
			        return refCount_1$2.refCount()(this);
			    };
			    return ConnectableObservable;
			}(Observable_1$t.Observable));
			ConnectableObservable$1.ConnectableObservable = ConnectableObservable;
			ConnectableObservable$1.connectableObservableDescriptor = (function () {
			    var connectableProto = ConnectableObservable.prototype;
			    return {
			        operator: { value: null },
			        _refCount: { value: 0, writable: true },
			        _subject: { value: null, writable: true },
			        _connection: { value: null, writable: true },
			        _subscribe: { value: connectableProto._subscribe },
			        _isComplete: { value: connectableProto._isComplete, writable: true },
			        getSubject: { value: connectableProto.getSubject },
			        connect: { value: connectableProto.connect },
			        refCount: { value: connectableProto.refCount }
			    };
			})();
			var ConnectableSubscriber = (function (_super) {
			    __extends$1i(ConnectableSubscriber, _super);
			    function ConnectableSubscriber(destination, connectable) {
			        var _this = _super.call(this, destination) || this;
			        _this.connectable = connectable;
			        return _this;
			    }
			    ConnectableSubscriber.prototype._error = function (err) {
			        this._unsubscribe();
			        _super.prototype._error.call(this, err);
			    };
			    ConnectableSubscriber.prototype._complete = function () {
			        this.connectable._isComplete = true;
			        this._unsubscribe();
			        _super.prototype._complete.call(this);
			    };
			    ConnectableSubscriber.prototype._unsubscribe = function () {
			        var connectable = this.connectable;
			        if (connectable) {
			            this.connectable = null;
			            var connection = connectable._connection;
			            connectable._refCount = 0;
			            connectable._subject = null;
			            connectable._connection = null;
			            if (connection) {
			                connection.unsubscribe();
			            }
			        }
			    };
			    return ConnectableSubscriber;
			}(Subject_1$e.SubjectSubscriber));
			((function (_super) {
			    __extends$1i(RefCountSubscriber, _super);
			    function RefCountSubscriber(destination, connectable) {
			        var _this = _super.call(this, destination) || this;
			        _this.connectable = connectable;
			        return _this;
			    }
			    RefCountSubscriber.prototype._unsubscribe = function () {
			        var connectable = this.connectable;
			        if (!connectable) {
			            this.connection = null;
			            return;
			        }
			        this.connectable = null;
			        var refCount = connectable._refCount;
			        if (refCount <= 0) {
			            this.connection = null;
			            return;
			        }
			        connectable._refCount = refCount - 1;
			        if (refCount > 1) {
			            this.connection = null;
			            return;
			        }
			        var connection = this.connection;
			        var sharedConnection = connectable._connection;
			        this.connection = null;
			        if (sharedConnection && (!connection || sharedConnection === connection)) {
			            sharedConnection.unsubscribe();
			        }
			    };
			    return RefCountSubscriber;
			})(Subscriber_1$H.Subscriber));

			var groupBy$1 = {};

			var __extends$1h = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(groupBy$1, "__esModule", { value: true });
			var Subscriber_1$G = Subscriber$1;
			var Subscription_1$d = Subscription$1;
			var Observable_1$s = Observable$1;
			var Subject_1$d = Subject$1;
			function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
			    return function (source) {
			        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
			    };
			}
			groupBy$1.groupBy = groupBy;
			var GroupByOperator = (function () {
			    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
			        this.keySelector = keySelector;
			        this.elementSelector = elementSelector;
			        this.durationSelector = durationSelector;
			        this.subjectSelector = subjectSelector;
			    }
			    GroupByOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
			    };
			    return GroupByOperator;
			}());
			var GroupBySubscriber = (function (_super) {
			    __extends$1h(GroupBySubscriber, _super);
			    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
			        var _this = _super.call(this, destination) || this;
			        _this.keySelector = keySelector;
			        _this.elementSelector = elementSelector;
			        _this.durationSelector = durationSelector;
			        _this.subjectSelector = subjectSelector;
			        _this.groups = null;
			        _this.attemptedToUnsubscribe = false;
			        _this.count = 0;
			        return _this;
			    }
			    GroupBySubscriber.prototype._next = function (value) {
			        var key;
			        try {
			            key = this.keySelector(value);
			        }
			        catch (err) {
			            this.error(err);
			            return;
			        }
			        this._group(value, key);
			    };
			    GroupBySubscriber.prototype._group = function (value, key) {
			        var groups = this.groups;
			        if (!groups) {
			            groups = this.groups = new Map();
			        }
			        var group = groups.get(key);
			        var element;
			        if (this.elementSelector) {
			            try {
			                element = this.elementSelector(value);
			            }
			            catch (err) {
			                this.error(err);
			            }
			        }
			        else {
			            element = value;
			        }
			        if (!group) {
			            group = (this.subjectSelector ? this.subjectSelector() : new Subject_1$d.Subject());
			            groups.set(key, group);
			            var groupedObservable = new GroupedObservable(key, group, this);
			            this.destination.next(groupedObservable);
			            if (this.durationSelector) {
			                var duration = void 0;
			                try {
			                    duration = this.durationSelector(new GroupedObservable(key, group));
			                }
			                catch (err) {
			                    this.error(err);
			                    return;
			                }
			                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
			            }
			        }
			        if (!group.closed) {
			            group.next(element);
			        }
			    };
			    GroupBySubscriber.prototype._error = function (err) {
			        var groups = this.groups;
			        if (groups) {
			            groups.forEach(function (group, key) {
			                group.error(err);
			            });
			            groups.clear();
			        }
			        this.destination.error(err);
			    };
			    GroupBySubscriber.prototype._complete = function () {
			        var groups = this.groups;
			        if (groups) {
			            groups.forEach(function (group, key) {
			                group.complete();
			            });
			            groups.clear();
			        }
			        this.destination.complete();
			    };
			    GroupBySubscriber.prototype.removeGroup = function (key) {
			        this.groups.delete(key);
			    };
			    GroupBySubscriber.prototype.unsubscribe = function () {
			        if (!this.closed) {
			            this.attemptedToUnsubscribe = true;
			            if (this.count === 0) {
			                _super.prototype.unsubscribe.call(this);
			            }
			        }
			    };
			    return GroupBySubscriber;
			}(Subscriber_1$G.Subscriber));
			var GroupDurationSubscriber = (function (_super) {
			    __extends$1h(GroupDurationSubscriber, _super);
			    function GroupDurationSubscriber(key, group, parent) {
			        var _this = _super.call(this, group) || this;
			        _this.key = key;
			        _this.group = group;
			        _this.parent = parent;
			        return _this;
			    }
			    GroupDurationSubscriber.prototype._next = function (value) {
			        this.complete();
			    };
			    GroupDurationSubscriber.prototype._unsubscribe = function () {
			        var _a = this, parent = _a.parent, key = _a.key;
			        this.key = this.parent = null;
			        if (parent) {
			            parent.removeGroup(key);
			        }
			    };
			    return GroupDurationSubscriber;
			}(Subscriber_1$G.Subscriber));
			var GroupedObservable = (function (_super) {
			    __extends$1h(GroupedObservable, _super);
			    function GroupedObservable(key, groupSubject, refCountSubscription) {
			        var _this = _super.call(this) || this;
			        _this.key = key;
			        _this.groupSubject = groupSubject;
			        _this.refCountSubscription = refCountSubscription;
			        return _this;
			    }
			    GroupedObservable.prototype._subscribe = function (subscriber) {
			        var subscription = new Subscription_1$d.Subscription();
			        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
			        if (refCountSubscription && !refCountSubscription.closed) {
			            subscription.add(new InnerRefCountSubscription(refCountSubscription));
			        }
			        subscription.add(groupSubject.subscribe(subscriber));
			        return subscription;
			    };
			    return GroupedObservable;
			}(Observable_1$s.Observable));
			groupBy$1.GroupedObservable = GroupedObservable;
			var InnerRefCountSubscription = (function (_super) {
			    __extends$1h(InnerRefCountSubscription, _super);
			    function InnerRefCountSubscription(parent) {
			        var _this = _super.call(this) || this;
			        _this.parent = parent;
			        parent.count++;
			        return _this;
			    }
			    InnerRefCountSubscription.prototype.unsubscribe = function () {
			        var parent = this.parent;
			        if (!parent.closed && !this.closed) {
			            _super.prototype.unsubscribe.call(this);
			            parent.count -= 1;
			            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
			                parent.unsubscribe();
			            }
			        }
			    };
			    return InnerRefCountSubscription;
			}(Subscription_1$d.Subscription));

			var BehaviorSubject$1 = {};

			var __extends$1g = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(BehaviorSubject$1, "__esModule", { value: true });
			var Subject_1$c = Subject$1;
			var ObjectUnsubscribedError_1$2 = ObjectUnsubscribedError;
			var BehaviorSubject = (function (_super) {
			    __extends$1g(BehaviorSubject, _super);
			    function BehaviorSubject(_value) {
			        var _this = _super.call(this) || this;
			        _this._value = _value;
			        return _this;
			    }
			    Object.defineProperty(BehaviorSubject.prototype, "value", {
			        get: function () {
			            return this.getValue();
			        },
			        enumerable: true,
			        configurable: true
			    });
			    BehaviorSubject.prototype._subscribe = function (subscriber) {
			        var subscription = _super.prototype._subscribe.call(this, subscriber);
			        if (subscription && !subscription.closed) {
			            subscriber.next(this._value);
			        }
			        return subscription;
			    };
			    BehaviorSubject.prototype.getValue = function () {
			        if (this.hasError) {
			            throw this.thrownError;
			        }
			        else if (this.closed) {
			            throw new ObjectUnsubscribedError_1$2.ObjectUnsubscribedError();
			        }
			        else {
			            return this._value;
			        }
			    };
			    BehaviorSubject.prototype.next = function (value) {
			        _super.prototype.next.call(this, this._value = value);
			    };
			    return BehaviorSubject;
			}(Subject_1$c.Subject));
			BehaviorSubject$1.BehaviorSubject = BehaviorSubject;

			var ReplaySubject$1 = {};

			var queue = {};

			var QueueAction$1 = {};

			var AsyncAction$1 = {};

			var Action$1 = {};

			var __extends$1f = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(Action$1, "__esModule", { value: true });
			var Subscription_1$c = Subscription$1;
			var Action = (function (_super) {
			    __extends$1f(Action, _super);
			    function Action(scheduler, work) {
			        return _super.call(this) || this;
			    }
			    Action.prototype.schedule = function (state, delay) {
			        return this;
			    };
			    return Action;
			}(Subscription_1$c.Subscription));
			Action$1.Action = Action;

			var __extends$1e = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(AsyncAction$1, "__esModule", { value: true });
			var Action_1 = Action$1;
			var AsyncAction = (function (_super) {
			    __extends$1e(AsyncAction, _super);
			    function AsyncAction(scheduler, work) {
			        var _this = _super.call(this, scheduler, work) || this;
			        _this.scheduler = scheduler;
			        _this.work = work;
			        _this.pending = false;
			        return _this;
			    }
			    AsyncAction.prototype.schedule = function (state, delay) {
			        if (delay === void 0) { delay = 0; }
			        if (this.closed) {
			            return this;
			        }
			        this.state = state;
			        var id = this.id;
			        var scheduler = this.scheduler;
			        if (id != null) {
			            this.id = this.recycleAsyncId(scheduler, id, delay);
			        }
			        this.pending = true;
			        this.delay = delay;
			        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
			        return this;
			    };
			    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
			        if (delay === void 0) { delay = 0; }
			        return setInterval(scheduler.flush.bind(scheduler, this), delay);
			    };
			    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
			        if (delay === void 0) { delay = 0; }
			        if (delay !== null && this.delay === delay && this.pending === false) {
			            return id;
			        }
			        clearInterval(id);
			        return undefined;
			    };
			    AsyncAction.prototype.execute = function (state, delay) {
			        if (this.closed) {
			            return new Error('executing a cancelled action');
			        }
			        this.pending = false;
			        var error = this._execute(state, delay);
			        if (error) {
			            return error;
			        }
			        else if (this.pending === false && this.id != null) {
			            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
			        }
			    };
			    AsyncAction.prototype._execute = function (state, delay) {
			        var errored = false;
			        var errorValue = undefined;
			        try {
			            this.work(state);
			        }
			        catch (e) {
			            errored = true;
			            errorValue = !!e && e || new Error(e);
			        }
			        if (errored) {
			            this.unsubscribe();
			            return errorValue;
			        }
			    };
			    AsyncAction.prototype._unsubscribe = function () {
			        var id = this.id;
			        var scheduler = this.scheduler;
			        var actions = scheduler.actions;
			        var index = actions.indexOf(this);
			        this.work = null;
			        this.state = null;
			        this.pending = false;
			        this.scheduler = null;
			        if (index !== -1) {
			            actions.splice(index, 1);
			        }
			        if (id != null) {
			            this.id = this.recycleAsyncId(scheduler, id, null);
			        }
			        this.delay = null;
			    };
			    return AsyncAction;
			}(Action_1.Action));
			AsyncAction$1.AsyncAction = AsyncAction;

			var __extends$1d = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(QueueAction$1, "__esModule", { value: true });
			var AsyncAction_1$3 = AsyncAction$1;
			var QueueAction = (function (_super) {
			    __extends$1d(QueueAction, _super);
			    function QueueAction(scheduler, work) {
			        var _this = _super.call(this, scheduler, work) || this;
			        _this.scheduler = scheduler;
			        _this.work = work;
			        return _this;
			    }
			    QueueAction.prototype.schedule = function (state, delay) {
			        if (delay === void 0) { delay = 0; }
			        if (delay > 0) {
			            return _super.prototype.schedule.call(this, state, delay);
			        }
			        this.delay = delay;
			        this.state = state;
			        this.scheduler.flush(this);
			        return this;
			    };
			    QueueAction.prototype.execute = function (state, delay) {
			        return (delay > 0 || this.closed) ?
			            _super.prototype.execute.call(this, state, delay) :
			            this._execute(state, delay);
			    };
			    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
			        if (delay === void 0) { delay = 0; }
			        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
			            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
			        }
			        return scheduler.flush(this);
			    };
			    return QueueAction;
			}(AsyncAction_1$3.AsyncAction));
			QueueAction$1.QueueAction = QueueAction;

			var QueueScheduler$1 = {};

			var AsyncScheduler$1 = {};

			var Scheduler$1 = {};

			Object.defineProperty(Scheduler$1, "__esModule", { value: true });
			var Scheduler = (function () {
			    function Scheduler(SchedulerAction, now) {
			        if (now === void 0) { now = Scheduler.now; }
			        this.SchedulerAction = SchedulerAction;
			        this.now = now;
			    }
			    Scheduler.prototype.schedule = function (work, delay, state) {
			        if (delay === void 0) { delay = 0; }
			        return new this.SchedulerAction(this, work).schedule(state, delay);
			    };
			    Scheduler.now = function () { return Date.now(); };
			    return Scheduler;
			}());
			Scheduler$1.Scheduler = Scheduler;

			var __extends$1c = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(AsyncScheduler$1, "__esModule", { value: true });
			var Scheduler_1$1 = Scheduler$1;
			var AsyncScheduler = (function (_super) {
			    __extends$1c(AsyncScheduler, _super);
			    function AsyncScheduler(SchedulerAction, now) {
			        if (now === void 0) { now = Scheduler_1$1.Scheduler.now; }
			        var _this = _super.call(this, SchedulerAction, function () {
			            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
			                return AsyncScheduler.delegate.now();
			            }
			            else {
			                return now();
			            }
			        }) || this;
			        _this.actions = [];
			        _this.active = false;
			        _this.scheduled = undefined;
			        return _this;
			    }
			    AsyncScheduler.prototype.schedule = function (work, delay, state) {
			        if (delay === void 0) { delay = 0; }
			        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
			            return AsyncScheduler.delegate.schedule(work, delay, state);
			        }
			        else {
			            return _super.prototype.schedule.call(this, work, delay, state);
			        }
			    };
			    AsyncScheduler.prototype.flush = function (action) {
			        var actions = this.actions;
			        if (this.active) {
			            actions.push(action);
			            return;
			        }
			        var error;
			        this.active = true;
			        do {
			            if (error = action.execute(action.state, action.delay)) {
			                break;
			            }
			        } while (action = actions.shift());
			        this.active = false;
			        if (error) {
			            while (action = actions.shift()) {
			                action.unsubscribe();
			            }
			            throw error;
			        }
			    };
			    return AsyncScheduler;
			}(Scheduler_1$1.Scheduler));
			AsyncScheduler$1.AsyncScheduler = AsyncScheduler;

			var __extends$1b = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(QueueScheduler$1, "__esModule", { value: true });
			var AsyncScheduler_1$3 = AsyncScheduler$1;
			var QueueScheduler = (function (_super) {
			    __extends$1b(QueueScheduler, _super);
			    function QueueScheduler() {
			        return _super !== null && _super.apply(this, arguments) || this;
			    }
			    return QueueScheduler;
			}(AsyncScheduler_1$3.AsyncScheduler));
			QueueScheduler$1.QueueScheduler = QueueScheduler;

			(function (exports) {
			Object.defineProperty(exports, "__esModule", { value: true });
			var QueueAction_1 = QueueAction$1;
			var QueueScheduler_1 = QueueScheduler$1;
			exports.queueScheduler = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
			exports.queue = exports.queueScheduler;

			}(queue));

			var observeOn$1 = {};

			var Notification = {};

			var empty = {};

			(function (exports) {
			Object.defineProperty(exports, "__esModule", { value: true });
			var Observable_1 = Observable$1;
			exports.EMPTY = new Observable_1.Observable(function (subscriber) { return subscriber.complete(); });
			function empty(scheduler) {
			    return scheduler ? emptyScheduled(scheduler) : exports.EMPTY;
			}
			exports.empty = empty;
			function emptyScheduled(scheduler) {
			    return new Observable_1.Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
			}

			}(empty));

			var of$1 = {};

			var isScheduler$1 = {};

			Object.defineProperty(isScheduler$1, "__esModule", { value: true });
			function isScheduler(value) {
			    return value && typeof value.schedule === 'function';
			}
			isScheduler$1.isScheduler = isScheduler;

			var fromArray$1 = {};

			var subscribeToArray = {};

			Object.defineProperty(subscribeToArray, "__esModule", { value: true });
			subscribeToArray.subscribeToArray = function (array) { return function (subscriber) {
			    for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
			        subscriber.next(array[i]);
			    }
			    subscriber.complete();
			}; };

			var scheduleArray$1 = {};

			Object.defineProperty(scheduleArray$1, "__esModule", { value: true });
			var Observable_1$r = Observable$1;
			var Subscription_1$b = Subscription$1;
			function scheduleArray(input, scheduler) {
			    return new Observable_1$r.Observable(function (subscriber) {
			        var sub = new Subscription_1$b.Subscription();
			        var i = 0;
			        sub.add(scheduler.schedule(function () {
			            if (i === input.length) {
			                subscriber.complete();
			                return;
			            }
			            subscriber.next(input[i++]);
			            if (!subscriber.closed) {
			                sub.add(this.schedule());
			            }
			        }));
			        return sub;
			    });
			}
			scheduleArray$1.scheduleArray = scheduleArray;

			Object.defineProperty(fromArray$1, "__esModule", { value: true });
			var Observable_1$q = Observable$1;
			var subscribeToArray_1$1 = subscribeToArray;
			var scheduleArray_1$2 = scheduleArray$1;
			function fromArray(input, scheduler) {
			    if (!scheduler) {
			        return new Observable_1$q.Observable(subscribeToArray_1$1.subscribeToArray(input));
			    }
			    else {
			        return scheduleArray_1$2.scheduleArray(input, scheduler);
			    }
			}
			fromArray$1.fromArray = fromArray;

			Object.defineProperty(of$1, "__esModule", { value: true });
			var isScheduler_1$9 = isScheduler$1;
			var fromArray_1$4 = fromArray$1;
			var scheduleArray_1$1 = scheduleArray$1;
			function of() {
			    var args = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        args[_i] = arguments[_i];
			    }
			    var scheduler = args[args.length - 1];
			    if (isScheduler_1$9.isScheduler(scheduler)) {
			        args.pop();
			        return scheduleArray_1$1.scheduleArray(args, scheduler);
			    }
			    else {
			        return fromArray_1$4.fromArray(args);
			    }
			}
			of$1.of = of;

			var throwError$1 = {};

			Object.defineProperty(throwError$1, "__esModule", { value: true });
			var Observable_1$p = Observable$1;
			function throwError(error, scheduler) {
			    if (!scheduler) {
			        return new Observable_1$p.Observable(function (subscriber) { return subscriber.error(error); });
			    }
			    else {
			        return new Observable_1$p.Observable(function (subscriber) { return scheduler.schedule(dispatch$7, 0, { error: error, subscriber: subscriber }); });
			    }
			}
			throwError$1.throwError = throwError;
			function dispatch$7(_a) {
			    var error = _a.error, subscriber = _a.subscriber;
			    subscriber.error(error);
			}

			(function (exports) {
			Object.defineProperty(exports, "__esModule", { value: true });
			var empty_1 = empty;
			var of_1 = of$1;
			var throwError_1 = throwError$1;
			(function (NotificationKind) {
			    NotificationKind["NEXT"] = "N";
			    NotificationKind["ERROR"] = "E";
			    NotificationKind["COMPLETE"] = "C";
			})(exports.NotificationKind || (exports.NotificationKind = {}));
			var Notification = (function () {
			    function Notification(kind, value, error) {
			        this.kind = kind;
			        this.value = value;
			        this.error = error;
			        this.hasValue = kind === 'N';
			    }
			    Notification.prototype.observe = function (observer) {
			        switch (this.kind) {
			            case 'N':
			                return observer.next && observer.next(this.value);
			            case 'E':
			                return observer.error && observer.error(this.error);
			            case 'C':
			                return observer.complete && observer.complete();
			        }
			    };
			    Notification.prototype.do = function (next, error, complete) {
			        var kind = this.kind;
			        switch (kind) {
			            case 'N':
			                return next && next(this.value);
			            case 'E':
			                return error && error(this.error);
			            case 'C':
			                return complete && complete();
			        }
			    };
			    Notification.prototype.accept = function (nextOrObserver, error, complete) {
			        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
			            return this.observe(nextOrObserver);
			        }
			        else {
			            return this.do(nextOrObserver, error, complete);
			        }
			    };
			    Notification.prototype.toObservable = function () {
			        var kind = this.kind;
			        switch (kind) {
			            case 'N':
			                return of_1.of(this.value);
			            case 'E':
			                return throwError_1.throwError(this.error);
			            case 'C':
			                return empty_1.empty();
			        }
			        throw new Error('unexpected notification kind value');
			    };
			    Notification.createNext = function (value) {
			        if (typeof value !== 'undefined') {
			            return new Notification('N', value);
			        }
			        return Notification.undefinedValueNotification;
			    };
			    Notification.createError = function (err) {
			        return new Notification('E', undefined, err);
			    };
			    Notification.createComplete = function () {
			        return Notification.completeNotification;
			    };
			    Notification.completeNotification = new Notification('C');
			    Notification.undefinedValueNotification = new Notification('N', undefined);
			    return Notification;
			}());
			exports.Notification = Notification;

			}(Notification));

			var __extends$1a = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(observeOn$1, "__esModule", { value: true });
			var Subscriber_1$F = Subscriber$1;
			var Notification_1$3 = Notification;
			function observeOn(scheduler, delay) {
			    if (delay === void 0) { delay = 0; }
			    return function observeOnOperatorFunction(source) {
			        return source.lift(new ObserveOnOperator(scheduler, delay));
			    };
			}
			observeOn$1.observeOn = observeOn;
			var ObserveOnOperator = (function () {
			    function ObserveOnOperator(scheduler, delay) {
			        if (delay === void 0) { delay = 0; }
			        this.scheduler = scheduler;
			        this.delay = delay;
			    }
			    ObserveOnOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
			    };
			    return ObserveOnOperator;
			}());
			observeOn$1.ObserveOnOperator = ObserveOnOperator;
			var ObserveOnSubscriber = (function (_super) {
			    __extends$1a(ObserveOnSubscriber, _super);
			    function ObserveOnSubscriber(destination, scheduler, delay) {
			        if (delay === void 0) { delay = 0; }
			        var _this = _super.call(this, destination) || this;
			        _this.scheduler = scheduler;
			        _this.delay = delay;
			        return _this;
			    }
			    ObserveOnSubscriber.dispatch = function (arg) {
			        var notification = arg.notification, destination = arg.destination;
			        notification.observe(destination);
			        this.unsubscribe();
			    };
			    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
			        var destination = this.destination;
			        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
			    };
			    ObserveOnSubscriber.prototype._next = function (value) {
			        this.scheduleMessage(Notification_1$3.Notification.createNext(value));
			    };
			    ObserveOnSubscriber.prototype._error = function (err) {
			        this.scheduleMessage(Notification_1$3.Notification.createError(err));
			        this.unsubscribe();
			    };
			    ObserveOnSubscriber.prototype._complete = function () {
			        this.scheduleMessage(Notification_1$3.Notification.createComplete());
			        this.unsubscribe();
			    };
			    return ObserveOnSubscriber;
			}(Subscriber_1$F.Subscriber));
			observeOn$1.ObserveOnSubscriber = ObserveOnSubscriber;
			var ObserveOnMessage = (function () {
			    function ObserveOnMessage(notification, destination) {
			        this.notification = notification;
			        this.destination = destination;
			    }
			    return ObserveOnMessage;
			}());
			observeOn$1.ObserveOnMessage = ObserveOnMessage;

			var __extends$19 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(ReplaySubject$1, "__esModule", { value: true });
			var Subject_1$b = Subject$1;
			var queue_1$1 = queue;
			var Subscription_1$a = Subscription$1;
			var observeOn_1$1 = observeOn$1;
			var ObjectUnsubscribedError_1$1 = ObjectUnsubscribedError;
			var SubjectSubscription_1 = SubjectSubscription$1;
			var ReplaySubject = (function (_super) {
			    __extends$19(ReplaySubject, _super);
			    function ReplaySubject(bufferSize, windowTime, scheduler) {
			        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }
			        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }
			        var _this = _super.call(this) || this;
			        _this.scheduler = scheduler;
			        _this._events = [];
			        _this._infiniteTimeWindow = false;
			        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
			        _this._windowTime = windowTime < 1 ? 1 : windowTime;
			        if (windowTime === Number.POSITIVE_INFINITY) {
			            _this._infiniteTimeWindow = true;
			            _this.next = _this.nextInfiniteTimeWindow;
			        }
			        else {
			            _this.next = _this.nextTimeWindow;
			        }
			        return _this;
			    }
			    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
			        if (!this.isStopped) {
			            var _events = this._events;
			            _events.push(value);
			            if (_events.length > this._bufferSize) {
			                _events.shift();
			            }
			        }
			        _super.prototype.next.call(this, value);
			    };
			    ReplaySubject.prototype.nextTimeWindow = function (value) {
			        if (!this.isStopped) {
			            this._events.push(new ReplayEvent(this._getNow(), value));
			            this._trimBufferThenGetEvents();
			        }
			        _super.prototype.next.call(this, value);
			    };
			    ReplaySubject.prototype._subscribe = function (subscriber) {
			        var _infiniteTimeWindow = this._infiniteTimeWindow;
			        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
			        var scheduler = this.scheduler;
			        var len = _events.length;
			        var subscription;
			        if (this.closed) {
			            throw new ObjectUnsubscribedError_1$1.ObjectUnsubscribedError();
			        }
			        else if (this.isStopped || this.hasError) {
			            subscription = Subscription_1$a.Subscription.EMPTY;
			        }
			        else {
			            this.observers.push(subscriber);
			            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
			        }
			        if (scheduler) {
			            subscriber.add(subscriber = new observeOn_1$1.ObserveOnSubscriber(subscriber, scheduler));
			        }
			        if (_infiniteTimeWindow) {
			            for (var i = 0; i < len && !subscriber.closed; i++) {
			                subscriber.next(_events[i]);
			            }
			        }
			        else {
			            for (var i = 0; i < len && !subscriber.closed; i++) {
			                subscriber.next(_events[i].value);
			            }
			        }
			        if (this.hasError) {
			            subscriber.error(this.thrownError);
			        }
			        else if (this.isStopped) {
			            subscriber.complete();
			        }
			        return subscription;
			    };
			    ReplaySubject.prototype._getNow = function () {
			        return (this.scheduler || queue_1$1.queue).now();
			    };
			    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
			        var now = this._getNow();
			        var _bufferSize = this._bufferSize;
			        var _windowTime = this._windowTime;
			        var _events = this._events;
			        var eventsCount = _events.length;
			        var spliceCount = 0;
			        while (spliceCount < eventsCount) {
			            if ((now - _events[spliceCount].time) < _windowTime) {
			                break;
			            }
			            spliceCount++;
			        }
			        if (eventsCount > _bufferSize) {
			            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
			        }
			        if (spliceCount > 0) {
			            _events.splice(0, spliceCount);
			        }
			        return _events;
			    };
			    return ReplaySubject;
			}(Subject_1$b.Subject));
			ReplaySubject$1.ReplaySubject = ReplaySubject;
			var ReplayEvent = (function () {
			    function ReplayEvent(time, value) {
			        this.time = time;
			        this.value = value;
			    }
			    return ReplayEvent;
			}());

			var AsyncSubject$1 = {};

			var __extends$18 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(AsyncSubject$1, "__esModule", { value: true });
			var Subject_1$a = Subject$1;
			var Subscription_1$9 = Subscription$1;
			var AsyncSubject = (function (_super) {
			    __extends$18(AsyncSubject, _super);
			    function AsyncSubject() {
			        var _this = _super !== null && _super.apply(this, arguments) || this;
			        _this.value = null;
			        _this.hasNext = false;
			        _this.hasCompleted = false;
			        return _this;
			    }
			    AsyncSubject.prototype._subscribe = function (subscriber) {
			        if (this.hasError) {
			            subscriber.error(this.thrownError);
			            return Subscription_1$9.Subscription.EMPTY;
			        }
			        else if (this.hasCompleted && this.hasNext) {
			            subscriber.next(this.value);
			            subscriber.complete();
			            return Subscription_1$9.Subscription.EMPTY;
			        }
			        return _super.prototype._subscribe.call(this, subscriber);
			    };
			    AsyncSubject.prototype.next = function (value) {
			        if (!this.hasCompleted) {
			            this.value = value;
			            this.hasNext = true;
			        }
			    };
			    AsyncSubject.prototype.error = function (error) {
			        if (!this.hasCompleted) {
			            _super.prototype.error.call(this, error);
			        }
			    };
			    AsyncSubject.prototype.complete = function () {
			        this.hasCompleted = true;
			        if (this.hasNext) {
			            _super.prototype.next.call(this, this.value);
			        }
			        _super.prototype.complete.call(this);
			    };
			    return AsyncSubject;
			}(Subject_1$a.Subject));
			AsyncSubject$1.AsyncSubject = AsyncSubject;

			var asap = {};

			var AsapAction$1 = {};

			var Immediate = {};

			Object.defineProperty(Immediate, "__esModule", { value: true });
			var nextHandle = 1;
			var RESOLVED = (function () { return Promise.resolve(); })();
			var activeHandles = {};
			function findAndClearHandle(handle) {
			    if (handle in activeHandles) {
			        delete activeHandles[handle];
			        return true;
			    }
			    return false;
			}
			Immediate.Immediate = {
			    setImmediate: function (cb) {
			        var handle = nextHandle++;
			        activeHandles[handle] = true;
			        RESOLVED.then(function () { return findAndClearHandle(handle) && cb(); });
			        return handle;
			    },
			    clearImmediate: function (handle) {
			        findAndClearHandle(handle);
			    },
			};
			Immediate.TestTools = {
			    pending: function () {
			        return Object.keys(activeHandles).length;
			    }
			};

			var __extends$17 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(AsapAction$1, "__esModule", { value: true });
			var Immediate_1 = Immediate;
			var AsyncAction_1$2 = AsyncAction$1;
			var AsapAction = (function (_super) {
			    __extends$17(AsapAction, _super);
			    function AsapAction(scheduler, work) {
			        var _this = _super.call(this, scheduler, work) || this;
			        _this.scheduler = scheduler;
			        _this.work = work;
			        return _this;
			    }
			    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
			        if (delay === void 0) { delay = 0; }
			        if (delay !== null && delay > 0) {
			            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
			        }
			        scheduler.actions.push(this);
			        return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
			    };
			    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
			        if (delay === void 0) { delay = 0; }
			        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
			            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
			        }
			        if (scheduler.actions.length === 0) {
			            Immediate_1.Immediate.clearImmediate(id);
			            scheduler.scheduled = undefined;
			        }
			        return undefined;
			    };
			    return AsapAction;
			}(AsyncAction_1$2.AsyncAction));
			AsapAction$1.AsapAction = AsapAction;

			var AsapScheduler$1 = {};

			var __extends$16 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(AsapScheduler$1, "__esModule", { value: true });
			var AsyncScheduler_1$2 = AsyncScheduler$1;
			var AsapScheduler = (function (_super) {
			    __extends$16(AsapScheduler, _super);
			    function AsapScheduler() {
			        return _super !== null && _super.apply(this, arguments) || this;
			    }
			    AsapScheduler.prototype.flush = function (action) {
			        this.active = true;
			        this.scheduled = undefined;
			        var actions = this.actions;
			        var error;
			        var index = -1;
			        var count = actions.length;
			        action = action || actions.shift();
			        do {
			            if (error = action.execute(action.state, action.delay)) {
			                break;
			            }
			        } while (++index < count && (action = actions.shift()));
			        this.active = false;
			        if (error) {
			            while (++index < count && (action = actions.shift())) {
			                action.unsubscribe();
			            }
			            throw error;
			        }
			    };
			    return AsapScheduler;
			}(AsyncScheduler_1$2.AsyncScheduler));
			AsapScheduler$1.AsapScheduler = AsapScheduler;

			(function (exports) {
			Object.defineProperty(exports, "__esModule", { value: true });
			var AsapAction_1 = AsapAction$1;
			var AsapScheduler_1 = AsapScheduler$1;
			exports.asapScheduler = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);
			exports.asap = exports.asapScheduler;

			}(asap));

			var async = {};

			(function (exports) {
			Object.defineProperty(exports, "__esModule", { value: true });
			var AsyncAction_1 = AsyncAction$1;
			var AsyncScheduler_1 = AsyncScheduler$1;
			exports.asyncScheduler = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
			exports.async = exports.asyncScheduler;

			}(async));

			var animationFrame = {};

			var AnimationFrameAction$1 = {};

			var __extends$15 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(AnimationFrameAction$1, "__esModule", { value: true });
			var AsyncAction_1$1 = AsyncAction$1;
			var AnimationFrameAction = (function (_super) {
			    __extends$15(AnimationFrameAction, _super);
			    function AnimationFrameAction(scheduler, work) {
			        var _this = _super.call(this, scheduler, work) || this;
			        _this.scheduler = scheduler;
			        _this.work = work;
			        return _this;
			    }
			    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
			        if (delay === void 0) { delay = 0; }
			        if (delay !== null && delay > 0) {
			            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
			        }
			        scheduler.actions.push(this);
			        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
			    };
			    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
			        if (delay === void 0) { delay = 0; }
			        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
			            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
			        }
			        if (scheduler.actions.length === 0) {
			            cancelAnimationFrame(id);
			            scheduler.scheduled = undefined;
			        }
			        return undefined;
			    };
			    return AnimationFrameAction;
			}(AsyncAction_1$1.AsyncAction));
			AnimationFrameAction$1.AnimationFrameAction = AnimationFrameAction;

			var AnimationFrameScheduler$1 = {};

			var __extends$14 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(AnimationFrameScheduler$1, "__esModule", { value: true });
			var AsyncScheduler_1$1 = AsyncScheduler$1;
			var AnimationFrameScheduler = (function (_super) {
			    __extends$14(AnimationFrameScheduler, _super);
			    function AnimationFrameScheduler() {
			        return _super !== null && _super.apply(this, arguments) || this;
			    }
			    AnimationFrameScheduler.prototype.flush = function (action) {
			        this.active = true;
			        this.scheduled = undefined;
			        var actions = this.actions;
			        var error;
			        var index = -1;
			        var count = actions.length;
			        action = action || actions.shift();
			        do {
			            if (error = action.execute(action.state, action.delay)) {
			                break;
			            }
			        } while (++index < count && (action = actions.shift()));
			        this.active = false;
			        if (error) {
			            while (++index < count && (action = actions.shift())) {
			                action.unsubscribe();
			            }
			            throw error;
			        }
			    };
			    return AnimationFrameScheduler;
			}(AsyncScheduler_1$1.AsyncScheduler));
			AnimationFrameScheduler$1.AnimationFrameScheduler = AnimationFrameScheduler;

			(function (exports) {
			Object.defineProperty(exports, "__esModule", { value: true });
			var AnimationFrameAction_1 = AnimationFrameAction$1;
			var AnimationFrameScheduler_1 = AnimationFrameScheduler$1;
			exports.animationFrameScheduler = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);
			exports.animationFrame = exports.animationFrameScheduler;

			}(animationFrame));

			var VirtualTimeScheduler$1 = {};

			var __extends$13 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(VirtualTimeScheduler$1, "__esModule", { value: true });
			var AsyncAction_1 = AsyncAction$1;
			var AsyncScheduler_1 = AsyncScheduler$1;
			var VirtualTimeScheduler = (function (_super) {
			    __extends$13(VirtualTimeScheduler, _super);
			    function VirtualTimeScheduler(SchedulerAction, maxFrames) {
			        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }
			        if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }
			        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
			        _this.maxFrames = maxFrames;
			        _this.frame = 0;
			        _this.index = -1;
			        return _this;
			    }
			    VirtualTimeScheduler.prototype.flush = function () {
			        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
			        var error, action;
			        while ((action = actions[0]) && action.delay <= maxFrames) {
			            actions.shift();
			            this.frame = action.delay;
			            if (error = action.execute(action.state, action.delay)) {
			                break;
			            }
			        }
			        if (error) {
			            while (action = actions.shift()) {
			                action.unsubscribe();
			            }
			            throw error;
			        }
			    };
			    VirtualTimeScheduler.frameTimeFactor = 10;
			    return VirtualTimeScheduler;
			}(AsyncScheduler_1.AsyncScheduler));
			VirtualTimeScheduler$1.VirtualTimeScheduler = VirtualTimeScheduler;
			var VirtualAction = (function (_super) {
			    __extends$13(VirtualAction, _super);
			    function VirtualAction(scheduler, work, index) {
			        if (index === void 0) { index = scheduler.index += 1; }
			        var _this = _super.call(this, scheduler, work) || this;
			        _this.scheduler = scheduler;
			        _this.work = work;
			        _this.index = index;
			        _this.active = true;
			        _this.index = scheduler.index = index;
			        return _this;
			    }
			    VirtualAction.prototype.schedule = function (state, delay) {
			        if (delay === void 0) { delay = 0; }
			        if (!this.id) {
			            return _super.prototype.schedule.call(this, state, delay);
			        }
			        this.active = false;
			        var action = new VirtualAction(this.scheduler, this.work);
			        this.add(action);
			        return action.schedule(state, delay);
			    };
			    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
			        if (delay === void 0) { delay = 0; }
			        this.delay = scheduler.frame + delay;
			        var actions = scheduler.actions;
			        actions.push(this);
			        actions.sort(VirtualAction.sortActions);
			        return true;
			    };
			    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
			        return undefined;
			    };
			    VirtualAction.prototype._execute = function (state, delay) {
			        if (this.active === true) {
			            return _super.prototype._execute.call(this, state, delay);
			        }
			    };
			    VirtualAction.sortActions = function (a, b) {
			        if (a.delay === b.delay) {
			            if (a.index === b.index) {
			                return 0;
			            }
			            else if (a.index > b.index) {
			                return 1;
			            }
			            else {
			                return -1;
			            }
			        }
			        else if (a.delay > b.delay) {
			            return 1;
			        }
			        else {
			            return -1;
			        }
			    };
			    return VirtualAction;
			}(AsyncAction_1.AsyncAction));
			VirtualTimeScheduler$1.VirtualAction = VirtualAction;

			var noop$1 = {};

			Object.defineProperty(noop$1, "__esModule", { value: true });
			function noop() { }
			noop$1.noop = noop;

			var isObservable$1 = {};

			Object.defineProperty(isObservable$1, "__esModule", { value: true });
			var Observable_1$o = Observable$1;
			function isObservable(obj) {
			    return !!obj && (obj instanceof Observable_1$o.Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));
			}
			isObservable$1.isObservable = isObservable;

			var ArgumentOutOfRangeError = {};

			Object.defineProperty(ArgumentOutOfRangeError, "__esModule", { value: true });
			var ArgumentOutOfRangeErrorImpl = (function () {
			    function ArgumentOutOfRangeErrorImpl() {
			        Error.call(this);
			        this.message = 'argument out of range';
			        this.name = 'ArgumentOutOfRangeError';
			        return this;
			    }
			    ArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);
			    return ArgumentOutOfRangeErrorImpl;
			})();
			ArgumentOutOfRangeError.ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;

			var EmptyError = {};

			Object.defineProperty(EmptyError, "__esModule", { value: true });
			var EmptyErrorImpl = (function () {
			    function EmptyErrorImpl() {
			        Error.call(this);
			        this.message = 'no elements in sequence';
			        this.name = 'EmptyError';
			        return this;
			    }
			    EmptyErrorImpl.prototype = Object.create(Error.prototype);
			    return EmptyErrorImpl;
			})();
			EmptyError.EmptyError = EmptyErrorImpl;

			var TimeoutError = {};

			Object.defineProperty(TimeoutError, "__esModule", { value: true });
			var TimeoutErrorImpl = (function () {
			    function TimeoutErrorImpl() {
			        Error.call(this);
			        this.message = 'Timeout has occurred';
			        this.name = 'TimeoutError';
			        return this;
			    }
			    TimeoutErrorImpl.prototype = Object.create(Error.prototype);
			    return TimeoutErrorImpl;
			})();
			TimeoutError.TimeoutError = TimeoutErrorImpl;

			var bindCallback$1 = {};

			var map$1 = {};

			var __extends$12 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(map$1, "__esModule", { value: true });
			var Subscriber_1$E = Subscriber$1;
			function map(project, thisArg) {
			    return function mapOperation(source) {
			        if (typeof project !== 'function') {
			            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
			        }
			        return source.lift(new MapOperator(project, thisArg));
			    };
			}
			map$1.map = map;
			var MapOperator = (function () {
			    function MapOperator(project, thisArg) {
			        this.project = project;
			        this.thisArg = thisArg;
			    }
			    MapOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
			    };
			    return MapOperator;
			}());
			map$1.MapOperator = MapOperator;
			var MapSubscriber = (function (_super) {
			    __extends$12(MapSubscriber, _super);
			    function MapSubscriber(destination, project, thisArg) {
			        var _this = _super.call(this, destination) || this;
			        _this.project = project;
			        _this.count = 0;
			        _this.thisArg = thisArg || _this;
			        return _this;
			    }
			    MapSubscriber.prototype._next = function (value) {
			        var result;
			        try {
			            result = this.project.call(this.thisArg, value, this.count++);
			        }
			        catch (err) {
			            this.destination.error(err);
			            return;
			        }
			        this.destination.next(result);
			    };
			    return MapSubscriber;
			}(Subscriber_1$E.Subscriber));

			Object.defineProperty(bindCallback$1, "__esModule", { value: true });
			var Observable_1$n = Observable$1;
			var AsyncSubject_1$3 = AsyncSubject$1;
			var map_1$b = map$1;
			var canReportError_1$1 = canReportError$1;
			var isArray_1$c = isArray;
			var isScheduler_1$8 = isScheduler$1;
			function bindCallback(callbackFunc, resultSelector, scheduler) {
			    if (resultSelector) {
			        if (isScheduler_1$8.isScheduler(resultSelector)) {
			            scheduler = resultSelector;
			        }
			        else {
			            return function () {
			                var args = [];
			                for (var _i = 0; _i < arguments.length; _i++) {
			                    args[_i] = arguments[_i];
			                }
			                return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map_1$b.map(function (args) { return isArray_1$c.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
			            };
			        }
			    }
			    return function () {
			        var args = [];
			        for (var _i = 0; _i < arguments.length; _i++) {
			            args[_i] = arguments[_i];
			        }
			        var context = this;
			        var subject;
			        var params = {
			            context: context,
			            subject: subject,
			            callbackFunc: callbackFunc,
			            scheduler: scheduler,
			        };
			        return new Observable_1$n.Observable(function (subscriber) {
			            if (!scheduler) {
			                if (!subject) {
			                    subject = new AsyncSubject_1$3.AsyncSubject();
			                    var handler = function () {
			                        var innerArgs = [];
			                        for (var _i = 0; _i < arguments.length; _i++) {
			                            innerArgs[_i] = arguments[_i];
			                        }
			                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
			                        subject.complete();
			                    };
			                    try {
			                        callbackFunc.apply(context, args.concat([handler]));
			                    }
			                    catch (err) {
			                        if (canReportError_1$1.canReportError(subject)) {
			                            subject.error(err);
			                        }
			                        else {
			                            console.warn(err);
			                        }
			                    }
			                }
			                return subject.subscribe(subscriber);
			            }
			            else {
			                var state = {
			                    args: args, subscriber: subscriber, params: params,
			                };
			                return scheduler.schedule(dispatch$6, 0, state);
			            }
			        });
			    };
			}
			bindCallback$1.bindCallback = bindCallback;
			function dispatch$6(state) {
			    var _this = this;
			    var args = state.args, subscriber = state.subscriber, params = state.params;
			    var callbackFunc = params.callbackFunc, context = params.context, scheduler = params.scheduler;
			    var subject = params.subject;
			    if (!subject) {
			        subject = params.subject = new AsyncSubject_1$3.AsyncSubject();
			        var handler = function () {
			            var innerArgs = [];
			            for (var _i = 0; _i < arguments.length; _i++) {
			                innerArgs[_i] = arguments[_i];
			            }
			            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
			            _this.add(scheduler.schedule(dispatchNext$3, 0, { value: value, subject: subject }));
			        };
			        try {
			            callbackFunc.apply(context, args.concat([handler]));
			        }
			        catch (err) {
			            subject.error(err);
			        }
			    }
			    this.add(subject.subscribe(subscriber));
			}
			function dispatchNext$3(state) {
			    var value = state.value, subject = state.subject;
			    subject.next(value);
			    subject.complete();
			}

			var bindNodeCallback$1 = {};

			Object.defineProperty(bindNodeCallback$1, "__esModule", { value: true });
			var Observable_1$m = Observable$1;
			var AsyncSubject_1$2 = AsyncSubject$1;
			var map_1$a = map$1;
			var canReportError_1 = canReportError$1;
			var isScheduler_1$7 = isScheduler$1;
			var isArray_1$b = isArray;
			function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
			    if (resultSelector) {
			        if (isScheduler_1$7.isScheduler(resultSelector)) {
			            scheduler = resultSelector;
			        }
			        else {
			            return function () {
			                var args = [];
			                for (var _i = 0; _i < arguments.length; _i++) {
			                    args[_i] = arguments[_i];
			                }
			                return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map_1$a.map(function (args) { return isArray_1$b.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
			            };
			        }
			    }
			    return function () {
			        var args = [];
			        for (var _i = 0; _i < arguments.length; _i++) {
			            args[_i] = arguments[_i];
			        }
			        var params = {
			            subject: undefined,
			            args: args,
			            callbackFunc: callbackFunc,
			            scheduler: scheduler,
			            context: this,
			        };
			        return new Observable_1$m.Observable(function (subscriber) {
			            var context = params.context;
			            var subject = params.subject;
			            if (!scheduler) {
			                if (!subject) {
			                    subject = params.subject = new AsyncSubject_1$2.AsyncSubject();
			                    var handler = function () {
			                        var innerArgs = [];
			                        for (var _i = 0; _i < arguments.length; _i++) {
			                            innerArgs[_i] = arguments[_i];
			                        }
			                        var err = innerArgs.shift();
			                        if (err) {
			                            subject.error(err);
			                            return;
			                        }
			                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
			                        subject.complete();
			                    };
			                    try {
			                        callbackFunc.apply(context, args.concat([handler]));
			                    }
			                    catch (err) {
			                        if (canReportError_1.canReportError(subject)) {
			                            subject.error(err);
			                        }
			                        else {
			                            console.warn(err);
			                        }
			                    }
			                }
			                return subject.subscribe(subscriber);
			            }
			            else {
			                return scheduler.schedule(dispatch$5, 0, { params: params, subscriber: subscriber, context: context });
			            }
			        });
			    };
			}
			bindNodeCallback$1.bindNodeCallback = bindNodeCallback;
			function dispatch$5(state) {
			    var _this = this;
			    var params = state.params, subscriber = state.subscriber, context = state.context;
			    var callbackFunc = params.callbackFunc, args = params.args, scheduler = params.scheduler;
			    var subject = params.subject;
			    if (!subject) {
			        subject = params.subject = new AsyncSubject_1$2.AsyncSubject();
			        var handler = function () {
			            var innerArgs = [];
			            for (var _i = 0; _i < arguments.length; _i++) {
			                innerArgs[_i] = arguments[_i];
			            }
			            var err = innerArgs.shift();
			            if (err) {
			                _this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
			            }
			            else {
			                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
			                _this.add(scheduler.schedule(dispatchNext$2, 0, { value: value, subject: subject }));
			            }
			        };
			        try {
			            callbackFunc.apply(context, args.concat([handler]));
			        }
			        catch (err) {
			            this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
			        }
			    }
			    this.add(subject.subscribe(subscriber));
			}
			function dispatchNext$2(arg) {
			    var value = arg.value, subject = arg.subject;
			    subject.next(value);
			    subject.complete();
			}
			function dispatchError(arg) {
			    var err = arg.err, subject = arg.subject;
			    subject.error(err);
			}

			var combineLatest$3 = {};

			var OuterSubscriber$1 = {};

			var __extends$11 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(OuterSubscriber$1, "__esModule", { value: true });
			var Subscriber_1$D = Subscriber$1;
			var OuterSubscriber = (function (_super) {
			    __extends$11(OuterSubscriber, _super);
			    function OuterSubscriber() {
			        return _super !== null && _super.apply(this, arguments) || this;
			    }
			    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
			        this.destination.next(innerValue);
			    };
			    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
			        this.destination.error(error);
			    };
			    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
			        this.destination.complete();
			    };
			    return OuterSubscriber;
			}(Subscriber_1$D.Subscriber));
			OuterSubscriber$1.OuterSubscriber = OuterSubscriber;

			var subscribeToResult$1 = {};

			var InnerSubscriber$1 = {};

			var __extends$10 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(InnerSubscriber$1, "__esModule", { value: true });
			var Subscriber_1$C = Subscriber$1;
			var InnerSubscriber = (function (_super) {
			    __extends$10(InnerSubscriber, _super);
			    function InnerSubscriber(parent, outerValue, outerIndex) {
			        var _this = _super.call(this) || this;
			        _this.parent = parent;
			        _this.outerValue = outerValue;
			        _this.outerIndex = outerIndex;
			        _this.index = 0;
			        return _this;
			    }
			    InnerSubscriber.prototype._next = function (value) {
			        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
			    };
			    InnerSubscriber.prototype._error = function (error) {
			        this.parent.notifyError(error, this);
			        this.unsubscribe();
			    };
			    InnerSubscriber.prototype._complete = function () {
			        this.parent.notifyComplete(this);
			        this.unsubscribe();
			    };
			    return InnerSubscriber;
			}(Subscriber_1$C.Subscriber));
			InnerSubscriber$1.InnerSubscriber = InnerSubscriber;

			var subscribeTo = {};

			var subscribeToPromise = {};

			Object.defineProperty(subscribeToPromise, "__esModule", { value: true });
			var hostReportError_1 = hostReportError$1;
			subscribeToPromise.subscribeToPromise = function (promise) { return function (subscriber) {
			    promise.then(function (value) {
			        if (!subscriber.closed) {
			            subscriber.next(value);
			            subscriber.complete();
			        }
			    }, function (err) { return subscriber.error(err); })
			        .then(null, hostReportError_1.hostReportError);
			    return subscriber;
			}; };

			var subscribeToIterable = {};

			var iterator = {};

			(function (exports) {
			Object.defineProperty(exports, "__esModule", { value: true });
			function getSymbolIterator() {
			    if (typeof Symbol !== 'function' || !Symbol.iterator) {
			        return '@@iterator';
			    }
			    return Symbol.iterator;
			}
			exports.getSymbolIterator = getSymbolIterator;
			exports.iterator = getSymbolIterator();
			exports.$$iterator = exports.iterator;

			}(iterator));

			Object.defineProperty(subscribeToIterable, "__esModule", { value: true });
			var iterator_1$4 = iterator;
			subscribeToIterable.subscribeToIterable = function (iterable) { return function (subscriber) {
			    var iterator = iterable[iterator_1$4.iterator]();
			    do {
			        var item = void 0;
			        try {
			            item = iterator.next();
			        }
			        catch (err) {
			            subscriber.error(err);
			            return subscriber;
			        }
			        if (item.done) {
			            subscriber.complete();
			            break;
			        }
			        subscriber.next(item.value);
			        if (subscriber.closed) {
			            break;
			        }
			    } while (true);
			    if (typeof iterator.return === 'function') {
			        subscriber.add(function () {
			            if (iterator.return) {
			                iterator.return();
			            }
			        });
			    }
			    return subscriber;
			}; };

			var subscribeToObservable = {};

			Object.defineProperty(subscribeToObservable, "__esModule", { value: true });
			var observable_1$4 = observable;
			subscribeToObservable.subscribeToObservable = function (obj) { return function (subscriber) {
			    var obs = obj[observable_1$4.observable]();
			    if (typeof obs.subscribe !== 'function') {
			        throw new TypeError('Provided object does not correctly implement Symbol.observable');
			    }
			    else {
			        return obs.subscribe(subscriber);
			    }
			}; };

			var isArrayLike = {};

			Object.defineProperty(isArrayLike, "__esModule", { value: true });
			isArrayLike.isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

			var isPromise$1 = {};

			Object.defineProperty(isPromise$1, "__esModule", { value: true });
			function isPromise(value) {
			    return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
			}
			isPromise$1.isPromise = isPromise;

			Object.defineProperty(subscribeTo, "__esModule", { value: true });
			var subscribeToArray_1 = subscribeToArray;
			var subscribeToPromise_1 = subscribeToPromise;
			var subscribeToIterable_1 = subscribeToIterable;
			var subscribeToObservable_1 = subscribeToObservable;
			var isArrayLike_1$1 = isArrayLike;
			var isPromise_1$1 = isPromise$1;
			var isObject_1$1 = isObject$1;
			var iterator_1$3 = iterator;
			var observable_1$3 = observable;
			subscribeTo.subscribeTo = function (result) {
			    if (!!result && typeof result[observable_1$3.observable] === 'function') {
			        return subscribeToObservable_1.subscribeToObservable(result);
			    }
			    else if (isArrayLike_1$1.isArrayLike(result)) {
			        return subscribeToArray_1.subscribeToArray(result);
			    }
			    else if (isPromise_1$1.isPromise(result)) {
			        return subscribeToPromise_1.subscribeToPromise(result);
			    }
			    else if (!!result && typeof result[iterator_1$3.iterator] === 'function') {
			        return subscribeToIterable_1.subscribeToIterable(result);
			    }
			    else {
			        var value = isObject_1$1.isObject(result) ? 'an invalid object' : "'" + result + "'";
			        var msg = "You provided " + value + " where a stream was expected."
			            + ' You can provide an Observable, Promise, Array, or Iterable.';
			        throw new TypeError(msg);
			    }
			};

			Object.defineProperty(subscribeToResult$1, "__esModule", { value: true });
			var InnerSubscriber_1 = InnerSubscriber$1;
			var subscribeTo_1$3 = subscribeTo;
			var Observable_1$l = Observable$1;
			function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, innerSubscriber) {
			    if (innerSubscriber === void 0) { innerSubscriber = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex); }
			    if (innerSubscriber.closed) {
			        return undefined;
			    }
			    if (result instanceof Observable_1$l.Observable) {
			        return result.subscribe(innerSubscriber);
			    }
			    return subscribeTo_1$3.subscribeTo(result)(innerSubscriber);
			}
			subscribeToResult$1.subscribeToResult = subscribeToResult;

			var __extends$$ = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(combineLatest$3, "__esModule", { value: true });
			var isScheduler_1$6 = isScheduler$1;
			var isArray_1$a = isArray;
			var OuterSubscriber_1$6 = OuterSubscriber$1;
			var subscribeToResult_1$6 = subscribeToResult$1;
			var fromArray_1$3 = fromArray$1;
			var NONE = {};
			function combineLatest$2() {
			    var observables = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        observables[_i] = arguments[_i];
			    }
			    var resultSelector = undefined;
			    var scheduler = undefined;
			    if (isScheduler_1$6.isScheduler(observables[observables.length - 1])) {
			        scheduler = observables.pop();
			    }
			    if (typeof observables[observables.length - 1] === 'function') {
			        resultSelector = observables.pop();
			    }
			    if (observables.length === 1 && isArray_1$a.isArray(observables[0])) {
			        observables = observables[0];
			    }
			    return fromArray_1$3.fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
			}
			combineLatest$3.combineLatest = combineLatest$2;
			var CombineLatestOperator = (function () {
			    function CombineLatestOperator(resultSelector) {
			        this.resultSelector = resultSelector;
			    }
			    CombineLatestOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
			    };
			    return CombineLatestOperator;
			}());
			combineLatest$3.CombineLatestOperator = CombineLatestOperator;
			var CombineLatestSubscriber = (function (_super) {
			    __extends$$(CombineLatestSubscriber, _super);
			    function CombineLatestSubscriber(destination, resultSelector) {
			        var _this = _super.call(this, destination) || this;
			        _this.resultSelector = resultSelector;
			        _this.active = 0;
			        _this.values = [];
			        _this.observables = [];
			        return _this;
			    }
			    CombineLatestSubscriber.prototype._next = function (observable) {
			        this.values.push(NONE);
			        this.observables.push(observable);
			    };
			    CombineLatestSubscriber.prototype._complete = function () {
			        var observables = this.observables;
			        var len = observables.length;
			        if (len === 0) {
			            this.destination.complete();
			        }
			        else {
			            this.active = len;
			            this.toRespond = len;
			            for (var i = 0; i < len; i++) {
			                var observable = observables[i];
			                this.add(subscribeToResult_1$6.subscribeToResult(this, observable, undefined, i));
			            }
			        }
			    };
			    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
			        if ((this.active -= 1) === 0) {
			            this.destination.complete();
			        }
			    };
			    CombineLatestSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
			        var values = this.values;
			        var oldVal = values[outerIndex];
			        var toRespond = !this.toRespond
			            ? 0
			            : oldVal === NONE ? --this.toRespond : this.toRespond;
			        values[outerIndex] = innerValue;
			        if (toRespond === 0) {
			            if (this.resultSelector) {
			                this._tryResultSelector(values);
			            }
			            else {
			                this.destination.next(values.slice());
			            }
			        }
			    };
			    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
			        var result;
			        try {
			            result = this.resultSelector.apply(this, values);
			        }
			        catch (err) {
			            this.destination.error(err);
			            return;
			        }
			        this.destination.next(result);
			    };
			    return CombineLatestSubscriber;
			}(OuterSubscriber_1$6.OuterSubscriber));
			combineLatest$3.CombineLatestSubscriber = CombineLatestSubscriber;

			var concat$3 = {};

			var concatAll$1 = {};

			var mergeAll$1 = {};

			var mergeMap$1 = {};

			var from$1 = {};

			var scheduled$1 = {};

			var scheduleObservable$1 = {};

			Object.defineProperty(scheduleObservable$1, "__esModule", { value: true });
			var Observable_1$k = Observable$1;
			var Subscription_1$8 = Subscription$1;
			var observable_1$2 = observable;
			function scheduleObservable(input, scheduler) {
			    return new Observable_1$k.Observable(function (subscriber) {
			        var sub = new Subscription_1$8.Subscription();
			        sub.add(scheduler.schedule(function () {
			            var observable = input[observable_1$2.observable]();
			            sub.add(observable.subscribe({
			                next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
			                error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
			                complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
			            }));
			        }));
			        return sub;
			    });
			}
			scheduleObservable$1.scheduleObservable = scheduleObservable;

			var schedulePromise$1 = {};

			Object.defineProperty(schedulePromise$1, "__esModule", { value: true });
			var Observable_1$j = Observable$1;
			var Subscription_1$7 = Subscription$1;
			function schedulePromise(input, scheduler) {
			    return new Observable_1$j.Observable(function (subscriber) {
			        var sub = new Subscription_1$7.Subscription();
			        sub.add(scheduler.schedule(function () { return input.then(function (value) {
			            sub.add(scheduler.schedule(function () {
			                subscriber.next(value);
			                sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
			            }));
			        }, function (err) {
			            sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
			        }); }));
			        return sub;
			    });
			}
			schedulePromise$1.schedulePromise = schedulePromise;

			var scheduleIterable$1 = {};

			Object.defineProperty(scheduleIterable$1, "__esModule", { value: true });
			var Observable_1$i = Observable$1;
			var Subscription_1$6 = Subscription$1;
			var iterator_1$2 = iterator;
			function scheduleIterable(input, scheduler) {
			    if (!input) {
			        throw new Error('Iterable cannot be null');
			    }
			    return new Observable_1$i.Observable(function (subscriber) {
			        var sub = new Subscription_1$6.Subscription();
			        var iterator;
			        sub.add(function () {
			            if (iterator && typeof iterator.return === 'function') {
			                iterator.return();
			            }
			        });
			        sub.add(scheduler.schedule(function () {
			            iterator = input[iterator_1$2.iterator]();
			            sub.add(scheduler.schedule(function () {
			                if (subscriber.closed) {
			                    return;
			                }
			                var value;
			                var done;
			                try {
			                    var result = iterator.next();
			                    value = result.value;
			                    done = result.done;
			                }
			                catch (err) {
			                    subscriber.error(err);
			                    return;
			                }
			                if (done) {
			                    subscriber.complete();
			                }
			                else {
			                    subscriber.next(value);
			                    this.schedule();
			                }
			            }));
			        }));
			        return sub;
			    });
			}
			scheduleIterable$1.scheduleIterable = scheduleIterable;

			var isInteropObservable$1 = {};

			Object.defineProperty(isInteropObservable$1, "__esModule", { value: true });
			var observable_1$1 = observable;
			function isInteropObservable(input) {
			    return input && typeof input[observable_1$1.observable] === 'function';
			}
			isInteropObservable$1.isInteropObservable = isInteropObservable;

			var isIterable$1 = {};

			Object.defineProperty(isIterable$1, "__esModule", { value: true });
			var iterator_1$1 = iterator;
			function isIterable(input) {
			    return input && typeof input[iterator_1$1.iterator] === 'function';
			}
			isIterable$1.isIterable = isIterable;

			Object.defineProperty(scheduled$1, "__esModule", { value: true });
			var scheduleObservable_1 = scheduleObservable$1;
			var schedulePromise_1 = schedulePromise$1;
			var scheduleArray_1 = scheduleArray$1;
			var scheduleIterable_1 = scheduleIterable$1;
			var isInteropObservable_1 = isInteropObservable$1;
			var isPromise_1 = isPromise$1;
			var isArrayLike_1 = isArrayLike;
			var isIterable_1 = isIterable$1;
			function scheduled(input, scheduler) {
			    if (input != null) {
			        if (isInteropObservable_1.isInteropObservable(input)) {
			            return scheduleObservable_1.scheduleObservable(input, scheduler);
			        }
			        else if (isPromise_1.isPromise(input)) {
			            return schedulePromise_1.schedulePromise(input, scheduler);
			        }
			        else if (isArrayLike_1.isArrayLike(input)) {
			            return scheduleArray_1.scheduleArray(input, scheduler);
			        }
			        else if (isIterable_1.isIterable(input) || typeof input === 'string') {
			            return scheduleIterable_1.scheduleIterable(input, scheduler);
			        }
			    }
			    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
			}
			scheduled$1.scheduled = scheduled;

			Object.defineProperty(from$1, "__esModule", { value: true });
			var Observable_1$h = Observable$1;
			var subscribeTo_1$2 = subscribeTo;
			var scheduled_1$1 = scheduled$1;
			function from(input, scheduler) {
			    if (!scheduler) {
			        if (input instanceof Observable_1$h.Observable) {
			            return input;
			        }
			        return new Observable_1$h.Observable(subscribeTo_1$2.subscribeTo(input));
			    }
			    else {
			        return scheduled_1$1.scheduled(input, scheduler);
			    }
			}
			from$1.from = from;

			var innerSubscribe$1 = {};

			var __extends$_ = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(innerSubscribe$1, "__esModule", { value: true });
			var Subscriber_1$B = Subscriber$1;
			var Observable_1$g = Observable$1;
			var subscribeTo_1$1 = subscribeTo;
			var SimpleInnerSubscriber = (function (_super) {
			    __extends$_(SimpleInnerSubscriber, _super);
			    function SimpleInnerSubscriber(parent) {
			        var _this = _super.call(this) || this;
			        _this.parent = parent;
			        return _this;
			    }
			    SimpleInnerSubscriber.prototype._next = function (value) {
			        this.parent.notifyNext(value);
			    };
			    SimpleInnerSubscriber.prototype._error = function (error) {
			        this.parent.notifyError(error);
			        this.unsubscribe();
			    };
			    SimpleInnerSubscriber.prototype._complete = function () {
			        this.parent.notifyComplete();
			        this.unsubscribe();
			    };
			    return SimpleInnerSubscriber;
			}(Subscriber_1$B.Subscriber));
			innerSubscribe$1.SimpleInnerSubscriber = SimpleInnerSubscriber;
			var ComplexInnerSubscriber = (function (_super) {
			    __extends$_(ComplexInnerSubscriber, _super);
			    function ComplexInnerSubscriber(parent, outerValue, outerIndex) {
			        var _this = _super.call(this) || this;
			        _this.parent = parent;
			        _this.outerValue = outerValue;
			        _this.outerIndex = outerIndex;
			        return _this;
			    }
			    ComplexInnerSubscriber.prototype._next = function (value) {
			        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);
			    };
			    ComplexInnerSubscriber.prototype._error = function (error) {
			        this.parent.notifyError(error);
			        this.unsubscribe();
			    };
			    ComplexInnerSubscriber.prototype._complete = function () {
			        this.parent.notifyComplete(this);
			        this.unsubscribe();
			    };
			    return ComplexInnerSubscriber;
			}(Subscriber_1$B.Subscriber));
			innerSubscribe$1.ComplexInnerSubscriber = ComplexInnerSubscriber;
			var SimpleOuterSubscriber = (function (_super) {
			    __extends$_(SimpleOuterSubscriber, _super);
			    function SimpleOuterSubscriber() {
			        return _super !== null && _super.apply(this, arguments) || this;
			    }
			    SimpleOuterSubscriber.prototype.notifyNext = function (innerValue) {
			        this.destination.next(innerValue);
			    };
			    SimpleOuterSubscriber.prototype.notifyError = function (err) {
			        this.destination.error(err);
			    };
			    SimpleOuterSubscriber.prototype.notifyComplete = function () {
			        this.destination.complete();
			    };
			    return SimpleOuterSubscriber;
			}(Subscriber_1$B.Subscriber));
			innerSubscribe$1.SimpleOuterSubscriber = SimpleOuterSubscriber;
			var ComplexOuterSubscriber = (function (_super) {
			    __extends$_(ComplexOuterSubscriber, _super);
			    function ComplexOuterSubscriber() {
			        return _super !== null && _super.apply(this, arguments) || this;
			    }
			    ComplexOuterSubscriber.prototype.notifyNext = function (_outerValue, innerValue, _outerIndex, _innerSub) {
			        this.destination.next(innerValue);
			    };
			    ComplexOuterSubscriber.prototype.notifyError = function (error) {
			        this.destination.error(error);
			    };
			    ComplexOuterSubscriber.prototype.notifyComplete = function (_innerSub) {
			        this.destination.complete();
			    };
			    return ComplexOuterSubscriber;
			}(Subscriber_1$B.Subscriber));
			innerSubscribe$1.ComplexOuterSubscriber = ComplexOuterSubscriber;
			function innerSubscribe(result, innerSubscriber) {
			    if (innerSubscriber.closed) {
			        return undefined;
			    }
			    if (result instanceof Observable_1$g.Observable) {
			        return result.subscribe(innerSubscriber);
			    }
			    return subscribeTo_1$1.subscribeTo(result)(innerSubscriber);
			}
			innerSubscribe$1.innerSubscribe = innerSubscribe;

			var __extends$Z = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(mergeMap$1, "__esModule", { value: true });
			var map_1$9 = map$1;
			var from_1$9 = from$1;
			var innerSubscribe_1$k = innerSubscribe$1;
			function mergeMap(project, resultSelector, concurrent) {
			    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
			    if (typeof resultSelector === 'function') {
			        return function (source) { return source.pipe(mergeMap(function (a, i) { return from_1$9.from(project(a, i)).pipe(map_1$9.map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
			    }
			    else if (typeof resultSelector === 'number') {
			        concurrent = resultSelector;
			    }
			    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
			}
			mergeMap$1.mergeMap = mergeMap;
			var MergeMapOperator = (function () {
			    function MergeMapOperator(project, concurrent) {
			        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
			        this.project = project;
			        this.concurrent = concurrent;
			    }
			    MergeMapOperator.prototype.call = function (observer, source) {
			        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
			    };
			    return MergeMapOperator;
			}());
			mergeMap$1.MergeMapOperator = MergeMapOperator;
			var MergeMapSubscriber = (function (_super) {
			    __extends$Z(MergeMapSubscriber, _super);
			    function MergeMapSubscriber(destination, project, concurrent) {
			        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
			        var _this = _super.call(this, destination) || this;
			        _this.project = project;
			        _this.concurrent = concurrent;
			        _this.hasCompleted = false;
			        _this.buffer = [];
			        _this.active = 0;
			        _this.index = 0;
			        return _this;
			    }
			    MergeMapSubscriber.prototype._next = function (value) {
			        if (this.active < this.concurrent) {
			            this._tryNext(value);
			        }
			        else {
			            this.buffer.push(value);
			        }
			    };
			    MergeMapSubscriber.prototype._tryNext = function (value) {
			        var result;
			        var index = this.index++;
			        try {
			            result = this.project(value, index);
			        }
			        catch (err) {
			            this.destination.error(err);
			            return;
			        }
			        this.active++;
			        this._innerSub(result);
			    };
			    MergeMapSubscriber.prototype._innerSub = function (ish) {
			        var innerSubscriber = new innerSubscribe_1$k.SimpleInnerSubscriber(this);
			        var destination = this.destination;
			        destination.add(innerSubscriber);
			        var innerSubscription = innerSubscribe_1$k.innerSubscribe(ish, innerSubscriber);
			        if (innerSubscription !== innerSubscriber) {
			            destination.add(innerSubscription);
			        }
			    };
			    MergeMapSubscriber.prototype._complete = function () {
			        this.hasCompleted = true;
			        if (this.active === 0 && this.buffer.length === 0) {
			            this.destination.complete();
			        }
			        this.unsubscribe();
			    };
			    MergeMapSubscriber.prototype.notifyNext = function (innerValue) {
			        this.destination.next(innerValue);
			    };
			    MergeMapSubscriber.prototype.notifyComplete = function () {
			        var buffer = this.buffer;
			        this.active--;
			        if (buffer.length > 0) {
			            this._next(buffer.shift());
			        }
			        else if (this.active === 0 && this.hasCompleted) {
			            this.destination.complete();
			        }
			    };
			    return MergeMapSubscriber;
			}(innerSubscribe_1$k.SimpleOuterSubscriber));
			mergeMap$1.MergeMapSubscriber = MergeMapSubscriber;
			mergeMap$1.flatMap = mergeMap;

			Object.defineProperty(mergeAll$1, "__esModule", { value: true });
			var mergeMap_1$3 = mergeMap$1;
			var identity_1$5 = identity$1;
			function mergeAll(concurrent) {
			    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
			    return mergeMap_1$3.mergeMap(identity_1$5.identity, concurrent);
			}
			mergeAll$1.mergeAll = mergeAll;

			Object.defineProperty(concatAll$1, "__esModule", { value: true });
			var mergeAll_1$2 = mergeAll$1;
			function concatAll() {
			    return mergeAll_1$2.mergeAll(1);
			}
			concatAll$1.concatAll = concatAll;

			Object.defineProperty(concat$3, "__esModule", { value: true });
			var of_1$2 = of$1;
			var concatAll_1$1 = concatAll$1;
			function concat$2() {
			    var observables = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        observables[_i] = arguments[_i];
			    }
			    return concatAll_1$1.concatAll()(of_1$2.of.apply(void 0, observables));
			}
			concat$3.concat = concat$2;

			var defer$1 = {};

			Object.defineProperty(defer$1, "__esModule", { value: true });
			var Observable_1$f = Observable$1;
			var from_1$8 = from$1;
			var empty_1$7 = empty;
			function defer(observableFactory) {
			    return new Observable_1$f.Observable(function (subscriber) {
			        var input;
			        try {
			            input = observableFactory();
			        }
			        catch (err) {
			            subscriber.error(err);
			            return undefined;
			        }
			        var source = input ? from_1$8.from(input) : empty_1$7.empty();
			        return source.subscribe(subscriber);
			    });
			}
			defer$1.defer = defer;

			var forkJoin$1 = {};

			Object.defineProperty(forkJoin$1, "__esModule", { value: true });
			var Observable_1$e = Observable$1;
			var isArray_1$9 = isArray;
			var map_1$8 = map$1;
			var isObject_1 = isObject$1;
			var from_1$7 = from$1;
			function forkJoin() {
			    var sources = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        sources[_i] = arguments[_i];
			    }
			    if (sources.length === 1) {
			        var first_1 = sources[0];
			        if (isArray_1$9.isArray(first_1)) {
			            return forkJoinInternal(first_1, null);
			        }
			        if (isObject_1.isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {
			            var keys = Object.keys(first_1);
			            return forkJoinInternal(keys.map(function (key) { return first_1[key]; }), keys);
			        }
			    }
			    if (typeof sources[sources.length - 1] === 'function') {
			        var resultSelector_1 = sources.pop();
			        sources = (sources.length === 1 && isArray_1$9.isArray(sources[0])) ? sources[0] : sources;
			        return forkJoinInternal(sources, null).pipe(map_1$8.map(function (args) { return resultSelector_1.apply(void 0, args); }));
			    }
			    return forkJoinInternal(sources, null);
			}
			forkJoin$1.forkJoin = forkJoin;
			function forkJoinInternal(sources, keys) {
			    return new Observable_1$e.Observable(function (subscriber) {
			        var len = sources.length;
			        if (len === 0) {
			            subscriber.complete();
			            return;
			        }
			        var values = new Array(len);
			        var completed = 0;
			        var emitted = 0;
			        var _loop_1 = function (i) {
			            var source = from_1$7.from(sources[i]);
			            var hasValue = false;
			            subscriber.add(source.subscribe({
			                next: function (value) {
			                    if (!hasValue) {
			                        hasValue = true;
			                        emitted++;
			                    }
			                    values[i] = value;
			                },
			                error: function (err) { return subscriber.error(err); },
			                complete: function () {
			                    completed++;
			                    if (completed === len || !hasValue) {
			                        if (emitted === len) {
			                            subscriber.next(keys ?
			                                keys.reduce(function (result, key, i) { return (result[key] = values[i], result); }, {}) :
			                                values);
			                        }
			                        subscriber.complete();
			                    }
			                }
			            }));
			        };
			        for (var i = 0; i < len; i++) {
			            _loop_1(i);
			        }
			    });
			}

			var fromEvent$1 = {};

			Object.defineProperty(fromEvent$1, "__esModule", { value: true });
			var Observable_1$d = Observable$1;
			var isArray_1$8 = isArray;
			var isFunction_1$2 = isFunction$1;
			var map_1$7 = map$1;
			function fromEvent(target, eventName, options, resultSelector) {
			    if (isFunction_1$2.isFunction(options)) {
			        resultSelector = options;
			        options = undefined;
			    }
			    if (resultSelector) {
			        return fromEvent(target, eventName, options).pipe(map_1$7.map(function (args) { return isArray_1$8.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
			    }
			    return new Observable_1$d.Observable(function (subscriber) {
			        function handler(e) {
			            if (arguments.length > 1) {
			                subscriber.next(Array.prototype.slice.call(arguments));
			            }
			            else {
			                subscriber.next(e);
			            }
			        }
			        setupSubscription(target, eventName, handler, subscriber, options);
			    });
			}
			fromEvent$1.fromEvent = fromEvent;
			function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
			    var unsubscribe;
			    if (isEventTarget(sourceObj)) {
			        var source_1 = sourceObj;
			        sourceObj.addEventListener(eventName, handler, options);
			        unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };
			    }
			    else if (isJQueryStyleEventEmitter(sourceObj)) {
			        var source_2 = sourceObj;
			        sourceObj.on(eventName, handler);
			        unsubscribe = function () { return source_2.off(eventName, handler); };
			    }
			    else if (isNodeStyleEventEmitter(sourceObj)) {
			        var source_3 = sourceObj;
			        sourceObj.addListener(eventName, handler);
			        unsubscribe = function () { return source_3.removeListener(eventName, handler); };
			    }
			    else if (sourceObj && sourceObj.length) {
			        for (var i = 0, len = sourceObj.length; i < len; i++) {
			            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
			        }
			    }
			    else {
			        throw new TypeError('Invalid event target');
			    }
			    subscriber.add(unsubscribe);
			}
			function isNodeStyleEventEmitter(sourceObj) {
			    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
			}
			function isJQueryStyleEventEmitter(sourceObj) {
			    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
			}
			function isEventTarget(sourceObj) {
			    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
			}

			var fromEventPattern$1 = {};

			Object.defineProperty(fromEventPattern$1, "__esModule", { value: true });
			var Observable_1$c = Observable$1;
			var isArray_1$7 = isArray;
			var isFunction_1$1 = isFunction$1;
			var map_1$6 = map$1;
			function fromEventPattern(addHandler, removeHandler, resultSelector) {
			    if (resultSelector) {
			        return fromEventPattern(addHandler, removeHandler).pipe(map_1$6.map(function (args) { return isArray_1$7.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
			    }
			    return new Observable_1$c.Observable(function (subscriber) {
			        var handler = function () {
			            var e = [];
			            for (var _i = 0; _i < arguments.length; _i++) {
			                e[_i] = arguments[_i];
			            }
			            return subscriber.next(e.length === 1 ? e[0] : e);
			        };
			        var retValue;
			        try {
			            retValue = addHandler(handler);
			        }
			        catch (err) {
			            subscriber.error(err);
			            return undefined;
			        }
			        if (!isFunction_1$1.isFunction(removeHandler)) {
			            return undefined;
			        }
			        return function () { return removeHandler(handler, retValue); };
			    });
			}
			fromEventPattern$1.fromEventPattern = fromEventPattern;

			var generate$1 = {};

			Object.defineProperty(generate$1, "__esModule", { value: true });
			var Observable_1$b = Observable$1;
			var identity_1$4 = identity$1;
			var isScheduler_1$5 = isScheduler$1;
			function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
			    var resultSelector;
			    var initialState;
			    if (arguments.length == 1) {
			        var options = initialStateOrOptions;
			        initialState = options.initialState;
			        condition = options.condition;
			        iterate = options.iterate;
			        resultSelector = options.resultSelector || identity_1$4.identity;
			        scheduler = options.scheduler;
			    }
			    else if (resultSelectorOrObservable === undefined || isScheduler_1$5.isScheduler(resultSelectorOrObservable)) {
			        initialState = initialStateOrOptions;
			        resultSelector = identity_1$4.identity;
			        scheduler = resultSelectorOrObservable;
			    }
			    else {
			        initialState = initialStateOrOptions;
			        resultSelector = resultSelectorOrObservable;
			    }
			    return new Observable_1$b.Observable(function (subscriber) {
			        var state = initialState;
			        if (scheduler) {
			            return scheduler.schedule(dispatch$4, 0, {
			                subscriber: subscriber,
			                iterate: iterate,
			                condition: condition,
			                resultSelector: resultSelector,
			                state: state
			            });
			        }
			        do {
			            if (condition) {
			                var conditionResult = void 0;
			                try {
			                    conditionResult = condition(state);
			                }
			                catch (err) {
			                    subscriber.error(err);
			                    return undefined;
			                }
			                if (!conditionResult) {
			                    subscriber.complete();
			                    break;
			                }
			            }
			            var value = void 0;
			            try {
			                value = resultSelector(state);
			            }
			            catch (err) {
			                subscriber.error(err);
			                return undefined;
			            }
			            subscriber.next(value);
			            if (subscriber.closed) {
			                break;
			            }
			            try {
			                state = iterate(state);
			            }
			            catch (err) {
			                subscriber.error(err);
			                return undefined;
			            }
			        } while (true);
			        return undefined;
			    });
			}
			generate$1.generate = generate;
			function dispatch$4(state) {
			    var subscriber = state.subscriber, condition = state.condition;
			    if (subscriber.closed) {
			        return undefined;
			    }
			    if (state.needIterate) {
			        try {
			            state.state = state.iterate(state.state);
			        }
			        catch (err) {
			            subscriber.error(err);
			            return undefined;
			        }
			    }
			    else {
			        state.needIterate = true;
			    }
			    if (condition) {
			        var conditionResult = void 0;
			        try {
			            conditionResult = condition(state.state);
			        }
			        catch (err) {
			            subscriber.error(err);
			            return undefined;
			        }
			        if (!conditionResult) {
			            subscriber.complete();
			            return undefined;
			        }
			        if (subscriber.closed) {
			            return undefined;
			        }
			    }
			    var value;
			    try {
			        value = state.resultSelector(state.state);
			    }
			    catch (err) {
			        subscriber.error(err);
			        return undefined;
			    }
			    if (subscriber.closed) {
			        return undefined;
			    }
			    subscriber.next(value);
			    if (subscriber.closed) {
			        return undefined;
			    }
			    return this.schedule(state);
			}

			var iif$1 = {};

			Object.defineProperty(iif$1, "__esModule", { value: true });
			var defer_1$2 = defer$1;
			var empty_1$6 = empty;
			function iif(condition, trueResult, falseResult) {
			    if (trueResult === void 0) { trueResult = empty_1$6.EMPTY; }
			    if (falseResult === void 0) { falseResult = empty_1$6.EMPTY; }
			    return defer_1$2.defer(function () { return condition() ? trueResult : falseResult; });
			}
			iif$1.iif = iif;

			var interval$1 = {};

			var isNumeric$1 = {};

			Object.defineProperty(isNumeric$1, "__esModule", { value: true });
			var isArray_1$6 = isArray;
			function isNumeric(val) {
			    return !isArray_1$6.isArray(val) && (val - parseFloat(val) + 1) >= 0;
			}
			isNumeric$1.isNumeric = isNumeric;

			Object.defineProperty(interval$1, "__esModule", { value: true });
			var Observable_1$a = Observable$1;
			var async_1$d = async;
			var isNumeric_1$3 = isNumeric$1;
			function interval(period, scheduler) {
			    if (period === void 0) { period = 0; }
			    if (scheduler === void 0) { scheduler = async_1$d.async; }
			    if (!isNumeric_1$3.isNumeric(period) || period < 0) {
			        period = 0;
			    }
			    if (!scheduler || typeof scheduler.schedule !== 'function') {
			        scheduler = async_1$d.async;
			    }
			    return new Observable_1$a.Observable(function (subscriber) {
			        subscriber.add(scheduler.schedule(dispatch$3, period, { subscriber: subscriber, counter: 0, period: period }));
			        return subscriber;
			    });
			}
			interval$1.interval = interval;
			function dispatch$3(state) {
			    var subscriber = state.subscriber, counter = state.counter, period = state.period;
			    subscriber.next(counter);
			    this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);
			}

			var merge$3 = {};

			Object.defineProperty(merge$3, "__esModule", { value: true });
			var Observable_1$9 = Observable$1;
			var isScheduler_1$4 = isScheduler$1;
			var mergeAll_1$1 = mergeAll$1;
			var fromArray_1$2 = fromArray$1;
			function merge$2() {
			    var observables = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        observables[_i] = arguments[_i];
			    }
			    var concurrent = Number.POSITIVE_INFINITY;
			    var scheduler = null;
			    var last = observables[observables.length - 1];
			    if (isScheduler_1$4.isScheduler(last)) {
			        scheduler = observables.pop();
			        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
			            concurrent = observables.pop();
			        }
			    }
			    else if (typeof last === 'number') {
			        concurrent = observables.pop();
			    }
			    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1$9.Observable) {
			        return observables[0];
			    }
			    return mergeAll_1$1.mergeAll(concurrent)(fromArray_1$2.fromArray(observables, scheduler));
			}
			merge$3.merge = merge$2;

			var never = {};

			(function (exports) {
			Object.defineProperty(exports, "__esModule", { value: true });
			var Observable_1 = Observable$1;
			var noop_1 = noop$1;
			exports.NEVER = new Observable_1.Observable(noop_1.noop);
			function never() {
			    return exports.NEVER;
			}
			exports.never = never;

			}(never));

			var onErrorResumeNext$3 = {};

			Object.defineProperty(onErrorResumeNext$3, "__esModule", { value: true });
			var Observable_1$8 = Observable$1;
			var from_1$6 = from$1;
			var isArray_1$5 = isArray;
			var empty_1$5 = empty;
			function onErrorResumeNext$2() {
			    var sources = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        sources[_i] = arguments[_i];
			    }
			    if (sources.length === 0) {
			        return empty_1$5.EMPTY;
			    }
			    var first = sources[0], remainder = sources.slice(1);
			    if (sources.length === 1 && isArray_1$5.isArray(first)) {
			        return onErrorResumeNext$2.apply(void 0, first);
			    }
			    return new Observable_1$8.Observable(function (subscriber) {
			        var subNext = function () { return subscriber.add(onErrorResumeNext$2.apply(void 0, remainder).subscribe(subscriber)); };
			        return from_1$6.from(first).subscribe({
			            next: function (value) { subscriber.next(value); },
			            error: subNext,
			            complete: subNext,
			        });
			    });
			}
			onErrorResumeNext$3.onErrorResumeNext = onErrorResumeNext$2;

			var pairs$1 = {};

			Object.defineProperty(pairs$1, "__esModule", { value: true });
			var Observable_1$7 = Observable$1;
			var Subscription_1$5 = Subscription$1;
			function pairs(obj, scheduler) {
			    if (!scheduler) {
			        return new Observable_1$7.Observable(function (subscriber) {
			            var keys = Object.keys(obj);
			            for (var i = 0; i < keys.length && !subscriber.closed; i++) {
			                var key = keys[i];
			                if (obj.hasOwnProperty(key)) {
			                    subscriber.next([key, obj[key]]);
			                }
			            }
			            subscriber.complete();
			        });
			    }
			    else {
			        return new Observable_1$7.Observable(function (subscriber) {
			            var keys = Object.keys(obj);
			            var subscription = new Subscription_1$5.Subscription();
			            subscription.add(scheduler.schedule(dispatch$2, 0, { keys: keys, index: 0, subscriber: subscriber, subscription: subscription, obj: obj }));
			            return subscription;
			        });
			    }
			}
			pairs$1.pairs = pairs;
			function dispatch$2(state) {
			    var keys = state.keys, index = state.index, subscriber = state.subscriber, subscription = state.subscription, obj = state.obj;
			    if (!subscriber.closed) {
			        if (index < keys.length) {
			            var key = keys[index];
			            subscriber.next([key, obj[key]]);
			            subscription.add(this.schedule({ keys: keys, index: index + 1, subscriber: subscriber, subscription: subscription, obj: obj }));
			        }
			        else {
			            subscriber.complete();
			        }
			    }
			}
			pairs$1.dispatch = dispatch$2;

			var partition$3 = {};

			var not$1 = {};

			Object.defineProperty(not$1, "__esModule", { value: true });
			function not(pred, thisArg) {
			    function notPred() {
			        return !(notPred.pred.apply(notPred.thisArg, arguments));
			    }
			    notPred.pred = pred;
			    notPred.thisArg = thisArg;
			    return notPred;
			}
			not$1.not = not;

			var filter$3 = {};

			var __extends$Y = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(filter$3, "__esModule", { value: true });
			var Subscriber_1$A = Subscriber$1;
			function filter$2(predicate, thisArg) {
			    return function filterOperatorFunction(source) {
			        return source.lift(new FilterOperator(predicate, thisArg));
			    };
			}
			filter$3.filter = filter$2;
			var FilterOperator = (function () {
			    function FilterOperator(predicate, thisArg) {
			        this.predicate = predicate;
			        this.thisArg = thisArg;
			    }
			    FilterOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
			    };
			    return FilterOperator;
			}());
			var FilterSubscriber = (function (_super) {
			    __extends$Y(FilterSubscriber, _super);
			    function FilterSubscriber(destination, predicate, thisArg) {
			        var _this = _super.call(this, destination) || this;
			        _this.predicate = predicate;
			        _this.thisArg = thisArg;
			        _this.count = 0;
			        return _this;
			    }
			    FilterSubscriber.prototype._next = function (value) {
			        var result;
			        try {
			            result = this.predicate.call(this.thisArg, value, this.count++);
			        }
			        catch (err) {
			            this.destination.error(err);
			            return;
			        }
			        if (result) {
			            this.destination.next(value);
			        }
			    };
			    return FilterSubscriber;
			}(Subscriber_1$A.Subscriber));

			Object.defineProperty(partition$3, "__esModule", { value: true });
			var not_1$1 = not$1;
			var subscribeTo_1 = subscribeTo;
			var filter_1$5 = filter$3;
			var Observable_1$6 = Observable$1;
			function partition$2(source, predicate, thisArg) {
			    return [
			        filter_1$5.filter(predicate, thisArg)(new Observable_1$6.Observable(subscribeTo_1.subscribeTo(source))),
			        filter_1$5.filter(not_1$1.not(predicate, thisArg))(new Observable_1$6.Observable(subscribeTo_1.subscribeTo(source)))
			    ];
			}
			partition$3.partition = partition$2;

			var race$3 = {};

			var __extends$X = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(race$3, "__esModule", { value: true });
			var isArray_1$4 = isArray;
			var fromArray_1$1 = fromArray$1;
			var OuterSubscriber_1$5 = OuterSubscriber$1;
			var subscribeToResult_1$5 = subscribeToResult$1;
			function race$2() {
			    var observables = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        observables[_i] = arguments[_i];
			    }
			    if (observables.length === 1) {
			        if (isArray_1$4.isArray(observables[0])) {
			            observables = observables[0];
			        }
			        else {
			            return observables[0];
			        }
			    }
			    return fromArray_1$1.fromArray(observables, undefined).lift(new RaceOperator());
			}
			race$3.race = race$2;
			var RaceOperator = (function () {
			    function RaceOperator() {
			    }
			    RaceOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new RaceSubscriber(subscriber));
			    };
			    return RaceOperator;
			}());
			race$3.RaceOperator = RaceOperator;
			var RaceSubscriber = (function (_super) {
			    __extends$X(RaceSubscriber, _super);
			    function RaceSubscriber(destination) {
			        var _this = _super.call(this, destination) || this;
			        _this.hasFirst = false;
			        _this.observables = [];
			        _this.subscriptions = [];
			        return _this;
			    }
			    RaceSubscriber.prototype._next = function (observable) {
			        this.observables.push(observable);
			    };
			    RaceSubscriber.prototype._complete = function () {
			        var observables = this.observables;
			        var len = observables.length;
			        if (len === 0) {
			            this.destination.complete();
			        }
			        else {
			            for (var i = 0; i < len && !this.hasFirst; i++) {
			                var observable = observables[i];
			                var subscription = subscribeToResult_1$5.subscribeToResult(this, observable, undefined, i);
			                if (this.subscriptions) {
			                    this.subscriptions.push(subscription);
			                }
			                this.add(subscription);
			            }
			            this.observables = null;
			        }
			    };
			    RaceSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
			        if (!this.hasFirst) {
			            this.hasFirst = true;
			            for (var i = 0; i < this.subscriptions.length; i++) {
			                if (i !== outerIndex) {
			                    var subscription = this.subscriptions[i];
			                    subscription.unsubscribe();
			                    this.remove(subscription);
			                }
			            }
			            this.subscriptions = null;
			        }
			        this.destination.next(innerValue);
			    };
			    return RaceSubscriber;
			}(OuterSubscriber_1$5.OuterSubscriber));
			race$3.RaceSubscriber = RaceSubscriber;

			var range$1 = {};

			Object.defineProperty(range$1, "__esModule", { value: true });
			var Observable_1$5 = Observable$1;
			function range(start, count, scheduler) {
			    if (start === void 0) { start = 0; }
			    return new Observable_1$5.Observable(function (subscriber) {
			        if (count === undefined) {
			            count = start;
			            start = 0;
			        }
			        var index = 0;
			        var current = start;
			        if (scheduler) {
			            return scheduler.schedule(dispatch$1, 0, {
			                index: index, count: count, start: start, subscriber: subscriber
			            });
			        }
			        else {
			            do {
			                if (index++ >= count) {
			                    subscriber.complete();
			                    break;
			                }
			                subscriber.next(current++);
			                if (subscriber.closed) {
			                    break;
			                }
			            } while (true);
			        }
			        return undefined;
			    });
			}
			range$1.range = range;
			function dispatch$1(state) {
			    var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
			    if (index >= count) {
			        subscriber.complete();
			        return;
			    }
			    subscriber.next(start);
			    if (subscriber.closed) {
			        return;
			    }
			    state.index = index + 1;
			    state.start = start + 1;
			    this.schedule(state);
			}
			range$1.dispatch = dispatch$1;

			var timer$1 = {};

			Object.defineProperty(timer$1, "__esModule", { value: true });
			var Observable_1$4 = Observable$1;
			var async_1$c = async;
			var isNumeric_1$2 = isNumeric$1;
			var isScheduler_1$3 = isScheduler$1;
			function timer(dueTime, periodOrScheduler, scheduler) {
			    if (dueTime === void 0) { dueTime = 0; }
			    var period = -1;
			    if (isNumeric_1$2.isNumeric(periodOrScheduler)) {
			        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
			    }
			    else if (isScheduler_1$3.isScheduler(periodOrScheduler)) {
			        scheduler = periodOrScheduler;
			    }
			    if (!isScheduler_1$3.isScheduler(scheduler)) {
			        scheduler = async_1$c.async;
			    }
			    return new Observable_1$4.Observable(function (subscriber) {
			        var due = isNumeric_1$2.isNumeric(dueTime)
			            ? dueTime
			            : (+dueTime - scheduler.now());
			        return scheduler.schedule(dispatch, due, {
			            index: 0, period: period, subscriber: subscriber
			        });
			    });
			}
			timer$1.timer = timer;
			function dispatch(state) {
			    var index = state.index, period = state.period, subscriber = state.subscriber;
			    subscriber.next(index);
			    if (subscriber.closed) {
			        return;
			    }
			    else if (period === -1) {
			        return subscriber.complete();
			    }
			    state.index = index + 1;
			    this.schedule(state, period);
			}

			var using$1 = {};

			Object.defineProperty(using$1, "__esModule", { value: true });
			var Observable_1$3 = Observable$1;
			var from_1$5 = from$1;
			var empty_1$4 = empty;
			function using(resourceFactory, observableFactory) {
			    return new Observable_1$3.Observable(function (subscriber) {
			        var resource;
			        try {
			            resource = resourceFactory();
			        }
			        catch (err) {
			            subscriber.error(err);
			            return undefined;
			        }
			        var result;
			        try {
			            result = observableFactory(resource);
			        }
			        catch (err) {
			            subscriber.error(err);
			            return undefined;
			        }
			        var source = result ? from_1$5.from(result) : empty_1$4.EMPTY;
			        var subscription = source.subscribe(subscriber);
			        return function () {
			            subscription.unsubscribe();
			            if (resource) {
			                resource.unsubscribe();
			            }
			        };
			    });
			}
			using$1.using = using;

			var zip$3 = {};

			var __extends$W = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(zip$3, "__esModule", { value: true });
			var fromArray_1 = fromArray$1;
			var isArray_1$3 = isArray;
			var Subscriber_1$z = Subscriber$1;
			var iterator_1 = iterator;
			var innerSubscribe_1$j = innerSubscribe$1;
			function zip$2() {
			    var observables = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        observables[_i] = arguments[_i];
			    }
			    var resultSelector = observables[observables.length - 1];
			    if (typeof resultSelector === 'function') {
			        observables.pop();
			    }
			    return fromArray_1.fromArray(observables, undefined).lift(new ZipOperator(resultSelector));
			}
			zip$3.zip = zip$2;
			var ZipOperator = (function () {
			    function ZipOperator(resultSelector) {
			        this.resultSelector = resultSelector;
			    }
			    ZipOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
			    };
			    return ZipOperator;
			}());
			zip$3.ZipOperator = ZipOperator;
			var ZipSubscriber = (function (_super) {
			    __extends$W(ZipSubscriber, _super);
			    function ZipSubscriber(destination, resultSelector, values) {
			        var _this = _super.call(this, destination) || this;
			        _this.resultSelector = resultSelector;
			        _this.iterators = [];
			        _this.active = 0;
			        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : undefined;
			        return _this;
			    }
			    ZipSubscriber.prototype._next = function (value) {
			        var iterators = this.iterators;
			        if (isArray_1$3.isArray(value)) {
			            iterators.push(new StaticArrayIterator(value));
			        }
			        else if (typeof value[iterator_1.iterator] === 'function') {
			            iterators.push(new StaticIterator(value[iterator_1.iterator]()));
			        }
			        else {
			            iterators.push(new ZipBufferIterator(this.destination, this, value));
			        }
			    };
			    ZipSubscriber.prototype._complete = function () {
			        var iterators = this.iterators;
			        var len = iterators.length;
			        this.unsubscribe();
			        if (len === 0) {
			            this.destination.complete();
			            return;
			        }
			        this.active = len;
			        for (var i = 0; i < len; i++) {
			            var iterator = iterators[i];
			            if (iterator.stillUnsubscribed) {
			                var destination = this.destination;
			                destination.add(iterator.subscribe());
			            }
			            else {
			                this.active--;
			            }
			        }
			    };
			    ZipSubscriber.prototype.notifyInactive = function () {
			        this.active--;
			        if (this.active === 0) {
			            this.destination.complete();
			        }
			    };
			    ZipSubscriber.prototype.checkIterators = function () {
			        var iterators = this.iterators;
			        var len = iterators.length;
			        var destination = this.destination;
			        for (var i = 0; i < len; i++) {
			            var iterator = iterators[i];
			            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
			                return;
			            }
			        }
			        var shouldComplete = false;
			        var args = [];
			        for (var i = 0; i < len; i++) {
			            var iterator = iterators[i];
			            var result = iterator.next();
			            if (iterator.hasCompleted()) {
			                shouldComplete = true;
			            }
			            if (result.done) {
			                destination.complete();
			                return;
			            }
			            args.push(result.value);
			        }
			        if (this.resultSelector) {
			            this._tryresultSelector(args);
			        }
			        else {
			            destination.next(args);
			        }
			        if (shouldComplete) {
			            destination.complete();
			        }
			    };
			    ZipSubscriber.prototype._tryresultSelector = function (args) {
			        var result;
			        try {
			            result = this.resultSelector.apply(this, args);
			        }
			        catch (err) {
			            this.destination.error(err);
			            return;
			        }
			        this.destination.next(result);
			    };
			    return ZipSubscriber;
			}(Subscriber_1$z.Subscriber));
			zip$3.ZipSubscriber = ZipSubscriber;
			var StaticIterator = (function () {
			    function StaticIterator(iterator) {
			        this.iterator = iterator;
			        this.nextResult = iterator.next();
			    }
			    StaticIterator.prototype.hasValue = function () {
			        return true;
			    };
			    StaticIterator.prototype.next = function () {
			        var result = this.nextResult;
			        this.nextResult = this.iterator.next();
			        return result;
			    };
			    StaticIterator.prototype.hasCompleted = function () {
			        var nextResult = this.nextResult;
			        return Boolean(nextResult && nextResult.done);
			    };
			    return StaticIterator;
			}());
			var StaticArrayIterator = (function () {
			    function StaticArrayIterator(array) {
			        this.array = array;
			        this.index = 0;
			        this.length = 0;
			        this.length = array.length;
			    }
			    StaticArrayIterator.prototype[iterator_1.iterator] = function () {
			        return this;
			    };
			    StaticArrayIterator.prototype.next = function (value) {
			        var i = this.index++;
			        var array = this.array;
			        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
			    };
			    StaticArrayIterator.prototype.hasValue = function () {
			        return this.array.length > this.index;
			    };
			    StaticArrayIterator.prototype.hasCompleted = function () {
			        return this.array.length === this.index;
			    };
			    return StaticArrayIterator;
			}());
			var ZipBufferIterator = (function (_super) {
			    __extends$W(ZipBufferIterator, _super);
			    function ZipBufferIterator(destination, parent, observable) {
			        var _this = _super.call(this, destination) || this;
			        _this.parent = parent;
			        _this.observable = observable;
			        _this.stillUnsubscribed = true;
			        _this.buffer = [];
			        _this.isComplete = false;
			        return _this;
			    }
			    ZipBufferIterator.prototype[iterator_1.iterator] = function () {
			        return this;
			    };
			    ZipBufferIterator.prototype.next = function () {
			        var buffer = this.buffer;
			        if (buffer.length === 0 && this.isComplete) {
			            return { value: null, done: true };
			        }
			        else {
			            return { value: buffer.shift(), done: false };
			        }
			    };
			    ZipBufferIterator.prototype.hasValue = function () {
			        return this.buffer.length > 0;
			    };
			    ZipBufferIterator.prototype.hasCompleted = function () {
			        return this.buffer.length === 0 && this.isComplete;
			    };
			    ZipBufferIterator.prototype.notifyComplete = function () {
			        if (this.buffer.length > 0) {
			            this.isComplete = true;
			            this.parent.notifyInactive();
			        }
			        else {
			            this.destination.complete();
			        }
			    };
			    ZipBufferIterator.prototype.notifyNext = function (innerValue) {
			        this.buffer.push(innerValue);
			        this.parent.checkIterators();
			    };
			    ZipBufferIterator.prototype.subscribe = function () {
			        return innerSubscribe_1$j.innerSubscribe(this.observable, new innerSubscribe_1$j.SimpleInnerSubscriber(this));
			    };
			    return ZipBufferIterator;
			}(innerSubscribe_1$j.SimpleOuterSubscriber));

			Object.defineProperty(rxjs, "__esModule", { value: true });
			var Observable_1$2 = Observable$1;
			rxjs.Observable = Observable_1$2.Observable;
			var ConnectableObservable_1$1 = ConnectableObservable$1;
			rxjs.ConnectableObservable = ConnectableObservable_1$1.ConnectableObservable;
			var groupBy_1$1 = groupBy$1;
			rxjs.GroupedObservable = groupBy_1$1.GroupedObservable;
			var observable_1 = observable;
			rxjs.observable = observable_1.observable;
			var Subject_1$9 = Subject$1;
			rxjs.Subject = Subject_1$9.Subject;
			var BehaviorSubject_1$1 = BehaviorSubject$1;
			rxjs.BehaviorSubject = BehaviorSubject_1$1.BehaviorSubject;
			var ReplaySubject_1$2 = ReplaySubject$1;
			rxjs.ReplaySubject = ReplaySubject_1$2.ReplaySubject;
			var AsyncSubject_1$1 = AsyncSubject$1;
			rxjs.AsyncSubject = AsyncSubject_1$1.AsyncSubject;
			var asap_1$1 = asap;
			rxjs.asap = asap_1$1.asap;
			rxjs.asapScheduler = asap_1$1.asapScheduler;
			var async_1$b = async;
			rxjs.async = async_1$b.async;
			rxjs.asyncScheduler = async_1$b.asyncScheduler;
			var queue_1 = queue;
			rxjs.queue = queue_1.queue;
			rxjs.queueScheduler = queue_1.queueScheduler;
			var animationFrame_1 = animationFrame;
			rxjs.animationFrame = animationFrame_1.animationFrame;
			rxjs.animationFrameScheduler = animationFrame_1.animationFrameScheduler;
			var VirtualTimeScheduler_1 = VirtualTimeScheduler$1;
			rxjs.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;
			rxjs.VirtualAction = VirtualTimeScheduler_1.VirtualAction;
			var Scheduler_1 = Scheduler$1;
			rxjs.Scheduler = Scheduler_1.Scheduler;
			var Subscription_1$4 = Subscription$1;
			rxjs.Subscription = Subscription_1$4.Subscription;
			var Subscriber_1$y = Subscriber$1;
			rxjs.Subscriber = Subscriber_1$y.Subscriber;
			var Notification_1$2 = Notification;
			rxjs.Notification = Notification_1$2.Notification;
			rxjs.NotificationKind = Notification_1$2.NotificationKind;
			var pipe_1$1 = pipe$1;
			rxjs.pipe = pipe_1$1.pipe;
			var noop_1$1 = noop$1;
			rxjs.noop = noop_1$1.noop;
			var identity_1$3 = identity$1;
			rxjs.identity = identity_1$3.identity;
			var isObservable_1 = isObservable$1;
			rxjs.isObservable = isObservable_1.isObservable;
			var ArgumentOutOfRangeError_1$4 = ArgumentOutOfRangeError;
			rxjs.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1$4.ArgumentOutOfRangeError;
			var EmptyError_1$4 = EmptyError;
			rxjs.EmptyError = EmptyError_1$4.EmptyError;
			var ObjectUnsubscribedError_1 = ObjectUnsubscribedError;
			rxjs.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;
			var UnsubscriptionError_1 = UnsubscriptionError;
			rxjs.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;
			var TimeoutError_1$1 = TimeoutError;
			rxjs.TimeoutError = TimeoutError_1$1.TimeoutError;
			var bindCallback_1 = bindCallback$1;
			rxjs.bindCallback = bindCallback_1.bindCallback;
			var bindNodeCallback_1 = bindNodeCallback$1;
			rxjs.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;
			var combineLatest_1$3 = combineLatest$3;
			rxjs.combineLatest = combineLatest_1$3.combineLatest;
			var concat_1$4 = concat$3;
			rxjs.concat = concat_1$4.concat;
			var defer_1$1 = defer$1;
			rxjs.defer = defer_1$1.defer;
			var empty_1$3 = empty;
			rxjs.empty = empty_1$3.empty;
			var forkJoin_1 = forkJoin$1;
			rxjs.forkJoin = forkJoin_1.forkJoin;
			var from_1$4 = from$1;
			rxjs.from = from_1$4.from;
			var fromEvent_1 = fromEvent$1;
			rxjs.fromEvent = fromEvent_1.fromEvent;
			var fromEventPattern_1 = fromEventPattern$1;
			rxjs.fromEventPattern = fromEventPattern_1.fromEventPattern;
			var generate_1 = generate$1;
			rxjs.generate = generate_1.generate;
			var iif_1 = iif$1;
			rxjs.iif = iif_1.iif;
			var interval_1 = interval$1;
			rxjs.interval = interval_1.interval;
			var merge_1$2 = merge$3;
			rxjs.merge = merge_1$2.merge;
			var never_1 = never;
			rxjs.never = never_1.never;
			var of_1$1 = of$1;
			rxjs.of = of_1$1.of;
			var onErrorResumeNext_1$1 = onErrorResumeNext$3;
			rxjs.onErrorResumeNext = onErrorResumeNext_1$1.onErrorResumeNext;
			var pairs_1 = pairs$1;
			rxjs.pairs = pairs_1.pairs;
			var partition_1$1 = partition$3;
			rxjs.partition = partition_1$1.partition;
			var race_1$2 = race$3;
			rxjs.race = race_1$2.race;
			var range_1 = range$1;
			rxjs.range = range_1.range;
			var throwError_1$1 = throwError$1;
			rxjs.throwError = throwError_1$1.throwError;
			var timer_1$1 = timer$1;
			rxjs.timer = timer_1$1.timer;
			var using_1 = using$1;
			rxjs.using = using_1.using;
			var zip_1$3 = zip$3;
			rxjs.zip = zip_1$3.zip;
			var scheduled_1 = scheduled$1;
			rxjs.scheduled = scheduled_1.scheduled;
			var empty_2 = empty;
			rxjs.EMPTY = empty_2.EMPTY;
			var never_2 = never;
			rxjs.NEVER = never_2.NEVER;
			var config_1 = config;
			rxjs.config = config_1.config;

			Object.defineProperty(Subject$2, "__esModule", { value: true });
			var rxjs_1 = rxjs;
			Subject$2.Subject = rxjs_1.Subject;

			(function (exports) {
			function __export(m) {
			    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
			}
			Object.defineProperty(exports, "__esModule", { value: true });
			__export(Subject$2);

			}(Subject$3));

			var filter$1 = {};

			var filter = {};

			var operators = {};

			var audit$1 = {};

			var __extends$V = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(audit$1, "__esModule", { value: true });
			var innerSubscribe_1$i = innerSubscribe$1;
			function audit(durationSelector) {
			    return function auditOperatorFunction(source) {
			        return source.lift(new AuditOperator(durationSelector));
			    };
			}
			audit$1.audit = audit;
			var AuditOperator = (function () {
			    function AuditOperator(durationSelector) {
			        this.durationSelector = durationSelector;
			    }
			    AuditOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
			    };
			    return AuditOperator;
			}());
			var AuditSubscriber = (function (_super) {
			    __extends$V(AuditSubscriber, _super);
			    function AuditSubscriber(destination, durationSelector) {
			        var _this = _super.call(this, destination) || this;
			        _this.durationSelector = durationSelector;
			        _this.hasValue = false;
			        return _this;
			    }
			    AuditSubscriber.prototype._next = function (value) {
			        this.value = value;
			        this.hasValue = true;
			        if (!this.throttled) {
			            var duration = void 0;
			            try {
			                var durationSelector = this.durationSelector;
			                duration = durationSelector(value);
			            }
			            catch (err) {
			                return this.destination.error(err);
			            }
			            var innerSubscription = innerSubscribe_1$i.innerSubscribe(duration, new innerSubscribe_1$i.SimpleInnerSubscriber(this));
			            if (!innerSubscription || innerSubscription.closed) {
			                this.clearThrottle();
			            }
			            else {
			                this.add(this.throttled = innerSubscription);
			            }
			        }
			    };
			    AuditSubscriber.prototype.clearThrottle = function () {
			        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
			        if (throttled) {
			            this.remove(throttled);
			            this.throttled = undefined;
			            throttled.unsubscribe();
			        }
			        if (hasValue) {
			            this.value = undefined;
			            this.hasValue = false;
			            this.destination.next(value);
			        }
			    };
			    AuditSubscriber.prototype.notifyNext = function () {
			        this.clearThrottle();
			    };
			    AuditSubscriber.prototype.notifyComplete = function () {
			        this.clearThrottle();
			    };
			    return AuditSubscriber;
			}(innerSubscribe_1$i.SimpleOuterSubscriber));

			var auditTime$1 = {};

			Object.defineProperty(auditTime$1, "__esModule", { value: true });
			var async_1$a = async;
			var audit_1$1 = audit$1;
			var timer_1 = timer$1;
			function auditTime(duration, scheduler) {
			    if (scheduler === void 0) { scheduler = async_1$a.async; }
			    return audit_1$1.audit(function () { return timer_1.timer(duration, scheduler); });
			}
			auditTime$1.auditTime = auditTime;

			var buffer$1 = {};

			var __extends$U = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(buffer$1, "__esModule", { value: true });
			var innerSubscribe_1$h = innerSubscribe$1;
			function buffer(closingNotifier) {
			    return function bufferOperatorFunction(source) {
			        return source.lift(new BufferOperator(closingNotifier));
			    };
			}
			buffer$1.buffer = buffer;
			var BufferOperator = (function () {
			    function BufferOperator(closingNotifier) {
			        this.closingNotifier = closingNotifier;
			    }
			    BufferOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
			    };
			    return BufferOperator;
			}());
			var BufferSubscriber = (function (_super) {
			    __extends$U(BufferSubscriber, _super);
			    function BufferSubscriber(destination, closingNotifier) {
			        var _this = _super.call(this, destination) || this;
			        _this.buffer = [];
			        _this.add(innerSubscribe_1$h.innerSubscribe(closingNotifier, new innerSubscribe_1$h.SimpleInnerSubscriber(_this)));
			        return _this;
			    }
			    BufferSubscriber.prototype._next = function (value) {
			        this.buffer.push(value);
			    };
			    BufferSubscriber.prototype.notifyNext = function () {
			        var buffer = this.buffer;
			        this.buffer = [];
			        this.destination.next(buffer);
			    };
			    return BufferSubscriber;
			}(innerSubscribe_1$h.SimpleOuterSubscriber));

			var bufferCount$1 = {};

			var __extends$T = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(bufferCount$1, "__esModule", { value: true });
			var Subscriber_1$x = Subscriber$1;
			function bufferCount(bufferSize, startBufferEvery) {
			    if (startBufferEvery === void 0) { startBufferEvery = null; }
			    return function bufferCountOperatorFunction(source) {
			        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));
			    };
			}
			bufferCount$1.bufferCount = bufferCount;
			var BufferCountOperator = (function () {
			    function BufferCountOperator(bufferSize, startBufferEvery) {
			        this.bufferSize = bufferSize;
			        this.startBufferEvery = startBufferEvery;
			        if (!startBufferEvery || bufferSize === startBufferEvery) {
			            this.subscriberClass = BufferCountSubscriber;
			        }
			        else {
			            this.subscriberClass = BufferSkipCountSubscriber;
			        }
			    }
			    BufferCountOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
			    };
			    return BufferCountOperator;
			}());
			var BufferCountSubscriber = (function (_super) {
			    __extends$T(BufferCountSubscriber, _super);
			    function BufferCountSubscriber(destination, bufferSize) {
			        var _this = _super.call(this, destination) || this;
			        _this.bufferSize = bufferSize;
			        _this.buffer = [];
			        return _this;
			    }
			    BufferCountSubscriber.prototype._next = function (value) {
			        var buffer = this.buffer;
			        buffer.push(value);
			        if (buffer.length == this.bufferSize) {
			            this.destination.next(buffer);
			            this.buffer = [];
			        }
			    };
			    BufferCountSubscriber.prototype._complete = function () {
			        var buffer = this.buffer;
			        if (buffer.length > 0) {
			            this.destination.next(buffer);
			        }
			        _super.prototype._complete.call(this);
			    };
			    return BufferCountSubscriber;
			}(Subscriber_1$x.Subscriber));
			var BufferSkipCountSubscriber = (function (_super) {
			    __extends$T(BufferSkipCountSubscriber, _super);
			    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
			        var _this = _super.call(this, destination) || this;
			        _this.bufferSize = bufferSize;
			        _this.startBufferEvery = startBufferEvery;
			        _this.buffers = [];
			        _this.count = 0;
			        return _this;
			    }
			    BufferSkipCountSubscriber.prototype._next = function (value) {
			        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
			        this.count++;
			        if (count % startBufferEvery === 0) {
			            buffers.push([]);
			        }
			        for (var i = buffers.length; i--;) {
			            var buffer = buffers[i];
			            buffer.push(value);
			            if (buffer.length === bufferSize) {
			                buffers.splice(i, 1);
			                this.destination.next(buffer);
			            }
			        }
			    };
			    BufferSkipCountSubscriber.prototype._complete = function () {
			        var _a = this, buffers = _a.buffers, destination = _a.destination;
			        while (buffers.length > 0) {
			            var buffer = buffers.shift();
			            if (buffer.length > 0) {
			                destination.next(buffer);
			            }
			        }
			        _super.prototype._complete.call(this);
			    };
			    return BufferSkipCountSubscriber;
			}(Subscriber_1$x.Subscriber));

			var bufferTime$1 = {};

			var __extends$S = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(bufferTime$1, "__esModule", { value: true });
			var async_1$9 = async;
			var Subscriber_1$w = Subscriber$1;
			var isScheduler_1$2 = isScheduler$1;
			function bufferTime(bufferTimeSpan) {
			    var length = arguments.length;
			    var scheduler = async_1$9.async;
			    if (isScheduler_1$2.isScheduler(arguments[arguments.length - 1])) {
			        scheduler = arguments[arguments.length - 1];
			        length--;
			    }
			    var bufferCreationInterval = null;
			    if (length >= 2) {
			        bufferCreationInterval = arguments[1];
			    }
			    var maxBufferSize = Number.POSITIVE_INFINITY;
			    if (length >= 3) {
			        maxBufferSize = arguments[2];
			    }
			    return function bufferTimeOperatorFunction(source) {
			        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
			    };
			}
			bufferTime$1.bufferTime = bufferTime;
			var BufferTimeOperator = (function () {
			    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
			        this.bufferTimeSpan = bufferTimeSpan;
			        this.bufferCreationInterval = bufferCreationInterval;
			        this.maxBufferSize = maxBufferSize;
			        this.scheduler = scheduler;
			    }
			    BufferTimeOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
			    };
			    return BufferTimeOperator;
			}());
			var Context = (function () {
			    function Context() {
			        this.buffer = [];
			    }
			    return Context;
			}());
			var BufferTimeSubscriber = (function (_super) {
			    __extends$S(BufferTimeSubscriber, _super);
			    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
			        var _this = _super.call(this, destination) || this;
			        _this.bufferTimeSpan = bufferTimeSpan;
			        _this.bufferCreationInterval = bufferCreationInterval;
			        _this.maxBufferSize = maxBufferSize;
			        _this.scheduler = scheduler;
			        _this.contexts = [];
			        var context = _this.openContext();
			        _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
			        if (_this.timespanOnly) {
			            var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };
			            _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
			        }
			        else {
			            var closeState = { subscriber: _this, context: context };
			            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };
			            _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
			            _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
			        }
			        return _this;
			    }
			    BufferTimeSubscriber.prototype._next = function (value) {
			        var contexts = this.contexts;
			        var len = contexts.length;
			        var filledBufferContext;
			        for (var i = 0; i < len; i++) {
			            var context_1 = contexts[i];
			            var buffer = context_1.buffer;
			            buffer.push(value);
			            if (buffer.length == this.maxBufferSize) {
			                filledBufferContext = context_1;
			            }
			        }
			        if (filledBufferContext) {
			            this.onBufferFull(filledBufferContext);
			        }
			    };
			    BufferTimeSubscriber.prototype._error = function (err) {
			        this.contexts.length = 0;
			        _super.prototype._error.call(this, err);
			    };
			    BufferTimeSubscriber.prototype._complete = function () {
			        var _a = this, contexts = _a.contexts, destination = _a.destination;
			        while (contexts.length > 0) {
			            var context_2 = contexts.shift();
			            destination.next(context_2.buffer);
			        }
			        _super.prototype._complete.call(this);
			    };
			    BufferTimeSubscriber.prototype._unsubscribe = function () {
			        this.contexts = null;
			    };
			    BufferTimeSubscriber.prototype.onBufferFull = function (context) {
			        this.closeContext(context);
			        var closeAction = context.closeAction;
			        closeAction.unsubscribe();
			        this.remove(closeAction);
			        if (!this.closed && this.timespanOnly) {
			            context = this.openContext();
			            var bufferTimeSpan = this.bufferTimeSpan;
			            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
			            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
			        }
			    };
			    BufferTimeSubscriber.prototype.openContext = function () {
			        var context = new Context();
			        this.contexts.push(context);
			        return context;
			    };
			    BufferTimeSubscriber.prototype.closeContext = function (context) {
			        this.destination.next(context.buffer);
			        var contexts = this.contexts;
			        var spliceIndex = contexts ? contexts.indexOf(context) : -1;
			        if (spliceIndex >= 0) {
			            contexts.splice(contexts.indexOf(context), 1);
			        }
			    };
			    return BufferTimeSubscriber;
			}(Subscriber_1$w.Subscriber));
			function dispatchBufferTimeSpanOnly(state) {
			    var subscriber = state.subscriber;
			    var prevContext = state.context;
			    if (prevContext) {
			        subscriber.closeContext(prevContext);
			    }
			    if (!subscriber.closed) {
			        state.context = subscriber.openContext();
			        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
			    }
			}
			function dispatchBufferCreation(state) {
			    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
			    var context = subscriber.openContext();
			    var action = this;
			    if (!subscriber.closed) {
			        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
			        action.schedule(state, bufferCreationInterval);
			    }
			}
			function dispatchBufferClose(arg) {
			    var subscriber = arg.subscriber, context = arg.context;
			    subscriber.closeContext(context);
			}

			var bufferToggle$1 = {};

			var __extends$R = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(bufferToggle$1, "__esModule", { value: true });
			var Subscription_1$3 = Subscription$1;
			var subscribeToResult_1$4 = subscribeToResult$1;
			var OuterSubscriber_1$4 = OuterSubscriber$1;
			function bufferToggle(openings, closingSelector) {
			    return function bufferToggleOperatorFunction(source) {
			        return source.lift(new BufferToggleOperator(openings, closingSelector));
			    };
			}
			bufferToggle$1.bufferToggle = bufferToggle;
			var BufferToggleOperator = (function () {
			    function BufferToggleOperator(openings, closingSelector) {
			        this.openings = openings;
			        this.closingSelector = closingSelector;
			    }
			    BufferToggleOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
			    };
			    return BufferToggleOperator;
			}());
			var BufferToggleSubscriber = (function (_super) {
			    __extends$R(BufferToggleSubscriber, _super);
			    function BufferToggleSubscriber(destination, openings, closingSelector) {
			        var _this = _super.call(this, destination) || this;
			        _this.closingSelector = closingSelector;
			        _this.contexts = [];
			        _this.add(subscribeToResult_1$4.subscribeToResult(_this, openings));
			        return _this;
			    }
			    BufferToggleSubscriber.prototype._next = function (value) {
			        var contexts = this.contexts;
			        var len = contexts.length;
			        for (var i = 0; i < len; i++) {
			            contexts[i].buffer.push(value);
			        }
			    };
			    BufferToggleSubscriber.prototype._error = function (err) {
			        var contexts = this.contexts;
			        while (contexts.length > 0) {
			            var context_1 = contexts.shift();
			            context_1.subscription.unsubscribe();
			            context_1.buffer = null;
			            context_1.subscription = null;
			        }
			        this.contexts = null;
			        _super.prototype._error.call(this, err);
			    };
			    BufferToggleSubscriber.prototype._complete = function () {
			        var contexts = this.contexts;
			        while (contexts.length > 0) {
			            var context_2 = contexts.shift();
			            this.destination.next(context_2.buffer);
			            context_2.subscription.unsubscribe();
			            context_2.buffer = null;
			            context_2.subscription = null;
			        }
			        this.contexts = null;
			        _super.prototype._complete.call(this);
			    };
			    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue) {
			        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
			    };
			    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
			        this.closeBuffer(innerSub.context);
			    };
			    BufferToggleSubscriber.prototype.openBuffer = function (value) {
			        try {
			            var closingSelector = this.closingSelector;
			            var closingNotifier = closingSelector.call(this, value);
			            if (closingNotifier) {
			                this.trySubscribe(closingNotifier);
			            }
			        }
			        catch (err) {
			            this._error(err);
			        }
			    };
			    BufferToggleSubscriber.prototype.closeBuffer = function (context) {
			        var contexts = this.contexts;
			        if (contexts && context) {
			            var buffer = context.buffer, subscription = context.subscription;
			            this.destination.next(buffer);
			            contexts.splice(contexts.indexOf(context), 1);
			            this.remove(subscription);
			            subscription.unsubscribe();
			        }
			    };
			    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
			        var contexts = this.contexts;
			        var buffer = [];
			        var subscription = new Subscription_1$3.Subscription();
			        var context = { buffer: buffer, subscription: subscription };
			        contexts.push(context);
			        var innerSubscription = subscribeToResult_1$4.subscribeToResult(this, closingNotifier, context);
			        if (!innerSubscription || innerSubscription.closed) {
			            this.closeBuffer(context);
			        }
			        else {
			            innerSubscription.context = context;
			            this.add(innerSubscription);
			            subscription.add(innerSubscription);
			        }
			    };
			    return BufferToggleSubscriber;
			}(OuterSubscriber_1$4.OuterSubscriber));

			var bufferWhen$1 = {};

			var __extends$Q = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(bufferWhen$1, "__esModule", { value: true });
			var Subscription_1$2 = Subscription$1;
			var innerSubscribe_1$g = innerSubscribe$1;
			function bufferWhen(closingSelector) {
			    return function (source) {
			        return source.lift(new BufferWhenOperator(closingSelector));
			    };
			}
			bufferWhen$1.bufferWhen = bufferWhen;
			var BufferWhenOperator = (function () {
			    function BufferWhenOperator(closingSelector) {
			        this.closingSelector = closingSelector;
			    }
			    BufferWhenOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
			    };
			    return BufferWhenOperator;
			}());
			var BufferWhenSubscriber = (function (_super) {
			    __extends$Q(BufferWhenSubscriber, _super);
			    function BufferWhenSubscriber(destination, closingSelector) {
			        var _this = _super.call(this, destination) || this;
			        _this.closingSelector = closingSelector;
			        _this.subscribing = false;
			        _this.openBuffer();
			        return _this;
			    }
			    BufferWhenSubscriber.prototype._next = function (value) {
			        this.buffer.push(value);
			    };
			    BufferWhenSubscriber.prototype._complete = function () {
			        var buffer = this.buffer;
			        if (buffer) {
			            this.destination.next(buffer);
			        }
			        _super.prototype._complete.call(this);
			    };
			    BufferWhenSubscriber.prototype._unsubscribe = function () {
			        this.buffer = undefined;
			        this.subscribing = false;
			    };
			    BufferWhenSubscriber.prototype.notifyNext = function () {
			        this.openBuffer();
			    };
			    BufferWhenSubscriber.prototype.notifyComplete = function () {
			        if (this.subscribing) {
			            this.complete();
			        }
			        else {
			            this.openBuffer();
			        }
			    };
			    BufferWhenSubscriber.prototype.openBuffer = function () {
			        var closingSubscription = this.closingSubscription;
			        if (closingSubscription) {
			            this.remove(closingSubscription);
			            closingSubscription.unsubscribe();
			        }
			        var buffer = this.buffer;
			        if (this.buffer) {
			            this.destination.next(buffer);
			        }
			        this.buffer = [];
			        var closingNotifier;
			        try {
			            var closingSelector = this.closingSelector;
			            closingNotifier = closingSelector();
			        }
			        catch (err) {
			            return this.error(err);
			        }
			        closingSubscription = new Subscription_1$2.Subscription();
			        this.closingSubscription = closingSubscription;
			        this.add(closingSubscription);
			        this.subscribing = true;
			        closingSubscription.add(innerSubscribe_1$g.innerSubscribe(closingNotifier, new innerSubscribe_1$g.SimpleInnerSubscriber(this)));
			        this.subscribing = false;
			    };
			    return BufferWhenSubscriber;
			}(innerSubscribe_1$g.SimpleOuterSubscriber));

			var catchError$1 = {};

			var __extends$P = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(catchError$1, "__esModule", { value: true });
			var innerSubscribe_1$f = innerSubscribe$1;
			function catchError(selector) {
			    return function catchErrorOperatorFunction(source) {
			        var operator = new CatchOperator(selector);
			        var caught = source.lift(operator);
			        return (operator.caught = caught);
			    };
			}
			catchError$1.catchError = catchError;
			var CatchOperator = (function () {
			    function CatchOperator(selector) {
			        this.selector = selector;
			    }
			    CatchOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
			    };
			    return CatchOperator;
			}());
			var CatchSubscriber = (function (_super) {
			    __extends$P(CatchSubscriber, _super);
			    function CatchSubscriber(destination, selector, caught) {
			        var _this = _super.call(this, destination) || this;
			        _this.selector = selector;
			        _this.caught = caught;
			        return _this;
			    }
			    CatchSubscriber.prototype.error = function (err) {
			        if (!this.isStopped) {
			            var result = void 0;
			            try {
			                result = this.selector(err, this.caught);
			            }
			            catch (err2) {
			                _super.prototype.error.call(this, err2);
			                return;
			            }
			            this._unsubscribeAndRecycle();
			            var innerSubscriber = new innerSubscribe_1$f.SimpleInnerSubscriber(this);
			            this.add(innerSubscriber);
			            var innerSubscription = innerSubscribe_1$f.innerSubscribe(result, innerSubscriber);
			            if (innerSubscription !== innerSubscriber) {
			                this.add(innerSubscription);
			            }
			        }
			    };
			    return CatchSubscriber;
			}(innerSubscribe_1$f.SimpleOuterSubscriber));

			var combineAll$1 = {};

			Object.defineProperty(combineAll$1, "__esModule", { value: true });
			var combineLatest_1$2 = combineLatest$3;
			function combineAll(project) {
			    return function (source) { return source.lift(new combineLatest_1$2.CombineLatestOperator(project)); };
			}
			combineAll$1.combineAll = combineAll;

			var combineLatest$1 = {};

			Object.defineProperty(combineLatest$1, "__esModule", { value: true });
			var isArray_1$2 = isArray;
			var combineLatest_1$1 = combineLatest$3;
			var from_1$3 = from$1;
			function combineLatest() {
			    var observables = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        observables[_i] = arguments[_i];
			    }
			    var project = null;
			    if (typeof observables[observables.length - 1] === 'function') {
			        project = observables.pop();
			    }
			    if (observables.length === 1 && isArray_1$2.isArray(observables[0])) {
			        observables = observables[0].slice();
			    }
			    return function (source) { return source.lift.call(from_1$3.from([source].concat(observables)), new combineLatest_1$1.CombineLatestOperator(project)); };
			}
			combineLatest$1.combineLatest = combineLatest;

			var concat$1 = {};

			Object.defineProperty(concat$1, "__esModule", { value: true });
			var concat_1$3 = concat$3;
			function concat() {
			    var observables = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        observables[_i] = arguments[_i];
			    }
			    return function (source) { return source.lift.call(concat_1$3.concat.apply(void 0, [source].concat(observables))); };
			}
			concat$1.concat = concat;

			var concatMap$1 = {};

			Object.defineProperty(concatMap$1, "__esModule", { value: true });
			var mergeMap_1$2 = mergeMap$1;
			function concatMap(project, resultSelector) {
			    return mergeMap_1$2.mergeMap(project, resultSelector, 1);
			}
			concatMap$1.concatMap = concatMap;

			var concatMapTo$1 = {};

			Object.defineProperty(concatMapTo$1, "__esModule", { value: true });
			var concatMap_1$1 = concatMap$1;
			function concatMapTo(innerObservable, resultSelector) {
			    return concatMap_1$1.concatMap(function () { return innerObservable; }, resultSelector);
			}
			concatMapTo$1.concatMapTo = concatMapTo;

			var count$1 = {};

			var __extends$O = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(count$1, "__esModule", { value: true });
			var Subscriber_1$v = Subscriber$1;
			function count(predicate) {
			    return function (source) { return source.lift(new CountOperator(predicate, source)); };
			}
			count$1.count = count;
			var CountOperator = (function () {
			    function CountOperator(predicate, source) {
			        this.predicate = predicate;
			        this.source = source;
			    }
			    CountOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
			    };
			    return CountOperator;
			}());
			var CountSubscriber = (function (_super) {
			    __extends$O(CountSubscriber, _super);
			    function CountSubscriber(destination, predicate, source) {
			        var _this = _super.call(this, destination) || this;
			        _this.predicate = predicate;
			        _this.source = source;
			        _this.count = 0;
			        _this.index = 0;
			        return _this;
			    }
			    CountSubscriber.prototype._next = function (value) {
			        if (this.predicate) {
			            this._tryPredicate(value);
			        }
			        else {
			            this.count++;
			        }
			    };
			    CountSubscriber.prototype._tryPredicate = function (value) {
			        var result;
			        try {
			            result = this.predicate(value, this.index++, this.source);
			        }
			        catch (err) {
			            this.destination.error(err);
			            return;
			        }
			        if (result) {
			            this.count++;
			        }
			    };
			    CountSubscriber.prototype._complete = function () {
			        this.destination.next(this.count);
			        this.destination.complete();
			    };
			    return CountSubscriber;
			}(Subscriber_1$v.Subscriber));

			var debounce$1 = {};

			var __extends$N = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(debounce$1, "__esModule", { value: true });
			var innerSubscribe_1$e = innerSubscribe$1;
			function debounce(durationSelector) {
			    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };
			}
			debounce$1.debounce = debounce;
			var DebounceOperator = (function () {
			    function DebounceOperator(durationSelector) {
			        this.durationSelector = durationSelector;
			    }
			    DebounceOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
			    };
			    return DebounceOperator;
			}());
			var DebounceSubscriber = (function (_super) {
			    __extends$N(DebounceSubscriber, _super);
			    function DebounceSubscriber(destination, durationSelector) {
			        var _this = _super.call(this, destination) || this;
			        _this.durationSelector = durationSelector;
			        _this.hasValue = false;
			        return _this;
			    }
			    DebounceSubscriber.prototype._next = function (value) {
			        try {
			            var result = this.durationSelector.call(this, value);
			            if (result) {
			                this._tryNext(value, result);
			            }
			        }
			        catch (err) {
			            this.destination.error(err);
			        }
			    };
			    DebounceSubscriber.prototype._complete = function () {
			        this.emitValue();
			        this.destination.complete();
			    };
			    DebounceSubscriber.prototype._tryNext = function (value, duration) {
			        var subscription = this.durationSubscription;
			        this.value = value;
			        this.hasValue = true;
			        if (subscription) {
			            subscription.unsubscribe();
			            this.remove(subscription);
			        }
			        subscription = innerSubscribe_1$e.innerSubscribe(duration, new innerSubscribe_1$e.SimpleInnerSubscriber(this));
			        if (subscription && !subscription.closed) {
			            this.add(this.durationSubscription = subscription);
			        }
			    };
			    DebounceSubscriber.prototype.notifyNext = function () {
			        this.emitValue();
			    };
			    DebounceSubscriber.prototype.notifyComplete = function () {
			        this.emitValue();
			    };
			    DebounceSubscriber.prototype.emitValue = function () {
			        if (this.hasValue) {
			            var value = this.value;
			            var subscription = this.durationSubscription;
			            if (subscription) {
			                this.durationSubscription = undefined;
			                subscription.unsubscribe();
			                this.remove(subscription);
			            }
			            this.value = undefined;
			            this.hasValue = false;
			            _super.prototype._next.call(this, value);
			        }
			    };
			    return DebounceSubscriber;
			}(innerSubscribe_1$e.SimpleOuterSubscriber));

			var debounceTime$1 = {};

			var __extends$M = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(debounceTime$1, "__esModule", { value: true });
			var Subscriber_1$u = Subscriber$1;
			var async_1$8 = async;
			function debounceTime(dueTime, scheduler) {
			    if (scheduler === void 0) { scheduler = async_1$8.async; }
			    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };
			}
			debounceTime$1.debounceTime = debounceTime;
			var DebounceTimeOperator = (function () {
			    function DebounceTimeOperator(dueTime, scheduler) {
			        this.dueTime = dueTime;
			        this.scheduler = scheduler;
			    }
			    DebounceTimeOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
			    };
			    return DebounceTimeOperator;
			}());
			var DebounceTimeSubscriber = (function (_super) {
			    __extends$M(DebounceTimeSubscriber, _super);
			    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
			        var _this = _super.call(this, destination) || this;
			        _this.dueTime = dueTime;
			        _this.scheduler = scheduler;
			        _this.debouncedSubscription = null;
			        _this.lastValue = null;
			        _this.hasValue = false;
			        return _this;
			    }
			    DebounceTimeSubscriber.prototype._next = function (value) {
			        this.clearDebounce();
			        this.lastValue = value;
			        this.hasValue = true;
			        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext$1, this.dueTime, this));
			    };
			    DebounceTimeSubscriber.prototype._complete = function () {
			        this.debouncedNext();
			        this.destination.complete();
			    };
			    DebounceTimeSubscriber.prototype.debouncedNext = function () {
			        this.clearDebounce();
			        if (this.hasValue) {
			            var lastValue = this.lastValue;
			            this.lastValue = null;
			            this.hasValue = false;
			            this.destination.next(lastValue);
			        }
			    };
			    DebounceTimeSubscriber.prototype.clearDebounce = function () {
			        var debouncedSubscription = this.debouncedSubscription;
			        if (debouncedSubscription !== null) {
			            this.remove(debouncedSubscription);
			            debouncedSubscription.unsubscribe();
			            this.debouncedSubscription = null;
			        }
			    };
			    return DebounceTimeSubscriber;
			}(Subscriber_1$u.Subscriber));
			function dispatchNext$1(subscriber) {
			    subscriber.debouncedNext();
			}

			var defaultIfEmpty$1 = {};

			var __extends$L = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(defaultIfEmpty$1, "__esModule", { value: true });
			var Subscriber_1$t = Subscriber$1;
			function defaultIfEmpty(defaultValue) {
			    if (defaultValue === void 0) { defaultValue = null; }
			    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };
			}
			defaultIfEmpty$1.defaultIfEmpty = defaultIfEmpty;
			var DefaultIfEmptyOperator = (function () {
			    function DefaultIfEmptyOperator(defaultValue) {
			        this.defaultValue = defaultValue;
			    }
			    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
			    };
			    return DefaultIfEmptyOperator;
			}());
			var DefaultIfEmptySubscriber = (function (_super) {
			    __extends$L(DefaultIfEmptySubscriber, _super);
			    function DefaultIfEmptySubscriber(destination, defaultValue) {
			        var _this = _super.call(this, destination) || this;
			        _this.defaultValue = defaultValue;
			        _this.isEmpty = true;
			        return _this;
			    }
			    DefaultIfEmptySubscriber.prototype._next = function (value) {
			        this.isEmpty = false;
			        this.destination.next(value);
			    };
			    DefaultIfEmptySubscriber.prototype._complete = function () {
			        if (this.isEmpty) {
			            this.destination.next(this.defaultValue);
			        }
			        this.destination.complete();
			    };
			    return DefaultIfEmptySubscriber;
			}(Subscriber_1$t.Subscriber));

			var delay$1 = {};

			var isDate$1 = {};

			Object.defineProperty(isDate$1, "__esModule", { value: true });
			function isDate(value) {
			    return value instanceof Date && !isNaN(+value);
			}
			isDate$1.isDate = isDate;

			var __extends$K = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(delay$1, "__esModule", { value: true });
			var async_1$7 = async;
			var isDate_1$1 = isDate$1;
			var Subscriber_1$s = Subscriber$1;
			var Notification_1$1 = Notification;
			function delay(delay, scheduler) {
			    if (scheduler === void 0) { scheduler = async_1$7.async; }
			    var absoluteDelay = isDate_1$1.isDate(delay);
			    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);
			    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };
			}
			delay$1.delay = delay;
			var DelayOperator = (function () {
			    function DelayOperator(delay, scheduler) {
			        this.delay = delay;
			        this.scheduler = scheduler;
			    }
			    DelayOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
			    };
			    return DelayOperator;
			}());
			var DelaySubscriber = (function (_super) {
			    __extends$K(DelaySubscriber, _super);
			    function DelaySubscriber(destination, delay, scheduler) {
			        var _this = _super.call(this, destination) || this;
			        _this.delay = delay;
			        _this.scheduler = scheduler;
			        _this.queue = [];
			        _this.active = false;
			        _this.errored = false;
			        return _this;
			    }
			    DelaySubscriber.dispatch = function (state) {
			        var source = state.source;
			        var queue = source.queue;
			        var scheduler = state.scheduler;
			        var destination = state.destination;
			        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
			            queue.shift().notification.observe(destination);
			        }
			        if (queue.length > 0) {
			            var delay_1 = Math.max(0, queue[0].time - scheduler.now());
			            this.schedule(state, delay_1);
			        }
			        else {
			            this.unsubscribe();
			            source.active = false;
			        }
			    };
			    DelaySubscriber.prototype._schedule = function (scheduler) {
			        this.active = true;
			        var destination = this.destination;
			        destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
			            source: this, destination: this.destination, scheduler: scheduler
			        }));
			    };
			    DelaySubscriber.prototype.scheduleNotification = function (notification) {
			        if (this.errored === true) {
			            return;
			        }
			        var scheduler = this.scheduler;
			        var message = new DelayMessage(scheduler.now() + this.delay, notification);
			        this.queue.push(message);
			        if (this.active === false) {
			            this._schedule(scheduler);
			        }
			    };
			    DelaySubscriber.prototype._next = function (value) {
			        this.scheduleNotification(Notification_1$1.Notification.createNext(value));
			    };
			    DelaySubscriber.prototype._error = function (err) {
			        this.errored = true;
			        this.queue = [];
			        this.destination.error(err);
			        this.unsubscribe();
			    };
			    DelaySubscriber.prototype._complete = function () {
			        this.scheduleNotification(Notification_1$1.Notification.createComplete());
			        this.unsubscribe();
			    };
			    return DelaySubscriber;
			}(Subscriber_1$s.Subscriber));
			var DelayMessage = (function () {
			    function DelayMessage(time, notification) {
			        this.time = time;
			        this.notification = notification;
			    }
			    return DelayMessage;
			}());

			var delayWhen$1 = {};

			var __extends$J = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(delayWhen$1, "__esModule", { value: true });
			var Subscriber_1$r = Subscriber$1;
			var Observable_1$1 = Observable$1;
			var OuterSubscriber_1$3 = OuterSubscriber$1;
			var subscribeToResult_1$3 = subscribeToResult$1;
			function delayWhen(delayDurationSelector, subscriptionDelay) {
			    if (subscriptionDelay) {
			        return function (source) {
			            return new SubscriptionDelayObservable(source, subscriptionDelay)
			                .lift(new DelayWhenOperator(delayDurationSelector));
			        };
			    }
			    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };
			}
			delayWhen$1.delayWhen = delayWhen;
			var DelayWhenOperator = (function () {
			    function DelayWhenOperator(delayDurationSelector) {
			        this.delayDurationSelector = delayDurationSelector;
			    }
			    DelayWhenOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
			    };
			    return DelayWhenOperator;
			}());
			var DelayWhenSubscriber = (function (_super) {
			    __extends$J(DelayWhenSubscriber, _super);
			    function DelayWhenSubscriber(destination, delayDurationSelector) {
			        var _this = _super.call(this, destination) || this;
			        _this.delayDurationSelector = delayDurationSelector;
			        _this.completed = false;
			        _this.delayNotifierSubscriptions = [];
			        _this.index = 0;
			        return _this;
			    }
			    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {
			        this.destination.next(outerValue);
			        this.removeSubscription(innerSub);
			        this.tryComplete();
			    };
			    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
			        this._error(error);
			    };
			    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
			        var value = this.removeSubscription(innerSub);
			        if (value) {
			            this.destination.next(value);
			        }
			        this.tryComplete();
			    };
			    DelayWhenSubscriber.prototype._next = function (value) {
			        var index = this.index++;
			        try {
			            var delayNotifier = this.delayDurationSelector(value, index);
			            if (delayNotifier) {
			                this.tryDelay(delayNotifier, value);
			            }
			        }
			        catch (err) {
			            this.destination.error(err);
			        }
			    };
			    DelayWhenSubscriber.prototype._complete = function () {
			        this.completed = true;
			        this.tryComplete();
			        this.unsubscribe();
			    };
			    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
			        subscription.unsubscribe();
			        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
			        if (subscriptionIdx !== -1) {
			            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
			        }
			        return subscription.outerValue;
			    };
			    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
			        var notifierSubscription = subscribeToResult_1$3.subscribeToResult(this, delayNotifier, value);
			        if (notifierSubscription && !notifierSubscription.closed) {
			            var destination = this.destination;
			            destination.add(notifierSubscription);
			            this.delayNotifierSubscriptions.push(notifierSubscription);
			        }
			    };
			    DelayWhenSubscriber.prototype.tryComplete = function () {
			        if (this.completed && this.delayNotifierSubscriptions.length === 0) {
			            this.destination.complete();
			        }
			    };
			    return DelayWhenSubscriber;
			}(OuterSubscriber_1$3.OuterSubscriber));
			var SubscriptionDelayObservable = (function (_super) {
			    __extends$J(SubscriptionDelayObservable, _super);
			    function SubscriptionDelayObservable(source, subscriptionDelay) {
			        var _this = _super.call(this) || this;
			        _this.source = source;
			        _this.subscriptionDelay = subscriptionDelay;
			        return _this;
			    }
			    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
			        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
			    };
			    return SubscriptionDelayObservable;
			}(Observable_1$1.Observable));
			var SubscriptionDelaySubscriber = (function (_super) {
			    __extends$J(SubscriptionDelaySubscriber, _super);
			    function SubscriptionDelaySubscriber(parent, source) {
			        var _this = _super.call(this) || this;
			        _this.parent = parent;
			        _this.source = source;
			        _this.sourceSubscribed = false;
			        return _this;
			    }
			    SubscriptionDelaySubscriber.prototype._next = function (unused) {
			        this.subscribeToSource();
			    };
			    SubscriptionDelaySubscriber.prototype._error = function (err) {
			        this.unsubscribe();
			        this.parent.error(err);
			    };
			    SubscriptionDelaySubscriber.prototype._complete = function () {
			        this.unsubscribe();
			        this.subscribeToSource();
			    };
			    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
			        if (!this.sourceSubscribed) {
			            this.sourceSubscribed = true;
			            this.unsubscribe();
			            this.source.subscribe(this.parent);
			        }
			    };
			    return SubscriptionDelaySubscriber;
			}(Subscriber_1$r.Subscriber));

			var dematerialize$1 = {};

			var __extends$I = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(dematerialize$1, "__esModule", { value: true });
			var Subscriber_1$q = Subscriber$1;
			function dematerialize() {
			    return function dematerializeOperatorFunction(source) {
			        return source.lift(new DeMaterializeOperator());
			    };
			}
			dematerialize$1.dematerialize = dematerialize;
			var DeMaterializeOperator = (function () {
			    function DeMaterializeOperator() {
			    }
			    DeMaterializeOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new DeMaterializeSubscriber(subscriber));
			    };
			    return DeMaterializeOperator;
			}());
			var DeMaterializeSubscriber = (function (_super) {
			    __extends$I(DeMaterializeSubscriber, _super);
			    function DeMaterializeSubscriber(destination) {
			        return _super.call(this, destination) || this;
			    }
			    DeMaterializeSubscriber.prototype._next = function (value) {
			        value.observe(this.destination);
			    };
			    return DeMaterializeSubscriber;
			}(Subscriber_1$q.Subscriber));

			var distinct$1 = {};

			var __extends$H = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(distinct$1, "__esModule", { value: true });
			var innerSubscribe_1$d = innerSubscribe$1;
			function distinct(keySelector, flushes) {
			    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };
			}
			distinct$1.distinct = distinct;
			var DistinctOperator = (function () {
			    function DistinctOperator(keySelector, flushes) {
			        this.keySelector = keySelector;
			        this.flushes = flushes;
			    }
			    DistinctOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
			    };
			    return DistinctOperator;
			}());
			var DistinctSubscriber = (function (_super) {
			    __extends$H(DistinctSubscriber, _super);
			    function DistinctSubscriber(destination, keySelector, flushes) {
			        var _this = _super.call(this, destination) || this;
			        _this.keySelector = keySelector;
			        _this.values = new Set();
			        if (flushes) {
			            _this.add(innerSubscribe_1$d.innerSubscribe(flushes, new innerSubscribe_1$d.SimpleInnerSubscriber(_this)));
			        }
			        return _this;
			    }
			    DistinctSubscriber.prototype.notifyNext = function () {
			        this.values.clear();
			    };
			    DistinctSubscriber.prototype.notifyError = function (error) {
			        this._error(error);
			    };
			    DistinctSubscriber.prototype._next = function (value) {
			        if (this.keySelector) {
			            this._useKeySelector(value);
			        }
			        else {
			            this._finalizeNext(value, value);
			        }
			    };
			    DistinctSubscriber.prototype._useKeySelector = function (value) {
			        var key;
			        var destination = this.destination;
			        try {
			            key = this.keySelector(value);
			        }
			        catch (err) {
			            destination.error(err);
			            return;
			        }
			        this._finalizeNext(key, value);
			    };
			    DistinctSubscriber.prototype._finalizeNext = function (key, value) {
			        var values = this.values;
			        if (!values.has(key)) {
			            values.add(key);
			            this.destination.next(value);
			        }
			    };
			    return DistinctSubscriber;
			}(innerSubscribe_1$d.SimpleOuterSubscriber));
			distinct$1.DistinctSubscriber = DistinctSubscriber;

			var distinctUntilChanged$1 = {};

			var __extends$G = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(distinctUntilChanged$1, "__esModule", { value: true });
			var Subscriber_1$p = Subscriber$1;
			function distinctUntilChanged(compare, keySelector) {
			    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };
			}
			distinctUntilChanged$1.distinctUntilChanged = distinctUntilChanged;
			var DistinctUntilChangedOperator = (function () {
			    function DistinctUntilChangedOperator(compare, keySelector) {
			        this.compare = compare;
			        this.keySelector = keySelector;
			    }
			    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
			    };
			    return DistinctUntilChangedOperator;
			}());
			var DistinctUntilChangedSubscriber = (function (_super) {
			    __extends$G(DistinctUntilChangedSubscriber, _super);
			    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
			        var _this = _super.call(this, destination) || this;
			        _this.keySelector = keySelector;
			        _this.hasKey = false;
			        if (typeof compare === 'function') {
			            _this.compare = compare;
			        }
			        return _this;
			    }
			    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
			        return x === y;
			    };
			    DistinctUntilChangedSubscriber.prototype._next = function (value) {
			        var key;
			        try {
			            var keySelector = this.keySelector;
			            key = keySelector ? keySelector(value) : value;
			        }
			        catch (err) {
			            return this.destination.error(err);
			        }
			        var result = false;
			        if (this.hasKey) {
			            try {
			                var compare = this.compare;
			                result = compare(this.key, key);
			            }
			            catch (err) {
			                return this.destination.error(err);
			            }
			        }
			        else {
			            this.hasKey = true;
			        }
			        if (!result) {
			            this.key = key;
			            this.destination.next(value);
			        }
			    };
			    return DistinctUntilChangedSubscriber;
			}(Subscriber_1$p.Subscriber));

			var distinctUntilKeyChanged$1 = {};

			Object.defineProperty(distinctUntilKeyChanged$1, "__esModule", { value: true });
			var distinctUntilChanged_1$1 = distinctUntilChanged$1;
			function distinctUntilKeyChanged(key, compare) {
			    return distinctUntilChanged_1$1.distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });
			}
			distinctUntilKeyChanged$1.distinctUntilKeyChanged = distinctUntilKeyChanged;

			var elementAt$1 = {};

			var throwIfEmpty$1 = {};

			var __extends$F = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(throwIfEmpty$1, "__esModule", { value: true });
			var EmptyError_1$3 = EmptyError;
			var Subscriber_1$o = Subscriber$1;
			function throwIfEmpty(errorFactory) {
			    if (errorFactory === void 0) { errorFactory = defaultErrorFactory; }
			    return function (source) {
			        return source.lift(new ThrowIfEmptyOperator(errorFactory));
			    };
			}
			throwIfEmpty$1.throwIfEmpty = throwIfEmpty;
			var ThrowIfEmptyOperator = (function () {
			    function ThrowIfEmptyOperator(errorFactory) {
			        this.errorFactory = errorFactory;
			    }
			    ThrowIfEmptyOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));
			    };
			    return ThrowIfEmptyOperator;
			}());
			var ThrowIfEmptySubscriber = (function (_super) {
			    __extends$F(ThrowIfEmptySubscriber, _super);
			    function ThrowIfEmptySubscriber(destination, errorFactory) {
			        var _this = _super.call(this, destination) || this;
			        _this.errorFactory = errorFactory;
			        _this.hasValue = false;
			        return _this;
			    }
			    ThrowIfEmptySubscriber.prototype._next = function (value) {
			        this.hasValue = true;
			        this.destination.next(value);
			    };
			    ThrowIfEmptySubscriber.prototype._complete = function () {
			        if (!this.hasValue) {
			            var err = void 0;
			            try {
			                err = this.errorFactory();
			            }
			            catch (e) {
			                err = e;
			            }
			            this.destination.error(err);
			        }
			        else {
			            return this.destination.complete();
			        }
			    };
			    return ThrowIfEmptySubscriber;
			}(Subscriber_1$o.Subscriber));
			function defaultErrorFactory() {
			    return new EmptyError_1$3.EmptyError();
			}

			var take$1 = {};

			var __extends$E = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(take$1, "__esModule", { value: true });
			var Subscriber_1$n = Subscriber$1;
			var ArgumentOutOfRangeError_1$3 = ArgumentOutOfRangeError;
			var empty_1$2 = empty;
			function take(count) {
			    return function (source) {
			        if (count === 0) {
			            return empty_1$2.empty();
			        }
			        else {
			            return source.lift(new TakeOperator(count));
			        }
			    };
			}
			take$1.take = take;
			var TakeOperator = (function () {
			    function TakeOperator(total) {
			        this.total = total;
			        if (this.total < 0) {
			            throw new ArgumentOutOfRangeError_1$3.ArgumentOutOfRangeError;
			        }
			    }
			    TakeOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new TakeSubscriber(subscriber, this.total));
			    };
			    return TakeOperator;
			}());
			var TakeSubscriber = (function (_super) {
			    __extends$E(TakeSubscriber, _super);
			    function TakeSubscriber(destination, total) {
			        var _this = _super.call(this, destination) || this;
			        _this.total = total;
			        _this.count = 0;
			        return _this;
			    }
			    TakeSubscriber.prototype._next = function (value) {
			        var total = this.total;
			        var count = ++this.count;
			        if (count <= total) {
			            this.destination.next(value);
			            if (count === total) {
			                this.destination.complete();
			                this.unsubscribe();
			            }
			        }
			    };
			    return TakeSubscriber;
			}(Subscriber_1$n.Subscriber));

			Object.defineProperty(elementAt$1, "__esModule", { value: true });
			var ArgumentOutOfRangeError_1$2 = ArgumentOutOfRangeError;
			var filter_1$4 = filter$3;
			var throwIfEmpty_1$3 = throwIfEmpty$1;
			var defaultIfEmpty_1$4 = defaultIfEmpty$1;
			var take_1$2 = take$1;
			function elementAt(index, defaultValue) {
			    if (index < 0) {
			        throw new ArgumentOutOfRangeError_1$2.ArgumentOutOfRangeError();
			    }
			    var hasDefaultValue = arguments.length >= 2;
			    return function (source) { return source.pipe(filter_1$4.filter(function (v, i) { return i === index; }), take_1$2.take(1), hasDefaultValue
			        ? defaultIfEmpty_1$4.defaultIfEmpty(defaultValue)
			        : throwIfEmpty_1$3.throwIfEmpty(function () { return new ArgumentOutOfRangeError_1$2.ArgumentOutOfRangeError(); })); };
			}
			elementAt$1.elementAt = elementAt;

			var endWith$1 = {};

			Object.defineProperty(endWith$1, "__esModule", { value: true });
			var concat_1$2 = concat$3;
			var of_1 = of$1;
			function endWith() {
			    var array = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        array[_i] = arguments[_i];
			    }
			    return function (source) { return concat_1$2.concat(source, of_1.of.apply(void 0, array)); };
			}
			endWith$1.endWith = endWith;

			var every$1 = {};

			var __extends$D = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(every$1, "__esModule", { value: true });
			var Subscriber_1$m = Subscriber$1;
			function every(predicate, thisArg) {
			    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };
			}
			every$1.every = every;
			var EveryOperator = (function () {
			    function EveryOperator(predicate, thisArg, source) {
			        this.predicate = predicate;
			        this.thisArg = thisArg;
			        this.source = source;
			    }
			    EveryOperator.prototype.call = function (observer, source) {
			        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
			    };
			    return EveryOperator;
			}());
			var EverySubscriber = (function (_super) {
			    __extends$D(EverySubscriber, _super);
			    function EverySubscriber(destination, predicate, thisArg, source) {
			        var _this = _super.call(this, destination) || this;
			        _this.predicate = predicate;
			        _this.thisArg = thisArg;
			        _this.source = source;
			        _this.index = 0;
			        _this.thisArg = thisArg || _this;
			        return _this;
			    }
			    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
			        this.destination.next(everyValueMatch);
			        this.destination.complete();
			    };
			    EverySubscriber.prototype._next = function (value) {
			        var result = false;
			        try {
			            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
			        }
			        catch (err) {
			            this.destination.error(err);
			            return;
			        }
			        if (!result) {
			            this.notifyComplete(false);
			        }
			    };
			    EverySubscriber.prototype._complete = function () {
			        this.notifyComplete(true);
			    };
			    return EverySubscriber;
			}(Subscriber_1$m.Subscriber));

			var exhaust$1 = {};

			var __extends$C = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(exhaust$1, "__esModule", { value: true });
			var innerSubscribe_1$c = innerSubscribe$1;
			function exhaust() {
			    return function (source) { return source.lift(new SwitchFirstOperator()); };
			}
			exhaust$1.exhaust = exhaust;
			var SwitchFirstOperator = (function () {
			    function SwitchFirstOperator() {
			    }
			    SwitchFirstOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new SwitchFirstSubscriber(subscriber));
			    };
			    return SwitchFirstOperator;
			}());
			var SwitchFirstSubscriber = (function (_super) {
			    __extends$C(SwitchFirstSubscriber, _super);
			    function SwitchFirstSubscriber(destination) {
			        var _this = _super.call(this, destination) || this;
			        _this.hasCompleted = false;
			        _this.hasSubscription = false;
			        return _this;
			    }
			    SwitchFirstSubscriber.prototype._next = function (value) {
			        if (!this.hasSubscription) {
			            this.hasSubscription = true;
			            this.add(innerSubscribe_1$c.innerSubscribe(value, new innerSubscribe_1$c.SimpleInnerSubscriber(this)));
			        }
			    };
			    SwitchFirstSubscriber.prototype._complete = function () {
			        this.hasCompleted = true;
			        if (!this.hasSubscription) {
			            this.destination.complete();
			        }
			    };
			    SwitchFirstSubscriber.prototype.notifyComplete = function () {
			        this.hasSubscription = false;
			        if (this.hasCompleted) {
			            this.destination.complete();
			        }
			    };
			    return SwitchFirstSubscriber;
			}(innerSubscribe_1$c.SimpleOuterSubscriber));

			var exhaustMap$1 = {};

			var __extends$B = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(exhaustMap$1, "__esModule", { value: true });
			var map_1$5 = map$1;
			var from_1$2 = from$1;
			var innerSubscribe_1$b = innerSubscribe$1;
			function exhaustMap(project, resultSelector) {
			    if (resultSelector) {
			        return function (source) { return source.pipe(exhaustMap(function (a, i) { return from_1$2.from(project(a, i)).pipe(map_1$5.map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
			    }
			    return function (source) {
			        return source.lift(new ExhaustMapOperator(project));
			    };
			}
			exhaustMap$1.exhaustMap = exhaustMap;
			var ExhaustMapOperator = (function () {
			    function ExhaustMapOperator(project) {
			        this.project = project;
			    }
			    ExhaustMapOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));
			    };
			    return ExhaustMapOperator;
			}());
			var ExhaustMapSubscriber = (function (_super) {
			    __extends$B(ExhaustMapSubscriber, _super);
			    function ExhaustMapSubscriber(destination, project) {
			        var _this = _super.call(this, destination) || this;
			        _this.project = project;
			        _this.hasSubscription = false;
			        _this.hasCompleted = false;
			        _this.index = 0;
			        return _this;
			    }
			    ExhaustMapSubscriber.prototype._next = function (value) {
			        if (!this.hasSubscription) {
			            this.tryNext(value);
			        }
			    };
			    ExhaustMapSubscriber.prototype.tryNext = function (value) {
			        var result;
			        var index = this.index++;
			        try {
			            result = this.project(value, index);
			        }
			        catch (err) {
			            this.destination.error(err);
			            return;
			        }
			        this.hasSubscription = true;
			        this._innerSub(result);
			    };
			    ExhaustMapSubscriber.prototype._innerSub = function (result) {
			        var innerSubscriber = new innerSubscribe_1$b.SimpleInnerSubscriber(this);
			        var destination = this.destination;
			        destination.add(innerSubscriber);
			        var innerSubscription = innerSubscribe_1$b.innerSubscribe(result, innerSubscriber);
			        if (innerSubscription !== innerSubscriber) {
			            destination.add(innerSubscription);
			        }
			    };
			    ExhaustMapSubscriber.prototype._complete = function () {
			        this.hasCompleted = true;
			        if (!this.hasSubscription) {
			            this.destination.complete();
			        }
			        this.unsubscribe();
			    };
			    ExhaustMapSubscriber.prototype.notifyNext = function (innerValue) {
			        this.destination.next(innerValue);
			    };
			    ExhaustMapSubscriber.prototype.notifyError = function (err) {
			        this.destination.error(err);
			    };
			    ExhaustMapSubscriber.prototype.notifyComplete = function () {
			        this.hasSubscription = false;
			        if (this.hasCompleted) {
			            this.destination.complete();
			        }
			    };
			    return ExhaustMapSubscriber;
			}(innerSubscribe_1$b.SimpleOuterSubscriber));

			var expand$1 = {};

			var __extends$A = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(expand$1, "__esModule", { value: true });
			var innerSubscribe_1$a = innerSubscribe$1;
			function expand(project, concurrent, scheduler) {
			    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
			    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
			    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };
			}
			expand$1.expand = expand;
			var ExpandOperator = (function () {
			    function ExpandOperator(project, concurrent, scheduler) {
			        this.project = project;
			        this.concurrent = concurrent;
			        this.scheduler = scheduler;
			    }
			    ExpandOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
			    };
			    return ExpandOperator;
			}());
			expand$1.ExpandOperator = ExpandOperator;
			var ExpandSubscriber = (function (_super) {
			    __extends$A(ExpandSubscriber, _super);
			    function ExpandSubscriber(destination, project, concurrent, scheduler) {
			        var _this = _super.call(this, destination) || this;
			        _this.project = project;
			        _this.concurrent = concurrent;
			        _this.scheduler = scheduler;
			        _this.index = 0;
			        _this.active = 0;
			        _this.hasCompleted = false;
			        if (concurrent < Number.POSITIVE_INFINITY) {
			            _this.buffer = [];
			        }
			        return _this;
			    }
			    ExpandSubscriber.dispatch = function (arg) {
			        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
			        subscriber.subscribeToProjection(result, value, index);
			    };
			    ExpandSubscriber.prototype._next = function (value) {
			        var destination = this.destination;
			        if (destination.closed) {
			            this._complete();
			            return;
			        }
			        var index = this.index++;
			        if (this.active < this.concurrent) {
			            destination.next(value);
			            try {
			                var project = this.project;
			                var result = project(value, index);
			                if (!this.scheduler) {
			                    this.subscribeToProjection(result, value, index);
			                }
			                else {
			                    var state = { subscriber: this, result: result, value: value, index: index };
			                    var destination_1 = this.destination;
			                    destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
			                }
			            }
			            catch (e) {
			                destination.error(e);
			            }
			        }
			        else {
			            this.buffer.push(value);
			        }
			    };
			    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
			        this.active++;
			        var destination = this.destination;
			        destination.add(innerSubscribe_1$a.innerSubscribe(result, new innerSubscribe_1$a.SimpleInnerSubscriber(this)));
			    };
			    ExpandSubscriber.prototype._complete = function () {
			        this.hasCompleted = true;
			        if (this.hasCompleted && this.active === 0) {
			            this.destination.complete();
			        }
			        this.unsubscribe();
			    };
			    ExpandSubscriber.prototype.notifyNext = function (innerValue) {
			        this._next(innerValue);
			    };
			    ExpandSubscriber.prototype.notifyComplete = function () {
			        var buffer = this.buffer;
			        this.active--;
			        if (buffer && buffer.length > 0) {
			            this._next(buffer.shift());
			        }
			        if (this.hasCompleted && this.active === 0) {
			            this.destination.complete();
			        }
			    };
			    return ExpandSubscriber;
			}(innerSubscribe_1$a.SimpleOuterSubscriber));
			expand$1.ExpandSubscriber = ExpandSubscriber;

			var finalize$1 = {};

			var __extends$z = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(finalize$1, "__esModule", { value: true });
			var Subscriber_1$l = Subscriber$1;
			var Subscription_1$1 = Subscription$1;
			function finalize(callback) {
			    return function (source) { return source.lift(new FinallyOperator(callback)); };
			}
			finalize$1.finalize = finalize;
			var FinallyOperator = (function () {
			    function FinallyOperator(callback) {
			        this.callback = callback;
			    }
			    FinallyOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new FinallySubscriber(subscriber, this.callback));
			    };
			    return FinallyOperator;
			}());
			var FinallySubscriber = (function (_super) {
			    __extends$z(FinallySubscriber, _super);
			    function FinallySubscriber(destination, callback) {
			        var _this = _super.call(this, destination) || this;
			        _this.add(new Subscription_1$1.Subscription(callback));
			        return _this;
			    }
			    return FinallySubscriber;
			}(Subscriber_1$l.Subscriber));

			var find$1 = {};

			var __extends$y = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(find$1, "__esModule", { value: true });
			var Subscriber_1$k = Subscriber$1;
			function find(predicate, thisArg) {
			    if (typeof predicate !== 'function') {
			        throw new TypeError('predicate is not a function');
			    }
			    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };
			}
			find$1.find = find;
			var FindValueOperator = (function () {
			    function FindValueOperator(predicate, source, yieldIndex, thisArg) {
			        this.predicate = predicate;
			        this.source = source;
			        this.yieldIndex = yieldIndex;
			        this.thisArg = thisArg;
			    }
			    FindValueOperator.prototype.call = function (observer, source) {
			        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
			    };
			    return FindValueOperator;
			}());
			find$1.FindValueOperator = FindValueOperator;
			var FindValueSubscriber = (function (_super) {
			    __extends$y(FindValueSubscriber, _super);
			    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
			        var _this = _super.call(this, destination) || this;
			        _this.predicate = predicate;
			        _this.source = source;
			        _this.yieldIndex = yieldIndex;
			        _this.thisArg = thisArg;
			        _this.index = 0;
			        return _this;
			    }
			    FindValueSubscriber.prototype.notifyComplete = function (value) {
			        var destination = this.destination;
			        destination.next(value);
			        destination.complete();
			        this.unsubscribe();
			    };
			    FindValueSubscriber.prototype._next = function (value) {
			        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
			        var index = this.index++;
			        try {
			            var result = predicate.call(thisArg || this, value, index, this.source);
			            if (result) {
			                this.notifyComplete(this.yieldIndex ? index : value);
			            }
			        }
			        catch (err) {
			            this.destination.error(err);
			        }
			    };
			    FindValueSubscriber.prototype._complete = function () {
			        this.notifyComplete(this.yieldIndex ? -1 : undefined);
			    };
			    return FindValueSubscriber;
			}(Subscriber_1$k.Subscriber));
			find$1.FindValueSubscriber = FindValueSubscriber;

			var findIndex$1 = {};

			Object.defineProperty(findIndex$1, "__esModule", { value: true });
			var find_1$1 = find$1;
			function findIndex(predicate, thisArg) {
			    return function (source) { return source.lift(new find_1$1.FindValueOperator(predicate, source, true, thisArg)); };
			}
			findIndex$1.findIndex = findIndex;

			var first$1 = {};

			Object.defineProperty(first$1, "__esModule", { value: true });
			var EmptyError_1$2 = EmptyError;
			var filter_1$3 = filter$3;
			var take_1$1 = take$1;
			var defaultIfEmpty_1$3 = defaultIfEmpty$1;
			var throwIfEmpty_1$2 = throwIfEmpty$1;
			var identity_1$2 = identity$1;
			function first(predicate, defaultValue) {
			    var hasDefaultValue = arguments.length >= 2;
			    return function (source) { return source.pipe(predicate ? filter_1$3.filter(function (v, i) { return predicate(v, i, source); }) : identity_1$2.identity, take_1$1.take(1), hasDefaultValue ? defaultIfEmpty_1$3.defaultIfEmpty(defaultValue) : throwIfEmpty_1$2.throwIfEmpty(function () { return new EmptyError_1$2.EmptyError(); })); };
			}
			first$1.first = first;

			var ignoreElements$1 = {};

			var __extends$x = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(ignoreElements$1, "__esModule", { value: true });
			var Subscriber_1$j = Subscriber$1;
			function ignoreElements() {
			    return function ignoreElementsOperatorFunction(source) {
			        return source.lift(new IgnoreElementsOperator());
			    };
			}
			ignoreElements$1.ignoreElements = ignoreElements;
			var IgnoreElementsOperator = (function () {
			    function IgnoreElementsOperator() {
			    }
			    IgnoreElementsOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new IgnoreElementsSubscriber(subscriber));
			    };
			    return IgnoreElementsOperator;
			}());
			var IgnoreElementsSubscriber = (function (_super) {
			    __extends$x(IgnoreElementsSubscriber, _super);
			    function IgnoreElementsSubscriber() {
			        return _super !== null && _super.apply(this, arguments) || this;
			    }
			    IgnoreElementsSubscriber.prototype._next = function (unused) {
			    };
			    return IgnoreElementsSubscriber;
			}(Subscriber_1$j.Subscriber));

			var isEmpty$1 = {};

			var __extends$w = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(isEmpty$1, "__esModule", { value: true });
			var Subscriber_1$i = Subscriber$1;
			function isEmpty() {
			    return function (source) { return source.lift(new IsEmptyOperator()); };
			}
			isEmpty$1.isEmpty = isEmpty;
			var IsEmptyOperator = (function () {
			    function IsEmptyOperator() {
			    }
			    IsEmptyOperator.prototype.call = function (observer, source) {
			        return source.subscribe(new IsEmptySubscriber(observer));
			    };
			    return IsEmptyOperator;
			}());
			var IsEmptySubscriber = (function (_super) {
			    __extends$w(IsEmptySubscriber, _super);
			    function IsEmptySubscriber(destination) {
			        return _super.call(this, destination) || this;
			    }
			    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
			        var destination = this.destination;
			        destination.next(isEmpty);
			        destination.complete();
			    };
			    IsEmptySubscriber.prototype._next = function (value) {
			        this.notifyComplete(false);
			    };
			    IsEmptySubscriber.prototype._complete = function () {
			        this.notifyComplete(true);
			    };
			    return IsEmptySubscriber;
			}(Subscriber_1$i.Subscriber));

			var last$1 = {};

			var takeLast$1 = {};

			var __extends$v = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(takeLast$1, "__esModule", { value: true });
			var Subscriber_1$h = Subscriber$1;
			var ArgumentOutOfRangeError_1$1 = ArgumentOutOfRangeError;
			var empty_1$1 = empty;
			function takeLast(count) {
			    return function takeLastOperatorFunction(source) {
			        if (count === 0) {
			            return empty_1$1.empty();
			        }
			        else {
			            return source.lift(new TakeLastOperator(count));
			        }
			    };
			}
			takeLast$1.takeLast = takeLast;
			var TakeLastOperator = (function () {
			    function TakeLastOperator(total) {
			        this.total = total;
			        if (this.total < 0) {
			            throw new ArgumentOutOfRangeError_1$1.ArgumentOutOfRangeError;
			        }
			    }
			    TakeLastOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
			    };
			    return TakeLastOperator;
			}());
			var TakeLastSubscriber = (function (_super) {
			    __extends$v(TakeLastSubscriber, _super);
			    function TakeLastSubscriber(destination, total) {
			        var _this = _super.call(this, destination) || this;
			        _this.total = total;
			        _this.ring = new Array();
			        _this.count = 0;
			        return _this;
			    }
			    TakeLastSubscriber.prototype._next = function (value) {
			        var ring = this.ring;
			        var total = this.total;
			        var count = this.count++;
			        if (ring.length < total) {
			            ring.push(value);
			        }
			        else {
			            var index = count % total;
			            ring[index] = value;
			        }
			    };
			    TakeLastSubscriber.prototype._complete = function () {
			        var destination = this.destination;
			        var count = this.count;
			        if (count > 0) {
			            var total = this.count >= this.total ? this.total : this.count;
			            var ring = this.ring;
			            for (var i = 0; i < total; i++) {
			                var idx = (count++) % total;
			                destination.next(ring[idx]);
			            }
			        }
			        destination.complete();
			    };
			    return TakeLastSubscriber;
			}(Subscriber_1$h.Subscriber));

			Object.defineProperty(last$1, "__esModule", { value: true });
			var EmptyError_1$1 = EmptyError;
			var filter_1$2 = filter$3;
			var takeLast_1$2 = takeLast$1;
			var throwIfEmpty_1$1 = throwIfEmpty$1;
			var defaultIfEmpty_1$2 = defaultIfEmpty$1;
			var identity_1$1 = identity$1;
			function last(predicate, defaultValue) {
			    var hasDefaultValue = arguments.length >= 2;
			    return function (source) { return source.pipe(predicate ? filter_1$2.filter(function (v, i) { return predicate(v, i, source); }) : identity_1$1.identity, takeLast_1$2.takeLast(1), hasDefaultValue ? defaultIfEmpty_1$2.defaultIfEmpty(defaultValue) : throwIfEmpty_1$1.throwIfEmpty(function () { return new EmptyError_1$1.EmptyError(); })); };
			}
			last$1.last = last;

			var mapTo$1 = {};

			var __extends$u = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(mapTo$1, "__esModule", { value: true });
			var Subscriber_1$g = Subscriber$1;
			function mapTo(value) {
			    return function (source) { return source.lift(new MapToOperator(value)); };
			}
			mapTo$1.mapTo = mapTo;
			var MapToOperator = (function () {
			    function MapToOperator(value) {
			        this.value = value;
			    }
			    MapToOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new MapToSubscriber(subscriber, this.value));
			    };
			    return MapToOperator;
			}());
			var MapToSubscriber = (function (_super) {
			    __extends$u(MapToSubscriber, _super);
			    function MapToSubscriber(destination, value) {
			        var _this = _super.call(this, destination) || this;
			        _this.value = value;
			        return _this;
			    }
			    MapToSubscriber.prototype._next = function (x) {
			        this.destination.next(this.value);
			    };
			    return MapToSubscriber;
			}(Subscriber_1$g.Subscriber));

			var materialize$1 = {};

			var __extends$t = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(materialize$1, "__esModule", { value: true });
			var Subscriber_1$f = Subscriber$1;
			var Notification_1 = Notification;
			function materialize() {
			    return function materializeOperatorFunction(source) {
			        return source.lift(new MaterializeOperator());
			    };
			}
			materialize$1.materialize = materialize;
			var MaterializeOperator = (function () {
			    function MaterializeOperator() {
			    }
			    MaterializeOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new MaterializeSubscriber(subscriber));
			    };
			    return MaterializeOperator;
			}());
			var MaterializeSubscriber = (function (_super) {
			    __extends$t(MaterializeSubscriber, _super);
			    function MaterializeSubscriber(destination) {
			        return _super.call(this, destination) || this;
			    }
			    MaterializeSubscriber.prototype._next = function (value) {
			        this.destination.next(Notification_1.Notification.createNext(value));
			    };
			    MaterializeSubscriber.prototype._error = function (err) {
			        var destination = this.destination;
			        destination.next(Notification_1.Notification.createError(err));
			        destination.complete();
			    };
			    MaterializeSubscriber.prototype._complete = function () {
			        var destination = this.destination;
			        destination.next(Notification_1.Notification.createComplete());
			        destination.complete();
			    };
			    return MaterializeSubscriber;
			}(Subscriber_1$f.Subscriber));

			var max$1 = {};

			var reduce$1 = {};

			var scan$1 = {};

			var __extends$s = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(scan$1, "__esModule", { value: true });
			var Subscriber_1$e = Subscriber$1;
			function scan(accumulator, seed) {
			    var hasSeed = false;
			    if (arguments.length >= 2) {
			        hasSeed = true;
			    }
			    return function scanOperatorFunction(source) {
			        return source.lift(new ScanOperator(accumulator, seed, hasSeed));
			    };
			}
			scan$1.scan = scan;
			var ScanOperator = (function () {
			    function ScanOperator(accumulator, seed, hasSeed) {
			        if (hasSeed === void 0) { hasSeed = false; }
			        this.accumulator = accumulator;
			        this.seed = seed;
			        this.hasSeed = hasSeed;
			    }
			    ScanOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
			    };
			    return ScanOperator;
			}());
			var ScanSubscriber = (function (_super) {
			    __extends$s(ScanSubscriber, _super);
			    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
			        var _this = _super.call(this, destination) || this;
			        _this.accumulator = accumulator;
			        _this._seed = _seed;
			        _this.hasSeed = hasSeed;
			        _this.index = 0;
			        return _this;
			    }
			    Object.defineProperty(ScanSubscriber.prototype, "seed", {
			        get: function () {
			            return this._seed;
			        },
			        set: function (value) {
			            this.hasSeed = true;
			            this._seed = value;
			        },
			        enumerable: true,
			        configurable: true
			    });
			    ScanSubscriber.prototype._next = function (value) {
			        if (!this.hasSeed) {
			            this.seed = value;
			            this.destination.next(value);
			        }
			        else {
			            return this._tryNext(value);
			        }
			    };
			    ScanSubscriber.prototype._tryNext = function (value) {
			        var index = this.index++;
			        var result;
			        try {
			            result = this.accumulator(this.seed, value, index);
			        }
			        catch (err) {
			            this.destination.error(err);
			        }
			        this.seed = result;
			        this.destination.next(result);
			    };
			    return ScanSubscriber;
			}(Subscriber_1$e.Subscriber));

			Object.defineProperty(reduce$1, "__esModule", { value: true });
			var scan_1$2 = scan$1;
			var takeLast_1$1 = takeLast$1;
			var defaultIfEmpty_1$1 = defaultIfEmpty$1;
			var pipe_1 = pipe$1;
			function reduce(accumulator, seed) {
			    if (arguments.length >= 2) {
			        return function reduceOperatorFunctionWithSeed(source) {
			            return pipe_1.pipe(scan_1$2.scan(accumulator, seed), takeLast_1$1.takeLast(1), defaultIfEmpty_1$1.defaultIfEmpty(seed))(source);
			        };
			    }
			    return function reduceOperatorFunction(source) {
			        return pipe_1.pipe(scan_1$2.scan(function (acc, value, index) { return accumulator(acc, value, index + 1); }), takeLast_1$1.takeLast(1))(source);
			    };
			}
			reduce$1.reduce = reduce;

			Object.defineProperty(max$1, "__esModule", { value: true });
			var reduce_1$3 = reduce$1;
			function max(comparer) {
			    var max = (typeof comparer === 'function')
			        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }
			        : function (x, y) { return x > y ? x : y; };
			    return reduce_1$3.reduce(max);
			}
			max$1.max = max;

			var merge$1 = {};

			Object.defineProperty(merge$1, "__esModule", { value: true });
			var merge_1$1 = merge$3;
			function merge() {
			    var observables = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        observables[_i] = arguments[_i];
			    }
			    return function (source) { return source.lift.call(merge_1$1.merge.apply(void 0, [source].concat(observables))); };
			}
			merge$1.merge = merge;

			var mergeMapTo$1 = {};

			Object.defineProperty(mergeMapTo$1, "__esModule", { value: true });
			var mergeMap_1$1 = mergeMap$1;
			function mergeMapTo(innerObservable, resultSelector, concurrent) {
			    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
			    if (typeof resultSelector === 'function') {
			        return mergeMap_1$1.mergeMap(function () { return innerObservable; }, resultSelector, concurrent);
			    }
			    if (typeof resultSelector === 'number') {
			        concurrent = resultSelector;
			    }
			    return mergeMap_1$1.mergeMap(function () { return innerObservable; }, concurrent);
			}
			mergeMapTo$1.mergeMapTo = mergeMapTo;

			var mergeScan$1 = {};

			var __extends$r = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(mergeScan$1, "__esModule", { value: true });
			var innerSubscribe_1$9 = innerSubscribe$1;
			function mergeScan(accumulator, seed, concurrent) {
			    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
			    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };
			}
			mergeScan$1.mergeScan = mergeScan;
			var MergeScanOperator = (function () {
			    function MergeScanOperator(accumulator, seed, concurrent) {
			        this.accumulator = accumulator;
			        this.seed = seed;
			        this.concurrent = concurrent;
			    }
			    MergeScanOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
			    };
			    return MergeScanOperator;
			}());
			mergeScan$1.MergeScanOperator = MergeScanOperator;
			var MergeScanSubscriber = (function (_super) {
			    __extends$r(MergeScanSubscriber, _super);
			    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
			        var _this = _super.call(this, destination) || this;
			        _this.accumulator = accumulator;
			        _this.acc = acc;
			        _this.concurrent = concurrent;
			        _this.hasValue = false;
			        _this.hasCompleted = false;
			        _this.buffer = [];
			        _this.active = 0;
			        _this.index = 0;
			        return _this;
			    }
			    MergeScanSubscriber.prototype._next = function (value) {
			        if (this.active < this.concurrent) {
			            var index = this.index++;
			            var destination = this.destination;
			            var ish = void 0;
			            try {
			                var accumulator = this.accumulator;
			                ish = accumulator(this.acc, value, index);
			            }
			            catch (e) {
			                return destination.error(e);
			            }
			            this.active++;
			            this._innerSub(ish);
			        }
			        else {
			            this.buffer.push(value);
			        }
			    };
			    MergeScanSubscriber.prototype._innerSub = function (ish) {
			        var innerSubscriber = new innerSubscribe_1$9.SimpleInnerSubscriber(this);
			        var destination = this.destination;
			        destination.add(innerSubscriber);
			        var innerSubscription = innerSubscribe_1$9.innerSubscribe(ish, innerSubscriber);
			        if (innerSubscription !== innerSubscriber) {
			            destination.add(innerSubscription);
			        }
			    };
			    MergeScanSubscriber.prototype._complete = function () {
			        this.hasCompleted = true;
			        if (this.active === 0 && this.buffer.length === 0) {
			            if (this.hasValue === false) {
			                this.destination.next(this.acc);
			            }
			            this.destination.complete();
			        }
			        this.unsubscribe();
			    };
			    MergeScanSubscriber.prototype.notifyNext = function (innerValue) {
			        var destination = this.destination;
			        this.acc = innerValue;
			        this.hasValue = true;
			        destination.next(innerValue);
			    };
			    MergeScanSubscriber.prototype.notifyComplete = function () {
			        var buffer = this.buffer;
			        this.active--;
			        if (buffer.length > 0) {
			            this._next(buffer.shift());
			        }
			        else if (this.active === 0 && this.hasCompleted) {
			            if (this.hasValue === false) {
			                this.destination.next(this.acc);
			            }
			            this.destination.complete();
			        }
			    };
			    return MergeScanSubscriber;
			}(innerSubscribe_1$9.SimpleOuterSubscriber));
			mergeScan$1.MergeScanSubscriber = MergeScanSubscriber;

			var min$1 = {};

			Object.defineProperty(min$1, "__esModule", { value: true });
			var reduce_1$2 = reduce$1;
			function min(comparer) {
			    var min = (typeof comparer === 'function')
			        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }
			        : function (x, y) { return x < y ? x : y; };
			    return reduce_1$2.reduce(min);
			}
			min$1.min = min;

			var multicast$1 = {};

			Object.defineProperty(multicast$1, "__esModule", { value: true });
			var ConnectableObservable_1 = ConnectableObservable$1;
			function multicast(subjectOrSubjectFactory, selector) {
			    return function multicastOperatorFunction(source) {
			        var subjectFactory;
			        if (typeof subjectOrSubjectFactory === 'function') {
			            subjectFactory = subjectOrSubjectFactory;
			        }
			        else {
			            subjectFactory = function subjectFactory() {
			                return subjectOrSubjectFactory;
			            };
			        }
			        if (typeof selector === 'function') {
			            return source.lift(new MulticastOperator(subjectFactory, selector));
			        }
			        var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);
			        connectable.source = source;
			        connectable.subjectFactory = subjectFactory;
			        return connectable;
			    };
			}
			multicast$1.multicast = multicast;
			var MulticastOperator = (function () {
			    function MulticastOperator(subjectFactory, selector) {
			        this.subjectFactory = subjectFactory;
			        this.selector = selector;
			    }
			    MulticastOperator.prototype.call = function (subscriber, source) {
			        var selector = this.selector;
			        var subject = this.subjectFactory();
			        var subscription = selector(subject).subscribe(subscriber);
			        subscription.add(source.subscribe(subject));
			        return subscription;
			    };
			    return MulticastOperator;
			}());
			multicast$1.MulticastOperator = MulticastOperator;

			var onErrorResumeNext$1 = {};

			var __extends$q = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(onErrorResumeNext$1, "__esModule", { value: true });
			var from_1$1 = from$1;
			var isArray_1$1 = isArray;
			var innerSubscribe_1$8 = innerSubscribe$1;
			function onErrorResumeNext() {
			    var nextSources = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        nextSources[_i] = arguments[_i];
			    }
			    if (nextSources.length === 1 && isArray_1$1.isArray(nextSources[0])) {
			        nextSources = nextSources[0];
			    }
			    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };
			}
			onErrorResumeNext$1.onErrorResumeNext = onErrorResumeNext;
			function onErrorResumeNextStatic() {
			    var nextSources = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        nextSources[_i] = arguments[_i];
			    }
			    var source = undefined;
			    if (nextSources.length === 1 && isArray_1$1.isArray(nextSources[0])) {
			        nextSources = nextSources[0];
			    }
			    source = nextSources.shift();
			    return from_1$1.from(source).lift(new OnErrorResumeNextOperator(nextSources));
			}
			onErrorResumeNext$1.onErrorResumeNextStatic = onErrorResumeNextStatic;
			var OnErrorResumeNextOperator = (function () {
			    function OnErrorResumeNextOperator(nextSources) {
			        this.nextSources = nextSources;
			    }
			    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
			    };
			    return OnErrorResumeNextOperator;
			}());
			var OnErrorResumeNextSubscriber = (function (_super) {
			    __extends$q(OnErrorResumeNextSubscriber, _super);
			    function OnErrorResumeNextSubscriber(destination, nextSources) {
			        var _this = _super.call(this, destination) || this;
			        _this.destination = destination;
			        _this.nextSources = nextSources;
			        return _this;
			    }
			    OnErrorResumeNextSubscriber.prototype.notifyError = function () {
			        this.subscribeToNextSource();
			    };
			    OnErrorResumeNextSubscriber.prototype.notifyComplete = function () {
			        this.subscribeToNextSource();
			    };
			    OnErrorResumeNextSubscriber.prototype._error = function (err) {
			        this.subscribeToNextSource();
			        this.unsubscribe();
			    };
			    OnErrorResumeNextSubscriber.prototype._complete = function () {
			        this.subscribeToNextSource();
			        this.unsubscribe();
			    };
			    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
			        var next = this.nextSources.shift();
			        if (!!next) {
			            var innerSubscriber = new innerSubscribe_1$8.SimpleInnerSubscriber(this);
			            var destination = this.destination;
			            destination.add(innerSubscriber);
			            var innerSubscription = innerSubscribe_1$8.innerSubscribe(next, innerSubscriber);
			            if (innerSubscription !== innerSubscriber) {
			                destination.add(innerSubscription);
			            }
			        }
			        else {
			            this.destination.complete();
			        }
			    };
			    return OnErrorResumeNextSubscriber;
			}(innerSubscribe_1$8.SimpleOuterSubscriber));

			var pairwise$1 = {};

			var __extends$p = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(pairwise$1, "__esModule", { value: true });
			var Subscriber_1$d = Subscriber$1;
			function pairwise() {
			    return function (source) { return source.lift(new PairwiseOperator()); };
			}
			pairwise$1.pairwise = pairwise;
			var PairwiseOperator = (function () {
			    function PairwiseOperator() {
			    }
			    PairwiseOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new PairwiseSubscriber(subscriber));
			    };
			    return PairwiseOperator;
			}());
			var PairwiseSubscriber = (function (_super) {
			    __extends$p(PairwiseSubscriber, _super);
			    function PairwiseSubscriber(destination) {
			        var _this = _super.call(this, destination) || this;
			        _this.hasPrev = false;
			        return _this;
			    }
			    PairwiseSubscriber.prototype._next = function (value) {
			        var pair;
			        if (this.hasPrev) {
			            pair = [this.prev, value];
			        }
			        else {
			            this.hasPrev = true;
			        }
			        this.prev = value;
			        if (pair) {
			            this.destination.next(pair);
			        }
			    };
			    return PairwiseSubscriber;
			}(Subscriber_1$d.Subscriber));

			var partition$1 = {};

			Object.defineProperty(partition$1, "__esModule", { value: true });
			var not_1 = not$1;
			var filter_1$1 = filter$3;
			function partition(predicate, thisArg) {
			    return function (source) { return [
			        filter_1$1.filter(predicate, thisArg)(source),
			        filter_1$1.filter(not_1.not(predicate, thisArg))(source)
			    ]; };
			}
			partition$1.partition = partition;

			var pluck$1 = {};

			Object.defineProperty(pluck$1, "__esModule", { value: true });
			var map_1$4 = map$1;
			function pluck() {
			    var properties = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        properties[_i] = arguments[_i];
			    }
			    var length = properties.length;
			    if (length === 0) {
			        throw new Error('list of properties cannot be empty.');
			    }
			    return function (source) { return map_1$4.map(plucker(properties, length))(source); };
			}
			pluck$1.pluck = pluck;
			function plucker(props, length) {
			    var mapper = function (x) {
			        var currentProp = x;
			        for (var i = 0; i < length; i++) {
			            var p = currentProp != null ? currentProp[props[i]] : undefined;
			            if (p !== void 0) {
			                currentProp = p;
			            }
			            else {
			                return undefined;
			            }
			        }
			        return currentProp;
			    };
			    return mapper;
			}

			var publish$1 = {};

			Object.defineProperty(publish$1, "__esModule", { value: true });
			var Subject_1$8 = Subject$1;
			var multicast_1$5 = multicast$1;
			function publish(selector) {
			    return selector ?
			        multicast_1$5.multicast(function () { return new Subject_1$8.Subject(); }, selector) :
			        multicast_1$5.multicast(new Subject_1$8.Subject());
			}
			publish$1.publish = publish;

			var publishBehavior$1 = {};

			Object.defineProperty(publishBehavior$1, "__esModule", { value: true });
			var BehaviorSubject_1 = BehaviorSubject$1;
			var multicast_1$4 = multicast$1;
			function publishBehavior(value) {
			    return function (source) { return multicast_1$4.multicast(new BehaviorSubject_1.BehaviorSubject(value))(source); };
			}
			publishBehavior$1.publishBehavior = publishBehavior;

			var publishLast$1 = {};

			Object.defineProperty(publishLast$1, "__esModule", { value: true });
			var AsyncSubject_1 = AsyncSubject$1;
			var multicast_1$3 = multicast$1;
			function publishLast() {
			    return function (source) { return multicast_1$3.multicast(new AsyncSubject_1.AsyncSubject())(source); };
			}
			publishLast$1.publishLast = publishLast;

			var publishReplay$1 = {};

			Object.defineProperty(publishReplay$1, "__esModule", { value: true });
			var ReplaySubject_1$1 = ReplaySubject$1;
			var multicast_1$2 = multicast$1;
			function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {
			    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {
			        scheduler = selectorOrScheduler;
			    }
			    var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;
			    var subject = new ReplaySubject_1$1.ReplaySubject(bufferSize, windowTime, scheduler);
			    return function (source) { return multicast_1$2.multicast(function () { return subject; }, selector)(source); };
			}
			publishReplay$1.publishReplay = publishReplay;

			var race$1 = {};

			Object.defineProperty(race$1, "__esModule", { value: true });
			var isArray_1 = isArray;
			var race_1$1 = race$3;
			function race() {
			    var observables = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        observables[_i] = arguments[_i];
			    }
			    return function raceOperatorFunction(source) {
			        if (observables.length === 1 && isArray_1.isArray(observables[0])) {
			            observables = observables[0];
			        }
			        return source.lift.call(race_1$1.race.apply(void 0, [source].concat(observables)));
			    };
			}
			race$1.race = race;

			var repeat$1 = {};

			var __extends$o = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(repeat$1, "__esModule", { value: true });
			var Subscriber_1$c = Subscriber$1;
			var empty_1 = empty;
			function repeat(count) {
			    if (count === void 0) { count = -1; }
			    return function (source) {
			        if (count === 0) {
			            return empty_1.empty();
			        }
			        else if (count < 0) {
			            return source.lift(new RepeatOperator(-1, source));
			        }
			        else {
			            return source.lift(new RepeatOperator(count - 1, source));
			        }
			    };
			}
			repeat$1.repeat = repeat;
			var RepeatOperator = (function () {
			    function RepeatOperator(count, source) {
			        this.count = count;
			        this.source = source;
			    }
			    RepeatOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
			    };
			    return RepeatOperator;
			}());
			var RepeatSubscriber = (function (_super) {
			    __extends$o(RepeatSubscriber, _super);
			    function RepeatSubscriber(destination, count, source) {
			        var _this = _super.call(this, destination) || this;
			        _this.count = count;
			        _this.source = source;
			        return _this;
			    }
			    RepeatSubscriber.prototype.complete = function () {
			        if (!this.isStopped) {
			            var _a = this, source = _a.source, count = _a.count;
			            if (count === 0) {
			                return _super.prototype.complete.call(this);
			            }
			            else if (count > -1) {
			                this.count = count - 1;
			            }
			            source.subscribe(this._unsubscribeAndRecycle());
			        }
			    };
			    return RepeatSubscriber;
			}(Subscriber_1$c.Subscriber));

			var repeatWhen$1 = {};

			var __extends$n = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(repeatWhen$1, "__esModule", { value: true });
			var Subject_1$7 = Subject$1;
			var innerSubscribe_1$7 = innerSubscribe$1;
			function repeatWhen(notifier) {
			    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };
			}
			repeatWhen$1.repeatWhen = repeatWhen;
			var RepeatWhenOperator = (function () {
			    function RepeatWhenOperator(notifier) {
			        this.notifier = notifier;
			    }
			    RepeatWhenOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
			    };
			    return RepeatWhenOperator;
			}());
			var RepeatWhenSubscriber = (function (_super) {
			    __extends$n(RepeatWhenSubscriber, _super);
			    function RepeatWhenSubscriber(destination, notifier, source) {
			        var _this = _super.call(this, destination) || this;
			        _this.notifier = notifier;
			        _this.source = source;
			        _this.sourceIsBeingSubscribedTo = true;
			        return _this;
			    }
			    RepeatWhenSubscriber.prototype.notifyNext = function () {
			        this.sourceIsBeingSubscribedTo = true;
			        this.source.subscribe(this);
			    };
			    RepeatWhenSubscriber.prototype.notifyComplete = function () {
			        if (this.sourceIsBeingSubscribedTo === false) {
			            return _super.prototype.complete.call(this);
			        }
			    };
			    RepeatWhenSubscriber.prototype.complete = function () {
			        this.sourceIsBeingSubscribedTo = false;
			        if (!this.isStopped) {
			            if (!this.retries) {
			                this.subscribeToRetries();
			            }
			            if (!this.retriesSubscription || this.retriesSubscription.closed) {
			                return _super.prototype.complete.call(this);
			            }
			            this._unsubscribeAndRecycle();
			            this.notifications.next(undefined);
			        }
			    };
			    RepeatWhenSubscriber.prototype._unsubscribe = function () {
			        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
			        if (notifications) {
			            notifications.unsubscribe();
			            this.notifications = undefined;
			        }
			        if (retriesSubscription) {
			            retriesSubscription.unsubscribe();
			            this.retriesSubscription = undefined;
			        }
			        this.retries = undefined;
			    };
			    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
			        var _unsubscribe = this._unsubscribe;
			        this._unsubscribe = null;
			        _super.prototype._unsubscribeAndRecycle.call(this);
			        this._unsubscribe = _unsubscribe;
			        return this;
			    };
			    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
			        this.notifications = new Subject_1$7.Subject();
			        var retries;
			        try {
			            var notifier = this.notifier;
			            retries = notifier(this.notifications);
			        }
			        catch (e) {
			            return _super.prototype.complete.call(this);
			        }
			        this.retries = retries;
			        this.retriesSubscription = innerSubscribe_1$7.innerSubscribe(retries, new innerSubscribe_1$7.SimpleInnerSubscriber(this));
			    };
			    return RepeatWhenSubscriber;
			}(innerSubscribe_1$7.SimpleOuterSubscriber));

			var retry$1 = {};

			var __extends$m = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(retry$1, "__esModule", { value: true });
			var Subscriber_1$b = Subscriber$1;
			function retry(count) {
			    if (count === void 0) { count = -1; }
			    return function (source) { return source.lift(new RetryOperator(count, source)); };
			}
			retry$1.retry = retry;
			var RetryOperator = (function () {
			    function RetryOperator(count, source) {
			        this.count = count;
			        this.source = source;
			    }
			    RetryOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
			    };
			    return RetryOperator;
			}());
			var RetrySubscriber = (function (_super) {
			    __extends$m(RetrySubscriber, _super);
			    function RetrySubscriber(destination, count, source) {
			        var _this = _super.call(this, destination) || this;
			        _this.count = count;
			        _this.source = source;
			        return _this;
			    }
			    RetrySubscriber.prototype.error = function (err) {
			        if (!this.isStopped) {
			            var _a = this, source = _a.source, count = _a.count;
			            if (count === 0) {
			                return _super.prototype.error.call(this, err);
			            }
			            else if (count > -1) {
			                this.count = count - 1;
			            }
			            source.subscribe(this._unsubscribeAndRecycle());
			        }
			    };
			    return RetrySubscriber;
			}(Subscriber_1$b.Subscriber));

			var retryWhen$1 = {};

			var __extends$l = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(retryWhen$1, "__esModule", { value: true });
			var Subject_1$6 = Subject$1;
			var innerSubscribe_1$6 = innerSubscribe$1;
			function retryWhen(notifier) {
			    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };
			}
			retryWhen$1.retryWhen = retryWhen;
			var RetryWhenOperator = (function () {
			    function RetryWhenOperator(notifier, source) {
			        this.notifier = notifier;
			        this.source = source;
			    }
			    RetryWhenOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
			    };
			    return RetryWhenOperator;
			}());
			var RetryWhenSubscriber = (function (_super) {
			    __extends$l(RetryWhenSubscriber, _super);
			    function RetryWhenSubscriber(destination, notifier, source) {
			        var _this = _super.call(this, destination) || this;
			        _this.notifier = notifier;
			        _this.source = source;
			        return _this;
			    }
			    RetryWhenSubscriber.prototype.error = function (err) {
			        if (!this.isStopped) {
			            var errors = this.errors;
			            var retries = this.retries;
			            var retriesSubscription = this.retriesSubscription;
			            if (!retries) {
			                errors = new Subject_1$6.Subject();
			                try {
			                    var notifier = this.notifier;
			                    retries = notifier(errors);
			                }
			                catch (e) {
			                    return _super.prototype.error.call(this, e);
			                }
			                retriesSubscription = innerSubscribe_1$6.innerSubscribe(retries, new innerSubscribe_1$6.SimpleInnerSubscriber(this));
			            }
			            else {
			                this.errors = undefined;
			                this.retriesSubscription = undefined;
			            }
			            this._unsubscribeAndRecycle();
			            this.errors = errors;
			            this.retries = retries;
			            this.retriesSubscription = retriesSubscription;
			            errors.next(err);
			        }
			    };
			    RetryWhenSubscriber.prototype._unsubscribe = function () {
			        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
			        if (errors) {
			            errors.unsubscribe();
			            this.errors = undefined;
			        }
			        if (retriesSubscription) {
			            retriesSubscription.unsubscribe();
			            this.retriesSubscription = undefined;
			        }
			        this.retries = undefined;
			    };
			    RetryWhenSubscriber.prototype.notifyNext = function () {
			        var _unsubscribe = this._unsubscribe;
			        this._unsubscribe = null;
			        this._unsubscribeAndRecycle();
			        this._unsubscribe = _unsubscribe;
			        this.source.subscribe(this);
			    };
			    return RetryWhenSubscriber;
			}(innerSubscribe_1$6.SimpleOuterSubscriber));

			var sample$1 = {};

			var __extends$k = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(sample$1, "__esModule", { value: true });
			var innerSubscribe_1$5 = innerSubscribe$1;
			function sample(notifier) {
			    return function (source) { return source.lift(new SampleOperator(notifier)); };
			}
			sample$1.sample = sample;
			var SampleOperator = (function () {
			    function SampleOperator(notifier) {
			        this.notifier = notifier;
			    }
			    SampleOperator.prototype.call = function (subscriber, source) {
			        var sampleSubscriber = new SampleSubscriber(subscriber);
			        var subscription = source.subscribe(sampleSubscriber);
			        subscription.add(innerSubscribe_1$5.innerSubscribe(this.notifier, new innerSubscribe_1$5.SimpleInnerSubscriber(sampleSubscriber)));
			        return subscription;
			    };
			    return SampleOperator;
			}());
			var SampleSubscriber = (function (_super) {
			    __extends$k(SampleSubscriber, _super);
			    function SampleSubscriber() {
			        var _this = _super !== null && _super.apply(this, arguments) || this;
			        _this.hasValue = false;
			        return _this;
			    }
			    SampleSubscriber.prototype._next = function (value) {
			        this.value = value;
			        this.hasValue = true;
			    };
			    SampleSubscriber.prototype.notifyNext = function () {
			        this.emitValue();
			    };
			    SampleSubscriber.prototype.notifyComplete = function () {
			        this.emitValue();
			    };
			    SampleSubscriber.prototype.emitValue = function () {
			        if (this.hasValue) {
			            this.hasValue = false;
			            this.destination.next(this.value);
			        }
			    };
			    return SampleSubscriber;
			}(innerSubscribe_1$5.SimpleOuterSubscriber));

			var sampleTime$1 = {};

			var __extends$j = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(sampleTime$1, "__esModule", { value: true });
			var Subscriber_1$a = Subscriber$1;
			var async_1$6 = async;
			function sampleTime(period, scheduler) {
			    if (scheduler === void 0) { scheduler = async_1$6.async; }
			    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };
			}
			sampleTime$1.sampleTime = sampleTime;
			var SampleTimeOperator = (function () {
			    function SampleTimeOperator(period, scheduler) {
			        this.period = period;
			        this.scheduler = scheduler;
			    }
			    SampleTimeOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
			    };
			    return SampleTimeOperator;
			}());
			var SampleTimeSubscriber = (function (_super) {
			    __extends$j(SampleTimeSubscriber, _super);
			    function SampleTimeSubscriber(destination, period, scheduler) {
			        var _this = _super.call(this, destination) || this;
			        _this.period = period;
			        _this.scheduler = scheduler;
			        _this.hasValue = false;
			        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));
			        return _this;
			    }
			    SampleTimeSubscriber.prototype._next = function (value) {
			        this.lastValue = value;
			        this.hasValue = true;
			    };
			    SampleTimeSubscriber.prototype.notifyNext = function () {
			        if (this.hasValue) {
			            this.hasValue = false;
			            this.destination.next(this.lastValue);
			        }
			    };
			    return SampleTimeSubscriber;
			}(Subscriber_1$a.Subscriber));
			function dispatchNotification(state) {
			    var subscriber = state.subscriber, period = state.period;
			    subscriber.notifyNext();
			    this.schedule(state, period);
			}

			var sequenceEqual$1 = {};

			var __extends$i = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(sequenceEqual$1, "__esModule", { value: true });
			var Subscriber_1$9 = Subscriber$1;
			function sequenceEqual(compareTo, comparator) {
			    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparator)); };
			}
			sequenceEqual$1.sequenceEqual = sequenceEqual;
			var SequenceEqualOperator = (function () {
			    function SequenceEqualOperator(compareTo, comparator) {
			        this.compareTo = compareTo;
			        this.comparator = comparator;
			    }
			    SequenceEqualOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));
			    };
			    return SequenceEqualOperator;
			}());
			sequenceEqual$1.SequenceEqualOperator = SequenceEqualOperator;
			var SequenceEqualSubscriber = (function (_super) {
			    __extends$i(SequenceEqualSubscriber, _super);
			    function SequenceEqualSubscriber(destination, compareTo, comparator) {
			        var _this = _super.call(this, destination) || this;
			        _this.compareTo = compareTo;
			        _this.comparator = comparator;
			        _this._a = [];
			        _this._b = [];
			        _this._oneComplete = false;
			        _this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));
			        return _this;
			    }
			    SequenceEqualSubscriber.prototype._next = function (value) {
			        if (this._oneComplete && this._b.length === 0) {
			            this.emit(false);
			        }
			        else {
			            this._a.push(value);
			            this.checkValues();
			        }
			    };
			    SequenceEqualSubscriber.prototype._complete = function () {
			        if (this._oneComplete) {
			            this.emit(this._a.length === 0 && this._b.length === 0);
			        }
			        else {
			            this._oneComplete = true;
			        }
			        this.unsubscribe();
			    };
			    SequenceEqualSubscriber.prototype.checkValues = function () {
			        var _c = this, _a = _c._a, _b = _c._b, comparator = _c.comparator;
			        while (_a.length > 0 && _b.length > 0) {
			            var a = _a.shift();
			            var b = _b.shift();
			            var areEqual = false;
			            try {
			                areEqual = comparator ? comparator(a, b) : a === b;
			            }
			            catch (e) {
			                this.destination.error(e);
			            }
			            if (!areEqual) {
			                this.emit(false);
			            }
			        }
			    };
			    SequenceEqualSubscriber.prototype.emit = function (value) {
			        var destination = this.destination;
			        destination.next(value);
			        destination.complete();
			    };
			    SequenceEqualSubscriber.prototype.nextB = function (value) {
			        if (this._oneComplete && this._a.length === 0) {
			            this.emit(false);
			        }
			        else {
			            this._b.push(value);
			            this.checkValues();
			        }
			    };
			    SequenceEqualSubscriber.prototype.completeB = function () {
			        if (this._oneComplete) {
			            this.emit(this._a.length === 0 && this._b.length === 0);
			        }
			        else {
			            this._oneComplete = true;
			        }
			    };
			    return SequenceEqualSubscriber;
			}(Subscriber_1$9.Subscriber));
			sequenceEqual$1.SequenceEqualSubscriber = SequenceEqualSubscriber;
			var SequenceEqualCompareToSubscriber = (function (_super) {
			    __extends$i(SequenceEqualCompareToSubscriber, _super);
			    function SequenceEqualCompareToSubscriber(destination, parent) {
			        var _this = _super.call(this, destination) || this;
			        _this.parent = parent;
			        return _this;
			    }
			    SequenceEqualCompareToSubscriber.prototype._next = function (value) {
			        this.parent.nextB(value);
			    };
			    SequenceEqualCompareToSubscriber.prototype._error = function (err) {
			        this.parent.error(err);
			        this.unsubscribe();
			    };
			    SequenceEqualCompareToSubscriber.prototype._complete = function () {
			        this.parent.completeB();
			        this.unsubscribe();
			    };
			    return SequenceEqualCompareToSubscriber;
			}(Subscriber_1$9.Subscriber));

			var share$1 = {};

			Object.defineProperty(share$1, "__esModule", { value: true });
			var multicast_1$1 = multicast$1;
			var refCount_1$1 = refCount$1;
			var Subject_1$5 = Subject$1;
			function shareSubjectFactory() {
			    return new Subject_1$5.Subject();
			}
			function share() {
			    return function (source) { return refCount_1$1.refCount()(multicast_1$1.multicast(shareSubjectFactory)(source)); };
			}
			share$1.share = share;

			var shareReplay$1 = {};

			Object.defineProperty(shareReplay$1, "__esModule", { value: true });
			var ReplaySubject_1 = ReplaySubject$1;
			function shareReplay(configOrBufferSize, windowTime, scheduler) {
			    var config;
			    if (configOrBufferSize && typeof configOrBufferSize === 'object') {
			        config = configOrBufferSize;
			    }
			    else {
			        config = {
			            bufferSize: configOrBufferSize,
			            windowTime: windowTime,
			            refCount: false,
			            scheduler: scheduler
			        };
			    }
			    return function (source) { return source.lift(shareReplayOperator(config)); };
			}
			shareReplay$1.shareReplay = shareReplay;
			function shareReplayOperator(_a) {
			    var _b = _a.bufferSize, bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b, _c = _a.windowTime, windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c, useRefCount = _a.refCount, scheduler = _a.scheduler;
			    var subject;
			    var refCount = 0;
			    var subscription;
			    var hasError = false;
			    var isComplete = false;
			    return function shareReplayOperation(source) {
			        refCount++;
			        var innerSub;
			        if (!subject || hasError) {
			            hasError = false;
			            subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);
			            innerSub = subject.subscribe(this);
			            subscription = source.subscribe({
			                next: function (value) { subject.next(value); },
			                error: function (err) {
			                    hasError = true;
			                    subject.error(err);
			                },
			                complete: function () {
			                    isComplete = true;
			                    subscription = undefined;
			                    subject.complete();
			                },
			            });
			        }
			        else {
			            innerSub = subject.subscribe(this);
			        }
			        this.add(function () {
			            refCount--;
			            innerSub.unsubscribe();
			            if (subscription && !isComplete && useRefCount && refCount === 0) {
			                subscription.unsubscribe();
			                subscription = undefined;
			                subject = undefined;
			            }
			        });
			    };
			}

			var single$1 = {};

			var __extends$h = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(single$1, "__esModule", { value: true });
			var Subscriber_1$8 = Subscriber$1;
			var EmptyError_1 = EmptyError;
			function single(predicate) {
			    return function (source) { return source.lift(new SingleOperator(predicate, source)); };
			}
			single$1.single = single;
			var SingleOperator = (function () {
			    function SingleOperator(predicate, source) {
			        this.predicate = predicate;
			        this.source = source;
			    }
			    SingleOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
			    };
			    return SingleOperator;
			}());
			var SingleSubscriber = (function (_super) {
			    __extends$h(SingleSubscriber, _super);
			    function SingleSubscriber(destination, predicate, source) {
			        var _this = _super.call(this, destination) || this;
			        _this.predicate = predicate;
			        _this.source = source;
			        _this.seenValue = false;
			        _this.index = 0;
			        return _this;
			    }
			    SingleSubscriber.prototype.applySingleValue = function (value) {
			        if (this.seenValue) {
			            this.destination.error('Sequence contains more than one element');
			        }
			        else {
			            this.seenValue = true;
			            this.singleValue = value;
			        }
			    };
			    SingleSubscriber.prototype._next = function (value) {
			        var index = this.index++;
			        if (this.predicate) {
			            this.tryNext(value, index);
			        }
			        else {
			            this.applySingleValue(value);
			        }
			    };
			    SingleSubscriber.prototype.tryNext = function (value, index) {
			        try {
			            if (this.predicate(value, index, this.source)) {
			                this.applySingleValue(value);
			            }
			        }
			        catch (err) {
			            this.destination.error(err);
			        }
			    };
			    SingleSubscriber.prototype._complete = function () {
			        var destination = this.destination;
			        if (this.index > 0) {
			            destination.next(this.seenValue ? this.singleValue : undefined);
			            destination.complete();
			        }
			        else {
			            destination.error(new EmptyError_1.EmptyError);
			        }
			    };
			    return SingleSubscriber;
			}(Subscriber_1$8.Subscriber));

			var skip$1 = {};

			var __extends$g = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(skip$1, "__esModule", { value: true });
			var Subscriber_1$7 = Subscriber$1;
			function skip(count) {
			    return function (source) { return source.lift(new SkipOperator(count)); };
			}
			skip$1.skip = skip;
			var SkipOperator = (function () {
			    function SkipOperator(total) {
			        this.total = total;
			    }
			    SkipOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new SkipSubscriber(subscriber, this.total));
			    };
			    return SkipOperator;
			}());
			var SkipSubscriber = (function (_super) {
			    __extends$g(SkipSubscriber, _super);
			    function SkipSubscriber(destination, total) {
			        var _this = _super.call(this, destination) || this;
			        _this.total = total;
			        _this.count = 0;
			        return _this;
			    }
			    SkipSubscriber.prototype._next = function (x) {
			        if (++this.count > this.total) {
			            this.destination.next(x);
			        }
			    };
			    return SkipSubscriber;
			}(Subscriber_1$7.Subscriber));

			var skipLast$1 = {};

			var __extends$f = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(skipLast$1, "__esModule", { value: true });
			var Subscriber_1$6 = Subscriber$1;
			var ArgumentOutOfRangeError_1 = ArgumentOutOfRangeError;
			function skipLast(count) {
			    return function (source) { return source.lift(new SkipLastOperator(count)); };
			}
			skipLast$1.skipLast = skipLast;
			var SkipLastOperator = (function () {
			    function SkipLastOperator(_skipCount) {
			        this._skipCount = _skipCount;
			        if (this._skipCount < 0) {
			            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
			        }
			    }
			    SkipLastOperator.prototype.call = function (subscriber, source) {
			        if (this._skipCount === 0) {
			            return source.subscribe(new Subscriber_1$6.Subscriber(subscriber));
			        }
			        else {
			            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
			        }
			    };
			    return SkipLastOperator;
			}());
			var SkipLastSubscriber = (function (_super) {
			    __extends$f(SkipLastSubscriber, _super);
			    function SkipLastSubscriber(destination, _skipCount) {
			        var _this = _super.call(this, destination) || this;
			        _this._skipCount = _skipCount;
			        _this._count = 0;
			        _this._ring = new Array(_skipCount);
			        return _this;
			    }
			    SkipLastSubscriber.prototype._next = function (value) {
			        var skipCount = this._skipCount;
			        var count = this._count++;
			        if (count < skipCount) {
			            this._ring[count] = value;
			        }
			        else {
			            var currentIndex = count % skipCount;
			            var ring = this._ring;
			            var oldValue = ring[currentIndex];
			            ring[currentIndex] = value;
			            this.destination.next(oldValue);
			        }
			    };
			    return SkipLastSubscriber;
			}(Subscriber_1$6.Subscriber));

			var skipUntil$1 = {};

			var __extends$e = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(skipUntil$1, "__esModule", { value: true });
			var innerSubscribe_1$4 = innerSubscribe$1;
			function skipUntil(notifier) {
			    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };
			}
			skipUntil$1.skipUntil = skipUntil;
			var SkipUntilOperator = (function () {
			    function SkipUntilOperator(notifier) {
			        this.notifier = notifier;
			    }
			    SkipUntilOperator.prototype.call = function (destination, source) {
			        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));
			    };
			    return SkipUntilOperator;
			}());
			var SkipUntilSubscriber = (function (_super) {
			    __extends$e(SkipUntilSubscriber, _super);
			    function SkipUntilSubscriber(destination, notifier) {
			        var _this = _super.call(this, destination) || this;
			        _this.hasValue = false;
			        var innerSubscriber = new innerSubscribe_1$4.SimpleInnerSubscriber(_this);
			        _this.add(innerSubscriber);
			        _this.innerSubscription = innerSubscriber;
			        var innerSubscription = innerSubscribe_1$4.innerSubscribe(notifier, innerSubscriber);
			        if (innerSubscription !== innerSubscriber) {
			            _this.add(innerSubscription);
			            _this.innerSubscription = innerSubscription;
			        }
			        return _this;
			    }
			    SkipUntilSubscriber.prototype._next = function (value) {
			        if (this.hasValue) {
			            _super.prototype._next.call(this, value);
			        }
			    };
			    SkipUntilSubscriber.prototype.notifyNext = function () {
			        this.hasValue = true;
			        if (this.innerSubscription) {
			            this.innerSubscription.unsubscribe();
			        }
			    };
			    SkipUntilSubscriber.prototype.notifyComplete = function () {
			    };
			    return SkipUntilSubscriber;
			}(innerSubscribe_1$4.SimpleOuterSubscriber));

			var skipWhile$1 = {};

			var __extends$d = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(skipWhile$1, "__esModule", { value: true });
			var Subscriber_1$5 = Subscriber$1;
			function skipWhile(predicate) {
			    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };
			}
			skipWhile$1.skipWhile = skipWhile;
			var SkipWhileOperator = (function () {
			    function SkipWhileOperator(predicate) {
			        this.predicate = predicate;
			    }
			    SkipWhileOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
			    };
			    return SkipWhileOperator;
			}());
			var SkipWhileSubscriber = (function (_super) {
			    __extends$d(SkipWhileSubscriber, _super);
			    function SkipWhileSubscriber(destination, predicate) {
			        var _this = _super.call(this, destination) || this;
			        _this.predicate = predicate;
			        _this.skipping = true;
			        _this.index = 0;
			        return _this;
			    }
			    SkipWhileSubscriber.prototype._next = function (value) {
			        var destination = this.destination;
			        if (this.skipping) {
			            this.tryCallPredicate(value);
			        }
			        if (!this.skipping) {
			            destination.next(value);
			        }
			    };
			    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
			        try {
			            var result = this.predicate(value, this.index++);
			            this.skipping = Boolean(result);
			        }
			        catch (err) {
			            this.destination.error(err);
			        }
			    };
			    return SkipWhileSubscriber;
			}(Subscriber_1$5.Subscriber));

			var startWith$1 = {};

			Object.defineProperty(startWith$1, "__esModule", { value: true });
			var concat_1$1 = concat$3;
			var isScheduler_1$1 = isScheduler$1;
			function startWith() {
			    var array = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        array[_i] = arguments[_i];
			    }
			    var scheduler = array[array.length - 1];
			    if (isScheduler_1$1.isScheduler(scheduler)) {
			        array.pop();
			        return function (source) { return concat_1$1.concat(array, source, scheduler); };
			    }
			    else {
			        return function (source) { return concat_1$1.concat(array, source); };
			    }
			}
			startWith$1.startWith = startWith;

			var subscribeOn$1 = {};

			var SubscribeOnObservable$1 = {};

			var __extends$c = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(SubscribeOnObservable$1, "__esModule", { value: true });
			var Observable_1 = Observable$1;
			var asap_1 = asap;
			var isNumeric_1$1 = isNumeric$1;
			var SubscribeOnObservable = (function (_super) {
			    __extends$c(SubscribeOnObservable, _super);
			    function SubscribeOnObservable(source, delayTime, scheduler) {
			        if (delayTime === void 0) { delayTime = 0; }
			        if (scheduler === void 0) { scheduler = asap_1.asap; }
			        var _this = _super.call(this) || this;
			        _this.source = source;
			        _this.delayTime = delayTime;
			        _this.scheduler = scheduler;
			        if (!isNumeric_1$1.isNumeric(delayTime) || delayTime < 0) {
			            _this.delayTime = 0;
			        }
			        if (!scheduler || typeof scheduler.schedule !== 'function') {
			            _this.scheduler = asap_1.asap;
			        }
			        return _this;
			    }
			    SubscribeOnObservable.create = function (source, delay, scheduler) {
			        if (delay === void 0) { delay = 0; }
			        if (scheduler === void 0) { scheduler = asap_1.asap; }
			        return new SubscribeOnObservable(source, delay, scheduler);
			    };
			    SubscribeOnObservable.dispatch = function (arg) {
			        var source = arg.source, subscriber = arg.subscriber;
			        return this.add(source.subscribe(subscriber));
			    };
			    SubscribeOnObservable.prototype._subscribe = function (subscriber) {
			        var delay = this.delayTime;
			        var source = this.source;
			        var scheduler = this.scheduler;
			        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
			            source: source, subscriber: subscriber
			        });
			    };
			    return SubscribeOnObservable;
			}(Observable_1.Observable));
			SubscribeOnObservable$1.SubscribeOnObservable = SubscribeOnObservable;

			Object.defineProperty(subscribeOn$1, "__esModule", { value: true });
			var SubscribeOnObservable_1 = SubscribeOnObservable$1;
			function subscribeOn(scheduler, delay) {
			    if (delay === void 0) { delay = 0; }
			    return function subscribeOnOperatorFunction(source) {
			        return source.lift(new SubscribeOnOperator(scheduler, delay));
			    };
			}
			subscribeOn$1.subscribeOn = subscribeOn;
			var SubscribeOnOperator = (function () {
			    function SubscribeOnOperator(scheduler, delay) {
			        this.scheduler = scheduler;
			        this.delay = delay;
			    }
			    SubscribeOnOperator.prototype.call = function (subscriber, source) {
			        return new SubscribeOnObservable_1.SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
			    };
			    return SubscribeOnOperator;
			}());

			var switchAll$1 = {};

			var switchMap$1 = {};

			var __extends$b = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(switchMap$1, "__esModule", { value: true });
			var map_1$3 = map$1;
			var from_1 = from$1;
			var innerSubscribe_1$3 = innerSubscribe$1;
			function switchMap(project, resultSelector) {
			    if (typeof resultSelector === 'function') {
			        return function (source) { return source.pipe(switchMap(function (a, i) { return from_1.from(project(a, i)).pipe(map_1$3.map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
			    }
			    return function (source) { return source.lift(new SwitchMapOperator(project)); };
			}
			switchMap$1.switchMap = switchMap;
			var SwitchMapOperator = (function () {
			    function SwitchMapOperator(project) {
			        this.project = project;
			    }
			    SwitchMapOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
			    };
			    return SwitchMapOperator;
			}());
			var SwitchMapSubscriber = (function (_super) {
			    __extends$b(SwitchMapSubscriber, _super);
			    function SwitchMapSubscriber(destination, project) {
			        var _this = _super.call(this, destination) || this;
			        _this.project = project;
			        _this.index = 0;
			        return _this;
			    }
			    SwitchMapSubscriber.prototype._next = function (value) {
			        var result;
			        var index = this.index++;
			        try {
			            result = this.project(value, index);
			        }
			        catch (error) {
			            this.destination.error(error);
			            return;
			        }
			        this._innerSub(result);
			    };
			    SwitchMapSubscriber.prototype._innerSub = function (result) {
			        var innerSubscription = this.innerSubscription;
			        if (innerSubscription) {
			            innerSubscription.unsubscribe();
			        }
			        var innerSubscriber = new innerSubscribe_1$3.SimpleInnerSubscriber(this);
			        var destination = this.destination;
			        destination.add(innerSubscriber);
			        this.innerSubscription = innerSubscribe_1$3.innerSubscribe(result, innerSubscriber);
			        if (this.innerSubscription !== innerSubscriber) {
			            destination.add(this.innerSubscription);
			        }
			    };
			    SwitchMapSubscriber.prototype._complete = function () {
			        var innerSubscription = this.innerSubscription;
			        if (!innerSubscription || innerSubscription.closed) {
			            _super.prototype._complete.call(this);
			        }
			        this.unsubscribe();
			    };
			    SwitchMapSubscriber.prototype._unsubscribe = function () {
			        this.innerSubscription = undefined;
			    };
			    SwitchMapSubscriber.prototype.notifyComplete = function () {
			        this.innerSubscription = undefined;
			        if (this.isStopped) {
			            _super.prototype._complete.call(this);
			        }
			    };
			    SwitchMapSubscriber.prototype.notifyNext = function (innerValue) {
			        this.destination.next(innerValue);
			    };
			    return SwitchMapSubscriber;
			}(innerSubscribe_1$3.SimpleOuterSubscriber));

			Object.defineProperty(switchAll$1, "__esModule", { value: true });
			var switchMap_1$2 = switchMap$1;
			var identity_1 = identity$1;
			function switchAll() {
			    return switchMap_1$2.switchMap(identity_1.identity);
			}
			switchAll$1.switchAll = switchAll;

			var switchMapTo$1 = {};

			Object.defineProperty(switchMapTo$1, "__esModule", { value: true });
			var switchMap_1$1 = switchMap$1;
			function switchMapTo(innerObservable, resultSelector) {
			    return resultSelector ? switchMap_1$1.switchMap(function () { return innerObservable; }, resultSelector) : switchMap_1$1.switchMap(function () { return innerObservable; });
			}
			switchMapTo$1.switchMapTo = switchMapTo;

			var takeUntil$1 = {};

			var __extends$a = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(takeUntil$1, "__esModule", { value: true });
			var innerSubscribe_1$2 = innerSubscribe$1;
			function takeUntil(notifier) {
			    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };
			}
			takeUntil$1.takeUntil = takeUntil;
			var TakeUntilOperator = (function () {
			    function TakeUntilOperator(notifier) {
			        this.notifier = notifier;
			    }
			    TakeUntilOperator.prototype.call = function (subscriber, source) {
			        var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
			        var notifierSubscription = innerSubscribe_1$2.innerSubscribe(this.notifier, new innerSubscribe_1$2.SimpleInnerSubscriber(takeUntilSubscriber));
			        if (notifierSubscription && !takeUntilSubscriber.seenValue) {
			            takeUntilSubscriber.add(notifierSubscription);
			            return source.subscribe(takeUntilSubscriber);
			        }
			        return takeUntilSubscriber;
			    };
			    return TakeUntilOperator;
			}());
			var TakeUntilSubscriber = (function (_super) {
			    __extends$a(TakeUntilSubscriber, _super);
			    function TakeUntilSubscriber(destination) {
			        var _this = _super.call(this, destination) || this;
			        _this.seenValue = false;
			        return _this;
			    }
			    TakeUntilSubscriber.prototype.notifyNext = function () {
			        this.seenValue = true;
			        this.complete();
			    };
			    TakeUntilSubscriber.prototype.notifyComplete = function () {
			    };
			    return TakeUntilSubscriber;
			}(innerSubscribe_1$2.SimpleOuterSubscriber));

			var takeWhile$1 = {};

			var __extends$9 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(takeWhile$1, "__esModule", { value: true });
			var Subscriber_1$4 = Subscriber$1;
			function takeWhile(predicate, inclusive) {
			    if (inclusive === void 0) { inclusive = false; }
			    return function (source) {
			        return source.lift(new TakeWhileOperator(predicate, inclusive));
			    };
			}
			takeWhile$1.takeWhile = takeWhile;
			var TakeWhileOperator = (function () {
			    function TakeWhileOperator(predicate, inclusive) {
			        this.predicate = predicate;
			        this.inclusive = inclusive;
			    }
			    TakeWhileOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));
			    };
			    return TakeWhileOperator;
			}());
			var TakeWhileSubscriber = (function (_super) {
			    __extends$9(TakeWhileSubscriber, _super);
			    function TakeWhileSubscriber(destination, predicate, inclusive) {
			        var _this = _super.call(this, destination) || this;
			        _this.predicate = predicate;
			        _this.inclusive = inclusive;
			        _this.index = 0;
			        return _this;
			    }
			    TakeWhileSubscriber.prototype._next = function (value) {
			        var destination = this.destination;
			        var result;
			        try {
			            result = this.predicate(value, this.index++);
			        }
			        catch (err) {
			            destination.error(err);
			            return;
			        }
			        this.nextOrComplete(value, result);
			    };
			    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
			        var destination = this.destination;
			        if (Boolean(predicateResult)) {
			            destination.next(value);
			        }
			        else {
			            if (this.inclusive) {
			                destination.next(value);
			            }
			            destination.complete();
			        }
			    };
			    return TakeWhileSubscriber;
			}(Subscriber_1$4.Subscriber));

			var tap$1 = {};

			var __extends$8 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(tap$1, "__esModule", { value: true });
			var Subscriber_1$3 = Subscriber$1;
			var noop_1 = noop$1;
			var isFunction_1 = isFunction$1;
			function tap(nextOrObserver, error, complete) {
			    return function tapOperatorFunction(source) {
			        return source.lift(new DoOperator(nextOrObserver, error, complete));
			    };
			}
			tap$1.tap = tap;
			var DoOperator = (function () {
			    function DoOperator(nextOrObserver, error, complete) {
			        this.nextOrObserver = nextOrObserver;
			        this.error = error;
			        this.complete = complete;
			    }
			    DoOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
			    };
			    return DoOperator;
			}());
			var TapSubscriber = (function (_super) {
			    __extends$8(TapSubscriber, _super);
			    function TapSubscriber(destination, observerOrNext, error, complete) {
			        var _this = _super.call(this, destination) || this;
			        _this._tapNext = noop_1.noop;
			        _this._tapError = noop_1.noop;
			        _this._tapComplete = noop_1.noop;
			        _this._tapError = error || noop_1.noop;
			        _this._tapComplete = complete || noop_1.noop;
			        if (isFunction_1.isFunction(observerOrNext)) {
			            _this._context = _this;
			            _this._tapNext = observerOrNext;
			        }
			        else if (observerOrNext) {
			            _this._context = observerOrNext;
			            _this._tapNext = observerOrNext.next || noop_1.noop;
			            _this._tapError = observerOrNext.error || noop_1.noop;
			            _this._tapComplete = observerOrNext.complete || noop_1.noop;
			        }
			        return _this;
			    }
			    TapSubscriber.prototype._next = function (value) {
			        try {
			            this._tapNext.call(this._context, value);
			        }
			        catch (err) {
			            this.destination.error(err);
			            return;
			        }
			        this.destination.next(value);
			    };
			    TapSubscriber.prototype._error = function (err) {
			        try {
			            this._tapError.call(this._context, err);
			        }
			        catch (err) {
			            this.destination.error(err);
			            return;
			        }
			        this.destination.error(err);
			    };
			    TapSubscriber.prototype._complete = function () {
			        try {
			            this._tapComplete.call(this._context);
			        }
			        catch (err) {
			            this.destination.error(err);
			            return;
			        }
			        return this.destination.complete();
			    };
			    return TapSubscriber;
			}(Subscriber_1$3.Subscriber));

			var throttle = {};

			(function (exports) {
			var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(exports, "__esModule", { value: true });
			var innerSubscribe_1 = innerSubscribe$1;
			exports.defaultThrottleConfig = {
			    leading: true,
			    trailing: false
			};
			function throttle(durationSelector, config) {
			    if (config === void 0) { config = exports.defaultThrottleConfig; }
			    return function (source) { return source.lift(new ThrottleOperator(durationSelector, !!config.leading, !!config.trailing)); };
			}
			exports.throttle = throttle;
			var ThrottleOperator = (function () {
			    function ThrottleOperator(durationSelector, leading, trailing) {
			        this.durationSelector = durationSelector;
			        this.leading = leading;
			        this.trailing = trailing;
			    }
			    ThrottleOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
			    };
			    return ThrottleOperator;
			}());
			var ThrottleSubscriber = (function (_super) {
			    __extends(ThrottleSubscriber, _super);
			    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
			        var _this = _super.call(this, destination) || this;
			        _this.destination = destination;
			        _this.durationSelector = durationSelector;
			        _this._leading = _leading;
			        _this._trailing = _trailing;
			        _this._hasValue = false;
			        return _this;
			    }
			    ThrottleSubscriber.prototype._next = function (value) {
			        this._hasValue = true;
			        this._sendValue = value;
			        if (!this._throttled) {
			            if (this._leading) {
			                this.send();
			            }
			            else {
			                this.throttle(value);
			            }
			        }
			    };
			    ThrottleSubscriber.prototype.send = function () {
			        var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;
			        if (_hasValue) {
			            this.destination.next(_sendValue);
			            this.throttle(_sendValue);
			        }
			        this._hasValue = false;
			        this._sendValue = undefined;
			    };
			    ThrottleSubscriber.prototype.throttle = function (value) {
			        var duration = this.tryDurationSelector(value);
			        if (!!duration) {
			            this.add(this._throttled = innerSubscribe_1.innerSubscribe(duration, new innerSubscribe_1.SimpleInnerSubscriber(this)));
			        }
			    };
			    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
			        try {
			            return this.durationSelector(value);
			        }
			        catch (err) {
			            this.destination.error(err);
			            return null;
			        }
			    };
			    ThrottleSubscriber.prototype.throttlingDone = function () {
			        var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;
			        if (_throttled) {
			            _throttled.unsubscribe();
			        }
			        this._throttled = undefined;
			        if (_trailing) {
			            this.send();
			        }
			    };
			    ThrottleSubscriber.prototype.notifyNext = function () {
			        this.throttlingDone();
			    };
			    ThrottleSubscriber.prototype.notifyComplete = function () {
			        this.throttlingDone();
			    };
			    return ThrottleSubscriber;
			}(innerSubscribe_1.SimpleOuterSubscriber));

			}(throttle));

			var throttleTime$1 = {};

			var __extends$7 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(throttleTime$1, "__esModule", { value: true });
			var Subscriber_1$2 = Subscriber$1;
			var async_1$5 = async;
			var throttle_1$1 = throttle;
			function throttleTime(duration, scheduler, config) {
			    if (scheduler === void 0) { scheduler = async_1$5.async; }
			    if (config === void 0) { config = throttle_1$1.defaultThrottleConfig; }
			    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };
			}
			throttleTime$1.throttleTime = throttleTime;
			var ThrottleTimeOperator = (function () {
			    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
			        this.duration = duration;
			        this.scheduler = scheduler;
			        this.leading = leading;
			        this.trailing = trailing;
			    }
			    ThrottleTimeOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
			    };
			    return ThrottleTimeOperator;
			}());
			var ThrottleTimeSubscriber = (function (_super) {
			    __extends$7(ThrottleTimeSubscriber, _super);
			    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
			        var _this = _super.call(this, destination) || this;
			        _this.duration = duration;
			        _this.scheduler = scheduler;
			        _this.leading = leading;
			        _this.trailing = trailing;
			        _this._hasTrailingValue = false;
			        _this._trailingValue = null;
			        return _this;
			    }
			    ThrottleTimeSubscriber.prototype._next = function (value) {
			        if (this.throttled) {
			            if (this.trailing) {
			                this._trailingValue = value;
			                this._hasTrailingValue = true;
			            }
			        }
			        else {
			            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));
			            if (this.leading) {
			                this.destination.next(value);
			            }
			            else if (this.trailing) {
			                this._trailingValue = value;
			                this._hasTrailingValue = true;
			            }
			        }
			    };
			    ThrottleTimeSubscriber.prototype._complete = function () {
			        if (this._hasTrailingValue) {
			            this.destination.next(this._trailingValue);
			            this.destination.complete();
			        }
			        else {
			            this.destination.complete();
			        }
			    };
			    ThrottleTimeSubscriber.prototype.clearThrottle = function () {
			        var throttled = this.throttled;
			        if (throttled) {
			            if (this.trailing && this._hasTrailingValue) {
			                this.destination.next(this._trailingValue);
			                this._trailingValue = null;
			                this._hasTrailingValue = false;
			            }
			            throttled.unsubscribe();
			            this.remove(throttled);
			            this.throttled = null;
			        }
			    };
			    return ThrottleTimeSubscriber;
			}(Subscriber_1$2.Subscriber));
			function dispatchNext(arg) {
			    var subscriber = arg.subscriber;
			    subscriber.clearThrottle();
			}

			var timeInterval$1 = {};

			Object.defineProperty(timeInterval$1, "__esModule", { value: true });
			var async_1$4 = async;
			var scan_1$1 = scan$1;
			var defer_1 = defer$1;
			var map_1$2 = map$1;
			function timeInterval(scheduler) {
			    if (scheduler === void 0) { scheduler = async_1$4.async; }
			    return function (source) { return defer_1.defer(function () {
			        return source.pipe(scan_1$1.scan(function (_a, value) {
			            var current = _a.current;
			            return ({ value: value, current: scheduler.now(), last: current });
			        }, { current: scheduler.now(), value: undefined, last: undefined }), map_1$2.map(function (_a) {
			            var current = _a.current, last = _a.last, value = _a.value;
			            return new TimeInterval(value, current - last);
			        }));
			    }); };
			}
			timeInterval$1.timeInterval = timeInterval;
			var TimeInterval = (function () {
			    function TimeInterval(value, interval) {
			        this.value = value;
			        this.interval = interval;
			    }
			    return TimeInterval;
			}());
			timeInterval$1.TimeInterval = TimeInterval;

			var timeout$1 = {};

			var timeoutWith$1 = {};

			var __extends$6 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(timeoutWith$1, "__esModule", { value: true });
			var async_1$3 = async;
			var isDate_1 = isDate$1;
			var innerSubscribe_1$1 = innerSubscribe$1;
			function timeoutWith(due, withObservable, scheduler) {
			    if (scheduler === void 0) { scheduler = async_1$3.async; }
			    return function (source) {
			        var absoluteTimeout = isDate_1.isDate(due);
			        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
			        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
			    };
			}
			timeoutWith$1.timeoutWith = timeoutWith;
			var TimeoutWithOperator = (function () {
			    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
			        this.waitFor = waitFor;
			        this.absoluteTimeout = absoluteTimeout;
			        this.withObservable = withObservable;
			        this.scheduler = scheduler;
			    }
			    TimeoutWithOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
			    };
			    return TimeoutWithOperator;
			}());
			var TimeoutWithSubscriber = (function (_super) {
			    __extends$6(TimeoutWithSubscriber, _super);
			    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
			        var _this = _super.call(this, destination) || this;
			        _this.absoluteTimeout = absoluteTimeout;
			        _this.waitFor = waitFor;
			        _this.withObservable = withObservable;
			        _this.scheduler = scheduler;
			        _this.scheduleTimeout();
			        return _this;
			    }
			    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
			        var withObservable = subscriber.withObservable;
			        subscriber._unsubscribeAndRecycle();
			        subscriber.add(innerSubscribe_1$1.innerSubscribe(withObservable, new innerSubscribe_1$1.SimpleInnerSubscriber(subscriber)));
			    };
			    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
			        var action = this.action;
			        if (action) {
			            this.action = action.schedule(this, this.waitFor);
			        }
			        else {
			            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
			        }
			    };
			    TimeoutWithSubscriber.prototype._next = function (value) {
			        if (!this.absoluteTimeout) {
			            this.scheduleTimeout();
			        }
			        _super.prototype._next.call(this, value);
			    };
			    TimeoutWithSubscriber.prototype._unsubscribe = function () {
			        this.action = undefined;
			        this.scheduler = null;
			        this.withObservable = null;
			    };
			    return TimeoutWithSubscriber;
			}(innerSubscribe_1$1.SimpleOuterSubscriber));

			Object.defineProperty(timeout$1, "__esModule", { value: true });
			var async_1$2 = async;
			var TimeoutError_1 = TimeoutError;
			var timeoutWith_1$1 = timeoutWith$1;
			var throwError_1 = throwError$1;
			function timeout(due, scheduler) {
			    if (scheduler === void 0) { scheduler = async_1$2.async; }
			    return timeoutWith_1$1.timeoutWith(due, throwError_1.throwError(new TimeoutError_1.TimeoutError()), scheduler);
			}
			timeout$1.timeout = timeout;

			var timestamp$1 = {};

			Object.defineProperty(timestamp$1, "__esModule", { value: true });
			var async_1$1 = async;
			var map_1$1 = map$1;
			function timestamp(scheduler) {
			    if (scheduler === void 0) { scheduler = async_1$1.async; }
			    return map_1$1.map(function (value) { return new Timestamp(value, scheduler.now()); });
			}
			timestamp$1.timestamp = timestamp;
			var Timestamp = (function () {
			    function Timestamp(value, timestamp) {
			        this.value = value;
			        this.timestamp = timestamp;
			    }
			    return Timestamp;
			}());
			timestamp$1.Timestamp = Timestamp;

			var toArray$1 = {};

			Object.defineProperty(toArray$1, "__esModule", { value: true });
			var reduce_1$1 = reduce$1;
			function toArrayReducer(arr, item, index) {
			    if (index === 0) {
			        return [item];
			    }
			    arr.push(item);
			    return arr;
			}
			function toArray() {
			    return reduce_1$1.reduce(toArrayReducer, []);
			}
			toArray$1.toArray = toArray;

			var window$2 = {};

			var __extends$5 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(window$2, "__esModule", { value: true });
			var Subject_1$4 = Subject$1;
			var innerSubscribe_1 = innerSubscribe$1;
			function window$1(windowBoundaries) {
			    return function windowOperatorFunction(source) {
			        return source.lift(new WindowOperator$1(windowBoundaries));
			    };
			}
			window$2.window = window$1;
			var WindowOperator$1 = (function () {
			    function WindowOperator(windowBoundaries) {
			        this.windowBoundaries = windowBoundaries;
			    }
			    WindowOperator.prototype.call = function (subscriber, source) {
			        var windowSubscriber = new WindowSubscriber$1(subscriber);
			        var sourceSubscription = source.subscribe(windowSubscriber);
			        if (!sourceSubscription.closed) {
			            windowSubscriber.add(innerSubscribe_1.innerSubscribe(this.windowBoundaries, new innerSubscribe_1.SimpleInnerSubscriber(windowSubscriber)));
			        }
			        return sourceSubscription;
			    };
			    return WindowOperator;
			}());
			var WindowSubscriber$1 = (function (_super) {
			    __extends$5(WindowSubscriber, _super);
			    function WindowSubscriber(destination) {
			        var _this = _super.call(this, destination) || this;
			        _this.window = new Subject_1$4.Subject();
			        destination.next(_this.window);
			        return _this;
			    }
			    WindowSubscriber.prototype.notifyNext = function () {
			        this.openWindow();
			    };
			    WindowSubscriber.prototype.notifyError = function (error) {
			        this._error(error);
			    };
			    WindowSubscriber.prototype.notifyComplete = function () {
			        this._complete();
			    };
			    WindowSubscriber.prototype._next = function (value) {
			        this.window.next(value);
			    };
			    WindowSubscriber.prototype._error = function (err) {
			        this.window.error(err);
			        this.destination.error(err);
			    };
			    WindowSubscriber.prototype._complete = function () {
			        this.window.complete();
			        this.destination.complete();
			    };
			    WindowSubscriber.prototype._unsubscribe = function () {
			        this.window = null;
			    };
			    WindowSubscriber.prototype.openWindow = function () {
			        var prevWindow = this.window;
			        if (prevWindow) {
			            prevWindow.complete();
			        }
			        var destination = this.destination;
			        var newWindow = this.window = new Subject_1$4.Subject();
			        destination.next(newWindow);
			    };
			    return WindowSubscriber;
			}(innerSubscribe_1.SimpleOuterSubscriber));

			var windowCount$1 = {};

			var __extends$4 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(windowCount$1, "__esModule", { value: true });
			var Subscriber_1$1 = Subscriber$1;
			var Subject_1$3 = Subject$1;
			function windowCount(windowSize, startWindowEvery) {
			    if (startWindowEvery === void 0) { startWindowEvery = 0; }
			    return function windowCountOperatorFunction(source) {
			        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));
			    };
			}
			windowCount$1.windowCount = windowCount;
			var WindowCountOperator = (function () {
			    function WindowCountOperator(windowSize, startWindowEvery) {
			        this.windowSize = windowSize;
			        this.startWindowEvery = startWindowEvery;
			    }
			    WindowCountOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
			    };
			    return WindowCountOperator;
			}());
			var WindowCountSubscriber = (function (_super) {
			    __extends$4(WindowCountSubscriber, _super);
			    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
			        var _this = _super.call(this, destination) || this;
			        _this.destination = destination;
			        _this.windowSize = windowSize;
			        _this.startWindowEvery = startWindowEvery;
			        _this.windows = [new Subject_1$3.Subject()];
			        _this.count = 0;
			        destination.next(_this.windows[0]);
			        return _this;
			    }
			    WindowCountSubscriber.prototype._next = function (value) {
			        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
			        var destination = this.destination;
			        var windowSize = this.windowSize;
			        var windows = this.windows;
			        var len = windows.length;
			        for (var i = 0; i < len && !this.closed; i++) {
			            windows[i].next(value);
			        }
			        var c = this.count - windowSize + 1;
			        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
			            windows.shift().complete();
			        }
			        if (++this.count % startWindowEvery === 0 && !this.closed) {
			            var window_1 = new Subject_1$3.Subject();
			            windows.push(window_1);
			            destination.next(window_1);
			        }
			    };
			    WindowCountSubscriber.prototype._error = function (err) {
			        var windows = this.windows;
			        if (windows) {
			            while (windows.length > 0 && !this.closed) {
			                windows.shift().error(err);
			            }
			        }
			        this.destination.error(err);
			    };
			    WindowCountSubscriber.prototype._complete = function () {
			        var windows = this.windows;
			        if (windows) {
			            while (windows.length > 0 && !this.closed) {
			                windows.shift().complete();
			            }
			        }
			        this.destination.complete();
			    };
			    WindowCountSubscriber.prototype._unsubscribe = function () {
			        this.count = 0;
			        this.windows = null;
			    };
			    return WindowCountSubscriber;
			}(Subscriber_1$1.Subscriber));

			var windowTime$1 = {};

			var __extends$3 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(windowTime$1, "__esModule", { value: true });
			var Subject_1$2 = Subject$1;
			var async_1 = async;
			var Subscriber_1 = Subscriber$1;
			var isNumeric_1 = isNumeric$1;
			var isScheduler_1 = isScheduler$1;
			function windowTime(windowTimeSpan) {
			    var scheduler = async_1.async;
			    var windowCreationInterval = null;
			    var maxWindowSize = Number.POSITIVE_INFINITY;
			    if (isScheduler_1.isScheduler(arguments[3])) {
			        scheduler = arguments[3];
			    }
			    if (isScheduler_1.isScheduler(arguments[2])) {
			        scheduler = arguments[2];
			    }
			    else if (isNumeric_1.isNumeric(arguments[2])) {
			        maxWindowSize = Number(arguments[2]);
			    }
			    if (isScheduler_1.isScheduler(arguments[1])) {
			        scheduler = arguments[1];
			    }
			    else if (isNumeric_1.isNumeric(arguments[1])) {
			        windowCreationInterval = Number(arguments[1]);
			    }
			    return function windowTimeOperatorFunction(source) {
			        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
			    };
			}
			windowTime$1.windowTime = windowTime;
			var WindowTimeOperator = (function () {
			    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
			        this.windowTimeSpan = windowTimeSpan;
			        this.windowCreationInterval = windowCreationInterval;
			        this.maxWindowSize = maxWindowSize;
			        this.scheduler = scheduler;
			    }
			    WindowTimeOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
			    };
			    return WindowTimeOperator;
			}());
			var CountedSubject = (function (_super) {
			    __extends$3(CountedSubject, _super);
			    function CountedSubject() {
			        var _this = _super !== null && _super.apply(this, arguments) || this;
			        _this._numberOfNextedValues = 0;
			        return _this;
			    }
			    CountedSubject.prototype.next = function (value) {
			        this._numberOfNextedValues++;
			        _super.prototype.next.call(this, value);
			    };
			    Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
			        get: function () {
			            return this._numberOfNextedValues;
			        },
			        enumerable: true,
			        configurable: true
			    });
			    return CountedSubject;
			}(Subject_1$2.Subject));
			var WindowTimeSubscriber = (function (_super) {
			    __extends$3(WindowTimeSubscriber, _super);
			    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
			        var _this = _super.call(this, destination) || this;
			        _this.destination = destination;
			        _this.windowTimeSpan = windowTimeSpan;
			        _this.windowCreationInterval = windowCreationInterval;
			        _this.maxWindowSize = maxWindowSize;
			        _this.scheduler = scheduler;
			        _this.windows = [];
			        var window = _this.openWindow();
			        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
			            var closeState = { subscriber: _this, window: window, context: null };
			            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };
			            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
			            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
			        }
			        else {
			            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };
			            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
			        }
			        return _this;
			    }
			    WindowTimeSubscriber.prototype._next = function (value) {
			        var windows = this.windows;
			        var len = windows.length;
			        for (var i = 0; i < len; i++) {
			            var window_1 = windows[i];
			            if (!window_1.closed) {
			                window_1.next(value);
			                if (window_1.numberOfNextedValues >= this.maxWindowSize) {
			                    this.closeWindow(window_1);
			                }
			            }
			        }
			    };
			    WindowTimeSubscriber.prototype._error = function (err) {
			        var windows = this.windows;
			        while (windows.length > 0) {
			            windows.shift().error(err);
			        }
			        this.destination.error(err);
			    };
			    WindowTimeSubscriber.prototype._complete = function () {
			        var windows = this.windows;
			        while (windows.length > 0) {
			            var window_2 = windows.shift();
			            if (!window_2.closed) {
			                window_2.complete();
			            }
			        }
			        this.destination.complete();
			    };
			    WindowTimeSubscriber.prototype.openWindow = function () {
			        var window = new CountedSubject();
			        this.windows.push(window);
			        var destination = this.destination;
			        destination.next(window);
			        return window;
			    };
			    WindowTimeSubscriber.prototype.closeWindow = function (window) {
			        window.complete();
			        var windows = this.windows;
			        windows.splice(windows.indexOf(window), 1);
			    };
			    return WindowTimeSubscriber;
			}(Subscriber_1.Subscriber));
			function dispatchWindowTimeSpanOnly(state) {
			    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
			    if (window) {
			        subscriber.closeWindow(window);
			    }
			    state.window = subscriber.openWindow();
			    this.schedule(state, windowTimeSpan);
			}
			function dispatchWindowCreation(state) {
			    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
			    var window = subscriber.openWindow();
			    var action = this;
			    var context = { action: action, subscription: null };
			    var timeSpanState = { subscriber: subscriber, window: window, context: context };
			    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
			    action.add(context.subscription);
			    action.schedule(state, windowCreationInterval);
			}
			function dispatchWindowClose(state) {
			    var subscriber = state.subscriber, window = state.window, context = state.context;
			    if (context && context.action && context.subscription) {
			        context.action.remove(context.subscription);
			    }
			    subscriber.closeWindow(window);
			}

			var windowToggle$1 = {};

			var __extends$2 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(windowToggle$1, "__esModule", { value: true });
			var Subject_1$1 = Subject$1;
			var Subscription_1 = Subscription$1;
			var OuterSubscriber_1$2 = OuterSubscriber$1;
			var subscribeToResult_1$2 = subscribeToResult$1;
			function windowToggle(openings, closingSelector) {
			    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };
			}
			windowToggle$1.windowToggle = windowToggle;
			var WindowToggleOperator = (function () {
			    function WindowToggleOperator(openings, closingSelector) {
			        this.openings = openings;
			        this.closingSelector = closingSelector;
			    }
			    WindowToggleOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
			    };
			    return WindowToggleOperator;
			}());
			var WindowToggleSubscriber = (function (_super) {
			    __extends$2(WindowToggleSubscriber, _super);
			    function WindowToggleSubscriber(destination, openings, closingSelector) {
			        var _this = _super.call(this, destination) || this;
			        _this.openings = openings;
			        _this.closingSelector = closingSelector;
			        _this.contexts = [];
			        _this.add(_this.openSubscription = subscribeToResult_1$2.subscribeToResult(_this, openings, openings));
			        return _this;
			    }
			    WindowToggleSubscriber.prototype._next = function (value) {
			        var contexts = this.contexts;
			        if (contexts) {
			            var len = contexts.length;
			            for (var i = 0; i < len; i++) {
			                contexts[i].window.next(value);
			            }
			        }
			    };
			    WindowToggleSubscriber.prototype._error = function (err) {
			        var contexts = this.contexts;
			        this.contexts = null;
			        if (contexts) {
			            var len = contexts.length;
			            var index = -1;
			            while (++index < len) {
			                var context_1 = contexts[index];
			                context_1.window.error(err);
			                context_1.subscription.unsubscribe();
			            }
			        }
			        _super.prototype._error.call(this, err);
			    };
			    WindowToggleSubscriber.prototype._complete = function () {
			        var contexts = this.contexts;
			        this.contexts = null;
			        if (contexts) {
			            var len = contexts.length;
			            var index = -1;
			            while (++index < len) {
			                var context_2 = contexts[index];
			                context_2.window.complete();
			                context_2.subscription.unsubscribe();
			            }
			        }
			        _super.prototype._complete.call(this);
			    };
			    WindowToggleSubscriber.prototype._unsubscribe = function () {
			        var contexts = this.contexts;
			        this.contexts = null;
			        if (contexts) {
			            var len = contexts.length;
			            var index = -1;
			            while (++index < len) {
			                var context_3 = contexts[index];
			                context_3.window.unsubscribe();
			                context_3.subscription.unsubscribe();
			            }
			        }
			    };
			    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
			        if (outerValue === this.openings) {
			            var closingNotifier = void 0;
			            try {
			                var closingSelector = this.closingSelector;
			                closingNotifier = closingSelector(innerValue);
			            }
			            catch (e) {
			                return this.error(e);
			            }
			            var window_1 = new Subject_1$1.Subject();
			            var subscription = new Subscription_1.Subscription();
			            var context_4 = { window: window_1, subscription: subscription };
			            this.contexts.push(context_4);
			            var innerSubscription = subscribeToResult_1$2.subscribeToResult(this, closingNotifier, context_4);
			            if (innerSubscription.closed) {
			                this.closeWindow(this.contexts.length - 1);
			            }
			            else {
			                innerSubscription.context = context_4;
			                subscription.add(innerSubscription);
			            }
			            this.destination.next(window_1);
			        }
			        else {
			            this.closeWindow(this.contexts.indexOf(outerValue));
			        }
			    };
			    WindowToggleSubscriber.prototype.notifyError = function (err) {
			        this.error(err);
			    };
			    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
			        if (inner !== this.openSubscription) {
			            this.closeWindow(this.contexts.indexOf(inner.context));
			        }
			    };
			    WindowToggleSubscriber.prototype.closeWindow = function (index) {
			        if (index === -1) {
			            return;
			        }
			        var contexts = this.contexts;
			        var context = contexts[index];
			        var window = context.window, subscription = context.subscription;
			        contexts.splice(index, 1);
			        window.complete();
			        subscription.unsubscribe();
			    };
			    return WindowToggleSubscriber;
			}(OuterSubscriber_1$2.OuterSubscriber));

			var windowWhen$1 = {};

			var __extends$1 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(windowWhen$1, "__esModule", { value: true });
			var Subject_1 = Subject$1;
			var OuterSubscriber_1$1 = OuterSubscriber$1;
			var subscribeToResult_1$1 = subscribeToResult$1;
			function windowWhen(closingSelector) {
			    return function windowWhenOperatorFunction(source) {
			        return source.lift(new WindowOperator(closingSelector));
			    };
			}
			windowWhen$1.windowWhen = windowWhen;
			var WindowOperator = (function () {
			    function WindowOperator(closingSelector) {
			        this.closingSelector = closingSelector;
			    }
			    WindowOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));
			    };
			    return WindowOperator;
			}());
			var WindowSubscriber = (function (_super) {
			    __extends$1(WindowSubscriber, _super);
			    function WindowSubscriber(destination, closingSelector) {
			        var _this = _super.call(this, destination) || this;
			        _this.destination = destination;
			        _this.closingSelector = closingSelector;
			        _this.openWindow();
			        return _this;
			    }
			    WindowSubscriber.prototype.notifyNext = function (_outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {
			        this.openWindow(innerSub);
			    };
			    WindowSubscriber.prototype.notifyError = function (error) {
			        this._error(error);
			    };
			    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
			        this.openWindow(innerSub);
			    };
			    WindowSubscriber.prototype._next = function (value) {
			        this.window.next(value);
			    };
			    WindowSubscriber.prototype._error = function (err) {
			        this.window.error(err);
			        this.destination.error(err);
			        this.unsubscribeClosingNotification();
			    };
			    WindowSubscriber.prototype._complete = function () {
			        this.window.complete();
			        this.destination.complete();
			        this.unsubscribeClosingNotification();
			    };
			    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
			        if (this.closingNotification) {
			            this.closingNotification.unsubscribe();
			        }
			    };
			    WindowSubscriber.prototype.openWindow = function (innerSub) {
			        if (innerSub === void 0) { innerSub = null; }
			        if (innerSub) {
			            this.remove(innerSub);
			            innerSub.unsubscribe();
			        }
			        var prevWindow = this.window;
			        if (prevWindow) {
			            prevWindow.complete();
			        }
			        var window = this.window = new Subject_1.Subject();
			        this.destination.next(window);
			        var closingNotifier;
			        try {
			            var closingSelector = this.closingSelector;
			            closingNotifier = closingSelector();
			        }
			        catch (e) {
			            this.destination.error(e);
			            this.window.error(e);
			            return;
			        }
			        this.add(this.closingNotification = subscribeToResult_1$1.subscribeToResult(this, closingNotifier));
			    };
			    return WindowSubscriber;
			}(OuterSubscriber_1$1.OuterSubscriber));

			var withLatestFrom$1 = {};

			var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
			    var extendStatics = function (d, b) {
			        extendStatics = Object.setPrototypeOf ||
			            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
			        return extendStatics(d, b);
			    };
			    return function (d, b) {
			        extendStatics(d, b);
			        function __() { this.constructor = d; }
			        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			    };
			})();
			Object.defineProperty(withLatestFrom$1, "__esModule", { value: true });
			var OuterSubscriber_1 = OuterSubscriber$1;
			var subscribeToResult_1 = subscribeToResult$1;
			function withLatestFrom() {
			    var args = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        args[_i] = arguments[_i];
			    }
			    return function (source) {
			        var project;
			        if (typeof args[args.length - 1] === 'function') {
			            project = args.pop();
			        }
			        var observables = args;
			        return source.lift(new WithLatestFromOperator(observables, project));
			    };
			}
			withLatestFrom$1.withLatestFrom = withLatestFrom;
			var WithLatestFromOperator = (function () {
			    function WithLatestFromOperator(observables, project) {
			        this.observables = observables;
			        this.project = project;
			    }
			    WithLatestFromOperator.prototype.call = function (subscriber, source) {
			        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
			    };
			    return WithLatestFromOperator;
			}());
			var WithLatestFromSubscriber = (function (_super) {
			    __extends(WithLatestFromSubscriber, _super);
			    function WithLatestFromSubscriber(destination, observables, project) {
			        var _this = _super.call(this, destination) || this;
			        _this.observables = observables;
			        _this.project = project;
			        _this.toRespond = [];
			        var len = observables.length;
			        _this.values = new Array(len);
			        for (var i = 0; i < len; i++) {
			            _this.toRespond.push(i);
			        }
			        for (var i = 0; i < len; i++) {
			            var observable = observables[i];
			            _this.add(subscribeToResult_1.subscribeToResult(_this, observable, undefined, i));
			        }
			        return _this;
			    }
			    WithLatestFromSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
			        this.values[outerIndex] = innerValue;
			        var toRespond = this.toRespond;
			        if (toRespond.length > 0) {
			            var found = toRespond.indexOf(outerIndex);
			            if (found !== -1) {
			                toRespond.splice(found, 1);
			            }
			        }
			    };
			    WithLatestFromSubscriber.prototype.notifyComplete = function () {
			    };
			    WithLatestFromSubscriber.prototype._next = function (value) {
			        if (this.toRespond.length === 0) {
			            var args = [value].concat(this.values);
			            if (this.project) {
			                this._tryProject(args);
			            }
			            else {
			                this.destination.next(args);
			            }
			        }
			    };
			    WithLatestFromSubscriber.prototype._tryProject = function (args) {
			        var result;
			        try {
			            result = this.project.apply(this, args);
			        }
			        catch (err) {
			            this.destination.error(err);
			            return;
			        }
			        this.destination.next(result);
			    };
			    return WithLatestFromSubscriber;
			}(OuterSubscriber_1.OuterSubscriber));

			var zip$1 = {};

			Object.defineProperty(zip$1, "__esModule", { value: true });
			var zip_1$2 = zip$3;
			function zip() {
			    var observables = [];
			    for (var _i = 0; _i < arguments.length; _i++) {
			        observables[_i] = arguments[_i];
			    }
			    return function zipOperatorFunction(source) {
			        return source.lift.call(zip_1$2.zip.apply(void 0, [source].concat(observables)));
			    };
			}
			zip$1.zip = zip;

			var zipAll$1 = {};

			Object.defineProperty(zipAll$1, "__esModule", { value: true });
			var zip_1$1 = zip$3;
			function zipAll(project) {
			    return function (source) { return source.lift(new zip_1$1.ZipOperator(project)); };
			}
			zipAll$1.zipAll = zipAll;

			Object.defineProperty(operators, "__esModule", { value: true });
			var audit_1 = audit$1;
			operators.audit = audit_1.audit;
			var auditTime_1 = auditTime$1;
			operators.auditTime = auditTime_1.auditTime;
			var buffer_1 = buffer$1;
			operators.buffer = buffer_1.buffer;
			var bufferCount_1 = bufferCount$1;
			operators.bufferCount = bufferCount_1.bufferCount;
			var bufferTime_1 = bufferTime$1;
			operators.bufferTime = bufferTime_1.bufferTime;
			var bufferToggle_1 = bufferToggle$1;
			operators.bufferToggle = bufferToggle_1.bufferToggle;
			var bufferWhen_1 = bufferWhen$1;
			operators.bufferWhen = bufferWhen_1.bufferWhen;
			var catchError_1 = catchError$1;
			operators.catchError = catchError_1.catchError;
			var combineAll_1 = combineAll$1;
			operators.combineAll = combineAll_1.combineAll;
			var combineLatest_1 = combineLatest$1;
			operators.combineLatest = combineLatest_1.combineLatest;
			var concat_1 = concat$1;
			operators.concat = concat_1.concat;
			var concatAll_1 = concatAll$1;
			operators.concatAll = concatAll_1.concatAll;
			var concatMap_1 = concatMap$1;
			operators.concatMap = concatMap_1.concatMap;
			var concatMapTo_1 = concatMapTo$1;
			operators.concatMapTo = concatMapTo_1.concatMapTo;
			var count_1 = count$1;
			operators.count = count_1.count;
			var debounce_1 = debounce$1;
			operators.debounce = debounce_1.debounce;
			var debounceTime_1 = debounceTime$1;
			operators.debounceTime = debounceTime_1.debounceTime;
			var defaultIfEmpty_1 = defaultIfEmpty$1;
			operators.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;
			var delay_1 = delay$1;
			operators.delay = delay_1.delay;
			var delayWhen_1 = delayWhen$1;
			operators.delayWhen = delayWhen_1.delayWhen;
			var dematerialize_1 = dematerialize$1;
			operators.dematerialize = dematerialize_1.dematerialize;
			var distinct_1 = distinct$1;
			operators.distinct = distinct_1.distinct;
			var distinctUntilChanged_1 = distinctUntilChanged$1;
			operators.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
			var distinctUntilKeyChanged_1 = distinctUntilKeyChanged$1;
			operators.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;
			var elementAt_1 = elementAt$1;
			operators.elementAt = elementAt_1.elementAt;
			var endWith_1 = endWith$1;
			operators.endWith = endWith_1.endWith;
			var every_1 = every$1;
			operators.every = every_1.every;
			var exhaust_1 = exhaust$1;
			operators.exhaust = exhaust_1.exhaust;
			var exhaustMap_1 = exhaustMap$1;
			operators.exhaustMap = exhaustMap_1.exhaustMap;
			var expand_1 = expand$1;
			operators.expand = expand_1.expand;
			var filter_1 = filter$3;
			operators.filter = filter_1.filter;
			var finalize_1 = finalize$1;
			operators.finalize = finalize_1.finalize;
			var find_1 = find$1;
			operators.find = find_1.find;
			var findIndex_1 = findIndex$1;
			operators.findIndex = findIndex_1.findIndex;
			var first_1 = first$1;
			operators.first = first_1.first;
			var groupBy_1 = groupBy$1;
			operators.groupBy = groupBy_1.groupBy;
			var ignoreElements_1 = ignoreElements$1;
			operators.ignoreElements = ignoreElements_1.ignoreElements;
			var isEmpty_1 = isEmpty$1;
			operators.isEmpty = isEmpty_1.isEmpty;
			var last_1 = last$1;
			operators.last = last_1.last;
			var map_1 = map$1;
			operators.map = map_1.map;
			var mapTo_1 = mapTo$1;
			operators.mapTo = mapTo_1.mapTo;
			var materialize_1 = materialize$1;
			operators.materialize = materialize_1.materialize;
			var max_1 = max$1;
			operators.max = max_1.max;
			var merge_1 = merge$1;
			operators.merge = merge_1.merge;
			var mergeAll_1 = mergeAll$1;
			operators.mergeAll = mergeAll_1.mergeAll;
			var mergeMap_1 = mergeMap$1;
			operators.mergeMap = mergeMap_1.mergeMap;
			operators.flatMap = mergeMap_1.flatMap;
			var mergeMapTo_1 = mergeMapTo$1;
			operators.mergeMapTo = mergeMapTo_1.mergeMapTo;
			var mergeScan_1 = mergeScan$1;
			operators.mergeScan = mergeScan_1.mergeScan;
			var min_1 = min$1;
			operators.min = min_1.min;
			var multicast_1 = multicast$1;
			operators.multicast = multicast_1.multicast;
			var observeOn_1 = observeOn$1;
			operators.observeOn = observeOn_1.observeOn;
			var onErrorResumeNext_1 = onErrorResumeNext$1;
			operators.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;
			var pairwise_1 = pairwise$1;
			operators.pairwise = pairwise_1.pairwise;
			var partition_1 = partition$1;
			operators.partition = partition_1.partition;
			var pluck_1 = pluck$1;
			operators.pluck = pluck_1.pluck;
			var publish_1 = publish$1;
			operators.publish = publish_1.publish;
			var publishBehavior_1 = publishBehavior$1;
			operators.publishBehavior = publishBehavior_1.publishBehavior;
			var publishLast_1 = publishLast$1;
			operators.publishLast = publishLast_1.publishLast;
			var publishReplay_1 = publishReplay$1;
			operators.publishReplay = publishReplay_1.publishReplay;
			var race_1 = race$1;
			operators.race = race_1.race;
			var reduce_1 = reduce$1;
			operators.reduce = reduce_1.reduce;
			var repeat_1 = repeat$1;
			operators.repeat = repeat_1.repeat;
			var repeatWhen_1 = repeatWhen$1;
			operators.repeatWhen = repeatWhen_1.repeatWhen;
			var retry_1 = retry$1;
			operators.retry = retry_1.retry;
			var retryWhen_1 = retryWhen$1;
			operators.retryWhen = retryWhen_1.retryWhen;
			var refCount_1 = refCount$1;
			operators.refCount = refCount_1.refCount;
			var sample_1 = sample$1;
			operators.sample = sample_1.sample;
			var sampleTime_1 = sampleTime$1;
			operators.sampleTime = sampleTime_1.sampleTime;
			var scan_1 = scan$1;
			operators.scan = scan_1.scan;
			var sequenceEqual_1 = sequenceEqual$1;
			operators.sequenceEqual = sequenceEqual_1.sequenceEqual;
			var share_1 = share$1;
			operators.share = share_1.share;
			var shareReplay_1 = shareReplay$1;
			operators.shareReplay = shareReplay_1.shareReplay;
			var single_1 = single$1;
			operators.single = single_1.single;
			var skip_1 = skip$1;
			operators.skip = skip_1.skip;
			var skipLast_1 = skipLast$1;
			operators.skipLast = skipLast_1.skipLast;
			var skipUntil_1 = skipUntil$1;
			operators.skipUntil = skipUntil_1.skipUntil;
			var skipWhile_1 = skipWhile$1;
			operators.skipWhile = skipWhile_1.skipWhile;
			var startWith_1 = startWith$1;
			operators.startWith = startWith_1.startWith;
			var subscribeOn_1 = subscribeOn$1;
			operators.subscribeOn = subscribeOn_1.subscribeOn;
			var switchAll_1 = switchAll$1;
			operators.switchAll = switchAll_1.switchAll;
			var switchMap_1 = switchMap$1;
			operators.switchMap = switchMap_1.switchMap;
			var switchMapTo_1 = switchMapTo$1;
			operators.switchMapTo = switchMapTo_1.switchMapTo;
			var take_1 = take$1;
			operators.take = take_1.take;
			var takeLast_1 = takeLast$1;
			operators.takeLast = takeLast_1.takeLast;
			var takeUntil_1 = takeUntil$1;
			operators.takeUntil = takeUntil_1.takeUntil;
			var takeWhile_1 = takeWhile$1;
			operators.takeWhile = takeWhile_1.takeWhile;
			var tap_1 = tap$1;
			operators.tap = tap_1.tap;
			var throttle_1 = throttle;
			operators.throttle = throttle_1.throttle;
			var throttleTime_1 = throttleTime$1;
			operators.throttleTime = throttleTime_1.throttleTime;
			var throwIfEmpty_1 = throwIfEmpty$1;
			operators.throwIfEmpty = throwIfEmpty_1.throwIfEmpty;
			var timeInterval_1 = timeInterval$1;
			operators.timeInterval = timeInterval_1.timeInterval;
			var timeout_1 = timeout$1;
			operators.timeout = timeout_1.timeout;
			var timeoutWith_1 = timeoutWith$1;
			operators.timeoutWith = timeoutWith_1.timeoutWith;
			var timestamp_1 = timestamp$1;
			operators.timestamp = timestamp_1.timestamp;
			var toArray_1 = toArray$1;
			operators.toArray = toArray_1.toArray;
			var window_1 = window$2;
			operators.window = window_1.window;
			var windowCount_1 = windowCount$1;
			operators.windowCount = windowCount_1.windowCount;
			var windowTime_1 = windowTime$1;
			operators.windowTime = windowTime_1.windowTime;
			var windowToggle_1 = windowToggle$1;
			operators.windowToggle = windowToggle_1.windowToggle;
			var windowWhen_1 = windowWhen$1;
			operators.windowWhen = windowWhen_1.windowWhen;
			var withLatestFrom_1 = withLatestFrom$1;
			operators.withLatestFrom = withLatestFrom_1.withLatestFrom;
			var zip_1 = zip$1;
			operators.zip = zip_1.zip;
			var zipAll_1 = zipAll$1;
			operators.zipAll = zipAll_1.zipAll;

			Object.defineProperty(filter, "__esModule", { value: true });
			var operators_1 = operators;
			filter.filter = operators_1.filter;

			(function (exports) {
			function __export(m) {
			    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
			}
			Object.defineProperty(exports, "__esModule", { value: true });
			__export(filter);

			}(filter$1));

			var useEva_1 = mergeActions_1 = createAsyncActions_1 = createActions_1 = void 0;

			var _react = _interopRequireWildcard(React);

			var _Subject = Subject$3;

			var _filter = filter$1;

			function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

			function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

			var isFn = function isFn(val) {
			  return typeof val === "function";
			};

			var implementSymbol = Symbol["for"]("__REVA_IMPLEMENT__");
			var namesSymbol = Symbol["for"]("__REVA_NAMES__");
			var actionsSymbol$1 = Symbol["for"]("__REVA_ACTIONS");

			var createEva = function createEva(actions, effects, subscribes) {
			  subscribes = subscribes || {};

			  var subscription = function subscription() {
			    if (isFn(effects)) {
			      effects(function (type, $filter) {
			        if (!subscribes[type]) {
			          subscribes[type] = new _Subject.Subject();
			        }

			        if (isFn($filter)) {
			          return subscribes[type].pipe((0, _filter.filter)($filter));
			        }

			        return subscribes[type];
			      });
			    }
			  };

			  var dispatch = function dispatch(type) {
			    if (subscribes[type]) {
			      var _subscribes$type;

			      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			        args[_key - 1] = arguments[_key];
			      }

			      (_subscribes$type = subscribes[type]).next.apply(_subscribes$type, args);
			    }
			  };

			  dispatch.lazy = function (type, fn) {
			    if (subscribes[type] && isFn(fn)) {
			      subscribes[type].next(fn());
			    }
			  };

			  var implementAction = function implementAction(name, fn) {
			    if (actions && actions[implementSymbol]) {
			      actions[implementSymbol](name, fn);
			    }

			    return fn;
			  };

			  var implementActions = function implementActions(obj) {
			    var actions = {};

			    for (var name in obj) {
			      if (obj.hasOwnProperty(name) && isFn(obj[name])) {
			        actions[name] = implementAction(name, obj[name]);
			      }
			    }

			    return actions;
			  };

			  return {
			    dispatch: dispatch,
			    subscription: subscription,
			    implementActions: implementActions
			  };
			};

			var ActionFactory = function ActionFactory(names, isAsync) {
			  var _this = this;

			  if (isAsync === void 0) {
			    isAsync = true;
			  }

			  var resolvers = {};
			  var actions = {};
			  names.forEach(function (name) {
			    _this[name] = function () {
			      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
			        args[_key2] = arguments[_key2];
			      }

			      if (isAsync) {
			        return new Promise(function (resolve, reject) {
			          if (actions[name]) {
			            resolve(actions[name].apply(actions, args));
			          } else {
			            resolvers[name] = resolvers[name] || [];
			            resolvers[name].push({
			              resolve: resolve,
			              args: args,
			              reject: reject
			            });
			          }
			        });
			      } else {
			        if (actions[name]) {
			          return actions[name].apply(actions, args);
			        } else {
			          resolvers[name] = resolvers[name] || [];
			          resolvers[name].push({
			            resolve: null,
			            args: args,
			            reject: null
			          });

			          if (console && console.error) {
			            console.error("The action \"" + name + "\" is not implemented! We recommend that you call this method by `createAsyncFormActions`");
			          }
			        }
			      }
			    };
			  });
			  this[actionsSymbol$1] = true;
			  this[namesSymbol] = names;

			  this[implementSymbol] = function (name, fn) {
			    if (resolvers[name] && resolvers[name].length) {
			      setTimeout(function () {
			        for (var i = 0; i < resolvers[name].length; i++) {
			          var _resolvers$name$i = resolvers[name][i],
			              resolve = _resolvers$name$i.resolve,
			              args = _resolvers$name$i.args;
			          if (resolve) resolve(fn.apply(void 0, args));else {
			            fn.apply(void 0, args);
			          }
			        }

			        resolvers[name].length = 0;
			      });
			    }

			    actions[name] = fn;
			    return fn;
			  };
			};

			var createActions = function createActions() {
			  for (var _len3 = arguments.length, names = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
			    names[_key3] = arguments[_key3];
			  }

			  return new ActionFactory(names, false);
			};

			var createActions_1 = createActions;

			var createAsyncActions = function createAsyncActions() {
			  for (var _len4 = arguments.length, names = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
			    names[_key4] = arguments[_key4];
			  }

			  return new ActionFactory(names, true);
			};

			var createAsyncActions_1 = createAsyncActions;

			var mergeActions = function mergeActions() {
			  for (var _len5 = arguments.length, all = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
			    all[_key5] = arguments[_key5];
			  }

			  var implement = function implement(name, fn) {
			    all.forEach(function (actions) {
			      if (actions[implementSymbol] && actions[namesSymbol].indexOf(name) > -1) {
			        actions[implementSymbol](name, fn);
			      }
			    });
			    return fn;
			  };

			  var result = {};

			  for (var i = 0; i < all.length; i++) {
			    var actions = all[i];
			    result[namesSymbol] = result[namesSymbol] || [];
			    result[namesSymbol] = result[namesSymbol].concat(actions[namesSymbol]);
			    var key = void 0;

			    for (key in actions) {
			      if (actions.hasOwnProperty(key) && key !== implementSymbol && key !== namesSymbol) {
			        result[key] = actions[key];
			      }
			    }
			  }

			  result[actionsSymbol$1] = true;
			  result[implementSymbol] = implement;
			  return result;
			};

			var mergeActions_1 = mergeActions;

			var useEva = function useEva(_temp) {
			  var _ref = _temp === void 0 ? {} : _temp,
			      actions = _ref.actions,
			      effects = _ref.effects,
			      subscribes = _ref.subscribes,
			      _ref$autoRun = _ref.autoRun,
			      autoRun = _ref$autoRun === void 0 ? true : _ref$autoRun;

			  return _react["default"].useMemo(function () {
			    var manager = createEva(actions, effects, subscribes);

			    if (autoRun) {
			      manager.subscription();
			    }

			    return manager;
			  }, []);
			};

			useEva_1 = useEva;

			const createSchemaFormActions = () => mergeActions_1(createFormActions$1(), createActions_1("getSchema", "getFormSchema"));
			const createAsyncSchemaFormActions = () => mergeActions_1(createAsyncFormActions$1(), createAsyncActions_1("getSchema", "getFormSchema"));

			var __defProp$6 = Object.defineProperty;
			var __getOwnPropSymbols$6 = Object.getOwnPropertySymbols;
			var __hasOwnProp$6 = Object.prototype.hasOwnProperty;
			var __propIsEnum$6 = Object.prototype.propertyIsEnumerable;
			var __defNormalProp$6 = (obj, key, value) => key in obj ? __defProp$6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
			var __spreadValues$6 = (a, b) => {
			  for (var prop in b || (b = {}))
			    if (__hasOwnProp$6.call(b, prop))
			      __defNormalProp$6(a, prop, b[prop]);
			  if (__getOwnPropSymbols$6)
			    for (var prop of __getOwnPropSymbols$6(b)) {
			      if (__propIsEnum$6.call(b, prop))
			        __defNormalProp$6(a, prop, b[prop]);
			    }
			  return a;
			};
			var __objRest$3 = (source, exclude) => {
			  var target = {};
			  for (var prop in source)
			    if (__hasOwnProp$6.call(source, prop) && exclude.indexOf(prop) < 0)
			      target[prop] = source[prop];
			  if (source != null && __getOwnPropSymbols$6)
			    for (var prop of __getOwnPropSymbols$6(source)) {
			      if (exclude.indexOf(prop) < 0 && __propIsEnum$6.call(source, prop))
			        target[prop] = source[prop];
			    }
			  return target;
			};
			const numberRE = /^\d+$/;
			const findProperty = (object, propertyKey) => {
			  if (!object)
			    return object;
			  if (object[propertyKey]) {
			    return object[propertyKey];
			  }
			  for (let key in object) {
			    if (FormPath.parse(key).match(`[[${propertyKey}]]`)) {
			      return object[key];
			    }
			  }
			};
			const filterProperties = (object, keys) => {
			  let result = {};
			  for (let key in object) {
			    if (!keys.includes(key) && Object.hasOwnProperty.call(object, key)) {
			      result[key] = object[key];
			    }
			  }
			  return result;
			};
			const COMPAT_FORM_ITEM_PROPS = [
			  "required",
			  "prefix",
			  "labelAlign",
			  "hasFeedback",
			  "labelCol",
			  "wrapperCol",
			  "label",
			  "help",
			  "labelTextAlign",
			  "fullWidth",
			  "extra",
			  "size",
			  "asterisk",
			  "labelWidth",
			  "device",
			  "isPreview",
			  "renderPreview",
			  "validateState",
			  "colon",
			  "htmlFor",
			  "validateStatus",
			  "prefixCls",
			  "triggerType",
			  "itemStyle",
			  "itemClassName",
			  "addonAfter"
			];
			const _Schema = class {
			  constructor(json, parent, key) {
			    this._isJSONSchemaObject = true;
			    this.version = "1.0";
			    if (parent) {
			      this.parent = parent;
			    }
			    if (key) {
			      this.key = key;
			    }
			    if (this.parent && this.parent.isArray()) {
			      this.path = this.parent.path + ".*";
			    } else {
			      if (this.parent) {
			        this.path = this.parent.path ? this.parent.path + "." + this.key : this.key;
			      } else {
			        this.path = "";
			      }
			    }
			    return this.fromJSON(json);
			  }
			  get(path) {
			    if (!path) {
			      return this;
			    }
			    let res = this;
			    let depth = 0;
			    let parsed = FormPath.parse(path);
			    parsed.forEach((key) => {
			      if (res && !isEmpty$2(res.properties)) {
			        res = findProperty(res.properties, key) || findProperty(res.properties, parsed.segments.slice(depth).join("."));
			      } else if (res && !isEmpty$2(res.items) && numberRE.test(key)) {
			        res = isArr(res.items) ? findProperty(res.items, key) : res.items;
			      }
			      depth++;
			    });
			    return res;
			  }
			  merge(spec) {
			    if (spec instanceof _Schema) {
			      Object.assign(this, spec.getSelfProps());
			    } else {
			      Object.assign(this, spec);
			    }
			    return this;
			  }
			  getEmptyValue() {
			    if (this.type === "string") {
			      return "";
			    }
			    if (this.type === "array") {
			      return [];
			    }
			    if (this.type === "object") {
			      return {};
			    }
			    if (this.type === "number") {
			      return 0;
			    }
			  }
			  getSelfProps() {
			    const _a = this, props = __objRest$3(_a, [
			      "_isJSONSchemaObject",
			      "properties",
			      "additionalProperties",
			      "additionalItems",
			      "patternProperties",
			      "items",
			      "path",
			      "parent"
			    ]);
			    return props;
			  }
			  getExtendsRules() {
			    let rules = [];
			    if (this.format) {
			      rules.push({ format: this.format });
			    }
			    if (isValid(this.maxItems)) {
			      rules.push({ max: this.maxItems });
			    }
			    if (isValid(this.minItems)) {
			      rules.push({ min: this.minItems });
			    }
			    if (isValid(this.maxLength)) {
			      rules.push({ max: this.maxLength });
			    }
			    if (isValid(this.minLength)) {
			      rules.push({ min: this.minLength });
			    }
			    if (isValid(this.maximum)) {
			      rules.push({ maximum: this.maximum });
			    }
			    if (isValid(this.minimum)) {
			      rules.push({ minimum: this.minimum });
			    }
			    if (isValid(this.exclusiveMaximum)) {
			      rules.push({ exclusiveMaximum: this.exclusiveMaximum });
			    }
			    if (isValid(this.exclusiveMinimum)) {
			      rules.push({ exclusiveMinimum: this.exclusiveMinimum });
			    }
			    if (isValid(this.pattern)) {
			      rules.push({ pattern: this.pattern });
			    }
			    if (isValid(this.const)) {
			      rules.push({
			        validator: (value) => {
			          return value === this.const ? "" : getMessage("schema.const");
			        }
			      });
			    }
			    if (isValid(this.multipleOf)) {
			      rules.push({
			        validator: (value) => {
			          return value % this.multipleOf === 0 ? "" : getMessage("schema.multipleOf");
			        }
			      });
			    }
			    if (isValid(this.maxProperties)) {
			      rules.push({
			        validator: (value) => {
			          return Object.keys(value || {}).length <= this.maxProperties ? "" : getMessage("schema.maxProperties");
			        }
			      });
			    }
			    if (isValid(this.minProperties)) {
			      rules.push({
			        validator: (value) => {
			          return Object.keys(value || {}).length >= this.minProperties ? "" : getMessage("schema.minProperties");
			        }
			      });
			    }
			    if (isValid(this.uniqueItems) && this.uniqueItems) {
			      rules.push({
			        validator: (value) => {
			          value = toArr(value);
			          return value.some((item, index) => {
			            for (let start = index; start < value.length; start++) {
			              if (isEqual(value[start], item)) {
			                return false;
			              }
			            }
			          }) ? getMessage("schema.uniqueItems") : "";
			        }
			      });
			    }
			    if (isValid(this["x-rules"])) {
			      rules = rules.concat(this["x-rules"]);
			    }
			    return rules;
			  }
			  getExtendsRequired() {
			    var _a, _b;
			    if (isBool(this.required)) {
			      return this.required;
			    } else if (isArr((_a = this.parent) == null ? void 0 : _a.required) && ((_b = this.parent) == null ? void 0 : _b.required.includes(this.key))) {
			      return true;
			    }
			  }
			  getExtendsEditable() {
			    const { editable } = this.getExtendsComponentProps();
			    if (isValid(this.editable)) {
			      return this.editable;
			    } else if (isValid(editable)) {
			      return editable;
			    } else if (isValid(this.readOnly)) {
			      return !this.readOnly;
			    }
			  }
			  getExtendsVisible() {
			    const { visible } = this.getExtendsComponentProps();
			    if (isValid(this.visible)) {
			      return this.visible;
			    } else if (isValid(visible)) {
			      return visible;
			    }
			  }
			  getExtendsDisplay() {
			    const { display } = this.getExtendsComponentProps();
			    if (isValid(this.display)) {
			      return this.display;
			    } else if (isValid(display)) {
			      return display;
			    }
			  }
			  getMegaLayoutProps() {
			    return this["x-mega-props"] || this.getExtendsComponentProps()["mega-props"] || {};
			  }
			  getExtendsTriggerType() {
			    const itemProps = this.getExtendsItemProps();
			    const props = this.getExtendsProps();
			    const componentProps = this.getExtendsComponentProps();
			    if (this.triggerType) {
			      return this.triggerType;
			    }
			    if (itemProps.triggerType) {
			      return itemProps.triggerType;
			    } else if (props.triggerType) {
			      return props.triggerType;
			    } else if (componentProps.triggerType) {
			      return componentProps.triggerType;
			    }
			  }
			  getExtendsItemProps() {
			    if (isValid(this["x-item-props"])) {
			      deprecate("x-item-props is deprecate in future, Please do not use it.");
			    }
			    return this["x-item-props"] || {};
			  }
			  getExtendsComponent() {
			    return this["x-component"];
			  }
			  getExtendsRenderer() {
			    if (isValid(this["x-render"])) {
			      deprecate("x-render is deprecate in future, Please do not use it.");
			    }
			    return this["x-render"];
			  }
			  getExtendsEffect() {
			    return this["x-effect"];
			  }
			  getExtendsProps() {
			    return this["x-props"] || {};
			  }
			  getExtendsComponentProps() {
			    return __spreadValues$6(__spreadValues$6({}, filterProperties(this["x-props"], COMPAT_FORM_ITEM_PROPS)), this["x-component-props"]);
			  }
			  getExtendsLinkages() {
			    return this["x-linkages"];
			  }
			  setProperty(key, schema) {
			    this.properties = this.properties || {};
			    this.properties[key] = new _Schema(schema, this, key);
			    return this.properties[key];
			  }
			  setProperties(properties) {
			    each(properties, (schema, key) => {
			      this.setProperty(key, schema);
			    });
			    return this.properties;
			  }
			  setArrayItems(schema) {
			    this.items = new _Schema(schema, this);
			    return this.items;
			  }
			  toJSON() {
			    const result = this.getSelfProps();
			    if (isValid(this.properties)) {
			      result.properties = map$2(this.properties, (schema) => {
			        return schema.toJSON();
			      });
			    }
			    if (isValid(this.items)) {
			      result.items = isArr(this.items) ? this.items.map((schema) => schema.toJSON()) : this.items.toJSON();
			    }
			    if (isValid(this.additionalItems)) {
			      result.additionalItems = this.additionalItems.toJSON();
			    }
			    if (isValid(this.additionalProperties)) {
			      result.additionalProperties = this.additionalProperties.toJSON();
			    }
			    if (isValid(this.patternProperties)) {
			      result.patternProperties = map$2(this.patternProperties, (schema) => {
			        return schema.toJSON();
			      });
			    }
			    return result;
			  }
			  fromJSON(json = {}) {
			    if (typeof json === "boolean")
			      return json;
			    if (json instanceof _Schema) {
			      Object.assign(this, json);
			      return this;
			    } else {
			      Object.assign(this, json);
			    }
			    if (isValid(json.type)) {
			      this.type = lowercase(String(json.type));
			    }
			    if (isValid(json["x-component"])) {
			      this["x-component"] = lowercase(json["x-component"]);
			    }
			    if (!isEmpty$2(json.properties)) {
			      this.properties = map$2(json.properties, (item, key) => {
			        return new _Schema(item, this, key);
			      });
			      if (isValid(json.additionalProperties)) {
			        this.additionalProperties = new _Schema(json.additionalProperties, this);
			      }
			      if (isValid(json.patternProperties)) {
			        this.patternProperties = map$2(json.patternProperties, (item, key) => {
			          return new _Schema(item, this, key);
			        });
			      }
			    } else if (!isEmpty$2(json.items)) {
			      this.items = isArr(json.items) ? map$2(json.items, (item) => new _Schema(item, this)) : new _Schema(json.items, this);
			      if (isValid(json.additionalItems)) {
			        this.additionalItems = new _Schema(json.additionalItems, this);
			      }
			    }
			    return this;
			  }
			  isObject() {
			    return this.type === "object";
			  }
			  isArray() {
			    return this.type === "array";
			  }
			  mapProperties(callback) {
			    return this.getOrderProperties().map(({ schema, key }) => {
			      return callback(schema, key);
			    });
			  }
			  getOrderProperties() {
			    return _Schema.getOrderProperties(this);
			  }
			  unrelease_getOrderPatternProperties() {
			    return _Schema.getOrderProperties(this, "patternProperties");
			  }
			  unrelease_mapPatternProperties(callback) {
			    return this.unrelease_getOrderPatternProperties().map(({ schema, key }) => {
			      return callback(schema, key);
			    });
			  }
			};
			let Schema = exports('Schema', _Schema);
			Schema.getOrderProperties = (schema = {}, propertiesName = "properties") => {
			  const newSchema = new _Schema(schema);
			  const orderProperties = [];
			  const unorderProperties = [];
			  each(newSchema[propertiesName], (item, key) => {
			    const index = item["x-index"];
			    if (!isNaN(index)) {
			      orderProperties[index] = { schema: item, key };
			    } else {
			      unorderProperties.push({ schema: item, key });
			    }
			  });
			  return orderProperties.concat(unorderProperties).filter((item) => !!item);
			};

			/**
			 * Special language-specific overrides.
			 *
			 * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
			 *
			 * @type {Object}
			 */

			var LANGUAGES$1 = {
			  tr: {
			    regexp: /[\u0069]/g,
			    map: {
			      '\u0069': '\u0130'
			    }
			  },
			  az: {
			    regexp: /[\u0069]/g,
			    map: {
			      '\u0069': '\u0130'
			    }
			  },
			  lt: {
			    regexp: /[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,
			    map: {
			      '\u0069\u0307': '\u0049',
			      '\u006A\u0307': '\u004A',
			      '\u012F\u0307': '\u012E',
			      '\u0069\u0307\u0300': '\u00CC',
			      '\u0069\u0307\u0301': '\u00CD',
			      '\u0069\u0307\u0303': '\u0128'
			    }
			  }
			};

			/**
			 * Upper case a string.
			 *
			 * @param  {String} str
			 * @return {String}
			 */
			var upperCase$2 = function (str, locale) {
			  var lang = LANGUAGES$1[locale];

			  str = str == null ? '' : String(str);

			  if (lang) {
			    str = str.replace(lang.regexp, function (m) { return lang.map[m] });
			  }

			  return str.toUpperCase()
			};

			/**
			 * Special language-specific overrides.
			 *
			 * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
			 *
			 * @type {Object}
			 */

			var LANGUAGES = {
			  tr: {
			    regexp: /\u0130|\u0049|\u0049\u0307/g,
			    map: {
			      '\u0130': '\u0069',
			      '\u0049': '\u0131',
			      '\u0049\u0307': '\u0069'
			    }
			  },
			  az: {
			    regexp: /[\u0130]/g,
			    map: {
			      '\u0130': '\u0069',
			      '\u0049': '\u0131',
			      '\u0049\u0307': '\u0069'
			    }
			  },
			  lt: {
			    regexp: /[\u0049\u004A\u012E\u00CC\u00CD\u0128]/g,
			    map: {
			      '\u0049': '\u0069\u0307',
			      '\u004A': '\u006A\u0307',
			      '\u012E': '\u012F\u0307',
			      '\u00CC': '\u0069\u0307\u0300',
			      '\u00CD': '\u0069\u0307\u0301',
			      '\u0128': '\u0069\u0307\u0303'
			    }
			  }
			};

			/**
			 * Lowercase a string.
			 *
			 * @param  {String} str
			 * @return {String}
			 */
			var lowerCase$1 = function (str, locale) {
			  var lang = LANGUAGES[locale];

			  str = str == null ? '' : String(str);

			  if (lang) {
			    str = str.replace(lang.regexp, function (m) { return lang.map[m] });
			  }

			  return str.toLowerCase()
			};

			var nonWordRegexp = /[^A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]+/g;

			var camelCaseRegexp = /([a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])/g;

			var camelCaseUpperRegexp = /([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A][a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A])/g;

			var lowerCase = lowerCase$1;

			var NON_WORD_REGEXP = nonWordRegexp;
			var CAMEL_CASE_REGEXP = camelCaseRegexp;
			var CAMEL_CASE_UPPER_REGEXP = camelCaseUpperRegexp;

			/**
			 * Sentence case a string.
			 *
			 * @param  {string} str
			 * @param  {string} locale
			 * @param  {string} replacement
			 * @return {string}
			 */
			var noCase$1 = function (str, locale, replacement) {
			  if (str == null) {
			    return ''
			  }

			  replacement = typeof replacement !== 'string' ? ' ' : replacement;

			  function replace (match, index, value) {
			    if (index === 0 || index === (value.length - match.length)) {
			      return ''
			    }

			    return replacement
			  }

			  str = String(str)
			    // Support camel case ("camelCase" -> "camel Case").
			    .replace(CAMEL_CASE_REGEXP, '$1 $2')
			    // Support odd camel case ("CAMELCase" -> "CAMEL Case").
			    .replace(CAMEL_CASE_UPPER_REGEXP, '$1 $2')
			    // Remove all non-word characters and replace with a single space.
			    .replace(NON_WORD_REGEXP, replace);

			  // Lower case the entire string.
			  return lowerCase(str, locale)
			};

			var upperCase$1 = upperCase$2;
			var noCase = noCase$1;

			/**
			 * Camel case a string.
			 *
			 * @param  {string} value
			 * @param  {string} [locale]
			 * @return {string}
			 */
			var camelCase$1 = function (value, locale, mergeNumbers) {
			  var result = noCase(value, locale);

			  // Replace periods between numeric entities with an underscore.
			  if (!mergeNumbers) {
			    result = result.replace(/ (?=\d)/g, '_');
			  }

			  // Replace spaces between words with an upper cased character.
			  return result.replace(/ (.)/g, function (m, $1) {
			    return upperCase$1($1, locale)
			  })
			};

			var upperCase = upperCase$2;

			/**
			 * Upper case the first character of a string.
			 *
			 * @param  {String} str
			 * @return {String}
			 */
			var upperCaseFirst$1 = function (str, locale) {
			  if (str == null) {
			    return ''
			  }

			  str = String(str);

			  return upperCase(str.charAt(0), locale) + str.substr(1)
			};

			var camelCase = camelCase$1;
			var upperCaseFirst = upperCaseFirst$1;

			/**
			 * Pascal case a string.
			 *
			 * @param  {string}  value
			 * @param  {string}  [locale]
			 * @param  {boolean} [mergeNumbers]
			 * @return {string}
			 */
			var pascalCase = function (value, locale, mergeNumbers) {
			  return upperCaseFirst(camelCase(value, locale, mergeNumbers), locale)
			};

			const registry = {
			  fields: {},
			  virtualFields: {},
			  wrappers: [],
			  formItemComponent: ({ children }) => children,
			  formComponent: "form",
			  previewText: null
			};
			const getRegistry = exports('getRegistry', () => {
			  return {
			    fields: registry.fields,
			    virtualFields: registry.virtualFields,
			    formItemComponent: registry.formItemComponent,
			    formComponent: registry.formComponent,
			    previewText: registry.previewText
			  };
			});
			const cleanRegistry = exports('cleanRegistry', () => {
			  registry.fields = {};
			  registry.virtualFields = {};
			  registry.wrappers = [];
			  registry.previewText = null;
			});
			function registerFormComponent(component) {
			  if (isFn$1(component)) {
			    registry.formComponent = component;
			  }
			}
			function compose(payload, args, revert) {
			  return reduce$2(args, (buf, fn) => {
			    return isFn$1(fn) ? fn(buf) : buf;
			  }, payload, revert);
			}
			function registerFormField(name, component, noWrapper = false) {
			  if (name && (isFn$1(component) || typeof component.styledComponentId === "string")) {
			    name = lowercase(name);
			    if (registry.fields[name]) {
			      log.warn("Component registration naming conflict. Please change the name. Globally registered components will no longer support overlay registration in the future.");
			    }
			    if (noWrapper) {
			      registry.fields[name] = component;
			      registry.fields[name].__WRAPPERS__ = [];
			    } else {
			      registry.fields[name] = compose(component, registry.wrappers, true);
			      registry.fields[name].__WRAPPERS__ = registry.wrappers;
			    }
			    registry.fields[name].displayName = pascalCase(name);
			  }
			}
			function registerFormFields(object) {
			  each(object, (component, key) => {
			    registerFormField(key, component);
			  });
			}
			function registerVirtualBox(name, component) {
			  if (name && (isFn$1(component) || typeof component.styledComponentId === "string")) {
			    name = lowercase(name);
			    registry.virtualFields[name] = component;
			    registry.virtualFields[name].displayName = pascalCase(name);
			  }
			}
			function registerFormItemComponent(component) {
			  if (isFn$1(component)) {
			    registry.formItemComponent = component;
			  }
			}
			const registerFieldMiddleware = exports('registerFieldMiddleware', deprecate(function registerFieldMiddleware2(...wrappers) {
			  registry.wrappers = registry.wrappers.concat(wrappers);
			  each(registry.fields, (component, key) => {
			    if (!component.__WRAPPERS__.some((wrapper) => wrappers.indexOf(wrapper) > -1)) {
			      registry.fields[key] = compose(registry.fields[key], wrappers, true);
			      registry.fields[key].__WRAPPERS__ = wrappers;
			    }
			  });
			}));
			function registerPreviewTextComponent(component) {
			  if (isFn$1(component)) {
			    registry.previewText = component;
			  }
			}

			var reactIs$1 = {exports: {}};

			var reactIs_production_min = {};

			/** @license React v16.13.1
			 * react-is.production.min.js
			 *
			 * Copyright (c) Facebook, Inc. and its affiliates.
			 *
			 * This source code is licensed under the MIT license found in the
			 * LICENSE file in the root directory of this source tree.
			 */
			var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
			Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
			function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;
			reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
			reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
			reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;

			{
			  reactIs$1.exports = reactIs_production_min;
			}

			var reactIs = reactIs$1.exports;

			/**
			 * Copyright 2015, Yahoo! Inc.
			 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
			 */
			var REACT_STATICS = {
			  childContextTypes: true,
			  contextType: true,
			  contextTypes: true,
			  defaultProps: true,
			  displayName: true,
			  getDefaultProps: true,
			  getDerivedStateFromError: true,
			  getDerivedStateFromProps: true,
			  mixins: true,
			  propTypes: true,
			  type: true
			};
			var KNOWN_STATICS = {
			  name: true,
			  length: true,
			  prototype: true,
			  caller: true,
			  callee: true,
			  arguments: true,
			  arity: true
			};
			var FORWARD_REF_STATICS = {
			  '$$typeof': true,
			  render: true,
			  defaultProps: true,
			  displayName: true,
			  propTypes: true
			};
			var MEMO_STATICS = {
			  '$$typeof': true,
			  compare: true,
			  defaultProps: true,
			  displayName: true,
			  propTypes: true,
			  type: true
			};
			var TYPE_STATICS = {};
			TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
			TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

			function getStatics(component) {
			  // React v16.11 and below
			  if (reactIs.isMemo(component)) {
			    return MEMO_STATICS;
			  } // React v16.12 and above


			  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
			}

			var defineProperty = Object.defineProperty;
			var getOwnPropertyNames = Object.getOwnPropertyNames;
			var getOwnPropertySymbols = Object.getOwnPropertySymbols;
			var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
			var getPrototypeOf = Object.getPrototypeOf;
			var objectPrototype = Object.prototype;
			function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
			  if (typeof sourceComponent !== 'string') {
			    // don't hoist over string (html) components
			    if (objectPrototype) {
			      var inheritedComponent = getPrototypeOf(sourceComponent);

			      if (inheritedComponent && inheritedComponent !== objectPrototype) {
			        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
			      }
			    }

			    var keys = getOwnPropertyNames(sourceComponent);

			    if (getOwnPropertySymbols) {
			      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
			    }

			    var targetStatics = getStatics(targetComponent);
			    var sourceStatics = getStatics(sourceComponent);

			    for (var i = 0; i < keys.length; ++i) {
			      var key = keys[i];

			      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
			        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

			        try {
			          // Avoid failures from read-only properties
			          defineProperty(targetComponent, key, descriptor);
			        } catch (e) {}
			      }
			    }
			  }

			  return targetComponent;
			}

			var hoistNonReactStatics_cjs = hoistNonReactStatics;

			var __defProp$5 = Object.defineProperty;
			var __defProps$5 = Object.defineProperties;
			var __getOwnPropDescs$5 = Object.getOwnPropertyDescriptors;
			var __getOwnPropSymbols$5 = Object.getOwnPropertySymbols;
			var __hasOwnProp$5 = Object.prototype.hasOwnProperty;
			var __propIsEnum$5 = Object.prototype.propertyIsEnumerable;
			var __defNormalProp$5 = (obj, key, value) => key in obj ? __defProp$5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
			var __spreadValues$5 = (a, b) => {
			  for (var prop in b || (b = {}))
			    if (__hasOwnProp$5.call(b, prop))
			      __defNormalProp$5(a, prop, b[prop]);
			  if (__getOwnPropSymbols$5)
			    for (var prop of __getOwnPropSymbols$5(b)) {
			      if (__propIsEnum$5.call(b, prop))
			        __defNormalProp$5(a, prop, b[prop]);
			    }
			  return a;
			};
			var __spreadProps$5 = (a, b) => __defProps$5(a, __getOwnPropDescs$5(b));
			const createEnum = (enums) => {
			  if (isArr(enums)) {
			    return enums.map((item) => {
			      if (typeof item === "object") {
			        return item;
			      } else {
			        return {
			          label: item,
			          value: item
			        };
			      }
			    });
			  }
			  return [];
			};
			const bindEffects = (props, fieldProps, effect, notify) => {
			  each(effect((type, payload) => notify(type, { payload, name: fieldProps.name, path: fieldProps.path }), __spreadValues$5({}, props)), (event, key) => {
			    const prevEvent = key === "onChange" ? props[key] : void 0;
			    props[key] = (...args) => {
			      if (isFn$1(event)) {
			        event(...args);
			      }
			      if (isFn$1(prevEvent)) {
			        return prevEvent(...args);
			      }
			    };
			  });
			  return props;
			};
			const connect = exports('connect', (options) => {
			  options = defaults({
			    valueName: "value",
			    eventName: "onChange"
			  }, options);
			  return (Component) => {
			    const ConnectedComponent = (fieldProps) => {
			      const { value, name, mutators, form, editable, props } = fieldProps;
			      const schema = new Schema(props);
			      const schemaComponentProps = schema.getExtendsComponentProps();
			      let componentProps = __spreadProps$5(__spreadValues$5(__spreadValues$5({}, options.defaultProps), schemaComponentProps), {
			        [options.valueName]: value,
			        [options.eventName]: (event, ...args) => {
			          mutators.change(options.getValueFromEvent ? options.getValueFromEvent.call({
			            props: componentProps,
			            schema,
			            field: fieldProps
			          }, event, ...args) : event, ...args);
			          if (isFn$1(schemaComponentProps[options.eventName])) {
			            return schemaComponentProps[options.eventName](event, ...args);
			          }
			        },
			        onBlur: (...args) => {
			          mutators.blur();
			          if (isFn$1(schemaComponentProps["onBlur"])) {
			            return schemaComponentProps["onBlur"](...args);
			          }
			        },
			        onFocus: (...args) => {
			          mutators.focus();
			          if (isFn$1(schemaComponentProps["onFocus"])) {
			            return schemaComponentProps["onFocus"](...args);
			          }
			        }
			      });
			      if (isValid(editable)) {
			        if (isFn$1(editable)) {
			          if (!editable(name)) {
			            componentProps.disabled = true;
			            componentProps.readOnly = true;
			          }
			        } else if (editable === false) {
			          componentProps.disabled = true;
			          componentProps.readOnly = true;
			        }
			      }
			      const extendsEffect = schema.getExtendsEffect();
			      if (isFn$1(extendsEffect)) {
			        componentProps = bindEffects(componentProps, fieldProps, extendsEffect, form.notify);
			      }
			      if (isFn$1(options.getProps)) {
			        const newProps = options.getProps(componentProps, fieldProps);
			        if (isValid(newProps)) {
			          componentProps = newProps;
			        }
			      }
			      if (isArr(props.enum) && !componentProps.dataSource) {
			        componentProps.dataSource = createEnum(props.enum);
			      } else if (componentProps.dataSource) {
			        componentProps.dataSource = createEnum(componentProps.dataSource);
			      }
			      if (isValid(componentProps.editable)) {
			        delete componentProps.editable;
			      }
			      const megaProps = schema.getMegaLayoutProps();
			      const { full, size } = useLayout(megaProps);
			      if (full) {
			        componentProps.style = __spreadProps$5(__spreadValues$5({}, componentProps.style || {}), {
			          width: "100%",
			          flex: "1 1 0%"
			        });
			      }
			      if (size) {
			        componentProps.size = size;
			      }
			      return React.createElement(isFn$1(options.getComponent) ? options.getComponent(Component, props, fieldProps) : Component, componentProps);
			    };
			    Object.assign(ConnectedComponent, {
			      __ALREADY_CONNECTED__: true
			    });
			    if (Component) {
			      hoistNonReactStatics_cjs(ConnectedComponent, Component);
			    }
			    return ConnectedComponent;
			  };
			});

			const _JSONCondition = class {
			  constructor(json, value) {
			    this.complieAtom = (source = []) => {
			      switch (source[0]) {
			        case "&&":
			          return source.slice(1).every(this.complieAtom);
			        case "||":
			          return source.slice(1).some(this.complieAtom);
			        case ">":
			          return Number(this.value) > Number(source[1]);
			        case "<":
			          return Number(this.value) < Number(source[1]);
			        case ">=":
			          return Number(this.value) >= Number(source[1]);
			        case "<=":
			          return Number(this.value) <= Number(source[1]);
			        case "=":
			        case "==":
			          return isEqual(this.value, source[1]);
			        case "!=":
			          return !isEqual(this.value, source[1]);
			        case "!":
			          return !this.value;
			        case "includes":
			          if (isArr(this.value)) {
			            return this.value.indexOf(source[1]) > -1;
			          }
			          return String(this.value).includes(source[1]);
			        case "pattern":
			          return new RegExp(source[1]).test(this.value);
			        case "startWith":
			          return String(this.value).startsWith(source[1]);
			        case "endWith":
			          return String(this.value).endsWith(source[1]);
			      }
			      return false;
			    };
			    this.source = json || [];
			    this.value = value;
			  }
			  complie() {
			    return this.complieAtom(this.source);
			  }
			};
			let JSONCondition = exports('JSONCondition', _JSONCondition);
			JSONCondition.calculate = (condition, value) => {
			  if (isArr(condition)) {
			    return new _JSONCondition(condition, value).complie();
			  }
			  if (isBool(condition))
			    return condition;
			  return false;
			};

			const ExpRE = /^\s*\{\{(.*)\}\}\s*$/;
			const actionsSymbol = Symbol.for("__REVA_ACTIONS");
			const complieExpression = exports('complieExpression', (source, context, exclude) => {
			  const seenObjects = [];
			  const complie = (source2) => {
			    if (isStr(source2)) {
			      const matched = source2.match(ExpRE);
			      if (!matched)
			        return source2;
			      const vars = Object.keys(context || {});
			      const params = vars.map((key) => context[key]);
			      return new Function(...vars, `return (${matched[1]});`)(...params);
			    } else if (isArr(source2)) {
			      return source2.map((value) => complie(value));
			    } else if (isPlainObj(source2)) {
			      if ("$$typeof" in source2 && "_owner" in source2) {
			        return source2;
			      }
			      if (source2[actionsSymbol]) {
			        return source2;
			      }
			      if (source2["_isAMomentObject"]) {
			        return source2;
			      }
			      if (source2["_isJSONSchemaObject"]) {
			        return source2;
			      }
			      if (BigData.isBigData(source2)) {
			        return source2;
			      }
			      if (isFn$1(source2["toJS"])) {
			        return source2;
			      }
			      if (isFn$1(source2["toJSON"])) {
			        return source2;
			      }
			      if (seenObjects.includes(source2)) {
			        return source2;
			      }
			      seenObjects.push(source2);
			      return reduce$2(source2, (buf, value, key) => {
			        if (isFn$1(exclude)) {
			          if (exclude(key, value)) {
			            buf[key] = value;
			            return buf;
			          }
			        }
			        if (key == "x-linkages") {
			          buf[key] = value;
			          return buf;
			        }
			        if (value && value["_owner"] && value["$$typeof"]) {
			          buf[key] = value;
			          return buf;
			        }
			        buf[key] = complie(value);
			        return buf;
			      }, {});
			    }
			    return source2;
			  };
			  return complie(source);
			});

			var __defProp$4 = Object.defineProperty;
			var __defProps$4 = Object.defineProperties;
			var __getOwnPropDescs$4 = Object.getOwnPropertyDescriptors;
			var __getOwnPropSymbols$4 = Object.getOwnPropertySymbols;
			var __hasOwnProp$4 = Object.prototype.hasOwnProperty;
			var __propIsEnum$4 = Object.prototype.propertyIsEnumerable;
			var __defNormalProp$4 = (obj, key, value) => key in obj ? __defProp$4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
			var __spreadValues$4 = (a, b) => {
			  for (var prop in b || (b = {}))
			    if (__hasOwnProp$4.call(b, prop))
			      __defNormalProp$4(a, prop, b[prop]);
			  if (__getOwnPropSymbols$4)
			    for (var prop of __getOwnPropSymbols$4(b)) {
			      if (__propIsEnum$4.call(b, prop))
			        __defNormalProp$4(a, prop, b[prop]);
			    }
			  return a;
			};
			var __spreadProps$4 = (a, b) => __defProps$4(a, __getOwnPropDescs$4(b));
			var __objRest$2 = (source, exclude) => {
			  var target = {};
			  for (var prop in source)
			    if (__hasOwnProp$4.call(source, prop) && exclude.indexOf(prop) < 0)
			      target[prop] = source[prop];
			  if (source != null && __getOwnPropSymbols$4)
			    for (var prop of __getOwnPropSymbols$4(source)) {
			      if (exclude.indexOf(prop) < 0 && __propIsEnum$4.call(source, prop))
			        target[prop] = source[prop];
			    }
			  return target;
			};
			const pathExpRE = /\[\s*(?:([+-])\s*(\d+)?)?\s*\]/g;
			const transformTargetPath = (target, indexes, basePath) => {
			  if (!isStr(target))
			    return target;
			  let index = 0;
			  const newTarget = target.replace(/^\s*(\.+)/, (_, $1) => {
			    const depth = $1.length;
			    let path = basePath;
			    for (let i = 0; i < depth; i++) {
			      path = path.parent();
			    }
			    return path.toString() + ".";
			  }).replace(pathExpRE, (_, operator, delta) => {
			    if (delta) {
			      if (operator === "+") {
			        return String(indexes[index++] + Number(delta));
			      } else if (operator === "-") {
			        return String(indexes[index++] - Number(delta));
			      }
			    } else {
			      if (operator === "+") {
			        return String(indexes[index++] + 1);
			      } else if (operator === "-") {
			        return String(indexes[index++] - 1);
			      }
			    }
			    return String(indexes[index++]);
			  });
			  pathExpRE.lastIndex = 0;
			  return newTarget;
			};
			const getPathIndexes = (path) => {
			  return path.transform(/\d+/, (...args) => args.map((i) => Number(i)));
			};
			const parseLinkages = exports('parseLinkages', (fieldState, {
			  getFieldState,
			  getFormState,
			  scope: outerScope
			} = {}) => {
			  const schema = new Schema(fieldState.props);
			  const linkages = schema.getExtendsLinkages();
			  if (!isArr(linkages))
			    return [];
			  const fieldName = FormPath.parse(fieldState.name);
			  const fieldIndexes = getPathIndexes(fieldName);
			  const formState = getFormState ? getFormState() : {};
			  return linkages.map((_a) => {
			    var _b = _a, { target, condition, scope } = _b, params = __objRest$2(_b, ["target", "condition", "scope"]);
			    const newTarget = transformTargetPath(target, fieldIndexes, fieldName);
			    const targetState = getFieldState ? getFieldState(newTarget) : {};
			    const fieldValue = fieldName.getIn(formState.values);
			    const _scope = __spreadProps$4(__spreadValues$4(__spreadValues$4({}, outerScope), scope), {
			      $value: fieldValue,
			      $self: fieldState || {},
			      $form: formState || {},
			      $target: targetState || {}
			    });
			    const options = params;
			    options.complie = (path = "", scope2) => {
			      return complieExpression(FormPath.getIn(params, path), __spreadValues$4(__spreadValues$4({}, _scope), scope2));
			    };
			    if (condition !== void 0) {
			      options.condition = JSONCondition.calculate(complieExpression(condition, _scope), fieldValue);
			    }
			    options.target = newTarget;
			    return options;
			  });
			});
			const useValueLinkageEffect = exports('useValueLinkageEffect', ({
			  type,
			  resolve,
			  reject,
			  scope
			} = {}) => {
			  if (!type || !isFn$1(resolve))
			    return;
			  const actions = createFormActions$1();
			  const { getFormState, getFieldState, hasChanged } = actions;
			  const { onFieldChange$ } = FormEffectHooks;
			  onFieldChange$("*").subscribe((fieldState) => {
			    if (!hasChanged(fieldState, "value") && !hasChanged(fieldState, "initialized") && !hasChanged(fieldState, "visible")) {
			      return;
			    }
			    const linkages = parseLinkages(fieldState, {
			      getFieldState,
			      getFormState,
			      scope
			    });
			    linkages.forEach((options) => {
			      const { type: linkageType, condition } = options;
			      if (linkageType !== type)
			        return;
			      if (isFn$1(resolve)) {
			        if (condition === true || condition === void 0)
			          resolve(options, actions);
			      }
			      if (isFn$1(reject)) {
			        if (condition === false)
			          reject(options, actions);
			      }
			    });
			  });
			});

			const useValueVisibleLinkageEffect = (scope) => useValueLinkageEffect({
			  type: "value:visible",
			  resolve: ({ target }, { setFieldState }) => {
			    setFieldState(target, (innerState) => {
			      innerState.visible = true;
			    });
			  },
			  reject: ({ target }, { setFieldState }) => {
			    setFieldState(target, (innerState) => {
			      innerState.visible = false;
			    });
			  },
			  scope
			});

			const useValueSchemaLinkageEffect = (scope) => useValueLinkageEffect({
			  type: "value:schema",
			  resolve: ({ target, complie }, { setFieldState }) => {
			    setFieldState(target, (innerState) => {
			      merge$4(innerState.props, complie("schema", {
			        $target: innerState
			      }), {
			        assign: true,
			        arrayMerge: (target2, source) => source
			      });
			    });
			  },
			  reject: ({ target, otherwise, complie }, { setFieldState }) => {
			    if (!otherwise)
			      return;
			    setFieldState(target, (innerState) => {
			      merge$4(innerState.props, complie("otherwise", {
			        $target: innerState
			      }), {
			        assign: true,
			        arrayMerge: (target2, source) => source
			      });
			    });
			  },
			  scope
			});

			const useValueStateLinkageEffect = (scope) => useValueLinkageEffect({
			  type: "value:state",
			  resolve: ({ target, complie }, { setFieldState }) => {
			    setFieldState(target, (innerState) => {
			      merge$4(innerState, complie("state", {
			        $target: innerState
			      }), {
			        assign: true,
			        arrayMerge: (target2, source) => source
			      });
			    });
			  },
			  reject: ({ target, otherwise, complie }, { setFieldState }) => {
			    if (!otherwise)
			      return;
			    setFieldState(target, (innerState) => {
			      merge$4(innerState, complie("otherwise", {
			        $target: innerState
			      }), {
			        assign: true,
			        arrayMerge: (target2, source) => source
			      });
			    });
			  },
			  scope
			});

			var __defProp$3 = Object.defineProperty;
			var __defProps$3 = Object.defineProperties;
			var __getOwnPropDescs$3 = Object.getOwnPropertyDescriptors;
			var __getOwnPropSymbols$3 = Object.getOwnPropertySymbols;
			var __hasOwnProp$3 = Object.prototype.hasOwnProperty;
			var __propIsEnum$3 = Object.prototype.propertyIsEnumerable;
			var __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
			var __spreadValues$3 = (a, b) => {
			  for (var prop in b || (b = {}))
			    if (__hasOwnProp$3.call(b, prop))
			      __defNormalProp$3(a, prop, b[prop]);
			  if (__getOwnPropSymbols$3)
			    for (var prop of __getOwnPropSymbols$3(b)) {
			      if (__propIsEnum$3.call(b, prop))
			        __defNormalProp$3(a, prop, b[prop]);
			    }
			  return a;
			};
			var __spreadProps$3 = (a, b) => __defProps$3(a, __getOwnPropDescs$3(b));
			var __objRest$1 = (source, exclude) => {
			  var target = {};
			  for (var prop in source)
			    if (__hasOwnProp$3.call(source, prop) && exclude.indexOf(prop) < 0)
			      target[prop] = source[prop];
			  if (source != null && __getOwnPropSymbols$3)
			    for (var prop of __getOwnPropSymbols$3(source)) {
			      if (exclude.indexOf(prop) < 0 && __propIsEnum$3.call(source, prop))
			        target[prop] = source[prop];
			    }
			  return target;
			};
			const lowercaseKeys = (obj) => {
			  const result = {};
			  each(obj, (value, key) => {
			    result[lowercase(key)] = value;
			  });
			  return result;
			};
			const ConnectedComponent = Symbol.for("connected");
			const transformComponents = (components) => {
			  const fieldComponents = {};
			  const virtualFieldComponents = {};
			  each(components, (component, name) => {
			    if (!isFn$1(component) && !component["styledComponentId"])
			      fieldComponents[name] = () => {
			        return createElement("div", {}, "Can not found any component.");
			      };
			    if (component["__ALREADY_CONNECTED__"] || component["isFieldComponent"]) {
			      fieldComponents[name] = component;
			    } else if (component["__VIRTUAL_BOX__"]) {
			      virtualFieldComponents[component["__VIRTUAL_BOX__"]["key"]] = component["__VIRTUAL_BOX__"]["component"];
			    } else if (component["isVirtualFieldComponent"]) {
			      virtualFieldComponents[name] = component;
			    } else if (!component[ConnectedComponent]) {
			      component[ConnectedComponent] = connect()(component);
			      fieldComponents[name] = component[ConnectedComponent];
			    } else {
			      fieldComponents[name] = component[ConnectedComponent];
			    }
			  });
			  return { fieldComponents, virtualFieldComponents };
			};
			const useInternalSchemaForm = (props) => {
			  const _a = props, {
			    fields,
			    virtualFields,
			    components,
			    formComponent,
			    formItemComponent,
			    componentPropsInterceptor,
			    schema: propsSchema,
			    defaultValue,
			    value,
			    initialValues,
			    actions,
			    effects,
			    onChange,
			    onSubmit,
			    onReset,
			    onValidateFailed,
			    useDirty,
			    children,
			    expressionScope,
			    form,
			    editable,
			    validateFirst
			  } = _a, formComponentProps = __objRest$1(_a, [
			    "fields",
			    "virtualFields",
			    "components",
			    "formComponent",
			    "formItemComponent",
			    "componentPropsInterceptor",
			    "schema",
			    "defaultValue",
			    "value",
			    "initialValues",
			    "actions",
			    "effects",
			    "onChange",
			    "onSubmit",
			    "onReset",
			    "onValidateFailed",
			    "useDirty",
			    "children",
			    "expressionScope",
			    "form",
			    "editable",
			    "validateFirst"
			  ]);
			  const { implementActions } = useEva_1({
			    actions
			  });
			  const schema = useMemo(() => {
			    const result = new Schema(propsSchema);
			    implementActions({
			      getSchema: deprecate(() => result, "Please use the getFormSchema."),
			      getFormSchema: () => result
			    });
			    return result;
			  }, [propsSchema]);
			  const registry = getRegistry();
			  const { fieldComponents, virtualFieldComponents } = transformComponents(components);
			  return {
			    form: useForm(__spreadProps$3(__spreadValues$3({}, props), {
			      effects: ($, actions2) => {
			        useValueVisibleLinkageEffect(expressionScope);
			        useValueSchemaLinkageEffect(expressionScope);
			        useValueStateLinkageEffect(expressionScope);
			        if (isFn$1(effects)) {
			          effects($, actions2);
			        }
			      }
			    })),
			    formComponentProps: __spreadValues$3(__spreadValues$3({}, formComponentProps), schema.getExtendsComponentProps()),
			    fields: lowercaseKeys(__spreadValues$3(__spreadValues$3(__spreadValues$3({}, registry.fields), fields), fieldComponents)),
			    virtualFields: lowercaseKeys(__spreadValues$3(__spreadValues$3(__spreadValues$3({}, registry.virtualFields), virtualFields), virtualFieldComponents)),
			    formComponent: formComponent ? formComponent : registry.formComponent,
			    formItemComponent: formItemComponent ? formItemComponent : registry.formItemComponent,
			    schema,
			    componentPropsInterceptor,
			    children
			  };
			};
			const useSchemaForm = exports('useSchemaForm', (props) => {
			  const actionsRef = useRef(null);
			  actionsRef.current = actionsRef.current || props.actions || createSchemaFormActions();
			  return useInternalSchemaForm(__spreadProps$3(__spreadValues$3({}, props), {
			    actions: actionsRef.current
			  }));
			});

			const FormComponentsContext = exports('FormComponentsContext', createContext(null));
			const FormExpressionScopeContext = exports('FormExpressionScopeContext', createContext({}));
			const SchemaFieldPropsContext = exports('SchemaFieldPropsContext', createContext(null));
			const FormSchemaContext = exports('FormSchemaContext', createContext(null));

			const useSchemaProps = exports('useSchemaProps', () => useContext(SchemaFieldPropsContext));

			var __defProp$2 = Object.defineProperty;
			var __defProps$2 = Object.defineProperties;
			var __getOwnPropDescs$2 = Object.getOwnPropertyDescriptors;
			var __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;
			var __hasOwnProp$2 = Object.prototype.hasOwnProperty;
			var __propIsEnum$2 = Object.prototype.propertyIsEnumerable;
			var __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
			var __spreadValues$2 = (a, b) => {
			  for (var prop in b || (b = {}))
			    if (__hasOwnProp$2.call(b, prop))
			      __defNormalProp$2(a, prop, b[prop]);
			  if (__getOwnPropSymbols$2)
			    for (var prop of __getOwnPropSymbols$2(b)) {
			      if (__propIsEnum$2.call(b, prop))
			        __defNormalProp$2(a, prop, b[prop]);
			    }
			  return a;
			};
			var __spreadProps$2 = (a, b) => __defProps$2(a, __getOwnPropDescs$2(b));
			const computeSchemaState = (draft, prevState) => {
			  const schema = new Schema(draft.props);
			  const prevSchema = new Schema(prevState.props);
			  const currentRequired = schema.getExtendsRequired();
			  const prevRequired = prevSchema.getExtendsRequired();
			  const currentRules = schema.getExtendsRules();
			  const prevRules = prevSchema.getExtendsRules();
			  const currentEditable = schema.getExtendsEditable();
			  const prevEditable = prevSchema.getExtendsEditable();
			  if (isValid(currentRequired) && !isEqual(currentRequired, prevRequired)) {
			    draft.required = currentRequired;
			  }
			  if (isValid(currentRules) && !isEqual(currentRules, prevRules)) {
			    draft.rules = currentRules;
			  }
			  if (isValid(currentEditable) && !isEqual(currentEditable, prevEditable)) {
			    draft.selfEditable = currentEditable;
			  }
			};
			const SchemaField = exports('SchemaField', (props) => {
			  const path = FormPath.parse(props.path);
			  const formSchema = useContext(FormSchemaContext);
			  const fieldSchema = new Schema(props.schema || formSchema.get(path));
			  const formRegistry = useContext(FormComponentsContext);
			  const expressionScope = useContext(FormExpressionScopeContext);
			  const ErrorTipPathStr = path.toString();
			  if (!fieldSchema) {
			    throw new Error(`Can not found schema node by ${ErrorTipPathStr}.`);
			  }
			  if (!formRegistry) {
			    throw new Error(`Can not found any form components.`);
			  }
			  const schemaType = fieldSchema.type;
			  const schemaComponent = fieldSchema.getExtendsComponent();
			  const schemaRenderer = fieldSchema.getExtendsRenderer();
			  const initialComponent = schemaComponent || schemaType;
			  const renderField = (addtionKey, reactKey) => {
			    return /* @__PURE__ */ React.createElement(SchemaField, {
			      key: reactKey,
			      path: path.concat(addtionKey)
			    });
			  };
			  const getPropsFromInterceptor = (stateProps) => {
			    let interceptorProps = {};
			    if (isFn$1(formRegistry.componentPropsInterceptor)) {
			      interceptorProps = formRegistry.componentPropsInterceptor(props) || {};
			    }
			    return __spreadProps$2(__spreadValues$2({}, stateProps), {
			      ["x-component-props"]: __spreadValues$2(__spreadValues$2({}, stateProps["x-component-props"] || {}), interceptorProps)
			    });
			  };
			  const renderFieldDelegate = (callback) => {
			    return /* @__PURE__ */ React.createElement(Field, {
			      path,
			      initialValue: complieExpression(fieldSchema.default, expressionScope),
			      props: complieExpression(fieldSchema.getSelfProps(), expressionScope, (key) => key == "x-linkages"),
			      dataType: fieldSchema.type,
			      triggerType: fieldSchema.getExtendsTriggerType(),
			      editable: fieldSchema.getExtendsEditable(),
			      visible: complieExpression(fieldSchema.getExtendsVisible(), expressionScope),
			      display: complieExpression(fieldSchema.getExtendsDisplay(), expressionScope),
			      required: complieExpression(fieldSchema.getExtendsRequired(), expressionScope),
			      rules: complieExpression(fieldSchema.getExtendsRules(), expressionScope),
			      computeState: computeSchemaState
			    }, ({ state, mutators, form }) => {
			      const stateProps = getPropsFromInterceptor(state.props);
			      const props2 = __spreadProps$2(__spreadValues$2({}, state), {
			        props: stateProps,
			        schema: new Schema(fieldSchema).merge(stateProps),
			        form,
			        mutators,
			        renderField
			      });
			      return /* @__PURE__ */ React.createElement(SchemaFieldPropsContext.Provider, {
			        value: props2
			      }, callback(props2));
			    });
			  };
			  const renderVirtualFieldDelegate = (callback) => {
			    return /* @__PURE__ */ React.createElement(VirtualField, {
			      path,
			      visible: complieExpression(fieldSchema.getExtendsVisible(), expressionScope),
			      display: complieExpression(fieldSchema.getExtendsDisplay(), expressionScope),
			      props: complieExpression(fieldSchema.getSelfProps(), expressionScope, (key) => key == "x-linkages")
			    }, ({ state, form }) => {
			      const stateProps = getPropsFromInterceptor(state.props);
			      const props2 = __spreadProps$2(__spreadValues$2({}, state), {
			        props: stateProps,
			        schema: new Schema(fieldSchema).merge(stateProps),
			        form,
			        renderField,
			        children: fieldSchema.mapProperties((schema, key) => {
			          return /* @__PURE__ */ React.createElement(SchemaField, {
			            schema,
			            key,
			            path: path.concat(key)
			          });
			        })
			      });
			      return /* @__PURE__ */ React.createElement(SchemaFieldPropsContext.Provider, {
			        value: props2
			      }, callback(props2));
			    });
			  };
			  const renderProperties = () => {
			    return fieldSchema.mapProperties((schema, key) => {
			      const childPath = path.concat(key);
			      return /* @__PURE__ */ React.createElement(SchemaField, {
			        schema,
			        key: childPath.toString(),
			        path: childPath
			      });
			    });
			  };
			  if (fieldSchema.isObject() && !schemaComponent) {
			    if (path.length == 0 || props.onlyRenderProperties) {
			      return /* @__PURE__ */ React.createElement(Fragment, null, renderProperties());
			    }
			    return renderFieldDelegate((props2) => {
			      const renderComponent = () => {
			        if (!formRegistry.formItemComponent) {
			          log.error(`Can not found any component.Its key is ${ErrorTipPathStr}.`);
			          return null;
			        }
			        return React.createElement(formRegistry.formItemComponent, props2, renderProperties());
			      };
			      if (isFn$1(schemaRenderer)) {
			        return schemaRenderer(__spreadProps$2(__spreadValues$2({}, props2), { renderComponent }));
			      }
			      return renderComponent();
			    });
			  } else {
			    if (isStr(initialComponent)) {
			      if (formRegistry.fields[initialComponent]) {
			        return renderFieldDelegate((props2) => {
			          const stateComponent = lowercase(props2.schema.getExtendsComponent() || props2.schema.type);
			          if (!isStr(stateComponent)) {
			            log.error(`Can not found any form component <${stateComponent}>.Its key is ${ErrorTipPathStr}.`);
			            return null;
			          }
			          const renderComponent = () => {
			            if (!formRegistry.fields[stateComponent]) {
			              log.error(`Can not found the field component <${stateComponent}>.Its key is ${ErrorTipPathStr}.`);
			              return null;
			            }
			            return React.createElement(formRegistry.formItemComponent, props2, React.createElement(formRegistry.fields[stateComponent], props2));
			          };
			          if (isFn$1(schemaRenderer)) {
			            return schemaRenderer(__spreadProps$2(__spreadValues$2({}, props2), { renderComponent }));
			          }
			          return renderComponent();
			        });
			      } else if (formRegistry.virtualFields[initialComponent]) {
			        return renderVirtualFieldDelegate((props2) => {
			          const stateComponent = lowercase(props2.schema.getExtendsComponent() || props2.schema.type);
			          if (!isStr(stateComponent)) {
			            log.error(`Can not found any virtual form component <${stateComponent}>.Its key is ${ErrorTipPathStr}.`);
			            return null;
			          }
			          const renderComponent = () => {
			            if (!formRegistry.virtualFields[stateComponent]) {
			              log.error(`Can not found the virtual field component <${stateComponent}>.Its key is ${ErrorTipPathStr}.`);
			              return null;
			            }
			            return React.createElement(formRegistry.virtualFields[stateComponent], props2);
			          };
			          if (isFn$1(schemaRenderer)) {
			            return schemaRenderer(__spreadProps$2(__spreadValues$2({}, props2), { renderComponent }));
			          }
			          return renderComponent();
			        });
			      } else {
			        log.error(`Can not found the field component <${initialComponent}>.Its key is ${ErrorTipPathStr}.`);
			        return null;
			      }
			    } else {
			      log.error(`Can not found the field component <${initialComponent}>.Its key is ${ErrorTipPathStr}.`);
			      return null;
			    }
			  }
			});

			var __defProp$1 = Object.defineProperty;
			var __defProps$1 = Object.defineProperties;
			var __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;
			var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
			var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
			var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
			var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
			var __spreadValues$1 = (a, b) => {
			  for (var prop in b || (b = {}))
			    if (__hasOwnProp$1.call(b, prop))
			      __defNormalProp$1(a, prop, b[prop]);
			  if (__getOwnPropSymbols$1)
			    for (var prop of __getOwnPropSymbols$1(b)) {
			      if (__propIsEnum$1.call(b, prop))
			        __defNormalProp$1(a, prop, b[prop]);
			    }
			  return a;
			};
			var __spreadProps$1 = (a, b) => __defProps$1(a, __getOwnPropDescs$1(b));
			const SchemaForm = exports('SchemaForm', (props) => {
			  const {
			    fields,
			    virtualFields,
			    formComponent,
			    componentPropsInterceptor,
			    formItemComponent,
			    formComponentProps,
			    schema,
			    form,
			    children
			  } = useSchemaForm(props);
			  return /* @__PURE__ */ React.createElement(FormComponentsContext.Provider, {
			    value: { fields, virtualFields, formComponent, formItemComponent, componentPropsInterceptor }
			  }, /* @__PURE__ */ React.createElement(FormExpressionScopeContext.Provider, {
			    value: props.expressionScope
			  }, /* @__PURE__ */ React.createElement(FormSchemaContext.Provider, {
			    value: schema
			  }, /* @__PURE__ */ React.createElement(Form, {
			    form
			  }, React.createElement(formComponent, __spreadProps$1(__spreadValues$1({}, formComponentProps), {
			    onSubmit: (e) => {
			      if (e && e.preventDefault)
			        e.preventDefault();
			      if (e && e.stopPropagation)
			        e.stopPropagation();
			      form.submit().catch((e2) => log.warn(e2));
			    },
			    onReset: () => {
			      form.reset({ validate: false, forceClear: false });
			    }
			  }), /* @__PURE__ */ React.createElement(SchemaField, {
			    schema,
			    path: ""
			  }), children)))));
			});
			SchemaForm.defaultProps = {
			  schema: {}
			};

			const env$1 = {
			  portalDOM: null
			};
			const render = (element) => {
			  if (globalThisPolyfill["document"]) {
			    env$1.portalDOM = env$1.portalDOM || globalThisPolyfill["document"].createElement("div");
			    return createPortal(element, env$1.portalDOM);
			  } else {
			    return /* @__PURE__ */ React.createElement("template", null, element);
			  }
			};

			var __defProp = Object.defineProperty;
			var __defProps = Object.defineProperties;
			var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
			var __getOwnPropSymbols = Object.getOwnPropertySymbols;
			var __hasOwnProp = Object.prototype.hasOwnProperty;
			var __propIsEnum = Object.prototype.propertyIsEnumerable;
			var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
			var __spreadValues = (a, b) => {
			  for (var prop in b || (b = {}))
			    if (__hasOwnProp.call(b, prop))
			      __defNormalProp(a, prop, b[prop]);
			  if (__getOwnPropSymbols)
			    for (var prop of __getOwnPropSymbols(b)) {
			      if (__propIsEnum.call(b, prop))
			        __defNormalProp(a, prop, b[prop]);
			    }
			  return a;
			};
			var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
			var __objRest = (source, exclude) => {
			  var target = {};
			  for (var prop in source)
			    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
			      target[prop] = source[prop];
			  if (source != null && __getOwnPropSymbols)
			    for (var prop of __getOwnPropSymbols(source)) {
			      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
			        target[prop] = source[prop];
			    }
			  return target;
			};
			const env = {
			  nonameId: 0
			};
			const MarkupContext = exports('MarkupContext', createContext(null));
			const getRandomName = () => {
			  return `NO_NAME_FIELD_$${env.nonameId++}`;
			};
			const SchemaMarkupField = exports('SchemaMarkupField', (_a) => {
			  var _b = _a, {
			    children
			  } = _b, props = __objRest(_b, [
			    "children"
			  ]);
			  const parentSchema = useContext(MarkupContext);
			  if (!parentSchema)
			    return /* @__PURE__ */ React.createElement(Fragment, null);
			  if (parentSchema.isObject()) {
			    props.name = props.name || getRandomName();
			    const schema = parentSchema.setProperty(props.name, props);
			    if (typeof children === "string") {
			      schema["x-component-props"].children = children;
			    }
			    return /* @__PURE__ */ React.createElement(MarkupContext.Provider, {
			      value: schema
			    }, children);
			  } else if (parentSchema.isArray()) {
			    const schema = parentSchema.setArrayItems(props);
			    return /* @__PURE__ */ React.createElement(MarkupContext.Provider, {
			      value: schema
			    }, children);
			  } else {
			    return children || /* @__PURE__ */ React.createElement(React.Fragment, null);
			  }
			});
			SchemaMarkupField.displayName = "SchemaMarkupField";
			const SchemaMarkupForm = exports('SchemaMarkupForm', (props) => {
			  let alreadyHasSchema = false;
			  let finalSchema;
			  if (props.schema) {
			    alreadyHasSchema = true;
			    finalSchema = new Schema(props.schema);
			  } else {
			    finalSchema = new Schema({ type: "object" });
			  }
			  env.nonameId = 0;
			  return /* @__PURE__ */ React.createElement(Fragment, null, !alreadyHasSchema && render(/* @__PURE__ */ React.createElement(MarkupContext.Provider, {
			    value: finalSchema
			  }, props.children)), /* @__PURE__ */ React.createElement(SchemaForm, __spreadProps(__spreadValues({}, props), {
			    schema: finalSchema
			  })));
			});
			SchemaMarkupForm.displayName = "SchemaMarkupForm";
			const __VIRTUAL_BOX__ = "__VIRTUAL_BOX__";
			function createVirtualBox(key, component) {
			  const finalComponent = component ? ({ schema, children }) => {
			    const props = schema.getExtendsComponentProps();
			    return React.createElement(component, __spreadValues({
			      children
			    }, props));
			  } : () => /* @__PURE__ */ React.createElement(Fragment, null);
			  registerVirtualBox(key, finalComponent);
			  const VirtualBox = (_a) => {
			    var _b = _a, {
			      children,
			      name,
			      visible,
			      display
			    } = _b, props = __objRest(_b, [
			      "children",
			      "name",
			      "visible",
			      "display"
			    ]);
			    return /* @__PURE__ */ React.createElement(SchemaMarkupField, {
			      type: "object",
			      name,
			      visible,
			      display,
			      "x-component": key,
			      "x-component-props": props
			    }, children);
			  };
			  VirtualBox[__VIRTUAL_BOX__] = { key, component: finalComponent };
			  return VirtualBox;
			}
			function createControllerBox(key, component) {
			  const finalComponent = component ? component : () => /* @__PURE__ */ React.createElement(Fragment, null);
			  registerVirtualBox(key, finalComponent);
			  const VirtualBox = (_a) => {
			    var _b = _a, {
			      children,
			      name
			    } = _b, props = __objRest(_b, [
			      "children",
			      "name"
			    ]);
			    return /* @__PURE__ */ React.createElement(SchemaMarkupField, {
			      type: "object",
			      name,
			      "x-component": key,
			      "x-component-props": props
			    }, children);
			  };
			  VirtualBox[__VIRTUAL_BOX__] = { key, component: finalComponent };
			  return VirtualBox;
			}
			const FormSlot = exports('FormSlot', ({ name, children }) => {
			  return /* @__PURE__ */ React.createElement(SchemaMarkupField, {
			    type: "object",
			    name,
			    "x-render": () => {
			      return /* @__PURE__ */ React.createElement(Fragment, null, children);
			    }
			  });
			});

			const createFormActions = exports('createFormActions', createSchemaFormActions);
			const createAsyncFormActions = exports('createAsyncFormActions', createAsyncSchemaFormActions);

		})
	};
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3Qtc2NoZW1hLXJlbmRlci4xLjMuMTQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3V0aWwvaXNGdW5jdGlvbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL2NvbmZpZy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3V0aWwvaG9zdFJlcG9ydEVycm9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvT2JzZXJ2ZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC91dGlsL2lzQXJyYXkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC91dGlsL2lzT2JqZWN0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvU3Vic2NyaXB0aW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvc3ltYm9sL3J4U3Vic2NyaWJlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL1N1YnNjcmliZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC91dGlsL2NhblJlcG9ydEVycm9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvdXRpbC90b1N1YnNjcmliZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3V0aWwvaWRlbnRpdHkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC91dGlsL3BpcGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9PYnNlcnZhYmxlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL1N1YmplY3RTdWJzY3JpcHRpb24uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9TdWJqZWN0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL3JlZkNvdW50LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9Db25uZWN0YWJsZU9ic2VydmFibGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZ3JvdXBCeS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL0JlaGF2aW9yU3ViamVjdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3NjaGVkdWxlci9BY3Rpb24uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNBY3Rpb24uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9zY2hlZHVsZXIvUXVldWVBY3Rpb24uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9TY2hlZHVsZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNTY2hlZHVsZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9zY2hlZHVsZXIvUXVldWVTY2hlZHVsZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9zY2hlZHVsZXIvcXVldWUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2VtcHR5LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvdXRpbC9pc1NjaGVkdWxlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3V0aWwvc3Vic2NyaWJlVG9BcnJheS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUFycmF5LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tQXJyYXkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL29mLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb2JzZXJ2YWJsZS90aHJvd0Vycm9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvTm90aWZpY2F0aW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL29ic2VydmVPbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL1JlcGxheVN1YmplY3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9Bc3luY1N1YmplY3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC91dGlsL0ltbWVkaWF0ZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3NjaGVkdWxlci9Bc2FwQWN0aW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvc2NoZWR1bGVyL0FzYXBTY2hlZHVsZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9zY2hlZHVsZXIvYXNhcC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3NjaGVkdWxlci9hc3luYy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3NjaGVkdWxlci9BbmltYXRpb25GcmFtZUFjdGlvbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3NjaGVkdWxlci9BbmltYXRpb25GcmFtZVNjaGVkdWxlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3NjaGVkdWxlci9hbmltYXRpb25GcmFtZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3NjaGVkdWxlci9WaXJ0dWFsVGltZVNjaGVkdWxlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3V0aWwvbm9vcC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3V0aWwvaXNPYnNlcnZhYmxlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvdXRpbC9Bcmd1bWVudE91dE9mUmFuZ2VFcnJvci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3V0aWwvRW1wdHlFcnJvci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3V0aWwvVGltZW91dEVycm9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL21hcC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29ic2VydmFibGUvYmluZENhbGxiYWNrLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9iaW5kTm9kZUNhbGxiYWNrLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvT3V0ZXJTdWJzY3JpYmVyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvSW5uZXJTdWJzY3JpYmVyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUb1Byb21pc2UuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9zeW1ib2wvaXRlcmF0b3IuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC91dGlsL3N1YnNjcmliZVRvSXRlcmFibGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC91dGlsL3N1YnNjcmliZVRvT2JzZXJ2YWJsZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3V0aWwvaXNBcnJheUxpa2UuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC91dGlsL2lzUHJvbWlzZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3V0aWwvc3Vic2NyaWJlVG8uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC91dGlsL3N1YnNjcmliZVRvUmVzdWx0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9jb21iaW5lTGF0ZXN0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlT2JzZXJ2YWJsZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVByb21pc2UuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVJdGVyYWJsZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3V0aWwvaXNJdGVyYWJsZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZWQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb20uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9pbm5lclN1YnNjcmliZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZU1hcC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUFsbC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRBbGwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2NvbmNhdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29ic2VydmFibGUvZGVmZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2ZvcmtKb2luLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tRXZlbnQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudFBhdHRlcm4uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2dlbmVyYXRlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9paWYuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC91dGlsL2lzTnVtZXJpYy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29ic2VydmFibGUvaW50ZXJ2YWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL21lcmdlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9uZXZlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29ic2VydmFibGUvb25FcnJvclJlc3VtZU5leHQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL3BhaXJzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvdXRpbC9ub3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZmlsdGVyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9wYXJ0aXRpb24uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL3JhY2UuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL3JhbmdlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb2JzZXJ2YWJsZS90aW1lci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29ic2VydmFibGUvdXNpbmcuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL3ppcC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMtY29tcGF0L1N1YmplY3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9TdWJqZWN0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL2F1ZGl0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL2F1ZGl0VGltZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyQ291bnQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyVGltZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJUb2dnbGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyV2hlbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9jYXRjaEVycm9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbWJpbmVBbGwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvY29tYmluZUxhdGVzdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0TWFwLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdE1hcFRvLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL2NvdW50LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL2RlYm91bmNlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL2RlYm91bmNlVGltZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9kZWZhdWx0SWZFbXB0eS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL3V0aWwvaXNEYXRlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL2RlbGF5LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL2RlbGF5V2hlbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9kZW1hdGVyaWFsaXplLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0VW50aWxDaGFuZ2VkLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0VW50aWxLZXlDaGFuZ2VkLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL3Rocm93SWZFbXB0eS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy90YWtlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL2VsZW1lbnRBdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9lbmRXaXRoLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL2V2ZXJ5LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL2V4aGF1c3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZXhoYXVzdE1hcC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9leHBhbmQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZmluYWxpemUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZmluZC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9maW5kSW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZmlyc3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvaWdub3JlRWxlbWVudHMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvaXNFbXB0eS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy90YWtlTGFzdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9sYXN0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL21hcFRvLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL21hdGVyaWFsaXplLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL3NjYW4uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcmVkdWNlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL21heC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZU1hcFRvLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlU2Nhbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9taW4uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvbXVsdGljYXN0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL29uRXJyb3JSZXN1bWVOZXh0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL3BhaXJ3aXNlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL3BhcnRpdGlvbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9wbHVjay5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL3B1Ymxpc2hCZWhhdmlvci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoTGFzdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoUmVwbGF5LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL3JhY2UuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcmVwZWF0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL3JlcGVhdFdoZW4uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcmV0cnkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcmV0cnlXaGVuLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL3NhbXBsZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9zYW1wbGVUaW1lLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL3NlcXVlbmNlRXF1YWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc2hhcmUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc2hhcmVSZXBsYXkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc2luZ2xlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL3NraXAuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcExhc3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcFVudGlsLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL3NraXBXaGlsZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9zdGFydFdpdGguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL1N1YnNjcmliZU9uT2JzZXJ2YWJsZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9zdWJzY3JpYmVPbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hNYXAuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoQWxsLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaE1hcFRvLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VVbnRpbC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy90YWtlV2hpbGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGFwLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL3Rocm90dGxlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL3Rocm90dGxlVGltZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy90aW1lSW50ZXJ2YWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZW91dFdpdGguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZW91dC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy90aW1lc3RhbXAuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdG9BcnJheS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3cuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93Q291bnQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93VGltZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dUb2dnbGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93V2hlbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy93aXRoTGF0ZXN0RnJvbS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2ludGVybmFsL29wZXJhdG9ycy96aXAuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvemlwQWxsLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvb3BlcmF0b3JzL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMtY29tcGF0L29wZXJhdG9ycy9maWx0ZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9vcGVyYXRvcnMvZmlsdGVyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWV2YS9saWIvaW5kZXguanMiLCIuLi9zcmMvc2hhcmVkL2FjdGlvbnMudHMiLCIuLi9zcmMvc2hhcmVkL3NjaGVtYS50cyIsIi4uL25vZGVfbW9kdWxlcy91cHBlci1jYXNlL3VwcGVyLWNhc2UuanMiLCIuLi9ub2RlX21vZHVsZXMvbG93ZXItY2FzZS9sb3dlci1jYXNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL25vLWNhc2UvdmVuZG9yL25vbi13b3JkLXJlZ2V4cC5qcyIsIi4uL25vZGVfbW9kdWxlcy9uby1jYXNlL3ZlbmRvci9jYW1lbC1jYXNlLXJlZ2V4cC5qcyIsIi4uL25vZGVfbW9kdWxlcy9uby1jYXNlL3ZlbmRvci9jYW1lbC1jYXNlLXVwcGVyLXJlZ2V4cC5qcyIsIi4uL25vZGVfbW9kdWxlcy9uby1jYXNlL25vLWNhc2UuanMiLCIuLi9ub2RlX21vZHVsZXMvY2FtZWwtY2FzZS9jYW1lbC1jYXNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3VwcGVyLWNhc2UtZmlyc3QvdXBwZXItY2FzZS1maXJzdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9wYXNjYWwtY2FzZS9wYXNjYWwtY2FzZS5qcyIsIi4uL3NyYy9zaGFyZWQvcmVnaXN0cnkudHMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwiLi4vc3JjL3NoYXJlZC9jb25uZWN0LnRzIiwiLi4vc3JjL3NoYXJlZC9jb25kaXRpb24udHMiLCIuLi9zcmMvc2hhcmVkL2V4cHJlc3Npb24udHMiLCIuLi9zcmMvc2hhcmVkL2xpbmthZ2UudHMiLCIuLi9zcmMvbGlua2FnZXMvdmlzaWJsZS50cyIsIi4uL3NyYy9saW5rYWdlcy9zY2hlbWEudHMiLCIuLi9zcmMvbGlua2FnZXMvc3RhdGUudHMiLCIuLi9zcmMvaG9va3MvdXNlU2NoZW1hRm9ybS50cyIsIi4uL3NyYy9zaGFyZWQvY29udGV4dC50cyIsIi4uL3NyYy9ob29rcy91c2VTY2hlbWFQcm9wcy50cyIsIi4uL3NyYy9jb21wb25lbnRzL1NjaGVtYUZpZWxkLnRzeCIsIi4uL3NyYy9jb21wb25lbnRzL1NjaGVtYUZvcm0udHN4IiwiLi4vc3JjL3NoYXJlZC92aXJ0dWFsLXJlbmRlci50c3giLCIuLi9zcmMvY29tcG9uZW50cy9TY2hlbWFNYXJrdXAudHN4IiwiLi4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gaXNGdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRnVuY3Rpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzID0gZmFsc2U7XG5leHBvcnRzLmNvbmZpZyA9IHtcbiAgICBQcm9taXNlOiB1bmRlZmluZWQsXG4gICAgc2V0IHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignREVQUkVDQVRFRCEgUnhKUyB3YXMgc2V0IHRvIHVzZSBkZXByZWNhdGVkIHN5bmNocm9ub3VzIGVycm9yIGhhbmRsaW5nIGJlaGF2aW9yIGJ5IGNvZGUgYXQ6IFxcbicgKyBlcnJvci5zdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUnhKUzogQmFjayB0byBhIGJldHRlciBlcnJvciBiZWhhdmlvci4gVGhhbmsgeW91LiA8MycpO1xuICAgICAgICB9XG4gICAgICAgIF9lbmFibGVfc3VwZXJfZ3Jvc3NfbW9kZV90aGF0X3dpbGxfY2F1c2VfYmFkX3RoaW5ncyA9IHZhbHVlO1xuICAgIH0sXG4gICAgZ2V0IHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcoKSB7XG4gICAgICAgIHJldHVybiBfZW5hYmxlX3N1cGVyX2dyb3NzX21vZGVfdGhhdF93aWxsX2NhdXNlX2JhZF90aGluZ3M7XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBob3N0UmVwb3J0RXJyb3IoZXJyKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfSwgMCk7XG59XG5leHBvcnRzLmhvc3RSZXBvcnRFcnJvciA9IGhvc3RSZXBvcnRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhvc3RSZXBvcnRFcnJvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb25maWdfMSA9IHJlcXVpcmUoXCIuL2NvbmZpZ1wiKTtcbnZhciBob3N0UmVwb3J0RXJyb3JfMSA9IHJlcXVpcmUoXCIuL3V0aWwvaG9zdFJlcG9ydEVycm9yXCIpO1xuZXhwb3J0cy5lbXB0eSA9IHtcbiAgICBjbG9zZWQ6IHRydWUsXG4gICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7IH0sXG4gICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGNvbmZpZ18xLmNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBob3N0UmVwb3J0RXJyb3JfMS5ob3N0UmVwb3J0RXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHsgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0FycmF5ID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFycmF5LmlzQXJyYXkgfHwgKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcic7IH0pOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGlzT2JqZWN0KHgpIHtcbiAgICByZXR1cm4geCAhPT0gbnVsbCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCc7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc09iamVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvckltcGwoZXJyb3JzKSB7XG4gICAgICAgIEVycm9yLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGVycm9ycyA/XG4gICAgICAgICAgICBlcnJvcnMubGVuZ3RoICsgXCIgZXJyb3JzIG9jY3VycmVkIGR1cmluZyB1bnN1YnNjcmlwdGlvbjpcXG5cIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gaSArIDEgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKTsgfSkuam9pbignXFxuICAnKSA6ICcnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVW5zdWJzY3JpcHRpb25FcnJvcic7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgVW5zdWJzY3JpcHRpb25FcnJvckltcGwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIHJldHVybiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbDtcbn0pKCk7XG5leHBvcnRzLlVuc3Vic2NyaXB0aW9uRXJyb3IgPSBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuc3Vic2NyaXB0aW9uRXJyb3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgaXNBcnJheV8xID0gcmVxdWlyZShcIi4vdXRpbC9pc0FycmF5XCIpO1xudmFyIGlzT2JqZWN0XzEgPSByZXF1aXJlKFwiLi91dGlsL2lzT2JqZWN0XCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuL3V0aWwvaXNGdW5jdGlvblwiKTtcbnZhciBVbnN1YnNjcmlwdGlvbkVycm9yXzEgPSByZXF1aXJlKFwiLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3JcIik7XG52YXIgU3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24odW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50T3JQYXJlbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IG51bGw7XG4gICAgICAgIGlmICh1bnN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fY3RvclVuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gdW5zdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVycm9ycztcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hID0gdGhpcywgX3BhcmVudE9yUGFyZW50cyA9IF9hLl9wYXJlbnRPclBhcmVudHMsIF9jdG9yVW5zdWJzY3JpYmUgPSBfYS5fY3RvclVuc3Vic2NyaWJlLCBfdW5zdWJzY3JpYmUgPSBfYS5fdW5zdWJzY3JpYmUsIF9zdWJzY3JpcHRpb25zID0gX2EuX3N1YnNjcmlwdGlvbnM7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcGFyZW50T3JQYXJlbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IG51bGw7XG4gICAgICAgIGlmIChfcGFyZW50T3JQYXJlbnRzIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBfcGFyZW50T3JQYXJlbnRzLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChfcGFyZW50T3JQYXJlbnRzICE9PSBudWxsKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgX3BhcmVudE9yUGFyZW50cy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBfcGFyZW50T3JQYXJlbnRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBwYXJlbnRfMS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKF91bnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgIGlmIChfY3RvclVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIF91bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMgPSBlIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcl8xLlVuc3Vic2NyaXB0aW9uRXJyb3IgPyBmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMoZS5lcnJvcnMpIDogW2VdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5XzEuaXNBcnJheShfc3Vic2NyaXB0aW9ucykpIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICAgICAgdmFyIGxlbiA9IF9zdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YiA9IF9zdWJzY3JpcHRpb25zW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3RfMS5pc09iamVjdChzdWIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yXzEuVW5zdWJzY3JpcHRpb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQoZmxhdHRlblVuc3Vic2NyaXB0aW9uRXJyb3JzKGUuZXJyb3JzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5zdWJzY3JpcHRpb25FcnJvcl8xLlVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRlYXJkb3duO1xuICAgICAgICBpZiAoIXRlYXJkb3duKSB7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodHlwZW9mIHRlYXJkb3duKSB7XG4gICAgICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0ZWFyZG93bik7XG4gICAgICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24gPT09IHRoaXMgfHwgc3Vic2NyaXB0aW9uLmNsb3NlZCB8fCB0eXBlb2Ygc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghKHN1YnNjcmlwdGlvbiBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24uX3N1YnNjcmlwdGlvbnMgPSBbdG1wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbml6ZWQgdGVhcmRvd24gJyArIHRlYXJkb3duICsgJyBhZGRlZCB0byBTdWJzY3JpcHRpb24uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9wYXJlbnRPclBhcmVudHMgPSBzdWJzY3JpcHRpb24uX3BhcmVudE9yUGFyZW50cztcbiAgICAgICAgaWYgKF9wYXJlbnRPclBhcmVudHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5fcGFyZW50T3JQYXJlbnRzID0gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChfcGFyZW50T3JQYXJlbnRzIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBpZiAoX3BhcmVudE9yUGFyZW50cyA9PT0gdGhpcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24uX3BhcmVudE9yUGFyZW50cyA9IFtfcGFyZW50T3JQYXJlbnRzLCB0aGlzXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChfcGFyZW50T3JQYXJlbnRzLmluZGV4T2YodGhpcykgPT09IC0xKSB7XG4gICAgICAgICAgICBfcGFyZW50T3JQYXJlbnRzLnB1c2godGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gdGhpcy5fc3Vic2NyaXB0aW9ucztcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbnMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBbc3Vic2NyaXB0aW9uXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbkluZGV4ID0gc3Vic2NyaXB0aW9ucy5pbmRleE9mKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5zcGxpY2Uoc3Vic2NyaXB0aW9uSW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24uRU1QVFkgPSAoZnVuY3Rpb24gKGVtcHR5KSB7XG4gICAgICAgIGVtcHR5LmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9KG5ldyBTdWJzY3JpcHRpb24oKSkpO1xuICAgIHJldHVybiBTdWJzY3JpcHRpb247XG59KCkpO1xuZXhwb3J0cy5TdWJzY3JpcHRpb24gPSBTdWJzY3JpcHRpb247XG5mdW5jdGlvbiBmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMoZXJyb3JzKSB7XG4gICAgcmV0dXJuIGVycm9ycy5yZWR1Y2UoZnVuY3Rpb24gKGVycnMsIGVycikgeyByZXR1cm4gZXJycy5jb25jYXQoKGVyciBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3JfMS5VbnN1YnNjcmlwdGlvbkVycm9yKSA/IGVyci5lcnJvcnMgOiBlcnIpOyB9LCBbXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpcHRpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJ4U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBTeW1ib2woJ3J4U3Vic2NyaWJlcicpXG4gICAgICAgIDogJ0BAcnhTdWJzY3JpYmVyXycgKyBNYXRoLnJhbmRvbSgpO1xufSkoKTtcbmV4cG9ydHMuJCRyeFN1YnNjcmliZXIgPSBleHBvcnRzLnJ4U3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ4U3Vic2NyaWJlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xudmFyIE9ic2VydmVyXzEgPSByZXF1aXJlKFwiLi9PYnNlcnZlclwiKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuL1N1YnNjcmlwdGlvblwiKTtcbnZhciByeFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9zeW1ib2wvcnhTdWJzY3JpYmVyXCIpO1xudmFyIGNvbmZpZ18xID0gcmVxdWlyZShcIi4vY29uZmlnXCIpO1xudmFyIGhvc3RSZXBvcnRFcnJvcl8xID0gcmVxdWlyZShcIi4vdXRpbC9ob3N0UmVwb3J0RXJyb3JcIik7XG52YXIgU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlcihkZXN0aW5hdGlvbk9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnN5bmNFcnJvclZhbHVlID0gbnVsbDtcbiAgICAgICAgX3RoaXMuc3luY0Vycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBPYnNlcnZlcl8xLmVtcHR5O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGlmICghZGVzdGluYXRpb25Pck5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBPYnNlcnZlcl8xLmVtcHR5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXN0aW5hdGlvbk9yTmV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uT3JOZXh0IGluc3RhbmNlb2YgU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3luY0Vycm9yVGhyb3dhYmxlID0gZGVzdGluYXRpb25Pck5leHQuc3luY0Vycm9yVGhyb3dhYmxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbk9yTmV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uT3JOZXh0LmFkZChfdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBuZXcgU2FmZVN1YnNjcmliZXIoX3RoaXMsIGRlc3RpbmF0aW9uT3JOZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBuZXcgU2FmZVN1YnNjcmliZXIoX3RoaXMsIGRlc3RpbmF0aW9uT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGVbcnhTdWJzY3JpYmVyXzEucnhTdWJzY3JpYmVyXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG4gICAgU3Vic2NyaWJlci5jcmVhdGUgPSBmdW5jdGlvbiAobmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gbmV3IFN1YnNjcmliZXIobmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgc3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZUFuZFJlY3ljbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfcGFyZW50T3JQYXJlbnRzID0gdGhpcy5fcGFyZW50T3JQYXJlbnRzO1xuICAgICAgICB0aGlzLl9wYXJlbnRPclBhcmVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcmVudE9yUGFyZW50cyA9IF9wYXJlbnRPclBhcmVudHM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbikpO1xuZXhwb3J0cy5TdWJzY3JpYmVyID0gU3Vic2NyaWJlcjtcbnZhciBTYWZlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNhZmVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNhZmVTdWJzY3JpYmVyKF9wYXJlbnRTdWJzY3JpYmVyLCBvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9wYXJlbnRTdWJzY3JpYmVyID0gX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgIHZhciBuZXh0O1xuICAgICAgICB2YXIgY29udGV4dCA9IF90aGlzO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpKSB7XG4gICAgICAgICAgICBuZXh0ID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2JzZXJ2ZXJPck5leHQpIHtcbiAgICAgICAgICAgIG5leHQgPSBvYnNlcnZlck9yTmV4dC5uZXh0O1xuICAgICAgICAgICAgZXJyb3IgPSBvYnNlcnZlck9yTmV4dC5lcnJvcjtcbiAgICAgICAgICAgIGNvbXBsZXRlID0gb2JzZXJ2ZXJPck5leHQuY29tcGxldGU7XG4gICAgICAgICAgICBpZiAob2JzZXJ2ZXJPck5leHQgIT09IE9ic2VydmVyXzEuZW1wdHkpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShvYnNlcnZlck9yTmV4dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKGNvbnRleHQudW5zdWJzY3JpYmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFkZChjb250ZXh0LnVuc3Vic2NyaWJlLmJpbmQoY29udGV4dCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250ZXh0LnVuc3Vic2NyaWJlID0gX3RoaXMudW5zdWJzY3JpYmUuYmluZChfdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICBfdGhpcy5fbmV4dCA9IG5leHQ7XG4gICAgICAgIF90aGlzLl9lcnJvciA9IGVycm9yO1xuICAgICAgICBfdGhpcy5fY29tcGxldGUgPSBjb21wbGV0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkICYmIHRoaXMuX25leHQpIHtcbiAgICAgICAgICAgIHZhciBfcGFyZW50U3Vic2NyaWJlciA9IHRoaXMuX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgICAgICBpZiAoIWNvbmZpZ18xLmNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIHx8ICFfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih0aGlzLl9uZXh0LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9fdHJ5T3JTZXRFcnJvcihfcGFyZW50U3Vic2NyaWJlciwgdGhpcy5fbmV4dCwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBfcGFyZW50U3Vic2NyaWJlciA9IHRoaXMuX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgICAgICB2YXIgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyA9IGNvbmZpZ18xLmNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Vycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIHx8ICFfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yVW5zdWIodGhpcy5fZXJyb3IsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclNldEVycm9yKF9wYXJlbnRTdWJzY3JpYmVyLCB0aGlzLl9lcnJvciwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBob3N0UmVwb3J0RXJyb3JfMS5ob3N0UmVwb3J0RXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIF9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclZhbHVlID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICBfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdFJlcG9ydEVycm9yXzEuaG9zdFJlcG9ydEVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgX3BhcmVudFN1YnNjcmliZXIgPSB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdyYXBwZWRDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9jb21wbGV0ZS5jYWxsKF90aGlzLl9jb250ZXh0KTsgfTtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbmZpZ18xLmNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIHx8ICFfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yVW5zdWIod3JhcHBlZENvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yU2V0RXJyb3IoX3BhcmVudFN1YnNjcmliZXIsIHdyYXBwZWRDb21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5fX3RyeU9yVW5zdWIgPSBmdW5jdGlvbiAoZm4sIHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMuX2NvbnRleHQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBpZiAoY29uZmlnXzEuY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBob3N0UmVwb3J0RXJyb3JfMS5ob3N0UmVwb3J0RXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLl9fdHJ5T3JTZXRFcnJvciA9IGZ1bmN0aW9uIChwYXJlbnQsIGZuLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIWNvbmZpZ18xLmNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBjYWxsJyk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcy5fY29udGV4dCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChjb25maWdfMS5jb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgIHBhcmVudC5zeW5jRXJyb3JWYWx1ZSA9IGVycjtcbiAgICAgICAgICAgICAgICBwYXJlbnQuc3luY0Vycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcl8xLmhvc3RSZXBvcnRFcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfcGFyZW50U3Vic2NyaWJlciA9IHRoaXMuX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSBudWxsO1xuICAgICAgICB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgX3BhcmVudFN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBTYWZlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0cy5TYWZlU3Vic2NyaWJlciA9IFNhZmVTdWJzY3JpYmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGNhblJlcG9ydEVycm9yKG9ic2VydmVyKSB7XG4gICAgd2hpbGUgKG9ic2VydmVyKSB7XG4gICAgICAgIHZhciBfYSA9IG9ic2VydmVyLCBjbG9zZWRfMSA9IF9hLmNsb3NlZCwgZGVzdGluYXRpb24gPSBfYS5kZXN0aW5hdGlvbiwgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkO1xuICAgICAgICBpZiAoY2xvc2VkXzEgfHwgaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24gaW5zdGFuY2VvZiBTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9ic2VydmVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydHMuY2FuUmVwb3J0RXJyb3IgPSBjYW5SZXBvcnRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhblJlcG9ydEVycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xudmFyIHJ4U3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL3N5bWJvbC9yeFN1YnNjcmliZXJcIik7XG52YXIgT2JzZXJ2ZXJfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZlclwiKTtcbmZ1bmN0aW9uIHRvU3Vic2NyaWJlcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgaWYgKG5leHRPck9ic2VydmVyKSB7XG4gICAgICAgIGlmIChuZXh0T3JPYnNlcnZlciBpbnN0YW5jZW9mIFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE9yT2JzZXJ2ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyW3J4U3Vic2NyaWJlcl8xLnJ4U3Vic2NyaWJlcl0pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0T3JPYnNlcnZlcltyeFN1YnNjcmliZXJfMS5yeFN1YnNjcmliZXJdKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFuZXh0T3JPYnNlcnZlciAmJiAhZXJyb3IgJiYgIWNvbXBsZXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIoT2JzZXJ2ZXJfMS5lbXB0eSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSk7XG59XG5leHBvcnRzLnRvU3Vic2NyaWJlciA9IHRvU3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvU3Vic2NyaWJlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlIHx8ICdAQG9ic2VydmFibGUnOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbn1cbmV4cG9ydHMuaWRlbnRpdHkgPSBpZGVudGl0eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkZW50aXR5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGlkZW50aXR5XzEgPSByZXF1aXJlKFwiLi9pZGVudGl0eVwiKTtcbmZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0cy5waXBlID0gcGlwZTtcbmZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5XzEuaWRlbnRpdHk7XG4gICAgfVxuICAgIGlmIChmbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBmbnNbMF07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBwaXBlZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZm5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgZm4pIHsgcmV0dXJuIGZuKHByZXYpOyB9LCBpbnB1dCk7XG4gICAgfTtcbn1cbmV4cG9ydHMucGlwZUZyb21BcnJheSA9IHBpcGVGcm9tQXJyYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNhblJlcG9ydEVycm9yXzEgPSByZXF1aXJlKFwiLi91dGlsL2NhblJlcG9ydEVycm9yXCIpO1xudmFyIHRvU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vdXRpbC90b1N1YnNjcmliZXJcIik7XG52YXIgb2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4vc3ltYm9sL29ic2VydmFibGVcIik7XG52YXIgcGlwZV8xID0gcmVxdWlyZShcIi4vdXRpbC9waXBlXCIpO1xudmFyIGNvbmZpZ18xID0gcmVxdWlyZShcIi4vY29uZmlnXCIpO1xudmFyIE9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgICAgIHRoaXMuX2lzU2NhbGFyID0gZmFsc2U7XG4gICAgICAgIGlmIChzdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICBvYnNlcnZhYmxlLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIG9wZXJhdG9yID0gdGhpcy5vcGVyYXRvcjtcbiAgICAgICAgdmFyIHNpbmsgPSB0b1N1YnNjcmliZXJfMS50b1N1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIGlmIChvcGVyYXRvcikge1xuICAgICAgICAgICAgc2luay5hZGQob3BlcmF0b3IuY2FsbChzaW5rLCB0aGlzLnNvdXJjZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2luay5hZGQodGhpcy5zb3VyY2UgfHwgKGNvbmZpZ18xLmNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nICYmICFzaW5rLnN5bmNFcnJvclRocm93YWJsZSkgP1xuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZShzaW5rKSA6XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJ5U3Vic2NyaWJlKHNpbmspKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnXzEuY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgIGlmIChzaW5rLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgIHNpbmsuc3luY0Vycm9yVGhyb3dhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHNpbmsuc3luY0Vycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IHNpbmsuc3luY0Vycm9yVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaW5rO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlKHNpbmspO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChjb25maWdfMS5jb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgIHNpbmsuc3luY0Vycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzaW5rLnN5bmNFcnJvclZhbHVlID0gZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhblJlcG9ydEVycm9yXzEuY2FuUmVwb3J0RXJyb3Ioc2luaykpIHtcbiAgICAgICAgICAgICAgICBzaW5rLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChuZXh0LCBwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlamVjdCwgcmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLnNvdXJjZTtcbiAgICAgICAgcmV0dXJuIHNvdXJjZSAmJiBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGVbb2JzZXJ2YWJsZV8xLm9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wZXJhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGlwZV8xLnBpcGVGcm9tQXJyYXkob3BlcmF0aW9ucykodGhpcyk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS50b1Byb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh4KSB7IHJldHVybiB2YWx1ZSA9IHg7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHJlamVjdChlcnIpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKHZhbHVlKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmUpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0cy5PYnNlcnZhYmxlID0gT2JzZXJ2YWJsZTtcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XG4gICAgaWYgKCFwcm9taXNlQ3Rvcikge1xuICAgICAgICBwcm9taXNlQ3RvciA9IGNvbmZpZ18xLmNvbmZpZy5Qcm9taXNlIHx8IFByb21pc2U7XG4gICAgfVxuICAgIGlmICghcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBQcm9taXNlIGltcGwgZm91bmQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2VDdG9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2YWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGwgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbCgpIHtcbiAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ29iamVjdCB1bnN1YnNjcmliZWQnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICByZXR1cm4gT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsO1xufSkoKTtcbmV4cG9ydHMuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi9TdWJzY3JpcHRpb25cIik7XG52YXIgU3ViamVjdFN1YnNjcmlwdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YmplY3RTdWJzY3JpcHRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ViamVjdFN1YnNjcmlwdGlvbihzdWJqZWN0LCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnN1YmplY3QgPSBzdWJqZWN0O1xuICAgICAgICBfdGhpcy5zdWJzY3JpYmVyID0gc3Vic2NyaWJlcjtcbiAgICAgICAgX3RoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3ViamVjdFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLnN1YmplY3Q7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSBzdWJqZWN0Lm9ic2VydmVycztcbiAgICAgICAgdGhpcy5zdWJqZWN0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFvYnNlcnZlcnMgfHwgb2JzZXJ2ZXJzLmxlbmd0aCA9PT0gMCB8fCBzdWJqZWN0LmlzU3RvcHBlZCB8fCBzdWJqZWN0LmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJzY3JpYmVySW5kZXggPSBvYnNlcnZlcnMuaW5kZXhPZih0aGlzLnN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoc3Vic2NyaWJlckluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXJzLnNwbGljZShzdWJzY3JpYmVySW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3ViamVjdFN1YnNjcmlwdGlvbjtcbn0oU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKSk7XG5leHBvcnRzLlN1YmplY3RTdWJzY3JpcHRpb24gPSBTdWJqZWN0U3Vic2NyaXB0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdFN1YnNjcmlwdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9TdWJzY3JpYmVyXCIpO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4vU3Vic2NyaXB0aW9uXCIpO1xudmFyIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEgPSByZXF1aXJlKFwiLi91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yXCIpO1xudmFyIFN1YmplY3RTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuL1N1YmplY3RTdWJzY3JpcHRpb25cIik7XG52YXIgcnhTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvc3ltYm9sL3J4U3Vic2NyaWJlclwiKTtcbnZhciBTdWJqZWN0U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YmplY3RTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YmplY3RTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTdWJqZWN0U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmV4cG9ydHMuU3ViamVjdFN1YnNjcmliZXIgPSBTdWJqZWN0U3Vic2NyaWJlcjtcbnZhciBTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgICAgICAgX3RoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5oYXNFcnJvciA9IGZhbHNlO1xuICAgICAgICBfdGhpcy50aHJvd25FcnJvciA9IG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3ViamVjdC5wcm90b3R5cGVbcnhTdWJzY3JpYmVyXzEucnhTdWJzY3JpYmVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJqZWN0U3Vic2NyaWJlcih0aGlzKTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSBuZXcgQW5vbnltb3VzU3ViamVjdCh0aGlzLCB0aGlzKTtcbiAgICAgICAgc3ViamVjdC5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMS5PYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycztcbiAgICAgICAgICAgIHZhciBsZW4gPSBvYnNlcnZlcnMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGNvcHkgPSBvYnNlcnZlcnMuc2xpY2UoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb3B5W2ldLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMS5PYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICB0aGlzLnRocm93bkVycm9yID0gZXJyO1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycztcbiAgICAgICAgdmFyIGxlbiA9IG9ic2VydmVycy5sZW5ndGg7XG4gICAgICAgIHZhciBjb3B5ID0gb2JzZXJ2ZXJzLnNsaWNlKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvcHlbaV0uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9ic2VydmVycy5sZW5ndGggPSAwO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycztcbiAgICAgICAgdmFyIGxlbiA9IG9ic2VydmVycy5sZW5ndGg7XG4gICAgICAgIHZhciBjb3B5ID0gb2JzZXJ2ZXJzLnNsaWNlKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvcHlbaV0uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9ic2VydmVycy5sZW5ndGggPSAwO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLm9ic2VydmVycyA9IG51bGw7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMS5PYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuX3RyeVN1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMS5PYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IodGhpcy50aHJvd25FcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3ViamVjdFN1YnNjcmlwdGlvbl8xLlN1YmplY3RTdWJzY3JpcHRpb24odGhpcywgc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmFzT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIFN1YmplY3QuY3JlYXRlID0gZnVuY3Rpb24gKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBbm9ueW1vdXNTdWJqZWN0KGRlc3RpbmF0aW9uLCBzb3VyY2UpO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YmplY3Q7XG59KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5leHBvcnRzLlN1YmplY3QgPSBTdWJqZWN0O1xudmFyIEFub255bW91c1N1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBbm9ueW1vdXNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24ubmV4dCkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24uZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbiAmJiBkZXN0aW5hdGlvbi5jb21wbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFub255bW91c1N1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydHMuQW5vbnltb3VzU3ViamVjdCA9IEFub255bW91c1N1YmplY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJqZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHJlZkNvdW50KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiByZWZDb3VudE9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgUmVmQ291bnRPcGVyYXRvcihzb3VyY2UpKTtcbiAgICB9O1xufVxuZXhwb3J0cy5yZWZDb3VudCA9IHJlZkNvdW50O1xudmFyIFJlZkNvdW50T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlZkNvdW50T3BlcmF0b3IoY29ubmVjdGFibGUpIHtcbiAgICAgICAgdGhpcy5jb25uZWN0YWJsZSA9IGNvbm5lY3RhYmxlO1xuICAgIH1cbiAgICBSZWZDb3VudE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICB2YXIgY29ubmVjdGFibGUgPSB0aGlzLmNvbm5lY3RhYmxlO1xuICAgICAgICBjb25uZWN0YWJsZS5fcmVmQ291bnQrKztcbiAgICAgICAgdmFyIHJlZkNvdW50ZXIgPSBuZXcgUmVmQ291bnRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGNvbm5lY3RhYmxlKTtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHNvdXJjZS5zdWJzY3JpYmUocmVmQ291bnRlcik7XG4gICAgICAgIGlmICghcmVmQ291bnRlci5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJlZkNvdW50ZXIuY29ubmVjdGlvbiA9IGNvbm5lY3RhYmxlLmNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIFJlZkNvdW50T3BlcmF0b3I7XG59KCkpO1xudmFyIFJlZkNvdW50U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJlZkNvdW50U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZWZDb3VudFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGNvbm5lY3RhYmxlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb25uZWN0YWJsZSA9IGNvbm5lY3RhYmxlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJlZkNvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29ubmVjdGFibGUgPSB0aGlzLmNvbm5lY3RhYmxlO1xuICAgICAgICBpZiAoIWNvbm5lY3RhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29ubmVjdGFibGUgPSBudWxsO1xuICAgICAgICB2YXIgcmVmQ291bnQgPSBjb25uZWN0YWJsZS5fcmVmQ291bnQ7XG4gICAgICAgIGlmIChyZWZDb3VudCA8PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3RhYmxlLl9yZWZDb3VudCA9IHJlZkNvdW50IC0gMTtcbiAgICAgICAgaWYgKHJlZkNvdW50ID4gMSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29ubmVjdGlvbiA9IHRoaXMuY29ubmVjdGlvbjtcbiAgICAgICAgdmFyIHNoYXJlZENvbm5lY3Rpb24gPSBjb25uZWN0YWJsZS5fY29ubmVjdGlvbjtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgaWYgKHNoYXJlZENvbm5lY3Rpb24gJiYgKCFjb25uZWN0aW9uIHx8IHNoYXJlZENvbm5lY3Rpb24gPT09IGNvbm5lY3Rpb24pKSB7XG4gICAgICAgICAgICBzaGFyZWRDb25uZWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBSZWZDb3VudFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWZDb3VudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1N1YmplY3RcIik7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmliZXJcIik7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaXB0aW9uXCIpO1xudmFyIHJlZkNvdW50XzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL3JlZkNvdW50XCIpO1xudmFyIENvbm5lY3RhYmxlT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbm5lY3RhYmxlT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb25uZWN0YWJsZU9ic2VydmFibGUoc291cmNlLCBzdWJqZWN0RmFjdG9yeSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIF90aGlzLnN1YmplY3RGYWN0b3J5ID0gc3ViamVjdEZhY3Rvcnk7XG4gICAgICAgIF90aGlzLl9yZWZDb3VudCA9IDA7XG4gICAgICAgIF90aGlzLl9pc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3ViamVjdCgpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUuZ2V0U3ViamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLl9zdWJqZWN0O1xuICAgICAgICBpZiAoIXN1YmplY3QgfHwgc3ViamVjdC5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YmplY3QgPSB0aGlzLnN1YmplY3RGYWN0b3J5KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1YmplY3Q7XG4gICAgfTtcbiAgICBDb25uZWN0YWJsZU9ic2VydmFibGUucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb25uZWN0aW9uID0gdGhpcy5fY29ubmVjdGlvbjtcbiAgICAgICAgaWYgKCFjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9pc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgICAgICBjb25uZWN0aW9uID0gdGhpcy5fY29ubmVjdGlvbiA9IG5ldyBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uYWRkKHRoaXMuc291cmNlXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZShuZXcgQ29ubmVjdGFibGVTdWJzY3JpYmVyKHRoaXMuZ2V0U3ViamVjdCgpLCB0aGlzKSkpO1xuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbiA9IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICB9O1xuICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUucmVmQ291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZWZDb3VudF8xLnJlZkNvdW50KCkodGhpcyk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29ubmVjdGFibGVPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5Db25uZWN0YWJsZU9ic2VydmFibGUgPSBDb25uZWN0YWJsZU9ic2VydmFibGU7XG5leHBvcnRzLmNvbm5lY3RhYmxlT2JzZXJ2YWJsZURlc2NyaXB0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb25uZWN0YWJsZVByb3RvID0gQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvcGVyYXRvcjogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICBfcmVmQ291bnQ6IHsgdmFsdWU6IDAsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgICAgIF9zdWJqZWN0OiB7IHZhbHVlOiBudWxsLCB3cml0YWJsZTogdHJ1ZSB9LFxuICAgICAgICBfY29ubmVjdGlvbjogeyB2YWx1ZTogbnVsbCwgd3JpdGFibGU6IHRydWUgfSxcbiAgICAgICAgX3N1YnNjcmliZTogeyB2YWx1ZTogY29ubmVjdGFibGVQcm90by5fc3Vic2NyaWJlIH0sXG4gICAgICAgIF9pc0NvbXBsZXRlOiB7IHZhbHVlOiBjb25uZWN0YWJsZVByb3RvLl9pc0NvbXBsZXRlLCB3cml0YWJsZTogdHJ1ZSB9LFxuICAgICAgICBnZXRTdWJqZWN0OiB7IHZhbHVlOiBjb25uZWN0YWJsZVByb3RvLmdldFN1YmplY3QgfSxcbiAgICAgICAgY29ubmVjdDogeyB2YWx1ZTogY29ubmVjdGFibGVQcm90by5jb25uZWN0IH0sXG4gICAgICAgIHJlZkNvdW50OiB7IHZhbHVlOiBjb25uZWN0YWJsZVByb3RvLnJlZkNvdW50IH1cbiAgICB9O1xufSkoKTtcbnZhciBDb25uZWN0YWJsZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDb25uZWN0YWJsZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29ubmVjdGFibGVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb25uZWN0YWJsZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY29ubmVjdGFibGUgPSBjb25uZWN0YWJsZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb25uZWN0YWJsZVN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fZXJyb3IuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH07XG4gICAgQ29ubmVjdGFibGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGFibGUuX2lzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICB0aGlzLl91bnN1YnNjcmliZSgpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgQ29ubmVjdGFibGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb25uZWN0YWJsZSA9IHRoaXMuY29ubmVjdGFibGU7XG4gICAgICAgIGlmIChjb25uZWN0YWJsZSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0YWJsZSA9IG51bGw7XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbiA9IGNvbm5lY3RhYmxlLl9jb25uZWN0aW9uO1xuICAgICAgICAgICAgY29ubmVjdGFibGUuX3JlZkNvdW50ID0gMDtcbiAgICAgICAgICAgIGNvbm5lY3RhYmxlLl9zdWJqZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIGNvbm5lY3RhYmxlLl9jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ29ubmVjdGFibGVTdWJzY3JpYmVyO1xufShTdWJqZWN0XzEuU3ViamVjdFN1YnNjcmliZXIpKTtcbnZhciBSZWZDb3VudE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZWZDb3VudE9wZXJhdG9yKGNvbm5lY3RhYmxlKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGFibGUgPSBjb25uZWN0YWJsZTtcbiAgICB9XG4gICAgUmVmQ291bnRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIGNvbm5lY3RhYmxlID0gdGhpcy5jb25uZWN0YWJsZTtcbiAgICAgICAgY29ubmVjdGFibGUuX3JlZkNvdW50Kys7XG4gICAgICAgIHZhciByZWZDb3VudGVyID0gbmV3IFJlZkNvdW50U3Vic2NyaWJlcihzdWJzY3JpYmVyLCBjb25uZWN0YWJsZSk7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBzb3VyY2Uuc3Vic2NyaWJlKHJlZkNvdW50ZXIpO1xuICAgICAgICBpZiAoIXJlZkNvdW50ZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICByZWZDb3VudGVyLmNvbm5lY3Rpb24gPSBjb25uZWN0YWJsZS5jb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBSZWZDb3VudE9wZXJhdG9yO1xufSgpKTtcbnZhciBSZWZDb3VudFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhSZWZDb3VudFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVmQ291bnRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb25uZWN0YWJsZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY29ubmVjdGFibGUgPSBjb25uZWN0YWJsZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSZWZDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbm5lY3RhYmxlID0gdGhpcy5jb25uZWN0YWJsZTtcbiAgICAgICAgaWYgKCFjb25uZWN0YWJsZSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbm5lY3RhYmxlID0gbnVsbDtcbiAgICAgICAgdmFyIHJlZkNvdW50ID0gY29ubmVjdGFibGUuX3JlZkNvdW50O1xuICAgICAgICBpZiAocmVmQ291bnQgPD0gMCkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25uZWN0YWJsZS5fcmVmQ291bnQgPSByZWZDb3VudCAtIDE7XG4gICAgICAgIGlmIChyZWZDb3VudCA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSB0aGlzLmNvbm5lY3Rpb247XG4gICAgICAgIHZhciBzaGFyZWRDb25uZWN0aW9uID0gY29ubmVjdGFibGUuX2Nvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgIGlmIChzaGFyZWRDb25uZWN0aW9uICYmICghY29ubmVjdGlvbiB8fCBzaGFyZWRDb25uZWN0aW9uID09PSBjb25uZWN0aW9uKSkge1xuICAgICAgICAgICAgc2hhcmVkQ29ubmVjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUmVmQ291bnRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29ubmVjdGFibGVPYnNlcnZhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpcHRpb25cIik7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1N1YmplY3RcIik7XG5mdW5jdGlvbiBncm91cEJ5KGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IsIGR1cmF0aW9uU2VsZWN0b3IsIHN1YmplY3RTZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgR3JvdXBCeU9wZXJhdG9yKGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IsIGR1cmF0aW9uU2VsZWN0b3IsIHN1YmplY3RTZWxlY3RvcikpO1xuICAgIH07XG59XG5leHBvcnRzLmdyb3VwQnkgPSBncm91cEJ5O1xudmFyIEdyb3VwQnlPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gR3JvdXBCeU9wZXJhdG9yKGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IsIGR1cmF0aW9uU2VsZWN0b3IsIHN1YmplY3RTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmtleVNlbGVjdG9yID0ga2V5U2VsZWN0b3I7XG4gICAgICAgIHRoaXMuZWxlbWVudFNlbGVjdG9yID0gZWxlbWVudFNlbGVjdG9yO1xuICAgICAgICB0aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuICAgICAgICB0aGlzLnN1YmplY3RTZWxlY3RvciA9IHN1YmplY3RTZWxlY3RvcjtcbiAgICB9XG4gICAgR3JvdXBCeU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgR3JvdXBCeVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5rZXlTZWxlY3RvciwgdGhpcy5lbGVtZW50U2VsZWN0b3IsIHRoaXMuZHVyYXRpb25TZWxlY3RvciwgdGhpcy5zdWJqZWN0U2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBHcm91cEJ5T3BlcmF0b3I7XG59KCkpO1xudmFyIEdyb3VwQnlTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoR3JvdXBCeVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gR3JvdXBCeVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IsIGR1cmF0aW9uU2VsZWN0b3IsIHN1YmplY3RTZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMua2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuZWxlbWVudFNlbGVjdG9yID0gZWxlbWVudFNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5kdXJhdGlvblNlbGVjdG9yID0gZHVyYXRpb25TZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuc3ViamVjdFNlbGVjdG9yID0gc3ViamVjdFNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5ncm91cHMgPSBudWxsO1xuICAgICAgICBfdGhpcy5hdHRlbXB0ZWRUb1Vuc3Vic2NyaWJlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmNvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBHcm91cEJ5U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGtleSA9IHRoaXMua2V5U2VsZWN0b3IodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ncm91cCh2YWx1ZSwga2V5KTtcbiAgICB9O1xuICAgIEdyb3VwQnlTdWJzY3JpYmVyLnByb3RvdHlwZS5fZ3JvdXAgPSBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICB2YXIgZ3JvdXBzID0gdGhpcy5ncm91cHM7XG4gICAgICAgIGlmICghZ3JvdXBzKSB7XG4gICAgICAgICAgICBncm91cHMgPSB0aGlzLmdyb3VwcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZ3JvdXAgPSBncm91cHMuZ2V0KGtleSk7XG4gICAgICAgIHZhciBlbGVtZW50O1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50U2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudCA9IHRoaXMuZWxlbWVudFNlbGVjdG9yKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFncm91cCkge1xuICAgICAgICAgICAgZ3JvdXAgPSAodGhpcy5zdWJqZWN0U2VsZWN0b3IgPyB0aGlzLnN1YmplY3RTZWxlY3RvcigpIDogbmV3IFN1YmplY3RfMS5TdWJqZWN0KCkpO1xuICAgICAgICAgICAgZ3JvdXBzLnNldChrZXksIGdyb3VwKTtcbiAgICAgICAgICAgIHZhciBncm91cGVkT2JzZXJ2YWJsZSA9IG5ldyBHcm91cGVkT2JzZXJ2YWJsZShrZXksIGdyb3VwLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChncm91cGVkT2JzZXJ2YWJsZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5kdXJhdGlvblNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gdGhpcy5kdXJhdGlvblNlbGVjdG9yKG5ldyBHcm91cGVkT2JzZXJ2YWJsZShrZXksIGdyb3VwKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuYWRkKGR1cmF0aW9uLnN1YnNjcmliZShuZXcgR3JvdXBEdXJhdGlvblN1YnNjcmliZXIoa2V5LCBncm91cCwgdGhpcykpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWdyb3VwLmNsb3NlZCkge1xuICAgICAgICAgICAgZ3JvdXAubmV4dChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgR3JvdXBCeVN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIGdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xuICAgICAgICBpZiAoZ3JvdXBzKSB7XG4gICAgICAgICAgICBncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXAsIGtleSkge1xuICAgICAgICAgICAgICAgIGdyb3VwLmVycm9yKGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGdyb3Vwcy5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICB9O1xuICAgIEdyb3VwQnlTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBncm91cHMgPSB0aGlzLmdyb3VwcztcbiAgICAgICAgaWYgKGdyb3Vwcykge1xuICAgICAgICAgICAgZ3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBncm91cC5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBncm91cHMuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBHcm91cEJ5U3Vic2NyaWJlci5wcm90b3R5cGUucmVtb3ZlR3JvdXAgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHRoaXMuZ3JvdXBzLmRlbGV0ZShrZXkpO1xuICAgIH07XG4gICAgR3JvdXBCeVN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmF0dGVtcHRlZFRvVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRoaXMuY291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBHcm91cEJ5U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbnZhciBHcm91cER1cmF0aW9uU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEdyb3VwRHVyYXRpb25TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEdyb3VwRHVyYXRpb25TdWJzY3JpYmVyKGtleSwgZ3JvdXAsIHBhcmVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBncm91cCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMua2V5ID0ga2V5O1xuICAgICAgICBfdGhpcy5ncm91cCA9IGdyb3VwO1xuICAgICAgICBfdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgR3JvdXBEdXJhdGlvblN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICB9O1xuICAgIEdyb3VwRHVyYXRpb25TdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHBhcmVudCA9IF9hLnBhcmVudCwga2V5ID0gX2Eua2V5O1xuICAgICAgICB0aGlzLmtleSA9IHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgcGFyZW50LnJlbW92ZUdyb3VwKGtleSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBHcm91cER1cmF0aW9uU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbnZhciBHcm91cGVkT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEdyb3VwZWRPYnNlcnZhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEdyb3VwZWRPYnNlcnZhYmxlKGtleSwgZ3JvdXBTdWJqZWN0LCByZWZDb3VudFN1YnNjcmlwdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgIF90aGlzLmdyb3VwU3ViamVjdCA9IGdyb3VwU3ViamVjdDtcbiAgICAgICAgX3RoaXMucmVmQ291bnRTdWJzY3JpcHRpb24gPSByZWZDb3VudFN1YnNjcmlwdGlvbjtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBHcm91cGVkT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHJlZkNvdW50U3Vic2NyaXB0aW9uID0gX2EucmVmQ291bnRTdWJzY3JpcHRpb24sIGdyb3VwU3ViamVjdCA9IF9hLmdyb3VwU3ViamVjdDtcbiAgICAgICAgaWYgKHJlZkNvdW50U3Vic2NyaXB0aW9uICYmICFyZWZDb3VudFN1YnNjcmlwdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5hZGQobmV3IElubmVyUmVmQ291bnRTdWJzY3JpcHRpb24ocmVmQ291bnRTdWJzY3JpcHRpb24pKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpcHRpb24uYWRkKGdyb3VwU3ViamVjdC5zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIEdyb3VwZWRPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5Hcm91cGVkT2JzZXJ2YWJsZSA9IEdyb3VwZWRPYnNlcnZhYmxlO1xudmFyIElubmVyUmVmQ291bnRTdWJzY3JpcHRpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIElubmVyUmVmQ291bnRTdWJzY3JpcHRpb24ocGFyZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgcGFyZW50LmNvdW50Kys7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgSW5uZXJSZWZDb3VudFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudDtcbiAgICAgICAgaWYgKCFwYXJlbnQuY2xvc2VkICYmICF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgcGFyZW50LmNvdW50IC09IDE7XG4gICAgICAgICAgICBpZiAocGFyZW50LmNvdW50ID09PSAwICYmIHBhcmVudC5hdHRlbXB0ZWRUb1Vuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50LnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uO1xufShTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyb3VwQnkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuL1N1YmplY3RcIik7XG52YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMSA9IHJlcXVpcmUoXCIuL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JcIik7XG52YXIgQmVoYXZpb3JTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQmVoYXZpb3JTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJlaGF2aW9yU3ViamVjdChfdmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3ZhbHVlID0gX3ZhbHVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLCBcInZhbHVlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gX3N1cGVyLnByb3RvdHlwZS5fc3Vic2NyaWJlLmNhbGwodGhpcywgc3Vic2NyaWJlcik7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24gJiYgIXN1YnNjcmlwdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh0aGlzLl92YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc0Vycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyB0aGlzLnRocm93bkVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMS5PYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgdGhpcy5fdmFsdWUgPSB2YWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gQmVoYXZpb3JTdWJqZWN0O1xufShTdWJqZWN0XzEuU3ViamVjdCkpO1xuZXhwb3J0cy5CZWhhdmlvclN1YmplY3QgPSBCZWhhdmlvclN1YmplY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CZWhhdmlvclN1YmplY3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmlwdGlvblwiKTtcbnZhciBBY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICB9XG4gICAgQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIEFjdGlvbjtcbn0oU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKSk7XG5leHBvcnRzLkFjdGlvbiA9IEFjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFjdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQWN0aW9uXzEgPSByZXF1aXJlKFwiLi9BY3Rpb25cIik7XG52YXIgQXN5bmNBY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3luY0FjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY0FjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2NoZWR1bGVyLCB3b3JrKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLndvcmsgPSB3b3JrO1xuICAgICAgICBfdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuaWQ7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmlkIHx8IHRoaXMucmVxdWVzdEFzeW5jSWQoc2NoZWR1bGVyLCB0aGlzLmlkLCBkZWxheSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gc2V0SW50ZXJ2YWwoc2NoZWR1bGVyLmZsdXNoLmJpbmQoc2NoZWR1bGVyLCB0aGlzKSwgZGVsYXkpO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlY3ljbGVBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoZGVsYXkgIT09IG51bGwgJiYgdGhpcy5kZWxheSA9PT0gZGVsYXkgJiYgdGhpcy5wZW5kaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignZXhlY3V0aW5nIGEgY2FuY2VsbGVkIGFjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLl9leGVjdXRlKHN0YXRlLCBkZWxheSk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGVuZGluZyA9PT0gZmFsc2UgJiYgdGhpcy5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZCh0aGlzLnNjaGVkdWxlciwgdGhpcy5pZCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5fZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgdmFyIGVycm9yZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLndvcmsoc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGVycm9yVmFsdWUgPSAhIWUgJiYgZSB8fCBuZXcgRXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yZWQpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvclZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIHZhciBhY3Rpb25zID0gc2NoZWR1bGVyLmFjdGlvbnM7XG4gICAgICAgIHZhciBpbmRleCA9IGFjdGlvbnMuaW5kZXhPZih0aGlzKTtcbiAgICAgICAgdGhpcy53b3JrID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IG51bGw7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGFjdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQoc2NoZWR1bGVyLCBpZCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWxheSA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNBY3Rpb247XG59KEFjdGlvbl8xLkFjdGlvbikpO1xuZXhwb3J0cy5Bc3luY0FjdGlvbiA9IEFzeW5jQWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNBY3Rpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEFzeW5jQWN0aW9uXzEgPSByZXF1aXJlKFwiLi9Bc3luY0FjdGlvblwiKTtcbnZhciBRdWV1ZUFjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFF1ZXVlQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFF1ZXVlQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUXVldWVBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKGRlbGF5ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuc2NoZWR1bGUuY2FsbCh0aGlzLCBzdGF0ZSwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlci5mbHVzaCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBRdWV1ZUFjdGlvbi5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgcmV0dXJuIChkZWxheSA+IDAgfHwgdGhpcy5jbG9zZWQpID9cbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZXhlY3V0ZS5jYWxsKHRoaXMsIHN0YXRlLCBkZWxheSkgOlxuICAgICAgICAgICAgdGhpcy5fZXhlY3V0ZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgUXVldWVBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoKGRlbGF5ICE9PSBudWxsICYmIGRlbGF5ID4gMCkgfHwgKGRlbGF5ID09PSBudWxsICYmIHRoaXMuZGVsYXkgPiAwKSkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5mbHVzaCh0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBRdWV1ZUFjdGlvbjtcbn0oQXN5bmNBY3Rpb25fMS5Bc3luY0FjdGlvbikpO1xuZXhwb3J0cy5RdWV1ZUFjdGlvbiA9IFF1ZXVlQWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVldWVBY3Rpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU2NoZWR1bGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY2hlZHVsZXIoU2NoZWR1bGVyQWN0aW9uLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdGhpcy5TY2hlZHVsZXJBY3Rpb24gPSBTY2hlZHVsZXJBY3Rpb247XG4gICAgICAgIHRoaXMubm93ID0gbm93O1xuICAgIH1cbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHdvcmssIGRlbGF5LCBzdGF0ZSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLlNjaGVkdWxlckFjdGlvbih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgU2NoZWR1bGVyLm5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIERhdGUubm93KCk7IH07XG4gICAgcmV0dXJuIFNjaGVkdWxlcjtcbn0oKSk7XG5leHBvcnRzLlNjaGVkdWxlciA9IFNjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjaGVkdWxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU2NoZWR1bGVyXzEgPSByZXF1aXJlKFwiLi4vU2NoZWR1bGVyXCIpO1xudmFyIEFzeW5jU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXN5bmNTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNTY2hlZHVsZXIoU2NoZWR1bGVyQWN0aW9uLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlcl8xLlNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgU2NoZWR1bGVyQWN0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoQXN5bmNTY2hlZHVsZXIuZGVsZWdhdGUgJiYgQXN5bmNTY2hlZHVsZXIuZGVsZWdhdGUgIT09IF90aGlzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFzeW5jU2NoZWR1bGVyLmRlbGVnYXRlLm5vdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5hY3Rpb25zID0gW107XG4gICAgICAgIF90aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHdvcmssIGRlbGF5LCBzdGF0ZSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKEFzeW5jU2NoZWR1bGVyLmRlbGVnYXRlICYmIEFzeW5jU2NoZWR1bGVyLmRlbGVnYXRlICE9PSB0aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXIuZGVsZWdhdGUuc2NoZWR1bGUod29yaywgZGVsYXksIHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnNjaGVkdWxlLmNhbGwodGhpcywgd29yaywgZGVsYXksIHN0YXRlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNTY2hlZHVsZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goYWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKGVycm9yID0gYWN0aW9uLmV4ZWN1dGUoYWN0aW9uLnN0YXRlLCBhY3Rpb24uZGVsYXkpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSk7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgd2hpbGUgKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY1NjaGVkdWxlcjtcbn0oU2NoZWR1bGVyXzEuU2NoZWR1bGVyKSk7XG5leHBvcnRzLkFzeW5jU2NoZWR1bGVyID0gQXN5bmNTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luY1NjaGVkdWxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQXN5bmNTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuL0FzeW5jU2NoZWR1bGVyXCIpO1xudmFyIFF1ZXVlU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUXVldWVTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUXVldWVTY2hlZHVsZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFF1ZXVlU2NoZWR1bGVyO1xufShBc3luY1NjaGVkdWxlcl8xLkFzeW5jU2NoZWR1bGVyKSk7XG5leHBvcnRzLlF1ZXVlU2NoZWR1bGVyID0gUXVldWVTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1RdWV1ZVNjaGVkdWxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBRdWV1ZUFjdGlvbl8xID0gcmVxdWlyZShcIi4vUXVldWVBY3Rpb25cIik7XG52YXIgUXVldWVTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuL1F1ZXVlU2NoZWR1bGVyXCIpO1xuZXhwb3J0cy5xdWV1ZVNjaGVkdWxlciA9IG5ldyBRdWV1ZVNjaGVkdWxlcl8xLlF1ZXVlU2NoZWR1bGVyKFF1ZXVlQWN0aW9uXzEuUXVldWVBY3Rpb24pO1xuZXhwb3J0cy5xdWV1ZSA9IGV4cG9ydHMucXVldWVTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWV1ZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbmV4cG9ydHMuRU1QVFkgPSBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7XG5mdW5jdGlvbiBlbXB0eShzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVyID8gZW1wdHlTY2hlZHVsZWQoc2NoZWR1bGVyKSA6IGV4cG9ydHMuRU1QVFk7XG59XG5leHBvcnRzLmVtcHR5ID0gZW1wdHk7XG5mdW5jdGlvbiBlbXB0eVNjaGVkdWxlZChzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7IHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbXB0eS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGlzU2NoZWR1bGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5zY2hlZHVsZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNTY2hlZHVsZXIgPSBpc1NjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzU2NoZWR1bGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdWJzY3JpYmVUb0FycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7IHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW4gJiYgIXN1YnNjcmliZXIuY2xvc2VkOyBpKyspIHtcbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2ldKTtcbiAgICB9XG4gICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xufTsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZVRvQXJyYXkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaXB0aW9uXCIpO1xuZnVuY3Rpb24gc2NoZWR1bGVBcnJheShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbigpO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlucHV0W2krK10pO1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1Yi5hZGQodGhpcy5zY2hlZHVsZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gc3ViO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zY2hlZHVsZUFycmF5ID0gc2NoZWR1bGVBcnJheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlQXJyYXkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgc3Vic2NyaWJlVG9BcnJheV8xID0gcmVxdWlyZShcIi4uL3V0aWwvc3Vic2NyaWJlVG9BcnJheVwiKTtcbnZhciBzY2hlZHVsZUFycmF5XzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVkL3NjaGVkdWxlQXJyYXlcIik7XG5mdW5jdGlvbiBmcm9tQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghc2NoZWR1bGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoc3Vic2NyaWJlVG9BcnJheV8xLnN1YnNjcmliZVRvQXJyYXkoaW5wdXQpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZUFycmF5XzEuc2NoZWR1bGVBcnJheShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICB9XG59XG5leHBvcnRzLmZyb21BcnJheSA9IGZyb21BcnJheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21BcnJheS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBpc1NjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNTY2hlZHVsZXJcIik7XG52YXIgZnJvbUFycmF5XzEgPSByZXF1aXJlKFwiLi9mcm9tQXJyYXlcIik7XG52YXIgc2NoZWR1bGVBcnJheV8xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlZC9zY2hlZHVsZUFycmF5XCIpO1xuZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG4gICAgaWYgKGlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIoc2NoZWR1bGVyKSkge1xuICAgICAgICBhcmdzLnBvcCgpO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVBcnJheV8xLnNjaGVkdWxlQXJyYXkoYXJncywgc2NoZWR1bGVyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmcm9tQXJyYXlfMS5mcm9tQXJyYXkoYXJncyk7XG4gICAgfVxufVxuZXhwb3J0cy5vZiA9IG9mO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2YuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG5mdW5jdGlvbiB0aHJvd0Vycm9yKGVycm9yLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIXNjaGVkdWxlcikge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycm9yKTsgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7IHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2gsIDAsIHsgZXJyb3I6IGVycm9yLCBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyIH0pOyB9KTtcbiAgICB9XG59XG5leHBvcnRzLnRocm93RXJyb3IgPSB0aHJvd0Vycm9yO1xuZnVuY3Rpb24gZGlzcGF0Y2goX2EpIHtcbiAgICB2YXIgZXJyb3IgPSBfYS5lcnJvciwgc3Vic2NyaWJlciA9IF9hLnN1YnNjcmliZXI7XG4gICAgc3Vic2NyaWJlci5lcnJvcihlcnJvcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd0Vycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGVtcHR5XzEgPSByZXF1aXJlKFwiLi9vYnNlcnZhYmxlL2VtcHR5XCIpO1xudmFyIG9mXzEgPSByZXF1aXJlKFwiLi9vYnNlcnZhYmxlL29mXCIpO1xudmFyIHRocm93RXJyb3JfMSA9IHJlcXVpcmUoXCIuL29ic2VydmFibGUvdGhyb3dFcnJvclwiKTtcbnZhciBOb3RpZmljYXRpb25LaW5kO1xuKGZ1bmN0aW9uIChOb3RpZmljYXRpb25LaW5kKSB7XG4gICAgTm90aWZpY2F0aW9uS2luZFtcIk5FWFRcIl0gPSBcIk5cIjtcbiAgICBOb3RpZmljYXRpb25LaW5kW1wiRVJST1JcIl0gPSBcIkVcIjtcbiAgICBOb3RpZmljYXRpb25LaW5kW1wiQ09NUExFVEVcIl0gPSBcIkNcIjtcbn0pKE5vdGlmaWNhdGlvbktpbmQgPSBleHBvcnRzLk5vdGlmaWNhdGlvbktpbmQgfHwgKGV4cG9ydHMuTm90aWZpY2F0aW9uS2luZCA9IHt9KSk7XG52YXIgTm90aWZpY2F0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb3RpZmljYXRpb24oa2luZCwgdmFsdWUsIGVycm9yKSB7XG4gICAgICAgIHRoaXMua2luZCA9IGtpbmQ7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0ga2luZCA9PT0gJ04nO1xuICAgIH1cbiAgICBOb3RpZmljYXRpb24ucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ04nOlxuICAgICAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci5uZXh0ICYmIG9ic2VydmVyLm5leHQodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlICdFJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuZXJyb3IgJiYgb2JzZXJ2ZXIuZXJyb3IodGhpcy5lcnJvcik7XG4gICAgICAgICAgICBjYXNlICdDJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuY29tcGxldGUgJiYgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLnByb3RvdHlwZS5kbyA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIGtpbmQgPSB0aGlzLmtpbmQ7XG4gICAgICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgICAgICAgY2FzZSAnTic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHQgJiYgbmV4dCh0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgJ0UnOlxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvciAmJiBlcnJvcih0aGlzLmVycm9yKTtcbiAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBjb21wbGV0ZSAmJiBjb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24ucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uIChuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIGlmIChuZXh0T3JPYnNlcnZlciAmJiB0eXBlb2YgbmV4dE9yT2JzZXJ2ZXIubmV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub2JzZXJ2ZShuZXh0T3JPYnNlcnZlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kbyhuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLnByb3RvdHlwZS50b09ic2VydmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBraW5kID0gdGhpcy5raW5kO1xuICAgICAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ04nOlxuICAgICAgICAgICAgICAgIHJldHVybiBvZl8xLm9mKHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgY2FzZSAnRSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3JfMS50aHJvd0Vycm9yKHRoaXMuZXJyb3IpO1xuICAgICAgICAgICAgY2FzZSAnQyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5XzEuZW1wdHkoKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuZXhwZWN0ZWQgbm90aWZpY2F0aW9uIGtpbmQgdmFsdWUnKTtcbiAgICB9O1xuICAgIE5vdGlmaWNhdGlvbi5jcmVhdGVOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE5vdGlmaWNhdGlvbignTicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTm90aWZpY2F0aW9uLnVuZGVmaW5lZFZhbHVlTm90aWZpY2F0aW9uO1xuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLmNyZWF0ZUVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICByZXR1cm4gbmV3IE5vdGlmaWNhdGlvbignRScsIHVuZGVmaW5lZCwgZXJyKTtcbiAgICB9O1xuICAgIE5vdGlmaWNhdGlvbi5jcmVhdGVDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIE5vdGlmaWNhdGlvbi5jb21wbGV0ZU5vdGlmaWNhdGlvbjtcbiAgICB9O1xuICAgIE5vdGlmaWNhdGlvbi5jb21wbGV0ZU5vdGlmaWNhdGlvbiA9IG5ldyBOb3RpZmljYXRpb24oJ0MnKTtcbiAgICBOb3RpZmljYXRpb24udW5kZWZpbmVkVmFsdWVOb3RpZmljYXRpb24gPSBuZXcgTm90aWZpY2F0aW9uKCdOJywgdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gTm90aWZpY2F0aW9uO1xufSgpKTtcbmV4cG9ydHMuTm90aWZpY2F0aW9uID0gTm90aWZpY2F0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpY2F0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbnZhciBOb3RpZmljYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9Ob3RpZmljYXRpb25cIik7XG5mdW5jdGlvbiBvYnNlcnZlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIHJldHVybiBmdW5jdGlvbiBvYnNlcnZlT25PcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IE9ic2VydmVPbk9wZXJhdG9yKHNjaGVkdWxlciwgZGVsYXkpKTtcbiAgICB9O1xufVxuZXhwb3J0cy5vYnNlcnZlT24gPSBvYnNlcnZlT247XG52YXIgT2JzZXJ2ZU9uT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmVPbk9wZXJhdG9yKHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgfVxuICAgIE9ic2VydmVPbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgT2JzZXJ2ZU9uU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnNjaGVkdWxlciwgdGhpcy5kZWxheSkpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmVPbk9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydHMuT2JzZXJ2ZU9uT3BlcmF0b3IgPSBPYnNlcnZlT25PcGVyYXRvcjtcbnZhciBPYnNlcnZlT25TdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT2JzZXJ2ZU9uU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPYnNlcnZlT25TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9ic2VydmVPblN1YnNjcmliZXIuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHZhciBub3RpZmljYXRpb24gPSBhcmcubm90aWZpY2F0aW9uLCBkZXN0aW5hdGlvbiA9IGFyZy5kZXN0aW5hdGlvbjtcbiAgICAgICAgbm90aWZpY2F0aW9uLm9ic2VydmUoZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBPYnNlcnZlT25TdWJzY3JpYmVyLnByb3RvdHlwZS5zY2hlZHVsZU1lc3NhZ2UgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZCh0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShPYnNlcnZlT25TdWJzY3JpYmVyLmRpc3BhdGNoLCB0aGlzLmRlbGF5LCBuZXcgT2JzZXJ2ZU9uTWVzc2FnZShub3RpZmljYXRpb24sIHRoaXMuZGVzdGluYXRpb24pKSk7XG4gICAgfTtcbiAgICBPYnNlcnZlT25TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlTWVzc2FnZShOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb24uY3JlYXRlTmV4dCh2YWx1ZSkpO1xuICAgIH07XG4gICAgT2JzZXJ2ZU9uU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLnNjaGVkdWxlTWVzc2FnZShOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb24uY3JlYXRlRXJyb3IoZXJyKSk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIE9ic2VydmVPblN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZU1lc3NhZ2UoTm90aWZpY2F0aW9uXzEuTm90aWZpY2F0aW9uLmNyZWF0ZUNvbXBsZXRlKCkpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2ZU9uU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmV4cG9ydHMuT2JzZXJ2ZU9uU3Vic2NyaWJlciA9IE9ic2VydmVPblN1YnNjcmliZXI7XG52YXIgT2JzZXJ2ZU9uTWVzc2FnZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2ZU9uTWVzc2FnZShub3RpZmljYXRpb24sIGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uID0gbm90aWZpY2F0aW9uO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgfVxuICAgIHJldHVybiBPYnNlcnZlT25NZXNzYWdlO1xufSgpKTtcbmV4cG9ydHMuT2JzZXJ2ZU9uTWVzc2FnZSA9IE9ic2VydmVPbk1lc3NhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZlT24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuL1N1YmplY3RcIik7XG52YXIgcXVldWVfMSA9IHJlcXVpcmUoXCIuL3NjaGVkdWxlci9xdWV1ZVwiKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuL1N1YnNjcmlwdGlvblwiKTtcbnZhciBvYnNlcnZlT25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdG9ycy9vYnNlcnZlT25cIik7XG52YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMSA9IHJlcXVpcmUoXCIuL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JcIik7XG52YXIgU3ViamVjdFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4vU3ViamVjdFN1YnNjcmlwdGlvblwiKTtcbnZhciBSZXBsYXlTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVwbGF5U3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXBsYXlTdWJqZWN0KGJ1ZmZlclNpemUsIHdpbmRvd1RpbWUsIHNjaGVkdWxlcikge1xuICAgICAgICBpZiAoYnVmZmVyU2l6ZSA9PT0gdm9pZCAwKSB7IGJ1ZmZlclNpemUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7IH1cbiAgICAgICAgaWYgKHdpbmRvd1RpbWUgPT09IHZvaWQgMCkgeyB3aW5kb3dUaW1lID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMuX2V2ZW50cyA9IFtdO1xuICAgICAgICBfdGhpcy5faW5maW5pdGVUaW1lV2luZG93ID0gZmFsc2U7XG4gICAgICAgIF90aGlzLl9idWZmZXJTaXplID0gYnVmZmVyU2l6ZSA8IDEgPyAxIDogYnVmZmVyU2l6ZTtcbiAgICAgICAgX3RoaXMuX3dpbmRvd1RpbWUgPSB3aW5kb3dUaW1lIDwgMSA/IDEgOiB3aW5kb3dUaW1lO1xuICAgICAgICBpZiAod2luZG93VGltZSA9PT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKSB7XG4gICAgICAgICAgICBfdGhpcy5faW5maW5pdGVUaW1lV2luZG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIF90aGlzLm5leHQgPSBfdGhpcy5uZXh0SW5maW5pdGVUaW1lV2luZG93O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMubmV4dCA9IF90aGlzLm5leHRUaW1lV2luZG93O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmVwbGF5U3ViamVjdC5wcm90b3R5cGUubmV4dEluZmluaXRlVGltZVdpbmRvdyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgX2V2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgICAgICAgIF9ldmVudHMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoX2V2ZW50cy5sZW5ndGggPiB0aGlzLl9idWZmZXJTaXplKSB7XG4gICAgICAgICAgICAgICAgX2V2ZW50cy5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUubmV4dC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICB9O1xuICAgIFJlcGxheVN1YmplY3QucHJvdG90eXBlLm5leHRUaW1lV2luZG93ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cy5wdXNoKG5ldyBSZXBsYXlFdmVudCh0aGlzLl9nZXROb3coKSwgdmFsdWUpKTtcbiAgICAgICAgICAgIHRoaXMuX3RyaW1CdWZmZXJUaGVuR2V0RXZlbnRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgdmFsdWUpO1xuICAgIH07XG4gICAgUmVwbGF5U3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfaW5maW5pdGVUaW1lV2luZG93ID0gdGhpcy5faW5maW5pdGVUaW1lV2luZG93O1xuICAgICAgICB2YXIgX2V2ZW50cyA9IF9pbmZpbml0ZVRpbWVXaW5kb3cgPyB0aGlzLl9ldmVudHMgOiB0aGlzLl90cmltQnVmZmVyVGhlbkdldEV2ZW50cygpO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIHZhciBsZW4gPSBfZXZlbnRzLmxlbmd0aDtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMS5PYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaXNTdG9wcGVkIHx8IHRoaXMuaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goc3Vic2NyaWJlcik7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBuZXcgU3ViamVjdFN1YnNjcmlwdGlvbl8xLlN1YmplY3RTdWJzY3JpcHRpb24odGhpcywgc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoc3Vic2NyaWJlciA9IG5ldyBvYnNlcnZlT25fMS5PYnNlcnZlT25TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHNjaGVkdWxlcikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfaW5maW5pdGVUaW1lV2luZG93KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbiAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChfZXZlbnRzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuICYmICFzdWJzY3JpYmVyLmNsb3NlZDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KF9ldmVudHNbaV0udmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc0Vycm9yKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHRoaXMudGhyb3duRXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIFJlcGxheVN1YmplY3QucHJvdG90eXBlLl9nZXROb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5zY2hlZHVsZXIgfHwgcXVldWVfMS5xdWV1ZSkubm93KCk7XG4gICAgfTtcbiAgICBSZXBsYXlTdWJqZWN0LnByb3RvdHlwZS5fdHJpbUJ1ZmZlclRoZW5HZXRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBub3cgPSB0aGlzLl9nZXROb3coKTtcbiAgICAgICAgdmFyIF9idWZmZXJTaXplID0gdGhpcy5fYnVmZmVyU2l6ZTtcbiAgICAgICAgdmFyIF93aW5kb3dUaW1lID0gdGhpcy5fd2luZG93VGltZTtcbiAgICAgICAgdmFyIF9ldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICAgIHZhciBldmVudHNDb3VudCA9IF9ldmVudHMubGVuZ3RoO1xuICAgICAgICB2YXIgc3BsaWNlQ291bnQgPSAwO1xuICAgICAgICB3aGlsZSAoc3BsaWNlQ291bnQgPCBldmVudHNDb3VudCkge1xuICAgICAgICAgICAgaWYgKChub3cgLSBfZXZlbnRzW3NwbGljZUNvdW50XS50aW1lKSA8IF93aW5kb3dUaW1lKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcGxpY2VDb3VudCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudHNDb3VudCA+IF9idWZmZXJTaXplKSB7XG4gICAgICAgICAgICBzcGxpY2VDb3VudCA9IE1hdGgubWF4KHNwbGljZUNvdW50LCBldmVudHNDb3VudCAtIF9idWZmZXJTaXplKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3BsaWNlQ291bnQgPiAwKSB7XG4gICAgICAgICAgICBfZXZlbnRzLnNwbGljZSgwLCBzcGxpY2VDb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9ldmVudHM7XG4gICAgfTtcbiAgICByZXR1cm4gUmVwbGF5U3ViamVjdDtcbn0oU3ViamVjdF8xLlN1YmplY3QpKTtcbmV4cG9ydHMuUmVwbGF5U3ViamVjdCA9IFJlcGxheVN1YmplY3Q7XG52YXIgUmVwbGF5RXZlbnQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlcGxheUV2ZW50KHRpbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudGltZSA9IHRpbWU7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIFJlcGxheUV2ZW50O1xufSgpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlcGxheVN1YmplY3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuL1N1YmplY3RcIik7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi9TdWJzY3JpcHRpb25cIik7XG52YXIgQXN5bmNTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXN5bmNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jU3ViamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnZhbHVlID0gbnVsbDtcbiAgICAgICAgX3RoaXMuaGFzTmV4dCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5oYXNDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY1N1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBpZiAodGhpcy5oYXNFcnJvcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcih0aGlzLnRocm93bkVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24uRU1QVFk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5oYXNDb21wbGV0ZWQgJiYgdGhpcy5oYXNOZXh0KSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLl9zdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIEFzeW5jU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLmhhc05leHQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY1N1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZXJyb3IuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuaGFzTmV4dCkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgdGhpcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jU3ViamVjdDtcbn0oU3ViamVjdF8xLlN1YmplY3QpKTtcbmV4cG9ydHMuQXN5bmNTdWJqZWN0ID0gQXN5bmNTdWJqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNTdWJqZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIG5leHRIYW5kbGUgPSAxO1xudmFyIFJFU09MVkVEID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOyB9KSgpO1xudmFyIGFjdGl2ZUhhbmRsZXMgPSB7fTtcbmZ1bmN0aW9uIGZpbmRBbmRDbGVhckhhbmRsZShoYW5kbGUpIHtcbiAgICBpZiAoaGFuZGxlIGluIGFjdGl2ZUhhbmRsZXMpIHtcbiAgICAgICAgZGVsZXRlIGFjdGl2ZUhhbmRsZXNbaGFuZGxlXTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuSW1tZWRpYXRlID0ge1xuICAgIHNldEltbWVkaWF0ZTogZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgIHZhciBoYW5kbGUgPSBuZXh0SGFuZGxlKys7XG4gICAgICAgIGFjdGl2ZUhhbmRsZXNbaGFuZGxlXSA9IHRydWU7XG4gICAgICAgIFJFU09MVkVELnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gZmluZEFuZENsZWFySGFuZGxlKGhhbmRsZSkgJiYgY2IoKTsgfSk7XG4gICAgICAgIHJldHVybiBoYW5kbGU7XG4gICAgfSxcbiAgICBjbGVhckltbWVkaWF0ZTogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICBmaW5kQW5kQ2xlYXJIYW5kbGUoaGFuZGxlKTtcbiAgICB9LFxufTtcbmV4cG9ydHMuVGVzdFRvb2xzID0ge1xuICAgIHBlbmRpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGFjdGl2ZUhhbmRsZXMpLmxlbmd0aDtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW1tZWRpYXRlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBJbW1lZGlhdGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL0ltbWVkaWF0ZVwiKTtcbnZhciBBc3luY0FjdGlvbl8xID0gcmVxdWlyZShcIi4vQXN5bmNBY3Rpb25cIik7XG52YXIgQXNhcEFjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFzYXBBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXNhcEFjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2NoZWR1bGVyLCB3b3JrKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLndvcmsgPSB3b3JrO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzYXBBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoZGVsYXkgIT09IG51bGwgJiYgZGVsYXkgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZC5jYWxsKHRoaXMsIHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICBzY2hlZHVsZXIuYWN0aW9ucy5wdXNoKHRoaXMpO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlZCB8fCAoc2NoZWR1bGVyLnNjaGVkdWxlZCA9IEltbWVkaWF0ZV8xLkltbWVkaWF0ZS5zZXRJbW1lZGlhdGUoc2NoZWR1bGVyLmZsdXNoLmJpbmQoc2NoZWR1bGVyLCBudWxsKSkpO1xuICAgIH07XG4gICAgQXNhcEFjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmICgoZGVsYXkgIT09IG51bGwgJiYgZGVsYXkgPiAwKSB8fCAoZGVsYXkgPT09IG51bGwgJiYgdGhpcy5kZWxheSA+IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZC5jYWxsKHRoaXMsIHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZWR1bGVyLmFjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBJbW1lZGlhdGVfMS5JbW1lZGlhdGUuY2xlYXJJbW1lZGlhdGUoaWQpO1xuICAgICAgICAgICAgc2NoZWR1bGVyLnNjaGVkdWxlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgcmV0dXJuIEFzYXBBY3Rpb247XG59KEFzeW5jQWN0aW9uXzEuQXN5bmNBY3Rpb24pKTtcbmV4cG9ydHMuQXNhcEFjdGlvbiA9IEFzYXBBY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc2FwQWN0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBBc3luY1NjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4vQXN5bmNTY2hlZHVsZXJcIik7XG52YXIgQXNhcFNjaGVkdWxlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFzYXBTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXNhcFNjaGVkdWxlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBc2FwU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBjb3VudCA9IGFjdGlvbnMubGVuZ3RoO1xuICAgICAgICBhY3Rpb24gPSBhY3Rpb24gfHwgYWN0aW9ucy5zaGlmdCgpO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgPSBhY3Rpb24uZXhlY3V0ZShhY3Rpb24uc3RhdGUsIGFjdGlvbi5kZWxheSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoKytpbmRleCA8IGNvdW50ICYmIChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpKTtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGNvdW50ICYmIChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzYXBTY2hlZHVsZXI7XG59KEFzeW5jU2NoZWR1bGVyXzEuQXN5bmNTY2hlZHVsZXIpKTtcbmV4cG9ydHMuQXNhcFNjaGVkdWxlciA9IEFzYXBTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc2FwU2NoZWR1bGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEFzYXBBY3Rpb25fMSA9IHJlcXVpcmUoXCIuL0FzYXBBY3Rpb25cIik7XG52YXIgQXNhcFNjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4vQXNhcFNjaGVkdWxlclwiKTtcbmV4cG9ydHMuYXNhcFNjaGVkdWxlciA9IG5ldyBBc2FwU2NoZWR1bGVyXzEuQXNhcFNjaGVkdWxlcihBc2FwQWN0aW9uXzEuQXNhcEFjdGlvbik7XG5leHBvcnRzLmFzYXAgPSBleHBvcnRzLmFzYXBTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc2FwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEFzeW5jQWN0aW9uXzEgPSByZXF1aXJlKFwiLi9Bc3luY0FjdGlvblwiKTtcbnZhciBBc3luY1NjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4vQXN5bmNTY2hlZHVsZXJcIik7XG5leHBvcnRzLmFzeW5jU2NoZWR1bGVyID0gbmV3IEFzeW5jU2NoZWR1bGVyXzEuQXN5bmNTY2hlZHVsZXIoQXN5bmNBY3Rpb25fMS5Bc3luY0FjdGlvbik7XG5leHBvcnRzLmFzeW5jID0gZXhwb3J0cy5hc3luY1NjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBBc3luY0FjdGlvbl8xID0gcmVxdWlyZShcIi4vQXN5bmNBY3Rpb25cIik7XG52YXIgQW5pbWF0aW9uRnJhbWVBY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBbmltYXRpb25GcmFtZUFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBbmltYXRpb25GcmFtZUFjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2NoZWR1bGVyLCB3b3JrKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLndvcmsgPSB3b3JrO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFuaW1hdGlvbkZyYW1lQWN0aW9uLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKGRlbGF5ICE9PSBudWxsICYmIGRlbGF5ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgc2NoZWR1bGVyLmFjdGlvbnMucHVzaCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZWQgfHwgKHNjaGVkdWxlci5zY2hlZHVsZWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc2NoZWR1bGVyLmZsdXNoKG51bGwpOyB9KSk7XG4gICAgfTtcbiAgICBBbmltYXRpb25GcmFtZUFjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmICgoZGVsYXkgIT09IG51bGwgJiYgZGVsYXkgPiAwKSB8fCAoZGVsYXkgPT09IG51bGwgJiYgdGhpcy5kZWxheSA+IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZC5jYWxsKHRoaXMsIHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZWR1bGVyLmFjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gICAgICAgICAgICBzY2hlZHVsZXIuc2NoZWR1bGVkID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICByZXR1cm4gQW5pbWF0aW9uRnJhbWVBY3Rpb247XG59KEFzeW5jQWN0aW9uXzEuQXN5bmNBY3Rpb24pKTtcbmV4cG9ydHMuQW5pbWF0aW9uRnJhbWVBY3Rpb24gPSBBbmltYXRpb25GcmFtZUFjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFuaW1hdGlvbkZyYW1lQWN0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBBc3luY1NjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4vQXN5bmNTY2hlZHVsZXJcIik7XG52YXIgQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBbmltYXRpb25GcmFtZVNjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBbmltYXRpb25GcmFtZVNjaGVkdWxlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBbmltYXRpb25GcmFtZVNjaGVkdWxlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgY291bnQgPSBhY3Rpb25zLmxlbmd0aDtcbiAgICAgICAgYWN0aW9uID0gYWN0aW9uIHx8IGFjdGlvbnMuc2hpZnQoKTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKGVycm9yID0gYWN0aW9uLmV4ZWN1dGUoYWN0aW9uLnN0YXRlLCBhY3Rpb24uZGVsYXkpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKCsraW5kZXggPCBjb3VudCAmJiAoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSk7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBjb3VudCAmJiAoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRpb25GcmFtZVNjaGVkdWxlcjtcbn0oQXN5bmNTY2hlZHVsZXJfMS5Bc3luY1NjaGVkdWxlcikpO1xuZXhwb3J0cy5BbmltYXRpb25GcmFtZVNjaGVkdWxlciA9IEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQW5pbWF0aW9uRnJhbWVBY3Rpb25fMSA9IHJlcXVpcmUoXCIuL0FuaW1hdGlvbkZyYW1lQWN0aW9uXCIpO1xudmFyIEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyXzEgPSByZXF1aXJlKFwiLi9BbmltYXRpb25GcmFtZVNjaGVkdWxlclwiKTtcbmV4cG9ydHMuYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIgPSBuZXcgQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXJfMS5BbmltYXRpb25GcmFtZVNjaGVkdWxlcihBbmltYXRpb25GcmFtZUFjdGlvbl8xLkFuaW1hdGlvbkZyYW1lQWN0aW9uKTtcbmV4cG9ydHMuYW5pbWF0aW9uRnJhbWUgPSBleHBvcnRzLmFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5pbWF0aW9uRnJhbWUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEFzeW5jQWN0aW9uXzEgPSByZXF1aXJlKFwiLi9Bc3luY0FjdGlvblwiKTtcbnZhciBBc3luY1NjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4vQXN5bmNTY2hlZHVsZXJcIik7XG52YXIgVmlydHVhbFRpbWVTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhWaXJ0dWFsVGltZVNjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBWaXJ0dWFsVGltZVNjaGVkdWxlcihTY2hlZHVsZXJBY3Rpb24sIG1heEZyYW1lcykge1xuICAgICAgICBpZiAoU2NoZWR1bGVyQWN0aW9uID09PSB2b2lkIDApIHsgU2NoZWR1bGVyQWN0aW9uID0gVmlydHVhbEFjdGlvbjsgfVxuICAgICAgICBpZiAobWF4RnJhbWVzID09PSB2b2lkIDApIHsgbWF4RnJhbWVzID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFNjaGVkdWxlckFjdGlvbiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuZnJhbWU7IH0pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm1heEZyYW1lcyA9IG1heEZyYW1lcztcbiAgICAgICAgX3RoaXMuZnJhbWUgPSAwO1xuICAgICAgICBfdGhpcy5pbmRleCA9IC0xO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFZpcnR1YWxUaW1lU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgYWN0aW9ucyA9IF9hLmFjdGlvbnMsIG1heEZyYW1lcyA9IF9hLm1heEZyYW1lcztcbiAgICAgICAgdmFyIGVycm9yLCBhY3Rpb247XG4gICAgICAgIHdoaWxlICgoYWN0aW9uID0gYWN0aW9uc1swXSkgJiYgYWN0aW9uLmRlbGF5IDw9IG1heEZyYW1lcykge1xuICAgICAgICAgICAgYWN0aW9ucy5zaGlmdCgpO1xuICAgICAgICAgICAgdGhpcy5mcmFtZSA9IGFjdGlvbi5kZWxheTtcbiAgICAgICAgICAgIGlmIChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgd2hpbGUgKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpcnR1YWxUaW1lU2NoZWR1bGVyLmZyYW1lVGltZUZhY3RvciA9IDEwO1xuICAgIHJldHVybiBWaXJ0dWFsVGltZVNjaGVkdWxlcjtcbn0oQXN5bmNTY2hlZHVsZXJfMS5Bc3luY1NjaGVkdWxlcikpO1xuZXhwb3J0cy5WaXJ0dWFsVGltZVNjaGVkdWxlciA9IFZpcnR1YWxUaW1lU2NoZWR1bGVyO1xudmFyIFZpcnR1YWxBY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhWaXJ0dWFsQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFZpcnR1YWxBY3Rpb24oc2NoZWR1bGVyLCB3b3JrLCBpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkgeyBpbmRleCA9IHNjaGVkdWxlci5pbmRleCArPSAxOyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yaykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy53b3JrID0gd29yaztcbiAgICAgICAgX3RoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgX3RoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuaW5kZXggPSBzY2hlZHVsZXIuaW5kZXggPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBWaXJ0dWFsQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmICghdGhpcy5pZCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuc2NoZWR1bGUuY2FsbCh0aGlzLCBzdGF0ZSwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgVmlydHVhbEFjdGlvbih0aGlzLnNjaGVkdWxlciwgdGhpcy53b3JrKTtcbiAgICAgICAgdGhpcy5hZGQoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgVmlydHVhbEFjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHRoaXMuZGVsYXkgPSBzY2hlZHVsZXIuZnJhbWUgKyBkZWxheTtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBzY2hlZHVsZXIuYWN0aW9ucztcbiAgICAgICAgYWN0aW9ucy5wdXNoKHRoaXMpO1xuICAgICAgICBhY3Rpb25zLnNvcnQoVmlydHVhbEFjdGlvbi5zb3J0QWN0aW9ucyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgVmlydHVhbEFjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBWaXJ0dWFsQWN0aW9uLnByb3RvdHlwZS5fZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fZXhlY3V0ZS5jYWxsKHRoaXMsIHN0YXRlLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpcnR1YWxBY3Rpb24uc29ydEFjdGlvbnMgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICBpZiAoYS5kZWxheSA9PT0gYi5kZWxheSkge1xuICAgICAgICAgICAgaWYgKGEuaW5kZXggPT09IGIuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGEuaW5kZXggPiBiLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYS5kZWxheSA+IGIuZGVsYXkpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gVmlydHVhbEFjdGlvbjtcbn0oQXN5bmNBY3Rpb25fMS5Bc3luY0FjdGlvbikpO1xuZXhwb3J0cy5WaXJ0dWFsQWN0aW9uID0gVmlydHVhbEFjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZpcnR1YWxUaW1lU2NoZWR1bGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gbm9vcCgpIHsgfVxuZXhwb3J0cy5ub29wID0gbm9vcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vb3AuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG5mdW5jdGlvbiBpc09ic2VydmFibGUob2JqKSB7XG4gICAgcmV0dXJuICEhb2JqICYmIChvYmogaW5zdGFuY2VvZiBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSB8fCAodHlwZW9mIG9iai5saWZ0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nKSk7XG59XG5leHBvcnRzLmlzT2JzZXJ2YWJsZSA9IGlzT2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzT2JzZXJ2YWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBBcmd1bWVudE91dE9mUmFuZ2VFcnJvckltcGwgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9ySW1wbCgpIHtcbiAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ2FyZ3VtZW50IG91dCBvZiByYW5nZSc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdBcmd1bWVudE91dE9mUmFuZ2VFcnJvcic7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBBcmd1bWVudE91dE9mUmFuZ2VFcnJvckltcGwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIHJldHVybiBBcmd1bWVudE91dE9mUmFuZ2VFcnJvckltcGw7XG59KSgpO1xuZXhwb3J0cy5Bcmd1bWVudE91dE9mUmFuZ2VFcnJvciA9IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9ySW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEVtcHR5RXJyb3JJbXBsID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFbXB0eUVycm9ySW1wbCgpIHtcbiAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ25vIGVsZW1lbnRzIGluIHNlcXVlbmNlJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ0VtcHR5RXJyb3InO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgRW1wdHlFcnJvckltcGwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIHJldHVybiBFbXB0eUVycm9ySW1wbDtcbn0pKCk7XG5leHBvcnRzLkVtcHR5RXJyb3IgPSBFbXB0eUVycm9ySW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVtcHR5RXJyb3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVGltZW91dEVycm9ySW1wbCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGltZW91dEVycm9ySW1wbCgpIHtcbiAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ1RpbWVvdXQgaGFzIG9jY3VycmVkJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ1RpbWVvdXRFcnJvcic7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBUaW1lb3V0RXJyb3JJbXBsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICByZXR1cm4gVGltZW91dEVycm9ySW1wbDtcbn0pKCk7XG5leHBvcnRzLlRpbWVvdXRFcnJvciA9IFRpbWVvdXRFcnJvckltcGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UaW1lb3V0RXJyb3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gbWFwKHByb2plY3QsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWFwT3BlcmF0aW9uKHNvdXJjZSkge1xuICAgICAgICBpZiAodHlwZW9mIHByb2plY3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IGlzIG5vdCBhIGZ1bmN0aW9uLiBBcmUgeW91IGxvb2tpbmcgZm9yIGBtYXBUbygpYD8nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IE1hcE9wZXJhdG9yKHByb2plY3QsIHRoaXNBcmcpKTtcbiAgICB9O1xufVxuZXhwb3J0cy5tYXAgPSBtYXA7XG52YXIgTWFwT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hcE9wZXJhdG9yKHByb2plY3QsIHRoaXNBcmcpIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICB9XG4gICAgTWFwT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBNYXBTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJvamVjdCwgdGhpcy50aGlzQXJnKSk7XG4gICAgfTtcbiAgICByZXR1cm4gTWFwT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0cy5NYXBPcGVyYXRvciA9IE1hcE9wZXJhdG9yO1xudmFyIE1hcFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNYXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1hcFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByb2plY3QsIHRoaXNBcmcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICBfdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIF90aGlzLnRoaXNBcmcgPSB0aGlzQXJnIHx8IF90aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByb2plY3QuY2FsbCh0aGlzLnRoaXNBcmcsIHZhbHVlLCB0aGlzLmNvdW50KyspO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcbiAgICB9O1xuICAgIHJldHVybiBNYXBTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIEFzeW5jU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL0FzeW5jU3ViamVjdFwiKTtcbnZhciBtYXBfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRvcnMvbWFwXCIpO1xudmFyIGNhblJlcG9ydEVycm9yXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9jYW5SZXBvcnRFcnJvclwiKTtcbnZhciBpc0FycmF5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0FycmF5XCIpO1xudmFyIGlzU2NoZWR1bGVyXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc1NjaGVkdWxlclwiKTtcbmZ1bmN0aW9uIGJpbmRDYWxsYmFjayhjYWxsYmFja0Z1bmMsIHJlc3VsdFNlbGVjdG9yLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKGlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIocmVzdWx0U2VsZWN0b3IpKSB7XG4gICAgICAgICAgICBzY2hlZHVsZXIgPSByZXN1bHRTZWxlY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBiaW5kQ2FsbGJhY2soY2FsbGJhY2tGdW5jLCBzY2hlZHVsZXIpLmFwcGx5KHZvaWQgMCwgYXJncykucGlwZShtYXBfMS5tYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIGlzQXJyYXlfMS5pc0FycmF5KGFyZ3MpID8gcmVzdWx0U2VsZWN0b3IuYXBwbHkodm9pZCAwLCBhcmdzKSA6IHJlc3VsdFNlbGVjdG9yKGFyZ3MpOyB9KSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgICB2YXIgc3ViamVjdDtcbiAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgICBzdWJqZWN0OiBzdWJqZWN0LFxuICAgICAgICAgICAgY2FsbGJhY2tGdW5jOiBjYWxsYmFja0Z1bmMsXG4gICAgICAgICAgICBzY2hlZHVsZXI6IHNjaGVkdWxlcixcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgaWYgKCFzY2hlZHVsZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXN1YmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdCA9IG5ldyBBc3luY1N1YmplY3RfMS5Bc3luY1N1YmplY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5uZXJBcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyQXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5uZXh0KGlubmVyQXJncy5sZW5ndGggPD0gMSA/IGlubmVyQXJnc1swXSA6IGlubmVyQXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja0Z1bmMuYXBwbHkoY29udGV4dCwgYXJncy5jb25jYXQoW2hhbmRsZXJdKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhblJlcG9ydEVycm9yXzEuY2FuUmVwb3J0RXJyb3Ioc3ViamVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3ViamVjdC5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsIHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaCwgMCwgc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xufVxuZXhwb3J0cy5iaW5kQ2FsbGJhY2sgPSBiaW5kQ2FsbGJhY2s7XG5mdW5jdGlvbiBkaXNwYXRjaChzdGF0ZSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBhcmdzID0gc3RhdGUuYXJncywgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIHBhcmFtcyA9IHN0YXRlLnBhcmFtcztcbiAgICB2YXIgY2FsbGJhY2tGdW5jID0gcGFyYW1zLmNhbGxiYWNrRnVuYywgY29udGV4dCA9IHBhcmFtcy5jb250ZXh0LCBzY2hlZHVsZXIgPSBwYXJhbXMuc2NoZWR1bGVyO1xuICAgIHZhciBzdWJqZWN0ID0gcGFyYW1zLnN1YmplY3Q7XG4gICAgaWYgKCFzdWJqZWN0KSB7XG4gICAgICAgIHN1YmplY3QgPSBwYXJhbXMuc3ViamVjdCA9IG5ldyBBc3luY1N1YmplY3RfMS5Bc3luY1N1YmplY3QoKTtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaW5uZXJBcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGlubmVyQXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHZhbHVlID0gaW5uZXJBcmdzLmxlbmd0aCA8PSAxID8gaW5uZXJBcmdzWzBdIDogaW5uZXJBcmdzO1xuICAgICAgICAgICAgX3RoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaE5leHQsIDAsIHsgdmFsdWU6IHZhbHVlLCBzdWJqZWN0OiBzdWJqZWN0IH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNhbGxiYWNrRnVuYy5hcHBseShjb250ZXh0LCBhcmdzLmNvbmNhdChbaGFuZGxlcl0pKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZGQoc3ViamVjdC5zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hOZXh0KHN0YXRlKSB7XG4gICAgdmFyIHZhbHVlID0gc3RhdGUudmFsdWUsIHN1YmplY3QgPSBzdGF0ZS5zdWJqZWN0O1xuICAgIHN1YmplY3QubmV4dCh2YWx1ZSk7XG4gICAgc3ViamVjdC5jb21wbGV0ZSgpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hFcnJvcihzdGF0ZSkge1xuICAgIHZhciBlcnIgPSBzdGF0ZS5lcnIsIHN1YmplY3QgPSBzdGF0ZS5zdWJqZWN0O1xuICAgIHN1YmplY3QuZXJyb3IoZXJyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJpbmRDYWxsYmFjay5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBBc3luY1N1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9Bc3luY1N1YmplY3RcIik7XG52YXIgbWFwXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL21hcFwiKTtcbnZhciBjYW5SZXBvcnRFcnJvcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvY2FuUmVwb3J0RXJyb3JcIik7XG52YXIgaXNTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzU2NoZWR1bGVyXCIpO1xudmFyIGlzQXJyYXlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzQXJyYXlcIik7XG5mdW5jdGlvbiBiaW5kTm9kZUNhbGxiYWNrKGNhbGxiYWNrRnVuYywgcmVzdWx0U2VsZWN0b3IsIHNjaGVkdWxlcikge1xuICAgIGlmIChyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICBpZiAoaXNTY2hlZHVsZXJfMS5pc1NjaGVkdWxlcihyZXN1bHRTZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpbmROb2RlQ2FsbGJhY2soY2FsbGJhY2tGdW5jLCBzY2hlZHVsZXIpLmFwcGx5KHZvaWQgMCwgYXJncykucGlwZShtYXBfMS5tYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIGlzQXJyYXlfMS5pc0FycmF5KGFyZ3MpID8gcmVzdWx0U2VsZWN0b3IuYXBwbHkodm9pZCAwLCBhcmdzKSA6IHJlc3VsdFNlbGVjdG9yKGFyZ3MpOyB9KSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgIHN1YmplY3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICBjYWxsYmFja0Z1bmM6IGNhbGxiYWNrRnVuYyxcbiAgICAgICAgICAgIHNjaGVkdWxlcjogc2NoZWR1bGVyLFxuICAgICAgICAgICAgY29udGV4dDogdGhpcyxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBwYXJhbXMuY29udGV4dDtcbiAgICAgICAgICAgIHZhciBzdWJqZWN0ID0gcGFyYW1zLnN1YmplY3Q7XG4gICAgICAgICAgICBpZiAoIXNjaGVkdWxlcikge1xuICAgICAgICAgICAgICAgIGlmICghc3ViamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0ID0gcGFyYW1zLnN1YmplY3QgPSBuZXcgQXN5bmNTdWJqZWN0XzEuQXN5bmNTdWJqZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlubmVyQXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbm5lckFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnIgPSBpbm5lckFyZ3Muc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5uZXh0KGlubmVyQXJncy5sZW5ndGggPD0gMSA/IGlubmVyQXJnc1swXSA6IGlubmVyQXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja0Z1bmMuYXBwbHkoY29udGV4dCwgYXJncy5jb25jYXQoW2hhbmRsZXJdKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhblJlcG9ydEVycm9yXzEuY2FuUmVwb3J0RXJyb3Ioc3ViamVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3ViamVjdC5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoLCAwLCB7IHBhcmFtczogcGFyYW1zLCBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyLCBjb250ZXh0OiBjb250ZXh0IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xufVxuZXhwb3J0cy5iaW5kTm9kZUNhbGxiYWNrID0gYmluZE5vZGVDYWxsYmFjaztcbmZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3RhdGUucGFyYW1zLCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlciwgY29udGV4dCA9IHN0YXRlLmNvbnRleHQ7XG4gICAgdmFyIGNhbGxiYWNrRnVuYyA9IHBhcmFtcy5jYWxsYmFja0Z1bmMsIGFyZ3MgPSBwYXJhbXMuYXJncywgc2NoZWR1bGVyID0gcGFyYW1zLnNjaGVkdWxlcjtcbiAgICB2YXIgc3ViamVjdCA9IHBhcmFtcy5zdWJqZWN0O1xuICAgIGlmICghc3ViamVjdCkge1xuICAgICAgICBzdWJqZWN0ID0gcGFyYW1zLnN1YmplY3QgPSBuZXcgQXN5bmNTdWJqZWN0XzEuQXN5bmNTdWJqZWN0KCk7XG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGlubmVyQXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBpbm5lckFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBlcnIgPSBpbm5lckFyZ3Muc2hpZnQoKTtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoRXJyb3IsIDAsIHsgZXJyOiBlcnIsIHN1YmplY3Q6IHN1YmplY3QgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaW5uZXJBcmdzLmxlbmd0aCA8PSAxID8gaW5uZXJBcmdzWzBdIDogaW5uZXJBcmdzO1xuICAgICAgICAgICAgICAgIF90aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hOZXh0LCAwLCB7IHZhbHVlOiB2YWx1ZSwgc3ViamVjdDogc3ViamVjdCB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjYWxsYmFja0Z1bmMuYXBwbHkoY29udGV4dCwgYXJncy5jb25jYXQoW2hhbmRsZXJdKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoRXJyb3IsIDAsIHsgZXJyOiBlcnIsIHN1YmplY3Q6IHN1YmplY3QgfSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkKHN1YmplY3Quc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoTmV4dChhcmcpIHtcbiAgICB2YXIgdmFsdWUgPSBhcmcudmFsdWUsIHN1YmplY3QgPSBhcmcuc3ViamVjdDtcbiAgICBzdWJqZWN0Lm5leHQodmFsdWUpO1xuICAgIHN1YmplY3QuY29tcGxldGUoKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRXJyb3IoYXJnKSB7XG4gICAgdmFyIGVyciA9IGFyZy5lcnIsIHN1YmplY3QgPSBhcmcuc3ViamVjdDtcbiAgICBzdWJqZWN0LmVycm9yKGVycik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5kTm9kZUNhbGxiYWNrLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9TdWJzY3JpYmVyXCIpO1xudmFyIE91dGVyU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE91dGVyU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPdXRlclN1YnNjcmliZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgT3V0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChpbm5lclZhbHVlKTtcbiAgICB9O1xuICAgIE91dGVyU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gICAgT3V0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gT3V0ZXJTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuZXhwb3J0cy5PdXRlclN1YnNjcmliZXIgPSBPdXRlclN1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PdXRlclN1YnNjcmliZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL1N1YnNjcmliZXJcIik7XG52YXIgSW5uZXJTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW5uZXJTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIElubmVyU3Vic2NyaWJlcihwYXJlbnQsIG91dGVyVmFsdWUsIG91dGVySW5kZXgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICBfdGhpcy5vdXRlclZhbHVlID0gb3V0ZXJWYWx1ZTtcbiAgICAgICAgX3RoaXMub3V0ZXJJbmRleCA9IG91dGVySW5kZXg7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm5vdGlmeU5leHQodGhpcy5vdXRlclZhbHVlLCB2YWx1ZSwgdGhpcy5vdXRlckluZGV4LCB0aGlzLmluZGV4KyssIHRoaXMpO1xuICAgIH07XG4gICAgSW5uZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5RXJyb3IoZXJyb3IsIHRoaXMpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5Q29tcGxldGUodGhpcyk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBJbm5lclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5leHBvcnRzLklubmVyU3Vic2NyaWJlciA9IElubmVyU3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlubmVyU3Vic2NyaWJlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBob3N0UmVwb3J0RXJyb3JfMSA9IHJlcXVpcmUoXCIuL2hvc3RSZXBvcnRFcnJvclwiKTtcbmV4cG9ydHMuc3Vic2NyaWJlVG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2UpIHsgcmV0dXJuIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KVxuICAgICAgICAudGhlbihudWxsLCBob3N0UmVwb3J0RXJyb3JfMS5ob3N0UmVwb3J0RXJyb3IpO1xuICAgIHJldHVybiBzdWJzY3JpYmVyO1xufTsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZVRvUHJvbWlzZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGdldFN5bWJvbEl0ZXJhdG9yKCkge1xuICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nIHx8ICFTeW1ib2wuaXRlcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuICdAQGl0ZXJhdG9yJztcbiAgICB9XG4gICAgcmV0dXJuIFN5bWJvbC5pdGVyYXRvcjtcbn1cbmV4cG9ydHMuZ2V0U3ltYm9sSXRlcmF0b3IgPSBnZXRTeW1ib2xJdGVyYXRvcjtcbmV4cG9ydHMuaXRlcmF0b3IgPSBnZXRTeW1ib2xJdGVyYXRvcigpO1xuZXhwb3J0cy4kJGl0ZXJhdG9yID0gZXhwb3J0cy5pdGVyYXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZXJhdG9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGl0ZXJhdG9yXzEgPSByZXF1aXJlKFwiLi4vc3ltYm9sL2l0ZXJhdG9yXCIpO1xuZXhwb3J0cy5zdWJzY3JpYmVUb0l0ZXJhYmxlID0gZnVuY3Rpb24gKGl0ZXJhYmxlKSB7IHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlW2l0ZXJhdG9yXzEuaXRlcmF0b3JdKCk7XG4gICAgZG8ge1xuICAgICAgICB2YXIgaXRlbSA9IHZvaWQgMDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGl0ZW0gPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0uZG9uZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KGl0ZW0udmFsdWUpO1xuICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvci5yZXR1cm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc3Vic2NyaWJlci5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGl0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnNjcmliZXI7XG59OyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlVG9JdGVyYWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBvYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vc3ltYm9sL29ic2VydmFibGVcIik7XG5leHBvcnRzLnN1YnNjcmliZVRvT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgdmFyIG9icyA9IG9ialtvYnNlcnZhYmxlXzEub2JzZXJ2YWJsZV0oKTtcbiAgICBpZiAodHlwZW9mIG9icy5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdmlkZWQgb2JqZWN0IGRvZXMgbm90IGNvcnJlY3RseSBpbXBsZW1lbnQgU3ltYm9sLm9ic2VydmFibGUnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBvYnMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH1cbn07IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVUb09ic2VydmFibGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQXJyYXlMaWtlID0gKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHggIT09ICdmdW5jdGlvbic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheUxpa2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc1Byb21pc2UgPSBpc1Byb21pc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1Byb21pc2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgc3Vic2NyaWJlVG9BcnJheV8xID0gcmVxdWlyZShcIi4vc3Vic2NyaWJlVG9BcnJheVwiKTtcbnZhciBzdWJzY3JpYmVUb1Byb21pc2VfMSA9IHJlcXVpcmUoXCIuL3N1YnNjcmliZVRvUHJvbWlzZVwiKTtcbnZhciBzdWJzY3JpYmVUb0l0ZXJhYmxlXzEgPSByZXF1aXJlKFwiLi9zdWJzY3JpYmVUb0l0ZXJhYmxlXCIpO1xudmFyIHN1YnNjcmliZVRvT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4vc3Vic2NyaWJlVG9PYnNlcnZhYmxlXCIpO1xudmFyIGlzQXJyYXlMaWtlXzEgPSByZXF1aXJlKFwiLi9pc0FycmF5TGlrZVwiKTtcbnZhciBpc1Byb21pc2VfMSA9IHJlcXVpcmUoXCIuL2lzUHJvbWlzZVwiKTtcbnZhciBpc09iamVjdF8xID0gcmVxdWlyZShcIi4vaXNPYmplY3RcIik7XG52YXIgaXRlcmF0b3JfMSA9IHJlcXVpcmUoXCIuLi9zeW1ib2wvaXRlcmF0b3JcIik7XG52YXIgb2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL3N5bWJvbC9vYnNlcnZhYmxlXCIpO1xuZXhwb3J0cy5zdWJzY3JpYmVUbyA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICBpZiAoISFyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdFtvYnNlcnZhYmxlXzEub2JzZXJ2YWJsZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZVRvT2JzZXJ2YWJsZV8xLnN1YnNjcmliZVRvT2JzZXJ2YWJsZShyZXN1bHQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0FycmF5TGlrZV8xLmlzQXJyYXlMaWtlKHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZVRvQXJyYXlfMS5zdWJzY3JpYmVUb0FycmF5KHJlc3VsdCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUHJvbWlzZV8xLmlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVUb1Byb21pc2VfMS5zdWJzY3JpYmVUb1Byb21pc2UocmVzdWx0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoISFyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdFtpdGVyYXRvcl8xLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlVG9JdGVyYWJsZV8xLnN1YnNjcmliZVRvSXRlcmFibGUocmVzdWx0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGlzT2JqZWN0XzEuaXNPYmplY3QocmVzdWx0KSA/ICdhbiBpbnZhbGlkIG9iamVjdCcgOiBcIidcIiArIHJlc3VsdCArIFwiJ1wiO1xuICAgICAgICB2YXIgbXNnID0gXCJZb3UgcHJvdmlkZWQgXCIgKyB2YWx1ZSArIFwiIHdoZXJlIGEgc3RyZWFtIHdhcyBleHBlY3RlZC5cIlxuICAgICAgICAgICAgKyAnIFlvdSBjYW4gcHJvdmlkZSBhbiBPYnNlcnZhYmxlLCBQcm9taXNlLCBBcnJheSwgb3IgSXRlcmFibGUuJztcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtc2cpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVUby5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBJbm5lclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9Jbm5lclN1YnNjcmliZXJcIik7XG52YXIgc3Vic2NyaWJlVG9fMSA9IHJlcXVpcmUoXCIuL3N1YnNjcmliZVRvXCIpO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xuZnVuY3Rpb24gc3Vic2NyaWJlVG9SZXN1bHQob3V0ZXJTdWJzY3JpYmVyLCByZXN1bHQsIG91dGVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVyU3Vic2NyaWJlcikge1xuICAgIGlmIChpbm5lclN1YnNjcmliZXIgPT09IHZvaWQgMCkgeyBpbm5lclN1YnNjcmliZXIgPSBuZXcgSW5uZXJTdWJzY3JpYmVyXzEuSW5uZXJTdWJzY3JpYmVyKG91dGVyU3Vic2NyaWJlciwgb3V0ZXJWYWx1ZSwgb3V0ZXJJbmRleCk7IH1cbiAgICBpZiAoaW5uZXJTdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5zdWJzY3JpYmUoaW5uZXJTdWJzY3JpYmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnNjcmliZVRvXzEuc3Vic2NyaWJlVG8ocmVzdWx0KShpbm5lclN1YnNjcmliZXIpO1xufVxuZXhwb3J0cy5zdWJzY3JpYmVUb1Jlc3VsdCA9IHN1YnNjcmliZVRvUmVzdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlVG9SZXN1bHQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGlzU2NoZWR1bGVyXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc1NjaGVkdWxlclwiKTtcbnZhciBpc0FycmF5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0FycmF5XCIpO1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL091dGVyU3Vic2NyaWJlclwiKTtcbnZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHRcIik7XG52YXIgZnJvbUFycmF5XzEgPSByZXF1aXJlKFwiLi9mcm9tQXJyYXlcIik7XG52YXIgTk9ORSA9IHt9O1xuZnVuY3Rpb24gY29tYmluZUxhdGVzdCgpIHtcbiAgICB2YXIgb2JzZXJ2YWJsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYnNlcnZhYmxlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgdmFyIHNjaGVkdWxlciA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNTY2hlZHVsZXJfMS5pc1NjaGVkdWxlcihvYnNlcnZhYmxlc1tvYnNlcnZhYmxlcy5sZW5ndGggLSAxXSkpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gb2JzZXJ2YWJsZXMucG9wKCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JzZXJ2YWJsZXNbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBvYnNlcnZhYmxlcy5wb3AoKTtcbiAgICB9XG4gICAgaWYgKG9ic2VydmFibGVzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5XzEuaXNBcnJheShvYnNlcnZhYmxlc1swXSkpIHtcbiAgICAgICAgb2JzZXJ2YWJsZXMgPSBvYnNlcnZhYmxlc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheV8xLmZyb21BcnJheShvYnNlcnZhYmxlcywgc2NoZWR1bGVyKS5saWZ0KG5ldyBDb21iaW5lTGF0ZXN0T3BlcmF0b3IocmVzdWx0U2VsZWN0b3IpKTtcbn1cbmV4cG9ydHMuY29tYmluZUxhdGVzdCA9IGNvbWJpbmVMYXRlc3Q7XG52YXIgQ29tYmluZUxhdGVzdE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb21iaW5lTGF0ZXN0T3BlcmF0b3IocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgIH1cbiAgICBDb21iaW5lTGF0ZXN0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnJlc3VsdFNlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29tYmluZUxhdGVzdE9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydHMuQ29tYmluZUxhdGVzdE9wZXJhdG9yID0gQ29tYmluZUxhdGVzdE9wZXJhdG9yO1xudmFyIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29tYmluZUxhdGVzdFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29tYmluZUxhdGVzdFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5hY3RpdmUgPSAwO1xuICAgICAgICBfdGhpcy52YWx1ZXMgPSBbXTtcbiAgICAgICAgX3RoaXMub2JzZXJ2YWJsZXMgPSBbXTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAob2JzZXJ2YWJsZSkge1xuICAgICAgICB0aGlzLnZhbHVlcy5wdXNoKE5PTkUpO1xuICAgICAgICB0aGlzLm9ic2VydmFibGVzLnB1c2gob2JzZXJ2YWJsZSk7XG4gICAgfTtcbiAgICBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZXMgPSB0aGlzLm9ic2VydmFibGVzO1xuICAgICAgICB2YXIgbGVuID0gb2JzZXJ2YWJsZXMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGxlbjtcbiAgICAgICAgICAgIHRoaXMudG9SZXNwb25kID0gbGVuO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gb2JzZXJ2YWJsZXNbaV07XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBvYnNlcnZhYmxlLCB1bmRlZmluZWQsIGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tYmluZUxhdGVzdFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKHVudXNlZCkge1xuICAgICAgICBpZiAoKHRoaXMuYWN0aXZlIC09IDEpID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKF9vdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4KSB7XG4gICAgICAgIHZhciB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcbiAgICAgICAgdmFyIG9sZFZhbCA9IHZhbHVlc1tvdXRlckluZGV4XTtcbiAgICAgICAgdmFyIHRvUmVzcG9uZCA9ICF0aGlzLnRvUmVzcG9uZFxuICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICA6IG9sZFZhbCA9PT0gTk9ORSA/IC0tdGhpcy50b1Jlc3BvbmQgOiB0aGlzLnRvUmVzcG9uZDtcbiAgICAgICAgdmFsdWVzW291dGVySW5kZXhdID0gaW5uZXJWYWx1ZTtcbiAgICAgICAgaWYgKHRvUmVzcG9uZCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cnlSZXN1bHRTZWxlY3Rvcih2YWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlcy5zbGljZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tYmluZUxhdGVzdFN1YnNjcmliZXIucHJvdG90eXBlLl90cnlSZXN1bHRTZWxlY3RvciA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucmVzdWx0U2VsZWN0b3IuYXBwbHkodGhpcywgdmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29tYmluZUxhdGVzdFN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuZXhwb3J0cy5Db21iaW5lTGF0ZXN0U3Vic2NyaWJlciA9IENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tYmluZUxhdGVzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpcHRpb25cIik7XG52YXIgb2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL3N5bWJvbC9vYnNlcnZhYmxlXCIpO1xuZnVuY3Rpb24gc2NoZWR1bGVPYnNlcnZhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gaW5wdXRbb2JzZXJ2YWJsZV8xLm9ic2VydmFibGVdKCk7XG4gICAgICAgICAgICBzdWIuYWRkKG9ic2VydmFibGUuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHsgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSkpOyB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7IHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSkpOyB9LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7IHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSkpOyB9LFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBzdWI7XG4gICAgfSk7XG59XG5leHBvcnRzLnNjaGVkdWxlT2JzZXJ2YWJsZSA9IHNjaGVkdWxlT2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlT2JzZXJ2YWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpcHRpb25cIik7XG5mdW5jdGlvbiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1YiA9IG5ldyBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24oKTtcbiAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5wdXQudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pKTtcbiAgICAgICAgfSk7IH0pKTtcbiAgICAgICAgcmV0dXJuIHN1YjtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc2NoZWR1bGVQcm9taXNlID0gc2NoZWR1bGVQcm9taXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVQcm9taXNlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmlwdGlvblwiKTtcbnZhciBpdGVyYXRvcl8xID0gcmVxdWlyZShcIi4uL3N5bWJvbC9pdGVyYXRvclwiKTtcbmZ1bmN0aW9uIHNjaGVkdWxlSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJdGVyYWJsZSBjYW5ub3QgYmUgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHZhciBpdGVyYXRvcjtcbiAgICAgICAgc3ViLmFkZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaXRlcmF0b3IgJiYgdHlwZW9mIGl0ZXJhdG9yLnJldHVybiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXRlcmF0b3IgPSBpbnB1dFtpdGVyYXRvcl8xLml0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgZG9uZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSA9IHJlc3VsdC5kb25lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBzdWI7XG4gICAgfSk7XG59XG5leHBvcnRzLnNjaGVkdWxlSXRlcmFibGUgPSBzY2hlZHVsZUl0ZXJhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVJdGVyYWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBvYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vc3ltYm9sL29ic2VydmFibGVcIik7XG5mdW5jdGlvbiBpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0ICYmIHR5cGVvZiBpbnB1dFtvYnNlcnZhYmxlXzEub2JzZXJ2YWJsZV0gPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzSW50ZXJvcE9ic2VydmFibGUgPSBpc0ludGVyb3BPYnNlcnZhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJbnRlcm9wT2JzZXJ2YWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBpdGVyYXRvcl8xID0gcmVxdWlyZShcIi4uL3N5bWJvbC9pdGVyYXRvclwiKTtcbmZ1bmN0aW9uIGlzSXRlcmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgJiYgdHlwZW9mIGlucHV0W2l0ZXJhdG9yXzEuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0l0ZXJhYmxlID0gaXNJdGVyYWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSXRlcmFibGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgc2NoZWR1bGVPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi9zY2hlZHVsZU9ic2VydmFibGVcIik7XG52YXIgc2NoZWR1bGVQcm9taXNlXzEgPSByZXF1aXJlKFwiLi9zY2hlZHVsZVByb21pc2VcIik7XG52YXIgc2NoZWR1bGVBcnJheV8xID0gcmVxdWlyZShcIi4vc2NoZWR1bGVBcnJheVwiKTtcbnZhciBzY2hlZHVsZUl0ZXJhYmxlXzEgPSByZXF1aXJlKFwiLi9zY2hlZHVsZUl0ZXJhYmxlXCIpO1xudmFyIGlzSW50ZXJvcE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGVcIik7XG52YXIgaXNQcm9taXNlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc1Byb21pc2VcIik7XG52YXIgaXNBcnJheUxpa2VfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzQXJyYXlMaWtlXCIpO1xudmFyIGlzSXRlcmFibGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzSXRlcmFibGVcIik7XG5mdW5jdGlvbiBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc0ludGVyb3BPYnNlcnZhYmxlXzEuaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZU9ic2VydmFibGVfMS5zY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQcm9taXNlXzEuaXNQcm9taXNlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlUHJvbWlzZV8xLnNjaGVkdWxlUHJvbWlzZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0FycmF5TGlrZV8xLmlzQXJyYXlMaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQXJyYXlfMS5zY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzSXRlcmFibGVfMS5pc0l0ZXJhYmxlKGlucHV0KSB8fCB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVJdGVyYWJsZV8xLnNjaGVkdWxlSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0IHx8IGlucHV0KSArICcgaXMgbm90IG9ic2VydmFibGUnKTtcbn1cbmV4cG9ydHMuc2NoZWR1bGVkID0gc2NoZWR1bGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVkLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIHN1YnNjcmliZVRvXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9zdWJzY3JpYmVUb1wiKTtcbnZhciBzY2hlZHVsZWRfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZWQvc2NoZWR1bGVkXCIpO1xuZnVuY3Rpb24gZnJvbShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKCFzY2hlZHVsZXIpIHtcbiAgICAgICAgaWYgKGlucHV0IGluc3RhbmNlb2YgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKHN1YnNjcmliZVRvXzEuc3Vic2NyaWJlVG8oaW5wdXQpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZWRfMS5zY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgfVxufVxuZXhwb3J0cy5mcm9tID0gZnJvbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb20uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL1N1YnNjcmliZXJcIik7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBzdWJzY3JpYmVUb18xID0gcmVxdWlyZShcIi4vdXRpbC9zdWJzY3JpYmVUb1wiKTtcbnZhciBTaW1wbGVJbm5lclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTaW1wbGVJbm5lclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2ltcGxlSW5uZXJTdWJzY3JpYmVyKHBhcmVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2ltcGxlSW5uZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnBhcmVudC5ub3RpZnlOZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFNpbXBsZUlubmVyU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm5vdGlmeUVycm9yKGVycm9yKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgU2ltcGxlSW5uZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm5vdGlmeUNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBTaW1wbGVJbm5lclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5leHBvcnRzLlNpbXBsZUlubmVyU3Vic2NyaWJlciA9IFNpbXBsZUlubmVyU3Vic2NyaWJlcjtcbnZhciBDb21wbGV4SW5uZXJTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29tcGxleElubmVyU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb21wbGV4SW5uZXJTdWJzY3JpYmVyKHBhcmVudCwgb3V0ZXJWYWx1ZSwgb3V0ZXJJbmRleCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIF90aGlzLm91dGVyVmFsdWUgPSBvdXRlclZhbHVlO1xuICAgICAgICBfdGhpcy5vdXRlckluZGV4ID0gb3V0ZXJJbmRleDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb21wbGV4SW5uZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnBhcmVudC5ub3RpZnlOZXh0KHRoaXMub3V0ZXJWYWx1ZSwgdmFsdWUsIHRoaXMub3V0ZXJJbmRleCwgdGhpcyk7XG4gICAgfTtcbiAgICBDb21wbGV4SW5uZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5RXJyb3IoZXJyb3IpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBDb21wbGV4SW5uZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm5vdGlmeUNvbXBsZXRlKHRoaXMpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29tcGxleElubmVyU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmV4cG9ydHMuQ29tcGxleElubmVyU3Vic2NyaWJlciA9IENvbXBsZXhJbm5lclN1YnNjcmliZXI7XG52YXIgU2ltcGxlT3V0ZXJTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2ltcGxlT3V0ZXJTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNpbXBsZU91dGVyU3Vic2NyaWJlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBTaW1wbGVPdXRlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAoaW5uZXJWYWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICBTaW1wbGVPdXRlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgfTtcbiAgICBTaW1wbGVPdXRlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gU2ltcGxlT3V0ZXJTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuZXhwb3J0cy5TaW1wbGVPdXRlclN1YnNjcmliZXIgPSBTaW1wbGVPdXRlclN1YnNjcmliZXI7XG52YXIgQ29tcGxleE91dGVyU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbXBsZXhPdXRlclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29tcGxleE91dGVyU3Vic2NyaWJlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBDb21wbGV4T3V0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKF9vdXRlclZhbHVlLCBpbm5lclZhbHVlLCBfb3V0ZXJJbmRleCwgX2lubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChpbm5lclZhbHVlKTtcbiAgICB9O1xuICAgIENvbXBsZXhPdXRlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gICAgQ29tcGxleE91dGVyU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoX2lubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBDb21wbGV4T3V0ZXJTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuZXhwb3J0cy5Db21wbGV4T3V0ZXJTdWJzY3JpYmVyID0gQ29tcGxleE91dGVyU3Vic2NyaWJlcjtcbmZ1bmN0aW9uIGlubmVyU3Vic2NyaWJlKHJlc3VsdCwgaW5uZXJTdWJzY3JpYmVyKSB7XG4gICAgaWYgKGlubmVyU3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuc3Vic2NyaWJlKGlubmVyU3Vic2NyaWJlcik7XG4gICAgfVxuICAgIHJldHVybiBzdWJzY3JpYmVUb18xLnN1YnNjcmliZVRvKHJlc3VsdCkoaW5uZXJTdWJzY3JpYmVyKTtcbn1cbmV4cG9ydHMuaW5uZXJTdWJzY3JpYmUgPSBpbm5lclN1YnNjcmliZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlubmVyU3Vic2NyaWJlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBtYXBfMSA9IHJlcXVpcmUoXCIuL21hcFwiKTtcbnZhciBmcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9mcm9tXCIpO1xudmFyIGlubmVyU3Vic2NyaWJlXzEgPSByZXF1aXJlKFwiLi4vaW5uZXJTdWJzY3JpYmVcIik7XG5mdW5jdGlvbiBtZXJnZU1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5waXBlKG1lcmdlTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBmcm9tXzEuZnJvbShwcm9qZWN0KGEsIGkpKS5waXBlKG1hcF8xLm1hcChmdW5jdGlvbiAoYiwgaWkpIHsgcmV0dXJuIHJlc3VsdFNlbGVjdG9yKGEsIGIsIGksIGlpKTsgfSkpOyB9LCBjb25jdXJyZW50KSk7IH07XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uY3VycmVudCA9IHJlc3VsdFNlbGVjdG9yO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IE1lcmdlTWFwT3BlcmF0b3IocHJvamVjdCwgY29uY3VycmVudCkpOyB9O1xufVxuZXhwb3J0cy5tZXJnZU1hcCA9IG1lcmdlTWFwO1xudmFyIE1lcmdlTWFwT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1lcmdlTWFwT3BlcmF0b3IocHJvamVjdCwgY29uY3VycmVudCkge1xuICAgICAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7IH1cbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgdGhpcy5jb25jdXJyZW50ID0gY29uY3VycmVudDtcbiAgICB9XG4gICAgTWVyZ2VNYXBPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBNZXJnZU1hcFN1YnNjcmliZXIob2JzZXJ2ZXIsIHRoaXMucHJvamVjdCwgdGhpcy5jb25jdXJyZW50KSk7XG4gICAgfTtcbiAgICByZXR1cm4gTWVyZ2VNYXBPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnRzLk1lcmdlTWFwT3BlcmF0b3IgPSBNZXJnZU1hcE9wZXJhdG9yO1xudmFyIE1lcmdlTWFwU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1lcmdlTWFwU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNZXJnZU1hcFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByb2plY3QsIGNvbmN1cnJlbnQpIHtcbiAgICAgICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgX3RoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG4gICAgICAgIF90aGlzLmhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgX3RoaXMuYWN0aXZlID0gMDtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlIDwgdGhpcy5jb25jdXJyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl90cnlOZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXJnZU1hcFN1YnNjcmliZXIucHJvdG90eXBlLl90cnlOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJvamVjdCh2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjdGl2ZSsrO1xuICAgICAgICB0aGlzLl9pbm5lclN1YihyZXN1bHQpO1xuICAgIH07XG4gICAgTWVyZ2VNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5faW5uZXJTdWIgPSBmdW5jdGlvbiAoaXNoKSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBuZXcgaW5uZXJTdWJzY3JpYmVfMS5TaW1wbGVJbm5lclN1YnNjcmliZXIodGhpcyk7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZChpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSBpbm5lclN1YnNjcmliZV8xLmlubmVyU3Vic2NyaWJlKGlzaCwgaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uICE9PSBpbm5lclN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChpbm5lclN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA9PT0gMCAmJiB0aGlzLmJ1ZmZlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBNZXJnZU1hcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAoaW5uZXJWYWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICBNZXJnZU1hcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIHRoaXMuYWN0aXZlLS07XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fbmV4dChidWZmZXIuc2hpZnQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5hY3RpdmUgPT09IDAgJiYgdGhpcy5oYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1lcmdlTWFwU3Vic2NyaWJlcjtcbn0oaW5uZXJTdWJzY3JpYmVfMS5TaW1wbGVPdXRlclN1YnNjcmliZXIpKTtcbmV4cG9ydHMuTWVyZ2VNYXBTdWJzY3JpYmVyID0gTWVyZ2VNYXBTdWJzY3JpYmVyO1xuZXhwb3J0cy5mbGF0TWFwID0gbWVyZ2VNYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBtZXJnZU1hcF8xID0gcmVxdWlyZShcIi4vbWVyZ2VNYXBcIik7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xuZnVuY3Rpb24gbWVyZ2VBbGwoY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsgfVxuICAgIHJldHVybiBtZXJnZU1hcF8xLm1lcmdlTWFwKGlkZW50aXR5XzEuaWRlbnRpdHksIGNvbmN1cnJlbnQpO1xufVxuZXhwb3J0cy5tZXJnZUFsbCA9IG1lcmdlQWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VBbGwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbWVyZ2VBbGxfMSA9IHJlcXVpcmUoXCIuL21lcmdlQWxsXCIpO1xuZnVuY3Rpb24gY29uY2F0QWxsKCkge1xuICAgIHJldHVybiBtZXJnZUFsbF8xLm1lcmdlQWxsKDEpO1xufVxuZXhwb3J0cy5jb25jYXRBbGwgPSBjb25jYXRBbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRBbGwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgb2ZfMSA9IHJlcXVpcmUoXCIuL29mXCIpO1xudmFyIGNvbmNhdEFsbF8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9jb25jYXRBbGxcIik7XG5mdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmNhdEFsbF8xLmNvbmNhdEFsbCgpKG9mXzEub2YuYXBwbHkodm9pZCAwLCBvYnNlcnZhYmxlcykpO1xufVxuZXhwb3J0cy5jb25jYXQgPSBjb25jYXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgZnJvbV8xID0gcmVxdWlyZShcIi4vZnJvbVwiKTtcbnZhciBlbXB0eV8xID0gcmVxdWlyZShcIi4vZW1wdHlcIik7XG5mdW5jdGlvbiBkZWZlcihvYnNlcnZhYmxlRmFjdG9yeSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGlucHV0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaW5wdXQgPSBvYnNlcnZhYmxlRmFjdG9yeSgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNvdXJjZSA9IGlucHV0ID8gZnJvbV8xLmZyb20oaW5wdXQpIDogZW1wdHlfMS5lbXB0eSgpO1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGVmZXIgPSBkZWZlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIGlzQXJyYXlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzQXJyYXlcIik7XG52YXIgbWFwXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL21hcFwiKTtcbnZhciBpc09iamVjdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNPYmplY3RcIik7XG52YXIgZnJvbV8xID0gcmVxdWlyZShcIi4vZnJvbVwiKTtcbmZ1bmN0aW9uIGZvcmtKb2luKCkge1xuICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgc291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBpZiAoc291cmNlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdmFyIGZpcnN0XzEgPSBzb3VyY2VzWzBdO1xuICAgICAgICBpZiAoaXNBcnJheV8xLmlzQXJyYXkoZmlyc3RfMSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JrSm9pbkludGVybmFsKGZpcnN0XzEsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc09iamVjdF8xLmlzT2JqZWN0KGZpcnN0XzEpICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihmaXJzdF8xKSA9PT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmaXJzdF8xKTtcbiAgICAgICAgICAgIHJldHVybiBmb3JrSm9pbkludGVybmFsKGtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZpcnN0XzFba2V5XTsgfSksIGtleXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc291cmNlc1tzb3VyY2VzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciByZXN1bHRTZWxlY3Rvcl8xID0gc291cmNlcy5wb3AoKTtcbiAgICAgICAgc291cmNlcyA9IChzb3VyY2VzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5XzEuaXNBcnJheShzb3VyY2VzWzBdKSkgPyBzb3VyY2VzWzBdIDogc291cmNlcztcbiAgICAgICAgcmV0dXJuIGZvcmtKb2luSW50ZXJuYWwoc291cmNlcywgbnVsbCkucGlwZShtYXBfMS5tYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIHJlc3VsdFNlbGVjdG9yXzEuYXBwbHkodm9pZCAwLCBhcmdzKTsgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gZm9ya0pvaW5JbnRlcm5hbChzb3VyY2VzLCBudWxsKTtcbn1cbmV4cG9ydHMuZm9ya0pvaW4gPSBmb3JrSm9pbjtcbmZ1bmN0aW9uIGZvcmtKb2luSW50ZXJuYWwoc291cmNlcywga2V5cykge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGxlbiA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlcyA9IG5ldyBBcnJheShsZW4pO1xuICAgICAgICB2YXIgY29tcGxldGVkID0gMDtcbiAgICAgICAgdmFyIGVtaXR0ZWQgPSAwO1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gZnJvbV8xLmZyb20oc291cmNlc1tpXSk7XG4gICAgICAgICAgICB2YXIgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKHNvdXJjZS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0dGVkKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZCsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGxldGVkID09PSBsZW4gfHwgIWhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW1pdHRlZCA9PT0gbGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGtleXMgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlzLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXksIGkpIHsgcmV0dXJuIChyZXN1bHRba2V5XSA9IHZhbHVlc1tpXSwgcmVzdWx0KTsgfSwge30pIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgX2xvb3BfMShpKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ya0pvaW4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgaXNBcnJheV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNBcnJheVwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xudmFyIG1hcF8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9tYXBcIik7XG52YXIgdG9TdHJpbmcgPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZzsgfSkoKTtcbmZ1bmN0aW9uIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucywgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICBpZiAoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucykucGlwZShtYXBfMS5tYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIGlzQXJyYXlfMS5pc0FycmF5KGFyZ3MpID8gcmVzdWx0U2VsZWN0b3IuYXBwbHkodm9pZCAwLCBhcmdzKSA6IHJlc3VsdFNlbGVjdG9yKGFyZ3MpOyB9KSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlcihlKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2V0dXBTdWJzY3JpcHRpb24odGFyZ2V0LCBldmVudE5hbWUsIGhhbmRsZXIsIHN1YnNjcmliZXIsIG9wdGlvbnMpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5mcm9tRXZlbnQgPSBmcm9tRXZlbnQ7XG5mdW5jdGlvbiBzZXR1cFN1YnNjcmlwdGlvbihzb3VyY2VPYmosIGV2ZW50TmFtZSwgaGFuZGxlciwgc3Vic2NyaWJlciwgb3B0aW9ucykge1xuICAgIHZhciB1bnN1YnNjcmliZTtcbiAgICBpZiAoaXNFdmVudFRhcmdldChzb3VyY2VPYmopKSB7XG4gICAgICAgIHZhciBzb3VyY2VfMSA9IHNvdXJjZU9iajtcbiAgICAgICAgc291cmNlT2JqLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgICAgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzb3VyY2VfMS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7IH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIoc291cmNlT2JqKSkge1xuICAgICAgICB2YXIgc291cmNlXzIgPSBzb3VyY2VPYmo7XG4gICAgICAgIHNvdXJjZU9iai5vbihldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvdXJjZV8yLm9mZihldmVudE5hbWUsIGhhbmRsZXIpOyB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChpc05vZGVTdHlsZUV2ZW50RW1pdHRlcihzb3VyY2VPYmopKSB7XG4gICAgICAgIHZhciBzb3VyY2VfMyA9IHNvdXJjZU9iajtcbiAgICAgICAgc291cmNlT2JqLmFkZExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlXzMucmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyKTsgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc291cmNlT2JqICYmIHNvdXJjZU9iai5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNvdXJjZU9iai5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgc2V0dXBTdWJzY3JpcHRpb24oc291cmNlT2JqW2ldLCBldmVudE5hbWUsIGhhbmRsZXIsIHN1YnNjcmliZXIsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGV2ZW50IHRhcmdldCcpO1xuICAgIH1cbiAgICBzdWJzY3JpYmVyLmFkZCh1bnN1YnNjcmliZSk7XG59XG5mdW5jdGlvbiBpc05vZGVTdHlsZUV2ZW50RW1pdHRlcihzb3VyY2VPYmopIHtcbiAgICByZXR1cm4gc291cmNlT2JqICYmIHR5cGVvZiBzb3VyY2VPYmouYWRkTGlzdGVuZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHNvdXJjZU9iai5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIoc291cmNlT2JqKSB7XG4gICAgcmV0dXJuIHNvdXJjZU9iaiAmJiB0eXBlb2Ygc291cmNlT2JqLm9uID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBzb3VyY2VPYmoub2ZmID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gaXNFdmVudFRhcmdldChzb3VyY2VPYmopIHtcbiAgICByZXR1cm4gc291cmNlT2JqICYmIHR5cGVvZiBzb3VyY2VPYmouYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygc291cmNlT2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tRXZlbnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgaXNBcnJheV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNBcnJheVwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xudmFyIG1hcF8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9tYXBcIik7XG5mdW5jdGlvbiBmcm9tRXZlbnRQYXR0ZXJuKGFkZEhhbmRsZXIsIHJlbW92ZUhhbmRsZXIsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmcm9tRXZlbnRQYXR0ZXJuKGFkZEhhbmRsZXIsIHJlbW92ZUhhbmRsZXIpLnBpcGUobWFwXzEubWFwKGZ1bmN0aW9uIChhcmdzKSB7IHJldHVybiBpc0FycmF5XzEuaXNBcnJheShhcmdzKSA/IHJlc3VsdFNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgYXJncykgOiByZXN1bHRTZWxlY3RvcihhcmdzKTsgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGUgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgZVtfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmliZXIubmV4dChlLmxlbmd0aCA9PT0gMSA/IGVbMF0gOiBlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJldFZhbHVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0VmFsdWUgPSBhZGRIYW5kbGVyKGhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihyZW1vdmVIYW5kbGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlSGFuZGxlcihoYW5kbGVyLCByZXRWYWx1ZSk7IH07XG4gICAgfSk7XG59XG5leHBvcnRzLmZyb21FdmVudFBhdHRlcm4gPSBmcm9tRXZlbnRQYXR0ZXJuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbUV2ZW50UGF0dGVybi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaWRlbnRpdHlcIik7XG52YXIgaXNTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzU2NoZWR1bGVyXCIpO1xuZnVuY3Rpb24gZ2VuZXJhdGUoaW5pdGlhbFN0YXRlT3JPcHRpb25zLCBjb25kaXRpb24sIGl0ZXJhdGUsIHJlc3VsdFNlbGVjdG9yT3JPYnNlcnZhYmxlLCBzY2hlZHVsZXIpIHtcbiAgICB2YXIgcmVzdWx0U2VsZWN0b3I7XG4gICAgdmFyIGluaXRpYWxTdGF0ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gaW5pdGlhbFN0YXRlT3JPcHRpb25zO1xuICAgICAgICBpbml0aWFsU3RhdGUgPSBvcHRpb25zLmluaXRpYWxTdGF0ZTtcbiAgICAgICAgY29uZGl0aW9uID0gb3B0aW9ucy5jb25kaXRpb247XG4gICAgICAgIGl0ZXJhdGUgPSBvcHRpb25zLml0ZXJhdGU7XG4gICAgICAgIHJlc3VsdFNlbGVjdG9yID0gb3B0aW9ucy5yZXN1bHRTZWxlY3RvciB8fCBpZGVudGl0eV8xLmlkZW50aXR5O1xuICAgICAgICBzY2hlZHVsZXIgPSBvcHRpb25zLnNjaGVkdWxlcjtcbiAgICB9XG4gICAgZWxzZSBpZiAocmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGUgPT09IHVuZGVmaW5lZCB8fCBpc1NjaGVkdWxlcl8xLmlzU2NoZWR1bGVyKHJlc3VsdFNlbGVjdG9yT3JPYnNlcnZhYmxlKSkge1xuICAgICAgICBpbml0aWFsU3RhdGUgPSBpbml0aWFsU3RhdGVPck9wdGlvbnM7XG4gICAgICAgIHJlc3VsdFNlbGVjdG9yID0gaWRlbnRpdHlfMS5pZGVudGl0eTtcbiAgICAgICAgc2NoZWR1bGVyID0gcmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdGUgPSBpbml0aWFsU3RhdGVPck9wdGlvbnM7XG4gICAgICAgIHJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGU7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgICAgICBpZiAoc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoLCAwLCB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlcjogc3Vic2NyaWJlcixcbiAgICAgICAgICAgICAgICBpdGVyYXRlOiBpdGVyYXRlLFxuICAgICAgICAgICAgICAgIGNvbmRpdGlvbjogY29uZGl0aW9uLFxuICAgICAgICAgICAgICAgIHJlc3VsdFNlbGVjdG9yOiByZXN1bHRTZWxlY3RvcixcbiAgICAgICAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgY29uZGl0aW9uUmVzdWx0ID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvblJlc3VsdCA9IGNvbmRpdGlvbihzdGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWNvbmRpdGlvblJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZvaWQgMDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSByZXN1bHRTZWxlY3RvcihzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHN0YXRlID0gaXRlcmF0ZShzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKHRydWUpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xuZnVuY3Rpb24gZGlzcGF0Y2goc3RhdGUpIHtcbiAgICB2YXIgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIGNvbmRpdGlvbiA9IHN0YXRlLmNvbmRpdGlvbjtcbiAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHN0YXRlLm5lZWRJdGVyYXRlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdGF0ZS5zdGF0ZSA9IHN0YXRlLml0ZXJhdGUoc3RhdGUuc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN0YXRlLm5lZWRJdGVyYXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICB2YXIgY29uZGl0aW9uUmVzdWx0ID0gdm9pZCAwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uZGl0aW9uUmVzdWx0ID0gY29uZGl0aW9uKHN0YXRlLnN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29uZGl0aW9uUmVzdWx0KSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgdmFsdWU7XG4gICAgdHJ5IHtcbiAgICAgICAgdmFsdWUgPSBzdGF0ZS5yZXN1bHRTZWxlY3RvcihzdGF0ZS5zdGF0ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2NoZWR1bGUoc3RhdGUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VuZXJhdGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZGVmZXJfMSA9IHJlcXVpcmUoXCIuL2RlZmVyXCIpO1xudmFyIGVtcHR5XzEgPSByZXF1aXJlKFwiLi9lbXB0eVwiKTtcbmZ1bmN0aW9uIGlpZihjb25kaXRpb24sIHRydWVSZXN1bHQsIGZhbHNlUmVzdWx0KSB7XG4gICAgaWYgKHRydWVSZXN1bHQgPT09IHZvaWQgMCkgeyB0cnVlUmVzdWx0ID0gZW1wdHlfMS5FTVBUWTsgfVxuICAgIGlmIChmYWxzZVJlc3VsdCA9PT0gdm9pZCAwKSB7IGZhbHNlUmVzdWx0ID0gZW1wdHlfMS5FTVBUWTsgfVxuICAgIHJldHVybiBkZWZlcl8xLmRlZmVyKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmRpdGlvbigpID8gdHJ1ZVJlc3VsdCA6IGZhbHNlUmVzdWx0OyB9KTtcbn1cbmV4cG9ydHMuaWlmID0gaWlmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWlmLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGlzQXJyYXlfMSA9IHJlcXVpcmUoXCIuL2lzQXJyYXlcIik7XG5mdW5jdGlvbiBpc051bWVyaWModmFsKSB7XG4gICAgcmV0dXJuICFpc0FycmF5XzEuaXNBcnJheSh2YWwpICYmICh2YWwgLSBwYXJzZUZsb2F0KHZhbCkgKyAxKSA+PSAwO1xufVxuZXhwb3J0cy5pc051bWVyaWMgPSBpc051bWVyaWM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc051bWVyaWMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgaXNOdW1lcmljXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc051bWVyaWNcIik7XG5mdW5jdGlvbiBpbnRlcnZhbChwZXJpb2QsIHNjaGVkdWxlcikge1xuICAgIGlmIChwZXJpb2QgPT09IHZvaWQgMCkgeyBwZXJpb2QgPSAwOyB9XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jXzEuYXN5bmM7IH1cbiAgICBpZiAoIWlzTnVtZXJpY18xLmlzTnVtZXJpYyhwZXJpb2QpIHx8IHBlcmlvZCA8IDApIHtcbiAgICAgICAgcGVyaW9kID0gMDtcbiAgICB9XG4gICAgaWYgKCFzY2hlZHVsZXIgfHwgdHlwZW9mIHNjaGVkdWxlci5zY2hlZHVsZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHN1YnNjcmliZXIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaCwgcGVyaW9kLCB7IHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIGNvdW50ZXI6IDAsIHBlcmlvZDogcGVyaW9kIH0pKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfSk7XG59XG5leHBvcnRzLmludGVydmFsID0gaW50ZXJ2YWw7XG5mdW5jdGlvbiBkaXNwYXRjaChzdGF0ZSkge1xuICAgIHZhciBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlciwgY291bnRlciA9IHN0YXRlLmNvdW50ZXIsIHBlcmlvZCA9IHN0YXRlLnBlcmlvZDtcbiAgICBzdWJzY3JpYmVyLm5leHQoY291bnRlcik7XG4gICAgdGhpcy5zY2hlZHVsZSh7IHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIGNvdW50ZXI6IGNvdW50ZXIgKyAxLCBwZXJpb2Q6IHBlcmlvZCB9LCBwZXJpb2QpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJ2YWwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgaXNTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzU2NoZWR1bGVyXCIpO1xudmFyIG1lcmdlQWxsXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL21lcmdlQWxsXCIpO1xudmFyIGZyb21BcnJheV8xID0gcmVxdWlyZShcIi4vZnJvbUFycmF5XCIpO1xuZnVuY3Rpb24gbWVyZ2UoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgdmFyIHNjaGVkdWxlciA9IG51bGw7XG4gICAgdmFyIGxhc3QgPSBvYnNlcnZhYmxlc1tvYnNlcnZhYmxlcy5sZW5ndGggLSAxXTtcbiAgICBpZiAoaXNTY2hlZHVsZXJfMS5pc1NjaGVkdWxlcihsYXN0KSkge1xuICAgICAgICBzY2hlZHVsZXIgPSBvYnNlcnZhYmxlcy5wb3AoKTtcbiAgICAgICAgaWYgKG9ic2VydmFibGVzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG9ic2VydmFibGVzW29ic2VydmFibGVzLmxlbmd0aCAtIDFdID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY29uY3VycmVudCA9IG9ic2VydmFibGVzLnBvcCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBsYXN0ID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25jdXJyZW50ID0gb2JzZXJ2YWJsZXMucG9wKCk7XG4gICAgfVxuICAgIGlmIChzY2hlZHVsZXIgPT09IG51bGwgJiYgb2JzZXJ2YWJsZXMubGVuZ3RoID09PSAxICYmIG9ic2VydmFibGVzWzBdIGluc3RhbmNlb2YgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGVzWzBdO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VBbGxfMS5tZXJnZUFsbChjb25jdXJyZW50KShmcm9tQXJyYXlfMS5mcm9tQXJyYXkob2JzZXJ2YWJsZXMsIHNjaGVkdWxlcikpO1xufVxuZXhwb3J0cy5tZXJnZSA9IG1lcmdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbmV4cG9ydHMuTkVWRVIgPSBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUobm9vcF8xLm5vb3ApO1xuZnVuY3Rpb24gbmV2ZXIoKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuTkVWRVI7XG59XG5leHBvcnRzLm5ldmVyID0gbmV2ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXZlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBmcm9tXzEgPSByZXF1aXJlKFwiLi9mcm9tXCIpO1xudmFyIGlzQXJyYXlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzQXJyYXlcIik7XG52YXIgZW1wdHlfMSA9IHJlcXVpcmUoXCIuL2VtcHR5XCIpO1xuZnVuY3Rpb24gb25FcnJvclJlc3VtZU5leHQoKSB7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBzb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIGlmIChzb3VyY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZW1wdHlfMS5FTVBUWTtcbiAgICB9XG4gICAgdmFyIGZpcnN0ID0gc291cmNlc1swXSwgcmVtYWluZGVyID0gc291cmNlcy5zbGljZSgxKTtcbiAgICBpZiAoc291cmNlcy5sZW5ndGggPT09IDEgJiYgaXNBcnJheV8xLmlzQXJyYXkoZmlyc3QpKSB7XG4gICAgICAgIHJldHVybiBvbkVycm9yUmVzdW1lTmV4dC5hcHBseSh2b2lkIDAsIGZpcnN0KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3ViTmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuYWRkKG9uRXJyb3JSZXN1bWVOZXh0LmFwcGx5KHZvaWQgMCwgcmVtYWluZGVyKS5zdWJzY3JpYmUoc3Vic2NyaWJlcikpOyB9O1xuICAgICAgICByZXR1cm4gZnJvbV8xLmZyb20oZmlyc3QpLnN1YnNjcmliZSh7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHsgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSxcbiAgICAgICAgICAgIGVycm9yOiBzdWJOZXh0LFxuICAgICAgICAgICAgY29tcGxldGU6IHN1Yk5leHQsXG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5vbkVycm9yUmVzdW1lTmV4dCA9IG9uRXJyb3JSZXN1bWVOZXh0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b25FcnJvclJlc3VtZU5leHQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaXB0aW9uXCIpO1xuZnVuY3Rpb24gcGFpcnMob2JqLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIXNjaGVkdWxlcikge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoICYmICFzdWJzY3JpYmVyLmNsb3NlZDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChba2V5LCBvYmpba2V5XV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2gsIDAsIHsga2V5czoga2V5cywgaW5kZXg6IDAsIHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uLCBvYmo6IG9iaiB9KSk7XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLnBhaXJzID0gcGFpcnM7XG5mdW5jdGlvbiBkaXNwYXRjaChzdGF0ZSkge1xuICAgIHZhciBrZXlzID0gc3RhdGUua2V5cywgaW5kZXggPSBzdGF0ZS5pbmRleCwgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIHN1YnNjcmlwdGlvbiA9IHN0YXRlLnN1YnNjcmlwdGlvbiwgb2JqID0gc3RhdGUub2JqO1xuICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgaWYgKGluZGV4IDwga2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChba2V5LCBvYmpba2V5XV0pO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLmFkZCh0aGlzLnNjaGVkdWxlKHsga2V5czoga2V5cywgaW5kZXg6IGluZGV4ICsgMSwgc3Vic2NyaWJlcjogc3Vic2NyaWJlciwgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb24sIG9iajogb2JqIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuZGlzcGF0Y2ggPSBkaXNwYXRjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhaXJzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gbm90KHByZWQsIHRoaXNBcmcpIHtcbiAgICBmdW5jdGlvbiBub3RQcmVkKCkge1xuICAgICAgICByZXR1cm4gIShub3RQcmVkLnByZWQuYXBwbHkobm90UHJlZC50aGlzQXJnLCBhcmd1bWVudHMpKTtcbiAgICB9XG4gICAgbm90UHJlZC5wcmVkID0gcHJlZDtcbiAgICBub3RQcmVkLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgIHJldHVybiBub3RQcmVkO1xufVxuZXhwb3J0cy5ub3QgPSBub3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBmdW5jdGlvbiBmaWx0ZXJPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IEZpbHRlck9wZXJhdG9yKHByZWRpY2F0ZSwgdGhpc0FyZykpO1xuICAgIH07XG59XG5leHBvcnRzLmZpbHRlciA9IGZpbHRlcjtcbnZhciBGaWx0ZXJPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmlsdGVyT3BlcmF0b3IocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgIH1cbiAgICBGaWx0ZXJPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEZpbHRlclN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcmVkaWNhdGUsIHRoaXMudGhpc0FyZykpO1xuICAgIH07XG4gICAgcmV0dXJuIEZpbHRlck9wZXJhdG9yO1xufSgpKTtcbnZhciBGaWx0ZXJTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRmlsdGVyU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGaWx0ZXJTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgX3RoaXMudGhpc0FyZyA9IHRoaXNBcmc7XG4gICAgICAgIF90aGlzLmNvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBGaWx0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUuY2FsbCh0aGlzLnRoaXNBcmcsIHZhbHVlLCB0aGlzLmNvdW50KyspO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRmlsdGVyU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBub3RfMSA9IHJlcXVpcmUoXCIuLi91dGlsL25vdFwiKTtcbnZhciBzdWJzY3JpYmVUb18xID0gcmVxdWlyZShcIi4uL3V0aWwvc3Vic2NyaWJlVG9cIik7XG52YXIgZmlsdGVyXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL2ZpbHRlclwiKTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbmZ1bmN0aW9uIHBhcnRpdGlvbihzb3VyY2UsIHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBbXG4gICAgICAgIGZpbHRlcl8xLmZpbHRlcihwcmVkaWNhdGUsIHRoaXNBcmcpKG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShzdWJzY3JpYmVUb18xLnN1YnNjcmliZVRvKHNvdXJjZSkpKSxcbiAgICAgICAgZmlsdGVyXzEuZmlsdGVyKG5vdF8xLm5vdChwcmVkaWNhdGUsIHRoaXNBcmcpKShuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoc3Vic2NyaWJlVG9fMS5zdWJzY3JpYmVUbyhzb3VyY2UpKSlcbiAgICBdO1xufVxuZXhwb3J0cy5wYXJ0aXRpb24gPSBwYXJ0aXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJ0aXRpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGlzQXJyYXlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzQXJyYXlcIik7XG52YXIgZnJvbUFycmF5XzEgPSByZXF1aXJlKFwiLi9mcm9tQXJyYXlcIik7XG52YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vT3V0ZXJTdWJzY3JpYmVyXCIpO1xudmFyIHN1YnNjcmliZVRvUmVzdWx0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdFwiKTtcbmZ1bmN0aW9uIHJhY2UoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgaWYgKG9ic2VydmFibGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpZiAoaXNBcnJheV8xLmlzQXJyYXkob2JzZXJ2YWJsZXNbMF0pKSB7XG4gICAgICAgICAgICBvYnNlcnZhYmxlcyA9IG9ic2VydmFibGVzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGVzWzBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmcm9tQXJyYXlfMS5mcm9tQXJyYXkob2JzZXJ2YWJsZXMsIHVuZGVmaW5lZCkubGlmdChuZXcgUmFjZU9wZXJhdG9yKCkpO1xufVxuZXhwb3J0cy5yYWNlID0gcmFjZTtcbnZhciBSYWNlT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJhY2VPcGVyYXRvcigpIHtcbiAgICB9XG4gICAgUmFjZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgUmFjZVN1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFJhY2VPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnRzLlJhY2VPcGVyYXRvciA9IFJhY2VPcGVyYXRvcjtcbnZhciBSYWNlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJhY2VTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJhY2VTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5oYXNGaXJzdCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5vYnNlcnZhYmxlcyA9IFtdO1xuICAgICAgICBfdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmFjZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKG9ic2VydmFibGUpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlcy5wdXNoKG9ic2VydmFibGUpO1xuICAgIH07XG4gICAgUmFjZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGVzID0gdGhpcy5vYnNlcnZhYmxlcztcbiAgICAgICAgdmFyIGxlbiA9IG9ic2VydmFibGVzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW4gJiYgIXRoaXMuaGFzRmlyc3Q7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gb2JzZXJ2YWJsZXNbaV07XG4gICAgICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgb2JzZXJ2YWJsZSwgdW5kZWZpbmVkLCBpKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuYWRkKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm9ic2VydmFibGVzID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmFjZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAoX291dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc0ZpcnN0KSB7XG4gICAgICAgICAgICB0aGlzLmhhc0ZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgIT09IG91dGVySW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuc3Vic2NyaXB0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gUmFjZVN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuZXhwb3J0cy5SYWNlU3Vic2NyaWJlciA9IFJhY2VTdWJzY3JpYmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmFjZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbmZ1bmN0aW9uIHJhbmdlKHN0YXJ0LCBjb3VudCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBpZiAoY291bnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY291bnQgPSBzdGFydDtcbiAgICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgY3VycmVudCA9IHN0YXJ0O1xuICAgICAgICBpZiAoc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoLCAwLCB7XG4gICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LCBjb3VudDogY291bnQsIHN0YXJ0OiBzdGFydCwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4KysgPj0gY291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGN1cnJlbnQrKyk7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSk7XG59XG5leHBvcnRzLnJhbmdlID0gcmFuZ2U7XG5mdW5jdGlvbiBkaXNwYXRjaChzdGF0ZSkge1xuICAgIHZhciBzdGFydCA9IHN0YXRlLnN0YXJ0LCBpbmRleCA9IHN0YXRlLmluZGV4LCBjb3VudCA9IHN0YXRlLmNvdW50LCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlcjtcbiAgICBpZiAoaW5kZXggPj0gY291bnQpIHtcbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHN1YnNjcmliZXIubmV4dChzdGFydCk7XG4gICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RhdGUuaW5kZXggPSBpbmRleCArIDE7XG4gICAgc3RhdGUuc3RhcnQgPSBzdGFydCArIDE7XG4gICAgdGhpcy5zY2hlZHVsZShzdGF0ZSk7XG59XG5leHBvcnRzLmRpc3BhdGNoID0gZGlzcGF0Y2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYW5nZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBhc3luY18xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci9hc3luY1wiKTtcbnZhciBpc051bWVyaWNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzTnVtZXJpY1wiKTtcbnZhciBpc1NjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNTY2hlZHVsZXJcIik7XG5mdW5jdGlvbiB0aW1lcihkdWVUaW1lLCBwZXJpb2RPclNjaGVkdWxlciwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGR1ZVRpbWUgPT09IHZvaWQgMCkgeyBkdWVUaW1lID0gMDsgfVxuICAgIHZhciBwZXJpb2QgPSAtMTtcbiAgICBpZiAoaXNOdW1lcmljXzEuaXNOdW1lcmljKHBlcmlvZE9yU2NoZWR1bGVyKSkge1xuICAgICAgICBwZXJpb2QgPSBOdW1iZXIocGVyaW9kT3JTY2hlZHVsZXIpIDwgMSAmJiAxIHx8IE51bWJlcihwZXJpb2RPclNjaGVkdWxlcik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIocGVyaW9kT3JTY2hlZHVsZXIpKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IHBlcmlvZE9yU2NoZWR1bGVyO1xuICAgIH1cbiAgICBpZiAoIWlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIoc2NoZWR1bGVyKSkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBkdWUgPSBpc051bWVyaWNfMS5pc051bWVyaWMoZHVlVGltZSlcbiAgICAgICAgICAgID8gZHVlVGltZVxuICAgICAgICAgICAgOiAoK2R1ZVRpbWUgLSBzY2hlZHVsZXIubm93KCkpO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoLCBkdWUsIHtcbiAgICAgICAgICAgIGluZGV4OiAwLCBwZXJpb2Q6IHBlcmlvZCwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMudGltZXIgPSB0aW1lcjtcbmZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG4gICAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgsIHBlcmlvZCA9IHN0YXRlLnBlcmlvZCwgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXI7XG4gICAgc3Vic2NyaWJlci5uZXh0KGluZGV4KTtcbiAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIGlmIChwZXJpb2QgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfVxuICAgIHN0YXRlLmluZGV4ID0gaW5kZXggKyAxO1xuICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUsIHBlcmlvZCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBmcm9tXzEgPSByZXF1aXJlKFwiLi9mcm9tXCIpO1xudmFyIGVtcHR5XzEgPSByZXF1aXJlKFwiLi9lbXB0eVwiKTtcbmZ1bmN0aW9uIHVzaW5nKHJlc291cmNlRmFjdG9yeSwgb2JzZXJ2YWJsZUZhY3RvcnkpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciByZXNvdXJjZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc291cmNlID0gcmVzb3VyY2VGYWN0b3J5KCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gb2JzZXJ2YWJsZUZhY3RvcnkocmVzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNvdXJjZSA9IHJlc3VsdCA/IGZyb21fMS5mcm9tKHJlc3VsdCkgOiBlbXB0eV8xLkVNUFRZO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgaWYgKHJlc291cmNlKSB7XG4gICAgICAgICAgICAgICAgcmVzb3VyY2UudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbmV4cG9ydHMudXNpbmcgPSB1c2luZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzaW5nLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBmcm9tQXJyYXlfMSA9IHJlcXVpcmUoXCIuL2Zyb21BcnJheVwiKTtcbnZhciBpc0FycmF5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0FycmF5XCIpO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xudmFyIGl0ZXJhdG9yXzEgPSByZXF1aXJlKFwiLi4vLi4vaW50ZXJuYWwvc3ltYm9sL2l0ZXJhdG9yXCIpO1xudmFyIGlubmVyU3Vic2NyaWJlXzEgPSByZXF1aXJlKFwiLi4vaW5uZXJTdWJzY3JpYmVcIik7XG5mdW5jdGlvbiB6aXAoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdFNlbGVjdG9yID0gb2JzZXJ2YWJsZXNbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV07XG4gICAgaWYgKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvYnNlcnZhYmxlcy5wb3AoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheV8xLmZyb21BcnJheShvYnNlcnZhYmxlcywgdW5kZWZpbmVkKS5saWZ0KG5ldyBaaXBPcGVyYXRvcihyZXN1bHRTZWxlY3RvcikpO1xufVxuZXhwb3J0cy56aXAgPSB6aXA7XG52YXIgWmlwT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFppcE9wZXJhdG9yKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMucmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgWmlwT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBaaXBTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucmVzdWx0U2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBaaXBPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnRzLlppcE9wZXJhdG9yID0gWmlwT3BlcmF0b3I7XG52YXIgWmlwU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFppcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gWmlwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcmVzdWx0U2VsZWN0b3IsIHZhbHVlcykge1xuICAgICAgICBpZiAodmFsdWVzID09PSB2b2lkIDApIHsgdmFsdWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuaXRlcmF0b3JzID0gW107XG4gICAgICAgIF90aGlzLmFjdGl2ZSA9IDA7XG4gICAgICAgIF90aGlzLnJlc3VsdFNlbGVjdG9yID0gKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykgPyByZXN1bHRTZWxlY3RvciA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBaaXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaXRlcmF0b3JzID0gdGhpcy5pdGVyYXRvcnM7XG4gICAgICAgIGlmIChpc0FycmF5XzEuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9ycy5wdXNoKG5ldyBTdGF0aWNBcnJheUl0ZXJhdG9yKHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlW2l0ZXJhdG9yXzEuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpdGVyYXRvcnMucHVzaChuZXcgU3RhdGljSXRlcmF0b3IodmFsdWVbaXRlcmF0b3JfMS5pdGVyYXRvcl0oKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaXRlcmF0b3JzLnB1c2gobmV3IFppcEJ1ZmZlckl0ZXJhdG9yKHRoaXMuZGVzdGluYXRpb24sIHRoaXMsIHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFppcFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9ycyA9IHRoaXMuaXRlcmF0b3JzO1xuICAgICAgICB2YXIgbGVuID0gaXRlcmF0b3JzLmxlbmd0aDtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3RpdmUgPSBsZW47XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yc1tpXTtcbiAgICAgICAgICAgIGlmIChpdGVyYXRvci5zdGlsbFVuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKGl0ZXJhdG9yLnN1YnNjcmliZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlLS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFppcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUluYWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFjdGl2ZS0tO1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgWmlwU3Vic2NyaWJlci5wcm90b3R5cGUuY2hlY2tJdGVyYXRvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpdGVyYXRvcnMgPSB0aGlzLml0ZXJhdG9ycztcbiAgICAgICAgdmFyIGxlbiA9IGl0ZXJhdG9ycy5sZW5ndGg7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yc1tpXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlcmF0b3IuaGFzVmFsdWUgPT09ICdmdW5jdGlvbicgJiYgIWl0ZXJhdG9yLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNob3VsZENvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yc1tpXTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICBpZiAoaXRlcmF0b3IuaGFzQ29tcGxldGVkKCkpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFyZ3MucHVzaChyZXN1bHQudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgICAgICB0aGlzLl90cnlyZXN1bHRTZWxlY3RvcihhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQoYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZENvbXBsZXRlKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBaaXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5cmVzdWx0U2VsZWN0b3IgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5yZXN1bHRTZWxlY3Rvci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gWmlwU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmV4cG9ydHMuWmlwU3Vic2NyaWJlciA9IFppcFN1YnNjcmliZXI7XG52YXIgU3RhdGljSXRlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0YXRpY0l0ZXJhdG9yKGl0ZXJhdG9yKSB7XG4gICAgICAgIHRoaXMuaXRlcmF0b3IgPSBpdGVyYXRvcjtcbiAgICAgICAgdGhpcy5uZXh0UmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgIH1cbiAgICBTdGF0aWNJdGVyYXRvci5wcm90b3R5cGUuaGFzVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgU3RhdGljSXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLm5leHRSZXN1bHQ7XG4gICAgICAgIHRoaXMubmV4dFJlc3VsdCA9IHRoaXMuaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgU3RhdGljSXRlcmF0b3IucHJvdG90eXBlLmhhc0NvbXBsZXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5leHRSZXN1bHQgPSB0aGlzLm5leHRSZXN1bHQ7XG4gICAgICAgIHJldHVybiBCb29sZWFuKG5leHRSZXN1bHQgJiYgbmV4dFJlc3VsdC5kb25lKTtcbiAgICB9O1xuICAgIHJldHVybiBTdGF0aWNJdGVyYXRvcjtcbn0oKSk7XG52YXIgU3RhdGljQXJyYXlJdGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RhdGljQXJyYXlJdGVyYXRvcihhcnJheSkge1xuICAgICAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgIH1cbiAgICBTdGF0aWNBcnJheUl0ZXJhdG9yLnByb3RvdHlwZVtpdGVyYXRvcl8xLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBTdGF0aWNBcnJheUl0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpID0gdGhpcy5pbmRleCsrO1xuICAgICAgICB2YXIgYXJyYXkgPSB0aGlzLmFycmF5O1xuICAgICAgICByZXR1cm4gaSA8IHRoaXMubGVuZ3RoID8geyB2YWx1ZTogYXJyYXlbaV0sIGRvbmU6IGZhbHNlIH0gOiB7IHZhbHVlOiBudWxsLCBkb25lOiB0cnVlIH07XG4gICAgfTtcbiAgICBTdGF0aWNBcnJheUl0ZXJhdG9yLnByb3RvdHlwZS5oYXNWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJyYXkubGVuZ3RoID4gdGhpcy5pbmRleDtcbiAgICB9O1xuICAgIFN0YXRpY0FycmF5SXRlcmF0b3IucHJvdG90eXBlLmhhc0NvbXBsZXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJyYXkubGVuZ3RoID09PSB0aGlzLmluZGV4O1xuICAgIH07XG4gICAgcmV0dXJuIFN0YXRpY0FycmF5SXRlcmF0b3I7XG59KCkpO1xudmFyIFppcEJ1ZmZlckl0ZXJhdG9yID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoWmlwQnVmZmVySXRlcmF0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gWmlwQnVmZmVySXRlcmF0b3IoZGVzdGluYXRpb24sIHBhcmVudCwgb2JzZXJ2YWJsZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICBfdGhpcy5vYnNlcnZhYmxlID0gb2JzZXJ2YWJsZTtcbiAgICAgICAgX3RoaXMuc3RpbGxVbnN1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgICBfdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgX3RoaXMuaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFppcEJ1ZmZlckl0ZXJhdG9yLnByb3RvdHlwZVtpdGVyYXRvcl8xLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmlzQ29tcGxldGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBudWxsLCBkb25lOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogYnVmZmVyLnNoaWZ0KCksIGRvbmU6IGZhbHNlIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFppcEJ1ZmZlckl0ZXJhdG9yLnByb3RvdHlwZS5oYXNWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLmxlbmd0aCA+IDA7XG4gICAgfTtcbiAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUuaGFzQ29tcGxldGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIubGVuZ3RoID09PSAwICYmIHRoaXMuaXNDb21wbGV0ZTtcbiAgICB9O1xuICAgIFppcEJ1ZmZlckl0ZXJhdG9yLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5ub3RpZnlJbmFjdGl2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyLnB1c2goaW5uZXJWYWx1ZSk7XG4gICAgICAgIHRoaXMucGFyZW50LmNoZWNrSXRlcmF0b3JzKCk7XG4gICAgfTtcbiAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gaW5uZXJTdWJzY3JpYmVfMS5pbm5lclN1YnNjcmliZSh0aGlzLm9ic2VydmFibGUsIG5ldyBpbm5lclN1YnNjcmliZV8xLlNpbXBsZUlubmVyU3Vic2NyaWJlcih0aGlzKSk7XG4gICAgfTtcbiAgICByZXR1cm4gWmlwQnVmZmVySXRlcmF0b3I7XG59KGlubmVyU3Vic2NyaWJlXzEuU2ltcGxlT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD16aXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvT2JzZXJ2YWJsZVwiKTtcbmV4cG9ydHMuT2JzZXJ2YWJsZSA9IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlO1xudmFyIENvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9Db25uZWN0YWJsZU9ic2VydmFibGVcIik7XG5leHBvcnRzLkNvbm5lY3RhYmxlT2JzZXJ2YWJsZSA9IENvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xLkNvbm5lY3RhYmxlT2JzZXJ2YWJsZTtcbnZhciBncm91cEJ5XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvZ3JvdXBCeVwiKTtcbmV4cG9ydHMuR3JvdXBlZE9ic2VydmFibGUgPSBncm91cEJ5XzEuR3JvdXBlZE9ic2VydmFibGU7XG52YXIgb2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvc3ltYm9sL29ic2VydmFibGVcIik7XG5leHBvcnRzLm9ic2VydmFibGUgPSBvYnNlcnZhYmxlXzEub2JzZXJ2YWJsZTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9TdWJqZWN0XCIpO1xuZXhwb3J0cy5TdWJqZWN0ID0gU3ViamVjdF8xLlN1YmplY3Q7XG52YXIgQmVoYXZpb3JTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9CZWhhdmlvclN1YmplY3RcIik7XG5leHBvcnRzLkJlaGF2aW9yU3ViamVjdCA9IEJlaGF2aW9yU3ViamVjdF8xLkJlaGF2aW9yU3ViamVjdDtcbnZhciBSZXBsYXlTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9SZXBsYXlTdWJqZWN0XCIpO1xuZXhwb3J0cy5SZXBsYXlTdWJqZWN0ID0gUmVwbGF5U3ViamVjdF8xLlJlcGxheVN1YmplY3Q7XG52YXIgQXN5bmNTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9Bc3luY1N1YmplY3RcIik7XG5leHBvcnRzLkFzeW5jU3ViamVjdCA9IEFzeW5jU3ViamVjdF8xLkFzeW5jU3ViamVjdDtcbnZhciBhc2FwXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9zY2hlZHVsZXIvYXNhcFwiKTtcbmV4cG9ydHMuYXNhcCA9IGFzYXBfMS5hc2FwO1xuZXhwb3J0cy5hc2FwU2NoZWR1bGVyID0gYXNhcF8xLmFzYXBTY2hlZHVsZXI7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3NjaGVkdWxlci9hc3luY1wiKTtcbmV4cG9ydHMuYXN5bmMgPSBhc3luY18xLmFzeW5jO1xuZXhwb3J0cy5hc3luY1NjaGVkdWxlciA9IGFzeW5jXzEuYXN5bmNTY2hlZHVsZXI7XG52YXIgcXVldWVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3NjaGVkdWxlci9xdWV1ZVwiKTtcbmV4cG9ydHMucXVldWUgPSBxdWV1ZV8xLnF1ZXVlO1xuZXhwb3J0cy5xdWV1ZVNjaGVkdWxlciA9IHF1ZXVlXzEucXVldWVTY2hlZHVsZXI7XG52YXIgYW5pbWF0aW9uRnJhbWVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3NjaGVkdWxlci9hbmltYXRpb25GcmFtZVwiKTtcbmV4cG9ydHMuYW5pbWF0aW9uRnJhbWUgPSBhbmltYXRpb25GcmFtZV8xLmFuaW1hdGlvbkZyYW1lO1xuZXhwb3J0cy5hbmltYXRpb25GcmFtZVNjaGVkdWxlciA9IGFuaW1hdGlvbkZyYW1lXzEuYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXI7XG52YXIgVmlydHVhbFRpbWVTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3NjaGVkdWxlci9WaXJ0dWFsVGltZVNjaGVkdWxlclwiKTtcbmV4cG9ydHMuVmlydHVhbFRpbWVTY2hlZHVsZXIgPSBWaXJ0dWFsVGltZVNjaGVkdWxlcl8xLlZpcnR1YWxUaW1lU2NoZWR1bGVyO1xuZXhwb3J0cy5WaXJ0dWFsQWN0aW9uID0gVmlydHVhbFRpbWVTY2hlZHVsZXJfMS5WaXJ0dWFsQWN0aW9uO1xudmFyIFNjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvU2NoZWR1bGVyXCIpO1xuZXhwb3J0cy5TY2hlZHVsZXIgPSBTY2hlZHVsZXJfMS5TY2hlZHVsZXI7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9TdWJzY3JpcHRpb25cIik7XG5leHBvcnRzLlN1YnNjcmlwdGlvbiA9IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbjtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9TdWJzY3JpYmVyXCIpO1xuZXhwb3J0cy5TdWJzY3JpYmVyID0gU3Vic2NyaWJlcl8xLlN1YnNjcmliZXI7XG52YXIgTm90aWZpY2F0aW9uXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9Ob3RpZmljYXRpb25cIik7XG5leHBvcnRzLk5vdGlmaWNhdGlvbiA9IE5vdGlmaWNhdGlvbl8xLk5vdGlmaWNhdGlvbjtcbmV4cG9ydHMuTm90aWZpY2F0aW9uS2luZCA9IE5vdGlmaWNhdGlvbl8xLk5vdGlmaWNhdGlvbktpbmQ7XG52YXIgcGlwZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvdXRpbC9waXBlXCIpO1xuZXhwb3J0cy5waXBlID0gcGlwZV8xLnBpcGU7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvdXRpbC9ub29wXCIpO1xuZXhwb3J0cy5ub29wID0gbm9vcF8xLm5vb3A7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3V0aWwvaWRlbnRpdHlcIik7XG5leHBvcnRzLmlkZW50aXR5ID0gaWRlbnRpdHlfMS5pZGVudGl0eTtcbnZhciBpc09ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3V0aWwvaXNPYnNlcnZhYmxlXCIpO1xuZXhwb3J0cy5pc09ic2VydmFibGUgPSBpc09ic2VydmFibGVfMS5pc09ic2VydmFibGU7XG52YXIgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3V0aWwvQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JcIik7XG5leHBvcnRzLkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yID0gQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMS5Bcmd1bWVudE91dE9mUmFuZ2VFcnJvcjtcbnZhciBFbXB0eUVycm9yXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC91dGlsL0VtcHR5RXJyb3JcIik7XG5leHBvcnRzLkVtcHR5RXJyb3IgPSBFbXB0eUVycm9yXzEuRW1wdHlFcnJvcjtcbnZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvclwiKTtcbmV4cG9ydHMuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xLk9iamVjdFVuc3Vic2NyaWJlZEVycm9yO1xudmFyIFVuc3Vic2NyaXB0aW9uRXJyb3JfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvclwiKTtcbmV4cG9ydHMuVW5zdWJzY3JpcHRpb25FcnJvciA9IFVuc3Vic2NyaXB0aW9uRXJyb3JfMS5VbnN1YnNjcmlwdGlvbkVycm9yO1xudmFyIFRpbWVvdXRFcnJvcl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvdXRpbC9UaW1lb3V0RXJyb3JcIik7XG5leHBvcnRzLlRpbWVvdXRFcnJvciA9IFRpbWVvdXRFcnJvcl8xLlRpbWVvdXRFcnJvcjtcbnZhciBiaW5kQ2FsbGJhY2tfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvYmluZENhbGxiYWNrXCIpO1xuZXhwb3J0cy5iaW5kQ2FsbGJhY2sgPSBiaW5kQ2FsbGJhY2tfMS5iaW5kQ2FsbGJhY2s7XG52YXIgYmluZE5vZGVDYWxsYmFja18xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9iaW5kTm9kZUNhbGxiYWNrXCIpO1xuZXhwb3J0cy5iaW5kTm9kZUNhbGxiYWNrID0gYmluZE5vZGVDYWxsYmFja18xLmJpbmROb2RlQ2FsbGJhY2s7XG52YXIgY29tYmluZUxhdGVzdF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9jb21iaW5lTGF0ZXN0XCIpO1xuZXhwb3J0cy5jb21iaW5lTGF0ZXN0ID0gY29tYmluZUxhdGVzdF8xLmNvbWJpbmVMYXRlc3Q7XG52YXIgY29uY2F0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2NvbmNhdFwiKTtcbmV4cG9ydHMuY29uY2F0ID0gY29uY2F0XzEuY29uY2F0O1xudmFyIGRlZmVyXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2RlZmVyXCIpO1xuZXhwb3J0cy5kZWZlciA9IGRlZmVyXzEuZGVmZXI7XG52YXIgZW1wdHlfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvZW1wdHlcIik7XG5leHBvcnRzLmVtcHR5ID0gZW1wdHlfMS5lbXB0eTtcbnZhciBmb3JrSm9pbl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9mb3JrSm9pblwiKTtcbmV4cG9ydHMuZm9ya0pvaW4gPSBmb3JrSm9pbl8xLmZvcmtKb2luO1xudmFyIGZyb21fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvZnJvbVwiKTtcbmV4cG9ydHMuZnJvbSA9IGZyb21fMS5mcm9tO1xudmFyIGZyb21FdmVudF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tRXZlbnRcIik7XG5leHBvcnRzLmZyb21FdmVudCA9IGZyb21FdmVudF8xLmZyb21FdmVudDtcbnZhciBmcm9tRXZlbnRQYXR0ZXJuXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudFBhdHRlcm5cIik7XG5leHBvcnRzLmZyb21FdmVudFBhdHRlcm4gPSBmcm9tRXZlbnRQYXR0ZXJuXzEuZnJvbUV2ZW50UGF0dGVybjtcbnZhciBnZW5lcmF0ZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9nZW5lcmF0ZVwiKTtcbmV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZV8xLmdlbmVyYXRlO1xudmFyIGlpZl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9paWZcIik7XG5leHBvcnRzLmlpZiA9IGlpZl8xLmlpZjtcbnZhciBpbnRlcnZhbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9pbnRlcnZhbFwiKTtcbmV4cG9ydHMuaW50ZXJ2YWwgPSBpbnRlcnZhbF8xLmludGVydmFsO1xudmFyIG1lcmdlXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL21lcmdlXCIpO1xuZXhwb3J0cy5tZXJnZSA9IG1lcmdlXzEubWVyZ2U7XG52YXIgbmV2ZXJfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvbmV2ZXJcIik7XG5leHBvcnRzLm5ldmVyID0gbmV2ZXJfMS5uZXZlcjtcbnZhciBvZl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9vZlwiKTtcbmV4cG9ydHMub2YgPSBvZl8xLm9mO1xudmFyIG9uRXJyb3JSZXN1bWVOZXh0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL29uRXJyb3JSZXN1bWVOZXh0XCIpO1xuZXhwb3J0cy5vbkVycm9yUmVzdW1lTmV4dCA9IG9uRXJyb3JSZXN1bWVOZXh0XzEub25FcnJvclJlc3VtZU5leHQ7XG52YXIgcGFpcnNfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvcGFpcnNcIik7XG5leHBvcnRzLnBhaXJzID0gcGFpcnNfMS5wYWlycztcbnZhciBwYXJ0aXRpb25fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvcGFydGl0aW9uXCIpO1xuZXhwb3J0cy5wYXJ0aXRpb24gPSBwYXJ0aXRpb25fMS5wYXJ0aXRpb247XG52YXIgcmFjZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9yYWNlXCIpO1xuZXhwb3J0cy5yYWNlID0gcmFjZV8xLnJhY2U7XG52YXIgcmFuZ2VfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvcmFuZ2VcIik7XG5leHBvcnRzLnJhbmdlID0gcmFuZ2VfMS5yYW5nZTtcbnZhciB0aHJvd0Vycm9yXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL3Rocm93RXJyb3JcIik7XG5leHBvcnRzLnRocm93RXJyb3IgPSB0aHJvd0Vycm9yXzEudGhyb3dFcnJvcjtcbnZhciB0aW1lcl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS90aW1lclwiKTtcbmV4cG9ydHMudGltZXIgPSB0aW1lcl8xLnRpbWVyO1xudmFyIHVzaW5nXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL3VzaW5nXCIpO1xuZXhwb3J0cy51c2luZyA9IHVzaW5nXzEudXNpbmc7XG52YXIgemlwXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL3ppcFwiKTtcbmV4cG9ydHMuemlwID0gemlwXzEuemlwO1xudmFyIHNjaGVkdWxlZF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZFwiKTtcbmV4cG9ydHMuc2NoZWR1bGVkID0gc2NoZWR1bGVkXzEuc2NoZWR1bGVkO1xudmFyIGVtcHR5XzIgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2VtcHR5XCIpO1xuZXhwb3J0cy5FTVBUWSA9IGVtcHR5XzIuRU1QVFk7XG52YXIgbmV2ZXJfMiA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvbmV2ZXJcIik7XG5leHBvcnRzLk5FVkVSID0gbmV2ZXJfMi5ORVZFUjtcbnZhciBjb25maWdfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL2NvbmZpZ1wiKTtcbmV4cG9ydHMuY29uZmlnID0gY29uZmlnXzEuY29uZmlnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcnhqc18xID0gcmVxdWlyZShcInJ4anNcIik7XG5leHBvcnRzLlN1YmplY3QgPSByeGpzXzEuU3ViamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcInJ4anMtY29tcGF0L1N1YmplY3RcIikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgaW5uZXJTdWJzY3JpYmVfMSA9IHJlcXVpcmUoXCIuLi9pbm5lclN1YnNjcmliZVwiKTtcbmZ1bmN0aW9uIGF1ZGl0KGR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYXVkaXRPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IEF1ZGl0T3BlcmF0b3IoZHVyYXRpb25TZWxlY3RvcikpO1xuICAgIH07XG59XG5leHBvcnRzLmF1ZGl0ID0gYXVkaXQ7XG52YXIgQXVkaXRPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXVkaXRPcGVyYXRvcihkdXJhdGlvblNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG4gICAgfVxuICAgIEF1ZGl0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBBdWRpdFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kdXJhdGlvblNlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQXVkaXRPcGVyYXRvcjtcbn0oKSk7XG52YXIgQXVkaXRTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXVkaXRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEF1ZGl0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXVkaXRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICBpZiAoIXRoaXMudGhyb3R0bGVkKSB7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvblNlbGVjdG9yID0gdGhpcy5kdXJhdGlvblNlbGVjdG9yO1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gZHVyYXRpb25TZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IGlubmVyU3Vic2NyaWJlXzEuaW5uZXJTdWJzY3JpYmUoZHVyYXRpb24sIG5ldyBpbm5lclN1YnNjcmliZV8xLlNpbXBsZUlubmVyU3Vic2NyaWJlcih0aGlzKSk7XG4gICAgICAgICAgICBpZiAoIWlubmVyU3Vic2NyaXB0aW9uIHx8IGlubmVyU3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJUaHJvdHRsZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQodGhpcy50aHJvdHRsZWQgPSBpbm5lclN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEF1ZGl0U3Vic2NyaWJlci5wcm90b3R5cGUuY2xlYXJUaHJvdHRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgdmFsdWUgPSBfYS52YWx1ZSwgaGFzVmFsdWUgPSBfYS5oYXNWYWx1ZSwgdGhyb3R0bGVkID0gX2EudGhyb3R0bGVkO1xuICAgICAgICBpZiAodGhyb3R0bGVkKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZSh0aHJvdHRsZWQpO1xuICAgICAgICAgICAgdGhpcy50aHJvdHRsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aHJvdHRsZWQudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBdWRpdFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJUaHJvdHRsZSgpO1xuICAgIH07XG4gICAgQXVkaXRTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jbGVhclRocm90dGxlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gQXVkaXRTdWJzY3JpYmVyO1xufShpbm5lclN1YnNjcmliZV8xLlNpbXBsZU91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXVkaXQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgYXVkaXRfMSA9IHJlcXVpcmUoXCIuL2F1ZGl0XCIpO1xudmFyIHRpbWVyXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS90aW1lclwiKTtcbmZ1bmN0aW9uIGF1ZGl0VGltZShkdXJhdGlvbiwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jXzEuYXN5bmM7IH1cbiAgICByZXR1cm4gYXVkaXRfMS5hdWRpdChmdW5jdGlvbiAoKSB7IHJldHVybiB0aW1lcl8xLnRpbWVyKGR1cmF0aW9uLCBzY2hlZHVsZXIpOyB9KTtcbn1cbmV4cG9ydHMuYXVkaXRUaW1lID0gYXVkaXRUaW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXVkaXRUaW1lLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBpbm5lclN1YnNjcmliZV8xID0gcmVxdWlyZShcIi4uL2lubmVyU3Vic2NyaWJlXCIpO1xuZnVuY3Rpb24gYnVmZmVyKGNsb3NpbmdOb3RpZmllcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBidWZmZXJPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IEJ1ZmZlck9wZXJhdG9yKGNsb3NpbmdOb3RpZmllcikpO1xuICAgIH07XG59XG5leHBvcnRzLmJ1ZmZlciA9IGJ1ZmZlcjtcbnZhciBCdWZmZXJPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyT3BlcmF0b3IoY2xvc2luZ05vdGlmaWVyKSB7XG4gICAgICAgIHRoaXMuY2xvc2luZ05vdGlmaWVyID0gY2xvc2luZ05vdGlmaWVyO1xuICAgIH1cbiAgICBCdWZmZXJPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEJ1ZmZlclN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5jbG9zaW5nTm90aWZpZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJPcGVyYXRvcjtcbn0oKSk7XG52YXIgQnVmZmVyU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJ1ZmZlclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY2xvc2luZ05vdGlmaWVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgX3RoaXMuYWRkKGlubmVyU3Vic2NyaWJlXzEuaW5uZXJTdWJzY3JpYmUoY2xvc2luZ05vdGlmaWVyLCBuZXcgaW5uZXJTdWJzY3JpYmVfMS5TaW1wbGVJbm5lclN1YnNjcmliZXIoX3RoaXMpKSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQnVmZmVyU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5idWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgfTtcbiAgICBCdWZmZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlclN1YnNjcmliZXI7XG59KGlubmVyU3Vic2NyaWJlXzEuU2ltcGxlT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gYnVmZmVyQ291bnQoYnVmZmVyU2l6ZSwgc3RhcnRCdWZmZXJFdmVyeSkge1xuICAgIGlmIChzdGFydEJ1ZmZlckV2ZXJ5ID09PSB2b2lkIDApIHsgc3RhcnRCdWZmZXJFdmVyeSA9IG51bGw7IH1cbiAgICByZXR1cm4gZnVuY3Rpb24gYnVmZmVyQ291bnRPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IEJ1ZmZlckNvdW50T3BlcmF0b3IoYnVmZmVyU2l6ZSwgc3RhcnRCdWZmZXJFdmVyeSkpO1xuICAgIH07XG59XG5leHBvcnRzLmJ1ZmZlckNvdW50ID0gYnVmZmVyQ291bnQ7XG52YXIgQnVmZmVyQ291bnRPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyQ291bnRPcGVyYXRvcihidWZmZXJTaXplLCBzdGFydEJ1ZmZlckV2ZXJ5KSB7XG4gICAgICAgIHRoaXMuYnVmZmVyU2l6ZSA9IGJ1ZmZlclNpemU7XG4gICAgICAgIHRoaXMuc3RhcnRCdWZmZXJFdmVyeSA9IHN0YXJ0QnVmZmVyRXZlcnk7XG4gICAgICAgIGlmICghc3RhcnRCdWZmZXJFdmVyeSB8fCBidWZmZXJTaXplID09PSBzdGFydEJ1ZmZlckV2ZXJ5KSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZXJDbGFzcyA9IEJ1ZmZlckNvdW50U3Vic2NyaWJlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlckNsYXNzID0gQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBCdWZmZXJDb3VudE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgdGhpcy5zdWJzY3JpYmVyQ2xhc3Moc3Vic2NyaWJlciwgdGhpcy5idWZmZXJTaXplLCB0aGlzLnN0YXJ0QnVmZmVyRXZlcnkpKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJDb3VudE9wZXJhdG9yO1xufSgpKTtcbnZhciBCdWZmZXJDb3VudFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCdWZmZXJDb3VudFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyQ291bnRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBidWZmZXJTaXplKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5idWZmZXJTaXplID0gYnVmZmVyU2l6ZTtcbiAgICAgICAgX3RoaXMuYnVmZmVyID0gW107XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQnVmZmVyQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIGJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT0gdGhpcy5idWZmZXJTaXplKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoYnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlckNvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJDb3VudFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG52YXIgQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJ1ZmZlclNraXBDb3VudFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgYnVmZmVyU2l6ZSwgc3RhcnRCdWZmZXJFdmVyeSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYnVmZmVyU2l6ZSA9IGJ1ZmZlclNpemU7XG4gICAgICAgIF90aGlzLnN0YXJ0QnVmZmVyRXZlcnkgPSBzdGFydEJ1ZmZlckV2ZXJ5O1xuICAgICAgICBfdGhpcy5idWZmZXJzID0gW107XG4gICAgICAgIF90aGlzLmNvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBCdWZmZXJTa2lwQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBidWZmZXJTaXplID0gX2EuYnVmZmVyU2l6ZSwgc3RhcnRCdWZmZXJFdmVyeSA9IF9hLnN0YXJ0QnVmZmVyRXZlcnksIGJ1ZmZlcnMgPSBfYS5idWZmZXJzLCBjb3VudCA9IF9hLmNvdW50O1xuICAgICAgICB0aGlzLmNvdW50Kys7XG4gICAgICAgIGlmIChjb3VudCAlIHN0YXJ0QnVmZmVyRXZlcnkgPT09IDApIHtcbiAgICAgICAgICAgIGJ1ZmZlcnMucHVzaChbXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IGJ1ZmZlcnMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gYnVmZmVyc1tpXTtcbiAgICAgICAgICAgIGJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChidWZmZXIubGVuZ3RoID09PSBidWZmZXJTaXplKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlclNraXBDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgYnVmZmVycyA9IF9hLmJ1ZmZlcnMsIGRlc3RpbmF0aW9uID0gX2EuZGVzdGluYXRpb247XG4gICAgICAgIHdoaWxlIChidWZmZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBidWZmZXJzLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJTa2lwQ291bnRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyQ291bnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2FzeW5jXCIpO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xudmFyIGlzU2NoZWR1bGVyXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc1NjaGVkdWxlclwiKTtcbmZ1bmN0aW9uIGJ1ZmZlclRpbWUoYnVmZmVyVGltZVNwYW4pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYztcbiAgICBpZiAoaXNTY2hlZHVsZXJfMS5pc1NjaGVkdWxlcihhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdKSkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICBsZW5ndGgtLTtcbiAgICB9XG4gICAgdmFyIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgPSBudWxsO1xuICAgIGlmIChsZW5ndGggPj0gMikge1xuICAgICAgICBidWZmZXJDcmVhdGlvbkludGVydmFsID0gYXJndW1lbnRzWzFdO1xuICAgIH1cbiAgICB2YXIgbWF4QnVmZmVyU2l6ZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICBpZiAobGVuZ3RoID49IDMpIHtcbiAgICAgICAgbWF4QnVmZmVyU2l6ZSA9IGFyZ3VtZW50c1syXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGJ1ZmZlclRpbWVPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IEJ1ZmZlclRpbWVPcGVyYXRvcihidWZmZXJUaW1lU3BhbiwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgbWF4QnVmZmVyU2l6ZSwgc2NoZWR1bGVyKSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuYnVmZmVyVGltZSA9IGJ1ZmZlclRpbWU7XG52YXIgQnVmZmVyVGltZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdWZmZXJUaW1lT3BlcmF0b3IoYnVmZmVyVGltZVNwYW4sIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIG1heEJ1ZmZlclNpemUsIHNjaGVkdWxlcikge1xuICAgICAgICB0aGlzLmJ1ZmZlclRpbWVTcGFuID0gYnVmZmVyVGltZVNwYW47XG4gICAgICAgIHRoaXMuYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCA9IGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWw7XG4gICAgICAgIHRoaXMubWF4QnVmZmVyU2l6ZSA9IG1heEJ1ZmZlclNpemU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIH1cbiAgICBCdWZmZXJUaW1lT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBCdWZmZXJUaW1lU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmJ1ZmZlclRpbWVTcGFuLCB0aGlzLmJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIHRoaXMubWF4QnVmZmVyU2l6ZSwgdGhpcy5zY2hlZHVsZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJUaW1lT3BlcmF0b3I7XG59KCkpO1xudmFyIENvbnRleHQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnRleHQoKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgfVxuICAgIHJldHVybiBDb250ZXh0O1xufSgpKTtcbnZhciBCdWZmZXJUaW1lU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJ1ZmZlclRpbWVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJ1ZmZlclRpbWVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBidWZmZXJUaW1lU3BhbiwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgbWF4QnVmZmVyU2l6ZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5idWZmZXJUaW1lU3BhbiA9IGJ1ZmZlclRpbWVTcGFuO1xuICAgICAgICBfdGhpcy5idWZmZXJDcmVhdGlvbkludGVydmFsID0gYnVmZmVyQ3JlYXRpb25JbnRlcnZhbDtcbiAgICAgICAgX3RoaXMubWF4QnVmZmVyU2l6ZSA9IG1heEJ1ZmZlclNpemU7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMuY29udGV4dHMgPSBbXTtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBfdGhpcy5vcGVuQ29udGV4dCgpO1xuICAgICAgICBfdGhpcy50aW1lc3Bhbk9ubHkgPSBidWZmZXJDcmVhdGlvbkludGVydmFsID09IG51bGwgfHwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCA8IDA7XG4gICAgICAgIGlmIChfdGhpcy50aW1lc3Bhbk9ubHkpIHtcbiAgICAgICAgICAgIHZhciB0aW1lU3Bhbk9ubHlTdGF0ZSA9IHsgc3Vic2NyaWJlcjogX3RoaXMsIGNvbnRleHQ6IGNvbnRleHQsIGJ1ZmZlclRpbWVTcGFuOiBidWZmZXJUaW1lU3BhbiB9O1xuICAgICAgICAgICAgX3RoaXMuYWRkKGNvbnRleHQuY2xvc2VBY3Rpb24gPSBzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hCdWZmZXJUaW1lU3Bhbk9ubHksIGJ1ZmZlclRpbWVTcGFuLCB0aW1lU3Bhbk9ubHlTdGF0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNsb3NlU3RhdGUgPSB7IHN1YnNjcmliZXI6IF90aGlzLCBjb250ZXh0OiBjb250ZXh0IH07XG4gICAgICAgICAgICB2YXIgY3JlYXRpb25TdGF0ZSA9IHsgYnVmZmVyVGltZVNwYW46IGJ1ZmZlclRpbWVTcGFuLCBidWZmZXJDcmVhdGlvbkludGVydmFsOiBidWZmZXJDcmVhdGlvbkludGVydmFsLCBzdWJzY3JpYmVyOiBfdGhpcywgc2NoZWR1bGVyOiBzY2hlZHVsZXIgfTtcbiAgICAgICAgICAgIF90aGlzLmFkZChjb250ZXh0LmNsb3NlQWN0aW9uID0gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoQnVmZmVyQ2xvc2UsIGJ1ZmZlclRpbWVTcGFuLCBjbG9zZVN0YXRlKSk7XG4gICAgICAgICAgICBfdGhpcy5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoQnVmZmVyQ3JlYXRpb24sIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIGNyZWF0aW9uU3RhdGUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEJ1ZmZlclRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICB2YXIgbGVuID0gY29udGV4dHMubGVuZ3RoO1xuICAgICAgICB2YXIgZmlsbGVkQnVmZmVyQ29udGV4dDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIGNvbnRleHRfMSA9IGNvbnRleHRzW2ldO1xuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGNvbnRleHRfMS5idWZmZXI7XG4gICAgICAgICAgICBidWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PSB0aGlzLm1heEJ1ZmZlclNpemUpIHtcbiAgICAgICAgICAgICAgICBmaWxsZWRCdWZmZXJDb250ZXh0ID0gY29udGV4dF8xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmaWxsZWRCdWZmZXJDb250ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLm9uQnVmZmVyRnVsbChmaWxsZWRCdWZmZXJDb250ZXh0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0cy5sZW5ndGggPSAwO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9lcnJvci5jYWxsKHRoaXMsIGVycik7XG4gICAgfTtcbiAgICBCdWZmZXJUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBjb250ZXh0cyA9IF9hLmNvbnRleHRzLCBkZXN0aW5hdGlvbiA9IF9hLmRlc3RpbmF0aW9uO1xuICAgICAgICB3aGlsZSAoY29udGV4dHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGNvbnRleHRfMiA9IGNvbnRleHRzLnNoaWZ0KCk7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KGNvbnRleHRfMi5idWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBCdWZmZXJUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNvbnRleHRzID0gbnVsbDtcbiAgICB9O1xuICAgIEJ1ZmZlclRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5vbkJ1ZmZlckZ1bGwgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICB0aGlzLmNsb3NlQ29udGV4dChjb250ZXh0KTtcbiAgICAgICAgdmFyIGNsb3NlQWN0aW9uID0gY29udGV4dC5jbG9zZUFjdGlvbjtcbiAgICAgICAgY2xvc2VBY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5yZW1vdmUoY2xvc2VBY3Rpb24pO1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkICYmIHRoaXMudGltZXNwYW5Pbmx5KSB7XG4gICAgICAgICAgICBjb250ZXh0ID0gdGhpcy5vcGVuQ29udGV4dCgpO1xuICAgICAgICAgICAgdmFyIGJ1ZmZlclRpbWVTcGFuID0gdGhpcy5idWZmZXJUaW1lU3BhbjtcbiAgICAgICAgICAgIHZhciB0aW1lU3Bhbk9ubHlTdGF0ZSA9IHsgc3Vic2NyaWJlcjogdGhpcywgY29udGV4dDogY29udGV4dCwgYnVmZmVyVGltZVNwYW46IGJ1ZmZlclRpbWVTcGFuIH07XG4gICAgICAgICAgICB0aGlzLmFkZChjb250ZXh0LmNsb3NlQWN0aW9uID0gdGhpcy5zY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hCdWZmZXJUaW1lU3Bhbk9ubHksIGJ1ZmZlclRpbWVTcGFuLCB0aW1lU3Bhbk9ubHlTdGF0ZSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUub3BlbkNvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQoKTtcbiAgICAgICAgdGhpcy5jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9O1xuICAgIEJ1ZmZlclRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5jbG9zZUNvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoY29udGV4dC5idWZmZXIpO1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICB2YXIgc3BsaWNlSW5kZXggPSBjb250ZXh0cyA/IGNvbnRleHRzLmluZGV4T2YoY29udGV4dCkgOiAtMTtcbiAgICAgICAgaWYgKHNwbGljZUluZGV4ID49IDApIHtcbiAgICAgICAgICAgIGNvbnRleHRzLnNwbGljZShjb250ZXh0cy5pbmRleE9mKGNvbnRleHQpLCAxKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlclRpbWVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuZnVuY3Rpb24gZGlzcGF0Y2hCdWZmZXJUaW1lU3Bhbk9ubHkoc3RhdGUpIHtcbiAgICB2YXIgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXI7XG4gICAgdmFyIHByZXZDb250ZXh0ID0gc3RhdGUuY29udGV4dDtcbiAgICBpZiAocHJldkNvbnRleHQpIHtcbiAgICAgICAgc3Vic2NyaWJlci5jbG9zZUNvbnRleHQocHJldkNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgIHN0YXRlLmNvbnRleHQgPSBzdWJzY3JpYmVyLm9wZW5Db250ZXh0KCk7XG4gICAgICAgIHN0YXRlLmNvbnRleHQuY2xvc2VBY3Rpb24gPSB0aGlzLnNjaGVkdWxlKHN0YXRlLCBzdGF0ZS5idWZmZXJUaW1lU3Bhbik7XG4gICAgfVxufVxuZnVuY3Rpb24gZGlzcGF0Y2hCdWZmZXJDcmVhdGlvbihzdGF0ZSkge1xuICAgIHZhciBidWZmZXJDcmVhdGlvbkludGVydmFsID0gc3RhdGUuYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgYnVmZmVyVGltZVNwYW4gPSBzdGF0ZS5idWZmZXJUaW1lU3Bhbiwgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIHNjaGVkdWxlciA9IHN0YXRlLnNjaGVkdWxlcjtcbiAgICB2YXIgY29udGV4dCA9IHN1YnNjcmliZXIub3BlbkNvbnRleHQoKTtcbiAgICB2YXIgYWN0aW9uID0gdGhpcztcbiAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgIHN1YnNjcmliZXIuYWRkKGNvbnRleHQuY2xvc2VBY3Rpb24gPSBzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hCdWZmZXJDbG9zZSwgYnVmZmVyVGltZVNwYW4sIHsgc3Vic2NyaWJlcjogc3Vic2NyaWJlciwgY29udGV4dDogY29udGV4dCB9KSk7XG4gICAgICAgIGFjdGlvbi5zY2hlZHVsZShzdGF0ZSwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGlzcGF0Y2hCdWZmZXJDbG9zZShhcmcpIHtcbiAgICB2YXIgc3Vic2NyaWJlciA9IGFyZy5zdWJzY3JpYmVyLCBjb250ZXh0ID0gYXJnLmNvbnRleHQ7XG4gICAgc3Vic2NyaWJlci5jbG9zZUNvbnRleHQoY29udGV4dCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJUaW1lLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpcHRpb25cIik7XG52YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0XCIpO1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL091dGVyU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGJ1ZmZlclRvZ2dsZShvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGJ1ZmZlclRvZ2dsZU9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgQnVmZmVyVG9nZ2xlT3BlcmF0b3Iob3BlbmluZ3MsIGNsb3NpbmdTZWxlY3RvcikpO1xuICAgIH07XG59XG5leHBvcnRzLmJ1ZmZlclRvZ2dsZSA9IGJ1ZmZlclRvZ2dsZTtcbnZhciBCdWZmZXJUb2dnbGVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyVG9nZ2xlT3BlcmF0b3Iob3BlbmluZ3MsIGNsb3NpbmdTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLm9wZW5pbmdzID0gb3BlbmluZ3M7XG4gICAgICAgIHRoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuICAgIH1cbiAgICBCdWZmZXJUb2dnbGVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5vcGVuaW5ncywgdGhpcy5jbG9zaW5nU2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJUb2dnbGVPcGVyYXRvcjtcbn0oKSk7XG52YXIgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyVG9nZ2xlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb3BlbmluZ3MsIGNsb3NpbmdTZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuICAgICAgICBfdGhpcy5jb250ZXh0cyA9IFtdO1xuICAgICAgICBfdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdChfdGhpcywgb3BlbmluZ3MpKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICB2YXIgbGVuID0gY29udGV4dHMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb250ZXh0c1tpXS5idWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgd2hpbGUgKGNvbnRleHRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0XzEgPSBjb250ZXh0cy5zaGlmdCgpO1xuICAgICAgICAgICAgY29udGV4dF8xLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgY29udGV4dF8xLmJ1ZmZlciA9IG51bGw7XG4gICAgICAgICAgICBjb250ZXh0XzEuc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRleHRzID0gbnVsbDtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fZXJyb3IuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH07XG4gICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICB3aGlsZSAoY29udGV4dHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGNvbnRleHRfMiA9IGNvbnRleHRzLnNoaWZ0KCk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoY29udGV4dF8yLmJ1ZmZlcik7XG4gICAgICAgICAgICBjb250ZXh0XzIuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBjb250ZXh0XzIuYnVmZmVyID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnRleHRfMi5zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29udGV4dHMgPSBudWxsO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlKSB7XG4gICAgICAgIG91dGVyVmFsdWUgPyB0aGlzLmNsb3NlQnVmZmVyKG91dGVyVmFsdWUpIDogdGhpcy5vcGVuQnVmZmVyKGlubmVyVmFsdWUpO1xuICAgIH07XG4gICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5jbG9zZUJ1ZmZlcihpbm5lclN1Yi5jb250ZXh0KTtcbiAgICB9O1xuICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLm9wZW5CdWZmZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBjbG9zaW5nU2VsZWN0b3IgPSB0aGlzLmNsb3NpbmdTZWxlY3RvcjtcbiAgICAgICAgICAgIHZhciBjbG9zaW5nTm90aWZpZXIgPSBjbG9zaW5nU2VsZWN0b3IuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoY2xvc2luZ05vdGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cnlTdWJzY3JpYmUoY2xvc2luZ05vdGlmaWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5jbG9zZUJ1ZmZlciA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIGlmIChjb250ZXh0cyAmJiBjb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gY29udGV4dC5idWZmZXIsIHN1YnNjcmlwdGlvbiA9IGNvbnRleHQuc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICBjb250ZXh0cy5zcGxpY2UoY29udGV4dHMuaW5kZXhPZihjb250ZXh0KSwgMSk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChjbG9zaW5nTm90aWZpZXIpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgdmFyIGJ1ZmZlciA9IFtdO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbigpO1xuICAgICAgICB2YXIgY29udGV4dCA9IHsgYnVmZmVyOiBidWZmZXIsIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uIH07XG4gICAgICAgIGNvbnRleHRzLnB1c2goY29udGV4dCk7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgY2xvc2luZ05vdGlmaWVyLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKCFpbm5lclN1YnNjcmlwdGlvbiB8fCBpbm5lclN1YnNjcmlwdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VCdWZmZXIoY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbm5lclN1YnNjcmlwdGlvbi5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgICAgIHRoaXMuYWRkKGlubmVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5hZGQoaW5uZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyVG9nZ2xlU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJUb2dnbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmlwdGlvblwiKTtcbnZhciBpbm5lclN1YnNjcmliZV8xID0gcmVxdWlyZShcIi4uL2lubmVyU3Vic2NyaWJlXCIpO1xuZnVuY3Rpb24gYnVmZmVyV2hlbihjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IEJ1ZmZlcldoZW5PcGVyYXRvcihjbG9zaW5nU2VsZWN0b3IpKTtcbiAgICB9O1xufVxuZXhwb3J0cy5idWZmZXJXaGVuID0gYnVmZmVyV2hlbjtcbnZhciBCdWZmZXJXaGVuT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJ1ZmZlcldoZW5PcGVyYXRvcihjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5jbG9zaW5nU2VsZWN0b3IgPSBjbG9zaW5nU2VsZWN0b3I7XG4gICAgfVxuICAgIEJ1ZmZlcldoZW5PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEJ1ZmZlcldoZW5TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuY2xvc2luZ1NlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyV2hlbk9wZXJhdG9yO1xufSgpKTtcbnZhciBCdWZmZXJXaGVuU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJ1ZmZlcldoZW5TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJ1ZmZlcldoZW5TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNsb3NpbmdTZWxlY3RvciA9IGNsb3NpbmdTZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuc3Vic2NyaWJpbmcgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMub3BlbkJ1ZmZlcigpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEJ1ZmZlcldoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICB9O1xuICAgIEJ1ZmZlcldoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIEJ1ZmZlcldoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnN1YnNjcmliaW5nID0gZmFsc2U7XG4gICAgfTtcbiAgICBCdWZmZXJXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vcGVuQnVmZmVyKCk7XG4gICAgfTtcbiAgICBCdWZmZXJXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmliaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5CdWZmZXIoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyV2hlblN1YnNjcmliZXIucHJvdG90eXBlLm9wZW5CdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjbG9zaW5nU3Vic2NyaXB0aW9uID0gdGhpcy5jbG9zaW5nU3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAoY2xvc2luZ1N1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoY2xvc2luZ1N1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBjbG9zaW5nU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBpZiAodGhpcy5idWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgICAgIHZhciBjbG9zaW5nTm90aWZpZXI7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY2xvc2luZ1NlbGVjdG9yID0gdGhpcy5jbG9zaW5nU2VsZWN0b3I7XG4gICAgICAgICAgICBjbG9zaW5nTm90aWZpZXIgPSBjbG9zaW5nU2VsZWN0b3IoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGNsb3NpbmdTdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHRoaXMuY2xvc2luZ1N1YnNjcmlwdGlvbiA9IGNsb3NpbmdTdWJzY3JpcHRpb247XG4gICAgICAgIHRoaXMuYWRkKGNsb3NpbmdTdWJzY3JpcHRpb24pO1xuICAgICAgICB0aGlzLnN1YnNjcmliaW5nID0gdHJ1ZTtcbiAgICAgICAgY2xvc2luZ1N1YnNjcmlwdGlvbi5hZGQoaW5uZXJTdWJzY3JpYmVfMS5pbm5lclN1YnNjcmliZShjbG9zaW5nTm90aWZpZXIsIG5ldyBpbm5lclN1YnNjcmliZV8xLlNpbXBsZUlubmVyU3Vic2NyaWJlcih0aGlzKSkpO1xuICAgICAgICB0aGlzLnN1YnNjcmliaW5nID0gZmFsc2U7XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyV2hlblN1YnNjcmliZXI7XG59KGlubmVyU3Vic2NyaWJlXzEuU2ltcGxlT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJXaGVuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBpbm5lclN1YnNjcmliZV8xID0gcmVxdWlyZShcIi4uL2lubmVyU3Vic2NyaWJlXCIpO1xuZnVuY3Rpb24gY2F0Y2hFcnJvcihzZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBjYXRjaEVycm9yT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgdmFyIG9wZXJhdG9yID0gbmV3IENhdGNoT3BlcmF0b3Ioc2VsZWN0b3IpO1xuICAgICAgICB2YXIgY2F1Z2h0ID0gc291cmNlLmxpZnQob3BlcmF0b3IpO1xuICAgICAgICByZXR1cm4gKG9wZXJhdG9yLmNhdWdodCA9IGNhdWdodCk7XG4gICAgfTtcbn1cbmV4cG9ydHMuY2F0Y2hFcnJvciA9IGNhdGNoRXJyb3I7XG52YXIgQ2F0Y2hPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2F0Y2hPcGVyYXRvcihzZWxlY3Rvcikge1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgfVxuICAgIENhdGNoT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBDYXRjaFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5zZWxlY3RvciwgdGhpcy5jYXVnaHQpKTtcbiAgICB9O1xuICAgIHJldHVybiBDYXRjaE9wZXJhdG9yO1xufSgpKTtcbnZhciBDYXRjaFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDYXRjaFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2F0Y2hTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBzZWxlY3RvciwgY2F1Z2h0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5jYXVnaHQgPSBjYXVnaHQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ2F0Y2hTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZvaWQgMDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5zZWxlY3RvcihlcnIsIHRoaXMuY2F1Z2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIyKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5lcnJvci5jYWxsKHRoaXMsIGVycjIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlQW5kUmVjeWNsZSgpO1xuICAgICAgICAgICAgdmFyIGlubmVyU3Vic2NyaWJlciA9IG5ldyBpbm5lclN1YnNjcmliZV8xLlNpbXBsZUlubmVyU3Vic2NyaWJlcih0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuYWRkKGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSBpbm5lclN1YnNjcmliZV8xLmlubmVyU3Vic2NyaWJlKHJlc3VsdCwgaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIGlmIChpbm5lclN1YnNjcmlwdGlvbiAhPT0gaW5uZXJTdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQoaW5uZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ2F0Y2hTdWJzY3JpYmVyO1xufShpbm5lclN1YnNjcmliZV8xLlNpbXBsZU91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2F0Y2hFcnJvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb21iaW5lTGF0ZXN0XzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9jb21iaW5lTGF0ZXN0XCIpO1xuZnVuY3Rpb24gY29tYmluZUFsbChwcm9qZWN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBjb21iaW5lTGF0ZXN0XzEuQ29tYmluZUxhdGVzdE9wZXJhdG9yKHByb2plY3QpKTsgfTtcbn1cbmV4cG9ydHMuY29tYmluZUFsbCA9IGNvbWJpbmVBbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21iaW5lQWxsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGlzQXJyYXlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzQXJyYXlcIik7XG52YXIgY29tYmluZUxhdGVzdF8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvY29tYmluZUxhdGVzdFwiKTtcbnZhciBmcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9mcm9tXCIpO1xudmFyIG5vbmUgPSB7fTtcbmZ1bmN0aW9uIGNvbWJpbmVMYXRlc3QoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHByb2plY3QgPSBudWxsO1xuICAgIGlmICh0eXBlb2Ygb2JzZXJ2YWJsZXNbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJvamVjdCA9IG9ic2VydmFibGVzLnBvcCgpO1xuICAgIH1cbiAgICBpZiAob2JzZXJ2YWJsZXMubGVuZ3RoID09PSAxICYmIGlzQXJyYXlfMS5pc0FycmF5KG9ic2VydmFibGVzWzBdKSkge1xuICAgICAgICBvYnNlcnZhYmxlcyA9IG9ic2VydmFibGVzWzBdLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdC5jYWxsKGZyb21fMS5mcm9tKFtzb3VyY2VdLmNvbmNhdChvYnNlcnZhYmxlcykpLCBuZXcgY29tYmluZUxhdGVzdF8xLkNvbWJpbmVMYXRlc3RPcGVyYXRvcihwcm9qZWN0KSk7IH07XG59XG5leHBvcnRzLmNvbWJpbmVMYXRlc3QgPSBjb21iaW5lTGF0ZXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tYmluZUxhdGVzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb25jYXRfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2NvbmNhdFwiKTtcbmZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICB2YXIgb2JzZXJ2YWJsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYnNlcnZhYmxlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQuY2FsbChjb25jYXRfMS5jb25jYXQuYXBwbHkodm9pZCAwLCBbc291cmNlXS5jb25jYXQob2JzZXJ2YWJsZXMpKSk7IH07XG59XG5leHBvcnRzLmNvbmNhdCA9IGNvbmNhdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBtZXJnZU1hcF8xID0gcmVxdWlyZShcIi4vbWVyZ2VNYXBcIik7XG5mdW5jdGlvbiBjb25jYXRNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbWVyZ2VNYXBfMS5tZXJnZU1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgMSk7XG59XG5leHBvcnRzLmNvbmNhdE1hcCA9IGNvbmNhdE1hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdE1hcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb25jYXRNYXBfMSA9IHJlcXVpcmUoXCIuL2NvbmNhdE1hcFwiKTtcbmZ1bmN0aW9uIGNvbmNhdE1hcFRvKGlubmVyT2JzZXJ2YWJsZSwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICByZXR1cm4gY29uY2F0TWFwXzEuY29uY2F0TWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlubmVyT2JzZXJ2YWJsZTsgfSwgcmVzdWx0U2VsZWN0b3IpO1xufVxuZXhwb3J0cy5jb25jYXRNYXBUbyA9IGNvbmNhdE1hcFRvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0TWFwVG8uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gY291bnQocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBDb3VudE9wZXJhdG9yKHByZWRpY2F0ZSwgc291cmNlKSk7IH07XG59XG5leHBvcnRzLmNvdW50ID0gY291bnQ7XG52YXIgQ291bnRPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ291bnRPcGVyYXRvcihwcmVkaWNhdGUsIHNvdXJjZSkge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIENvdW50T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBDb3VudFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcmVkaWNhdGUsIHRoaXMuc291cmNlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ291bnRPcGVyYXRvcjtcbn0oKSk7XG52YXIgQ291bnRTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ291bnRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvdW50U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJlZGljYXRlLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBfdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnByZWRpY2F0ZSkge1xuICAgICAgICAgICAgdGhpcy5fdHJ5UHJlZGljYXRlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY291bnQrKztcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5UHJlZGljYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByZWRpY2F0ZSh2YWx1ZSwgdGhpcy5pbmRleCsrLCB0aGlzLnNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMuY291bnQrKztcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLmNvdW50KTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIENvdW50U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvdW50LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBpbm5lclN1YnNjcmliZV8xID0gcmVxdWlyZShcIi4uL2lubmVyU3Vic2NyaWJlXCIpO1xuZnVuY3Rpb24gZGVib3VuY2UoZHVyYXRpb25TZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRGVib3VuY2VPcGVyYXRvcihkdXJhdGlvblNlbGVjdG9yKSk7IH07XG59XG5leHBvcnRzLmRlYm91bmNlID0gZGVib3VuY2U7XG52YXIgRGVib3VuY2VPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVib3VuY2VPcGVyYXRvcihkdXJhdGlvblNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG4gICAgfVxuICAgIERlYm91bmNlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBEZWJvdW5jZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kdXJhdGlvblNlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVib3VuY2VPcGVyYXRvcjtcbn0oKSk7XG52YXIgRGVib3VuY2VTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGVib3VuY2VTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERlYm91bmNlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRGVib3VuY2VTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuZHVyYXRpb25TZWxlY3Rvci5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cnlOZXh0KHZhbHVlLCByZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGVib3VuY2VTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZW1pdFZhbHVlKCk7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIERlYm91bmNlU3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeU5leHQgPSBmdW5jdGlvbiAodmFsdWUsIGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLmR1cmF0aW9uU3Vic2NyaXB0aW9uO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaXB0aW9uID0gaW5uZXJTdWJzY3JpYmVfMS5pbm5lclN1YnNjcmliZShkdXJhdGlvbiwgbmV3IGlubmVyU3Vic2NyaWJlXzEuU2ltcGxlSW5uZXJTdWJzY3JpYmVyKHRoaXMpKTtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbiAmJiAhc3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5hZGQodGhpcy5kdXJhdGlvblN1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlYm91bmNlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbWl0VmFsdWUoKTtcbiAgICB9O1xuICAgIERlYm91bmNlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZW1pdFZhbHVlKCk7XG4gICAgfTtcbiAgICBEZWJvdW5jZVN1YnNjcmliZXIucHJvdG90eXBlLmVtaXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5kdXJhdGlvblN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmR1cmF0aW9uU3Vic2NyaXB0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fbmV4dC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERlYm91bmNlU3Vic2NyaWJlcjtcbn0oaW5uZXJTdWJzY3JpYmVfMS5TaW1wbGVPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYm91bmNlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbnZhciBhc3luY18xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci9hc3luY1wiKTtcbmZ1bmN0aW9uIGRlYm91bmNlVGltZShkdWVUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRGVib3VuY2VUaW1lT3BlcmF0b3IoZHVlVGltZSwgc2NoZWR1bGVyKSk7IH07XG59XG5leHBvcnRzLmRlYm91bmNlVGltZSA9IGRlYm91bmNlVGltZTtcbnZhciBEZWJvdW5jZVRpbWVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVib3VuY2VUaW1lT3BlcmF0b3IoZHVlVGltZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHRoaXMuZHVlVGltZSA9IGR1ZVRpbWU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIH1cbiAgICBEZWJvdW5jZVRpbWVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IERlYm91bmNlVGltZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kdWVUaW1lLCB0aGlzLnNjaGVkdWxlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIERlYm91bmNlVGltZU9wZXJhdG9yO1xufSgpKTtcbnZhciBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGVib3VuY2VUaW1lU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBkdWVUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmR1ZVRpbWUgPSBkdWVUaW1lO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLmRlYm91bmNlZFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIF90aGlzLmxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgIF90aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRGVib3VuY2VUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5jbGVhckRlYm91bmNlKCk7XG4gICAgICAgIHRoaXMubGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICB0aGlzLmFkZCh0aGlzLmRlYm91bmNlZFN1YnNjcmlwdGlvbiA9IHRoaXMuc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTmV4dCwgdGhpcy5kdWVUaW1lLCB0aGlzKSk7XG4gICAgfTtcbiAgICBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGVib3VuY2VkTmV4dCgpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5kZWJvdW5jZWROZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNsZWFyRGVib3VuY2UoKTtcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBsYXN0VmFsdWUgPSB0aGlzLmxhc3RWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMubGFzdFZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChsYXN0VmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5jbGVhckRlYm91bmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGVib3VuY2VkU3Vic2NyaXB0aW9uID0gdGhpcy5kZWJvdW5jZWRTdWJzY3JpcHRpb247XG4gICAgICAgIGlmIChkZWJvdW5jZWRTdWJzY3JpcHRpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKGRlYm91bmNlZFN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBkZWJvdW5jZWRTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMuZGVib3VuY2VkU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERlYm91bmNlVGltZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5mdW5jdGlvbiBkaXNwYXRjaE5leHQoc3Vic2NyaWJlcikge1xuICAgIHN1YnNjcmliZXIuZGVib3VuY2VkTmV4dCgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVib3VuY2VUaW1lLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGRlZmF1bHRJZkVtcHR5KGRlZmF1bHRWYWx1ZSkge1xuICAgIGlmIChkZWZhdWx0VmFsdWUgPT09IHZvaWQgMCkgeyBkZWZhdWx0VmFsdWUgPSBudWxsOyB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBEZWZhdWx0SWZFbXB0eU9wZXJhdG9yKGRlZmF1bHRWYWx1ZSkpOyB9O1xufVxuZXhwb3J0cy5kZWZhdWx0SWZFbXB0eSA9IGRlZmF1bHRJZkVtcHR5O1xudmFyIERlZmF1bHRJZkVtcHR5T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlZmF1bHRJZkVtcHR5T3BlcmF0b3IoZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgICBEZWZhdWx0SWZFbXB0eU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRGVmYXVsdElmRW1wdHlTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZGVmYXVsdFZhbHVlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVmYXVsdElmRW1wdHlPcGVyYXRvcjtcbn0oKSk7XG52YXIgRGVmYXVsdElmRW1wdHlTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGVmYXVsdElmRW1wdHlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERlZmF1bHRJZkVtcHR5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIF90aGlzLmlzRW1wdHkgPSB0cnVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERlZmF1bHRJZkVtcHR5U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5pc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBEZWZhdWx0SWZFbXB0eVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMuZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVmYXVsdElmRW1wdHlTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdElmRW1wdHkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTigrdmFsdWUpO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0RhdGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2FzeW5jXCIpO1xudmFyIGlzRGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNEYXRlXCIpO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xudmFyIE5vdGlmaWNhdGlvbl8xID0gcmVxdWlyZShcIi4uL05vdGlmaWNhdGlvblwiKTtcbmZ1bmN0aW9uIGRlbGF5KGRlbGF5LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuICAgIHZhciBhYnNvbHV0ZURlbGF5ID0gaXNEYXRlXzEuaXNEYXRlKGRlbGF5KTtcbiAgICB2YXIgZGVsYXlGb3IgPSBhYnNvbHV0ZURlbGF5ID8gKCtkZWxheSAtIHNjaGVkdWxlci5ub3coKSkgOiBNYXRoLmFicyhkZWxheSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBEZWxheU9wZXJhdG9yKGRlbGF5Rm9yLCBzY2hlZHVsZXIpKTsgfTtcbn1cbmV4cG9ydHMuZGVsYXkgPSBkZWxheTtcbnZhciBEZWxheU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWxheU9wZXJhdG9yKGRlbGF5LCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgRGVsYXlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IERlbGF5U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmRlbGF5LCB0aGlzLnNjaGVkdWxlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIERlbGF5T3BlcmF0b3I7XG59KCkpO1xudmFyIERlbGF5U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERlbGF5U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEZWxheVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGRlbGF5LCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMucXVldWUgPSBbXTtcbiAgICAgICAgX3RoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmVycm9yZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEZWxheVN1YnNjcmliZXIuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHN0YXRlLnNvdXJjZTtcbiAgICAgICAgdmFyIHF1ZXVlID0gc291cmNlLnF1ZXVlO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gc3RhdGUuc2NoZWR1bGVyO1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSBzdGF0ZS5kZXN0aW5hdGlvbjtcbiAgICAgICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDAgJiYgKHF1ZXVlWzBdLnRpbWUgLSBzY2hlZHVsZXIubm93KCkpIDw9IDApIHtcbiAgICAgICAgICAgIHF1ZXVlLnNoaWZ0KCkubm90aWZpY2F0aW9uLm9ic2VydmUoZGVzdGluYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgZGVsYXlfMSA9IE1hdGgubWF4KDAsIHF1ZXVlWzBdLnRpbWUgLSBzY2hlZHVsZXIubm93KCkpO1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZShzdGF0ZSwgZGVsYXlfMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBzb3VyY2UuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuX3NjaGVkdWxlID0gZnVuY3Rpb24gKHNjaGVkdWxlcikge1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoRGVsYXlTdWJzY3JpYmVyLmRpc3BhdGNoLCB0aGlzLmRlbGF5LCB7XG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMsIGRlc3RpbmF0aW9uOiB0aGlzLmRlc3RpbmF0aW9uLCBzY2hlZHVsZXI6IHNjaGVkdWxlclxuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBEZWxheVN1YnNjcmliZXIucHJvdG90eXBlLnNjaGVkdWxlTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xuICAgICAgICBpZiAodGhpcy5lcnJvcmVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICB2YXIgbWVzc2FnZSA9IG5ldyBEZWxheU1lc3NhZ2Uoc2NoZWR1bGVyLm5vdygpICsgdGhpcy5kZWxheSwgbm90aWZpY2F0aW9uKTtcbiAgICAgICAgdGhpcy5xdWV1ZS5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aGlzLl9zY2hlZHVsZShzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZWxheVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVOb3RpZmljYXRpb24oTm90aWZpY2F0aW9uXzEuTm90aWZpY2F0aW9uLmNyZWF0ZU5leHQodmFsdWUpKTtcbiAgICB9O1xuICAgIERlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLmVycm9yZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVOb3RpZmljYXRpb24oTm90aWZpY2F0aW9uXzEuTm90aWZpY2F0aW9uLmNyZWF0ZUNvbXBsZXRlKCkpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVsYXlTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xudmFyIERlbGF5TWVzc2FnZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVsYXlNZXNzYWdlKHRpbWUsIG5vdGlmaWNhdGlvbikge1xuICAgICAgICB0aGlzLnRpbWUgPSB0aW1lO1xuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbiA9IG5vdGlmaWNhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIERlbGF5TWVzc2FnZTtcbn0oKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWxheS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmliZXJcIik7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vT3V0ZXJTdWJzY3JpYmVyXCIpO1xudmFyIHN1YnNjcmliZVRvUmVzdWx0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdFwiKTtcbmZ1bmN0aW9uIGRlbGF5V2hlbihkZWxheUR1cmF0aW9uU2VsZWN0b3IsIHN1YnNjcmlwdGlvbkRlbGF5KSB7XG4gICAgaWYgKHN1YnNjcmlwdGlvbkRlbGF5KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbkRlbGF5T2JzZXJ2YWJsZShzb3VyY2UsIHN1YnNjcmlwdGlvbkRlbGF5KVxuICAgICAgICAgICAgICAgIC5saWZ0KG5ldyBEZWxheVdoZW5PcGVyYXRvcihkZWxheUR1cmF0aW9uU2VsZWN0b3IpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBEZWxheVdoZW5PcGVyYXRvcihkZWxheUR1cmF0aW9uU2VsZWN0b3IpKTsgfTtcbn1cbmV4cG9ydHMuZGVsYXlXaGVuID0gZGVsYXlXaGVuO1xudmFyIERlbGF5V2hlbk9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWxheVdoZW5PcGVyYXRvcihkZWxheUR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5kZWxheUR1cmF0aW9uU2VsZWN0b3IgPSBkZWxheUR1cmF0aW9uU2VsZWN0b3I7XG4gICAgfVxuICAgIERlbGF5V2hlbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRGVsYXlXaGVuU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmRlbGF5RHVyYXRpb25TZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIERlbGF5V2hlbk9wZXJhdG9yO1xufSgpKTtcbnZhciBEZWxheVdoZW5TdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGVsYXlXaGVuU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEZWxheVdoZW5TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBkZWxheUR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlbGF5RHVyYXRpb25TZWxlY3RvciA9IGRlbGF5RHVyYXRpb25TZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuY29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmRlbGF5Tm90aWZpZXJTdWJzY3JpcHRpb25zID0gW107XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEZWxheVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIF9pbm5lclZhbHVlLCBfb3V0ZXJJbmRleCwgX2lubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChvdXRlclZhbHVlKTtcbiAgICAgICAgdGhpcy5yZW1vdmVTdWJzY3JpcHRpb24oaW5uZXJTdWIpO1xuICAgICAgICB0aGlzLnRyeUNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBEZWxheVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnJvciwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5fZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5yZW1vdmVTdWJzY3JpcHRpb24oaW5uZXJTdWIpO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cnlDb21wbGV0ZSgpO1xuICAgIH07XG4gICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGRlbGF5Tm90aWZpZXIgPSB0aGlzLmRlbGF5RHVyYXRpb25TZWxlY3Rvcih2YWx1ZSwgaW5kZXgpO1xuICAgICAgICAgICAgaWYgKGRlbGF5Tm90aWZpZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyeURlbGF5KGRlbGF5Tm90aWZpZXIsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnRyeUNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLnJlbW92ZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25JZHggPSB0aGlzLmRlbGF5Tm90aWZpZXJTdWJzY3JpcHRpb25zLmluZGV4T2Yoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbklkeCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsYXlOb3RpZmllclN1YnNjcmlwdGlvbnMuc3BsaWNlKHN1YnNjcmlwdGlvbklkeCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi5vdXRlclZhbHVlO1xuICAgIH07XG4gICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5RGVsYXkgPSBmdW5jdGlvbiAoZGVsYXlOb3RpZmllciwgdmFsdWUpIHtcbiAgICAgICAgdmFyIG5vdGlmaWVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBkZWxheU5vdGlmaWVyLCB2YWx1ZSk7XG4gICAgICAgIGlmIChub3RpZmllclN1YnNjcmlwdGlvbiAmJiAhbm90aWZpZXJTdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKG5vdGlmaWVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuZGVsYXlOb3RpZmllclN1YnNjcmlwdGlvbnMucHVzaChub3RpZmllclN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLnRyeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jb21wbGV0ZWQgJiYgdGhpcy5kZWxheU5vdGlmaWVyU3Vic2NyaXB0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERlbGF5V2hlblN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xudmFyIFN1YnNjcmlwdGlvbkRlbGF5T2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YnNjcmlwdGlvbkRlbGF5T2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb25EZWxheU9ic2VydmFibGUoc291cmNlLCBzdWJzY3JpcHRpb25EZWxheSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIF90aGlzLnN1YnNjcmlwdGlvbkRlbGF5ID0gc3Vic2NyaXB0aW9uRGVsYXk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uRGVsYXlPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25EZWxheS5zdWJzY3JpYmUobmV3IFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbkRlbGF5T2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbnZhciBTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyKHBhcmVudCwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBfdGhpcy5zb3VyY2VTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh1bnVzZWQpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVUb1NvdXJjZSgpO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5wYXJlbnQuZXJyb3IoZXJyKTtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG9Tb3VyY2UoKTtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuc3Vic2NyaWJlVG9Tb3VyY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5zb3VyY2VTdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZVN1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5zb3VyY2Uuc3Vic2NyaWJlKHRoaXMucGFyZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5V2hlbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBkZW1hdGVyaWFsaXplKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBkZW1hdGVyaWFsaXplT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBEZU1hdGVyaWFsaXplT3BlcmF0b3IoKSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuZGVtYXRlcmlhbGl6ZSA9IGRlbWF0ZXJpYWxpemU7XG52YXIgRGVNYXRlcmlhbGl6ZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZU1hdGVyaWFsaXplT3BlcmF0b3IoKSB7XG4gICAgfVxuICAgIERlTWF0ZXJpYWxpemVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IERlTWF0ZXJpYWxpemVTdWJzY3JpYmVyKHN1YnNjcmliZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBEZU1hdGVyaWFsaXplT3BlcmF0b3I7XG59KCkpO1xudmFyIERlTWF0ZXJpYWxpemVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGVNYXRlcmlhbGl6ZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGVNYXRlcmlhbGl6ZVN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgIH1cbiAgICBEZU1hdGVyaWFsaXplU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFsdWUub2JzZXJ2ZSh0aGlzLmRlc3RpbmF0aW9uKTtcbiAgICB9O1xuICAgIHJldHVybiBEZU1hdGVyaWFsaXplU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbWF0ZXJpYWxpemUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGlubmVyU3Vic2NyaWJlXzEgPSByZXF1aXJlKFwiLi4vaW5uZXJTdWJzY3JpYmVcIik7XG5mdW5jdGlvbiBkaXN0aW5jdChrZXlTZWxlY3RvciwgZmx1c2hlcykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRGlzdGluY3RPcGVyYXRvcihrZXlTZWxlY3RvciwgZmx1c2hlcykpOyB9O1xufVxuZXhwb3J0cy5kaXN0aW5jdCA9IGRpc3RpbmN0O1xudmFyIERpc3RpbmN0T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERpc3RpbmN0T3BlcmF0b3Ioa2V5U2VsZWN0b3IsIGZsdXNoZXMpIHtcbiAgICAgICAgdGhpcy5rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgICAgICB0aGlzLmZsdXNoZXMgPSBmbHVzaGVzO1xuICAgIH1cbiAgICBEaXN0aW5jdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRGlzdGluY3RTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMua2V5U2VsZWN0b3IsIHRoaXMuZmx1c2hlcykpO1xuICAgIH07XG4gICAgcmV0dXJuIERpc3RpbmN0T3BlcmF0b3I7XG59KCkpO1xudmFyIERpc3RpbmN0U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERpc3RpbmN0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEaXN0aW5jdFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGtleVNlbGVjdG9yLCBmbHVzaGVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgICAgICBfdGhpcy52YWx1ZXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIGlmIChmbHVzaGVzKSB7XG4gICAgICAgICAgICBfdGhpcy5hZGQoaW5uZXJTdWJzY3JpYmVfMS5pbm5lclN1YnNjcmliZShmbHVzaGVzLCBuZXcgaW5uZXJTdWJzY3JpYmVfMS5TaW1wbGVJbm5lclN1YnNjcmliZXIoX3RoaXMpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEaXN0aW5jdFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudmFsdWVzLmNsZWFyKCk7XG4gICAgfTtcbiAgICBEaXN0aW5jdFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHRoaXMuX2Vycm9yKGVycm9yKTtcbiAgICB9O1xuICAgIERpc3RpbmN0U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMua2V5U2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHRoaXMuX3VzZUtleVNlbGVjdG9yKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpbmFsaXplTmV4dCh2YWx1ZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEaXN0aW5jdFN1YnNjcmliZXIucHJvdG90eXBlLl91c2VLZXlTZWxlY3RvciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAga2V5ID0gdGhpcy5rZXlTZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9maW5hbGl6ZU5leHQoa2V5LCB2YWx1ZSk7XG4gICAgfTtcbiAgICBEaXN0aW5jdFN1YnNjcmliZXIucHJvdG90eXBlLl9maW5hbGl6ZU5leHQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG4gICAgICAgIGlmICghdmFsdWVzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICB2YWx1ZXMuYWRkKGtleSk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRGlzdGluY3RTdWJzY3JpYmVyO1xufShpbm5lclN1YnNjcmliZV8xLlNpbXBsZU91dGVyU3Vic2NyaWJlcikpO1xuZXhwb3J0cy5EaXN0aW5jdFN1YnNjcmliZXIgPSBEaXN0aW5jdFN1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0aW5jdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBkaXN0aW5jdFVudGlsQ2hhbmdlZChjb21wYXJlLCBrZXlTZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRGlzdGluY3RVbnRpbENoYW5nZWRPcGVyYXRvcihjb21wYXJlLCBrZXlTZWxlY3RvcikpOyB9O1xufVxuZXhwb3J0cy5kaXN0aW5jdFVudGlsQ2hhbmdlZCA9IGRpc3RpbmN0VW50aWxDaGFuZ2VkO1xudmFyIERpc3RpbmN0VW50aWxDaGFuZ2VkT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERpc3RpbmN0VW50aWxDaGFuZ2VkT3BlcmF0b3IoY29tcGFyZSwga2V5U2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5jb21wYXJlID0gY29tcGFyZTtcbiAgICAgICAgdGhpcy5rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgIH1cbiAgICBEaXN0aW5jdFVudGlsQ2hhbmdlZE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuY29tcGFyZSwgdGhpcy5rZXlTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIERpc3RpbmN0VW50aWxDaGFuZ2VkT3BlcmF0b3I7XG59KCkpO1xudmFyIERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEaXN0aW5jdFVudGlsQ2hhbmdlZFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGNvbXBhcmUsIGtleVNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5oYXNLZXkgPSBmYWxzZTtcbiAgICAgICAgaWYgKHR5cGVvZiBjb21wYXJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBfdGhpcy5jb21wYXJlID0gY29tcGFyZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgIHJldHVybiB4ID09PSB5O1xuICAgIH07XG4gICAgRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGtleVNlbGVjdG9yID0gdGhpcy5rZXlTZWxlY3RvcjtcbiAgICAgICAgICAgIGtleSA9IGtleVNlbGVjdG9yID8ga2V5U2VsZWN0b3IodmFsdWUpIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmhhc0tleSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgY29tcGFyZSA9IHRoaXMuY29tcGFyZTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBjb21wYXJlKHRoaXMua2V5LCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhhc0tleSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3RpbmN0VW50aWxDaGFuZ2VkLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGRpc3RpbmN0VW50aWxDaGFuZ2VkXzEgPSByZXF1aXJlKFwiLi9kaXN0aW5jdFVudGlsQ2hhbmdlZFwiKTtcbmZ1bmN0aW9uIGRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkKGtleSwgY29tcGFyZSkge1xuICAgIHJldHVybiBkaXN0aW5jdFVudGlsQ2hhbmdlZF8xLmRpc3RpbmN0VW50aWxDaGFuZ2VkKGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiBjb21wYXJlID8gY29tcGFyZSh4W2tleV0sIHlba2V5XSkgOiB4W2tleV0gPT09IHlba2V5XTsgfSk7XG59XG5leHBvcnRzLmRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkID0gZGlzdGluY3RVbnRpbEtleUNoYW5nZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0aW5jdFVudGlsS2V5Q2hhbmdlZC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRW1wdHlFcnJvcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvRW1wdHlFcnJvclwiKTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHRocm93SWZFbXB0eShlcnJvckZhY3RvcnkpIHtcbiAgICBpZiAoZXJyb3JGYWN0b3J5ID09PSB2b2lkIDApIHsgZXJyb3JGYWN0b3J5ID0gZGVmYXVsdEVycm9yRmFjdG9yeTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgVGhyb3dJZkVtcHR5T3BlcmF0b3IoZXJyb3JGYWN0b3J5KSk7XG4gICAgfTtcbn1cbmV4cG9ydHMudGhyb3dJZkVtcHR5ID0gdGhyb3dJZkVtcHR5O1xudmFyIFRocm93SWZFbXB0eU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaHJvd0lmRW1wdHlPcGVyYXRvcihlcnJvckZhY3RvcnkpIHtcbiAgICAgICAgdGhpcy5lcnJvckZhY3RvcnkgPSBlcnJvckZhY3Rvcnk7XG4gICAgfVxuICAgIFRocm93SWZFbXB0eU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgVGhyb3dJZkVtcHR5U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmVycm9yRmFjdG9yeSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFRocm93SWZFbXB0eU9wZXJhdG9yO1xufSgpKTtcbnZhciBUaHJvd0lmRW1wdHlTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGhyb3dJZkVtcHR5U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaHJvd0lmRW1wdHlTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBlcnJvckZhY3RvcnkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmVycm9yRmFjdG9yeSA9IGVycm9yRmFjdG9yeTtcbiAgICAgICAgX3RoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUaHJvd0lmRW1wdHlTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFRocm93SWZFbXB0eVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1ZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gdm9pZCAwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBlcnIgPSB0aGlzLmVycm9yRmFjdG9yeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBlcnIgPSBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRocm93SWZFbXB0eVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JGYWN0b3J5KCkge1xuICAgIHJldHVybiBuZXcgRW1wdHlFcnJvcl8xLkVtcHR5RXJyb3IoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm93SWZFbXB0eS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmliZXJcIik7XG52YXIgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMSA9IHJlcXVpcmUoXCIuLi91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXCIpO1xudmFyIGVtcHR5XzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9lbXB0eVwiKTtcbmZ1bmN0aW9uIHRha2UoY291bnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBlbXB0eV8xLmVtcHR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFRha2VPcGVyYXRvcihjb3VudCkpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmV4cG9ydHMudGFrZSA9IHRha2U7XG52YXIgVGFrZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUYWtlT3BlcmF0b3IodG90YWwpIHtcbiAgICAgICAgdGhpcy50b3RhbCA9IHRvdGFsO1xuICAgICAgICBpZiAodGhpcy50b3RhbCA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcl8xLkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIFRha2VPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFRha2VTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMudG90YWwpKTtcbiAgICB9O1xuICAgIHJldHVybiBUYWtlT3BlcmF0b3I7XG59KCkpO1xudmFyIFRha2VTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGFrZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGFrZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHRvdGFsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy50b3RhbCA9IHRvdGFsO1xuICAgICAgICBfdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGFrZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciB0b3RhbCA9IHRoaXMudG90YWw7XG4gICAgICAgIHZhciBjb3VudCA9ICsrdGhpcy5jb3VudDtcbiAgICAgICAgaWYgKGNvdW50IDw9IHRvdGFsKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgaWYgKGNvdW50ID09PSB0b3RhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBUYWtlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMSA9IHJlcXVpcmUoXCIuLi91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXCIpO1xudmFyIGZpbHRlcl8xID0gcmVxdWlyZShcIi4vZmlsdGVyXCIpO1xudmFyIHRocm93SWZFbXB0eV8xID0gcmVxdWlyZShcIi4vdGhyb3dJZkVtcHR5XCIpO1xudmFyIGRlZmF1bHRJZkVtcHR5XzEgPSByZXF1aXJlKFwiLi9kZWZhdWx0SWZFbXB0eVwiKTtcbnZhciB0YWtlXzEgPSByZXF1aXJlKFwiLi90YWtlXCIpO1xuZnVuY3Rpb24gZWxlbWVudEF0KGluZGV4LCBkZWZhdWx0VmFsdWUpIHtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcl8xLkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yKCk7XG4gICAgfVxuICAgIHZhciBoYXNEZWZhdWx0VmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID49IDI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5waXBlKGZpbHRlcl8xLmZpbHRlcihmdW5jdGlvbiAodiwgaSkgeyByZXR1cm4gaSA9PT0gaW5kZXg7IH0pLCB0YWtlXzEudGFrZSgxKSwgaGFzRGVmYXVsdFZhbHVlXG4gICAgICAgID8gZGVmYXVsdElmRW1wdHlfMS5kZWZhdWx0SWZFbXB0eShkZWZhdWx0VmFsdWUpXG4gICAgICAgIDogdGhyb3dJZkVtcHR5XzEudGhyb3dJZkVtcHR5KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcl8xLkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yKCk7IH0pKTsgfTtcbn1cbmV4cG9ydHMuZWxlbWVudEF0ID0gZWxlbWVudEF0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWxlbWVudEF0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvbmNhdF8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvY29uY2F0XCIpO1xudmFyIG9mXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9vZlwiKTtcbmZ1bmN0aW9uIGVuZFdpdGgoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJyYXlbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIGNvbmNhdF8xLmNvbmNhdChzb3VyY2UsIG9mXzEub2YuYXBwbHkodm9pZCAwLCBhcnJheSkpOyB9O1xufVxuZXhwb3J0cy5lbmRXaXRoID0gZW5kV2l0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuZFdpdGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gZXZlcnkocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBFdmVyeU9wZXJhdG9yKHByZWRpY2F0ZSwgdGhpc0FyZywgc291cmNlKSk7IH07XG59XG5leHBvcnRzLmV2ZXJ5ID0gZXZlcnk7XG52YXIgRXZlcnlPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXZlcnlPcGVyYXRvcihwcmVkaWNhdGUsIHRoaXNBcmcsIHNvdXJjZSkge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIEV2ZXJ5T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRXZlcnlTdWJzY3JpYmVyKG9ic2VydmVyLCB0aGlzLnByZWRpY2F0ZSwgdGhpcy50aGlzQXJnLCB0aGlzLnNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEV2ZXJ5T3BlcmF0b3I7XG59KCkpO1xudmFyIEV2ZXJ5U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEV2ZXJ5U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFdmVyeVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSwgdGhpc0FyZywgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIF90aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgX3RoaXMudGhpc0FyZyA9IHRoaXNBcmcgfHwgX3RoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRXZlcnlTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChldmVyeVZhbHVlTWF0Y2gpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGV2ZXJ5VmFsdWVNYXRjaCk7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIEV2ZXJ5U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUuY2FsbCh0aGlzLnRoaXNBcmcsIHZhbHVlLCB0aGlzLmluZGV4KyssIHRoaXMuc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5Q29tcGxldGUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFdmVyeVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ub3RpZnlDb21wbGV0ZSh0cnVlKTtcbiAgICB9O1xuICAgIHJldHVybiBFdmVyeVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVyeS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgaW5uZXJTdWJzY3JpYmVfMSA9IHJlcXVpcmUoXCIuLi9pbm5lclN1YnNjcmliZVwiKTtcbmZ1bmN0aW9uIGV4aGF1c3QoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTd2l0Y2hGaXJzdE9wZXJhdG9yKCkpOyB9O1xufVxuZXhwb3J0cy5leGhhdXN0ID0gZXhoYXVzdDtcbnZhciBTd2l0Y2hGaXJzdE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTd2l0Y2hGaXJzdE9wZXJhdG9yKCkge1xuICAgIH1cbiAgICBTd2l0Y2hGaXJzdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgU3dpdGNoRmlyc3RTdWJzY3JpYmVyKHN1YnNjcmliZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBTd2l0Y2hGaXJzdE9wZXJhdG9yO1xufSgpKTtcbnZhciBTd2l0Y2hGaXJzdFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTd2l0Y2hGaXJzdFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3dpdGNoRmlyc3RTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5oYXNDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGFzU3Vic2NyaXB0aW9uID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3dpdGNoRmlyc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmhhc1N1YnNjcmlwdGlvbiA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmFkZChpbm5lclN1YnNjcmliZV8xLmlubmVyU3Vic2NyaWJlKHZhbHVlLCBuZXcgaW5uZXJTdWJzY3JpYmVfMS5TaW1wbGVJbm5lclN1YnNjcmliZXIodGhpcykpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3dpdGNoRmlyc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1N1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTd2l0Y2hGaXJzdFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhhc1N1YnNjcmlwdGlvbiA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5oYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN3aXRjaEZpcnN0U3Vic2NyaWJlcjtcbn0oaW5uZXJTdWJzY3JpYmVfMS5TaW1wbGVPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4aGF1c3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIG1hcF8xID0gcmVxdWlyZShcIi4vbWFwXCIpO1xudmFyIGZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2Zyb21cIik7XG52YXIgaW5uZXJTdWJzY3JpYmVfMSA9IHJlcXVpcmUoXCIuLi9pbm5lclN1YnNjcmliZVwiKTtcbmZ1bmN0aW9uIGV4aGF1c3RNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5waXBlKGV4aGF1c3RNYXAoZnVuY3Rpb24gKGEsIGkpIHsgcmV0dXJuIGZyb21fMS5mcm9tKHByb2plY3QoYSwgaSkpLnBpcGUobWFwXzEubWFwKGZ1bmN0aW9uIChiLCBpaSkgeyByZXR1cm4gcmVzdWx0U2VsZWN0b3IoYSwgYiwgaSwgaWkpOyB9KSk7IH0pKTsgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBFeGhhdXN0TWFwT3BlcmF0b3IocHJvamVjdCkpO1xuICAgIH07XG59XG5leHBvcnRzLmV4aGF1c3RNYXAgPSBleGhhdXN0TWFwO1xudmFyIEV4aGF1c3RNYXBPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXhoYXVzdE1hcE9wZXJhdG9yKHByb2plY3QpIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICB9XG4gICAgRXhoYXVzdE1hcE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRXhoYXVzdE1hcFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcm9qZWN0KSk7XG4gICAgfTtcbiAgICByZXR1cm4gRXhoYXVzdE1hcE9wZXJhdG9yO1xufSgpKTtcbnZhciBFeGhhdXN0TWFwU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEV4aGF1c3RNYXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEV4aGF1c3RNYXBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcm9qZWN0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgX3RoaXMuaGFzU3Vic2NyaXB0aW9uID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRXhoYXVzdE1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMudHJ5TmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV4aGF1c3RNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS50cnlOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJvamVjdCh2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhc1N1YnNjcmlwdGlvbiA9IHRydWU7XG4gICAgICAgIHRoaXMuX2lubmVyU3ViKHJlc3VsdCk7XG4gICAgfTtcbiAgICBFeGhhdXN0TWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2lubmVyU3ViID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpYmVyID0gbmV3IGlubmVyU3Vic2NyaWJlXzEuU2ltcGxlSW5uZXJTdWJzY3JpYmVyKHRoaXMpO1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5hZGQoaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gaW5uZXJTdWJzY3JpYmVfMS5pbm5lclN1YnNjcmliZShyZXN1bHQsIGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgIGlmIChpbm5lclN1YnNjcmlwdGlvbiAhPT0gaW5uZXJTdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQoaW5uZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFeGhhdXN0TWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGlmICghdGhpcy5oYXNTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBFeGhhdXN0TWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChpbm5lclZhbHVlKTtcbiAgICB9O1xuICAgIEV4aGF1c3RNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgRXhoYXVzdE1hcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhhc1N1YnNjcmlwdGlvbiA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5oYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEV4aGF1c3RNYXBTdWJzY3JpYmVyO1xufShpbm5lclN1YnNjcmliZV8xLlNpbXBsZU91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhoYXVzdE1hcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgaW5uZXJTdWJzY3JpYmVfMSA9IHJlcXVpcmUoXCIuLi9pbm5lclN1YnNjcmliZVwiKTtcbmZ1bmN0aW9uIGV4cGFuZChwcm9qZWN0LCBjb25jdXJyZW50LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7IH1cbiAgICBjb25jdXJyZW50ID0gKGNvbmN1cnJlbnQgfHwgMCkgPCAxID8gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIDogY29uY3VycmVudDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IEV4cGFuZE9wZXJhdG9yKHByb2plY3QsIGNvbmN1cnJlbnQsIHNjaGVkdWxlcikpOyB9O1xufVxuZXhwb3J0cy5leHBhbmQgPSBleHBhbmQ7XG52YXIgRXhwYW5kT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV4cGFuZE9wZXJhdG9yKHByb2plY3QsIGNvbmN1cnJlbnQsIHNjaGVkdWxlcikge1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICB0aGlzLmNvbmN1cnJlbnQgPSBjb25jdXJyZW50O1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgRXhwYW5kT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBFeHBhbmRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJvamVjdCwgdGhpcy5jb25jdXJyZW50LCB0aGlzLnNjaGVkdWxlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIEV4cGFuZE9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydHMuRXhwYW5kT3BlcmF0b3IgPSBFeHBhbmRPcGVyYXRvcjtcbnZhciBFeHBhbmRTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRXhwYW5kU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFeHBhbmRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcm9qZWN0LCBjb25jdXJyZW50LCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICBfdGhpcy5jb25jdXJyZW50ID0gY29uY3VycmVudDtcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIF90aGlzLmFjdGl2ZSA9IDA7XG4gICAgICAgIF90aGlzLmhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoY29uY3VycmVudCA8IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSkge1xuICAgICAgICAgICAgX3RoaXMuYnVmZmVyID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBFeHBhbmRTdWJzY3JpYmVyLmRpc3BhdGNoID0gZnVuY3Rpb24gKGFyZykge1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IGFyZy5zdWJzY3JpYmVyLCByZXN1bHQgPSBhcmcucmVzdWx0LCB2YWx1ZSA9IGFyZy52YWx1ZSwgaW5kZXggPSBhcmcuaW5kZXg7XG4gICAgICAgIHN1YnNjcmliZXIuc3Vic2NyaWJlVG9Qcm9qZWN0aW9uKHJlc3VsdCwgdmFsdWUsIGluZGV4KTtcbiAgICB9O1xuICAgIEV4cGFuZFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUgPCB0aGlzLmNvbmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvamVjdCA9IHRoaXMucHJvamVjdDtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gcHJvamVjdCh2YWx1ZSwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zY2hlZHVsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVUb1Byb2plY3Rpb24ocmVzdWx0LCB2YWx1ZSwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0geyBzdWJzY3JpYmVyOiB0aGlzLCByZXN1bHQ6IHJlc3VsdCwgdmFsdWU6IHZhbHVlLCBpbmRleDogaW5kZXggfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uXzEgPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8xLmFkZCh0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShFeHBhbmRTdWJzY3JpYmVyLmRpc3BhdGNoLCAwLCBzdGF0ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXhwYW5kU3Vic2NyaWJlci5wcm90b3R5cGUuc3Vic2NyaWJlVG9Qcm9qZWN0aW9uID0gZnVuY3Rpb24gKHJlc3VsdCwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHRoaXMuYWN0aXZlKys7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZChpbm5lclN1YnNjcmliZV8xLmlubmVyU3Vic2NyaWJlKHJlc3VsdCwgbmV3IGlubmVyU3Vic2NyaWJlXzEuU2ltcGxlSW5uZXJTdWJzY3JpYmVyKHRoaXMpKSk7XG4gICAgfTtcbiAgICBFeHBhbmRTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuaGFzQ29tcGxldGVkICYmIHRoaXMuYWN0aXZlID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgRXhwYW5kU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7XG4gICAgICAgIHRoaXMuX25leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICBFeHBhbmRTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICB0aGlzLmFjdGl2ZS0tO1xuICAgICAgICBpZiAoYnVmZmVyICYmIGJ1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KGJ1ZmZlci5zaGlmdCgpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNDb21wbGV0ZWQgJiYgdGhpcy5hY3RpdmUgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEV4cGFuZFN1YnNjcmliZXI7XG59KGlubmVyU3Vic2NyaWJlXzEuU2ltcGxlT3V0ZXJTdWJzY3JpYmVyKSk7XG5leHBvcnRzLkV4cGFuZFN1YnNjcmliZXIgPSBFeHBhbmRTdWJzY3JpYmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwYW5kLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpcHRpb25cIik7XG5mdW5jdGlvbiBmaW5hbGl6ZShjYWxsYmFjaykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRmluYWxseU9wZXJhdG9yKGNhbGxiYWNrKSk7IH07XG59XG5leHBvcnRzLmZpbmFsaXplID0gZmluYWxpemU7XG52YXIgRmluYWxseU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGaW5hbGx5T3BlcmF0b3IoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cbiAgICBGaW5hbGx5T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBGaW5hbGx5U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmNhbGxiYWNrKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRmluYWxseU9wZXJhdG9yO1xufSgpKTtcbnZhciBGaW5hbGx5U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZpbmFsbHlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZpbmFsbHlTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWRkKG5ldyBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24oY2FsbGJhY2spKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gRmluYWxseVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maW5hbGl6ZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByZWRpY2F0ZSBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IEZpbmRWYWx1ZU9wZXJhdG9yKHByZWRpY2F0ZSwgc291cmNlLCBmYWxzZSwgdGhpc0FyZykpOyB9O1xufVxuZXhwb3J0cy5maW5kID0gZmluZDtcbnZhciBGaW5kVmFsdWVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmluZFZhbHVlT3BlcmF0b3IocHJlZGljYXRlLCBzb3VyY2UsIHlpZWxkSW5kZXgsIHRoaXNBcmcpIHtcbiAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLnlpZWxkSW5kZXggPSB5aWVsZEluZGV4O1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgIH1cbiAgICBGaW5kVmFsdWVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBGaW5kVmFsdWVTdWJzY3JpYmVyKG9ic2VydmVyLCB0aGlzLnByZWRpY2F0ZSwgdGhpcy5zb3VyY2UsIHRoaXMueWllbGRJbmRleCwgdGhpcy50aGlzQXJnKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRmluZFZhbHVlT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0cy5GaW5kVmFsdWVPcGVyYXRvciA9IEZpbmRWYWx1ZU9wZXJhdG9yO1xudmFyIEZpbmRWYWx1ZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGaW5kVmFsdWVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZpbmRWYWx1ZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSwgc291cmNlLCB5aWVsZEluZGV4LCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgX3RoaXMueWllbGRJbmRleCA9IHlpZWxkSW5kZXg7XG4gICAgICAgIF90aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRmluZFZhbHVlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIEZpbmRWYWx1ZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHByZWRpY2F0ZSA9IF9hLnByZWRpY2F0ZSwgdGhpc0FyZyA9IF9hLnRoaXNBcmc7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBwcmVkaWNhdGUuY2FsbCh0aGlzQXJnIHx8IHRoaXMsIHZhbHVlLCBpbmRleCwgdGhpcy5zb3VyY2UpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5Q29tcGxldGUodGhpcy55aWVsZEluZGV4ID8gaW5kZXggOiB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBGaW5kVmFsdWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubm90aWZ5Q29tcGxldGUodGhpcy55aWVsZEluZGV4ID8gLTEgOiB1bmRlZmluZWQpO1xuICAgIH07XG4gICAgcmV0dXJuIEZpbmRWYWx1ZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5leHBvcnRzLkZpbmRWYWx1ZVN1YnNjcmliZXIgPSBGaW5kVmFsdWVTdWJzY3JpYmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmluZC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBmaW5kXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL2ZpbmRcIik7XG5mdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBmaW5kXzEuRmluZFZhbHVlT3BlcmF0b3IocHJlZGljYXRlLCBzb3VyY2UsIHRydWUsIHRoaXNBcmcpKTsgfTtcbn1cbmV4cG9ydHMuZmluZEluZGV4ID0gZmluZEluZGV4O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmluZEluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEVtcHR5RXJyb3JfMSA9IHJlcXVpcmUoXCIuLi91dGlsL0VtcHR5RXJyb3JcIik7XG52YXIgZmlsdGVyXzEgPSByZXF1aXJlKFwiLi9maWx0ZXJcIik7XG52YXIgdGFrZV8xID0gcmVxdWlyZShcIi4vdGFrZVwiKTtcbnZhciBkZWZhdWx0SWZFbXB0eV8xID0gcmVxdWlyZShcIi4vZGVmYXVsdElmRW1wdHlcIik7XG52YXIgdGhyb3dJZkVtcHR5XzEgPSByZXF1aXJlKFwiLi90aHJvd0lmRW1wdHlcIik7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xuZnVuY3Rpb24gZmlyc3QocHJlZGljYXRlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICB2YXIgaGFzRGVmYXVsdFZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+PSAyO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UucGlwZShwcmVkaWNhdGUgPyBmaWx0ZXJfMS5maWx0ZXIoZnVuY3Rpb24gKHYsIGkpIHsgcmV0dXJuIHByZWRpY2F0ZSh2LCBpLCBzb3VyY2UpOyB9KSA6IGlkZW50aXR5XzEuaWRlbnRpdHksIHRha2VfMS50YWtlKDEpLCBoYXNEZWZhdWx0VmFsdWUgPyBkZWZhdWx0SWZFbXB0eV8xLmRlZmF1bHRJZkVtcHR5KGRlZmF1bHRWYWx1ZSkgOiB0aHJvd0lmRW1wdHlfMS50aHJvd0lmRW1wdHkoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEVtcHR5RXJyb3JfMS5FbXB0eUVycm9yKCk7IH0pKTsgfTtcbn1cbmV4cG9ydHMuZmlyc3QgPSBmaXJzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpcnN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGlnbm9yZUVsZW1lbnRzKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpZ25vcmVFbGVtZW50c09wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgSWdub3JlRWxlbWVudHNPcGVyYXRvcigpKTtcbiAgICB9O1xufVxuZXhwb3J0cy5pZ25vcmVFbGVtZW50cyA9IGlnbm9yZUVsZW1lbnRzO1xudmFyIElnbm9yZUVsZW1lbnRzT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIElnbm9yZUVsZW1lbnRzT3BlcmF0b3IoKSB7XG4gICAgfVxuICAgIElnbm9yZUVsZW1lbnRzT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBJZ25vcmVFbGVtZW50c1N1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIElnbm9yZUVsZW1lbnRzT3BlcmF0b3I7XG59KCkpO1xudmFyIElnbm9yZUVsZW1lbnRzU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKElnbm9yZUVsZW1lbnRzU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJZ25vcmVFbGVtZW50c1N1YnNjcmliZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgSWdub3JlRWxlbWVudHNTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh1bnVzZWQpIHtcbiAgICB9O1xuICAgIHJldHVybiBJZ25vcmVFbGVtZW50c1N1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZ25vcmVFbGVtZW50cy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgSXNFbXB0eU9wZXJhdG9yKCkpOyB9O1xufVxuZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcbnZhciBJc0VtcHR5T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIElzRW1wdHlPcGVyYXRvcigpIHtcbiAgICB9XG4gICAgSXNFbXB0eU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IElzRW1wdHlTdWJzY3JpYmVyKG9ic2VydmVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gSXNFbXB0eU9wZXJhdG9yO1xufSgpKTtcbnZhciBJc0VtcHR5U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKElzRW1wdHlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIElzRW1wdHlTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICB9XG4gICAgSXNFbXB0eVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlzRW1wdHkpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dChpc0VtcHR5KTtcbiAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIElzRW1wdHlTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLm5vdGlmeUNvbXBsZXRlKGZhbHNlKTtcbiAgICB9O1xuICAgIElzRW1wdHlTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubm90aWZ5Q29tcGxldGUodHJ1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gSXNFbXB0eVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0VtcHR5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbnZhciBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JcIik7XG52YXIgZW1wdHlfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2VtcHR5XCIpO1xuZnVuY3Rpb24gdGFrZUxhc3QoY291bnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gdGFrZUxhc3RPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBlbXB0eV8xLmVtcHR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFRha2VMYXN0T3BlcmF0b3IoY291bnQpKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLnRha2VMYXN0ID0gdGFrZUxhc3Q7XG52YXIgVGFrZUxhc3RPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFrZUxhc3RPcGVyYXRvcih0b3RhbCkge1xuICAgICAgICB0aGlzLnRvdGFsID0gdG90YWw7XG4gICAgICAgIGlmICh0aGlzLnRvdGFsIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXzEuQXJndW1lbnRPdXRPZlJhbmdlRXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVGFrZUxhc3RPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFRha2VMYXN0U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnRvdGFsKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZUxhc3RPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGFrZUxhc3RTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGFrZUxhc3RTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRha2VMYXN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgdG90YWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnRvdGFsID0gdG90YWw7XG4gICAgICAgIF90aGlzLnJpbmcgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRha2VMYXN0U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJpbmcgPSB0aGlzLnJpbmc7XG4gICAgICAgIHZhciB0b3RhbCA9IHRoaXMudG90YWw7XG4gICAgICAgIHZhciBjb3VudCA9IHRoaXMuY291bnQrKztcbiAgICAgICAgaWYgKHJpbmcubGVuZ3RoIDwgdG90YWwpIHtcbiAgICAgICAgICAgIHJpbmcucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBjb3VudCAlIHRvdGFsO1xuICAgICAgICAgICAgcmluZ1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGFrZUxhc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIHZhciBjb3VudCA9IHRoaXMuY291bnQ7XG4gICAgICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgICAgICAgIHZhciB0b3RhbCA9IHRoaXMuY291bnQgPj0gdGhpcy50b3RhbCA/IHRoaXMudG90YWwgOiB0aGlzLmNvdW50O1xuICAgICAgICAgICAgdmFyIHJpbmcgPSB0aGlzLnJpbmc7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaWR4ID0gKGNvdW50KyspICUgdG90YWw7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChyaW5nW2lkeF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZUxhc3RTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFrZUxhc3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRW1wdHlFcnJvcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvRW1wdHlFcnJvclwiKTtcbnZhciBmaWx0ZXJfMSA9IHJlcXVpcmUoXCIuL2ZpbHRlclwiKTtcbnZhciB0YWtlTGFzdF8xID0gcmVxdWlyZShcIi4vdGFrZUxhc3RcIik7XG52YXIgdGhyb3dJZkVtcHR5XzEgPSByZXF1aXJlKFwiLi90aHJvd0lmRW1wdHlcIik7XG52YXIgZGVmYXVsdElmRW1wdHlfMSA9IHJlcXVpcmUoXCIuL2RlZmF1bHRJZkVtcHR5XCIpO1xudmFyIGlkZW50aXR5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pZGVudGl0eVwiKTtcbmZ1bmN0aW9uIGxhc3QocHJlZGljYXRlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICB2YXIgaGFzRGVmYXVsdFZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+PSAyO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UucGlwZShwcmVkaWNhdGUgPyBmaWx0ZXJfMS5maWx0ZXIoZnVuY3Rpb24gKHYsIGkpIHsgcmV0dXJuIHByZWRpY2F0ZSh2LCBpLCBzb3VyY2UpOyB9KSA6IGlkZW50aXR5XzEuaWRlbnRpdHksIHRha2VMYXN0XzEudGFrZUxhc3QoMSksIGhhc0RlZmF1bHRWYWx1ZSA/IGRlZmF1bHRJZkVtcHR5XzEuZGVmYXVsdElmRW1wdHkoZGVmYXVsdFZhbHVlKSA6IHRocm93SWZFbXB0eV8xLnRocm93SWZFbXB0eShmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRW1wdHlFcnJvcl8xLkVtcHR5RXJyb3IoKTsgfSkpOyB9O1xufVxuZXhwb3J0cy5sYXN0ID0gbGFzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhc3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gbWFwVG8odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IE1hcFRvT3BlcmF0b3IodmFsdWUpKTsgfTtcbn1cbmV4cG9ydHMubWFwVG8gPSBtYXBUbztcbnZhciBNYXBUb09wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXBUb09wZXJhdG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgTWFwVG9PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IE1hcFRvU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnZhbHVlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gTWFwVG9PcGVyYXRvcjtcbn0oKSk7XG52YXIgTWFwVG9TdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWFwVG9TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1hcFRvU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgdmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTWFwVG9TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLnZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBNYXBUb1N1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBUby5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmliZXJcIik7XG52YXIgTm90aWZpY2F0aW9uXzEgPSByZXF1aXJlKFwiLi4vTm90aWZpY2F0aW9uXCIpO1xuZnVuY3Rpb24gbWF0ZXJpYWxpemUoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1hdGVyaWFsaXplT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBNYXRlcmlhbGl6ZU9wZXJhdG9yKCkpO1xuICAgIH07XG59XG5leHBvcnRzLm1hdGVyaWFsaXplID0gbWF0ZXJpYWxpemU7XG52YXIgTWF0ZXJpYWxpemVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWF0ZXJpYWxpemVPcGVyYXRvcigpIHtcbiAgICB9XG4gICAgTWF0ZXJpYWxpemVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IE1hdGVyaWFsaXplU3Vic2NyaWJlcihzdWJzY3JpYmVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gTWF0ZXJpYWxpemVPcGVyYXRvcjtcbn0oKSk7XG52YXIgTWF0ZXJpYWxpemVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWF0ZXJpYWxpemVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1hdGVyaWFsaXplU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgfVxuICAgIE1hdGVyaWFsaXplU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KE5vdGlmaWNhdGlvbl8xLk5vdGlmaWNhdGlvbi5jcmVhdGVOZXh0KHZhbHVlKSk7XG4gICAgfTtcbiAgICBNYXRlcmlhbGl6ZVN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dChOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb24uY3JlYXRlRXJyb3IoZXJyKSk7XG4gICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBNYXRlcmlhbGl6ZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dChOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb24uY3JlYXRlQ29tcGxldGUoKSk7XG4gICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gTWF0ZXJpYWxpemVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF0ZXJpYWxpemUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gc2NhbihhY2N1bXVsYXRvciwgc2VlZCkge1xuICAgIHZhciBoYXNTZWVkID0gZmFsc2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMikge1xuICAgICAgICBoYXNTZWVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNjYW5PcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFNjYW5PcGVyYXRvcihhY2N1bXVsYXRvciwgc2VlZCwgaGFzU2VlZCkpO1xuICAgIH07XG59XG5leHBvcnRzLnNjYW4gPSBzY2FuO1xudmFyIFNjYW5PcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2Nhbk9wZXJhdG9yKGFjY3VtdWxhdG9yLCBzZWVkLCBoYXNTZWVkKSB7XG4gICAgICAgIGlmIChoYXNTZWVkID09PSB2b2lkIDApIHsgaGFzU2VlZCA9IGZhbHNlOyB9XG4gICAgICAgIHRoaXMuYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcjtcbiAgICAgICAgdGhpcy5zZWVkID0gc2VlZDtcbiAgICAgICAgdGhpcy5oYXNTZWVkID0gaGFzU2VlZDtcbiAgICB9XG4gICAgU2Nhbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgU2NhblN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5hY2N1bXVsYXRvciwgdGhpcy5zZWVkLCB0aGlzLmhhc1NlZWQpKTtcbiAgICB9O1xuICAgIHJldHVybiBTY2FuT3BlcmF0b3I7XG59KCkpO1xudmFyIFNjYW5TdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2NhblN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2NhblN1YnNjcmliZXIoZGVzdGluYXRpb24sIGFjY3VtdWxhdG9yLCBfc2VlZCwgaGFzU2VlZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcjtcbiAgICAgICAgX3RoaXMuX3NlZWQgPSBfc2VlZDtcbiAgICAgICAgX3RoaXMuaGFzU2VlZCA9IGhhc1NlZWQ7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2NhblN1YnNjcmliZXIucHJvdG90eXBlLCBcInNlZWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWVkO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5oYXNTZWVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3NlZWQgPSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU2NhblN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNTZWVkKSB7XG4gICAgICAgICAgICB0aGlzLnNlZWQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJ5TmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjYW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5TmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmFjY3VtdWxhdG9yKHRoaXMuc2VlZCwgdmFsdWUsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWVkID0gcmVzdWx0O1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcbiAgICB9O1xuICAgIHJldHVybiBTY2FuU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjYW4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgc2Nhbl8xID0gcmVxdWlyZShcIi4vc2NhblwiKTtcbnZhciB0YWtlTGFzdF8xID0gcmVxdWlyZShcIi4vdGFrZUxhc3RcIik7XG52YXIgZGVmYXVsdElmRW1wdHlfMSA9IHJlcXVpcmUoXCIuL2RlZmF1bHRJZkVtcHR5XCIpO1xudmFyIHBpcGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3BpcGVcIik7XG5mdW5jdGlvbiByZWR1Y2UoYWNjdW11bGF0b3IsIHNlZWQpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiByZWR1Y2VPcGVyYXRvckZ1bmN0aW9uV2l0aFNlZWQoc291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gcGlwZV8xLnBpcGUoc2Nhbl8xLnNjYW4oYWNjdW11bGF0b3IsIHNlZWQpLCB0YWtlTGFzdF8xLnRha2VMYXN0KDEpLCBkZWZhdWx0SWZFbXB0eV8xLmRlZmF1bHRJZkVtcHR5KHNlZWQpKShzb3VyY2UpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcmVkdWNlT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHBpcGVfMS5waXBlKHNjYW5fMS5zY2FuKGZ1bmN0aW9uIChhY2MsIHZhbHVlLCBpbmRleCkgeyByZXR1cm4gYWNjdW11bGF0b3IoYWNjLCB2YWx1ZSwgaW5kZXggKyAxKTsgfSksIHRha2VMYXN0XzEudGFrZUxhc3QoMSkpKHNvdXJjZSk7XG4gICAgfTtcbn1cbmV4cG9ydHMucmVkdWNlID0gcmVkdWNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkdWNlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHJlZHVjZV8xID0gcmVxdWlyZShcIi4vcmVkdWNlXCIpO1xuZnVuY3Rpb24gbWF4KGNvbXBhcmVyKSB7XG4gICAgdmFyIG1heCA9ICh0eXBlb2YgY29tcGFyZXIgPT09ICdmdW5jdGlvbicpXG4gICAgICAgID8gZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuIGNvbXBhcmVyKHgsIHkpID4gMCA/IHggOiB5OyB9XG4gICAgICAgIDogZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuIHggPiB5ID8geCA6IHk7IH07XG4gICAgcmV0dXJuIHJlZHVjZV8xLnJlZHVjZShtYXgpO1xufVxuZXhwb3J0cy5tYXggPSBtYXg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbWVyZ2VfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL21lcmdlXCIpO1xuZnVuY3Rpb24gbWVyZ2UoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0LmNhbGwobWVyZ2VfMS5tZXJnZS5hcHBseSh2b2lkIDAsIFtzb3VyY2VdLmNvbmNhdChvYnNlcnZhYmxlcykpKTsgfTtcbn1cbmV4cG9ydHMubWVyZ2UgPSBtZXJnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIG1lcmdlTWFwXzEgPSByZXF1aXJlKFwiLi9tZXJnZU1hcFwiKTtcbmZ1bmN0aW9uIG1lcmdlTWFwVG8oaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlTWFwXzEubWVyZ2VNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5uZXJPYnNlcnZhYmxlOyB9LCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlTWFwXzEubWVyZ2VNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5uZXJPYnNlcnZhYmxlOyB9LCBjb25jdXJyZW50KTtcbn1cbmV4cG9ydHMubWVyZ2VNYXBUbyA9IG1lcmdlTWFwVG87XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcFRvLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBpbm5lclN1YnNjcmliZV8xID0gcmVxdWlyZShcIi4uL2lubmVyU3Vic2NyaWJlXCIpO1xuZnVuY3Rpb24gbWVyZ2VTY2FuKGFjY3VtdWxhdG9yLCBzZWVkLCBjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBNZXJnZVNjYW5PcGVyYXRvcihhY2N1bXVsYXRvciwgc2VlZCwgY29uY3VycmVudCkpOyB9O1xufVxuZXhwb3J0cy5tZXJnZVNjYW4gPSBtZXJnZVNjYW47XG52YXIgTWVyZ2VTY2FuT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1lcmdlU2Nhbk9wZXJhdG9yKGFjY3VtdWxhdG9yLCBzZWVkLCBjb25jdXJyZW50KSB7XG4gICAgICAgIHRoaXMuYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcjtcbiAgICAgICAgdGhpcy5zZWVkID0gc2VlZDtcbiAgICAgICAgdGhpcy5jb25jdXJyZW50ID0gY29uY3VycmVudDtcbiAgICB9XG4gICAgTWVyZ2VTY2FuT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBNZXJnZVNjYW5TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuYWNjdW11bGF0b3IsIHRoaXMuc2VlZCwgdGhpcy5jb25jdXJyZW50KSk7XG4gICAgfTtcbiAgICByZXR1cm4gTWVyZ2VTY2FuT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0cy5NZXJnZVNjYW5PcGVyYXRvciA9IE1lcmdlU2Nhbk9wZXJhdG9yO1xudmFyIE1lcmdlU2NhblN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNZXJnZVNjYW5TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1lcmdlU2NhblN1YnNjcmliZXIoZGVzdGluYXRpb24sIGFjY3VtdWxhdG9yLCBhY2MsIGNvbmN1cnJlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmFjY3VtdWxhdG9yID0gYWNjdW11bGF0b3I7XG4gICAgICAgIF90aGlzLmFjYyA9IGFjYztcbiAgICAgICAgX3RoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG4gICAgICAgIF90aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgX3RoaXMuYWN0aXZlID0gMDtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1lcmdlU2NhblN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA8IHRoaXMuY29uY3VycmVudCkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgICAgIHZhciBpc2ggPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBhY2N1bXVsYXRvciA9IHRoaXMuYWNjdW11bGF0b3I7XG4gICAgICAgICAgICAgICAgaXNoID0gYWNjdW11bGF0b3IodGhpcy5hY2MsIHZhbHVlLCBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZXN0aW5hdGlvbi5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWN0aXZlKys7XG4gICAgICAgICAgICB0aGlzLl9pbm5lclN1Yihpc2gpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lcmdlU2NhblN1YnNjcmliZXIucHJvdG90eXBlLl9pbm5lclN1YiA9IGZ1bmN0aW9uIChpc2gpIHtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaWJlciA9IG5ldyBpbm5lclN1YnNjcmliZV8xLlNpbXBsZUlubmVyU3Vic2NyaWJlcih0aGlzKTtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24uYWRkKGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IGlubmVyU3Vic2NyaWJlXzEuaW5uZXJTdWJzY3JpYmUoaXNoLCBpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoaW5uZXJTdWJzY3JpcHRpb24gIT09IGlubmVyU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKGlubmVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWVyZ2VTY2FuU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA9PT0gMCAmJiB0aGlzLmJ1ZmZlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLmFjYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgTWVyZ2VTY2FuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIHRoaXMuYWNjID0gaW5uZXJWYWx1ZTtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICBNZXJnZVNjYW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICB0aGlzLmFjdGl2ZS0tO1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQoYnVmZmVyLnNoaWZ0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYWN0aXZlID09PSAwICYmIHRoaXMuaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodGhpcy5hY2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gTWVyZ2VTY2FuU3Vic2NyaWJlcjtcbn0oaW5uZXJTdWJzY3JpYmVfMS5TaW1wbGVPdXRlclN1YnNjcmliZXIpKTtcbmV4cG9ydHMuTWVyZ2VTY2FuU3Vic2NyaWJlciA9IE1lcmdlU2NhblN1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZVNjYW4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcmVkdWNlXzEgPSByZXF1aXJlKFwiLi9yZWR1Y2VcIik7XG5mdW5jdGlvbiBtaW4oY29tcGFyZXIpIHtcbiAgICB2YXIgbWluID0gKHR5cGVvZiBjb21wYXJlciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgPyBmdW5jdGlvbiAoeCwgeSkgeyByZXR1cm4gY29tcGFyZXIoeCwgeSkgPCAwID8geCA6IHk7IH1cbiAgICAgICAgOiBmdW5jdGlvbiAoeCwgeSkgeyByZXR1cm4geCA8IHkgPyB4IDogeTsgfTtcbiAgICByZXR1cm4gcmVkdWNlXzEucmVkdWNlKG1pbik7XG59XG5leHBvcnRzLm1pbiA9IG1pbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDb25uZWN0YWJsZU9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZVwiKTtcbmZ1bmN0aW9uIG11bHRpY2FzdChzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeSwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbXVsdGljYXN0T3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgdmFyIHN1YmplY3RGYWN0b3J5O1xuICAgICAgICBpZiAodHlwZW9mIHN1YmplY3RPclN1YmplY3RGYWN0b3J5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdWJqZWN0RmFjdG9yeSA9IHN1YmplY3RPclN1YmplY3RGYWN0b3J5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3ViamVjdEZhY3RvcnkgPSBmdW5jdGlvbiBzdWJqZWN0RmFjdG9yeSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ViamVjdE9yU3ViamVjdEZhY3Rvcnk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgTXVsdGljYXN0T3BlcmF0b3Ioc3ViamVjdEZhY3RvcnksIHNlbGVjdG9yKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbm5lY3RhYmxlID0gT2JqZWN0LmNyZWF0ZShzb3VyY2UsIENvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xLmNvbm5lY3RhYmxlT2JzZXJ2YWJsZURlc2NyaXB0b3IpO1xuICAgICAgICBjb25uZWN0YWJsZS5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIGNvbm5lY3RhYmxlLnN1YmplY3RGYWN0b3J5ID0gc3ViamVjdEZhY3Rvcnk7XG4gICAgICAgIHJldHVybiBjb25uZWN0YWJsZTtcbiAgICB9O1xufVxuZXhwb3J0cy5tdWx0aWNhc3QgPSBtdWx0aWNhc3Q7XG52YXIgTXVsdGljYXN0T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE11bHRpY2FzdE9wZXJhdG9yKHN1YmplY3RGYWN0b3J5LCBzZWxlY3Rvcikge1xuICAgICAgICB0aGlzLnN1YmplY3RGYWN0b3J5ID0gc3ViamVjdEZhY3Rvcnk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICB9XG4gICAgTXVsdGljYXN0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gdGhpcy5zdWJqZWN0RmFjdG9yeSgpO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gc2VsZWN0b3Ioc3ViamVjdCkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICBzdWJzY3JpcHRpb24uYWRkKHNvdXJjZS5zdWJzY3JpYmUoc3ViamVjdCkpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIE11bHRpY2FzdE9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydHMuTXVsdGljYXN0T3BlcmF0b3IgPSBNdWx0aWNhc3RPcGVyYXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11bHRpY2FzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvZnJvbVwiKTtcbnZhciBpc0FycmF5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0FycmF5XCIpO1xudmFyIGlubmVyU3Vic2NyaWJlXzEgPSByZXF1aXJlKFwiLi4vaW5uZXJTdWJzY3JpYmVcIik7XG5mdW5jdGlvbiBvbkVycm9yUmVzdW1lTmV4dCgpIHtcbiAgICB2YXIgbmV4dFNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBuZXh0U291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBpZiAobmV4dFNvdXJjZXMubGVuZ3RoID09PSAxICYmIGlzQXJyYXlfMS5pc0FycmF5KG5leHRTb3VyY2VzWzBdKSkge1xuICAgICAgICBuZXh0U291cmNlcyA9IG5leHRTb3VyY2VzWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IE9uRXJyb3JSZXN1bWVOZXh0T3BlcmF0b3IobmV4dFNvdXJjZXMpKTsgfTtcbn1cbmV4cG9ydHMub25FcnJvclJlc3VtZU5leHQgPSBvbkVycm9yUmVzdW1lTmV4dDtcbmZ1bmN0aW9uIG9uRXJyb3JSZXN1bWVOZXh0U3RhdGljKCkge1xuICAgIHZhciBuZXh0U291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG5leHRTb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzb3VyY2UgPSB1bmRlZmluZWQ7XG4gICAgaWYgKG5leHRTb3VyY2VzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5XzEuaXNBcnJheShuZXh0U291cmNlc1swXSkpIHtcbiAgICAgICAgbmV4dFNvdXJjZXMgPSBuZXh0U291cmNlc1swXTtcbiAgICB9XG4gICAgc291cmNlID0gbmV4dFNvdXJjZXMuc2hpZnQoKTtcbiAgICByZXR1cm4gZnJvbV8xLmZyb20oc291cmNlKS5saWZ0KG5ldyBPbkVycm9yUmVzdW1lTmV4dE9wZXJhdG9yKG5leHRTb3VyY2VzKSk7XG59XG5leHBvcnRzLm9uRXJyb3JSZXN1bWVOZXh0U3RhdGljID0gb25FcnJvclJlc3VtZU5leHRTdGF0aWM7XG52YXIgT25FcnJvclJlc3VtZU5leHRPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT25FcnJvclJlc3VtZU5leHRPcGVyYXRvcihuZXh0U291cmNlcykge1xuICAgICAgICB0aGlzLm5leHRTb3VyY2VzID0gbmV4dFNvdXJjZXM7XG4gICAgfVxuICAgIE9uRXJyb3JSZXN1bWVOZXh0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBPbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5uZXh0U291cmNlcykpO1xuICAgIH07XG4gICAgcmV0dXJuIE9uRXJyb3JSZXN1bWVOZXh0T3BlcmF0b3I7XG59KCkpO1xudmFyIE9uRXJyb3JSZXN1bWVOZXh0U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9uRXJyb3JSZXN1bWVOZXh0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXIoZGVzdGluYXRpb24sIG5leHRTb3VyY2VzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy5uZXh0U291cmNlcyA9IG5leHRTb3VyY2VzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9uRXJyb3JSZXN1bWVOZXh0U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG9OZXh0U291cmNlKCk7XG4gICAgfTtcbiAgICBPbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN1YnNjcmliZVRvTmV4dFNvdXJjZSgpO1xuICAgIH07XG4gICAgT25FcnJvclJlc3VtZU5leHRTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG9OZXh0U291cmNlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIE9uRXJyb3JSZXN1bWVOZXh0U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN1YnNjcmliZVRvTmV4dFNvdXJjZSgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBPbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXIucHJvdG90eXBlLnN1YnNjcmliZVRvTmV4dFNvdXJjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5leHQgPSB0aGlzLm5leHRTb3VyY2VzLnNoaWZ0KCk7XG4gICAgICAgIGlmICghIW5leHQpIHtcbiAgICAgICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBuZXcgaW5uZXJTdWJzY3JpYmVfMS5TaW1wbGVJbm5lclN1YnNjcmliZXIodGhpcyk7XG4gICAgICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSBpbm5lclN1YnNjcmliZV8xLmlubmVyU3Vic2NyaWJlKG5leHQsIGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgICAgICBpZiAoaW5uZXJTdWJzY3JpcHRpb24gIT09IGlubmVyU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChpbm5lclN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBPbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXI7XG59KGlubmVyU3Vic2NyaWJlXzEuU2ltcGxlT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbkVycm9yUmVzdW1lTmV4dC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBwYWlyd2lzZSgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFBhaXJ3aXNlT3BlcmF0b3IoKSk7IH07XG59XG5leHBvcnRzLnBhaXJ3aXNlID0gcGFpcndpc2U7XG52YXIgUGFpcndpc2VPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGFpcndpc2VPcGVyYXRvcigpIHtcbiAgICB9XG4gICAgUGFpcndpc2VPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFBhaXJ3aXNlU3Vic2NyaWJlcihzdWJzY3JpYmVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gUGFpcndpc2VPcGVyYXRvcjtcbn0oKSk7XG52YXIgUGFpcndpc2VTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUGFpcndpc2VTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBhaXJ3aXNlU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaGFzUHJldiA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFBhaXJ3aXNlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhaXI7XG4gICAgICAgIGlmICh0aGlzLmhhc1ByZXYpIHtcbiAgICAgICAgICAgIHBhaXIgPSBbdGhpcy5wcmV2LCB2YWx1ZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhhc1ByZXYgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJldiA9IHZhbHVlO1xuICAgICAgICBpZiAocGFpcikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHBhaXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUGFpcndpc2VTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFpcndpc2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbm90XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub3RcIik7XG52YXIgZmlsdGVyXzEgPSByZXF1aXJlKFwiLi9maWx0ZXJcIik7XG5mdW5jdGlvbiBwYXJ0aXRpb24ocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIFtcbiAgICAgICAgZmlsdGVyXzEuZmlsdGVyKHByZWRpY2F0ZSwgdGhpc0FyZykoc291cmNlKSxcbiAgICAgICAgZmlsdGVyXzEuZmlsdGVyKG5vdF8xLm5vdChwcmVkaWNhdGUsIHRoaXNBcmcpKShzb3VyY2UpXG4gICAgXTsgfTtcbn1cbmV4cG9ydHMucGFydGl0aW9uID0gcGFydGl0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFydGl0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIG1hcF8xID0gcmVxdWlyZShcIi4vbWFwXCIpO1xuZnVuY3Rpb24gcGx1Y2soKSB7XG4gICAgdmFyIHByb3BlcnRpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBwcm9wZXJ0aWVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBwcm9wZXJ0aWVzLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbGlzdCBvZiBwcm9wZXJ0aWVzIGNhbm5vdCBiZSBlbXB0eS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIG1hcF8xLm1hcChwbHVja2VyKHByb3BlcnRpZXMsIGxlbmd0aCkpKHNvdXJjZSk7IH07XG59XG5leHBvcnRzLnBsdWNrID0gcGx1Y2s7XG5mdW5jdGlvbiBwbHVja2VyKHByb3BzLCBsZW5ndGgpIHtcbiAgICB2YXIgbWFwcGVyID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRQcm9wID0geDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHAgPSBjdXJyZW50UHJvcCAhPSBudWxsID8gY3VycmVudFByb3BbcHJvcHNbaV1dIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHAgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQcm9wID0gcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRQcm9wO1xuICAgIH07XG4gICAgcmV0dXJuIG1hcHBlcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBsdWNrLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9TdWJqZWN0XCIpO1xudmFyIG11bHRpY2FzdF8xID0gcmVxdWlyZShcIi4vbXVsdGljYXN0XCIpO1xuZnVuY3Rpb24gcHVibGlzaChzZWxlY3Rvcikge1xuICAgIHJldHVybiBzZWxlY3RvciA/XG4gICAgICAgIG11bHRpY2FzdF8xLm11bHRpY2FzdChmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTsgfSwgc2VsZWN0b3IpIDpcbiAgICAgICAgbXVsdGljYXN0XzEubXVsdGljYXN0KG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpKTtcbn1cbmV4cG9ydHMucHVibGlzaCA9IHB1Ymxpc2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEJlaGF2aW9yU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL0JlaGF2aW9yU3ViamVjdFwiKTtcbnZhciBtdWx0aWNhc3RfMSA9IHJlcXVpcmUoXCIuL211bHRpY2FzdFwiKTtcbmZ1bmN0aW9uIHB1Ymxpc2hCZWhhdmlvcih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBtdWx0aWNhc3RfMS5tdWx0aWNhc3QobmV3IEJlaGF2aW9yU3ViamVjdF8xLkJlaGF2aW9yU3ViamVjdCh2YWx1ZSkpKHNvdXJjZSk7IH07XG59XG5leHBvcnRzLnB1Ymxpc2hCZWhhdmlvciA9IHB1Ymxpc2hCZWhhdmlvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hCZWhhdmlvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBBc3luY1N1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9Bc3luY1N1YmplY3RcIik7XG52YXIgbXVsdGljYXN0XzEgPSByZXF1aXJlKFwiLi9tdWx0aWNhc3RcIik7XG5mdW5jdGlvbiBwdWJsaXNoTGFzdCgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gbXVsdGljYXN0XzEubXVsdGljYXN0KG5ldyBBc3luY1N1YmplY3RfMS5Bc3luY1N1YmplY3QoKSkoc291cmNlKTsgfTtcbn1cbmV4cG9ydHMucHVibGlzaExhc3QgPSBwdWJsaXNoTGFzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hMYXN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFJlcGxheVN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9SZXBsYXlTdWJqZWN0XCIpO1xudmFyIG11bHRpY2FzdF8xID0gcmVxdWlyZShcIi4vbXVsdGljYXN0XCIpO1xuZnVuY3Rpb24gcHVibGlzaFJlcGxheShidWZmZXJTaXplLCB3aW5kb3dUaW1lLCBzZWxlY3Rvck9yU2NoZWR1bGVyLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2VsZWN0b3JPclNjaGVkdWxlciAmJiB0eXBlb2Ygc2VsZWN0b3JPclNjaGVkdWxlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzY2hlZHVsZXIgPSBzZWxlY3Rvck9yU2NoZWR1bGVyO1xuICAgIH1cbiAgICB2YXIgc2VsZWN0b3IgPSB0eXBlb2Ygc2VsZWN0b3JPclNjaGVkdWxlciA9PT0gJ2Z1bmN0aW9uJyA/IHNlbGVjdG9yT3JTY2hlZHVsZXIgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdF8xLlJlcGxheVN1YmplY3QoYnVmZmVyU2l6ZSwgd2luZG93VGltZSwgc2NoZWR1bGVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gbXVsdGljYXN0XzEubXVsdGljYXN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YmplY3Q7IH0sIHNlbGVjdG9yKShzb3VyY2UpOyB9O1xufVxuZXhwb3J0cy5wdWJsaXNoUmVwbGF5ID0gcHVibGlzaFJlcGxheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hSZXBsYXkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgaXNBcnJheV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNBcnJheVwiKTtcbnZhciByYWNlXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9yYWNlXCIpO1xuZnVuY3Rpb24gcmFjZSgpIHtcbiAgICB2YXIgb2JzZXJ2YWJsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYnNlcnZhYmxlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcmFjZU9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPT09IDEgJiYgaXNBcnJheV8xLmlzQXJyYXkob2JzZXJ2YWJsZXNbMF0pKSB7XG4gICAgICAgICAgICBvYnNlcnZhYmxlcyA9IG9ic2VydmFibGVzWzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdC5jYWxsKHJhY2VfMS5yYWNlLmFwcGx5KHZvaWQgMCwgW3NvdXJjZV0uY29uY2F0KG9ic2VydmFibGVzKSkpO1xuICAgIH07XG59XG5leHBvcnRzLnJhY2UgPSByYWNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmFjZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmliZXJcIik7XG52YXIgZW1wdHlfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2VtcHR5XCIpO1xuZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09PSB2b2lkIDApIHsgY291bnQgPSAtMTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGVtcHR5XzEuZW1wdHkoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb3VudCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgUmVwZWF0T3BlcmF0b3IoLTEsIHNvdXJjZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBSZXBlYXRPcGVyYXRvcihjb3VudCAtIDEsIHNvdXJjZSkpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmV4cG9ydHMucmVwZWF0ID0gcmVwZWF0O1xudmFyIFJlcGVhdE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXBlYXRPcGVyYXRvcihjb3VudCwgc291cmNlKSB7XG4gICAgICAgIHRoaXMuY291bnQgPSBjb3VudDtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIFJlcGVhdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgUmVwZWF0U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmNvdW50LCB0aGlzLnNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlcGVhdE9wZXJhdG9yO1xufSgpKTtcbnZhciBSZXBlYXRTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVwZWF0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXBlYXRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb3VudCwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb3VudCA9IGNvdW50O1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmVwZWF0U3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHNvdXJjZSA9IF9hLnNvdXJjZSwgY291bnQgPSBfYS5jb3VudDtcbiAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmNvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb3VudCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudCA9IGNvdW50IC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUodGhpcy5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlKCkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUmVwZWF0U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcGVhdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1N1YmplY3RcIik7XG52YXIgaW5uZXJTdWJzY3JpYmVfMSA9IHJlcXVpcmUoXCIuLi9pbm5lclN1YnNjcmliZVwiKTtcbmZ1bmN0aW9uIHJlcGVhdFdoZW4obm90aWZpZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFJlcGVhdFdoZW5PcGVyYXRvcihub3RpZmllcikpOyB9O1xufVxuZXhwb3J0cy5yZXBlYXRXaGVuID0gcmVwZWF0V2hlbjtcbnZhciBSZXBlYXRXaGVuT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlcGVhdFdoZW5PcGVyYXRvcihub3RpZmllcikge1xuICAgICAgICB0aGlzLm5vdGlmaWVyID0gbm90aWZpZXI7XG4gICAgfVxuICAgIFJlcGVhdFdoZW5PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFJlcGVhdFdoZW5TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMubm90aWZpZXIsIHNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlcGVhdFdoZW5PcGVyYXRvcjtcbn0oKSk7XG52YXIgUmVwZWF0V2hlblN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhSZXBlYXRXaGVuU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXBlYXRXaGVuU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgbm90aWZpZXIsIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubm90aWZpZXIgPSBub3RpZmllcjtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBfdGhpcy5zb3VyY2VJc0JlaW5nU3Vic2NyaWJlZFRvID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSZXBlYXRXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zb3VyY2VJc0JlaW5nU3Vic2NyaWJlZFRvID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zb3VyY2Uuc3Vic2NyaWJlKHRoaXMpO1xuICAgIH07XG4gICAgUmVwZWF0V2hlblN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5zb3VyY2VJc0JlaW5nU3Vic2NyaWJlZFRvID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVwZWF0V2hlblN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNvdXJjZUlzQmVpbmdTdWJzY3JpYmVkVG8gPSBmYWxzZTtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnJldHJpZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZVRvUmV0cmllcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLnJldHJpZXNTdWJzY3JpcHRpb24gfHwgdGhpcy5yZXRyaWVzU3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmNvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl91bnN1YnNjcmliZUFuZFJlY3ljbGUoKTtcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9ucy5uZXh0KHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlcGVhdFdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIG5vdGlmaWNhdGlvbnMgPSBfYS5ub3RpZmljYXRpb25zLCByZXRyaWVzU3Vic2NyaXB0aW9uID0gX2EucmV0cmllc1N1YnNjcmlwdGlvbjtcbiAgICAgICAgaWYgKG5vdGlmaWNhdGlvbnMpIHtcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbnMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0cmllc1N1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgcmV0cmllc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5yZXRyaWVzU3Vic2NyaXB0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmV0cmllcyA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFJlcGVhdFdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3Vuc3Vic2NyaWJlID0gdGhpcy5fdW5zdWJzY3JpYmU7XG4gICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gX3Vuc3Vic2NyaWJlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFJlcGVhdFdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5zdWJzY3JpYmVUb1JldHJpZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9ucyA9IG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xuICAgICAgICB2YXIgcmV0cmllcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBub3RpZmllciA9IHRoaXMubm90aWZpZXI7XG4gICAgICAgICAgICByZXRyaWVzID0gbm90aWZpZXIodGhpcy5ub3RpZmljYXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJldHJpZXMgPSByZXRyaWVzO1xuICAgICAgICB0aGlzLnJldHJpZXNTdWJzY3JpcHRpb24gPSBpbm5lclN1YnNjcmliZV8xLmlubmVyU3Vic2NyaWJlKHJldHJpZXMsIG5ldyBpbm5lclN1YnNjcmliZV8xLlNpbXBsZUlubmVyU3Vic2NyaWJlcih0aGlzKSk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVwZWF0V2hlblN1YnNjcmliZXI7XG59KGlubmVyU3Vic2NyaWJlXzEuU2ltcGxlT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXBlYXRXaGVuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHJldHJ5KGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09PSB2b2lkIDApIHsgY291bnQgPSAtMTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgUmV0cnlPcGVyYXRvcihjb3VudCwgc291cmNlKSk7IH07XG59XG5leHBvcnRzLnJldHJ5ID0gcmV0cnk7XG52YXIgUmV0cnlPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmV0cnlPcGVyYXRvcihjb3VudCwgc291cmNlKSB7XG4gICAgICAgIHRoaXMuY291bnQgPSBjb3VudDtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIFJldHJ5T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBSZXRyeVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5jb3VudCwgdGhpcy5zb3VyY2UpKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXRyeU9wZXJhdG9yO1xufSgpKTtcbnZhciBSZXRyeVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhSZXRyeVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmV0cnlTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb3VudCwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb3VudCA9IGNvdW50O1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmV0cnlTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgc291cmNlID0gX2Euc291cmNlLCBjb3VudCA9IF9hLmNvdW50O1xuICAgICAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuZXJyb3IuY2FsbCh0aGlzLCBlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY291bnQgPiAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY291bnQgPSBjb3VudCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKHRoaXMuX3Vuc3Vic2NyaWJlQW5kUmVjeWNsZSgpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFJldHJ5U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJldHJ5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vU3ViamVjdFwiKTtcbnZhciBpbm5lclN1YnNjcmliZV8xID0gcmVxdWlyZShcIi4uL2lubmVyU3Vic2NyaWJlXCIpO1xuZnVuY3Rpb24gcmV0cnlXaGVuKG5vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBSZXRyeVdoZW5PcGVyYXRvcihub3RpZmllciwgc291cmNlKSk7IH07XG59XG5leHBvcnRzLnJldHJ5V2hlbiA9IHJldHJ5V2hlbjtcbnZhciBSZXRyeVdoZW5PcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmV0cnlXaGVuT3BlcmF0b3Iobm90aWZpZXIsIHNvdXJjZSkge1xuICAgICAgICB0aGlzLm5vdGlmaWVyID0gbm90aWZpZXI7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICBSZXRyeVdoZW5PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFJldHJ5V2hlblN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5ub3RpZmllciwgdGhpcy5zb3VyY2UpKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXRyeVdoZW5PcGVyYXRvcjtcbn0oKSk7XG52YXIgUmV0cnlXaGVuU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJldHJ5V2hlblN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmV0cnlXaGVuU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgbm90aWZpZXIsIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubm90aWZpZXIgPSBub3RpZmllcjtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJldHJ5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3JzID0gdGhpcy5lcnJvcnM7XG4gICAgICAgICAgICB2YXIgcmV0cmllcyA9IHRoaXMucmV0cmllcztcbiAgICAgICAgICAgIHZhciByZXRyaWVzU3Vic2NyaXB0aW9uID0gdGhpcy5yZXRyaWVzU3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgaWYgKCFyZXRyaWVzKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vdGlmaWVyID0gdGhpcy5ub3RpZmllcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0cmllcyA9IG5vdGlmaWVyKGVycm9ycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmVycm9yLmNhbGwodGhpcywgZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHJpZXNTdWJzY3JpcHRpb24gPSBpbm5lclN1YnNjcmliZV8xLmlubmVyU3Vic2NyaWJlKHJldHJpZXMsIG5ldyBpbm5lclN1YnNjcmliZV8xLlNpbXBsZUlubmVyU3Vic2NyaWJlcih0aGlzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0aGlzLnJldHJpZXNTdWJzY3JpcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl91bnN1YnNjcmliZUFuZFJlY3ljbGUoKTtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICAgICAgdGhpcy5yZXRyaWVzID0gcmV0cmllcztcbiAgICAgICAgICAgIHRoaXMucmV0cmllc1N1YnNjcmlwdGlvbiA9IHJldHJpZXNTdWJzY3JpcHRpb247XG4gICAgICAgICAgICBlcnJvcnMubmV4dChlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXRyeVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGVycm9ycyA9IF9hLmVycm9ycywgcmV0cmllc1N1YnNjcmlwdGlvbiA9IF9hLnJldHJpZXNTdWJzY3JpcHRpb247XG4gICAgICAgIGlmIChlcnJvcnMpIHtcbiAgICAgICAgICAgIGVycm9ycy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldHJpZXNTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHJldHJpZXNTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMucmV0cmllc1N1YnNjcmlwdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJldHJpZXMgPSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBSZXRyeVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3Vuc3Vic2NyaWJlID0gdGhpcy5fdW5zdWJzY3JpYmU7XG4gICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlKCk7XG4gICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gX3Vuc3Vic2NyaWJlO1xuICAgICAgICB0aGlzLnNvdXJjZS5zdWJzY3JpYmUodGhpcyk7XG4gICAgfTtcbiAgICByZXR1cm4gUmV0cnlXaGVuU3Vic2NyaWJlcjtcbn0oaW5uZXJTdWJzY3JpYmVfMS5TaW1wbGVPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJldHJ5V2hlbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgaW5uZXJTdWJzY3JpYmVfMSA9IHJlcXVpcmUoXCIuLi9pbm5lclN1YnNjcmliZVwiKTtcbmZ1bmN0aW9uIHNhbXBsZShub3RpZmllcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgU2FtcGxlT3BlcmF0b3Iobm90aWZpZXIpKTsgfTtcbn1cbmV4cG9ydHMuc2FtcGxlID0gc2FtcGxlO1xudmFyIFNhbXBsZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTYW1wbGVPcGVyYXRvcihub3RpZmllcikge1xuICAgICAgICB0aGlzLm5vdGlmaWVyID0gbm90aWZpZXI7XG4gICAgfVxuICAgIFNhbXBsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICB2YXIgc2FtcGxlU3Vic2NyaWJlciA9IG5ldyBTYW1wbGVTdWJzY3JpYmVyKHN1YnNjcmliZXIpO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gc291cmNlLnN1YnNjcmliZShzYW1wbGVTdWJzY3JpYmVyKTtcbiAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChpbm5lclN1YnNjcmliZV8xLmlubmVyU3Vic2NyaWJlKHRoaXMubm90aWZpZXIsIG5ldyBpbm5lclN1YnNjcmliZV8xLlNpbXBsZUlubmVyU3Vic2NyaWJlcihzYW1wbGVTdWJzY3JpYmVyKSkpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIFNhbXBsZU9wZXJhdG9yO1xufSgpKTtcbnZhciBTYW1wbGVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2FtcGxlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYW1wbGVTdWJzY3JpYmVyKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTYW1wbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgIH07XG4gICAgU2FtcGxlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbWl0VmFsdWUoKTtcbiAgICB9O1xuICAgIFNhbXBsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVtaXRWYWx1ZSgpO1xuICAgIH07XG4gICAgU2FtcGxlU3Vic2NyaWJlci5wcm90b3R5cGUuZW1pdFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU2FtcGxlU3Vic2NyaWJlcjtcbn0oaW5uZXJTdWJzY3JpYmVfMS5TaW1wbGVPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNhbXBsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmliZXJcIik7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG5mdW5jdGlvbiBzYW1wbGVUaW1lKHBlcmlvZCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jXzEuYXN5bmM7IH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFNhbXBsZVRpbWVPcGVyYXRvcihwZXJpb2QsIHNjaGVkdWxlcikpOyB9O1xufVxuZXhwb3J0cy5zYW1wbGVUaW1lID0gc2FtcGxlVGltZTtcbnZhciBTYW1wbGVUaW1lT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNhbXBsZVRpbWVPcGVyYXRvcihwZXJpb2QsIHNjaGVkdWxlcikge1xuICAgICAgICB0aGlzLnBlcmlvZCA9IHBlcmlvZDtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgfVxuICAgIFNhbXBsZVRpbWVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFNhbXBsZVRpbWVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucGVyaW9kLCB0aGlzLnNjaGVkdWxlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFNhbXBsZVRpbWVPcGVyYXRvcjtcbn0oKSk7XG52YXIgU2FtcGxlVGltZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTYW1wbGVUaW1lU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYW1wbGVUaW1lU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcGVyaW9kLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnBlcmlvZCA9IHBlcmlvZDtcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTm90aWZpY2F0aW9uLCBwZXJpb2QsIHsgc3Vic2NyaWJlcjogX3RoaXMsIHBlcmlvZDogcGVyaW9kIH0pKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTYW1wbGVUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5sYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgfTtcbiAgICBTYW1wbGVUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLmxhc3RWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTYW1wbGVUaW1lU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmZ1bmN0aW9uIGRpc3BhdGNoTm90aWZpY2F0aW9uKHN0YXRlKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBwZXJpb2QgPSBzdGF0ZS5wZXJpb2Q7XG4gICAgc3Vic2NyaWJlci5ub3RpZnlOZXh0KCk7XG4gICAgdGhpcy5zY2hlZHVsZShzdGF0ZSwgcGVyaW9kKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNhbXBsZVRpbWUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gc2VxdWVuY2VFcXVhbChjb21wYXJlVG8sIGNvbXBhcmF0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFNlcXVlbmNlRXF1YWxPcGVyYXRvcihjb21wYXJlVG8sIGNvbXBhcmF0b3IpKTsgfTtcbn1cbmV4cG9ydHMuc2VxdWVuY2VFcXVhbCA9IHNlcXVlbmNlRXF1YWw7XG52YXIgU2VxdWVuY2VFcXVhbE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXF1ZW5jZUVxdWFsT3BlcmF0b3IoY29tcGFyZVRvLCBjb21wYXJhdG9yKSB7XG4gICAgICAgIHRoaXMuY29tcGFyZVRvID0gY29tcGFyZVRvO1xuICAgICAgICB0aGlzLmNvbXBhcmF0b3IgPSBjb21wYXJhdG9yO1xuICAgIH1cbiAgICBTZXF1ZW5jZUVxdWFsT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBTZXF1ZW5jZUVxdWFsU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmNvbXBhcmVUbywgdGhpcy5jb21wYXJhdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2VxdWVuY2VFcXVhbE9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydHMuU2VxdWVuY2VFcXVhbE9wZXJhdG9yID0gU2VxdWVuY2VFcXVhbE9wZXJhdG9yO1xudmFyIFNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGNvbXBhcmVUbywgY29tcGFyYXRvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY29tcGFyZVRvID0gY29tcGFyZVRvO1xuICAgICAgICBfdGhpcy5jb21wYXJhdG9yID0gY29tcGFyYXRvcjtcbiAgICAgICAgX3RoaXMuX2EgPSBbXTtcbiAgICAgICAgX3RoaXMuX2IgPSBbXTtcbiAgICAgICAgX3RoaXMuX29uZUNvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uLmFkZChjb21wYXJlVG8uc3Vic2NyaWJlKG5ldyBTZXF1ZW5jZUVxdWFsQ29tcGFyZVRvU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgX3RoaXMpKSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLl9vbmVDb21wbGV0ZSAmJiB0aGlzLl9iLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2EucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmNoZWNrVmFsdWVzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9vbmVDb21wbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KHRoaXMuX2EubGVuZ3RoID09PSAwICYmIHRoaXMuX2IubGVuZ3RoID09PSAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX29uZUNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBTZXF1ZW5jZUVxdWFsU3Vic2NyaWJlci5wcm90b3R5cGUuY2hlY2tWYWx1ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYyA9IHRoaXMsIF9hID0gX2MuX2EsIF9iID0gX2MuX2IsIGNvbXBhcmF0b3IgPSBfYy5jb21wYXJhdG9yO1xuICAgICAgICB3aGlsZSAoX2EubGVuZ3RoID4gMCAmJiBfYi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgYSA9IF9hLnNoaWZ0KCk7XG4gICAgICAgICAgICB2YXIgYiA9IF9iLnNoaWZ0KCk7XG4gICAgICAgICAgICB2YXIgYXJlRXF1YWwgPSBmYWxzZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXJlRXF1YWwgPSBjb21wYXJhdG9yID8gY29tcGFyYXRvcihhLCBiKSA6IGEgPT09IGI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFyZUVxdWFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBTZXF1ZW5jZUVxdWFsU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dEIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX29uZUNvbXBsZXRlICYmIHRoaXMuX2EubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYi5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tWYWx1ZXMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlQiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX29uZUNvbXBsZXRlKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQodGhpcy5fYS5sZW5ndGggPT09IDAgJiYgdGhpcy5fYi5sZW5ndGggPT09IDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fb25lQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU2VxdWVuY2VFcXVhbFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5leHBvcnRzLlNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyID0gU2VxdWVuY2VFcXVhbFN1YnNjcmliZXI7XG52YXIgU2VxdWVuY2VFcXVhbENvbXBhcmVUb1N1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTZXF1ZW5jZUVxdWFsQ29tcGFyZVRvU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTZXF1ZW5jZUVxdWFsQ29tcGFyZVRvU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcGFyZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2VxdWVuY2VFcXVhbENvbXBhcmVUb1N1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm5leHRCKHZhbHVlKTtcbiAgICB9O1xuICAgIFNlcXVlbmNlRXF1YWxDb21wYXJlVG9TdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMucGFyZW50LmVycm9yKGVycik7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFNlcXVlbmNlRXF1YWxDb21wYXJlVG9TdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucGFyZW50LmNvbXBsZXRlQigpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gU2VxdWVuY2VFcXVhbENvbXBhcmVUb1N1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXF1ZW5jZUVxdWFsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIG11bHRpY2FzdF8xID0gcmVxdWlyZShcIi4vbXVsdGljYXN0XCIpO1xudmFyIHJlZkNvdW50XzEgPSByZXF1aXJlKFwiLi9yZWZDb3VudFwiKTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vU3ViamVjdFwiKTtcbmZ1bmN0aW9uIHNoYXJlU3ViamVjdEZhY3RvcnkoKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xufVxuZnVuY3Rpb24gc2hhcmUoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHJlZkNvdW50XzEucmVmQ291bnQoKShtdWx0aWNhc3RfMS5tdWx0aWNhc3Qoc2hhcmVTdWJqZWN0RmFjdG9yeSkoc291cmNlKSk7IH07XG59XG5leHBvcnRzLnNoYXJlID0gc2hhcmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBSZXBsYXlTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vUmVwbGF5U3ViamVjdFwiKTtcbmZ1bmN0aW9uIHNoYXJlUmVwbGF5KGNvbmZpZ09yQnVmZmVyU2l6ZSwgd2luZG93VGltZSwgc2NoZWR1bGVyKSB7XG4gICAgdmFyIGNvbmZpZztcbiAgICBpZiAoY29uZmlnT3JCdWZmZXJTaXplICYmIHR5cGVvZiBjb25maWdPckJ1ZmZlclNpemUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGNvbmZpZyA9IGNvbmZpZ09yQnVmZmVyU2l6ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbmZpZyA9IHtcbiAgICAgICAgICAgIGJ1ZmZlclNpemU6IGNvbmZpZ09yQnVmZmVyU2l6ZSxcbiAgICAgICAgICAgIHdpbmRvd1RpbWU6IHdpbmRvd1RpbWUsXG4gICAgICAgICAgICByZWZDb3VudDogZmFsc2UsXG4gICAgICAgICAgICBzY2hlZHVsZXI6IHNjaGVkdWxlclxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQoc2hhcmVSZXBsYXlPcGVyYXRvcihjb25maWcpKTsgfTtcbn1cbmV4cG9ydHMuc2hhcmVSZXBsYXkgPSBzaGFyZVJlcGxheTtcbmZ1bmN0aW9uIHNoYXJlUmVwbGF5T3BlcmF0b3IoX2EpIHtcbiAgICB2YXIgX2IgPSBfYS5idWZmZXJTaXplLCBidWZmZXJTaXplID0gX2IgPT09IHZvaWQgMCA/IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSA6IF9iLCBfYyA9IF9hLndpbmRvd1RpbWUsIHdpbmRvd1RpbWUgPSBfYyA9PT0gdm9pZCAwID8gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIDogX2MsIHVzZVJlZkNvdW50ID0gX2EucmVmQ291bnQsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICB2YXIgc3ViamVjdDtcbiAgICB2YXIgcmVmQ291bnQgPSAwO1xuICAgIHZhciBzdWJzY3JpcHRpb247XG4gICAgdmFyIGhhc0Vycm9yID0gZmFsc2U7XG4gICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gc2hhcmVSZXBsYXlPcGVyYXRpb24oc291cmNlKSB7XG4gICAgICAgIHJlZkNvdW50Kys7XG4gICAgICAgIHZhciBpbm5lclN1YjtcbiAgICAgICAgaWYgKCFzdWJqZWN0IHx8IGhhc0Vycm9yKSB7XG4gICAgICAgICAgICBoYXNFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgc3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0XzEuUmVwbGF5U3ViamVjdChidWZmZXJTaXplLCB3aW5kb3dUaW1lLCBzY2hlZHVsZXIpO1xuICAgICAgICAgICAgaW5uZXJTdWIgPSBzdWJqZWN0LnN1YnNjcmliZSh0aGlzKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IHNvdXJjZS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyBzdWJqZWN0Lm5leHQodmFsdWUpOyB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlubmVyU3ViID0gc3ViamVjdC5zdWJzY3JpYmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVmQ291bnQtLTtcbiAgICAgICAgICAgIGlubmVyU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uICYmICFpc0NvbXBsZXRlICYmIHVzZVJlZkNvdW50ICYmIHJlZkNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHN1YmplY3QgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZVJlcGxheS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmliZXJcIik7XG52YXIgRW1wdHlFcnJvcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvRW1wdHlFcnJvclwiKTtcbmZ1bmN0aW9uIHNpbmdsZShwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFNpbmdsZU9wZXJhdG9yKHByZWRpY2F0ZSwgc291cmNlKSk7IH07XG59XG5leHBvcnRzLnNpbmdsZSA9IHNpbmdsZTtcbnZhciBTaW5nbGVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2luZ2xlT3BlcmF0b3IocHJlZGljYXRlLCBzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICBTaW5nbGVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFNpbmdsZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcmVkaWNhdGUsIHRoaXMuc291cmNlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2luZ2xlT3BlcmF0b3I7XG59KCkpO1xudmFyIFNpbmdsZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTaW5nbGVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNpbmdsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgX3RoaXMuc2VlblZhbHVlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTaW5nbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5hcHBseVNpbmdsZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnNlZW5WYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcignU2VxdWVuY2UgY29udGFpbnMgbW9yZSB0aGFuIG9uZSBlbGVtZW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlZW5WYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnNpbmdsZVZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNpbmdsZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgaWYgKHRoaXMucHJlZGljYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnRyeU5leHQodmFsdWUsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlTaW5nbGVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNpbmdsZVN1YnNjcmliZXIucHJvdG90eXBlLnRyeU5leHQgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmVkaWNhdGUodmFsdWUsIGluZGV4LCB0aGlzLnNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5U2luZ2xlVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2luZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAodGhpcy5pbmRleCA+IDApIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodGhpcy5zZWVuVmFsdWUgPyB0aGlzLnNpbmdsZVZhbHVlIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihuZXcgRW1wdHlFcnJvcl8xLkVtcHR5RXJyb3IpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU2luZ2xlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpbmdsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBza2lwKGNvdW50KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTa2lwT3BlcmF0b3IoY291bnQpKTsgfTtcbn1cbmV4cG9ydHMuc2tpcCA9IHNraXA7XG52YXIgU2tpcE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTa2lwT3BlcmF0b3IodG90YWwpIHtcbiAgICAgICAgdGhpcy50b3RhbCA9IHRvdGFsO1xuICAgIH1cbiAgICBTa2lwT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBTa2lwU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnRvdGFsKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2tpcE9wZXJhdG9yO1xufSgpKTtcbnZhciBTa2lwU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNraXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNraXBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCB0b3RhbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudG90YWwgPSB0b3RhbDtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNraXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIGlmICgrK3RoaXMuY291bnQgPiB0aGlzLnRvdGFsKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoeCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTa2lwU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNraXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xudmFyIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9Bcmd1bWVudE91dE9mUmFuZ2VFcnJvclwiKTtcbmZ1bmN0aW9uIHNraXBMYXN0KGNvdW50KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTa2lwTGFzdE9wZXJhdG9yKGNvdW50KSk7IH07XG59XG5leHBvcnRzLnNraXBMYXN0ID0gc2tpcExhc3Q7XG52YXIgU2tpcExhc3RPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2tpcExhc3RPcGVyYXRvcihfc2tpcENvdW50KSB7XG4gICAgICAgIHRoaXMuX3NraXBDb3VudCA9IF9za2lwQ291bnQ7XG4gICAgICAgIGlmICh0aGlzLl9za2lwQ291bnQgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMS5Bcmd1bWVudE91dE9mUmFuZ2VFcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBTa2lwTGFzdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICBpZiAodGhpcy5fc2tpcENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFNraXBMYXN0U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLl9za2lwQ291bnQpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNraXBMYXN0T3BlcmF0b3I7XG59KCkpO1xudmFyIFNraXBMYXN0U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNraXBMYXN0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTa2lwTGFzdFN1YnNjcmliZXIoZGVzdGluYXRpb24sIF9za2lwQ291bnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9za2lwQ291bnQgPSBfc2tpcENvdW50O1xuICAgICAgICBfdGhpcy5fY291bnQgPSAwO1xuICAgICAgICBfdGhpcy5fcmluZyA9IG5ldyBBcnJheShfc2tpcENvdW50KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTa2lwTGFzdFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBza2lwQ291bnQgPSB0aGlzLl9za2lwQ291bnQ7XG4gICAgICAgIHZhciBjb3VudCA9IHRoaXMuX2NvdW50Kys7XG4gICAgICAgIGlmIChjb3VudCA8IHNraXBDb3VudCkge1xuICAgICAgICAgICAgdGhpcy5fcmluZ1tjb3VudF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50SW5kZXggPSBjb3VudCAlIHNraXBDb3VudDtcbiAgICAgICAgICAgIHZhciByaW5nID0gdGhpcy5fcmluZztcbiAgICAgICAgICAgIHZhciBvbGRWYWx1ZSA9IHJpbmdbY3VycmVudEluZGV4XTtcbiAgICAgICAgICAgIHJpbmdbY3VycmVudEluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KG9sZFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNraXBMYXN0U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNraXBMYXN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBpbm5lclN1YnNjcmliZV8xID0gcmVxdWlyZShcIi4uL2lubmVyU3Vic2NyaWJlXCIpO1xuZnVuY3Rpb24gc2tpcFVudGlsKG5vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTa2lwVW50aWxPcGVyYXRvcihub3RpZmllcikpOyB9O1xufVxuZXhwb3J0cy5za2lwVW50aWwgPSBza2lwVW50aWw7XG52YXIgU2tpcFVudGlsT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNraXBVbnRpbE9wZXJhdG9yKG5vdGlmaWVyKSB7XG4gICAgICAgIHRoaXMubm90aWZpZXIgPSBub3RpZmllcjtcbiAgICB9XG4gICAgU2tpcFVudGlsT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgU2tpcFVudGlsU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgdGhpcy5ub3RpZmllcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFNraXBVbnRpbE9wZXJhdG9yO1xufSgpKTtcbnZhciBTa2lwVW50aWxTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2tpcFVudGlsU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTa2lwVW50aWxTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBub3RpZmllcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaWJlciA9IG5ldyBpbm5lclN1YnNjcmliZV8xLlNpbXBsZUlubmVyU3Vic2NyaWJlcihfdGhpcyk7XG4gICAgICAgIF90aGlzLmFkZChpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICBfdGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IGlubmVyU3Vic2NyaWJlcjtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gaW5uZXJTdWJzY3JpYmVfMS5pbm5lclN1YnNjcmliZShub3RpZmllciwgaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uICE9PSBpbm5lclN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIF90aGlzLmFkZChpbm5lclN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBfdGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IGlubmVyU3Vic2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2tpcFVudGlsU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX25leHQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNraXBVbnRpbFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5pbm5lclN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5pbm5lclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTa2lwVW50aWxTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB9O1xuICAgIHJldHVybiBTa2lwVW50aWxTdWJzY3JpYmVyO1xufShpbm5lclN1YnNjcmliZV8xLlNpbXBsZU91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2tpcFVudGlsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHNraXBXaGlsZShwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFNraXBXaGlsZU9wZXJhdG9yKHByZWRpY2F0ZSkpOyB9O1xufVxuZXhwb3J0cy5za2lwV2hpbGUgPSBza2lwV2hpbGU7XG52YXIgU2tpcFdoaWxlT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNraXBXaGlsZU9wZXJhdG9yKHByZWRpY2F0ZSkge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICB9XG4gICAgU2tpcFdoaWxlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBTa2lwV2hpbGVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJlZGljYXRlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2tpcFdoaWxlT3BlcmF0b3I7XG59KCkpO1xudmFyIFNraXBXaGlsZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTa2lwV2hpbGVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNraXBXaGlsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICBfdGhpcy5za2lwcGluZyA9IHRydWU7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTa2lwV2hpbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAodGhpcy5za2lwcGluZykge1xuICAgICAgICAgICAgdGhpcy50cnlDYWxsUHJlZGljYXRlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuc2tpcHBpbmcpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTa2lwV2hpbGVTdWJzY3JpYmVyLnByb3RvdHlwZS50cnlDYWxsUHJlZGljYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUodmFsdWUsIHRoaXMuaW5kZXgrKyk7XG4gICAgICAgICAgICB0aGlzLnNraXBwaW5nID0gQm9vbGVhbihyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNraXBXaGlsZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1za2lwV2hpbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY29uY2F0XzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9jb25jYXRcIik7XG52YXIgaXNTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzU2NoZWR1bGVyXCIpO1xuZnVuY3Rpb24gc3RhcnRXaXRoKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFycmF5W19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICBpZiAoaXNTY2hlZHVsZXJfMS5pc1NjaGVkdWxlcihzY2hlZHVsZXIpKSB7XG4gICAgICAgIGFycmF5LnBvcCgpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gY29uY2F0XzEuY29uY2F0KGFycmF5LCBzb3VyY2UsIHNjaGVkdWxlcik7IH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gY29uY2F0XzEuY29uY2F0KGFycmF5LCBzb3VyY2UpOyB9O1xuICAgIH1cbn1cbmV4cG9ydHMuc3RhcnRXaXRoID0gc3RhcnRXaXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhcnRXaXRoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBhc2FwXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2FzYXBcIik7XG52YXIgaXNOdW1lcmljXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc051bWVyaWNcIik7XG52YXIgU3Vic2NyaWJlT25PYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3Vic2NyaWJlT25PYnNlcnZhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZU9uT2JzZXJ2YWJsZShzb3VyY2UsIGRlbGF5VGltZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIGlmIChkZWxheVRpbWUgPT09IHZvaWQgMCkgeyBkZWxheVRpbWUgPSAwOyB9XG4gICAgICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc2FwXzEuYXNhcDsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIF90aGlzLmRlbGF5VGltZSA9IGRlbGF5VGltZTtcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBpZiAoIWlzTnVtZXJpY18xLmlzTnVtZXJpYyhkZWxheVRpbWUpIHx8IGRlbGF5VGltZSA8IDApIHtcbiAgICAgICAgICAgIF90aGlzLmRlbGF5VGltZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzY2hlZHVsZXIgfHwgdHlwZW9mIHNjaGVkdWxlci5zY2hlZHVsZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gYXNhcF8xLmFzYXA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJzY3JpYmVPbk9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHNvdXJjZSwgZGVsYXksIHNjaGVkdWxlcikge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzYXBfMS5hc2FwOyB9XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaWJlT25PYnNlcnZhYmxlKHNvdXJjZSwgZGVsYXksIHNjaGVkdWxlcik7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVPbk9ic2VydmFibGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmcuc291cmNlLCBzdWJzY3JpYmVyID0gYXJnLnN1YnNjcmliZXI7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZU9uT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBkZWxheSA9IHRoaXMuZGVsYXlUaW1lO1xuICAgICAgICB2YXIgc291cmNlID0gdGhpcy5zb3VyY2U7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShTdWJzY3JpYmVPbk9ic2VydmFibGUuZGlzcGF0Y2gsIGRlbGF5LCB7XG4gICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpYmVPbk9ic2VydmFibGU7XG59KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5leHBvcnRzLlN1YnNjcmliZU9uT2JzZXJ2YWJsZSA9IFN1YnNjcmliZU9uT2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZU9uT2JzZXJ2YWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJzY3JpYmVPbk9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL1N1YnNjcmliZU9uT2JzZXJ2YWJsZVwiKTtcbmZ1bmN0aW9uIHN1YnNjcmliZU9uKHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICByZXR1cm4gZnVuY3Rpb24gc3Vic2NyaWJlT25PcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFN1YnNjcmliZU9uT3BlcmF0b3Ioc2NoZWR1bGVyLCBkZWxheSkpO1xuICAgIH07XG59XG5leHBvcnRzLnN1YnNjcmliZU9uID0gc3Vic2NyaWJlT247XG52YXIgU3Vic2NyaWJlT25PcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlT25PcGVyYXRvcihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgfVxuICAgIFN1YnNjcmliZU9uT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaWJlT25PYnNlcnZhYmxlXzEuU3Vic2NyaWJlT25PYnNlcnZhYmxlKHNvdXJjZSwgdGhpcy5kZWxheSwgdGhpcy5zY2hlZHVsZXIpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpYmVPbk9wZXJhdG9yO1xufSgpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZU9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBtYXBfMSA9IHJlcXVpcmUoXCIuL21hcFwiKTtcbnZhciBmcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9mcm9tXCIpO1xudmFyIGlubmVyU3Vic2NyaWJlXzEgPSByZXF1aXJlKFwiLi4vaW5uZXJTdWJzY3JpYmVcIik7XG5mdW5jdGlvbiBzd2l0Y2hNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UucGlwZShzd2l0Y2hNYXAoZnVuY3Rpb24gKGEsIGkpIHsgcmV0dXJuIGZyb21fMS5mcm9tKHByb2plY3QoYSwgaSkpLnBpcGUobWFwXzEubWFwKGZ1bmN0aW9uIChiLCBpaSkgeyByZXR1cm4gcmVzdWx0U2VsZWN0b3IoYSwgYiwgaSwgaWkpOyB9KSk7IH0pKTsgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTd2l0Y2hNYXBPcGVyYXRvcihwcm9qZWN0KSk7IH07XG59XG5leHBvcnRzLnN3aXRjaE1hcCA9IHN3aXRjaE1hcDtcbnZhciBTd2l0Y2hNYXBPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3dpdGNoTWFwT3BlcmF0b3IocHJvamVjdCkge1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgIH1cbiAgICBTd2l0Y2hNYXBPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFN3aXRjaE1hcFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcm9qZWN0KSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3dpdGNoTWFwT3BlcmF0b3I7XG59KCkpO1xudmFyIFN3aXRjaE1hcFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTd2l0Y2hNYXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN3aXRjaE1hcFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByb2plY3QpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3dpdGNoTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0KHZhbHVlLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbm5lclN1YihyZXN1bHQpO1xuICAgIH07XG4gICAgU3dpdGNoTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2lubmVyU3ViID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSB0aGlzLmlubmVyU3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAoaW5uZXJTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIGlubmVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaWJlciA9IG5ldyBpbm5lclN1YnNjcmliZV8xLlNpbXBsZUlubmVyU3Vic2NyaWJlcih0aGlzKTtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24uYWRkKGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgIHRoaXMuaW5uZXJTdWJzY3JpcHRpb24gPSBpbm5lclN1YnNjcmliZV8xLmlubmVyU3Vic2NyaWJlKHJlc3VsdCwgaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKHRoaXMuaW5uZXJTdWJzY3JpcHRpb24gIT09IGlubmVyU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKHRoaXMuaW5uZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTd2l0Y2hNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHRoaXMuaW5uZXJTdWJzY3JpcHRpb247XG4gICAgICAgIGlmICghaW5uZXJTdWJzY3JpcHRpb24gfHwgaW5uZXJTdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFN3aXRjaE1hcFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFN3aXRjaE1hcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlubmVyU3Vic2NyaXB0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN3aXRjaE1hcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAoaW5uZXJWYWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3dpdGNoTWFwU3Vic2NyaWJlcjtcbn0oaW5uZXJTdWJzY3JpYmVfMS5TaW1wbGVPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN3aXRjaE1hcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBzd2l0Y2hNYXBfMSA9IHJlcXVpcmUoXCIuL3N3aXRjaE1hcFwiKTtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaWRlbnRpdHlcIik7XG5mdW5jdGlvbiBzd2l0Y2hBbGwoKSB7XG4gICAgcmV0dXJuIHN3aXRjaE1hcF8xLnN3aXRjaE1hcChpZGVudGl0eV8xLmlkZW50aXR5KTtcbn1cbmV4cG9ydHMuc3dpdGNoQWxsID0gc3dpdGNoQWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoQWxsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHN3aXRjaE1hcF8xID0gcmVxdWlyZShcIi4vc3dpdGNoTWFwXCIpO1xuZnVuY3Rpb24gc3dpdGNoTWFwVG8oaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3Rvcikge1xuICAgIHJldHVybiByZXN1bHRTZWxlY3RvciA/IHN3aXRjaE1hcF8xLnN3aXRjaE1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0sIHJlc3VsdFNlbGVjdG9yKSA6IHN3aXRjaE1hcF8xLnN3aXRjaE1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0pO1xufVxuZXhwb3J0cy5zd2l0Y2hNYXBUbyA9IHN3aXRjaE1hcFRvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoTWFwVG8uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGlubmVyU3Vic2NyaWJlXzEgPSByZXF1aXJlKFwiLi4vaW5uZXJTdWJzY3JpYmVcIik7XG5mdW5jdGlvbiB0YWtlVW50aWwobm90aWZpZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFRha2VVbnRpbE9wZXJhdG9yKG5vdGlmaWVyKSk7IH07XG59XG5leHBvcnRzLnRha2VVbnRpbCA9IHRha2VVbnRpbDtcbnZhciBUYWtlVW50aWxPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFrZVVudGlsT3BlcmF0b3Iobm90aWZpZXIpIHtcbiAgICAgICAgdGhpcy5ub3RpZmllciA9IG5vdGlmaWVyO1xuICAgIH1cbiAgICBUYWtlVW50aWxPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIHRha2VVbnRpbFN1YnNjcmliZXIgPSBuZXcgVGFrZVVudGlsU3Vic2NyaWJlcihzdWJzY3JpYmVyKTtcbiAgICAgICAgdmFyIG5vdGlmaWVyU3Vic2NyaXB0aW9uID0gaW5uZXJTdWJzY3JpYmVfMS5pbm5lclN1YnNjcmliZSh0aGlzLm5vdGlmaWVyLCBuZXcgaW5uZXJTdWJzY3JpYmVfMS5TaW1wbGVJbm5lclN1YnNjcmliZXIodGFrZVVudGlsU3Vic2NyaWJlcikpO1xuICAgICAgICBpZiAobm90aWZpZXJTdWJzY3JpcHRpb24gJiYgIXRha2VVbnRpbFN1YnNjcmliZXIuc2VlblZhbHVlKSB7XG4gICAgICAgICAgICB0YWtlVW50aWxTdWJzY3JpYmVyLmFkZChub3RpZmllclN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZSh0YWtlVW50aWxTdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFrZVVudGlsU3Vic2NyaWJlcjtcbiAgICB9O1xuICAgIHJldHVybiBUYWtlVW50aWxPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGFrZVVudGlsU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRha2VVbnRpbFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGFrZVVudGlsU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2VlblZhbHVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGFrZVVudGlsU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zZWVuVmFsdWUgPSB0cnVlO1xuICAgICAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBUYWtlVW50aWxTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB9O1xuICAgIHJldHVybiBUYWtlVW50aWxTdWJzY3JpYmVyO1xufShpbm5lclN1YnNjcmliZV8xLlNpbXBsZU91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFrZVVudGlsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHRha2VXaGlsZShwcmVkaWNhdGUsIGluY2x1c2l2ZSkge1xuICAgIGlmIChpbmNsdXNpdmUgPT09IHZvaWQgMCkgeyBpbmNsdXNpdmUgPSBmYWxzZTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgVGFrZVdoaWxlT3BlcmF0b3IocHJlZGljYXRlLCBpbmNsdXNpdmUpKTtcbiAgICB9O1xufVxuZXhwb3J0cy50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG52YXIgVGFrZVdoaWxlT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRha2VXaGlsZU9wZXJhdG9yKHByZWRpY2F0ZSwgaW5jbHVzaXZlKSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLmluY2x1c2l2ZSA9IGluY2x1c2l2ZTtcbiAgICB9XG4gICAgVGFrZVdoaWxlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBUYWtlV2hpbGVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJlZGljYXRlLCB0aGlzLmluY2x1c2l2ZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFRha2VXaGlsZU9wZXJhdG9yO1xufSgpKTtcbnZhciBUYWtlV2hpbGVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGFrZVdoaWxlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUYWtlV2hpbGVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcmVkaWNhdGUsIGluY2x1c2l2ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICBfdGhpcy5pbmNsdXNpdmUgPSBpbmNsdXNpdmU7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUYWtlV2hpbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUodmFsdWUsIHRoaXMuaW5kZXgrKyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5leHRPckNvbXBsZXRlKHZhbHVlLCByZXN1bHQpO1xuICAgIH07XG4gICAgVGFrZVdoaWxlU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dE9yQ29tcGxldGUgPSBmdW5jdGlvbiAodmFsdWUsIHByZWRpY2F0ZVJlc3VsdCkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoQm9vbGVhbihwcmVkaWNhdGVSZXN1bHQpKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRha2VXaGlsZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlV2hpbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xudmFyIG5vb3BfMSA9IHJlcXVpcmUoXCIuLi91dGlsL25vb3BcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIHRhcChuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHRhcE9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgRG9PcGVyYXRvcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSk7XG4gICAgfTtcbn1cbmV4cG9ydHMudGFwID0gdGFwO1xudmFyIERvT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERvT3BlcmF0b3IobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB0aGlzLm5leHRPck9ic2VydmVyID0gbmV4dE9yT2JzZXJ2ZXI7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgdGhpcy5jb21wbGV0ZSA9IGNvbXBsZXRlO1xuICAgIH1cbiAgICBEb09wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgVGFwU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm5leHRPck9ic2VydmVyLCB0aGlzLmVycm9yLCB0aGlzLmNvbXBsZXRlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRG9PcGVyYXRvcjtcbn0oKSk7XG52YXIgVGFwU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRhcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGFwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3RhcE5leHQgPSBub29wXzEubm9vcDtcbiAgICAgICAgX3RoaXMuX3RhcEVycm9yID0gbm9vcF8xLm5vb3A7XG4gICAgICAgIF90aGlzLl90YXBDb21wbGV0ZSA9IG5vb3BfMS5ub29wO1xuICAgICAgICBfdGhpcy5fdGFwRXJyb3IgPSBlcnJvciB8fCBub29wXzEubm9vcDtcbiAgICAgICAgX3RoaXMuX3RhcENvbXBsZXRlID0gY29tcGxldGUgfHwgbm9vcF8xLm5vb3A7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkpIHtcbiAgICAgICAgICAgIF90aGlzLl9jb250ZXh0ID0gX3RoaXM7XG4gICAgICAgICAgICBfdGhpcy5fdGFwTmV4dCA9IG9ic2VydmVyT3JOZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9ic2VydmVyT3JOZXh0KSB7XG4gICAgICAgICAgICBfdGhpcy5fY29udGV4dCA9IG9ic2VydmVyT3JOZXh0O1xuICAgICAgICAgICAgX3RoaXMuX3RhcE5leHQgPSBvYnNlcnZlck9yTmV4dC5uZXh0IHx8IG5vb3BfMS5ub29wO1xuICAgICAgICAgICAgX3RoaXMuX3RhcEVycm9yID0gb2JzZXJ2ZXJPck5leHQuZXJyb3IgfHwgbm9vcF8xLm5vb3A7XG4gICAgICAgICAgICBfdGhpcy5fdGFwQ29tcGxldGUgPSBvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSB8fCBub29wXzEubm9vcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRhcFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl90YXBOZXh0LmNhbGwodGhpcy5fY29udGV4dCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgVGFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fdGFwRXJyb3IuY2FsbCh0aGlzLl9jb250ZXh0LCBlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgfTtcbiAgICBUYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl90YXBDb21wbGV0ZS5jYWxsKHRoaXMuX2NvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIFRhcFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGlubmVyU3Vic2NyaWJlXzEgPSByZXF1aXJlKFwiLi4vaW5uZXJTdWJzY3JpYmVcIik7XG5leHBvcnRzLmRlZmF1bHRUaHJvdHRsZUNvbmZpZyA9IHtcbiAgICBsZWFkaW5nOiB0cnVlLFxuICAgIHRyYWlsaW5nOiBmYWxzZVxufTtcbmZ1bmN0aW9uIHRocm90dGxlKGR1cmF0aW9uU2VsZWN0b3IsIGNvbmZpZykge1xuICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkgeyBjb25maWcgPSBleHBvcnRzLmRlZmF1bHRUaHJvdHRsZUNvbmZpZzsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgVGhyb3R0bGVPcGVyYXRvcihkdXJhdGlvblNlbGVjdG9yLCAhIWNvbmZpZy5sZWFkaW5nLCAhIWNvbmZpZy50cmFpbGluZykpOyB9O1xufVxuZXhwb3J0cy50aHJvdHRsZSA9IHRocm90dGxlO1xudmFyIFRocm90dGxlT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRocm90dGxlT3BlcmF0b3IoZHVyYXRpb25TZWxlY3RvciwgbGVhZGluZywgdHJhaWxpbmcpIHtcbiAgICAgICAgdGhpcy5kdXJhdGlvblNlbGVjdG9yID0gZHVyYXRpb25TZWxlY3RvcjtcbiAgICAgICAgdGhpcy5sZWFkaW5nID0gbGVhZGluZztcbiAgICAgICAgdGhpcy50cmFpbGluZyA9IHRyYWlsaW5nO1xuICAgIH1cbiAgICBUaHJvdHRsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgVGhyb3R0bGVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZHVyYXRpb25TZWxlY3RvciwgdGhpcy5sZWFkaW5nLCB0aGlzLnRyYWlsaW5nKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGhyb3R0bGVPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGhyb3R0bGVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGhyb3R0bGVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRocm90dGxlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVyYXRpb25TZWxlY3RvciwgX2xlYWRpbmcsIF90cmFpbGluZykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgX3RoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG4gICAgICAgIF90aGlzLl9sZWFkaW5nID0gX2xlYWRpbmc7XG4gICAgICAgIF90aGlzLl90cmFpbGluZyA9IF90cmFpbGluZztcbiAgICAgICAgX3RoaXMuX2hhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGhyb3R0bGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9oYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX3NlbmRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICBpZiAoIXRoaXMuX3Rocm90dGxlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xlYWRpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudGhyb3R0bGUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIF9oYXNWYWx1ZSA9IF9hLl9oYXNWYWx1ZSwgX3NlbmRWYWx1ZSA9IF9hLl9zZW5kVmFsdWU7XG4gICAgICAgIGlmIChfaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChfc2VuZFZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMudGhyb3R0bGUoX3NlbmRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc2VuZFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgVGhyb3R0bGVTdWJzY3JpYmVyLnByb3RvdHlwZS50aHJvdHRsZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSB0aGlzLnRyeUR1cmF0aW9uU2VsZWN0b3IodmFsdWUpO1xuICAgICAgICBpZiAoISFkdXJhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5hZGQodGhpcy5fdGhyb3R0bGVkID0gaW5uZXJTdWJzY3JpYmVfMS5pbm5lclN1YnNjcmliZShkdXJhdGlvbiwgbmV3IGlubmVyU3Vic2NyaWJlXzEuU2ltcGxlSW5uZXJTdWJzY3JpYmVyKHRoaXMpKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRocm90dGxlU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5RHVyYXRpb25TZWxlY3RvciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHVyYXRpb25TZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRocm90dGxlU3Vic2NyaWJlci5wcm90b3R5cGUudGhyb3R0bGluZ0RvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIF90aHJvdHRsZWQgPSBfYS5fdGhyb3R0bGVkLCBfdHJhaWxpbmcgPSBfYS5fdHJhaWxpbmc7XG4gICAgICAgIGlmIChfdGhyb3R0bGVkKSB7XG4gICAgICAgICAgICBfdGhyb3R0bGVkLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGhyb3R0bGVkID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoX3RyYWlsaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGhyb3R0bGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRocm90dGxpbmdEb25lKCk7XG4gICAgfTtcbiAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRocm90dGxpbmdEb25lKCk7XG4gICAgfTtcbiAgICByZXR1cm4gVGhyb3R0bGVTdWJzY3JpYmVyO1xufShpbm5lclN1YnNjcmliZV8xLlNpbXBsZU91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3R0bGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2FzeW5jXCIpO1xudmFyIHRocm90dGxlXzEgPSByZXF1aXJlKFwiLi90aHJvdHRsZVwiKTtcbmZ1bmN0aW9uIHRocm90dGxlVGltZShkdXJhdGlvbiwgc2NoZWR1bGVyLCBjb25maWcpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkgeyBjb25maWcgPSB0aHJvdHRsZV8xLmRlZmF1bHRUaHJvdHRsZUNvbmZpZzsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgVGhyb3R0bGVUaW1lT3BlcmF0b3IoZHVyYXRpb24sIHNjaGVkdWxlciwgY29uZmlnLmxlYWRpbmcsIGNvbmZpZy50cmFpbGluZykpOyB9O1xufVxuZXhwb3J0cy50aHJvdHRsZVRpbWUgPSB0aHJvdHRsZVRpbWU7XG52YXIgVGhyb3R0bGVUaW1lT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRocm90dGxlVGltZU9wZXJhdG9yKGR1cmF0aW9uLCBzY2hlZHVsZXIsIGxlYWRpbmcsIHRyYWlsaW5nKSB7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIHRoaXMubGVhZGluZyA9IGxlYWRpbmc7XG4gICAgICAgIHRoaXMudHJhaWxpbmcgPSB0cmFpbGluZztcbiAgICB9XG4gICAgVGhyb3R0bGVUaW1lT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBUaHJvdHRsZVRpbWVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZHVyYXRpb24sIHRoaXMuc2NoZWR1bGVyLCB0aGlzLmxlYWRpbmcsIHRoaXMudHJhaWxpbmcpKTtcbiAgICB9O1xuICAgIHJldHVybiBUaHJvdHRsZVRpbWVPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGhyb3R0bGVUaW1lU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRocm90dGxlVGltZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGhyb3R0bGVUaW1lU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVyYXRpb24sIHNjaGVkdWxlciwgbGVhZGluZywgdHJhaWxpbmcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMubGVhZGluZyA9IGxlYWRpbmc7XG4gICAgICAgIF90aGlzLnRyYWlsaW5nID0gdHJhaWxpbmc7XG4gICAgICAgIF90aGlzLl9oYXNUcmFpbGluZ1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLl90cmFpbGluZ1ZhbHVlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUaHJvdHRsZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy50aHJvdHRsZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWlsaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhaWxpbmdWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhc1RyYWlsaW5nVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGQodGhpcy50aHJvdHRsZWQgPSB0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaE5leHQsIHRoaXMuZHVyYXRpb24sIHsgc3Vic2NyaWJlcjogdGhpcyB9KSk7XG4gICAgICAgICAgICBpZiAodGhpcy5sZWFkaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudHJhaWxpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmFpbGluZ1ZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFzVHJhaWxpbmdWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRocm90dGxlVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc1RyYWlsaW5nVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLl90cmFpbGluZ1ZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGhyb3R0bGVUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuY2xlYXJUaHJvdHRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRocm90dGxlZCA9IHRoaXMudGhyb3R0bGVkO1xuICAgICAgICBpZiAodGhyb3R0bGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50cmFpbGluZyAmJiB0aGlzLl9oYXNUcmFpbGluZ1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMuX3RyYWlsaW5nVmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyYWlsaW5nVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhc1RyYWlsaW5nVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm90dGxlZC51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUodGhyb3R0bGVkKTtcbiAgICAgICAgICAgIHRoaXMudGhyb3R0bGVkID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRocm90dGxlVGltZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5mdW5jdGlvbiBkaXNwYXRjaE5leHQoYXJnKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBhcmcuc3Vic2NyaWJlcjtcbiAgICBzdWJzY3JpYmVyLmNsZWFyVGhyb3R0bGUoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm90dGxlVGltZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBhc3luY18xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci9hc3luY1wiKTtcbnZhciBzY2FuXzEgPSByZXF1aXJlKFwiLi9zY2FuXCIpO1xudmFyIGRlZmVyXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9kZWZlclwiKTtcbnZhciBtYXBfMSA9IHJlcXVpcmUoXCIuL21hcFwiKTtcbmZ1bmN0aW9uIHRpbWVJbnRlcnZhbChzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBkZWZlcl8xLmRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5waXBlKHNjYW5fMS5zY2FuKGZ1bmN0aW9uIChfYSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gX2EuY3VycmVudDtcbiAgICAgICAgICAgIHJldHVybiAoeyB2YWx1ZTogdmFsdWUsIGN1cnJlbnQ6IHNjaGVkdWxlci5ub3coKSwgbGFzdDogY3VycmVudCB9KTtcbiAgICAgICAgfSwgeyBjdXJyZW50OiBzY2hlZHVsZXIubm93KCksIHZhbHVlOiB1bmRlZmluZWQsIGxhc3Q6IHVuZGVmaW5lZCB9KSwgbWFwXzEubWFwKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBfYS5jdXJyZW50LCBsYXN0ID0gX2EubGFzdCwgdmFsdWUgPSBfYS52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGltZUludGVydmFsKHZhbHVlLCBjdXJyZW50IC0gbGFzdCk7XG4gICAgICAgIH0pKTtcbiAgICB9KTsgfTtcbn1cbmV4cG9ydHMudGltZUludGVydmFsID0gdGltZUludGVydmFsO1xudmFyIFRpbWVJbnRlcnZhbCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGltZUludGVydmFsKHZhbHVlLCBpbnRlcnZhbCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBpbnRlcnZhbDtcbiAgICB9XG4gICAgcmV0dXJuIFRpbWVJbnRlcnZhbDtcbn0oKSk7XG5leHBvcnRzLlRpbWVJbnRlcnZhbCA9IFRpbWVJbnRlcnZhbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVJbnRlcnZhbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgaXNEYXRlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0RhdGVcIik7XG52YXIgaW5uZXJTdWJzY3JpYmVfMSA9IHJlcXVpcmUoXCIuLi9pbm5lclN1YnNjcmliZVwiKTtcbmZ1bmN0aW9uIHRpbWVvdXRXaXRoKGR1ZSwgd2l0aE9ic2VydmFibGUsIHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jOyB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgdmFyIGFic29sdXRlVGltZW91dCA9IGlzRGF0ZV8xLmlzRGF0ZShkdWUpO1xuICAgICAgICB2YXIgd2FpdEZvciA9IGFic29sdXRlVGltZW91dCA/ICgrZHVlIC0gc2NoZWR1bGVyLm5vdygpKSA6IE1hdGguYWJzKGR1ZSk7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgVGltZW91dFdpdGhPcGVyYXRvcih3YWl0Rm9yLCBhYnNvbHV0ZVRpbWVvdXQsIHdpdGhPYnNlcnZhYmxlLCBzY2hlZHVsZXIpKTtcbiAgICB9O1xufVxuZXhwb3J0cy50aW1lb3V0V2l0aCA9IHRpbWVvdXRXaXRoO1xudmFyIFRpbWVvdXRXaXRoT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpbWVvdXRXaXRoT3BlcmF0b3Iod2FpdEZvciwgYWJzb2x1dGVUaW1lb3V0LCB3aXRoT2JzZXJ2YWJsZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHRoaXMud2FpdEZvciA9IHdhaXRGb3I7XG4gICAgICAgIHRoaXMuYWJzb2x1dGVUaW1lb3V0ID0gYWJzb2x1dGVUaW1lb3V0O1xuICAgICAgICB0aGlzLndpdGhPYnNlcnZhYmxlID0gd2l0aE9ic2VydmFibGU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIH1cbiAgICBUaW1lb3V0V2l0aE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgVGltZW91dFdpdGhTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuYWJzb2x1dGVUaW1lb3V0LCB0aGlzLndhaXRGb3IsIHRoaXMud2l0aE9ic2VydmFibGUsIHRoaXMuc2NoZWR1bGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGltZW91dFdpdGhPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGltZW91dFdpdGhTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGltZW91dFdpdGhTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRpbWVvdXRXaXRoU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgYWJzb2x1dGVUaW1lb3V0LCB3YWl0Rm9yLCB3aXRoT2JzZXJ2YWJsZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5hYnNvbHV0ZVRpbWVvdXQgPSBhYnNvbHV0ZVRpbWVvdXQ7XG4gICAgICAgIF90aGlzLndhaXRGb3IgPSB3YWl0Rm9yO1xuICAgICAgICBfdGhpcy53aXRoT2JzZXJ2YWJsZSA9IHdpdGhPYnNlcnZhYmxlO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlVGltZW91dCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRpbWVvdXRXaXRoU3Vic2NyaWJlci5kaXNwYXRjaFRpbWVvdXQgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgd2l0aE9ic2VydmFibGUgPSBzdWJzY3JpYmVyLndpdGhPYnNlcnZhYmxlO1xuICAgICAgICBzdWJzY3JpYmVyLl91bnN1YnNjcmliZUFuZFJlY3ljbGUoKTtcbiAgICAgICAgc3Vic2NyaWJlci5hZGQoaW5uZXJTdWJzY3JpYmVfMS5pbm5lclN1YnNjcmliZSh3aXRoT2JzZXJ2YWJsZSwgbmV3IGlubmVyU3Vic2NyaWJlXzEuU2ltcGxlSW5uZXJTdWJzY3JpYmVyKHN1YnNjcmliZXIpKSk7XG4gICAgfTtcbiAgICBUaW1lb3V0V2l0aFN1YnNjcmliZXIucHJvdG90eXBlLnNjaGVkdWxlVGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IHRoaXMuYWN0aW9uO1xuICAgICAgICBpZiAoYWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbiA9IGFjdGlvbi5zY2hlZHVsZSh0aGlzLCB0aGlzLndhaXRGb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGQodGhpcy5hY3Rpb24gPSB0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShUaW1lb3V0V2l0aFN1YnNjcmliZXIuZGlzcGF0Y2hUaW1lb3V0LCB0aGlzLndhaXRGb3IsIHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGltZW91dFdpdGhTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuYWJzb2x1dGVUaW1lb3V0KSB7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlVGltZW91dCgpO1xuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX25leHQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBUaW1lb3V0V2l0aFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy53aXRoT2JzZXJ2YWJsZSA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gVGltZW91dFdpdGhTdWJzY3JpYmVyO1xufShpbm5lclN1YnNjcmliZV8xLlNpbXBsZU91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dFdpdGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgVGltZW91dEVycm9yXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9UaW1lb3V0RXJyb3JcIik7XG52YXIgdGltZW91dFdpdGhfMSA9IHJlcXVpcmUoXCIuL3RpbWVvdXRXaXRoXCIpO1xudmFyIHRocm93RXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL3Rocm93RXJyb3JcIik7XG5mdW5jdGlvbiB0aW1lb3V0KGR1ZSwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jXzEuYXN5bmM7IH1cbiAgICByZXR1cm4gdGltZW91dFdpdGhfMS50aW1lb3V0V2l0aChkdWUsIHRocm93RXJyb3JfMS50aHJvd0Vycm9yKG5ldyBUaW1lb3V0RXJyb3JfMS5UaW1lb3V0RXJyb3IoKSksIHNjaGVkdWxlcik7XG59XG5leHBvcnRzLnRpbWVvdXQgPSB0aW1lb3V0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBhc3luY18xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci9hc3luY1wiKTtcbnZhciBtYXBfMSA9IHJlcXVpcmUoXCIuL21hcFwiKTtcbmZ1bmN0aW9uIHRpbWVzdGFtcChzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuICAgIHJldHVybiBtYXBfMS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBuZXcgVGltZXN0YW1wKHZhbHVlLCBzY2hlZHVsZXIubm93KCkpOyB9KTtcbn1cbmV4cG9ydHMudGltZXN0YW1wID0gdGltZXN0YW1wO1xudmFyIFRpbWVzdGFtcCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGltZXN0YW1wKHZhbHVlLCB0aW1lc3RhbXApIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgICB9XG4gICAgcmV0dXJuIFRpbWVzdGFtcDtcbn0oKSk7XG5leHBvcnRzLlRpbWVzdGFtcCA9IFRpbWVzdGFtcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVzdGFtcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciByZWR1Y2VfMSA9IHJlcXVpcmUoXCIuL3JlZHVjZVwiKTtcbmZ1bmN0aW9uIHRvQXJyYXlSZWR1Y2VyKGFyciwgaXRlbSwgaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtpdGVtXTtcbiAgICB9XG4gICAgYXJyLnB1c2goaXRlbSk7XG4gICAgcmV0dXJuIGFycjtcbn1cbmZ1bmN0aW9uIHRvQXJyYXkoKSB7XG4gICAgcmV0dXJuIHJlZHVjZV8xLnJlZHVjZSh0b0FycmF5UmVkdWNlciwgW10pO1xufVxuZXhwb3J0cy50b0FycmF5ID0gdG9BcnJheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvQXJyYXkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9TdWJqZWN0XCIpO1xudmFyIGlubmVyU3Vic2NyaWJlXzEgPSByZXF1aXJlKFwiLi4vaW5uZXJTdWJzY3JpYmVcIik7XG5mdW5jdGlvbiB3aW5kb3cod2luZG93Qm91bmRhcmllcykge1xuICAgIHJldHVybiBmdW5jdGlvbiB3aW5kb3dPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFdpbmRvd09wZXJhdG9yKHdpbmRvd0JvdW5kYXJpZXMpKTtcbiAgICB9O1xufVxuZXhwb3J0cy53aW5kb3cgPSB3aW5kb3c7XG52YXIgV2luZG93T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdpbmRvd09wZXJhdG9yKHdpbmRvd0JvdW5kYXJpZXMpIHtcbiAgICAgICAgdGhpcy53aW5kb3dCb3VuZGFyaWVzID0gd2luZG93Qm91bmRhcmllcztcbiAgICB9XG4gICAgV2luZG93T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHZhciB3aW5kb3dTdWJzY3JpYmVyID0gbmV3IFdpbmRvd1N1YnNjcmliZXIoc3Vic2NyaWJlcik7XG4gICAgICAgIHZhciBzb3VyY2VTdWJzY3JpcHRpb24gPSBzb3VyY2Uuc3Vic2NyaWJlKHdpbmRvd1N1YnNjcmliZXIpO1xuICAgICAgICBpZiAoIXNvdXJjZVN1YnNjcmlwdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgIHdpbmRvd1N1YnNjcmliZXIuYWRkKGlubmVyU3Vic2NyaWJlXzEuaW5uZXJTdWJzY3JpYmUodGhpcy53aW5kb3dCb3VuZGFyaWVzLCBuZXcgaW5uZXJTdWJzY3JpYmVfMS5TaW1wbGVJbm5lclN1YnNjcmliZXIod2luZG93U3Vic2NyaWJlcikpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlU3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd09wZXJhdG9yO1xufSgpKTtcbnZhciBXaW5kb3dTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoV2luZG93U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBXaW5kb3dTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy53aW5kb3cgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dChfdGhpcy53aW5kb3cpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub3BlbldpbmRvdygpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5fZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLndpbmRvdy5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy53aW5kb3cuZXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLndpbmRvdy5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMud2luZG93ID0gbnVsbDtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm9wZW5XaW5kb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwcmV2V2luZG93ID0gdGhpcy53aW5kb3c7XG4gICAgICAgIGlmIChwcmV2V2luZG93KSB7XG4gICAgICAgICAgICBwcmV2V2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgdmFyIG5ld1dpbmRvdyA9IHRoaXMud2luZG93ID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQobmV3V2luZG93KTtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dTdWJzY3JpYmVyO1xufShpbm5lclN1YnNjcmliZV8xLlNpbXBsZU91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vU3ViamVjdFwiKTtcbmZ1bmN0aW9uIHdpbmRvd0NvdW50KHdpbmRvd1NpemUsIHN0YXJ0V2luZG93RXZlcnkpIHtcbiAgICBpZiAoc3RhcnRXaW5kb3dFdmVyeSA9PT0gdm9pZCAwKSB7IHN0YXJ0V2luZG93RXZlcnkgPSAwOyB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHdpbmRvd0NvdW50T3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBXaW5kb3dDb3VudE9wZXJhdG9yKHdpbmRvd1NpemUsIHN0YXJ0V2luZG93RXZlcnkpKTtcbiAgICB9O1xufVxuZXhwb3J0cy53aW5kb3dDb3VudCA9IHdpbmRvd0NvdW50O1xudmFyIFdpbmRvd0NvdW50T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdpbmRvd0NvdW50T3BlcmF0b3Iod2luZG93U2l6ZSwgc3RhcnRXaW5kb3dFdmVyeSkge1xuICAgICAgICB0aGlzLndpbmRvd1NpemUgPSB3aW5kb3dTaXplO1xuICAgICAgICB0aGlzLnN0YXJ0V2luZG93RXZlcnkgPSBzdGFydFdpbmRvd0V2ZXJ5O1xuICAgIH1cbiAgICBXaW5kb3dDb3VudE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgV2luZG93Q291bnRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMud2luZG93U2l6ZSwgdGhpcy5zdGFydFdpbmRvd0V2ZXJ5KSk7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93Q291bnRPcGVyYXRvcjtcbn0oKSk7XG52YXIgV2luZG93Q291bnRTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoV2luZG93Q291bnRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFdpbmRvd0NvdW50U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgd2luZG93U2l6ZSwgc3RhcnRXaW5kb3dFdmVyeSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgX3RoaXMud2luZG93U2l6ZSA9IHdpbmRvd1NpemU7XG4gICAgICAgIF90aGlzLnN0YXJ0V2luZG93RXZlcnkgPSBzdGFydFdpbmRvd0V2ZXJ5O1xuICAgICAgICBfdGhpcy53aW5kb3dzID0gW25ldyBTdWJqZWN0XzEuU3ViamVjdCgpXTtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KF90aGlzLndpbmRvd3NbMF0pO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFdpbmRvd0NvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHN0YXJ0V2luZG93RXZlcnkgPSAodGhpcy5zdGFydFdpbmRvd0V2ZXJ5ID4gMCkgPyB0aGlzLnN0YXJ0V2luZG93RXZlcnkgOiB0aGlzLndpbmRvd1NpemU7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIHZhciB3aW5kb3dTaXplID0gdGhpcy53aW5kb3dTaXplO1xuICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcbiAgICAgICAgdmFyIGxlbiA9IHdpbmRvd3MubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbiAmJiAhdGhpcy5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgd2luZG93c1tpXS5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYyA9IHRoaXMuY291bnQgLSB3aW5kb3dTaXplICsgMTtcbiAgICAgICAgaWYgKGMgPj0gMCAmJiBjICUgc3RhcnRXaW5kb3dFdmVyeSA9PT0gMCAmJiAhdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHdpbmRvd3Muc2hpZnQoKS5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgrK3RoaXMuY291bnQgJSBzdGFydFdpbmRvd0V2ZXJ5ID09PSAwICYmICF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdmFyIHdpbmRvd18xID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG4gICAgICAgICAgICB3aW5kb3dzLnB1c2god2luZG93XzEpO1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh3aW5kb3dfMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdpbmRvd0NvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcbiAgICAgICAgaWYgKHdpbmRvd3MpIHtcbiAgICAgICAgICAgIHdoaWxlICh3aW5kb3dzLmxlbmd0aCA+IDAgJiYgIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgd2luZG93cy5zaGlmdCgpLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgV2luZG93Q291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3aW5kb3dzID0gdGhpcy53aW5kb3dzO1xuICAgICAgICBpZiAod2luZG93cykge1xuICAgICAgICAgICAgd2hpbGUgKHdpbmRvd3MubGVuZ3RoID4gMCAmJiAhdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dzLnNoaWZ0KCkuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBXaW5kb3dDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHRoaXMud2luZG93cyA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93Q291bnRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93Q291bnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9TdWJqZWN0XCIpO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2FzeW5jXCIpO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xudmFyIGlzTnVtZXJpY18xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNOdW1lcmljXCIpO1xudmFyIGlzU2NoZWR1bGVyXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc1NjaGVkdWxlclwiKTtcbmZ1bmN0aW9uIHdpbmRvd1RpbWUod2luZG93VGltZVNwYW4pIHtcbiAgICB2YXIgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYztcbiAgICB2YXIgd2luZG93Q3JlYXRpb25JbnRlcnZhbCA9IG51bGw7XG4gICAgdmFyIG1heFdpbmRvd1NpemUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgaWYgKGlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIoYXJndW1lbnRzWzNdKSkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhcmd1bWVudHNbM107XG4gICAgfVxuICAgIGlmIChpc1NjaGVkdWxlcl8xLmlzU2NoZWR1bGVyKGFyZ3VtZW50c1syXSkpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXJndW1lbnRzWzJdO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc051bWVyaWNfMS5pc051bWVyaWMoYXJndW1lbnRzWzJdKSkge1xuICAgICAgICBtYXhXaW5kb3dTaXplID0gTnVtYmVyKGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICAgIGlmIChpc1NjaGVkdWxlcl8xLmlzU2NoZWR1bGVyKGFyZ3VtZW50c1sxXSkpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXJndW1lbnRzWzFdO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc051bWVyaWNfMS5pc051bWVyaWMoYXJndW1lbnRzWzFdKSkge1xuICAgICAgICB3aW5kb3dDcmVhdGlvbkludGVydmFsID0gTnVtYmVyKGFyZ3VtZW50c1sxXSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB3aW5kb3dUaW1lT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBXaW5kb3dUaW1lT3BlcmF0b3Iod2luZG93VGltZVNwYW4sIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwsIG1heFdpbmRvd1NpemUsIHNjaGVkdWxlcikpO1xuICAgIH07XG59XG5leHBvcnRzLndpbmRvd1RpbWUgPSB3aW5kb3dUaW1lO1xudmFyIFdpbmRvd1RpbWVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2luZG93VGltZU9wZXJhdG9yKHdpbmRvd1RpbWVTcGFuLCB3aW5kb3dDcmVhdGlvbkludGVydmFsLCBtYXhXaW5kb3dTaXplLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdGhpcy53aW5kb3dUaW1lU3BhbiA9IHdpbmRvd1RpbWVTcGFuO1xuICAgICAgICB0aGlzLndpbmRvd0NyZWF0aW9uSW50ZXJ2YWwgPSB3aW5kb3dDcmVhdGlvbkludGVydmFsO1xuICAgICAgICB0aGlzLm1heFdpbmRvd1NpemUgPSBtYXhXaW5kb3dTaXplO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgV2luZG93VGltZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgV2luZG93VGltZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy53aW5kb3dUaW1lU3BhbiwgdGhpcy53aW5kb3dDcmVhdGlvbkludGVydmFsLCB0aGlzLm1heFdpbmRvd1NpemUsIHRoaXMuc2NoZWR1bGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93VGltZU9wZXJhdG9yO1xufSgpKTtcbnZhciBDb3VudGVkU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvdW50ZWRTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvdW50ZWRTdWJqZWN0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX251bWJlck9mTmV4dGVkVmFsdWVzID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb3VudGVkU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9udW1iZXJPZk5leHRlZFZhbHVlcysrO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm5leHQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ291bnRlZFN1YmplY3QucHJvdG90eXBlLCBcIm51bWJlck9mTmV4dGVkVmFsdWVzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbnVtYmVyT2ZOZXh0ZWRWYWx1ZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBDb3VudGVkU3ViamVjdDtcbn0oU3ViamVjdF8xLlN1YmplY3QpKTtcbnZhciBXaW5kb3dUaW1lU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFdpbmRvd1RpbWVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFdpbmRvd1RpbWVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCB3aW5kb3dUaW1lU3Bhbiwgd2luZG93Q3JlYXRpb25JbnRlcnZhbCwgbWF4V2luZG93U2l6ZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy53aW5kb3dUaW1lU3BhbiA9IHdpbmRvd1RpbWVTcGFuO1xuICAgICAgICBfdGhpcy53aW5kb3dDcmVhdGlvbkludGVydmFsID0gd2luZG93Q3JlYXRpb25JbnRlcnZhbDtcbiAgICAgICAgX3RoaXMubWF4V2luZG93U2l6ZSA9IG1heFdpbmRvd1NpemU7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud2luZG93cyA9IFtdO1xuICAgICAgICB2YXIgd2luZG93ID0gX3RoaXMub3BlbldpbmRvdygpO1xuICAgICAgICBpZiAod2luZG93Q3JlYXRpb25JbnRlcnZhbCAhPT0gbnVsbCAmJiB3aW5kb3dDcmVhdGlvbkludGVydmFsID49IDApIHtcbiAgICAgICAgICAgIHZhciBjbG9zZVN0YXRlID0geyBzdWJzY3JpYmVyOiBfdGhpcywgd2luZG93OiB3aW5kb3csIGNvbnRleHQ6IG51bGwgfTtcbiAgICAgICAgICAgIHZhciBjcmVhdGlvblN0YXRlID0geyB3aW5kb3dUaW1lU3Bhbjogd2luZG93VGltZVNwYW4sIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWw6IHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwsIHN1YnNjcmliZXI6IF90aGlzLCBzY2hlZHVsZXI6IHNjaGVkdWxlciB9O1xuICAgICAgICAgICAgX3RoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaFdpbmRvd0Nsb3NlLCB3aW5kb3dUaW1lU3BhbiwgY2xvc2VTdGF0ZSkpO1xuICAgICAgICAgICAgX3RoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaFdpbmRvd0NyZWF0aW9uLCB3aW5kb3dDcmVhdGlvbkludGVydmFsLCBjcmVhdGlvblN0YXRlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGltZVNwYW5Pbmx5U3RhdGUgPSB7IHN1YnNjcmliZXI6IF90aGlzLCB3aW5kb3c6IHdpbmRvdywgd2luZG93VGltZVNwYW46IHdpbmRvd1RpbWVTcGFuIH07XG4gICAgICAgICAgICBfdGhpcy5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoV2luZG93VGltZVNwYW5Pbmx5LCB3aW5kb3dUaW1lU3BhbiwgdGltZVNwYW5Pbmx5U3RhdGUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFdpbmRvd1RpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcbiAgICAgICAgdmFyIGxlbiA9IHdpbmRvd3MubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgd2luZG93XzEgPSB3aW5kb3dzW2ldO1xuICAgICAgICAgICAgaWYgKCF3aW5kb3dfMS5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dfMS5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAod2luZG93XzEubnVtYmVyT2ZOZXh0ZWRWYWx1ZXMgPj0gdGhpcy5tYXhXaW5kb3dTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VXaW5kb3cod2luZG93XzEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgV2luZG93VGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHdpbmRvd3MgPSB0aGlzLndpbmRvd3M7XG4gICAgICAgIHdoaWxlICh3aW5kb3dzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHdpbmRvd3Muc2hpZnQoKS5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICB9O1xuICAgIFdpbmRvd1RpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3aW5kb3dzID0gdGhpcy53aW5kb3dzO1xuICAgICAgICB3aGlsZSAod2luZG93cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgd2luZG93XzIgPSB3aW5kb3dzLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAoIXdpbmRvd18yLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHdpbmRvd18yLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgV2luZG93VGltZVN1YnNjcmliZXIucHJvdG90eXBlLm9wZW5XaW5kb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3aW5kb3cgPSBuZXcgQ291bnRlZFN1YmplY3QoKTtcbiAgICAgICAgdGhpcy53aW5kb3dzLnB1c2god2luZG93KTtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dCh3aW5kb3cpO1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIH07XG4gICAgV2luZG93VGltZVN1YnNjcmliZXIucHJvdG90eXBlLmNsb3NlV2luZG93ID0gZnVuY3Rpb24gKHdpbmRvdykge1xuICAgICAgICB3aW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgdmFyIHdpbmRvd3MgPSB0aGlzLndpbmRvd3M7XG4gICAgICAgIHdpbmRvd3Muc3BsaWNlKHdpbmRvd3MuaW5kZXhPZih3aW5kb3cpLCAxKTtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dUaW1lU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmZ1bmN0aW9uIGRpc3BhdGNoV2luZG93VGltZVNwYW5Pbmx5KHN0YXRlKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCB3aW5kb3dUaW1lU3BhbiA9IHN0YXRlLndpbmRvd1RpbWVTcGFuLCB3aW5kb3cgPSBzdGF0ZS53aW5kb3c7XG4gICAgaWYgKHdpbmRvdykge1xuICAgICAgICBzdWJzY3JpYmVyLmNsb3NlV2luZG93KHdpbmRvdyk7XG4gICAgfVxuICAgIHN0YXRlLndpbmRvdyA9IHN1YnNjcmliZXIub3BlbldpbmRvdygpO1xuICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUsIHdpbmRvd1RpbWVTcGFuKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoV2luZG93Q3JlYXRpb24oc3RhdGUpIHtcbiAgICB2YXIgd2luZG93VGltZVNwYW4gPSBzdGF0ZS53aW5kb3dUaW1lU3Bhbiwgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIHNjaGVkdWxlciA9IHN0YXRlLnNjaGVkdWxlciwgd2luZG93Q3JlYXRpb25JbnRlcnZhbCA9IHN0YXRlLndpbmRvd0NyZWF0aW9uSW50ZXJ2YWw7XG4gICAgdmFyIHdpbmRvdyA9IHN1YnNjcmliZXIub3BlbldpbmRvdygpO1xuICAgIHZhciBhY3Rpb24gPSB0aGlzO1xuICAgIHZhciBjb250ZXh0ID0geyBhY3Rpb246IGFjdGlvbiwgc3Vic2NyaXB0aW9uOiBudWxsIH07XG4gICAgdmFyIHRpbWVTcGFuU3RhdGUgPSB7IHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIHdpbmRvdzogd2luZG93LCBjb250ZXh0OiBjb250ZXh0IH07XG4gICAgY29udGV4dC5zdWJzY3JpcHRpb24gPSBzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hXaW5kb3dDbG9zZSwgd2luZG93VGltZVNwYW4sIHRpbWVTcGFuU3RhdGUpO1xuICAgIGFjdGlvbi5hZGQoY29udGV4dC5zdWJzY3JpcHRpb24pO1xuICAgIGFjdGlvbi5zY2hlZHVsZShzdGF0ZSwgd2luZG93Q3JlYXRpb25JbnRlcnZhbCk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaFdpbmRvd0Nsb3NlKHN0YXRlKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCB3aW5kb3cgPSBzdGF0ZS53aW5kb3csIGNvbnRleHQgPSBzdGF0ZS5jb250ZXh0O1xuICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuYWN0aW9uICYmIGNvbnRleHQuc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIGNvbnRleHQuYWN0aW9uLnJlbW92ZShjb250ZXh0LnN1YnNjcmlwdGlvbik7XG4gICAgfVxuICAgIHN1YnNjcmliZXIuY2xvc2VXaW5kb3cod2luZG93KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1RpbWUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9TdWJqZWN0XCIpO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmlwdGlvblwiKTtcbnZhciBPdXRlclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9PdXRlclN1YnNjcmliZXJcIik7XG52YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0XCIpO1xuZnVuY3Rpb24gd2luZG93VG9nZ2xlKG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFdpbmRvd1RvZ2dsZU9wZXJhdG9yKG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpKTsgfTtcbn1cbmV4cG9ydHMud2luZG93VG9nZ2xlID0gd2luZG93VG9nZ2xlO1xudmFyIFdpbmRvd1RvZ2dsZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXaW5kb3dUb2dnbGVPcGVyYXRvcihvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMub3BlbmluZ3MgPSBvcGVuaW5ncztcbiAgICAgICAgdGhpcy5jbG9zaW5nU2VsZWN0b3IgPSBjbG9zaW5nU2VsZWN0b3I7XG4gICAgfVxuICAgIFdpbmRvd1RvZ2dsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgV2luZG93VG9nZ2xlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm9wZW5pbmdzLCB0aGlzLmNsb3NpbmdTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd1RvZ2dsZU9wZXJhdG9yO1xufSgpKTtcbnZhciBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoV2luZG93VG9nZ2xlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vcGVuaW5ncyA9IG9wZW5pbmdzO1xuICAgICAgICBfdGhpcy5jbG9zaW5nU2VsZWN0b3IgPSBjbG9zaW5nU2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmNvbnRleHRzID0gW107XG4gICAgICAgIF90aGlzLmFkZChfdGhpcy5vcGVuU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdChfdGhpcywgb3BlbmluZ3MsIG9wZW5pbmdzKSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgaWYgKGNvbnRleHRzKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gY29udGV4dHMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnRleHRzW2ldLndpbmRvdy5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICB0aGlzLmNvbnRleHRzID0gbnVsbDtcbiAgICAgICAgaWYgKGNvbnRleHRzKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gY29udGV4dHMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbikge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0XzEgPSBjb250ZXh0c1tpbmRleF07XG4gICAgICAgICAgICAgICAgY29udGV4dF8xLndpbmRvdy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMS5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9lcnJvci5jYWxsKHRoaXMsIGVycik7XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHRoaXMuY29udGV4dHMgPSBudWxsO1xuICAgICAgICBpZiAoY29udGV4dHMpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHRfMiA9IGNvbnRleHRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzIud2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dF8yLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHRoaXMuY29udGV4dHMgPSBudWxsO1xuICAgICAgICBpZiAoY29udGV4dHMpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHRfMyA9IGNvbnRleHRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzMud2luZG93LnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dF8zLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIGlmIChvdXRlclZhbHVlID09PSB0aGlzLm9wZW5pbmdzKSB7XG4gICAgICAgICAgICB2YXIgY2xvc2luZ05vdGlmaWVyID0gdm9pZCAwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgY2xvc2luZ1NlbGVjdG9yID0gdGhpcy5jbG9zaW5nU2VsZWN0b3I7XG4gICAgICAgICAgICAgICAgY2xvc2luZ05vdGlmaWVyID0gY2xvc2luZ1NlbGVjdG9yKGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB3aW5kb3dfMSA9IG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgIHZhciBjb250ZXh0XzQgPSB7IHdpbmRvdzogd2luZG93XzEsIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uIH07XG4gICAgICAgICAgICB0aGlzLmNvbnRleHRzLnB1c2goY29udGV4dF80KTtcbiAgICAgICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgY2xvc2luZ05vdGlmaWVyLCBjb250ZXh0XzQpO1xuICAgICAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VXaW5kb3codGhpcy5jb250ZXh0cy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlubmVyU3Vic2NyaXB0aW9uLmNvbnRleHQgPSBjb250ZXh0XzQ7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChpbm5lclN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQod2luZG93XzEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jbG9zZVdpbmRvdyh0aGlzLmNvbnRleHRzLmluZGV4T2Yob3V0ZXJWYWx1ZSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXIpIHtcbiAgICAgICAgaWYgKGlubmVyICE9PSB0aGlzLm9wZW5TdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VXaW5kb3codGhpcy5jb250ZXh0cy5pbmRleE9mKGlubmVyLmNvbnRleHQpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuY2xvc2VXaW5kb3cgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHZhciBjb250ZXh0ID0gY29udGV4dHNbaW5kZXhdO1xuICAgICAgICB2YXIgd2luZG93ID0gY29udGV4dC53aW5kb3csIHN1YnNjcmlwdGlvbiA9IGNvbnRleHQuc3Vic2NyaXB0aW9uO1xuICAgICAgICBjb250ZXh0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB3aW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93VG9nZ2xlU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3dUb2dnbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9TdWJqZWN0XCIpO1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL091dGVyU3Vic2NyaWJlclwiKTtcbnZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHRcIik7XG5mdW5jdGlvbiB3aW5kb3dXaGVuKGNsb3NpbmdTZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiB3aW5kb3dXaGVuT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBXaW5kb3dPcGVyYXRvcihjbG9zaW5nU2VsZWN0b3IpKTtcbiAgICB9O1xufVxuZXhwb3J0cy53aW5kb3dXaGVuID0gd2luZG93V2hlbjtcbnZhciBXaW5kb3dPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2luZG93T3BlcmF0b3IoY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuICAgIH1cbiAgICBXaW5kb3dPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFdpbmRvd1N1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5jbG9zaW5nU2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dPcGVyYXRvcjtcbn0oKSk7XG52YXIgV2luZG93U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFdpbmRvd1N1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2luZG93U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy5jbG9zaW5nU2VsZWN0b3IgPSBjbG9zaW5nU2VsZWN0b3I7XG4gICAgICAgIF90aGlzLm9wZW5XaW5kb3coKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKF9vdXRlclZhbHVlLCBfaW5uZXJWYWx1ZSwgX291dGVySW5kZXgsIF9pbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLm9wZW5XaW5kb3coaW5uZXJTdWIpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5fZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5vcGVuV2luZG93KGlubmVyU3ViKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMud2luZG93Lm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLndpbmRvdy5lcnJvcihlcnIpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmVDbG9zaW5nTm90aWZpY2F0aW9uKCk7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMud2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZUNsb3NpbmdOb3RpZmljYXRpb24oKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlQ2xvc2luZ05vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2luZ05vdGlmaWNhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jbG9zaW5nTm90aWZpY2F0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm9wZW5XaW5kb3cgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgaWYgKGlubmVyU3ViID09PSB2b2lkIDApIHsgaW5uZXJTdWIgPSBudWxsOyB9XG4gICAgICAgIGlmIChpbm5lclN1Yikge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoaW5uZXJTdWIpO1xuICAgICAgICAgICAgaW5uZXJTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldldpbmRvdyA9IHRoaXMud2luZG93O1xuICAgICAgICBpZiAocHJldldpbmRvdykge1xuICAgICAgICAgICAgcHJldldpbmRvdy5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3aW5kb3cgPSB0aGlzLndpbmRvdyA9IG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQod2luZG93KTtcbiAgICAgICAgdmFyIGNsb3NpbmdOb3RpZmllcjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBjbG9zaW5nU2VsZWN0b3IgPSB0aGlzLmNsb3NpbmdTZWxlY3RvcjtcbiAgICAgICAgICAgIGNsb3NpbmdOb3RpZmllciA9IGNsb3NpbmdTZWxlY3RvcigpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGUpO1xuICAgICAgICAgICAgdGhpcy53aW5kb3cuZXJyb3IoZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGQodGhpcy5jbG9zaW5nTm90aWZpY2F0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBjbG9zaW5nTm90aWZpZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1doZW4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL091dGVyU3Vic2NyaWJlclwiKTtcbnZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHRcIik7XG5mdW5jdGlvbiB3aXRoTGF0ZXN0RnJvbSgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgdmFyIHByb2plY3Q7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBwcm9qZWN0ID0gYXJncy5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb2JzZXJ2YWJsZXMgPSBhcmdzO1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFdpdGhMYXRlc3RGcm9tT3BlcmF0b3Iob2JzZXJ2YWJsZXMsIHByb2plY3QpKTtcbiAgICB9O1xufVxuZXhwb3J0cy53aXRoTGF0ZXN0RnJvbSA9IHdpdGhMYXRlc3RGcm9tO1xudmFyIFdpdGhMYXRlc3RGcm9tT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdpdGhMYXRlc3RGcm9tT3BlcmF0b3Iob2JzZXJ2YWJsZXMsIHByb2plY3QpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlcyA9IG9ic2VydmFibGVzO1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgIH1cbiAgICBXaXRoTGF0ZXN0RnJvbU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMub2JzZXJ2YWJsZXMsIHRoaXMucHJvamVjdCkpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpdGhMYXRlc3RGcm9tT3BlcmF0b3I7XG59KCkpO1xudmFyIFdpdGhMYXRlc3RGcm9tU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFdpdGhMYXRlc3RGcm9tU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9ic2VydmFibGVzLCBwcm9qZWN0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vYnNlcnZhYmxlcyA9IG9ic2VydmFibGVzO1xuICAgICAgICBfdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgX3RoaXMudG9SZXNwb25kID0gW107XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZhYmxlcy5sZW5ndGg7XG4gICAgICAgIF90aGlzLnZhbHVlcyA9IG5ldyBBcnJheShsZW4pO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBfdGhpcy50b1Jlc3BvbmQucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG9ic2VydmFibGVzW2ldO1xuICAgICAgICAgICAgX3RoaXMuYWRkKHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQoX3RoaXMsIG9ic2VydmFibGUsIHVuZGVmaW5lZCwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKF9vdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4KSB7XG4gICAgICAgIHRoaXMudmFsdWVzW291dGVySW5kZXhdID0gaW5uZXJWYWx1ZTtcbiAgICAgICAgdmFyIHRvUmVzcG9uZCA9IHRoaXMudG9SZXNwb25kO1xuICAgICAgICBpZiAodG9SZXNwb25kLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBmb3VuZCA9IHRvUmVzcG9uZC5pbmRleE9mKG91dGVySW5kZXgpO1xuICAgICAgICAgICAgaWYgKGZvdW5kICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHRvUmVzcG9uZC5zcGxpY2UoZm91bmQsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgIH07XG4gICAgV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy50b1Jlc3BvbmQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFt2YWx1ZV0uY29uY2F0KHRoaXMudmFsdWVzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb2plY3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cnlQcm9qZWN0KGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIucHJvdG90eXBlLl90cnlQcm9qZWN0ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJvamVjdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpdGhMYXRlc3RGcm9tLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHppcF8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvemlwXCIpO1xuZnVuY3Rpb24gemlwKCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB6aXBPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQuY2FsbCh6aXBfMS56aXAuYXBwbHkodm9pZCAwLCBbc291cmNlXS5jb25jYXQob2JzZXJ2YWJsZXMpKSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuemlwID0gemlwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9emlwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHppcF8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvemlwXCIpO1xuZnVuY3Rpb24gemlwQWxsKHByb2plY3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IHppcF8xLlppcE9wZXJhdG9yKHByb2plY3QpKTsgfTtcbn1cbmV4cG9ydHMuemlwQWxsID0gemlwQWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9emlwQWxsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGF1ZGl0XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2F1ZGl0XCIpO1xuZXhwb3J0cy5hdWRpdCA9IGF1ZGl0XzEuYXVkaXQ7XG52YXIgYXVkaXRUaW1lXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2F1ZGl0VGltZVwiKTtcbmV4cG9ydHMuYXVkaXRUaW1lID0gYXVkaXRUaW1lXzEuYXVkaXRUaW1lO1xudmFyIGJ1ZmZlcl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJcIik7XG5leHBvcnRzLmJ1ZmZlciA9IGJ1ZmZlcl8xLmJ1ZmZlcjtcbnZhciBidWZmZXJDb3VudF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJDb3VudFwiKTtcbmV4cG9ydHMuYnVmZmVyQ291bnQgPSBidWZmZXJDb3VudF8xLmJ1ZmZlckNvdW50O1xudmFyIGJ1ZmZlclRpbWVfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyVGltZVwiKTtcbmV4cG9ydHMuYnVmZmVyVGltZSA9IGJ1ZmZlclRpbWVfMS5idWZmZXJUaW1lO1xudmFyIGJ1ZmZlclRvZ2dsZV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJUb2dnbGVcIik7XG5leHBvcnRzLmJ1ZmZlclRvZ2dsZSA9IGJ1ZmZlclRvZ2dsZV8xLmJ1ZmZlclRvZ2dsZTtcbnZhciBidWZmZXJXaGVuXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlcldoZW5cIik7XG5leHBvcnRzLmJ1ZmZlcldoZW4gPSBidWZmZXJXaGVuXzEuYnVmZmVyV2hlbjtcbnZhciBjYXRjaEVycm9yXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NhdGNoRXJyb3JcIik7XG5leHBvcnRzLmNhdGNoRXJyb3IgPSBjYXRjaEVycm9yXzEuY2F0Y2hFcnJvcjtcbnZhciBjb21iaW5lQWxsXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NvbWJpbmVBbGxcIik7XG5leHBvcnRzLmNvbWJpbmVBbGwgPSBjb21iaW5lQWxsXzEuY29tYmluZUFsbDtcbnZhciBjb21iaW5lTGF0ZXN0XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NvbWJpbmVMYXRlc3RcIik7XG5leHBvcnRzLmNvbWJpbmVMYXRlc3QgPSBjb21iaW5lTGF0ZXN0XzEuY29tYmluZUxhdGVzdDtcbnZhciBjb25jYXRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0XCIpO1xuZXhwb3J0cy5jb25jYXQgPSBjb25jYXRfMS5jb25jYXQ7XG52YXIgY29uY2F0QWxsXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdEFsbFwiKTtcbmV4cG9ydHMuY29uY2F0QWxsID0gY29uY2F0QWxsXzEuY29uY2F0QWxsO1xudmFyIGNvbmNhdE1hcF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRNYXBcIik7XG5leHBvcnRzLmNvbmNhdE1hcCA9IGNvbmNhdE1hcF8xLmNvbmNhdE1hcDtcbnZhciBjb25jYXRNYXBUb18xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRNYXBUb1wiKTtcbmV4cG9ydHMuY29uY2F0TWFwVG8gPSBjb25jYXRNYXBUb18xLmNvbmNhdE1hcFRvO1xudmFyIGNvdW50XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NvdW50XCIpO1xuZXhwb3J0cy5jb3VudCA9IGNvdW50XzEuY291bnQ7XG52YXIgZGVib3VuY2VfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVib3VuY2VcIik7XG5leHBvcnRzLmRlYm91bmNlID0gZGVib3VuY2VfMS5kZWJvdW5jZTtcbnZhciBkZWJvdW5jZVRpbWVfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVib3VuY2VUaW1lXCIpO1xuZXhwb3J0cy5kZWJvdW5jZVRpbWUgPSBkZWJvdW5jZVRpbWVfMS5kZWJvdW5jZVRpbWU7XG52YXIgZGVmYXVsdElmRW1wdHlfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVmYXVsdElmRW1wdHlcIik7XG5leHBvcnRzLmRlZmF1bHRJZkVtcHR5ID0gZGVmYXVsdElmRW1wdHlfMS5kZWZhdWx0SWZFbXB0eTtcbnZhciBkZWxheV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9kZWxheVwiKTtcbmV4cG9ydHMuZGVsYXkgPSBkZWxheV8xLmRlbGF5O1xudmFyIGRlbGF5V2hlbl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9kZWxheVdoZW5cIik7XG5leHBvcnRzLmRlbGF5V2hlbiA9IGRlbGF5V2hlbl8xLmRlbGF5V2hlbjtcbnZhciBkZW1hdGVyaWFsaXplXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2RlbWF0ZXJpYWxpemVcIik7XG5leHBvcnRzLmRlbWF0ZXJpYWxpemUgPSBkZW1hdGVyaWFsaXplXzEuZGVtYXRlcmlhbGl6ZTtcbnZhciBkaXN0aW5jdF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdFwiKTtcbmV4cG9ydHMuZGlzdGluY3QgPSBkaXN0aW5jdF8xLmRpc3RpbmN0O1xudmFyIGRpc3RpbmN0VW50aWxDaGFuZ2VkXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0VW50aWxDaGFuZ2VkXCIpO1xuZXhwb3J0cy5kaXN0aW5jdFVudGlsQ2hhbmdlZCA9IGRpc3RpbmN0VW50aWxDaGFuZ2VkXzEuZGlzdGluY3RVbnRpbENoYW5nZWQ7XG52YXIgZGlzdGluY3RVbnRpbEtleUNoYW5nZWRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGlzdGluY3RVbnRpbEtleUNoYW5nZWRcIik7XG5leHBvcnRzLmRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkID0gZGlzdGluY3RVbnRpbEtleUNoYW5nZWRfMS5kaXN0aW5jdFVudGlsS2V5Q2hhbmdlZDtcbnZhciBlbGVtZW50QXRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZWxlbWVudEF0XCIpO1xuZXhwb3J0cy5lbGVtZW50QXQgPSBlbGVtZW50QXRfMS5lbGVtZW50QXQ7XG52YXIgZW5kV2l0aF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9lbmRXaXRoXCIpO1xuZXhwb3J0cy5lbmRXaXRoID0gZW5kV2l0aF8xLmVuZFdpdGg7XG52YXIgZXZlcnlfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZXZlcnlcIik7XG5leHBvcnRzLmV2ZXJ5ID0gZXZlcnlfMS5ldmVyeTtcbnZhciBleGhhdXN0XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2V4aGF1c3RcIik7XG5leHBvcnRzLmV4aGF1c3QgPSBleGhhdXN0XzEuZXhoYXVzdDtcbnZhciBleGhhdXN0TWFwXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2V4aGF1c3RNYXBcIik7XG5leHBvcnRzLmV4aGF1c3RNYXAgPSBleGhhdXN0TWFwXzEuZXhoYXVzdE1hcDtcbnZhciBleHBhbmRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZXhwYW5kXCIpO1xuZXhwb3J0cy5leHBhbmQgPSBleHBhbmRfMS5leHBhbmQ7XG52YXIgZmlsdGVyXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbHRlclwiKTtcbmV4cG9ydHMuZmlsdGVyID0gZmlsdGVyXzEuZmlsdGVyO1xudmFyIGZpbmFsaXplXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbmFsaXplXCIpO1xuZXhwb3J0cy5maW5hbGl6ZSA9IGZpbmFsaXplXzEuZmluYWxpemU7XG52YXIgZmluZF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9maW5kXCIpO1xuZXhwb3J0cy5maW5kID0gZmluZF8xLmZpbmQ7XG52YXIgZmluZEluZGV4XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbmRJbmRleFwiKTtcbmV4cG9ydHMuZmluZEluZGV4ID0gZmluZEluZGV4XzEuZmluZEluZGV4O1xudmFyIGZpcnN0XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpcnN0XCIpO1xuZXhwb3J0cy5maXJzdCA9IGZpcnN0XzEuZmlyc3Q7XG52YXIgZ3JvdXBCeV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9ncm91cEJ5XCIpO1xuZXhwb3J0cy5ncm91cEJ5ID0gZ3JvdXBCeV8xLmdyb3VwQnk7XG52YXIgaWdub3JlRWxlbWVudHNfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvaWdub3JlRWxlbWVudHNcIik7XG5leHBvcnRzLmlnbm9yZUVsZW1lbnRzID0gaWdub3JlRWxlbWVudHNfMS5pZ25vcmVFbGVtZW50cztcbnZhciBpc0VtcHR5XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2lzRW1wdHlcIik7XG5leHBvcnRzLmlzRW1wdHkgPSBpc0VtcHR5XzEuaXNFbXB0eTtcbnZhciBsYXN0XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2xhc3RcIik7XG5leHBvcnRzLmxhc3QgPSBsYXN0XzEubGFzdDtcbnZhciBtYXBfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwXCIpO1xuZXhwb3J0cy5tYXAgPSBtYXBfMS5tYXA7XG52YXIgbWFwVG9fMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwVG9cIik7XG5leHBvcnRzLm1hcFRvID0gbWFwVG9fMS5tYXBUbztcbnZhciBtYXRlcmlhbGl6ZV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9tYXRlcmlhbGl6ZVwiKTtcbmV4cG9ydHMubWF0ZXJpYWxpemUgPSBtYXRlcmlhbGl6ZV8xLm1hdGVyaWFsaXplO1xudmFyIG1heF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9tYXhcIik7XG5leHBvcnRzLm1heCA9IG1heF8xLm1heDtcbnZhciBtZXJnZV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZVwiKTtcbmV4cG9ydHMubWVyZ2UgPSBtZXJnZV8xLm1lcmdlO1xudmFyIG1lcmdlQWxsXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlQWxsXCIpO1xuZXhwb3J0cy5tZXJnZUFsbCA9IG1lcmdlQWxsXzEubWVyZ2VBbGw7XG52YXIgbWVyZ2VNYXBfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXBcIik7XG5leHBvcnRzLm1lcmdlTWFwID0gbWVyZ2VNYXBfMS5tZXJnZU1hcDtcbmV4cG9ydHMuZmxhdE1hcCA9IG1lcmdlTWFwXzEuZmxhdE1hcDtcbnZhciBtZXJnZU1hcFRvXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwVG9cIik7XG5leHBvcnRzLm1lcmdlTWFwVG8gPSBtZXJnZU1hcFRvXzEubWVyZ2VNYXBUbztcbnZhciBtZXJnZVNjYW5fMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VTY2FuXCIpO1xuZXhwb3J0cy5tZXJnZVNjYW4gPSBtZXJnZVNjYW5fMS5tZXJnZVNjYW47XG52YXIgbWluXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL21pblwiKTtcbmV4cG9ydHMubWluID0gbWluXzEubWluO1xudmFyIG11bHRpY2FzdF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9tdWx0aWNhc3RcIik7XG5leHBvcnRzLm11bHRpY2FzdCA9IG11bHRpY2FzdF8xLm11bHRpY2FzdDtcbnZhciBvYnNlcnZlT25fMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvb2JzZXJ2ZU9uXCIpO1xuZXhwb3J0cy5vYnNlcnZlT24gPSBvYnNlcnZlT25fMS5vYnNlcnZlT247XG52YXIgb25FcnJvclJlc3VtZU5leHRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvb25FcnJvclJlc3VtZU5leHRcIik7XG5leHBvcnRzLm9uRXJyb3JSZXN1bWVOZXh0ID0gb25FcnJvclJlc3VtZU5leHRfMS5vbkVycm9yUmVzdW1lTmV4dDtcbnZhciBwYWlyd2lzZV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9wYWlyd2lzZVwiKTtcbmV4cG9ydHMucGFpcndpc2UgPSBwYWlyd2lzZV8xLnBhaXJ3aXNlO1xudmFyIHBhcnRpdGlvbl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9wYXJ0aXRpb25cIik7XG5leHBvcnRzLnBhcnRpdGlvbiA9IHBhcnRpdGlvbl8xLnBhcnRpdGlvbjtcbnZhciBwbHVja18xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9wbHVja1wiKTtcbmV4cG9ydHMucGx1Y2sgPSBwbHVja18xLnBsdWNrO1xudmFyIHB1Ymxpc2hfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaFwiKTtcbmV4cG9ydHMucHVibGlzaCA9IHB1Ymxpc2hfMS5wdWJsaXNoO1xudmFyIHB1Ymxpc2hCZWhhdmlvcl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoQmVoYXZpb3JcIik7XG5leHBvcnRzLnB1Ymxpc2hCZWhhdmlvciA9IHB1Ymxpc2hCZWhhdmlvcl8xLnB1Ymxpc2hCZWhhdmlvcjtcbnZhciBwdWJsaXNoTGFzdF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoTGFzdFwiKTtcbmV4cG9ydHMucHVibGlzaExhc3QgPSBwdWJsaXNoTGFzdF8xLnB1Ymxpc2hMYXN0O1xudmFyIHB1Ymxpc2hSZXBsYXlfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaFJlcGxheVwiKTtcbmV4cG9ydHMucHVibGlzaFJlcGxheSA9IHB1Ymxpc2hSZXBsYXlfMS5wdWJsaXNoUmVwbGF5O1xudmFyIHJhY2VfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmFjZVwiKTtcbmV4cG9ydHMucmFjZSA9IHJhY2VfMS5yYWNlO1xudmFyIHJlZHVjZV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9yZWR1Y2VcIik7XG5leHBvcnRzLnJlZHVjZSA9IHJlZHVjZV8xLnJlZHVjZTtcbnZhciByZXBlYXRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmVwZWF0XCIpO1xuZXhwb3J0cy5yZXBlYXQgPSByZXBlYXRfMS5yZXBlYXQ7XG52YXIgcmVwZWF0V2hlbl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9yZXBlYXRXaGVuXCIpO1xuZXhwb3J0cy5yZXBlYXRXaGVuID0gcmVwZWF0V2hlbl8xLnJlcGVhdFdoZW47XG52YXIgcmV0cnlfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmV0cnlcIik7XG5leHBvcnRzLnJldHJ5ID0gcmV0cnlfMS5yZXRyeTtcbnZhciByZXRyeVdoZW5fMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmV0cnlXaGVuXCIpO1xuZXhwb3J0cy5yZXRyeVdoZW4gPSByZXRyeVdoZW5fMS5yZXRyeVdoZW47XG52YXIgcmVmQ291bnRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmVmQ291bnRcIik7XG5leHBvcnRzLnJlZkNvdW50ID0gcmVmQ291bnRfMS5yZWZDb3VudDtcbnZhciBzYW1wbGVfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2FtcGxlXCIpO1xuZXhwb3J0cy5zYW1wbGUgPSBzYW1wbGVfMS5zYW1wbGU7XG52YXIgc2FtcGxlVGltZV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9zYW1wbGVUaW1lXCIpO1xuZXhwb3J0cy5zYW1wbGVUaW1lID0gc2FtcGxlVGltZV8xLnNhbXBsZVRpbWU7XG52YXIgc2Nhbl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9zY2FuXCIpO1xuZXhwb3J0cy5zY2FuID0gc2Nhbl8xLnNjYW47XG52YXIgc2VxdWVuY2VFcXVhbF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9zZXF1ZW5jZUVxdWFsXCIpO1xuZXhwb3J0cy5zZXF1ZW5jZUVxdWFsID0gc2VxdWVuY2VFcXVhbF8xLnNlcXVlbmNlRXF1YWw7XG52YXIgc2hhcmVfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2hhcmVcIik7XG5leHBvcnRzLnNoYXJlID0gc2hhcmVfMS5zaGFyZTtcbnZhciBzaGFyZVJlcGxheV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9zaGFyZVJlcGxheVwiKTtcbmV4cG9ydHMuc2hhcmVSZXBsYXkgPSBzaGFyZVJlcGxheV8xLnNoYXJlUmVwbGF5O1xudmFyIHNpbmdsZV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9zaW5nbGVcIik7XG5leHBvcnRzLnNpbmdsZSA9IHNpbmdsZV8xLnNpbmdsZTtcbnZhciBza2lwXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3NraXBcIik7XG5leHBvcnRzLnNraXAgPSBza2lwXzEuc2tpcDtcbnZhciBza2lwTGFzdF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9za2lwTGFzdFwiKTtcbmV4cG9ydHMuc2tpcExhc3QgPSBza2lwTGFzdF8xLnNraXBMYXN0O1xudmFyIHNraXBVbnRpbF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9za2lwVW50aWxcIik7XG5leHBvcnRzLnNraXBVbnRpbCA9IHNraXBVbnRpbF8xLnNraXBVbnRpbDtcbnZhciBza2lwV2hpbGVfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcFdoaWxlXCIpO1xuZXhwb3J0cy5za2lwV2hpbGUgPSBza2lwV2hpbGVfMS5za2lwV2hpbGU7XG52YXIgc3RhcnRXaXRoXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3N0YXJ0V2l0aFwiKTtcbmV4cG9ydHMuc3RhcnRXaXRoID0gc3RhcnRXaXRoXzEuc3RhcnRXaXRoO1xudmFyIHN1YnNjcmliZU9uXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3N1YnNjcmliZU9uXCIpO1xuZXhwb3J0cy5zdWJzY3JpYmVPbiA9IHN1YnNjcmliZU9uXzEuc3Vic2NyaWJlT247XG52YXIgc3dpdGNoQWxsXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaEFsbFwiKTtcbmV4cG9ydHMuc3dpdGNoQWxsID0gc3dpdGNoQWxsXzEuc3dpdGNoQWxsO1xudmFyIHN3aXRjaE1hcF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hNYXBcIik7XG5leHBvcnRzLnN3aXRjaE1hcCA9IHN3aXRjaE1hcF8xLnN3aXRjaE1hcDtcbnZhciBzd2l0Y2hNYXBUb18xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hNYXBUb1wiKTtcbmV4cG9ydHMuc3dpdGNoTWFwVG8gPSBzd2l0Y2hNYXBUb18xLnN3aXRjaE1hcFRvO1xudmFyIHRha2VfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZVwiKTtcbmV4cG9ydHMudGFrZSA9IHRha2VfMS50YWtlO1xudmFyIHRha2VMYXN0XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VMYXN0XCIpO1xuZXhwb3J0cy50YWtlTGFzdCA9IHRha2VMYXN0XzEudGFrZUxhc3Q7XG52YXIgdGFrZVVudGlsXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VVbnRpbFwiKTtcbmV4cG9ydHMudGFrZVVudGlsID0gdGFrZVVudGlsXzEudGFrZVVudGlsO1xudmFyIHRha2VXaGlsZV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy90YWtlV2hpbGVcIik7XG5leHBvcnRzLnRha2VXaGlsZSA9IHRha2VXaGlsZV8xLnRha2VXaGlsZTtcbnZhciB0YXBfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGFwXCIpO1xuZXhwb3J0cy50YXAgPSB0YXBfMS50YXA7XG52YXIgdGhyb3R0bGVfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGhyb3R0bGVcIik7XG5leHBvcnRzLnRocm90dGxlID0gdGhyb3R0bGVfMS50aHJvdHRsZTtcbnZhciB0aHJvdHRsZVRpbWVfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGhyb3R0bGVUaW1lXCIpO1xuZXhwb3J0cy50aHJvdHRsZVRpbWUgPSB0aHJvdHRsZVRpbWVfMS50aHJvdHRsZVRpbWU7XG52YXIgdGhyb3dJZkVtcHR5XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3Rocm93SWZFbXB0eVwiKTtcbmV4cG9ydHMudGhyb3dJZkVtcHR5ID0gdGhyb3dJZkVtcHR5XzEudGhyb3dJZkVtcHR5O1xudmFyIHRpbWVJbnRlcnZhbF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy90aW1lSW50ZXJ2YWxcIik7XG5leHBvcnRzLnRpbWVJbnRlcnZhbCA9IHRpbWVJbnRlcnZhbF8xLnRpbWVJbnRlcnZhbDtcbnZhciB0aW1lb3V0XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVvdXRcIik7XG5leHBvcnRzLnRpbWVvdXQgPSB0aW1lb3V0XzEudGltZW91dDtcbnZhciB0aW1lb3V0V2l0aF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy90aW1lb3V0V2l0aFwiKTtcbmV4cG9ydHMudGltZW91dFdpdGggPSB0aW1lb3V0V2l0aF8xLnRpbWVvdXRXaXRoO1xudmFyIHRpbWVzdGFtcF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy90aW1lc3RhbXBcIik7XG5leHBvcnRzLnRpbWVzdGFtcCA9IHRpbWVzdGFtcF8xLnRpbWVzdGFtcDtcbnZhciB0b0FycmF5XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RvQXJyYXlcIik7XG5leHBvcnRzLnRvQXJyYXkgPSB0b0FycmF5XzEudG9BcnJheTtcbnZhciB3aW5kb3dfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93XCIpO1xuZXhwb3J0cy53aW5kb3cgPSB3aW5kb3dfMS53aW5kb3c7XG52YXIgd2luZG93Q291bnRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93Q291bnRcIik7XG5leHBvcnRzLndpbmRvd0NvdW50ID0gd2luZG93Q291bnRfMS53aW5kb3dDb3VudDtcbnZhciB3aW5kb3dUaW1lXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1RpbWVcIik7XG5leHBvcnRzLndpbmRvd1RpbWUgPSB3aW5kb3dUaW1lXzEud2luZG93VGltZTtcbnZhciB3aW5kb3dUb2dnbGVfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93VG9nZ2xlXCIpO1xuZXhwb3J0cy53aW5kb3dUb2dnbGUgPSB3aW5kb3dUb2dnbGVfMS53aW5kb3dUb2dnbGU7XG52YXIgd2luZG93V2hlbl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dXaGVuXCIpO1xuZXhwb3J0cy53aW5kb3dXaGVuID0gd2luZG93V2hlbl8xLndpbmRvd1doZW47XG52YXIgd2l0aExhdGVzdEZyb21fMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvd2l0aExhdGVzdEZyb21cIik7XG5leHBvcnRzLndpdGhMYXRlc3RGcm9tID0gd2l0aExhdGVzdEZyb21fMS53aXRoTGF0ZXN0RnJvbTtcbnZhciB6aXBfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvemlwXCIpO1xuZXhwb3J0cy56aXAgPSB6aXBfMS56aXA7XG52YXIgemlwQWxsXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3ppcEFsbFwiKTtcbmV4cG9ydHMuemlwQWxsID0gemlwQWxsXzEuemlwQWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgb3BlcmF0b3JzXzEgPSByZXF1aXJlKFwicnhqcy9vcGVyYXRvcnNcIik7XG5leHBvcnRzLmZpbHRlciA9IG9wZXJhdG9yc18xLmZpbHRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydChyZXF1aXJlKFwicnhqcy1jb21wYXQvb3BlcmF0b3JzL2ZpbHRlclwiKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLnVzZUV2YSA9IGV4cG9ydHMuY3JlYXRlRWZmZWN0cyA9IGV4cG9ydHMubWVyZ2VBY3Rpb25zID0gZXhwb3J0cy5jcmVhdGVBc3luY0FjdGlvbnMgPSBleHBvcnRzLmNyZWF0ZUFjdGlvbnMgPSBleHBvcnRzLmNvbm5lY3QgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX1N1YmplY3QgPSByZXF1aXJlKFwicnhqcy9TdWJqZWN0XCIpO1xuXG52YXIgX2ZpbHRlciA9IHJlcXVpcmUoXCJyeGpzL29wZXJhdG9ycy9maWx0ZXJcIik7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxudmFyIGlzRm4gPSBmdW5jdGlvbiBpc0ZuKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gXCJmdW5jdGlvblwiO1xufTtcblxudmFyIGltcGxlbWVudFN5bWJvbCA9IFN5bWJvbFtcImZvclwiXShcIl9fUkVWQV9JTVBMRU1FTlRfX1wiKTtcbnZhciBuYW1lc1N5bWJvbCA9IFN5bWJvbFtcImZvclwiXShcIl9fUkVWQV9OQU1FU19fXCIpO1xudmFyIGFjdGlvbnNTeW1ib2wgPSBTeW1ib2xbXCJmb3JcIl0oXCJfX1JFVkFfQUNUSU9OU1wiKTtcblxudmFyIGNyZWF0ZUV2YSA9IGZ1bmN0aW9uIGNyZWF0ZUV2YShhY3Rpb25zLCBlZmZlY3RzLCBzdWJzY3JpYmVzKSB7XG4gIHN1YnNjcmliZXMgPSBzdWJzY3JpYmVzIHx8IHt9O1xuXG4gIHZhciBzdWJzY3JpcHRpb24gPSBmdW5jdGlvbiBzdWJzY3JpcHRpb24oKSB7XG4gICAgaWYgKGlzRm4oZWZmZWN0cykpIHtcbiAgICAgIGVmZmVjdHMoZnVuY3Rpb24gKHR5cGUsICRmaWx0ZXIpIHtcbiAgICAgICAgaWYgKCFzdWJzY3JpYmVzW3R5cGVdKSB7XG4gICAgICAgICAgc3Vic2NyaWJlc1t0eXBlXSA9IG5ldyBfU3ViamVjdC5TdWJqZWN0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGbigkZmlsdGVyKSkge1xuICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVzW3R5cGVdLnBpcGUoKDAsIF9maWx0ZXIuZmlsdGVyKSgkZmlsdGVyKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3Vic2NyaWJlc1t0eXBlXTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCh0eXBlKSB7XG4gICAgaWYgKHN1YnNjcmliZXNbdHlwZV0pIHtcbiAgICAgIHZhciBfc3Vic2NyaWJlcyR0eXBlO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICAoX3N1YnNjcmliZXMkdHlwZSA9IHN1YnNjcmliZXNbdHlwZV0pLm5leHQuYXBwbHkoX3N1YnNjcmliZXMkdHlwZSwgYXJncyk7XG4gICAgfVxuICB9O1xuXG4gIGRpc3BhdGNoLmxhenkgPSBmdW5jdGlvbiAodHlwZSwgZm4pIHtcbiAgICBpZiAoc3Vic2NyaWJlc1t0eXBlXSAmJiBpc0ZuKGZuKSkge1xuICAgICAgc3Vic2NyaWJlc1t0eXBlXS5uZXh0KGZuKCkpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW1wbGVtZW50QWN0aW9uID0gZnVuY3Rpb24gaW1wbGVtZW50QWN0aW9uKG5hbWUsIGZuKSB7XG4gICAgaWYgKGFjdGlvbnMgJiYgYWN0aW9uc1tpbXBsZW1lbnRTeW1ib2xdKSB7XG4gICAgICBhY3Rpb25zW2ltcGxlbWVudFN5bWJvbF0obmFtZSwgZm4pO1xuICAgIH1cblxuICAgIHJldHVybiBmbjtcbiAgfTtcblxuICB2YXIgaW1wbGVtZW50QWN0aW9ucyA9IGZ1bmN0aW9uIGltcGxlbWVudEFjdGlvbnMob2JqKSB7XG4gICAgdmFyIGFjdGlvbnMgPSB7fTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gb2JqKSB7XG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KG5hbWUpICYmIGlzRm4ob2JqW25hbWVdKSkge1xuICAgICAgICBhY3Rpb25zW25hbWVdID0gaW1wbGVtZW50QWN0aW9uKG5hbWUsIG9ialtuYW1lXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbnM7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb24sXG4gICAgaW1wbGVtZW50QWN0aW9uczogaW1wbGVtZW50QWN0aW9uc1xuICB9O1xufTtcblxudmFyIEFjdGlvbkZhY3RvcnkgPSBmdW5jdGlvbiBBY3Rpb25GYWN0b3J5KG5hbWVzLCBpc0FzeW5jKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgaWYgKGlzQXN5bmMgPT09IHZvaWQgMCkge1xuICAgIGlzQXN5bmMgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHJlc29sdmVycyA9IHt9O1xuICB2YXIgYWN0aW9ucyA9IHt9O1xuICBuYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX3RoaXNbbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNBc3luYykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGlmIChhY3Rpb25zW25hbWVdKSB7XG4gICAgICAgICAgICByZXNvbHZlKGFjdGlvbnNbbmFtZV0uYXBwbHkoYWN0aW9ucywgYXJncykpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlcnNbbmFtZV0gPSByZXNvbHZlcnNbbmFtZV0gfHwgW107XG4gICAgICAgICAgICByZXNvbHZlcnNbbmFtZV0ucHVzaCh7XG4gICAgICAgICAgICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICAgIHJlamVjdDogcmVqZWN0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFjdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uc1tuYW1lXS5hcHBseShhY3Rpb25zLCBhcmdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlcnNbbmFtZV0gPSByZXNvbHZlcnNbbmFtZV0gfHwgW107XG4gICAgICAgICAgcmVzb2x2ZXJzW25hbWVdLnB1c2goe1xuICAgICAgICAgICAgcmVzb2x2ZTogbnVsbCxcbiAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICByZWplY3Q6IG51bGxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGUgYWN0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgaXMgbm90IGltcGxlbWVudGVkISBXZSByZWNvbW1lbmQgdGhhdCB5b3UgY2FsbCB0aGlzIG1ldGhvZCBieSBgY3JlYXRlQXN5bmNGb3JtQWN0aW9uc2BcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIHRoaXNbYWN0aW9uc1N5bWJvbF0gPSB0cnVlO1xuICB0aGlzW25hbWVzU3ltYm9sXSA9IG5hbWVzO1xuXG4gIHRoaXNbaW1wbGVtZW50U3ltYm9sXSA9IGZ1bmN0aW9uIChuYW1lLCBmbikge1xuICAgIGlmIChyZXNvbHZlcnNbbmFtZV0gJiYgcmVzb2x2ZXJzW25hbWVdLmxlbmd0aCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzb2x2ZXJzW25hbWVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIF9yZXNvbHZlcnMkbmFtZSRpID0gcmVzb2x2ZXJzW25hbWVdW2ldLFxuICAgICAgICAgICAgICByZXNvbHZlID0gX3Jlc29sdmVycyRuYW1lJGkucmVzb2x2ZSxcbiAgICAgICAgICAgICAgYXJncyA9IF9yZXNvbHZlcnMkbmFtZSRpLmFyZ3M7XG4gICAgICAgICAgaWYgKHJlc29sdmUpIHJlc29sdmUoZm4uYXBwbHkodm9pZCAwLCBhcmdzKSk7ZWxzZSB7XG4gICAgICAgICAgICBmbi5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlc29sdmVyc1tuYW1lXS5sZW5ndGggPSAwO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgYWN0aW9uc1tuYW1lXSA9IGZuO1xuICAgIHJldHVybiBmbjtcbiAgfTtcbn07XG5cbnZhciBjb25uZWN0ID0gZnVuY3Rpb24gY29ubmVjdChvcHRpb25zKSB7XG4gIHZhciBUYXJnZXQ7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBhdXRvUnVuOiB0cnVlXG4gIH07XG5cbiAgaWYgKGlzRm4ob3B0aW9ucykpIHtcbiAgICBUYXJnZXQgPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdE9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICB9XG5cbiAgdmFyIF9jbGFzc18gPSBmdW5jdGlvbiBfY2xhc3NfKFRhcmdldCkge1xuICAgIHZhciBFZmZlY3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIF9pbmhlcml0c0xvb3NlKEVmZmVjdCwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIEVmZmVjdChwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICAgIF90aGlzMiA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMyLnN1YnNjcmliZXMgPSB7fTtcblxuICAgICAgICB2YXIgX2NyZWF0ZUV2YSA9IGNyZWF0ZUV2YShwcm9wcy5hY3Rpb25zLCBwcm9wcy5lZmZlY3RzLCBwcm9wcy5zdWJzY3JpYmVzKSxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF9jcmVhdGVFdmEuc3Vic2NyaXB0aW9uLFxuICAgICAgICAgICAgZGlzcGF0Y2ggPSBfY3JlYXRlRXZhLmRpc3BhdGNoLFxuICAgICAgICAgICAgaW1wbGVtZW50QWN0aW9ucyA9IF9jcmVhdGVFdmEuaW1wbGVtZW50QWN0aW9ucztcblxuICAgICAgICBfdGhpczIuaW1wbGVtZW50QWN0aW9ucyA9IGltcGxlbWVudEFjdGlvbnM7XG4gICAgICAgIF90aGlzMi5zdWJzY3JpcHRpb24gPSBzdWJzY3JpcHRpb247XG4gICAgICAgIF90aGlzMi5kaXNwYXRjaCA9IGRpc3BhdGNoO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmF1dG9SdW4pIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfdGhpczI7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvdG8gPSBFZmZlY3QucHJvdG90eXBlO1xuXG4gICAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChUYXJnZXQsIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7XG4gICAgICAgICAgaW1wbGVtZW50QWN0aW9uczogdGhpcy5pbXBsZW1lbnRBY3Rpb25zLFxuICAgICAgICAgIGRpc3BhdGNoOiB0aGlzLmRpc3BhdGNoLFxuICAgICAgICAgIHN1YnNjcmliZXM6IHRoaXMuc3Vic2NyaWJlcyxcbiAgICAgICAgICBzdWJzY3JpcHRpb246IHRoaXMuc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBFZmZlY3Q7XG4gICAgfShfcmVhY3QuQ29tcG9uZW50KTtcblxuICAgIHJldHVybiBFZmZlY3Q7XG4gIH07XG5cbiAgcmV0dXJuIFRhcmdldCA/IF9jbGFzc18oVGFyZ2V0KSA6IF9jbGFzc187XG59O1xuXG5leHBvcnRzLmNvbm5lY3QgPSBjb25uZWN0O1xuXG52YXIgY3JlYXRlQWN0aW9ucyA9IGZ1bmN0aW9uIGNyZWF0ZUFjdGlvbnMoKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgbmFtZXMgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBuYW1lc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBBY3Rpb25GYWN0b3J5KG5hbWVzLCBmYWxzZSk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZUFjdGlvbnMgPSBjcmVhdGVBY3Rpb25zO1xuXG52YXIgY3JlYXRlQXN5bmNBY3Rpb25zID0gZnVuY3Rpb24gY3JlYXRlQXN5bmNBY3Rpb25zKCkge1xuICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIG5hbWVzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgbmFtZXNbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgfVxuXG4gIHJldHVybiBuZXcgQWN0aW9uRmFjdG9yeShuYW1lcywgdHJ1ZSk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZUFzeW5jQWN0aW9ucyA9IGNyZWF0ZUFzeW5jQWN0aW9ucztcblxudmFyIG1lcmdlQWN0aW9ucyA9IGZ1bmN0aW9uIG1lcmdlQWN0aW9ucygpIHtcbiAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhbGwgPSBuZXcgQXJyYXkoX2xlbjUpLCBfa2V5NSA9IDA7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICBhbGxbX2tleTVdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgfVxuXG4gIHZhciBpbXBsZW1lbnQgPSBmdW5jdGlvbiBpbXBsZW1lbnQobmFtZSwgZm4pIHtcbiAgICBhbGwuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9ucykge1xuICAgICAgaWYgKGFjdGlvbnNbaW1wbGVtZW50U3ltYm9sXSAmJiBhY3Rpb25zW25hbWVzU3ltYm9sXS5pbmRleE9mKG5hbWUpID4gLTEpIHtcbiAgICAgICAgYWN0aW9uc1tpbXBsZW1lbnRTeW1ib2xdKG5hbWUsIGZuKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZm47XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGFjdGlvbnMgPSBhbGxbaV07XG4gICAgcmVzdWx0W25hbWVzU3ltYm9sXSA9IHJlc3VsdFtuYW1lc1N5bWJvbF0gfHwgW107XG4gICAgcmVzdWx0W25hbWVzU3ltYm9sXSA9IHJlc3VsdFtuYW1lc1N5bWJvbF0uY29uY2F0KGFjdGlvbnNbbmFtZXNTeW1ib2xdKTtcbiAgICB2YXIga2V5ID0gdm9pZCAwO1xuXG4gICAgZm9yIChrZXkgaW4gYWN0aW9ucykge1xuICAgICAgaWYgKGFjdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBrZXkgIT09IGltcGxlbWVudFN5bWJvbCAmJiBrZXkgIT09IG5hbWVzU3ltYm9sKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gYWN0aW9uc1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJlc3VsdFthY3Rpb25zU3ltYm9sXSA9IHRydWU7XG4gIHJlc3VsdFtpbXBsZW1lbnRTeW1ib2xdID0gaW1wbGVtZW50O1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0cy5tZXJnZUFjdGlvbnMgPSBtZXJnZUFjdGlvbnM7XG5cbnZhciBjcmVhdGVFZmZlY3RzID0gZnVuY3Rpb24gY3JlYXRlRWZmZWN0cyhmbikge1xuICByZXR1cm4gZm47XG59O1xuXG5leHBvcnRzLmNyZWF0ZUVmZmVjdHMgPSBjcmVhdGVFZmZlY3RzO1xuXG52YXIgdXNlRXZhID0gZnVuY3Rpb24gdXNlRXZhKF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBhY3Rpb25zID0gX3JlZi5hY3Rpb25zLFxuICAgICAgZWZmZWN0cyA9IF9yZWYuZWZmZWN0cyxcbiAgICAgIHN1YnNjcmliZXMgPSBfcmVmLnN1YnNjcmliZXMsXG4gICAgICBfcmVmJGF1dG9SdW4gPSBfcmVmLmF1dG9SdW4sXG4gICAgICBhdXRvUnVuID0gX3JlZiRhdXRvUnVuID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRhdXRvUnVuO1xuXG4gIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBtYW5hZ2VyID0gY3JlYXRlRXZhKGFjdGlvbnMsIGVmZmVjdHMsIHN1YnNjcmliZXMpO1xuXG4gICAgaWYgKGF1dG9SdW4pIHtcbiAgICAgIG1hbmFnZXIuc3Vic2NyaXB0aW9uKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hbmFnZXI7XG4gIH0sIFtdKTtcbn07XG5cbmV4cG9ydHMudXNlRXZhID0gdXNlRXZhOyIsImltcG9ydCB7IGNyZWF0ZUZvcm1BY3Rpb25zLCBjcmVhdGVBc3luY0Zvcm1BY3Rpb25zIH0gZnJvbSAnQGZvcm1pbHkvcmVhY3QnXG5pbXBvcnQgeyBtZXJnZUFjdGlvbnMsIGNyZWF0ZUFjdGlvbnMsIGNyZWF0ZUFzeW5jQWN0aW9ucyB9IGZyb20gJ3JlYWN0LWV2YSdcbmltcG9ydCB7IElTY2hlbWFGb3JtQWN0aW9ucywgSVNjaGVtYUZvcm1Bc3luY0FjdGlvbnMgfSBmcm9tICcuLi90eXBlcydcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNjaGVtYUZvcm1BY3Rpb25zID0gKCk6IElTY2hlbWFGb3JtQWN0aW9ucyA9PlxuICBtZXJnZUFjdGlvbnMoXG4gICAgY3JlYXRlRm9ybUFjdGlvbnMoKSxcbiAgICBjcmVhdGVBY3Rpb25zKCdnZXRTY2hlbWEnLCAnZ2V0Rm9ybVNjaGVtYScpXG4gICkgYXMgSVNjaGVtYUZvcm1BY3Rpb25zXG5cbmV4cG9ydCBjb25zdCBjcmVhdGVBc3luY1NjaGVtYUZvcm1BY3Rpb25zID0gKCk6IElTY2hlbWFGb3JtQXN5bmNBY3Rpb25zID0+XG4gIG1lcmdlQWN0aW9ucyhcbiAgICBjcmVhdGVBc3luY0Zvcm1BY3Rpb25zKCksXG4gICAgY3JlYXRlQXN5bmNBY3Rpb25zKCdnZXRTY2hlbWEnLCAnZ2V0Rm9ybVNjaGVtYScpXG4gICkgYXMgSVNjaGVtYUZvcm1Bc3luY0FjdGlvbnNcbiIsImltcG9ydCB7XG4gIFZhbGlkYXRlUGF0dGVyblJ1bGVzLFxuICBWYWxpZGF0ZUFycmF5UnVsZXMsXG4gIGdldE1lc3NhZ2Vcbn0gZnJvbSAnQGZvcm1pbHkvdmFsaWRhdG9yJ1xuaW1wb3J0IHtcbiAgbG93ZXJjYXNlLFxuICBtYXAsXG4gIGVhY2gsXG4gIGlzRW1wdHksXG4gIGlzRXF1YWwsXG4gIGlzQXJyLFxuICB0b0FycixcbiAgaXNCb29sLFxuICBpc1ZhbGlkLFxuICBGb3JtUGF0aFBhdHRlcm4sXG4gIEZvcm1QYXRoLFxuICBkZXByZWNhdGVcbn0gZnJvbSAnQGZvcm1pbHkvc2hhcmVkJ1xuaW1wb3J0IHsgU2NoZW1hTWVzc2FnZSwgSVNjaGVtYSB9IGZyb20gJy4uL3R5cGVzJ1xuXG5jb25zdCBudW1iZXJSRSA9IC9eXFxkKyQvXG5cbnR5cGUgU2NoZW1hUHJvcGVydGllczxUID0gU2NoZW1hPiA9IHtcbiAgW2tleTogc3RyaW5nXTogVFxufVxuXG5jb25zdCBmaW5kUHJvcGVydHkgPSAob2JqZWN0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcgfCBudW1iZXIpID0+IHtcbiAgaWYgKCFvYmplY3QpIHJldHVybiBvYmplY3RcbiAgaWYgKG9iamVjdFtwcm9wZXJ0eUtleV0pIHtcbiAgICByZXR1cm4gb2JqZWN0W3Byb3BlcnR5S2V5XVxuICB9XG4gIC8v6ZmN57qn5pCc57Si77yM5aaC5p6ca2V56YCa6L+H5pig5bCE55qE5pa55byP5rKh5pyJ5a6M5YWo5pig5bCE5LiK77yM5Lya5o+Q5L6b6ZmN57qn5pCc57Si5pa55byP77yM5L+d6K+B5a6M5aSH5oCnXG4gIGZvciAobGV0IGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoRm9ybVBhdGgucGFyc2Uoa2V5KS5tYXRjaChgW1ske3Byb3BlcnR5S2V5fV1dYCkpIHtcbiAgICAgIHJldHVybiBvYmplY3Rba2V5XVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBmaWx0ZXJQcm9wZXJ0aWVzID0gPFQgZXh0ZW5kcyBvYmplY3Q+KG9iamVjdDogVCwga2V5czogc3RyaW5nW10pOiBUID0+IHtcbiAgbGV0IHJlc3VsdCA9IHt9IGFzIGFueVxuICBmb3IgKGxldCBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKCFrZXlzLmluY2x1ZGVzKGtleSkgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG9iamVjdFtrZXldXG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuLy/lkJHlkI7lhbzlrrnpgLvovpHvvIzmnKrmnaXkvJrlubLmjolcbmNvbnN0IENPTVBBVF9GT1JNX0lURU1fUFJPUFMgPSBbXG4gIC8vbmV4dFxuICAncmVxdWlyZWQnLFxuICAncHJlZml4JyxcbiAgJ2xhYmVsQWxpZ24nLFxuICAnaGFzRmVlZGJhY2snLFxuICAnbGFiZWxDb2wnLFxuICAnd3JhcHBlckNvbCcsXG4gICdsYWJlbCcsXG4gICdoZWxwJyxcbiAgJ2xhYmVsVGV4dEFsaWduJyxcbiAgJ2Z1bGxXaWR0aCcsXG4gICdleHRyYScsXG4gICdzaXplJyxcbiAgJ2FzdGVyaXNrJyxcbiAgJ2xhYmVsV2lkdGgnLFxuICAnZGV2aWNlJyxcbiAgJ2lzUHJldmlldycsXG4gICdyZW5kZXJQcmV2aWV3JyxcbiAgJ3ZhbGlkYXRlU3RhdGUnLFxuICAvL2FudGRcbiAgJ2NvbG9uJyxcbiAgJ2h0bWxGb3InLFxuICAndmFsaWRhdGVTdGF0dXMnLFxuICAncHJlZml4Q2xzJyxcbiAgLy9mb3JtaWx5XG4gICd0cmlnZ2VyVHlwZScsXG4gICdpdGVtU3R5bGUnLFxuICAnaXRlbUNsYXNzTmFtZScsXG4gICdhZGRvbkFmdGVyJ1xuXVxuXG5leHBvcnQgY2xhc3MgU2NoZW1hIGltcGxlbWVudHMgSVNjaGVtYSB7XG4gIC8qKiBiYXNlIGpzb24gc2NoZW1hIHNwZWMqKi9cbiAgcHVibGljIHRpdGxlPzogU2NoZW1hTWVzc2FnZVxuICBwdWJsaWMgZGVzY3JpcHRpb24/OiBTY2hlbWFNZXNzYWdlXG4gIHB1YmxpYyBkZWZhdWx0PzogYW55XG4gIHB1YmxpYyByZWFkT25seT86IGJvb2xlYW5cbiAgcHVibGljIHdyaXRlT25seT86IGJvb2xlYW5cbiAgcHVibGljIHR5cGU/OiBJU2NoZW1hWyd0eXBlJ11cbiAgcHVibGljIGVudW0/OiBJU2NoZW1hWydlbnVtJ11cbiAgcHVibGljIGNvbnN0PzogYW55XG4gIHB1YmxpYyBtdWx0aXBsZU9mPzogbnVtYmVyXG4gIHB1YmxpYyBtYXhpbXVtPzogbnVtYmVyXG4gIHB1YmxpYyBleGNsdXNpdmVNYXhpbXVtPzogbnVtYmVyXG4gIHB1YmxpYyBtaW5pbXVtPzogbnVtYmVyXG4gIHB1YmxpYyBleGNsdXNpdmVNaW5pbXVtPzogbnVtYmVyXG4gIHB1YmxpYyBtYXhMZW5ndGg/OiBudW1iZXJcbiAgcHVibGljIG1pbkxlbmd0aD86IG51bWJlclxuICBwdWJsaWMgcGF0dGVybj86IHN0cmluZyB8IFJlZ0V4cFxuICBwdWJsaWMgbWF4SXRlbXM/OiBudW1iZXJcbiAgcHVibGljIG1pbkl0ZW1zPzogbnVtYmVyXG4gIHB1YmxpYyB1bmlxdWVJdGVtcz86IGJvb2xlYW5cbiAgcHVibGljIG1heFByb3BlcnRpZXM/OiBudW1iZXJcbiAgcHVibGljIG1pblByb3BlcnRpZXM/OiBudW1iZXJcbiAgcHVibGljIHJlcXVpcmVkPzogc3RyaW5nW10gfCBib29sZWFuXG4gIHB1YmxpYyBmb3JtYXQ/OiBzdHJpbmdcbiAgLyoqIG5lc3RlZCBqc29uIHNjaGVtYSBzcGVjICoqL1xuICBwdWJsaWMgcHJvcGVydGllcz86IFNjaGVtYVByb3BlcnRpZXNcbiAgcHVibGljIGl0ZW1zPzogU2NoZW1hIHwgU2NoZW1hW11cbiAgcHVibGljIGFkZGl0aW9uYWxJdGVtcz86IFNjaGVtYVxuICBwdWJsaWMgcGF0dGVyblByb3BlcnRpZXM/OiB7XG4gICAgW2tleTogc3RyaW5nXTogU2NoZW1hXG4gIH1cbiAgcHVibGljIGFkZGl0aW9uYWxQcm9wZXJ0aWVzPzogU2NoZW1hXG4gIC8qKiBleHRlbmQganNvbiBzY2hlbWEgc3BlY3MgKi9cbiAgcHVibGljIGVkaXRhYmxlPzogYm9vbGVhblxuICBwdWJsaWMgdmlzaWJsZT86IGJvb2xlYW5cbiAgcHVibGljIGRpc3BsYXk/OiBib29sZWFuXG4gIHB1YmxpYyB0cmlnZ2VyVHlwZT86ICdvbkJsdXInIHwgJ29uQ2hhbmdlJ1xuICBwdWJsaWMgWyd4LXByb3BzJ10/OiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfVxuICBwdWJsaWMgWyd4LWluZGV4J10/OiBudW1iZXJcbiAgcHVibGljIFsneC1ydWxlcyddPzogVmFsaWRhdGVQYXR0ZXJuUnVsZXNcbiAgcHVibGljIFsneC1jb21wb25lbnQnXT86IHN0cmluZ1xuICBwdWJsaWMgWyd4LWNvbXBvbmVudC1wcm9wcyddPzogSVNjaGVtYVsneC1jb21wb25lbnQtcHJvcHMnXVxuICBwdWJsaWMgWyd4LXJlbmRlciddPzogSVNjaGVtYVsneC1yZW5kZXInXVxuICBwdWJsaWMgWyd4LWVmZmVjdCddPzogSVNjaGVtYVsneC1lZmZlY3QnXVxuICBwdWJsaWMgWyd4LWxpbmthZ2VzJ10/OiBJU2NoZW1hWyd4LWxpbmthZ2VzJ11cbiAgcHVibGljIFsneC1tZWdhLXByb3BzJ10/OiBJU2NoZW1hWyd4LW1lZ2EtcHJvcHMnXVxuICAvKiogc2NoZW1hIGNsYXNzIHNlbGYgc3BlY3MqKi9cblxuICBwdWJsaWMgcGFyZW50PzogU2NoZW1hXG5cbiAgcHVibGljIF9pc0pTT05TY2hlbWFPYmplY3QgPSB0cnVlXG5cbiAgcHVibGljIGtleT86IHN0cmluZ1xuXG4gIHB1YmxpYyBwYXRoPzogc3RyaW5nXG5cbiAgdmVyc2lvbiA9ICcxLjAnXG5cbiAgY29uc3RydWN0b3IoanNvbjogSVNjaGVtYSwgcGFyZW50PzogU2NoZW1hLCBrZXk/OiBzdHJpbmcpIHtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICB0aGlzLnBhcmVudCA9IHBhcmVudFxuICAgIH1cbiAgICBpZiAoa2V5KSB7XG4gICAgICB0aGlzLmtleSA9IGtleVxuICAgIH1cbiAgICBpZiAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuaXNBcnJheSgpKSB7XG4gICAgICB0aGlzLnBhdGggPSB0aGlzLnBhcmVudC5wYXRoICsgJy4qJ1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgdGhpcy5wYXRoID0gdGhpcy5wYXJlbnQucGF0aFxuICAgICAgICAgID8gdGhpcy5wYXJlbnQucGF0aCArICcuJyArIHRoaXMua2V5XG4gICAgICAgICAgOiB0aGlzLmtleVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wYXRoID0gJydcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZnJvbUpTT04oanNvbikgYXMgYW55XG4gIH1cbiAgLyoqXG4gICAqIGdldHRlcnNcbiAgICovXG4gIGdldChwYXRoPzogRm9ybVBhdGhQYXR0ZXJuKSB7XG4gICAgaWYgKCFwYXRoKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICBsZXQgcmVzOiBTY2hlbWEgPSB0aGlzXG4gICAgbGV0IGRlcHRoID0gMFxuICAgIGxldCBwYXJzZWQgPSBGb3JtUGF0aC5wYXJzZShwYXRoKVxuICAgIHBhcnNlZC5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAocmVzICYmICFpc0VtcHR5KHJlcy5wcm9wZXJ0aWVzKSkge1xuICAgICAgICByZXMgPVxuICAgICAgICAgIGZpbmRQcm9wZXJ0eShyZXMucHJvcGVydGllcywga2V5KSB8fFxuICAgICAgICAgIGZpbmRQcm9wZXJ0eShyZXMucHJvcGVydGllcywgcGFyc2VkLnNlZ21lbnRzLnNsaWNlKGRlcHRoKS5qb2luKCcuJykpXG4gICAgICB9IGVsc2UgaWYgKHJlcyAmJiAhaXNFbXB0eShyZXMuaXRlbXMpICYmIG51bWJlclJFLnRlc3Qoa2V5IGFzIHN0cmluZykpIHtcbiAgICAgICAgcmVzID0gaXNBcnIocmVzLml0ZW1zKSA/IGZpbmRQcm9wZXJ0eShyZXMuaXRlbXMsIGtleSkgOiByZXMuaXRlbXNcbiAgICAgIH1cbiAgICAgIGRlcHRoKytcbiAgICB9KVxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIG1lcmdlKHNwZWM6IGFueSkge1xuICAgIGlmIChzcGVjIGluc3RhbmNlb2YgU2NoZW1hKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHNwZWMuZ2V0U2VsZlByb3BzKCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgc3BlYylcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIGdldEVtcHR5VmFsdWUoKSB7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiAnJ1xuICAgIH1cbiAgICBpZiAodGhpcy50eXBlID09PSAnYXJyYXknKSB7XG4gICAgICByZXR1cm4gW11cbiAgICB9XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB7fVxuICAgIH1cbiAgICBpZiAodGhpcy50eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIDBcbiAgICB9XG4gIH1cblxuICBnZXRTZWxmUHJvcHMoKSB7XG4gICAgY29uc3Qge1xuICAgICAgX2lzSlNPTlNjaGVtYU9iamVjdCxcbiAgICAgIHByb3BlcnRpZXMsXG4gICAgICBhZGRpdGlvbmFsUHJvcGVydGllcyxcbiAgICAgIGFkZGl0aW9uYWxJdGVtcyxcbiAgICAgIHBhdHRlcm5Qcm9wZXJ0aWVzLFxuICAgICAgaXRlbXMsXG4gICAgICBwYXRoLFxuICAgICAgcGFyZW50LFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpc1xuICAgIHJldHVybiBwcm9wc1xuICB9XG4gIGdldEV4dGVuZHNSdWxlcygpIHtcbiAgICBsZXQgcnVsZXM6IFZhbGlkYXRlQXJyYXlSdWxlcyA9IFtdXG4gICAgaWYgKHRoaXMuZm9ybWF0KSB7XG4gICAgICBydWxlcy5wdXNoKHsgZm9ybWF0OiB0aGlzLmZvcm1hdCB9KVxuICAgIH1cbiAgICBpZiAoaXNWYWxpZCh0aGlzLm1heEl0ZW1zKSkge1xuICAgICAgcnVsZXMucHVzaCh7IG1heDogdGhpcy5tYXhJdGVtcyB9KVxuICAgIH1cbiAgICBpZiAoaXNWYWxpZCh0aGlzLm1pbkl0ZW1zKSkge1xuICAgICAgcnVsZXMucHVzaCh7IG1pbjogdGhpcy5taW5JdGVtcyB9KVxuICAgIH1cbiAgICBpZiAoaXNWYWxpZCh0aGlzLm1heExlbmd0aCkpIHtcbiAgICAgIHJ1bGVzLnB1c2goeyBtYXg6IHRoaXMubWF4TGVuZ3RoIH0pXG4gICAgfVxuICAgIGlmIChpc1ZhbGlkKHRoaXMubWluTGVuZ3RoKSkge1xuICAgICAgcnVsZXMucHVzaCh7IG1pbjogdGhpcy5taW5MZW5ndGggfSlcbiAgICB9XG4gICAgaWYgKGlzVmFsaWQodGhpcy5tYXhpbXVtKSkge1xuICAgICAgcnVsZXMucHVzaCh7IG1heGltdW06IHRoaXMubWF4aW11bSB9KVxuICAgIH1cbiAgICBpZiAoaXNWYWxpZCh0aGlzLm1pbmltdW0pKSB7XG4gICAgICBydWxlcy5wdXNoKHsgbWluaW11bTogdGhpcy5taW5pbXVtIH0pXG4gICAgfVxuICAgIGlmIChpc1ZhbGlkKHRoaXMuZXhjbHVzaXZlTWF4aW11bSkpIHtcbiAgICAgIHJ1bGVzLnB1c2goeyBleGNsdXNpdmVNYXhpbXVtOiB0aGlzLmV4Y2x1c2l2ZU1heGltdW0gfSlcbiAgICB9XG4gICAgaWYgKGlzVmFsaWQodGhpcy5leGNsdXNpdmVNaW5pbXVtKSkge1xuICAgICAgcnVsZXMucHVzaCh7IGV4Y2x1c2l2ZU1pbmltdW06IHRoaXMuZXhjbHVzaXZlTWluaW11bSB9KVxuICAgIH1cbiAgICBpZiAoaXNWYWxpZCh0aGlzLnBhdHRlcm4pKSB7XG4gICAgICBydWxlcy5wdXNoKHsgcGF0dGVybjogdGhpcy5wYXR0ZXJuIH0pXG4gICAgfVxuICAgIGlmIChpc1ZhbGlkKHRoaXMuY29uc3QpKSB7XG4gICAgICBydWxlcy5wdXNoKHtcbiAgICAgICAgdmFsaWRhdG9yOiB2YWx1ZSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID09PSB0aGlzLmNvbnN0ID8gJycgOiBnZXRNZXNzYWdlKCdzY2hlbWEuY29uc3QnKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICBpZiAoaXNWYWxpZCh0aGlzLm11bHRpcGxlT2YpKSB7XG4gICAgICBydWxlcy5wdXNoKHtcbiAgICAgICAgdmFsaWRhdG9yOiB2YWx1ZSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlICUgdGhpcy5tdWx0aXBsZU9mID09PSAwXG4gICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICA6IGdldE1lc3NhZ2UoJ3NjaGVtYS5tdWx0aXBsZU9mJylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKGlzVmFsaWQodGhpcy5tYXhQcm9wZXJ0aWVzKSkge1xuICAgICAgcnVsZXMucHVzaCh7XG4gICAgICAgIHZhbGlkYXRvcjogdmFsdWUgPT4ge1xuICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSB8fCB7fSkubGVuZ3RoIDw9IHRoaXMubWF4UHJvcGVydGllc1xuICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgOiBnZXRNZXNzYWdlKCdzY2hlbWEubWF4UHJvcGVydGllcycpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICAgIGlmIChpc1ZhbGlkKHRoaXMubWluUHJvcGVydGllcykpIHtcbiAgICAgIHJ1bGVzLnB1c2goe1xuICAgICAgICB2YWxpZGF0b3I6IHZhbHVlID0+IHtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModmFsdWUgfHwge30pLmxlbmd0aCA+PSB0aGlzLm1pblByb3BlcnRpZXNcbiAgICAgICAgICAgID8gJydcbiAgICAgICAgICAgIDogZ2V0TWVzc2FnZSgnc2NoZW1hLm1pblByb3BlcnRpZXMnKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICBpZiAoaXNWYWxpZCh0aGlzLnVuaXF1ZUl0ZW1zKSAmJiB0aGlzLnVuaXF1ZUl0ZW1zKSB7XG4gICAgICBydWxlcy5wdXNoKHtcbiAgICAgICAgdmFsaWRhdG9yOiB2YWx1ZSA9PiB7XG4gICAgICAgICAgdmFsdWUgPSB0b0Fycih2YWx1ZSlcbiAgICAgICAgICByZXR1cm4gdmFsdWUuc29tZSgoaXRlbTogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBzdGFydCA9IGluZGV4OyBzdGFydCA8IHZhbHVlLmxlbmd0aDsgc3RhcnQrKykge1xuICAgICAgICAgICAgICBpZiAoaXNFcXVhbCh2YWx1ZVtzdGFydF0sIGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgICAgPyBnZXRNZXNzYWdlKCdzY2hlbWEudW5pcXVlSXRlbXMnKVxuICAgICAgICAgICAgOiAnJ1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICAvKirliankvZnmoKHpqoznmoTpg73mmK/lhbPogZTlnovlpI3mnYLmoKHpqozvvIzkuI3mirnlubPvvIzorqnnlKjmiLfoh6rlt7HlpITnkIYgKi9cbiAgICBpZiAoaXNWYWxpZCh0aGlzWyd4LXJ1bGVzJ10pKSB7XG4gICAgICBydWxlcyA9IHJ1bGVzLmNvbmNhdCh0aGlzWyd4LXJ1bGVzJ10pXG4gICAgfVxuICAgIHJldHVybiBydWxlc1xuICB9XG4gIGdldEV4dGVuZHNSZXF1aXJlZCgpIHtcbiAgICBpZiAoaXNCb29sKHRoaXMucmVxdWlyZWQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1aXJlZFxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBpc0Fycih0aGlzLnBhcmVudD8ucmVxdWlyZWQpICYmXG4gICAgICB0aGlzLnBhcmVudD8ucmVxdWlyZWQuaW5jbHVkZXModGhpcy5rZXkpXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICBnZXRFeHRlbmRzRWRpdGFibGUoKTogYm9vbGVhbiB7XG4gICAgY29uc3QgeyBlZGl0YWJsZSB9ID0gdGhpcy5nZXRFeHRlbmRzQ29tcG9uZW50UHJvcHMoKVxuICAgIGlmIChpc1ZhbGlkKHRoaXMuZWRpdGFibGUpKSB7XG4gICAgICByZXR1cm4gdGhpcy5lZGl0YWJsZVxuICAgIH0gZWxzZSBpZiAoaXNWYWxpZChlZGl0YWJsZSkpIHtcbiAgICAgIHJldHVybiBlZGl0YWJsZVxuICAgIH0gZWxzZSBpZiAoaXNWYWxpZCh0aGlzLnJlYWRPbmx5KSkge1xuICAgICAgcmV0dXJuICF0aGlzLnJlYWRPbmx5XG4gICAgfVxuICB9XG4gIGdldEV4dGVuZHNWaXNpYmxlKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHsgdmlzaWJsZSB9ID0gdGhpcy5nZXRFeHRlbmRzQ29tcG9uZW50UHJvcHMoKVxuICAgIGlmIChpc1ZhbGlkKHRoaXMudmlzaWJsZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnZpc2libGVcbiAgICB9IGVsc2UgaWYgKGlzVmFsaWQodmlzaWJsZSkpIHtcbiAgICAgIHJldHVybiB2aXNpYmxlXG4gICAgfVxuICB9XG4gIGdldEV4dGVuZHNEaXNwbGF5KCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHsgZGlzcGxheSB9ID0gdGhpcy5nZXRFeHRlbmRzQ29tcG9uZW50UHJvcHMoKVxuICAgIGlmIChpc1ZhbGlkKHRoaXMuZGlzcGxheSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmRpc3BsYXlcbiAgICB9IGVsc2UgaWYgKGlzVmFsaWQoZGlzcGxheSkpIHtcbiAgICAgIHJldHVybiBkaXNwbGF5XG4gICAgfVxuICB9XG5cbiAgZ2V0TWVnYUxheW91dFByb3BzKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzWyd4LW1lZ2EtcHJvcHMnXSB8fFxuICAgICAgdGhpcy5nZXRFeHRlbmRzQ29tcG9uZW50UHJvcHMoKVsnbWVnYS1wcm9wcyddIHx8XG4gICAgICB7fVxuICAgIClcbiAgfVxuXG4gIGdldEV4dGVuZHNUcmlnZ2VyVHlwZSgpIHtcbiAgICBjb25zdCBpdGVtUHJvcHMgPSB0aGlzLmdldEV4dGVuZHNJdGVtUHJvcHMoKVxuICAgIGNvbnN0IHByb3BzID0gdGhpcy5nZXRFeHRlbmRzUHJvcHMoKVxuICAgIGNvbnN0IGNvbXBvbmVudFByb3BzID0gdGhpcy5nZXRFeHRlbmRzQ29tcG9uZW50UHJvcHMoKVxuICAgIGlmICh0aGlzLnRyaWdnZXJUeXBlKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmlnZ2VyVHlwZVxuICAgIH1cbiAgICBpZiAoaXRlbVByb3BzLnRyaWdnZXJUeXBlKSB7XG4gICAgICByZXR1cm4gaXRlbVByb3BzLnRyaWdnZXJUeXBlXG4gICAgfSBlbHNlIGlmIChwcm9wcy50cmlnZ2VyVHlwZSkge1xuICAgICAgcmV0dXJuIHByb3BzLnRyaWdnZXJUeXBlXG4gICAgfSBlbHNlIGlmIChjb21wb25lbnRQcm9wcy50cmlnZ2VyVHlwZSkge1xuICAgICAgcmV0dXJuIGNvbXBvbmVudFByb3BzLnRyaWdnZXJUeXBlXG4gICAgfVxuICB9XG4gIGdldEV4dGVuZHNJdGVtUHJvcHMoKSB7XG4gICAgaWYgKGlzVmFsaWQodGhpc1sneC1pdGVtLXByb3BzJ10pKSB7XG4gICAgICBkZXByZWNhdGUoJ3gtaXRlbS1wcm9wcyBpcyBkZXByZWNhdGUgaW4gZnV0dXJlLCBQbGVhc2UgZG8gbm90IHVzZSBpdC4nKVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1sneC1pdGVtLXByb3BzJ10gfHwge31cbiAgfVxuXG4gIGdldEV4dGVuZHNDb21wb25lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXNbJ3gtY29tcG9uZW50J11cbiAgfVxuICBnZXRFeHRlbmRzUmVuZGVyZXIoKSB7XG4gICAgaWYgKGlzVmFsaWQodGhpc1sneC1yZW5kZXInXSkpIHtcbiAgICAgIGRlcHJlY2F0ZSgneC1yZW5kZXIgaXMgZGVwcmVjYXRlIGluIGZ1dHVyZSwgUGxlYXNlIGRvIG5vdCB1c2UgaXQuJylcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNbJ3gtcmVuZGVyJ11cbiAgfVxuICBnZXRFeHRlbmRzRWZmZWN0KCkge1xuICAgIHJldHVybiB0aGlzWyd4LWVmZmVjdCddXG4gIH1cbiAgZ2V0RXh0ZW5kc1Byb3BzKCkge1xuICAgIHJldHVybiB0aGlzWyd4LXByb3BzJ10gfHwge31cbiAgfVxuICBnZXRFeHRlbmRzQ29tcG9uZW50UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmZpbHRlclByb3BlcnRpZXModGhpc1sneC1wcm9wcyddLCBDT01QQVRfRk9STV9JVEVNX1BST1BTKSxcbiAgICAgIC4uLnRoaXNbJ3gtY29tcG9uZW50LXByb3BzJ11cbiAgICB9XG4gIH1cbiAgZ2V0RXh0ZW5kc0xpbmthZ2VzKCkge1xuICAgIHJldHVybiB0aGlzWyd4LWxpbmthZ2VzJ11cbiAgfVxuICAvKipcbiAgICogZ2V0dGVyc1xuICAgKi9cbiAgc2V0UHJvcGVydHkoa2V5OiBzdHJpbmcsIHNjaGVtYTogSVNjaGVtYSkge1xuICAgIHRoaXMucHJvcGVydGllcyA9IHRoaXMucHJvcGVydGllcyB8fCB7fVxuICAgIHRoaXMucHJvcGVydGllc1trZXldID0gbmV3IFNjaGVtYShzY2hlbWEsIHRoaXMsIGtleSlcbiAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzW2tleV1cbiAgfVxuICBzZXRQcm9wZXJ0aWVzKHByb3BlcnRpZXM6IFNjaGVtYVByb3BlcnRpZXM8SVNjaGVtYT4pIHtcbiAgICBlYWNoPFNjaGVtYVByb3BlcnRpZXM8SVNjaGVtYT4sIElTY2hlbWE+KHByb3BlcnRpZXMsIChzY2hlbWEsIGtleSkgPT4ge1xuICAgICAgdGhpcy5zZXRQcm9wZXJ0eShrZXksIHNjaGVtYSlcbiAgICB9KVxuICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXNcbiAgfVxuICBzZXRBcnJheUl0ZW1zKHNjaGVtYTogSVNjaGVtYSkge1xuICAgIHRoaXMuaXRlbXMgPSBuZXcgU2NoZW1hKHNjaGVtYSwgdGhpcylcbiAgICByZXR1cm4gdGhpcy5pdGVtc1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIGNvbnN0IHJlc3VsdDogSVNjaGVtYSA9IHRoaXMuZ2V0U2VsZlByb3BzKClcbiAgICBpZiAoaXNWYWxpZCh0aGlzLnByb3BlcnRpZXMpKSB7XG4gICAgICByZXN1bHQucHJvcGVydGllcyA9IG1hcCh0aGlzLnByb3BlcnRpZXMsIHNjaGVtYSA9PiB7XG4gICAgICAgIHJldHVybiBzY2hlbWEudG9KU09OKClcbiAgICAgIH0pXG4gICAgfVxuICAgIGlmIChpc1ZhbGlkKHRoaXMuaXRlbXMpKSB7XG4gICAgICByZXN1bHQuaXRlbXMgPSBpc0Fycih0aGlzLml0ZW1zKVxuICAgICAgICA/IHRoaXMuaXRlbXMubWFwKHNjaGVtYSA9PiBzY2hlbWEudG9KU09OKCkpXG4gICAgICAgIDogdGhpcy5pdGVtcy50b0pTT04oKVxuICAgIH1cbiAgICBpZiAoaXNWYWxpZCh0aGlzLmFkZGl0aW9uYWxJdGVtcykpIHtcbiAgICAgIHJlc3VsdC5hZGRpdGlvbmFsSXRlbXMgPSB0aGlzLmFkZGl0aW9uYWxJdGVtcy50b0pTT04oKVxuICAgIH1cbiAgICBpZiAoaXNWYWxpZCh0aGlzLmFkZGl0aW9uYWxQcm9wZXJ0aWVzKSkge1xuICAgICAgcmVzdWx0LmFkZGl0aW9uYWxQcm9wZXJ0aWVzID0gdGhpcy5hZGRpdGlvbmFsUHJvcGVydGllcy50b0pTT04oKVxuICAgIH1cbiAgICBpZiAoaXNWYWxpZCh0aGlzLnBhdHRlcm5Qcm9wZXJ0aWVzKSkge1xuICAgICAgcmVzdWx0LnBhdHRlcm5Qcm9wZXJ0aWVzID0gbWFwKHRoaXMucGF0dGVyblByb3BlcnRpZXMsIHNjaGVtYSA9PiB7XG4gICAgICAgIHJldHVybiBzY2hlbWEudG9KU09OKClcbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGZyb21KU09OKGpzb246IElTY2hlbWEgPSB7fSkge1xuICAgIGlmICh0eXBlb2YganNvbiA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4ganNvblxuICAgIGlmIChqc29uIGluc3RhbmNlb2YgU2NoZW1hKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGpzb24pXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGpzb24pXG4gICAgfVxuICAgIGlmIChpc1ZhbGlkKGpzb24udHlwZSkpIHtcbiAgICAgIHRoaXMudHlwZSA9IGxvd2VyY2FzZShTdHJpbmcoanNvbi50eXBlKSlcbiAgICB9XG4gICAgaWYgKGlzVmFsaWQoanNvblsneC1jb21wb25lbnQnXSkpIHtcbiAgICAgIHRoaXNbJ3gtY29tcG9uZW50J10gPSBsb3dlcmNhc2UoanNvblsneC1jb21wb25lbnQnXSlcbiAgICB9XG5cbiAgICBpZiAoIWlzRW1wdHkoanNvbi5wcm9wZXJ0aWVzKSkge1xuICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gbWFwKGpzb24ucHJvcGVydGllcywgKGl0ZW0sIGtleSkgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFNjaGVtYShpdGVtLCB0aGlzLCBrZXkpXG4gICAgICB9KVxuICAgICAgaWYgKGlzVmFsaWQoanNvbi5hZGRpdGlvbmFsUHJvcGVydGllcykpIHtcbiAgICAgICAgdGhpcy5hZGRpdGlvbmFsUHJvcGVydGllcyA9IG5ldyBTY2hlbWEoanNvbi5hZGRpdGlvbmFsUHJvcGVydGllcywgdGhpcylcbiAgICAgIH1cbiAgICAgIGlmIChpc1ZhbGlkKGpzb24ucGF0dGVyblByb3BlcnRpZXMpKSB7XG4gICAgICAgIHRoaXMucGF0dGVyblByb3BlcnRpZXMgPSBtYXAoanNvbi5wYXR0ZXJuUHJvcGVydGllcywgKGl0ZW0sIGtleSkgPT4ge1xuICAgICAgICAgIHJldHVybiBuZXcgU2NoZW1hKGl0ZW0sIHRoaXMsIGtleSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc0VtcHR5KGpzb24uaXRlbXMpKSB7XG4gICAgICB0aGlzLml0ZW1zID0gaXNBcnIoanNvbi5pdGVtcylcbiAgICAgICAgPyBtYXAoanNvbi5pdGVtcywgaXRlbSA9PiBuZXcgU2NoZW1hKGl0ZW0sIHRoaXMpKVxuICAgICAgICA6IG5ldyBTY2hlbWEoanNvbi5pdGVtcywgdGhpcylcbiAgICAgIGlmIChpc1ZhbGlkKGpzb24uYWRkaXRpb25hbEl0ZW1zKSkge1xuICAgICAgICB0aGlzLmFkZGl0aW9uYWxJdGVtcyA9IG5ldyBTY2hlbWEoanNvbi5hZGRpdGlvbmFsSXRlbXMsIHRoaXMpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgLyoqXG4gICAqIHRvb2xzXG4gICAqL1xuICBpc09iamVjdCgpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlID09PSAnb2JqZWN0J1xuICB9XG4gIGlzQXJyYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gJ2FycmF5J1xuICB9XG5cbiAgbWFwUHJvcGVydGllcyhjYWxsYmFjaz86IChzY2hlbWE6IFNjaGVtYSwga2V5OiBzdHJpbmcpID0+IGFueSkge1xuICAgIHJldHVybiB0aGlzLmdldE9yZGVyUHJvcGVydGllcygpLm1hcCgoeyBzY2hlbWEsIGtleSB9KSA9PiB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soc2NoZW1hLCBrZXkpXG4gICAgfSlcbiAgfVxuXG4gIGdldE9yZGVyUHJvcGVydGllcygpIHtcbiAgICByZXR1cm4gU2NoZW1hLmdldE9yZGVyUHJvcGVydGllcyh0aGlzKVxuICB9XG5cbiAgdW5yZWxlYXNlX2dldE9yZGVyUGF0dGVyblByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIFNjaGVtYS5nZXRPcmRlclByb3BlcnRpZXModGhpcywgJ3BhdHRlcm5Qcm9wZXJ0aWVzJylcbiAgfVxuXG4gIHVucmVsZWFzZV9tYXBQYXR0ZXJuUHJvcGVydGllcyhcbiAgICBjYWxsYmFjaz86IChzY2hlbWE6IFNjaGVtYSwga2V5OiBzdHJpbmcpID0+IGFueVxuICApIHtcbiAgICByZXR1cm4gdGhpcy51bnJlbGVhc2VfZ2V0T3JkZXJQYXR0ZXJuUHJvcGVydGllcygpLm1hcCgoeyBzY2hlbWEsIGtleSB9KSA9PiB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soc2NoZW1hLCBrZXkpXG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBnZXRPcmRlclByb3BlcnRpZXMgPSAoXG4gICAgc2NoZW1hOiBJU2NoZW1hID0ge30sXG4gICAgcHJvcGVydGllc05hbWU6IHN0cmluZyA9ICdwcm9wZXJ0aWVzJ1xuICApID0+IHtcbiAgICBjb25zdCBuZXdTY2hlbWEgPSBuZXcgU2NoZW1hKHNjaGVtYSlcbiAgICBjb25zdCBvcmRlclByb3BlcnRpZXMgPSBbXVxuICAgIGNvbnN0IHVub3JkZXJQcm9wZXJ0aWVzID0gW11cbiAgICBlYWNoKG5ld1NjaGVtYVtwcm9wZXJ0aWVzTmFtZV0sIChpdGVtLCBrZXkpID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gaXRlbVsneC1pbmRleCddXG4gICAgICBpZiAoIWlzTmFOKGluZGV4KSkge1xuICAgICAgICBvcmRlclByb3BlcnRpZXNbaW5kZXhdID0geyBzY2hlbWE6IGl0ZW0sIGtleSB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1bm9yZGVyUHJvcGVydGllcy5wdXNoKHsgc2NoZW1hOiBpdGVtLCBrZXkgfSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIG9yZGVyUHJvcGVydGllcy5jb25jYXQodW5vcmRlclByb3BlcnRpZXMpLmZpbHRlcihpdGVtID0+ICEhaXRlbSlcbiAgfVxufVxuIiwiLyoqXG4gKiBTcGVjaWFsIGxhbmd1YWdlLXNwZWNpZmljIG92ZXJyaWRlcy5cbiAqXG4gKiBTb3VyY2U6IGZ0cDovL2Z0cC51bmljb2RlLm9yZy9QdWJsaWMvVUNEL2xhdGVzdC91Y2QvU3BlY2lhbENhc2luZy50eHRcbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgTEFOR1VBR0VTID0ge1xuICB0cjoge1xuICAgIHJlZ2V4cDogL1tcXHUwMDY5XS9nLFxuICAgIG1hcDoge1xuICAgICAgJ1xcdTAwNjknOiAnXFx1MDEzMCdcbiAgICB9XG4gIH0sXG4gIGF6OiB7XG4gICAgcmVnZXhwOiAvW1xcdTAwNjldL2csXG4gICAgbWFwOiB7XG4gICAgICAnXFx1MDA2OSc6ICdcXHUwMTMwJ1xuICAgIH1cbiAgfSxcbiAgbHQ6IHtcbiAgICByZWdleHA6IC9bXFx1MDA2OVxcdTAwNkFcXHUwMTJGXVxcdTAzMDd8XFx1MDA2OVxcdTAzMDdbXFx1MDMwMFxcdTAzMDFcXHUwMzAzXS9nLFxuICAgIG1hcDoge1xuICAgICAgJ1xcdTAwNjlcXHUwMzA3JzogJ1xcdTAwNDknLFxuICAgICAgJ1xcdTAwNkFcXHUwMzA3JzogJ1xcdTAwNEEnLFxuICAgICAgJ1xcdTAxMkZcXHUwMzA3JzogJ1xcdTAxMkUnLFxuICAgICAgJ1xcdTAwNjlcXHUwMzA3XFx1MDMwMCc6ICdcXHUwMENDJyxcbiAgICAgICdcXHUwMDY5XFx1MDMwN1xcdTAzMDEnOiAnXFx1MDBDRCcsXG4gICAgICAnXFx1MDA2OVxcdTAzMDdcXHUwMzAzJzogJ1xcdTAxMjgnXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVXBwZXIgY2FzZSBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIsIGxvY2FsZSkge1xuICB2YXIgbGFuZyA9IExBTkdVQUdFU1tsb2NhbGVdXG5cbiAgc3RyID0gc3RyID09IG51bGwgPyAnJyA6IFN0cmluZyhzdHIpXG5cbiAgaWYgKGxhbmcpIHtcbiAgICBzdHIgPSBzdHIucmVwbGFjZShsYW5nLnJlZ2V4cCwgZnVuY3Rpb24gKG0pIHsgcmV0dXJuIGxhbmcubWFwW21dIH0pXG4gIH1cblxuICByZXR1cm4gc3RyLnRvVXBwZXJDYXNlKClcbn1cbiIsIi8qKlxuICogU3BlY2lhbCBsYW5ndWFnZS1zcGVjaWZpYyBvdmVycmlkZXMuXG4gKlxuICogU291cmNlOiBmdHA6Ly9mdHAudW5pY29kZS5vcmcvUHVibGljL1VDRC9sYXRlc3QvdWNkL1NwZWNpYWxDYXNpbmcudHh0XG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xudmFyIExBTkdVQUdFUyA9IHtcbiAgdHI6IHtcbiAgICByZWdleHA6IC9cXHUwMTMwfFxcdTAwNDl8XFx1MDA0OVxcdTAzMDcvZyxcbiAgICBtYXA6IHtcbiAgICAgICdcXHUwMTMwJzogJ1xcdTAwNjknLFxuICAgICAgJ1xcdTAwNDknOiAnXFx1MDEzMScsXG4gICAgICAnXFx1MDA0OVxcdTAzMDcnOiAnXFx1MDA2OSdcbiAgICB9XG4gIH0sXG4gIGF6OiB7XG4gICAgcmVnZXhwOiAvW1xcdTAxMzBdL2csXG4gICAgbWFwOiB7XG4gICAgICAnXFx1MDEzMCc6ICdcXHUwMDY5JyxcbiAgICAgICdcXHUwMDQ5JzogJ1xcdTAxMzEnLFxuICAgICAgJ1xcdTAwNDlcXHUwMzA3JzogJ1xcdTAwNjknXG4gICAgfVxuICB9LFxuICBsdDoge1xuICAgIHJlZ2V4cDogL1tcXHUwMDQ5XFx1MDA0QVxcdTAxMkVcXHUwMENDXFx1MDBDRFxcdTAxMjhdL2csXG4gICAgbWFwOiB7XG4gICAgICAnXFx1MDA0OSc6ICdcXHUwMDY5XFx1MDMwNycsXG4gICAgICAnXFx1MDA0QSc6ICdcXHUwMDZBXFx1MDMwNycsXG4gICAgICAnXFx1MDEyRSc6ICdcXHUwMTJGXFx1MDMwNycsXG4gICAgICAnXFx1MDBDQyc6ICdcXHUwMDY5XFx1MDMwN1xcdTAzMDAnLFxuICAgICAgJ1xcdTAwQ0QnOiAnXFx1MDA2OVxcdTAzMDdcXHUwMzAxJyxcbiAgICAgICdcXHUwMTI4JzogJ1xcdTAwNjlcXHUwMzA3XFx1MDMwMydcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBMb3dlcmNhc2UgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyLCBsb2NhbGUpIHtcbiAgdmFyIGxhbmcgPSBMQU5HVUFHRVNbbG9jYWxlXVxuXG4gIHN0ciA9IHN0ciA9PSBudWxsID8gJycgOiBTdHJpbmcoc3RyKVxuXG4gIGlmIChsYW5nKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UobGFuZy5yZWdleHAsIGZ1bmN0aW9uIChtKSB7IHJldHVybiBsYW5nLm1hcFttXSB9KVxuICB9XG5cbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IC9bXkEtWmEtelxceEFBXFx4QjVcXHhCQVxceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHhGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzcwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0OEEtXFx1MDUyRlxcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjIwLVxcdTA2NEFcXHUwNjZFXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDQS1cXHUwN0VBXFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODE1XFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDg0MC1cXHUwODU4XFx1MDhBMC1cXHUwOEI0XFx1MDkwNC1cXHUwOTM5XFx1MDkzRFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcxLVxcdTA5ODBcXHUwOTg1LVxcdTA5OENcXHUwOThGXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJEXFx1MDlDRVxcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUxXFx1MDlGMFxcdTA5RjFcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQUY5XFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNEXFx1MEM1OC1cXHUwQzVBXFx1MEM2MFxcdTBDNjFcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JEXFx1MENERVxcdTBDRTBcXHUwQ0UxXFx1MENGMVxcdTBDRjJcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBEM0FcXHUwRDNEXFx1MEQ0RVxcdTBENUYtXFx1MEQ2MVxcdTBEN0EtXFx1MEQ3RlxcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRTAxLVxcdTBFMzBcXHUwRTMyXFx1MEUzM1xcdTBFNDAtXFx1MEU0NlxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUIwXFx1MEVCMlxcdTBFQjNcXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjVcXHUxM0Y4LVxcdTEzRkRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkYxLVxcdTE2RjhcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0Q3XFx1MTdEQ1xcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQUE3XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRCXFx1MUI4My1cXHUxQkEwXFx1MUJBRVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQzAwLVxcdTFDMjNcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDN0RcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjFcXHUxQ0Y1XFx1MUNGNlxcdTFEMDAtXFx1MURCRlxcdTFFMDAtXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMkYtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTgzXFx1MjE4NFxcdTJDMDAtXFx1MkMyRVxcdTJDMzAtXFx1MkM1RVxcdTJDNjAtXFx1MkNFNFxcdTJDRUItXFx1MkNFRVxcdTJDRjJcXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHUyRDMwLVxcdTJENjdcXHUyRDZGXFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MkUyRlxcdTMwMDVcXHUzMDA2XFx1MzAzMS1cXHUzMDM1XFx1MzAzQlxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlELVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkRcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGRDVcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MUZcXHVBNjJBXFx1QTYyQlxcdUE2NDAtXFx1QTY2RVxcdUE2N0YtXFx1QTY5RFxcdUE2QTAtXFx1QTZFNVxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTdBRFxcdUE3QjAtXFx1QTdCN1xcdUE3RjctXFx1QTgwMVxcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyMlxcdUE4NDAtXFx1QTg3M1xcdUE4ODItXFx1QThCM1xcdUE4RjItXFx1QThGN1xcdUE4RkJcXHVBOEZEXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUE5RTAtXFx1QTlFNFxcdUE5RTYtXFx1QTlFRlxcdUE5RkEtXFx1QTlGRVxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTdFLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCMzAtXFx1QUI1QVxcdUFCNUMtXFx1QUI2NVxcdUFCNzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQzAtOVxceEIyXFx4QjNcXHhCOVxceEJDLVxceEJFXFx1MDY2MC1cXHUwNjY5XFx1MDZGMC1cXHUwNkY5XFx1MDdDMC1cXHUwN0M5XFx1MDk2Ni1cXHUwOTZGXFx1MDlFNi1cXHUwOUVGXFx1MDlGNC1cXHUwOUY5XFx1MEE2Ni1cXHUwQTZGXFx1MEFFNi1cXHUwQUVGXFx1MEI2Ni1cXHUwQjZGXFx1MEI3Mi1cXHUwQjc3XFx1MEJFNi1cXHUwQkYyXFx1MEM2Ni1cXHUwQzZGXFx1MEM3OC1cXHUwQzdFXFx1MENFNi1cXHUwQ0VGXFx1MEQ2Ni1cXHUwRDc1XFx1MERFNi1cXHUwREVGXFx1MEU1MC1cXHUwRTU5XFx1MEVEMC1cXHUwRUQ5XFx1MEYyMC1cXHUwRjMzXFx1MTA0MC1cXHUxMDQ5XFx1MTA5MC1cXHUxMDk5XFx1MTM2OS1cXHUxMzdDXFx1MTZFRS1cXHUxNkYwXFx1MTdFMC1cXHUxN0U5XFx1MTdGMC1cXHUxN0Y5XFx1MTgxMC1cXHUxODE5XFx1MTk0Ni1cXHUxOTRGXFx1MTlEMC1cXHUxOURBXFx1MUE4MC1cXHUxQTg5XFx1MUE5MC1cXHUxQTk5XFx1MUI1MC1cXHUxQjU5XFx1MUJCMC1cXHUxQkI5XFx1MUM0MC1cXHUxQzQ5XFx1MUM1MC1cXHUxQzU5XFx1MjA3MFxcdTIwNzQtXFx1MjA3OVxcdTIwODAtXFx1MjA4OVxcdTIxNTAtXFx1MjE4MlxcdTIxODUtXFx1MjE4OVxcdTI0NjAtXFx1MjQ5QlxcdTI0RUEtXFx1MjRGRlxcdTI3NzYtXFx1Mjc5M1xcdTJDRkRcXHUzMDA3XFx1MzAyMS1cXHUzMDI5XFx1MzAzOC1cXHUzMDNBXFx1MzE5Mi1cXHUzMTk1XFx1MzIyMC1cXHUzMjI5XFx1MzI0OC1cXHUzMjRGXFx1MzI1MS1cXHUzMjVGXFx1MzI4MC1cXHUzMjg5XFx1MzJCMS1cXHUzMkJGXFx1QTYyMC1cXHVBNjI5XFx1QTZFNi1cXHVBNkVGXFx1QTgzMC1cXHVBODM1XFx1QThEMC1cXHVBOEQ5XFx1QTkwMC1cXHVBOTA5XFx1QTlEMC1cXHVBOUQ5XFx1QTlGMC1cXHVBOUY5XFx1QUE1MC1cXHVBQTU5XFx1QUJGMC1cXHVBQkY5XFx1RkYxMC1cXHVGRjE5XSsvZ1xuIiwibW9kdWxlLmV4cG9ydHMgPSAvKFthLXpcXHhCNVxceERGLVxceEY2XFx4RjgtXFx4RkZcXHUwMTAxXFx1MDEwM1xcdTAxMDVcXHUwMTA3XFx1MDEwOVxcdTAxMEJcXHUwMTBEXFx1MDEwRlxcdTAxMTFcXHUwMTEzXFx1MDExNVxcdTAxMTdcXHUwMTE5XFx1MDExQlxcdTAxMURcXHUwMTFGXFx1MDEyMVxcdTAxMjNcXHUwMTI1XFx1MDEyN1xcdTAxMjlcXHUwMTJCXFx1MDEyRFxcdTAxMkZcXHUwMTMxXFx1MDEzM1xcdTAxMzVcXHUwMTM3XFx1MDEzOFxcdTAxM0FcXHUwMTNDXFx1MDEzRVxcdTAxNDBcXHUwMTQyXFx1MDE0NFxcdTAxNDZcXHUwMTQ4XFx1MDE0OVxcdTAxNEJcXHUwMTREXFx1MDE0RlxcdTAxNTFcXHUwMTUzXFx1MDE1NVxcdTAxNTdcXHUwMTU5XFx1MDE1QlxcdTAxNURcXHUwMTVGXFx1MDE2MVxcdTAxNjNcXHUwMTY1XFx1MDE2N1xcdTAxNjlcXHUwMTZCXFx1MDE2RFxcdTAxNkZcXHUwMTcxXFx1MDE3M1xcdTAxNzVcXHUwMTc3XFx1MDE3QVxcdTAxN0NcXHUwMTdFLVxcdTAxODBcXHUwMTgzXFx1MDE4NVxcdTAxODhcXHUwMThDXFx1MDE4RFxcdTAxOTJcXHUwMTk1XFx1MDE5OS1cXHUwMTlCXFx1MDE5RVxcdTAxQTFcXHUwMUEzXFx1MDFBNVxcdTAxQThcXHUwMUFBXFx1MDFBQlxcdTAxQURcXHUwMUIwXFx1MDFCNFxcdTAxQjZcXHUwMUI5XFx1MDFCQVxcdTAxQkQtXFx1MDFCRlxcdTAxQzZcXHUwMUM5XFx1MDFDQ1xcdTAxQ0VcXHUwMUQwXFx1MDFEMlxcdTAxRDRcXHUwMUQ2XFx1MDFEOFxcdTAxREFcXHUwMURDXFx1MDFERFxcdTAxREZcXHUwMUUxXFx1MDFFM1xcdTAxRTVcXHUwMUU3XFx1MDFFOVxcdTAxRUJcXHUwMUVEXFx1MDFFRlxcdTAxRjBcXHUwMUYzXFx1MDFGNVxcdTAxRjlcXHUwMUZCXFx1MDFGRFxcdTAxRkZcXHUwMjAxXFx1MDIwM1xcdTAyMDVcXHUwMjA3XFx1MDIwOVxcdTAyMEJcXHUwMjBEXFx1MDIwRlxcdTAyMTFcXHUwMjEzXFx1MDIxNVxcdTAyMTdcXHUwMjE5XFx1MDIxQlxcdTAyMURcXHUwMjFGXFx1MDIyMVxcdTAyMjNcXHUwMjI1XFx1MDIyN1xcdTAyMjlcXHUwMjJCXFx1MDIyRFxcdTAyMkZcXHUwMjMxXFx1MDIzMy1cXHUwMjM5XFx1MDIzQ1xcdTAyM0ZcXHUwMjQwXFx1MDI0MlxcdTAyNDdcXHUwMjQ5XFx1MDI0QlxcdTAyNERcXHUwMjRGLVxcdTAyOTNcXHUwMjk1LVxcdTAyQUZcXHUwMzcxXFx1MDM3M1xcdTAzNzdcXHUwMzdCLVxcdTAzN0RcXHUwMzkwXFx1MDNBQy1cXHUwM0NFXFx1MDNEMFxcdTAzRDFcXHUwM0Q1LVxcdTAzRDdcXHUwM0Q5XFx1MDNEQlxcdTAzRERcXHUwM0RGXFx1MDNFMVxcdTAzRTNcXHUwM0U1XFx1MDNFN1xcdTAzRTlcXHUwM0VCXFx1MDNFRFxcdTAzRUYtXFx1MDNGM1xcdTAzRjVcXHUwM0Y4XFx1MDNGQlxcdTAzRkNcXHUwNDMwLVxcdTA0NUZcXHUwNDYxXFx1MDQ2M1xcdTA0NjVcXHUwNDY3XFx1MDQ2OVxcdTA0NkJcXHUwNDZEXFx1MDQ2RlxcdTA0NzFcXHUwNDczXFx1MDQ3NVxcdTA0NzdcXHUwNDc5XFx1MDQ3QlxcdTA0N0RcXHUwNDdGXFx1MDQ4MVxcdTA0OEJcXHUwNDhEXFx1MDQ4RlxcdTA0OTFcXHUwNDkzXFx1MDQ5NVxcdTA0OTdcXHUwNDk5XFx1MDQ5QlxcdTA0OURcXHUwNDlGXFx1MDRBMVxcdTA0QTNcXHUwNEE1XFx1MDRBN1xcdTA0QTlcXHUwNEFCXFx1MDRBRFxcdTA0QUZcXHUwNEIxXFx1MDRCM1xcdTA0QjVcXHUwNEI3XFx1MDRCOVxcdTA0QkJcXHUwNEJEXFx1MDRCRlxcdTA0QzJcXHUwNEM0XFx1MDRDNlxcdTA0QzhcXHUwNENBXFx1MDRDQ1xcdTA0Q0VcXHUwNENGXFx1MDREMVxcdTA0RDNcXHUwNEQ1XFx1MDREN1xcdTA0RDlcXHUwNERCXFx1MDRERFxcdTA0REZcXHUwNEUxXFx1MDRFM1xcdTA0RTVcXHUwNEU3XFx1MDRFOVxcdTA0RUJcXHUwNEVEXFx1MDRFRlxcdTA0RjFcXHUwNEYzXFx1MDRGNVxcdTA0RjdcXHUwNEY5XFx1MDRGQlxcdTA0RkRcXHUwNEZGXFx1MDUwMVxcdTA1MDNcXHUwNTA1XFx1MDUwN1xcdTA1MDlcXHUwNTBCXFx1MDUwRFxcdTA1MEZcXHUwNTExXFx1MDUxM1xcdTA1MTVcXHUwNTE3XFx1MDUxOVxcdTA1MUJcXHUwNTFEXFx1MDUxRlxcdTA1MjFcXHUwNTIzXFx1MDUyNVxcdTA1MjdcXHUwNTI5XFx1MDUyQlxcdTA1MkRcXHUwNTJGXFx1MDU2MS1cXHUwNTg3XFx1MTNGOC1cXHUxM0ZEXFx1MUQwMC1cXHUxRDJCXFx1MUQ2Qi1cXHUxRDc3XFx1MUQ3OS1cXHUxRDlBXFx1MUUwMVxcdTFFMDNcXHUxRTA1XFx1MUUwN1xcdTFFMDlcXHUxRTBCXFx1MUUwRFxcdTFFMEZcXHUxRTExXFx1MUUxM1xcdTFFMTVcXHUxRTE3XFx1MUUxOVxcdTFFMUJcXHUxRTFEXFx1MUUxRlxcdTFFMjFcXHUxRTIzXFx1MUUyNVxcdTFFMjdcXHUxRTI5XFx1MUUyQlxcdTFFMkRcXHUxRTJGXFx1MUUzMVxcdTFFMzNcXHUxRTM1XFx1MUUzN1xcdTFFMzlcXHUxRTNCXFx1MUUzRFxcdTFFM0ZcXHUxRTQxXFx1MUU0M1xcdTFFNDVcXHUxRTQ3XFx1MUU0OVxcdTFFNEJcXHUxRTREXFx1MUU0RlxcdTFFNTFcXHUxRTUzXFx1MUU1NVxcdTFFNTdcXHUxRTU5XFx1MUU1QlxcdTFFNURcXHUxRTVGXFx1MUU2MVxcdTFFNjNcXHUxRTY1XFx1MUU2N1xcdTFFNjlcXHUxRTZCXFx1MUU2RFxcdTFFNkZcXHUxRTcxXFx1MUU3M1xcdTFFNzVcXHUxRTc3XFx1MUU3OVxcdTFFN0JcXHUxRTdEXFx1MUU3RlxcdTFFODFcXHUxRTgzXFx1MUU4NVxcdTFFODdcXHUxRTg5XFx1MUU4QlxcdTFFOERcXHUxRThGXFx1MUU5MVxcdTFFOTNcXHUxRTk1LVxcdTFFOURcXHUxRTlGXFx1MUVBMVxcdTFFQTNcXHUxRUE1XFx1MUVBN1xcdTFFQTlcXHUxRUFCXFx1MUVBRFxcdTFFQUZcXHUxRUIxXFx1MUVCM1xcdTFFQjVcXHUxRUI3XFx1MUVCOVxcdTFFQkJcXHUxRUJEXFx1MUVCRlxcdTFFQzFcXHUxRUMzXFx1MUVDNVxcdTFFQzdcXHUxRUM5XFx1MUVDQlxcdTFFQ0RcXHUxRUNGXFx1MUVEMVxcdTFFRDNcXHUxRUQ1XFx1MUVEN1xcdTFFRDlcXHUxRURCXFx1MUVERFxcdTFFREZcXHUxRUUxXFx1MUVFM1xcdTFFRTVcXHUxRUU3XFx1MUVFOVxcdTFFRUJcXHUxRUVEXFx1MUVFRlxcdTFFRjFcXHUxRUYzXFx1MUVGNVxcdTFFRjdcXHUxRUY5XFx1MUVGQlxcdTFFRkRcXHUxRUZGLVxcdTFGMDdcXHUxRjEwLVxcdTFGMTVcXHUxRjIwLVxcdTFGMjdcXHUxRjMwLVxcdTFGMzdcXHUxRjQwLVxcdTFGNDVcXHUxRjUwLVxcdTFGNTdcXHUxRjYwLVxcdTFGNjdcXHUxRjcwLVxcdTFGN0RcXHUxRjgwLVxcdTFGODdcXHUxRjkwLVxcdTFGOTdcXHUxRkEwLVxcdTFGQTdcXHUxRkIwLVxcdTFGQjRcXHUxRkI2XFx1MUZCN1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2XFx1MUZDN1xcdTFGRDAtXFx1MUZEM1xcdTFGRDZcXHUxRkQ3XFx1MUZFMC1cXHUxRkU3XFx1MUZGMi1cXHUxRkY0XFx1MUZGNlxcdTFGRjdcXHUyMTBBXFx1MjEwRVxcdTIxMEZcXHUyMTEzXFx1MjEyRlxcdTIxMzRcXHUyMTM5XFx1MjEzQ1xcdTIxM0RcXHUyMTQ2LVxcdTIxNDlcXHUyMTRFXFx1MjE4NFxcdTJDMzAtXFx1MkM1RVxcdTJDNjFcXHUyQzY1XFx1MkM2NlxcdTJDNjhcXHUyQzZBXFx1MkM2Q1xcdTJDNzFcXHUyQzczXFx1MkM3NFxcdTJDNzYtXFx1MkM3QlxcdTJDODFcXHUyQzgzXFx1MkM4NVxcdTJDODdcXHUyQzg5XFx1MkM4QlxcdTJDOERcXHUyQzhGXFx1MkM5MVxcdTJDOTNcXHUyQzk1XFx1MkM5N1xcdTJDOTlcXHUyQzlCXFx1MkM5RFxcdTJDOUZcXHUyQ0ExXFx1MkNBM1xcdTJDQTVcXHUyQ0E3XFx1MkNBOVxcdTJDQUJcXHUyQ0FEXFx1MkNBRlxcdTJDQjFcXHUyQ0IzXFx1MkNCNVxcdTJDQjdcXHUyQ0I5XFx1MkNCQlxcdTJDQkRcXHUyQ0JGXFx1MkNDMVxcdTJDQzNcXHUyQ0M1XFx1MkNDN1xcdTJDQzlcXHUyQ0NCXFx1MkNDRFxcdTJDQ0ZcXHUyQ0QxXFx1MkNEM1xcdTJDRDVcXHUyQ0Q3XFx1MkNEOVxcdTJDREJcXHUyQ0REXFx1MkNERlxcdTJDRTFcXHUyQ0UzXFx1MkNFNFxcdTJDRUNcXHUyQ0VFXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1QTY0MVxcdUE2NDNcXHVBNjQ1XFx1QTY0N1xcdUE2NDlcXHVBNjRCXFx1QTY0RFxcdUE2NEZcXHVBNjUxXFx1QTY1M1xcdUE2NTVcXHVBNjU3XFx1QTY1OVxcdUE2NUJcXHVBNjVEXFx1QTY1RlxcdUE2NjFcXHVBNjYzXFx1QTY2NVxcdUE2NjdcXHVBNjY5XFx1QTY2QlxcdUE2NkRcXHVBNjgxXFx1QTY4M1xcdUE2ODVcXHVBNjg3XFx1QTY4OVxcdUE2OEJcXHVBNjhEXFx1QTY4RlxcdUE2OTFcXHVBNjkzXFx1QTY5NVxcdUE2OTdcXHVBNjk5XFx1QTY5QlxcdUE3MjNcXHVBNzI1XFx1QTcyN1xcdUE3MjlcXHVBNzJCXFx1QTcyRFxcdUE3MkYtXFx1QTczMVxcdUE3MzNcXHVBNzM1XFx1QTczN1xcdUE3MzlcXHVBNzNCXFx1QTczRFxcdUE3M0ZcXHVBNzQxXFx1QTc0M1xcdUE3NDVcXHVBNzQ3XFx1QTc0OVxcdUE3NEJcXHVBNzREXFx1QTc0RlxcdUE3NTFcXHVBNzUzXFx1QTc1NVxcdUE3NTdcXHVBNzU5XFx1QTc1QlxcdUE3NURcXHVBNzVGXFx1QTc2MVxcdUE3NjNcXHVBNzY1XFx1QTc2N1xcdUE3NjlcXHVBNzZCXFx1QTc2RFxcdUE3NkZcXHVBNzcxLVxcdUE3NzhcXHVBNzdBXFx1QTc3Q1xcdUE3N0ZcXHVBNzgxXFx1QTc4M1xcdUE3ODVcXHVBNzg3XFx1QTc4Q1xcdUE3OEVcXHVBNzkxXFx1QTc5My1cXHVBNzk1XFx1QTc5N1xcdUE3OTlcXHVBNzlCXFx1QTc5RFxcdUE3OUZcXHVBN0ExXFx1QTdBM1xcdUE3QTVcXHVBN0E3XFx1QTdBOVxcdUE3QjVcXHVBN0I3XFx1QTdGQVxcdUFCMzAtXFx1QUI1QVxcdUFCNjAtXFx1QUI2NVxcdUFCNzAtXFx1QUJCRlxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZGNDEtXFx1RkY1QTAtOVxceEIyXFx4QjNcXHhCOVxceEJDLVxceEJFXFx1MDY2MC1cXHUwNjY5XFx1MDZGMC1cXHUwNkY5XFx1MDdDMC1cXHUwN0M5XFx1MDk2Ni1cXHUwOTZGXFx1MDlFNi1cXHUwOUVGXFx1MDlGNC1cXHUwOUY5XFx1MEE2Ni1cXHUwQTZGXFx1MEFFNi1cXHUwQUVGXFx1MEI2Ni1cXHUwQjZGXFx1MEI3Mi1cXHUwQjc3XFx1MEJFNi1cXHUwQkYyXFx1MEM2Ni1cXHUwQzZGXFx1MEM3OC1cXHUwQzdFXFx1MENFNi1cXHUwQ0VGXFx1MEQ2Ni1cXHUwRDc1XFx1MERFNi1cXHUwREVGXFx1MEU1MC1cXHUwRTU5XFx1MEVEMC1cXHUwRUQ5XFx1MEYyMC1cXHUwRjMzXFx1MTA0MC1cXHUxMDQ5XFx1MTA5MC1cXHUxMDk5XFx1MTM2OS1cXHUxMzdDXFx1MTZFRS1cXHUxNkYwXFx1MTdFMC1cXHUxN0U5XFx1MTdGMC1cXHUxN0Y5XFx1MTgxMC1cXHUxODE5XFx1MTk0Ni1cXHUxOTRGXFx1MTlEMC1cXHUxOURBXFx1MUE4MC1cXHUxQTg5XFx1MUE5MC1cXHUxQTk5XFx1MUI1MC1cXHUxQjU5XFx1MUJCMC1cXHUxQkI5XFx1MUM0MC1cXHUxQzQ5XFx1MUM1MC1cXHUxQzU5XFx1MjA3MFxcdTIwNzQtXFx1MjA3OVxcdTIwODAtXFx1MjA4OVxcdTIxNTAtXFx1MjE4MlxcdTIxODUtXFx1MjE4OVxcdTI0NjAtXFx1MjQ5QlxcdTI0RUEtXFx1MjRGRlxcdTI3NzYtXFx1Mjc5M1xcdTJDRkRcXHUzMDA3XFx1MzAyMS1cXHUzMDI5XFx1MzAzOC1cXHUzMDNBXFx1MzE5Mi1cXHUzMTk1XFx1MzIyMC1cXHUzMjI5XFx1MzI0OC1cXHUzMjRGXFx1MzI1MS1cXHUzMjVGXFx1MzI4MC1cXHUzMjg5XFx1MzJCMS1cXHUzMkJGXFx1QTYyMC1cXHVBNjI5XFx1QTZFNi1cXHVBNkVGXFx1QTgzMC1cXHVBODM1XFx1QThEMC1cXHVBOEQ5XFx1QTkwMC1cXHVBOTA5XFx1QTlEMC1cXHVBOUQ5XFx1QTlGMC1cXHVBOUY5XFx1QUE1MC1cXHVBQTU5XFx1QUJGMC1cXHVBQkY5XFx1RkYxMC1cXHVGRjE5XSkoW0EtWlxceEMwLVxceEQ2XFx4RDgtXFx4REVcXHUwMTAwXFx1MDEwMlxcdTAxMDRcXHUwMTA2XFx1MDEwOFxcdTAxMEFcXHUwMTBDXFx1MDEwRVxcdTAxMTBcXHUwMTEyXFx1MDExNFxcdTAxMTZcXHUwMTE4XFx1MDExQVxcdTAxMUNcXHUwMTFFXFx1MDEyMFxcdTAxMjJcXHUwMTI0XFx1MDEyNlxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMkVcXHUwMTMwXFx1MDEzMlxcdTAxMzRcXHUwMTM2XFx1MDEzOVxcdTAxM0JcXHUwMTNEXFx1MDEzRlxcdTAxNDFcXHUwMTQzXFx1MDE0NVxcdTAxNDdcXHUwMTRBXFx1MDE0Q1xcdTAxNEVcXHUwMTUwXFx1MDE1MlxcdTAxNTRcXHUwMTU2XFx1MDE1OFxcdTAxNUFcXHUwMTVDXFx1MDE1RVxcdTAxNjBcXHUwMTYyXFx1MDE2NFxcdTAxNjZcXHUwMTY4XFx1MDE2QVxcdTAxNkNcXHUwMTZFXFx1MDE3MFxcdTAxNzJcXHUwMTc0XFx1MDE3NlxcdTAxNzhcXHUwMTc5XFx1MDE3QlxcdTAxN0RcXHUwMTgxXFx1MDE4MlxcdTAxODRcXHUwMTg2XFx1MDE4N1xcdTAxODktXFx1MDE4QlxcdTAxOEUtXFx1MDE5MVxcdTAxOTNcXHUwMTk0XFx1MDE5Ni1cXHUwMTk4XFx1MDE5Q1xcdTAxOURcXHUwMTlGXFx1MDFBMFxcdTAxQTJcXHUwMUE0XFx1MDFBNlxcdTAxQTdcXHUwMUE5XFx1MDFBQ1xcdTAxQUVcXHUwMUFGXFx1MDFCMS1cXHUwMUIzXFx1MDFCNVxcdTAxQjdcXHUwMUI4XFx1MDFCQ1xcdTAxQzRcXHUwMUM3XFx1MDFDQVxcdTAxQ0RcXHUwMUNGXFx1MDFEMVxcdTAxRDNcXHUwMUQ1XFx1MDFEN1xcdTAxRDlcXHUwMURCXFx1MDFERVxcdTAxRTBcXHUwMUUyXFx1MDFFNFxcdTAxRTZcXHUwMUU4XFx1MDFFQVxcdTAxRUNcXHUwMUVFXFx1MDFGMVxcdTAxRjRcXHUwMUY2LVxcdTAxRjhcXHUwMUZBXFx1MDFGQ1xcdTAxRkVcXHUwMjAwXFx1MDIwMlxcdTAyMDRcXHUwMjA2XFx1MDIwOFxcdTAyMEFcXHUwMjBDXFx1MDIwRVxcdTAyMTBcXHUwMjEyXFx1MDIxNFxcdTAyMTZcXHUwMjE4XFx1MDIxQVxcdTAyMUNcXHUwMjFFXFx1MDIyMFxcdTAyMjJcXHUwMjI0XFx1MDIyNlxcdTAyMjhcXHUwMjJBXFx1MDIyQ1xcdTAyMkVcXHUwMjMwXFx1MDIzMlxcdTAyM0FcXHUwMjNCXFx1MDIzRFxcdTAyM0VcXHUwMjQxXFx1MDI0My1cXHUwMjQ2XFx1MDI0OFxcdTAyNEFcXHUwMjRDXFx1MDI0RVxcdTAzNzBcXHUwMzcyXFx1MDM3NlxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEVcXHUwMzhGXFx1MDM5MS1cXHUwM0ExXFx1MDNBMy1cXHUwM0FCXFx1MDNDRlxcdTAzRDItXFx1MDNENFxcdTAzRDhcXHUwM0RBXFx1MDNEQ1xcdTAzREVcXHUwM0UwXFx1MDNFMlxcdTAzRTRcXHUwM0U2XFx1MDNFOFxcdTAzRUFcXHUwM0VDXFx1MDNFRVxcdTAzRjRcXHUwM0Y3XFx1MDNGOVxcdTAzRkFcXHUwM0ZELVxcdTA0MkZcXHUwNDYwXFx1MDQ2MlxcdTA0NjRcXHUwNDY2XFx1MDQ2OFxcdTA0NkFcXHUwNDZDXFx1MDQ2RVxcdTA0NzBcXHUwNDcyXFx1MDQ3NFxcdTA0NzZcXHUwNDc4XFx1MDQ3QVxcdTA0N0NcXHUwNDdFXFx1MDQ4MFxcdTA0OEFcXHUwNDhDXFx1MDQ4RVxcdTA0OTBcXHUwNDkyXFx1MDQ5NFxcdTA0OTZcXHUwNDk4XFx1MDQ5QVxcdTA0OUNcXHUwNDlFXFx1MDRBMFxcdTA0QTJcXHUwNEE0XFx1MDRBNlxcdTA0QThcXHUwNEFBXFx1MDRBQ1xcdTA0QUVcXHUwNEIwXFx1MDRCMlxcdTA0QjRcXHUwNEI2XFx1MDRCOFxcdTA0QkFcXHUwNEJDXFx1MDRCRVxcdTA0QzBcXHUwNEMxXFx1MDRDM1xcdTA0QzVcXHUwNEM3XFx1MDRDOVxcdTA0Q0JcXHUwNENEXFx1MDREMFxcdTA0RDJcXHUwNEQ0XFx1MDRENlxcdTA0RDhcXHUwNERBXFx1MDREQ1xcdTA0REVcXHUwNEUwXFx1MDRFMlxcdTA0RTRcXHUwNEU2XFx1MDRFOFxcdTA0RUFcXHUwNEVDXFx1MDRFRVxcdTA0RjBcXHUwNEYyXFx1MDRGNFxcdTA0RjZcXHUwNEY4XFx1MDRGQVxcdTA0RkNcXHUwNEZFXFx1MDUwMFxcdTA1MDJcXHUwNTA0XFx1MDUwNlxcdTA1MDhcXHUwNTBBXFx1MDUwQ1xcdTA1MEVcXHUwNTEwXFx1MDUxMlxcdTA1MTRcXHUwNTE2XFx1MDUxOFxcdTA1MUFcXHUwNTFDXFx1MDUxRVxcdTA1MjBcXHUwNTIyXFx1MDUyNFxcdTA1MjZcXHUwNTI4XFx1MDUyQVxcdTA1MkNcXHUwNTJFXFx1MDUzMS1cXHUwNTU2XFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxM0EwLVxcdTEzRjVcXHUxRTAwXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MUUwOFxcdTFFMEFcXHUxRTBDXFx1MUUwRVxcdTFFMTBcXHUxRTEyXFx1MUUxNFxcdTFFMTZcXHUxRTE4XFx1MUUxQVxcdTFFMUNcXHUxRTFFXFx1MUUyMFxcdTFFMjJcXHUxRTI0XFx1MUUyNlxcdTFFMjhcXHUxRTJBXFx1MUUyQ1xcdTFFMkVcXHUxRTMwXFx1MUUzMlxcdTFFMzRcXHUxRTM2XFx1MUUzOFxcdTFFM0FcXHUxRTNDXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MUU0NFxcdTFFNDZcXHUxRTQ4XFx1MUU0QVxcdTFFNENcXHUxRTRFXFx1MUU1MFxcdTFFNTJcXHUxRTU0XFx1MUU1NlxcdTFFNThcXHUxRTVBXFx1MUU1Q1xcdTFFNUVcXHUxRTYwXFx1MUU2MlxcdTFFNjRcXHUxRTY2XFx1MUU2OFxcdTFFNkFcXHUxRTZDXFx1MUU2RVxcdTFFNzBcXHUxRTcyXFx1MUU3NFxcdTFFNzZcXHUxRTc4XFx1MUU3QVxcdTFFN0NcXHUxRTdFXFx1MUU4MFxcdTFFODJcXHUxRTg0XFx1MUU4NlxcdTFFODhcXHUxRThBXFx1MUU4Q1xcdTFFOEVcXHUxRTkwXFx1MUU5MlxcdTFFOTRcXHUxRTlFXFx1MUVBMFxcdTFFQTJcXHUxRUE0XFx1MUVBNlxcdTFFQThcXHUxRUFBXFx1MUVBQ1xcdTFFQUVcXHUxRUIwXFx1MUVCMlxcdTFFQjRcXHUxRUI2XFx1MUVCOFxcdTFFQkFcXHUxRUJDXFx1MUVCRVxcdTFFQzBcXHUxRUMyXFx1MUVDNFxcdTFFQzZcXHUxRUM4XFx1MUVDQVxcdTFFQ0NcXHUxRUNFXFx1MUVEMFxcdTFFRDJcXHUxRUQ0XFx1MUVENlxcdTFFRDhcXHUxRURBXFx1MUVEQ1xcdTFFREVcXHUxRUUwXFx1MUVFMlxcdTFFRTRcXHUxRUU2XFx1MUVFOFxcdTFFRUFcXHUxRUVDXFx1MUVFRVxcdTFFRjBcXHUxRUYyXFx1MUVGNFxcdTFFRjZcXHUxRUY4XFx1MUVGQVxcdTFFRkNcXHUxRUZFXFx1MUYwOC1cXHUxRjBGXFx1MUYxOC1cXHUxRjFEXFx1MUYyOC1cXHUxRjJGXFx1MUYzOC1cXHUxRjNGXFx1MUY0OC1cXHUxRjREXFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1RlxcdTFGNjgtXFx1MUY2RlxcdTFGQjgtXFx1MUZCQlxcdTFGQzgtXFx1MUZDQlxcdTFGRDgtXFx1MUZEQlxcdTFGRTgtXFx1MUZFQ1xcdTFGRjgtXFx1MUZGQlxcdTIxMDJcXHUyMTA3XFx1MjEwQi1cXHUyMTBEXFx1MjExMC1cXHUyMTEyXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMzAtXFx1MjEzM1xcdTIxM0VcXHUyMTNGXFx1MjE0NVxcdTIxODNcXHUyQzAwLVxcdTJDMkVcXHUyQzYwXFx1MkM2Mi1cXHUyQzY0XFx1MkM2N1xcdTJDNjlcXHUyQzZCXFx1MkM2RC1cXHUyQzcwXFx1MkM3MlxcdTJDNzVcXHUyQzdFLVxcdTJDODBcXHUyQzgyXFx1MkM4NFxcdTJDODZcXHUyQzg4XFx1MkM4QVxcdTJDOENcXHUyQzhFXFx1MkM5MFxcdTJDOTJcXHUyQzk0XFx1MkM5NlxcdTJDOThcXHUyQzlBXFx1MkM5Q1xcdTJDOUVcXHUyQ0EwXFx1MkNBMlxcdTJDQTRcXHUyQ0E2XFx1MkNBOFxcdTJDQUFcXHUyQ0FDXFx1MkNBRVxcdTJDQjBcXHUyQ0IyXFx1MkNCNFxcdTJDQjZcXHUyQ0I4XFx1MkNCQVxcdTJDQkNcXHUyQ0JFXFx1MkNDMFxcdTJDQzJcXHUyQ0M0XFx1MkNDNlxcdTJDQzhcXHUyQ0NBXFx1MkNDQ1xcdTJDQ0VcXHUyQ0QwXFx1MkNEMlxcdTJDRDRcXHUyQ0Q2XFx1MkNEOFxcdTJDREFcXHUyQ0RDXFx1MkNERVxcdTJDRTBcXHUyQ0UyXFx1MkNFQlxcdTJDRURcXHUyQ0YyXFx1QTY0MFxcdUE2NDJcXHVBNjQ0XFx1QTY0NlxcdUE2NDhcXHVBNjRBXFx1QTY0Q1xcdUE2NEVcXHVBNjUwXFx1QTY1MlxcdUE2NTRcXHVBNjU2XFx1QTY1OFxcdUE2NUFcXHVBNjVDXFx1QTY1RVxcdUE2NjBcXHVBNjYyXFx1QTY2NFxcdUE2NjZcXHVBNjY4XFx1QTY2QVxcdUE2NkNcXHVBNjgwXFx1QTY4MlxcdUE2ODRcXHVBNjg2XFx1QTY4OFxcdUE2OEFcXHVBNjhDXFx1QTY4RVxcdUE2OTBcXHVBNjkyXFx1QTY5NFxcdUE2OTZcXHVBNjk4XFx1QTY5QVxcdUE3MjJcXHVBNzI0XFx1QTcyNlxcdUE3MjhcXHVBNzJBXFx1QTcyQ1xcdUE3MkVcXHVBNzMyXFx1QTczNFxcdUE3MzZcXHVBNzM4XFx1QTczQVxcdUE3M0NcXHVBNzNFXFx1QTc0MFxcdUE3NDJcXHVBNzQ0XFx1QTc0NlxcdUE3NDhcXHVBNzRBXFx1QTc0Q1xcdUE3NEVcXHVBNzUwXFx1QTc1MlxcdUE3NTRcXHVBNzU2XFx1QTc1OFxcdUE3NUFcXHVBNzVDXFx1QTc1RVxcdUE3NjBcXHVBNzYyXFx1QTc2NFxcdUE3NjZcXHVBNzY4XFx1QTc2QVxcdUE3NkNcXHVBNzZFXFx1QTc3OVxcdUE3N0JcXHVBNzdEXFx1QTc3RVxcdUE3ODBcXHVBNzgyXFx1QTc4NFxcdUE3ODZcXHVBNzhCXFx1QTc4RFxcdUE3OTBcXHVBNzkyXFx1QTc5NlxcdUE3OThcXHVBNzlBXFx1QTc5Q1xcdUE3OUVcXHVBN0EwXFx1QTdBMlxcdUE3QTRcXHVBN0E2XFx1QTdBOFxcdUE3QUEtXFx1QTdBRFxcdUE3QjAtXFx1QTdCNFxcdUE3QjZcXHVGRjIxLVxcdUZGM0FdKS9nXG4iLCJtb2R1bGUuZXhwb3J0cyA9IC8oW0EtWlxceEMwLVxceEQ2XFx4RDgtXFx4REVcXHUwMTAwXFx1MDEwMlxcdTAxMDRcXHUwMTA2XFx1MDEwOFxcdTAxMEFcXHUwMTBDXFx1MDEwRVxcdTAxMTBcXHUwMTEyXFx1MDExNFxcdTAxMTZcXHUwMTE4XFx1MDExQVxcdTAxMUNcXHUwMTFFXFx1MDEyMFxcdTAxMjJcXHUwMTI0XFx1MDEyNlxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMkVcXHUwMTMwXFx1MDEzMlxcdTAxMzRcXHUwMTM2XFx1MDEzOVxcdTAxM0JcXHUwMTNEXFx1MDEzRlxcdTAxNDFcXHUwMTQzXFx1MDE0NVxcdTAxNDdcXHUwMTRBXFx1MDE0Q1xcdTAxNEVcXHUwMTUwXFx1MDE1MlxcdTAxNTRcXHUwMTU2XFx1MDE1OFxcdTAxNUFcXHUwMTVDXFx1MDE1RVxcdTAxNjBcXHUwMTYyXFx1MDE2NFxcdTAxNjZcXHUwMTY4XFx1MDE2QVxcdTAxNkNcXHUwMTZFXFx1MDE3MFxcdTAxNzJcXHUwMTc0XFx1MDE3NlxcdTAxNzhcXHUwMTc5XFx1MDE3QlxcdTAxN0RcXHUwMTgxXFx1MDE4MlxcdTAxODRcXHUwMTg2XFx1MDE4N1xcdTAxODktXFx1MDE4QlxcdTAxOEUtXFx1MDE5MVxcdTAxOTNcXHUwMTk0XFx1MDE5Ni1cXHUwMTk4XFx1MDE5Q1xcdTAxOURcXHUwMTlGXFx1MDFBMFxcdTAxQTJcXHUwMUE0XFx1MDFBNlxcdTAxQTdcXHUwMUE5XFx1MDFBQ1xcdTAxQUVcXHUwMUFGXFx1MDFCMS1cXHUwMUIzXFx1MDFCNVxcdTAxQjdcXHUwMUI4XFx1MDFCQ1xcdTAxQzRcXHUwMUM3XFx1MDFDQVxcdTAxQ0RcXHUwMUNGXFx1MDFEMVxcdTAxRDNcXHUwMUQ1XFx1MDFEN1xcdTAxRDlcXHUwMURCXFx1MDFERVxcdTAxRTBcXHUwMUUyXFx1MDFFNFxcdTAxRTZcXHUwMUU4XFx1MDFFQVxcdTAxRUNcXHUwMUVFXFx1MDFGMVxcdTAxRjRcXHUwMUY2LVxcdTAxRjhcXHUwMUZBXFx1MDFGQ1xcdTAxRkVcXHUwMjAwXFx1MDIwMlxcdTAyMDRcXHUwMjA2XFx1MDIwOFxcdTAyMEFcXHUwMjBDXFx1MDIwRVxcdTAyMTBcXHUwMjEyXFx1MDIxNFxcdTAyMTZcXHUwMjE4XFx1MDIxQVxcdTAyMUNcXHUwMjFFXFx1MDIyMFxcdTAyMjJcXHUwMjI0XFx1MDIyNlxcdTAyMjhcXHUwMjJBXFx1MDIyQ1xcdTAyMkVcXHUwMjMwXFx1MDIzMlxcdTAyM0FcXHUwMjNCXFx1MDIzRFxcdTAyM0VcXHUwMjQxXFx1MDI0My1cXHUwMjQ2XFx1MDI0OFxcdTAyNEFcXHUwMjRDXFx1MDI0RVxcdTAzNzBcXHUwMzcyXFx1MDM3NlxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEVcXHUwMzhGXFx1MDM5MS1cXHUwM0ExXFx1MDNBMy1cXHUwM0FCXFx1MDNDRlxcdTAzRDItXFx1MDNENFxcdTAzRDhcXHUwM0RBXFx1MDNEQ1xcdTAzREVcXHUwM0UwXFx1MDNFMlxcdTAzRTRcXHUwM0U2XFx1MDNFOFxcdTAzRUFcXHUwM0VDXFx1MDNFRVxcdTAzRjRcXHUwM0Y3XFx1MDNGOVxcdTAzRkFcXHUwM0ZELVxcdTA0MkZcXHUwNDYwXFx1MDQ2MlxcdTA0NjRcXHUwNDY2XFx1MDQ2OFxcdTA0NkFcXHUwNDZDXFx1MDQ2RVxcdTA0NzBcXHUwNDcyXFx1MDQ3NFxcdTA0NzZcXHUwNDc4XFx1MDQ3QVxcdTA0N0NcXHUwNDdFXFx1MDQ4MFxcdTA0OEFcXHUwNDhDXFx1MDQ4RVxcdTA0OTBcXHUwNDkyXFx1MDQ5NFxcdTA0OTZcXHUwNDk4XFx1MDQ5QVxcdTA0OUNcXHUwNDlFXFx1MDRBMFxcdTA0QTJcXHUwNEE0XFx1MDRBNlxcdTA0QThcXHUwNEFBXFx1MDRBQ1xcdTA0QUVcXHUwNEIwXFx1MDRCMlxcdTA0QjRcXHUwNEI2XFx1MDRCOFxcdTA0QkFcXHUwNEJDXFx1MDRCRVxcdTA0QzBcXHUwNEMxXFx1MDRDM1xcdTA0QzVcXHUwNEM3XFx1MDRDOVxcdTA0Q0JcXHUwNENEXFx1MDREMFxcdTA0RDJcXHUwNEQ0XFx1MDRENlxcdTA0RDhcXHUwNERBXFx1MDREQ1xcdTA0REVcXHUwNEUwXFx1MDRFMlxcdTA0RTRcXHUwNEU2XFx1MDRFOFxcdTA0RUFcXHUwNEVDXFx1MDRFRVxcdTA0RjBcXHUwNEYyXFx1MDRGNFxcdTA0RjZcXHUwNEY4XFx1MDRGQVxcdTA0RkNcXHUwNEZFXFx1MDUwMFxcdTA1MDJcXHUwNTA0XFx1MDUwNlxcdTA1MDhcXHUwNTBBXFx1MDUwQ1xcdTA1MEVcXHUwNTEwXFx1MDUxMlxcdTA1MTRcXHUwNTE2XFx1MDUxOFxcdTA1MUFcXHUwNTFDXFx1MDUxRVxcdTA1MjBcXHUwNTIyXFx1MDUyNFxcdTA1MjZcXHUwNTI4XFx1MDUyQVxcdTA1MkNcXHUwNTJFXFx1MDUzMS1cXHUwNTU2XFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxM0EwLVxcdTEzRjVcXHUxRTAwXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MUUwOFxcdTFFMEFcXHUxRTBDXFx1MUUwRVxcdTFFMTBcXHUxRTEyXFx1MUUxNFxcdTFFMTZcXHUxRTE4XFx1MUUxQVxcdTFFMUNcXHUxRTFFXFx1MUUyMFxcdTFFMjJcXHUxRTI0XFx1MUUyNlxcdTFFMjhcXHUxRTJBXFx1MUUyQ1xcdTFFMkVcXHUxRTMwXFx1MUUzMlxcdTFFMzRcXHUxRTM2XFx1MUUzOFxcdTFFM0FcXHUxRTNDXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MUU0NFxcdTFFNDZcXHUxRTQ4XFx1MUU0QVxcdTFFNENcXHUxRTRFXFx1MUU1MFxcdTFFNTJcXHUxRTU0XFx1MUU1NlxcdTFFNThcXHUxRTVBXFx1MUU1Q1xcdTFFNUVcXHUxRTYwXFx1MUU2MlxcdTFFNjRcXHUxRTY2XFx1MUU2OFxcdTFFNkFcXHUxRTZDXFx1MUU2RVxcdTFFNzBcXHUxRTcyXFx1MUU3NFxcdTFFNzZcXHUxRTc4XFx1MUU3QVxcdTFFN0NcXHUxRTdFXFx1MUU4MFxcdTFFODJcXHUxRTg0XFx1MUU4NlxcdTFFODhcXHUxRThBXFx1MUU4Q1xcdTFFOEVcXHUxRTkwXFx1MUU5MlxcdTFFOTRcXHUxRTlFXFx1MUVBMFxcdTFFQTJcXHUxRUE0XFx1MUVBNlxcdTFFQThcXHUxRUFBXFx1MUVBQ1xcdTFFQUVcXHUxRUIwXFx1MUVCMlxcdTFFQjRcXHUxRUI2XFx1MUVCOFxcdTFFQkFcXHUxRUJDXFx1MUVCRVxcdTFFQzBcXHUxRUMyXFx1MUVDNFxcdTFFQzZcXHUxRUM4XFx1MUVDQVxcdTFFQ0NcXHUxRUNFXFx1MUVEMFxcdTFFRDJcXHUxRUQ0XFx1MUVENlxcdTFFRDhcXHUxRURBXFx1MUVEQ1xcdTFFREVcXHUxRUUwXFx1MUVFMlxcdTFFRTRcXHUxRUU2XFx1MUVFOFxcdTFFRUFcXHUxRUVDXFx1MUVFRVxcdTFFRjBcXHUxRUYyXFx1MUVGNFxcdTFFRjZcXHUxRUY4XFx1MUVGQVxcdTFFRkNcXHUxRUZFXFx1MUYwOC1cXHUxRjBGXFx1MUYxOC1cXHUxRjFEXFx1MUYyOC1cXHUxRjJGXFx1MUYzOC1cXHUxRjNGXFx1MUY0OC1cXHUxRjREXFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1RlxcdTFGNjgtXFx1MUY2RlxcdTFGQjgtXFx1MUZCQlxcdTFGQzgtXFx1MUZDQlxcdTFGRDgtXFx1MUZEQlxcdTFGRTgtXFx1MUZFQ1xcdTFGRjgtXFx1MUZGQlxcdTIxMDJcXHUyMTA3XFx1MjEwQi1cXHUyMTBEXFx1MjExMC1cXHUyMTEyXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMzAtXFx1MjEzM1xcdTIxM0VcXHUyMTNGXFx1MjE0NVxcdTIxODNcXHUyQzAwLVxcdTJDMkVcXHUyQzYwXFx1MkM2Mi1cXHUyQzY0XFx1MkM2N1xcdTJDNjlcXHUyQzZCXFx1MkM2RC1cXHUyQzcwXFx1MkM3MlxcdTJDNzVcXHUyQzdFLVxcdTJDODBcXHUyQzgyXFx1MkM4NFxcdTJDODZcXHUyQzg4XFx1MkM4QVxcdTJDOENcXHUyQzhFXFx1MkM5MFxcdTJDOTJcXHUyQzk0XFx1MkM5NlxcdTJDOThcXHUyQzlBXFx1MkM5Q1xcdTJDOUVcXHUyQ0EwXFx1MkNBMlxcdTJDQTRcXHUyQ0E2XFx1MkNBOFxcdTJDQUFcXHUyQ0FDXFx1MkNBRVxcdTJDQjBcXHUyQ0IyXFx1MkNCNFxcdTJDQjZcXHUyQ0I4XFx1MkNCQVxcdTJDQkNcXHUyQ0JFXFx1MkNDMFxcdTJDQzJcXHUyQ0M0XFx1MkNDNlxcdTJDQzhcXHUyQ0NBXFx1MkNDQ1xcdTJDQ0VcXHUyQ0QwXFx1MkNEMlxcdTJDRDRcXHUyQ0Q2XFx1MkNEOFxcdTJDREFcXHUyQ0RDXFx1MkNERVxcdTJDRTBcXHUyQ0UyXFx1MkNFQlxcdTJDRURcXHUyQ0YyXFx1QTY0MFxcdUE2NDJcXHVBNjQ0XFx1QTY0NlxcdUE2NDhcXHVBNjRBXFx1QTY0Q1xcdUE2NEVcXHVBNjUwXFx1QTY1MlxcdUE2NTRcXHVBNjU2XFx1QTY1OFxcdUE2NUFcXHVBNjVDXFx1QTY1RVxcdUE2NjBcXHVBNjYyXFx1QTY2NFxcdUE2NjZcXHVBNjY4XFx1QTY2QVxcdUE2NkNcXHVBNjgwXFx1QTY4MlxcdUE2ODRcXHVBNjg2XFx1QTY4OFxcdUE2OEFcXHVBNjhDXFx1QTY4RVxcdUE2OTBcXHVBNjkyXFx1QTY5NFxcdUE2OTZcXHVBNjk4XFx1QTY5QVxcdUE3MjJcXHVBNzI0XFx1QTcyNlxcdUE3MjhcXHVBNzJBXFx1QTcyQ1xcdUE3MkVcXHVBNzMyXFx1QTczNFxcdUE3MzZcXHVBNzM4XFx1QTczQVxcdUE3M0NcXHVBNzNFXFx1QTc0MFxcdUE3NDJcXHVBNzQ0XFx1QTc0NlxcdUE3NDhcXHVBNzRBXFx1QTc0Q1xcdUE3NEVcXHVBNzUwXFx1QTc1MlxcdUE3NTRcXHVBNzU2XFx1QTc1OFxcdUE3NUFcXHVBNzVDXFx1QTc1RVxcdUE3NjBcXHVBNzYyXFx1QTc2NFxcdUE3NjZcXHVBNzY4XFx1QTc2QVxcdUE3NkNcXHVBNzZFXFx1QTc3OVxcdUE3N0JcXHVBNzdEXFx1QTc3RVxcdUE3ODBcXHVBNzgyXFx1QTc4NFxcdUE3ODZcXHVBNzhCXFx1QTc4RFxcdUE3OTBcXHVBNzkyXFx1QTc5NlxcdUE3OThcXHVBNzlBXFx1QTc5Q1xcdUE3OUVcXHVBN0EwXFx1QTdBMlxcdUE3QTRcXHVBN0E2XFx1QTdBOFxcdUE3QUEtXFx1QTdBRFxcdUE3QjAtXFx1QTdCNFxcdUE3QjZcXHVGRjIxLVxcdUZGM0FdKShbQS1aXFx4QzAtXFx4RDZcXHhEOC1cXHhERVxcdTAxMDBcXHUwMTAyXFx1MDEwNFxcdTAxMDZcXHUwMTA4XFx1MDEwQVxcdTAxMENcXHUwMTBFXFx1MDExMFxcdTAxMTJcXHUwMTE0XFx1MDExNlxcdTAxMThcXHUwMTFBXFx1MDExQ1xcdTAxMUVcXHUwMTIwXFx1MDEyMlxcdTAxMjRcXHUwMTI2XFx1MDEyOFxcdTAxMkFcXHUwMTJDXFx1MDEyRVxcdTAxMzBcXHUwMTMyXFx1MDEzNFxcdTAxMzZcXHUwMTM5XFx1MDEzQlxcdTAxM0RcXHUwMTNGXFx1MDE0MVxcdTAxNDNcXHUwMTQ1XFx1MDE0N1xcdTAxNEFcXHUwMTRDXFx1MDE0RVxcdTAxNTBcXHUwMTUyXFx1MDE1NFxcdTAxNTZcXHUwMTU4XFx1MDE1QVxcdTAxNUNcXHUwMTVFXFx1MDE2MFxcdTAxNjJcXHUwMTY0XFx1MDE2NlxcdTAxNjhcXHUwMTZBXFx1MDE2Q1xcdTAxNkVcXHUwMTcwXFx1MDE3MlxcdTAxNzRcXHUwMTc2XFx1MDE3OFxcdTAxNzlcXHUwMTdCXFx1MDE3RFxcdTAxODFcXHUwMTgyXFx1MDE4NFxcdTAxODZcXHUwMTg3XFx1MDE4OS1cXHUwMThCXFx1MDE4RS1cXHUwMTkxXFx1MDE5M1xcdTAxOTRcXHUwMTk2LVxcdTAxOThcXHUwMTlDXFx1MDE5RFxcdTAxOUZcXHUwMUEwXFx1MDFBMlxcdTAxQTRcXHUwMUE2XFx1MDFBN1xcdTAxQTlcXHUwMUFDXFx1MDFBRVxcdTAxQUZcXHUwMUIxLVxcdTAxQjNcXHUwMUI1XFx1MDFCN1xcdTAxQjhcXHUwMUJDXFx1MDFDNFxcdTAxQzdcXHUwMUNBXFx1MDFDRFxcdTAxQ0ZcXHUwMUQxXFx1MDFEM1xcdTAxRDVcXHUwMUQ3XFx1MDFEOVxcdTAxREJcXHUwMURFXFx1MDFFMFxcdTAxRTJcXHUwMUU0XFx1MDFFNlxcdTAxRThcXHUwMUVBXFx1MDFFQ1xcdTAxRUVcXHUwMUYxXFx1MDFGNFxcdTAxRjYtXFx1MDFGOFxcdTAxRkFcXHUwMUZDXFx1MDFGRVxcdTAyMDBcXHUwMjAyXFx1MDIwNFxcdTAyMDZcXHUwMjA4XFx1MDIwQVxcdTAyMENcXHUwMjBFXFx1MDIxMFxcdTAyMTJcXHUwMjE0XFx1MDIxNlxcdTAyMThcXHUwMjFBXFx1MDIxQ1xcdTAyMUVcXHUwMjIwXFx1MDIyMlxcdTAyMjRcXHUwMjI2XFx1MDIyOFxcdTAyMkFcXHUwMjJDXFx1MDIyRVxcdTAyMzBcXHUwMjMyXFx1MDIzQVxcdTAyM0JcXHUwMjNEXFx1MDIzRVxcdTAyNDFcXHUwMjQzLVxcdTAyNDZcXHUwMjQ4XFx1MDI0QVxcdTAyNENcXHUwMjRFXFx1MDM3MFxcdTAzNzJcXHUwMzc2XFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RVxcdTAzOEZcXHUwMzkxLVxcdTAzQTFcXHUwM0EzLVxcdTAzQUJcXHUwM0NGXFx1MDNEMi1cXHUwM0Q0XFx1MDNEOFxcdTAzREFcXHUwM0RDXFx1MDNERVxcdTAzRTBcXHUwM0UyXFx1MDNFNFxcdTAzRTZcXHUwM0U4XFx1MDNFQVxcdTAzRUNcXHUwM0VFXFx1MDNGNFxcdTAzRjdcXHUwM0Y5XFx1MDNGQVxcdTAzRkQtXFx1MDQyRlxcdTA0NjBcXHUwNDYyXFx1MDQ2NFxcdTA0NjZcXHUwNDY4XFx1MDQ2QVxcdTA0NkNcXHUwNDZFXFx1MDQ3MFxcdTA0NzJcXHUwNDc0XFx1MDQ3NlxcdTA0NzhcXHUwNDdBXFx1MDQ3Q1xcdTA0N0VcXHUwNDgwXFx1MDQ4QVxcdTA0OENcXHUwNDhFXFx1MDQ5MFxcdTA0OTJcXHUwNDk0XFx1MDQ5NlxcdTA0OThcXHUwNDlBXFx1MDQ5Q1xcdTA0OUVcXHUwNEEwXFx1MDRBMlxcdTA0QTRcXHUwNEE2XFx1MDRBOFxcdTA0QUFcXHUwNEFDXFx1MDRBRVxcdTA0QjBcXHUwNEIyXFx1MDRCNFxcdTA0QjZcXHUwNEI4XFx1MDRCQVxcdTA0QkNcXHUwNEJFXFx1MDRDMFxcdTA0QzFcXHUwNEMzXFx1MDRDNVxcdTA0QzdcXHUwNEM5XFx1MDRDQlxcdTA0Q0RcXHUwNEQwXFx1MDREMlxcdTA0RDRcXHUwNEQ2XFx1MDREOFxcdTA0REFcXHUwNERDXFx1MDRERVxcdTA0RTBcXHUwNEUyXFx1MDRFNFxcdTA0RTZcXHUwNEU4XFx1MDRFQVxcdTA0RUNcXHUwNEVFXFx1MDRGMFxcdTA0RjJcXHUwNEY0XFx1MDRGNlxcdTA0RjhcXHUwNEZBXFx1MDRGQ1xcdTA0RkVcXHUwNTAwXFx1MDUwMlxcdTA1MDRcXHUwNTA2XFx1MDUwOFxcdTA1MEFcXHUwNTBDXFx1MDUwRVxcdTA1MTBcXHUwNTEyXFx1MDUxNFxcdTA1MTZcXHUwNTE4XFx1MDUxQVxcdTA1MUNcXHUwNTFFXFx1MDUyMFxcdTA1MjJcXHUwNTI0XFx1MDUyNlxcdTA1MjhcXHUwNTJBXFx1MDUyQ1xcdTA1MkVcXHUwNTMxLVxcdTA1NTZcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEzQTAtXFx1MTNGNVxcdTFFMDBcXHUxRTAyXFx1MUUwNFxcdTFFMDZcXHUxRTA4XFx1MUUwQVxcdTFFMENcXHUxRTBFXFx1MUUxMFxcdTFFMTJcXHUxRTE0XFx1MUUxNlxcdTFFMThcXHUxRTFBXFx1MUUxQ1xcdTFFMUVcXHUxRTIwXFx1MUUyMlxcdTFFMjRcXHUxRTI2XFx1MUUyOFxcdTFFMkFcXHUxRTJDXFx1MUUyRVxcdTFFMzBcXHUxRTMyXFx1MUUzNFxcdTFFMzZcXHUxRTM4XFx1MUUzQVxcdTFFM0NcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUxRTQ0XFx1MUU0NlxcdTFFNDhcXHUxRTRBXFx1MUU0Q1xcdTFFNEVcXHUxRTUwXFx1MUU1MlxcdTFFNTRcXHUxRTU2XFx1MUU1OFxcdTFFNUFcXHUxRTVDXFx1MUU1RVxcdTFFNjBcXHUxRTYyXFx1MUU2NFxcdTFFNjZcXHUxRTY4XFx1MUU2QVxcdTFFNkNcXHUxRTZFXFx1MUU3MFxcdTFFNzJcXHUxRTc0XFx1MUU3NlxcdTFFNzhcXHUxRTdBXFx1MUU3Q1xcdTFFN0VcXHUxRTgwXFx1MUU4MlxcdTFFODRcXHUxRTg2XFx1MUU4OFxcdTFFOEFcXHUxRThDXFx1MUU4RVxcdTFFOTBcXHUxRTkyXFx1MUU5NFxcdTFFOUVcXHUxRUEwXFx1MUVBMlxcdTFFQTRcXHUxRUE2XFx1MUVBOFxcdTFFQUFcXHUxRUFDXFx1MUVBRVxcdTFFQjBcXHUxRUIyXFx1MUVCNFxcdTFFQjZcXHUxRUI4XFx1MUVCQVxcdTFFQkNcXHUxRUJFXFx1MUVDMFxcdTFFQzJcXHUxRUM0XFx1MUVDNlxcdTFFQzhcXHUxRUNBXFx1MUVDQ1xcdTFFQ0VcXHUxRUQwXFx1MUVEMlxcdTFFRDRcXHUxRUQ2XFx1MUVEOFxcdTFFREFcXHUxRURDXFx1MUVERVxcdTFFRTBcXHUxRUUyXFx1MUVFNFxcdTFFRTZcXHUxRUU4XFx1MUVFQVxcdTFFRUNcXHUxRUVFXFx1MUVGMFxcdTFFRjJcXHUxRUY0XFx1MUVGNlxcdTFFRjhcXHUxRUZBXFx1MUVGQ1xcdTFFRkVcXHUxRjA4LVxcdTFGMEZcXHUxRjE4LVxcdTFGMURcXHUxRjI4LVxcdTFGMkZcXHUxRjM4LVxcdTFGM0ZcXHUxRjQ4LVxcdTFGNERcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGXFx1MUY2OC1cXHUxRjZGXFx1MUZCOC1cXHUxRkJCXFx1MUZDOC1cXHUxRkNCXFx1MUZEOC1cXHUxRkRCXFx1MUZFOC1cXHUxRkVDXFx1MUZGOC1cXHUxRkZCXFx1MjEwMlxcdTIxMDdcXHUyMTBCLVxcdTIxMERcXHUyMTEwLVxcdTIxMTJcXHUyMTE1XFx1MjExOS1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTJEXFx1MjEzMC1cXHUyMTMzXFx1MjEzRVxcdTIxM0ZcXHUyMTQ1XFx1MjE4M1xcdTJDMDAtXFx1MkMyRVxcdTJDNjBcXHUyQzYyLVxcdTJDNjRcXHUyQzY3XFx1MkM2OVxcdTJDNkJcXHUyQzZELVxcdTJDNzBcXHUyQzcyXFx1MkM3NVxcdTJDN0UtXFx1MkM4MFxcdTJDODJcXHUyQzg0XFx1MkM4NlxcdTJDODhcXHUyQzhBXFx1MkM4Q1xcdTJDOEVcXHUyQzkwXFx1MkM5MlxcdTJDOTRcXHUyQzk2XFx1MkM5OFxcdTJDOUFcXHUyQzlDXFx1MkM5RVxcdTJDQTBcXHUyQ0EyXFx1MkNBNFxcdTJDQTZcXHUyQ0E4XFx1MkNBQVxcdTJDQUNcXHUyQ0FFXFx1MkNCMFxcdTJDQjJcXHUyQ0I0XFx1MkNCNlxcdTJDQjhcXHUyQ0JBXFx1MkNCQ1xcdTJDQkVcXHUyQ0MwXFx1MkNDMlxcdTJDQzRcXHUyQ0M2XFx1MkNDOFxcdTJDQ0FcXHUyQ0NDXFx1MkNDRVxcdTJDRDBcXHUyQ0QyXFx1MkNENFxcdTJDRDZcXHUyQ0Q4XFx1MkNEQVxcdTJDRENcXHUyQ0RFXFx1MkNFMFxcdTJDRTJcXHUyQ0VCXFx1MkNFRFxcdTJDRjJcXHVBNjQwXFx1QTY0MlxcdUE2NDRcXHVBNjQ2XFx1QTY0OFxcdUE2NEFcXHVBNjRDXFx1QTY0RVxcdUE2NTBcXHVBNjUyXFx1QTY1NFxcdUE2NTZcXHVBNjU4XFx1QTY1QVxcdUE2NUNcXHVBNjVFXFx1QTY2MFxcdUE2NjJcXHVBNjY0XFx1QTY2NlxcdUE2NjhcXHVBNjZBXFx1QTY2Q1xcdUE2ODBcXHVBNjgyXFx1QTY4NFxcdUE2ODZcXHVBNjg4XFx1QTY4QVxcdUE2OENcXHVBNjhFXFx1QTY5MFxcdUE2OTJcXHVBNjk0XFx1QTY5NlxcdUE2OThcXHVBNjlBXFx1QTcyMlxcdUE3MjRcXHVBNzI2XFx1QTcyOFxcdUE3MkFcXHVBNzJDXFx1QTcyRVxcdUE3MzJcXHVBNzM0XFx1QTczNlxcdUE3MzhcXHVBNzNBXFx1QTczQ1xcdUE3M0VcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBNzQ2XFx1QTc0OFxcdUE3NEFcXHVBNzRDXFx1QTc0RVxcdUE3NTBcXHVBNzUyXFx1QTc1NFxcdUE3NTZcXHVBNzU4XFx1QTc1QVxcdUE3NUNcXHVBNzVFXFx1QTc2MFxcdUE3NjJcXHVBNzY0XFx1QTc2NlxcdUE3NjhcXHVBNzZBXFx1QTc2Q1xcdUE3NkVcXHVBNzc5XFx1QTc3QlxcdUE3N0RcXHVBNzdFXFx1QTc4MFxcdUE3ODJcXHVBNzg0XFx1QTc4NlxcdUE3OEJcXHVBNzhEXFx1QTc5MFxcdUE3OTJcXHVBNzk2XFx1QTc5OFxcdUE3OUFcXHVBNzlDXFx1QTc5RVxcdUE3QTBcXHVBN0EyXFx1QTdBNFxcdUE3QTZcXHVBN0E4XFx1QTdBQS1cXHVBN0FEXFx1QTdCMC1cXHVBN0I0XFx1QTdCNlxcdUZGMjEtXFx1RkYzQV1bYS16XFx4QjVcXHhERi1cXHhGNlxceEY4LVxceEZGXFx1MDEwMVxcdTAxMDNcXHUwMTA1XFx1MDEwN1xcdTAxMDlcXHUwMTBCXFx1MDEwRFxcdTAxMEZcXHUwMTExXFx1MDExM1xcdTAxMTVcXHUwMTE3XFx1MDExOVxcdTAxMUJcXHUwMTFEXFx1MDExRlxcdTAxMjFcXHUwMTIzXFx1MDEyNVxcdTAxMjdcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMTJGXFx1MDEzMVxcdTAxMzNcXHUwMTM1XFx1MDEzN1xcdTAxMzhcXHUwMTNBXFx1MDEzQ1xcdTAxM0VcXHUwMTQwXFx1MDE0MlxcdTAxNDRcXHUwMTQ2XFx1MDE0OFxcdTAxNDlcXHUwMTRCXFx1MDE0RFxcdTAxNEZcXHUwMTUxXFx1MDE1M1xcdTAxNTVcXHUwMTU3XFx1MDE1OVxcdTAxNUJcXHUwMTVEXFx1MDE1RlxcdTAxNjFcXHUwMTYzXFx1MDE2NVxcdTAxNjdcXHUwMTY5XFx1MDE2QlxcdTAxNkRcXHUwMTZGXFx1MDE3MVxcdTAxNzNcXHUwMTc1XFx1MDE3N1xcdTAxN0FcXHUwMTdDXFx1MDE3RS1cXHUwMTgwXFx1MDE4M1xcdTAxODVcXHUwMTg4XFx1MDE4Q1xcdTAxOERcXHUwMTkyXFx1MDE5NVxcdTAxOTktXFx1MDE5QlxcdTAxOUVcXHUwMUExXFx1MDFBM1xcdTAxQTVcXHUwMUE4XFx1MDFBQVxcdTAxQUJcXHUwMUFEXFx1MDFCMFxcdTAxQjRcXHUwMUI2XFx1MDFCOVxcdTAxQkFcXHUwMUJELVxcdTAxQkZcXHUwMUM2XFx1MDFDOVxcdTAxQ0NcXHUwMUNFXFx1MDFEMFxcdTAxRDJcXHUwMUQ0XFx1MDFENlxcdTAxRDhcXHUwMURBXFx1MDFEQ1xcdTAxRERcXHUwMURGXFx1MDFFMVxcdTAxRTNcXHUwMUU1XFx1MDFFN1xcdTAxRTlcXHUwMUVCXFx1MDFFRFxcdTAxRUZcXHUwMUYwXFx1MDFGM1xcdTAxRjVcXHUwMUY5XFx1MDFGQlxcdTAxRkRcXHUwMUZGXFx1MDIwMVxcdTAyMDNcXHUwMjA1XFx1MDIwN1xcdTAyMDlcXHUwMjBCXFx1MDIwRFxcdTAyMEZcXHUwMjExXFx1MDIxM1xcdTAyMTVcXHUwMjE3XFx1MDIxOVxcdTAyMUJcXHUwMjFEXFx1MDIxRlxcdTAyMjFcXHUwMjIzXFx1MDIyNVxcdTAyMjdcXHUwMjI5XFx1MDIyQlxcdTAyMkRcXHUwMjJGXFx1MDIzMVxcdTAyMzMtXFx1MDIzOVxcdTAyM0NcXHUwMjNGXFx1MDI0MFxcdTAyNDJcXHUwMjQ3XFx1MDI0OVxcdTAyNEJcXHUwMjREXFx1MDI0Ri1cXHUwMjkzXFx1MDI5NS1cXHUwMkFGXFx1MDM3MVxcdTAzNzNcXHUwMzc3XFx1MDM3Qi1cXHUwMzdEXFx1MDM5MFxcdTAzQUMtXFx1MDNDRVxcdTAzRDBcXHUwM0QxXFx1MDNENS1cXHUwM0Q3XFx1MDNEOVxcdTAzREJcXHUwM0REXFx1MDNERlxcdTAzRTFcXHUwM0UzXFx1MDNFNVxcdTAzRTdcXHUwM0U5XFx1MDNFQlxcdTAzRURcXHUwM0VGLVxcdTAzRjNcXHUwM0Y1XFx1MDNGOFxcdTAzRkJcXHUwM0ZDXFx1MDQzMC1cXHUwNDVGXFx1MDQ2MVxcdTA0NjNcXHUwNDY1XFx1MDQ2N1xcdTA0NjlcXHUwNDZCXFx1MDQ2RFxcdTA0NkZcXHUwNDcxXFx1MDQ3M1xcdTA0NzVcXHUwNDc3XFx1MDQ3OVxcdTA0N0JcXHUwNDdEXFx1MDQ3RlxcdTA0ODFcXHUwNDhCXFx1MDQ4RFxcdTA0OEZcXHUwNDkxXFx1MDQ5M1xcdTA0OTVcXHUwNDk3XFx1MDQ5OVxcdTA0OUJcXHUwNDlEXFx1MDQ5RlxcdTA0QTFcXHUwNEEzXFx1MDRBNVxcdTA0QTdcXHUwNEE5XFx1MDRBQlxcdTA0QURcXHUwNEFGXFx1MDRCMVxcdTA0QjNcXHUwNEI1XFx1MDRCN1xcdTA0QjlcXHUwNEJCXFx1MDRCRFxcdTA0QkZcXHUwNEMyXFx1MDRDNFxcdTA0QzZcXHUwNEM4XFx1MDRDQVxcdTA0Q0NcXHUwNENFXFx1MDRDRlxcdTA0RDFcXHUwNEQzXFx1MDRENVxcdTA0RDdcXHUwNEQ5XFx1MDREQlxcdTA0RERcXHUwNERGXFx1MDRFMVxcdTA0RTNcXHUwNEU1XFx1MDRFN1xcdTA0RTlcXHUwNEVCXFx1MDRFRFxcdTA0RUZcXHUwNEYxXFx1MDRGM1xcdTA0RjVcXHUwNEY3XFx1MDRGOVxcdTA0RkJcXHUwNEZEXFx1MDRGRlxcdTA1MDFcXHUwNTAzXFx1MDUwNVxcdTA1MDdcXHUwNTA5XFx1MDUwQlxcdTA1MERcXHUwNTBGXFx1MDUxMVxcdTA1MTNcXHUwNTE1XFx1MDUxN1xcdTA1MTlcXHUwNTFCXFx1MDUxRFxcdTA1MUZcXHUwNTIxXFx1MDUyM1xcdTA1MjVcXHUwNTI3XFx1MDUyOVxcdTA1MkJcXHUwNTJEXFx1MDUyRlxcdTA1NjEtXFx1MDU4N1xcdTEzRjgtXFx1MTNGRFxcdTFEMDAtXFx1MUQyQlxcdTFENkItXFx1MUQ3N1xcdTFENzktXFx1MUQ5QVxcdTFFMDFcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUxRTA5XFx1MUUwQlxcdTFFMERcXHUxRTBGXFx1MUUxMVxcdTFFMTNcXHUxRTE1XFx1MUUxN1xcdTFFMTlcXHUxRTFCXFx1MUUxRFxcdTFFMUZcXHUxRTIxXFx1MUUyM1xcdTFFMjVcXHUxRTI3XFx1MUUyOVxcdTFFMkJcXHUxRTJEXFx1MUUyRlxcdTFFMzFcXHUxRTMzXFx1MUUzNVxcdTFFMzdcXHUxRTM5XFx1MUUzQlxcdTFFM0RcXHUxRTNGXFx1MUU0MVxcdTFFNDNcXHUxRTQ1XFx1MUU0N1xcdTFFNDlcXHUxRTRCXFx1MUU0RFxcdTFFNEZcXHUxRTUxXFx1MUU1M1xcdTFFNTVcXHUxRTU3XFx1MUU1OVxcdTFFNUJcXHUxRTVEXFx1MUU1RlxcdTFFNjFcXHUxRTYzXFx1MUU2NVxcdTFFNjdcXHUxRTY5XFx1MUU2QlxcdTFFNkRcXHUxRTZGXFx1MUU3MVxcdTFFNzNcXHUxRTc1XFx1MUU3N1xcdTFFNzlcXHUxRTdCXFx1MUU3RFxcdTFFN0ZcXHUxRTgxXFx1MUU4M1xcdTFFODVcXHUxRTg3XFx1MUU4OVxcdTFFOEJcXHUxRThEXFx1MUU4RlxcdTFFOTFcXHUxRTkzXFx1MUU5NS1cXHUxRTlEXFx1MUU5RlxcdTFFQTFcXHUxRUEzXFx1MUVBNVxcdTFFQTdcXHUxRUE5XFx1MUVBQlxcdTFFQURcXHUxRUFGXFx1MUVCMVxcdTFFQjNcXHUxRUI1XFx1MUVCN1xcdTFFQjlcXHUxRUJCXFx1MUVCRFxcdTFFQkZcXHUxRUMxXFx1MUVDM1xcdTFFQzVcXHUxRUM3XFx1MUVDOVxcdTFFQ0JcXHUxRUNEXFx1MUVDRlxcdTFFRDFcXHUxRUQzXFx1MUVENVxcdTFFRDdcXHUxRUQ5XFx1MUVEQlxcdTFFRERcXHUxRURGXFx1MUVFMVxcdTFFRTNcXHUxRUU1XFx1MUVFN1xcdTFFRTlcXHUxRUVCXFx1MUVFRFxcdTFFRUZcXHUxRUYxXFx1MUVGM1xcdTFFRjVcXHUxRUY3XFx1MUVGOVxcdTFFRkJcXHUxRUZEXFx1MUVGRi1cXHUxRjA3XFx1MUYxMC1cXHUxRjE1XFx1MUYyMC1cXHUxRjI3XFx1MUYzMC1cXHUxRjM3XFx1MUY0MC1cXHUxRjQ1XFx1MUY1MC1cXHUxRjU3XFx1MUY2MC1cXHUxRjY3XFx1MUY3MC1cXHUxRjdEXFx1MUY4MC1cXHUxRjg3XFx1MUY5MC1cXHUxRjk3XFx1MUZBMC1cXHUxRkE3XFx1MUZCMC1cXHUxRkI0XFx1MUZCNlxcdTFGQjdcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNlxcdTFGQzdcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2XFx1MUZEN1xcdTFGRTAtXFx1MUZFN1xcdTFGRjItXFx1MUZGNFxcdTFGRjZcXHUxRkY3XFx1MjEwQVxcdTIxMEVcXHUyMTBGXFx1MjExM1xcdTIxMkZcXHUyMTM0XFx1MjEzOVxcdTIxM0NcXHUyMTNEXFx1MjE0Ni1cXHUyMTQ5XFx1MjE0RVxcdTIxODRcXHUyQzMwLVxcdTJDNUVcXHUyQzYxXFx1MkM2NVxcdTJDNjZcXHUyQzY4XFx1MkM2QVxcdTJDNkNcXHUyQzcxXFx1MkM3M1xcdTJDNzRcXHUyQzc2LVxcdTJDN0JcXHUyQzgxXFx1MkM4M1xcdTJDODVcXHUyQzg3XFx1MkM4OVxcdTJDOEJcXHUyQzhEXFx1MkM4RlxcdTJDOTFcXHUyQzkzXFx1MkM5NVxcdTJDOTdcXHUyQzk5XFx1MkM5QlxcdTJDOURcXHUyQzlGXFx1MkNBMVxcdTJDQTNcXHUyQ0E1XFx1MkNBN1xcdTJDQTlcXHUyQ0FCXFx1MkNBRFxcdTJDQUZcXHUyQ0IxXFx1MkNCM1xcdTJDQjVcXHUyQ0I3XFx1MkNCOVxcdTJDQkJcXHUyQ0JEXFx1MkNCRlxcdTJDQzFcXHUyQ0MzXFx1MkNDNVxcdTJDQzdcXHUyQ0M5XFx1MkNDQlxcdTJDQ0RcXHUyQ0NGXFx1MkNEMVxcdTJDRDNcXHUyQ0Q1XFx1MkNEN1xcdTJDRDlcXHUyQ0RCXFx1MkNERFxcdTJDREZcXHUyQ0UxXFx1MkNFM1xcdTJDRTRcXHUyQ0VDXFx1MkNFRVxcdTJDRjNcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRFxcdUE2NDFcXHVBNjQzXFx1QTY0NVxcdUE2NDdcXHVBNjQ5XFx1QTY0QlxcdUE2NERcXHVBNjRGXFx1QTY1MVxcdUE2NTNcXHVBNjU1XFx1QTY1N1xcdUE2NTlcXHVBNjVCXFx1QTY1RFxcdUE2NUZcXHVBNjYxXFx1QTY2M1xcdUE2NjVcXHVBNjY3XFx1QTY2OVxcdUE2NkJcXHVBNjZEXFx1QTY4MVxcdUE2ODNcXHVBNjg1XFx1QTY4N1xcdUE2ODlcXHVBNjhCXFx1QTY4RFxcdUE2OEZcXHVBNjkxXFx1QTY5M1xcdUE2OTVcXHVBNjk3XFx1QTY5OVxcdUE2OUJcXHVBNzIzXFx1QTcyNVxcdUE3MjdcXHVBNzI5XFx1QTcyQlxcdUE3MkRcXHVBNzJGLVxcdUE3MzFcXHVBNzMzXFx1QTczNVxcdUE3MzdcXHVBNzM5XFx1QTczQlxcdUE3M0RcXHVBNzNGXFx1QTc0MVxcdUE3NDNcXHVBNzQ1XFx1QTc0N1xcdUE3NDlcXHVBNzRCXFx1QTc0RFxcdUE3NEZcXHVBNzUxXFx1QTc1M1xcdUE3NTVcXHVBNzU3XFx1QTc1OVxcdUE3NUJcXHVBNzVEXFx1QTc1RlxcdUE3NjFcXHVBNzYzXFx1QTc2NVxcdUE3NjdcXHVBNzY5XFx1QTc2QlxcdUE3NkRcXHVBNzZGXFx1QTc3MS1cXHVBNzc4XFx1QTc3QVxcdUE3N0NcXHVBNzdGXFx1QTc4MVxcdUE3ODNcXHVBNzg1XFx1QTc4N1xcdUE3OENcXHVBNzhFXFx1QTc5MVxcdUE3OTMtXFx1QTc5NVxcdUE3OTdcXHVBNzk5XFx1QTc5QlxcdUE3OURcXHVBNzlGXFx1QTdBMVxcdUE3QTNcXHVBN0E1XFx1QTdBN1xcdUE3QTlcXHVBN0I1XFx1QTdCN1xcdUE3RkFcXHVBQjMwLVxcdUFCNUFcXHVBQjYwLVxcdUFCNjVcXHVBQjcwLVxcdUFCQkZcXHVGQjAwLVxcdUZCMDZcXHVGQjEzLVxcdUZCMTdcXHVGRjQxLVxcdUZGNUFdKS9nXG4iLCJ2YXIgbG93ZXJDYXNlID0gcmVxdWlyZSgnbG93ZXItY2FzZScpXG5cbnZhciBOT05fV09SRF9SRUdFWFAgPSByZXF1aXJlKCcuL3ZlbmRvci9ub24td29yZC1yZWdleHAnKVxudmFyIENBTUVMX0NBU0VfUkVHRVhQID0gcmVxdWlyZSgnLi92ZW5kb3IvY2FtZWwtY2FzZS1yZWdleHAnKVxudmFyIENBTUVMX0NBU0VfVVBQRVJfUkVHRVhQID0gcmVxdWlyZSgnLi92ZW5kb3IvY2FtZWwtY2FzZS11cHBlci1yZWdleHAnKVxuXG4vKipcbiAqIFNlbnRlbmNlIGNhc2UgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSAge3N0cmluZ30gbG9jYWxlXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHJlcGxhY2VtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgbG9jYWxlLCByZXBsYWNlbWVudCkge1xuICBpZiAoc3RyID09IG51bGwpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIHJlcGxhY2VtZW50ID0gdHlwZW9mIHJlcGxhY2VtZW50ICE9PSAnc3RyaW5nJyA/ICcgJyA6IHJlcGxhY2VtZW50XG5cbiAgZnVuY3Rpb24gcmVwbGFjZSAobWF0Y2gsIGluZGV4LCB2YWx1ZSkge1xuICAgIGlmIChpbmRleCA9PT0gMCB8fCBpbmRleCA9PT0gKHZhbHVlLmxlbmd0aCAtIG1hdGNoLmxlbmd0aCkpIHtcbiAgICAgIHJldHVybiAnJ1xuICAgIH1cblxuICAgIHJldHVybiByZXBsYWNlbWVudFxuICB9XG5cbiAgc3RyID0gU3RyaW5nKHN0cilcbiAgICAvLyBTdXBwb3J0IGNhbWVsIGNhc2UgKFwiY2FtZWxDYXNlXCIgLT4gXCJjYW1lbCBDYXNlXCIpLlxuICAgIC5yZXBsYWNlKENBTUVMX0NBU0VfUkVHRVhQLCAnJDEgJDInKVxuICAgIC8vIFN1cHBvcnQgb2RkIGNhbWVsIGNhc2UgKFwiQ0FNRUxDYXNlXCIgLT4gXCJDQU1FTCBDYXNlXCIpLlxuICAgIC5yZXBsYWNlKENBTUVMX0NBU0VfVVBQRVJfUkVHRVhQLCAnJDEgJDInKVxuICAgIC8vIFJlbW92ZSBhbGwgbm9uLXdvcmQgY2hhcmFjdGVycyBhbmQgcmVwbGFjZSB3aXRoIGEgc2luZ2xlIHNwYWNlLlxuICAgIC5yZXBsYWNlKE5PTl9XT1JEX1JFR0VYUCwgcmVwbGFjZSlcblxuICAvLyBMb3dlciBjYXNlIHRoZSBlbnRpcmUgc3RyaW5nLlxuICByZXR1cm4gbG93ZXJDYXNlKHN0ciwgbG9jYWxlKVxufVxuIiwidmFyIHVwcGVyQ2FzZSA9IHJlcXVpcmUoJ3VwcGVyLWNhc2UnKVxudmFyIG5vQ2FzZSA9IHJlcXVpcmUoJ25vLWNhc2UnKVxuXG4vKipcbiAqIENhbWVsIGNhc2UgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtICB7c3RyaW5nfSBbbG9jYWxlXVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSwgbG9jYWxlLCBtZXJnZU51bWJlcnMpIHtcbiAgdmFyIHJlc3VsdCA9IG5vQ2FzZSh2YWx1ZSwgbG9jYWxlKVxuXG4gIC8vIFJlcGxhY2UgcGVyaW9kcyBiZXR3ZWVuIG51bWVyaWMgZW50aXRpZXMgd2l0aCBhbiB1bmRlcnNjb3JlLlxuICBpZiAoIW1lcmdlTnVtYmVycykge1xuICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKC8gKD89XFxkKS9nLCAnXycpXG4gIH1cblxuICAvLyBSZXBsYWNlIHNwYWNlcyBiZXR3ZWVuIHdvcmRzIHdpdGggYW4gdXBwZXIgY2FzZWQgY2hhcmFjdGVyLlxuICByZXR1cm4gcmVzdWx0LnJlcGxhY2UoLyAoLikvZywgZnVuY3Rpb24gKG0sICQxKSB7XG4gICAgcmV0dXJuIHVwcGVyQ2FzZSgkMSwgbG9jYWxlKVxuICB9KVxufVxuIiwidmFyIHVwcGVyQ2FzZSA9IHJlcXVpcmUoJ3VwcGVyLWNhc2UnKVxuXG4vKipcbiAqIFVwcGVyIGNhc2UgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIsIGxvY2FsZSkge1xuICBpZiAoc3RyID09IG51bGwpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIHN0ciA9IFN0cmluZyhzdHIpXG5cbiAgcmV0dXJuIHVwcGVyQ2FzZShzdHIuY2hhckF0KDApLCBsb2NhbGUpICsgc3RyLnN1YnN0cigxKVxufVxuIiwidmFyIGNhbWVsQ2FzZSA9IHJlcXVpcmUoJ2NhbWVsLWNhc2UnKVxudmFyIHVwcGVyQ2FzZUZpcnN0ID0gcmVxdWlyZSgndXBwZXItY2FzZS1maXJzdCcpXG5cbi8qKlxuICogUGFzY2FsIGNhc2UgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgdmFsdWVcbiAqIEBwYXJhbSAge3N0cmluZ30gIFtsb2NhbGVdXG4gKiBAcGFyYW0gIHtib29sZWFufSBbbWVyZ2VOdW1iZXJzXVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSwgbG9jYWxlLCBtZXJnZU51bWJlcnMpIHtcbiAgcmV0dXJuIHVwcGVyQ2FzZUZpcnN0KGNhbWVsQ2FzZSh2YWx1ZSwgbG9jYWxlLCBtZXJnZU51bWJlcnMpLCBsb2NhbGUpXG59XG4iLCJpbXBvcnQgeyBpc0ZuLCBsb3dlcmNhc2UsIHJlZHVjZSwgZWFjaCwgZGVwcmVjYXRlLCBsb2cgfSBmcm9tICdAZm9ybWlseS9zaGFyZWQnXG5pbXBvcnQge1xuICBDb21wb25lbnRXaXRoU3R5bGVDb21wb25lbnQsXG4gIElTY2hlbWFGaWVsZFdyYXBwZXIsXG4gIElTY2hlbWFGb3JtUmVnaXN0cnksXG4gIElTY2hlbWFGaWVsZENvbXBvbmVudCxcbiAgSVNjaGVtYUZpZWxkQ29tcG9uZW50UHJvcHMsXG4gIElTY2hlbWFWaXJ0dWFsRmllbGRDb21wb25lbnRQcm9wc1xufSBmcm9tICcuLi90eXBlcydcbmltcG9ydCBwYXNjYWxDYXNlIGZyb20gJ3Bhc2NhbC1jYXNlJ1xuXG5jb25zdCByZWdpc3RyeTogSVNjaGVtYUZvcm1SZWdpc3RyeSA9IHtcbiAgZmllbGRzOiB7fSxcbiAgdmlydHVhbEZpZWxkczoge30sXG4gIHdyYXBwZXJzOiBbXSxcbiAgZm9ybUl0ZW1Db21wb25lbnQ6ICh7IGNoaWxkcmVuIH0pID0+IGNoaWxkcmVuLFxuICBmb3JtQ29tcG9uZW50OiAnZm9ybScsXG4gIHByZXZpZXdUZXh0OiBudWxsXG59XG5cbmV4cG9ydCBjb25zdCBnZXRSZWdpc3RyeSA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBmaWVsZHM6IHJlZ2lzdHJ5LmZpZWxkcyxcbiAgICB2aXJ0dWFsRmllbGRzOiByZWdpc3RyeS52aXJ0dWFsRmllbGRzLFxuICAgIGZvcm1JdGVtQ29tcG9uZW50OiByZWdpc3RyeS5mb3JtSXRlbUNvbXBvbmVudCxcbiAgICBmb3JtQ29tcG9uZW50OiByZWdpc3RyeS5mb3JtQ29tcG9uZW50LFxuICAgIHByZXZpZXdUZXh0OiByZWdpc3RyeS5wcmV2aWV3VGV4dFxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBjbGVhblJlZ2lzdHJ5ID0gKCkgPT4ge1xuICByZWdpc3RyeS5maWVsZHMgPSB7fVxuICByZWdpc3RyeS52aXJ0dWFsRmllbGRzID0ge31cbiAgcmVnaXN0cnkud3JhcHBlcnMgPSBbXVxuICByZWdpc3RyeS5wcmV2aWV3VGV4dCA9IG51bGxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRm9ybUNvbXBvbmVudDxQcm9wcyA9IGFueT4oXG4gIGNvbXBvbmVudDogUmVhY3QuSlNYRWxlbWVudENvbnN0cnVjdG9yPFByb3BzPlxuKSB7XG4gIGlmIChpc0ZuKGNvbXBvbmVudCkpIHtcbiAgICByZWdpc3RyeS5mb3JtQ29tcG9uZW50ID0gY29tcG9uZW50XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcG9zZTxULCBQPihwYXlsb2FkOiBULCBhcmdzOiBQW10sIHJldmVydDogYm9vbGVhbikge1xuICByZXR1cm4gcmVkdWNlKFxuICAgIGFyZ3MsXG4gICAgKGJ1ZjogVCwgZm46IFApID0+IHtcbiAgICAgIHJldHVybiBpc0ZuKGZuKSA/IGZuKGJ1ZikgOiBidWZcbiAgICB9LFxuICAgIHBheWxvYWQsXG4gICAgcmV2ZXJ0XG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRm9ybUZpZWxkKFxuICBuYW1lOiBzdHJpbmcsXG4gIGNvbXBvbmVudDogQ29tcG9uZW50V2l0aFN0eWxlQ29tcG9uZW50PElTY2hlbWFGaWVsZENvbXBvbmVudFByb3BzPixcbiAgbm9XcmFwcGVyOiBib29sZWFuID0gZmFsc2Vcbikge1xuICBpZiAoXG4gICAgbmFtZSAmJlxuICAgIChpc0ZuKGNvbXBvbmVudCkgfHwgdHlwZW9mIGNvbXBvbmVudC5zdHlsZWRDb21wb25lbnRJZCA9PT0gJ3N0cmluZycpXG4gICkge1xuICAgIG5hbWUgPSBsb3dlcmNhc2UobmFtZSlcbiAgICBpZiAocmVnaXN0cnkuZmllbGRzW25hbWVdKSB7XG4gICAgICBsb2cud2FybihcbiAgICAgICAgJ0NvbXBvbmVudCByZWdpc3RyYXRpb24gbmFtaW5nIGNvbmZsaWN0LiBQbGVhc2UgY2hhbmdlIHRoZSBuYW1lLiBHbG9iYWxseSByZWdpc3RlcmVkIGNvbXBvbmVudHMgd2lsbCBubyBsb25nZXIgc3VwcG9ydCBvdmVybGF5IHJlZ2lzdHJhdGlvbiBpbiB0aGUgZnV0dXJlLidcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKG5vV3JhcHBlcikge1xuICAgICAgcmVnaXN0cnkuZmllbGRzW25hbWVdID0gY29tcG9uZW50XG4gICAgICByZWdpc3RyeS5maWVsZHNbbmFtZV0uX19XUkFQUEVSU19fID0gW11cbiAgICB9IGVsc2Uge1xuICAgICAgcmVnaXN0cnkuZmllbGRzW25hbWVdID0gY29tcG9zZShjb21wb25lbnQsIHJlZ2lzdHJ5LndyYXBwZXJzLCB0cnVlKVxuICAgICAgcmVnaXN0cnkuZmllbGRzW25hbWVdLl9fV1JBUFBFUlNfXyA9IHJlZ2lzdHJ5LndyYXBwZXJzXG4gICAgfVxuICAgIHJlZ2lzdHJ5LmZpZWxkc1tuYW1lXS5kaXNwbGF5TmFtZSA9IHBhc2NhbENhc2UobmFtZSlcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJGb3JtRmllbGRzKG9iamVjdDogSVNjaGVtYUZvcm1SZWdpc3RyeVsnZmllbGRzJ10pIHtcbiAgZWFjaDxJU2NoZW1hRm9ybVJlZ2lzdHJ5WydmaWVsZHMnXSwgSVNjaGVtYUZpZWxkQ29tcG9uZW50PihcbiAgICBvYmplY3QsXG4gICAgKGNvbXBvbmVudCwga2V5KSA9PiB7XG4gICAgICByZWdpc3RlckZvcm1GaWVsZChrZXksIGNvbXBvbmVudClcbiAgICB9XG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyVmlydHVhbEJveChcbiAgbmFtZTogc3RyaW5nLFxuICBjb21wb25lbnQ6IENvbXBvbmVudFdpdGhTdHlsZUNvbXBvbmVudDxJU2NoZW1hVmlydHVhbEZpZWxkQ29tcG9uZW50UHJvcHM+XG4pIHtcbiAgaWYgKFxuICAgIG5hbWUgJiZcbiAgICAoaXNGbihjb21wb25lbnQpIHx8IHR5cGVvZiBjb21wb25lbnQuc3R5bGVkQ29tcG9uZW50SWQgPT09ICdzdHJpbmcnKVxuICApIHtcbiAgICBuYW1lID0gbG93ZXJjYXNlKG5hbWUpXG4gICAgcmVnaXN0cnkudmlydHVhbEZpZWxkc1tuYW1lXSA9IGNvbXBvbmVudFxuICAgIHJlZ2lzdHJ5LnZpcnR1YWxGaWVsZHNbbmFtZV0uZGlzcGxheU5hbWUgPSBwYXNjYWxDYXNlKG5hbWUpXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRm9ybUl0ZW1Db21wb25lbnQoXG4gIGNvbXBvbmVudDogUmVhY3QuSlNYRWxlbWVudENvbnN0cnVjdG9yPGFueT5cbikge1xuICBpZiAoaXNGbihjb21wb25lbnQpKSB7XG4gICAgcmVnaXN0cnkuZm9ybUl0ZW1Db21wb25lbnQgPSBjb21wb25lbnRcbiAgfVxufVxuXG50eXBlIEZpZWxkTWlkZGxld2FyZSA9IElTY2hlbWFGaWVsZFdyYXBwZXI8SVNjaGVtYUZpZWxkQ29tcG9uZW50UHJvcHM+XG5cbmV4cG9ydCBjb25zdCByZWdpc3RlckZpZWxkTWlkZGxld2FyZSA9IGRlcHJlY2F0ZTxcbiAgRmllbGRNaWRkbGV3YXJlLFxuICBGaWVsZE1pZGRsZXdhcmUsXG4gIEZpZWxkTWlkZGxld2FyZVxuPihmdW5jdGlvbiByZWdpc3RlckZpZWxkTWlkZGxld2FyZShcbiAgLi4ud3JhcHBlcnM6IElTY2hlbWFGaWVsZFdyYXBwZXI8SVNjaGVtYUZpZWxkQ29tcG9uZW50UHJvcHM+W11cbikge1xuICByZWdpc3RyeS53cmFwcGVycyA9IHJlZ2lzdHJ5LndyYXBwZXJzLmNvbmNhdCh3cmFwcGVycylcbiAgZWFjaDxJU2NoZW1hRm9ybVJlZ2lzdHJ5WydmaWVsZHMnXSwgSVNjaGVtYUZpZWxkQ29tcG9uZW50PihcbiAgICByZWdpc3RyeS5maWVsZHMsXG4gICAgKGNvbXBvbmVudCwga2V5KSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgICFjb21wb25lbnQuX19XUkFQUEVSU19fLnNvbWUod3JhcHBlciA9PiB3cmFwcGVycy5pbmRleE9mKHdyYXBwZXIpID4gLTEpXG4gICAgICApIHtcbiAgICAgICAgcmVnaXN0cnkuZmllbGRzW2tleV0gPSBjb21wb3NlKHJlZ2lzdHJ5LmZpZWxkc1trZXldLCB3cmFwcGVycywgdHJ1ZSlcbiAgICAgICAgcmVnaXN0cnkuZmllbGRzW2tleV0uX19XUkFQUEVSU19fID0gd3JhcHBlcnNcbiAgICAgIH1cbiAgICB9XG4gIClcbn0pXG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclByZXZpZXdUZXh0Q29tcG9uZW50PFByb3BzID0gYW55PihcbiAgY29tcG9uZW50OiBSZWFjdC5KU1hFbGVtZW50Q29uc3RydWN0b3I8UHJvcHM+XG4pIHtcbiAgaWYgKGlzRm4oY29tcG9uZW50KSkge1xuICAgIHJlZ2lzdHJ5LnByZXZpZXdUZXh0ID0gY29tcG9uZW50XG4gIH1cbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgaXNBcnIsIGVhY2gsIGlzRm4sIGlzVmFsaWQsIGRlZmF1bHRzIH0gZnJvbSAnQGZvcm1pbHkvc2hhcmVkJ1xuaW1wb3J0IHsgdXNlTGF5b3V0IH0gZnJvbSAnQGZvcm1pbHkvcmVhY3QnXG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnXG5pbXBvcnQge1xuICBJU2NoZW1hLFxuICBJQ29ubmVjdE9wdGlvbnMsXG4gIElTY2hlbWFGaWVsZENvbXBvbmVudFByb3BzLFxuICBJQ29ubmVjdFByb3BzLFxuICBNaXhpbkNvbm5lY3RlZENvbXBvbmVudFxufSBmcm9tICcuLi90eXBlcydcbmltcG9ydCB7IFNjaGVtYSB9IGZyb20gJy4vc2NoZW1hJ1xuXG5jb25zdCBjcmVhdGVFbnVtID0gKGVudW1zOiBhbnkpID0+IHtcbiAgaWYgKGlzQXJyKGVudW1zKSkge1xuICAgIHJldHVybiBlbnVtcy5tYXAoaXRlbSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBpdGVtXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxhYmVsOiBpdGVtLFxuICAgICAgICAgIHZhbHVlOiBpdGVtXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIFtdXG59XG5cbmNvbnN0IGJpbmRFZmZlY3RzID0gKFxuICBwcm9wczoge30sXG4gIGZpZWxkUHJvcHM6IElTY2hlbWFGaWVsZENvbXBvbmVudFByb3BzLFxuICBlZmZlY3Q6IElTY2hlbWFbJ3gtZWZmZWN0J10sXG4gIG5vdGlmeTogKHR5cGU6IHN0cmluZywgcGF5bG9hZD86IGFueSkgPT4gdm9pZFxuKTogYW55ID0+IHtcbiAgZWFjaChcbiAgICBlZmZlY3QoXG4gICAgICAodHlwZSwgcGF5bG9hZCkgPT5cbiAgICAgICAgbm90aWZ5KHR5cGUsIHsgcGF5bG9hZCwgbmFtZTogZmllbGRQcm9wcy5uYW1lLCBwYXRoOiBmaWVsZFByb3BzLnBhdGggfSksXG4gICAgICB7IC4uLnByb3BzIH1cbiAgICApLFxuICAgIChldmVudCwga2V5KSA9PiB7XG4gICAgICBjb25zdCBwcmV2RXZlbnQgPSBrZXkgPT09ICdvbkNoYW5nZScgPyBwcm9wc1trZXldIDogdW5kZWZpbmVkXG4gICAgICBwcm9wc1trZXldID0gKC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgICAgIGlmIChpc0ZuKGV2ZW50KSkge1xuICAgICAgICAgIGV2ZW50KC4uLmFyZ3MpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRm4ocHJldkV2ZW50KSkge1xuICAgICAgICAgIHJldHVybiBwcmV2RXZlbnQoLi4uYXJncylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgKVxuICByZXR1cm4gcHJvcHNcbn1cblxuZXhwb3J0IGNvbnN0IGNvbm5lY3QgPSA8RXh0ZW5kc0NvbXBvbmVudEtleSBleHRlbmRzIHN0cmluZyA9ICcnPihcbiAgb3B0aW9ucz86IElDb25uZWN0T3B0aW9uc1xuKSA9PiB7XG4gIG9wdGlvbnMgPSBkZWZhdWx0cyhcbiAgICB7XG4gICAgICB2YWx1ZU5hbWU6ICd2YWx1ZScsXG4gICAgICBldmVudE5hbWU6ICdvbkNoYW5nZSdcbiAgICB9LFxuICAgIG9wdGlvbnNcbiAgKVxuICByZXR1cm4gKENvbXBvbmVudDogUmVhY3QuSlNYRWxlbWVudENvbnN0cnVjdG9yPGFueT4pID0+IHtcbiAgICBjb25zdCBDb25uZWN0ZWRDb21wb25lbnQ6IE1peGluQ29ubmVjdGVkQ29tcG9uZW50PEV4dGVuZHNDb21wb25lbnRLZXk+ID0gKChcbiAgICAgIGZpZWxkUHJvcHM6IElTY2hlbWFGaWVsZENvbXBvbmVudFByb3BzXG4gICAgKSA9PiB7XG4gICAgICBjb25zdCB7IHZhbHVlLCBuYW1lLCBtdXRhdG9ycywgZm9ybSwgZWRpdGFibGUsIHByb3BzIH0gPSBmaWVsZFByb3BzXG4gICAgICBjb25zdCBzY2hlbWEgPSBuZXcgU2NoZW1hKHByb3BzKVxuICAgICAgY29uc3Qgc2NoZW1hQ29tcG9uZW50UHJvcHMgPSBzY2hlbWEuZ2V0RXh0ZW5kc0NvbXBvbmVudFByb3BzKClcbiAgICAgIGxldCBjb21wb25lbnRQcm9wczogSUNvbm5lY3RQcm9wcyA9IHtcbiAgICAgICAgLi4ub3B0aW9ucy5kZWZhdWx0UHJvcHMsXG4gICAgICAgIC4uLnNjaGVtYUNvbXBvbmVudFByb3BzLFxuICAgICAgICBbb3B0aW9ucy52YWx1ZU5hbWVdOiB2YWx1ZSxcbiAgICAgICAgW29wdGlvbnMuZXZlbnROYW1lXTogKGV2ZW50OiBhbnksIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgICAgICAgbXV0YXRvcnMuY2hhbmdlKFxuICAgICAgICAgICAgb3B0aW9ucy5nZXRWYWx1ZUZyb21FdmVudFxuICAgICAgICAgICAgICA/IG9wdGlvbnMuZ2V0VmFsdWVGcm9tRXZlbnQuY2FsbChcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcHM6IGNvbXBvbmVudFByb3BzLFxuICAgICAgICAgICAgICAgICAgICBzY2hlbWEsXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkOiBmaWVsZFByb3BzXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgICAgICAuLi5hcmdzXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICA6IGV2ZW50LFxuICAgICAgICAgICAgLi4uYXJnc1xuICAgICAgICAgIClcbiAgICAgICAgICBpZiAoaXNGbihzY2hlbWFDb21wb25lbnRQcm9wc1tvcHRpb25zLmV2ZW50TmFtZV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hQ29tcG9uZW50UHJvcHNbb3B0aW9ucy5ldmVudE5hbWVdKGV2ZW50LCAuLi5hcmdzKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25CbHVyOiAoLi4uYXJnczogYW55KSA9PiB7XG4gICAgICAgICAgbXV0YXRvcnMuYmx1cigpXG4gICAgICAgICAgaWYgKGlzRm4oc2NoZW1hQ29tcG9uZW50UHJvcHNbJ29uQmx1ciddKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVtYUNvbXBvbmVudFByb3BzWydvbkJsdXInXSguLi5hcmdzKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25Gb2N1czogKC4uLmFyZ3M6IGFueSkgPT4ge1xuICAgICAgICAgIG11dGF0b3JzLmZvY3VzKClcbiAgICAgICAgICBpZiAoaXNGbihzY2hlbWFDb21wb25lbnRQcm9wc1snb25Gb2N1cyddKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVtYUNvbXBvbmVudFByb3BzWydvbkZvY3VzJ10oLi4uYXJncylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc1ZhbGlkKGVkaXRhYmxlKSkge1xuICAgICAgICBpZiAoaXNGbihlZGl0YWJsZSkpIHtcbiAgICAgICAgICBpZiAoIWVkaXRhYmxlKG5hbWUpKSB7XG4gICAgICAgICAgICBjb21wb25lbnRQcm9wcy5kaXNhYmxlZCA9IHRydWVcbiAgICAgICAgICAgIGNvbXBvbmVudFByb3BzLnJlYWRPbmx5ID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChlZGl0YWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBjb21wb25lbnRQcm9wcy5kaXNhYmxlZCA9IHRydWVcbiAgICAgICAgICBjb21wb25lbnRQcm9wcy5yZWFkT25seSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBleHRlbmRzRWZmZWN0ID0gc2NoZW1hLmdldEV4dGVuZHNFZmZlY3QoKVxuICAgICAgaWYgKGlzRm4oZXh0ZW5kc0VmZmVjdCkpIHtcbiAgICAgICAgY29tcG9uZW50UHJvcHMgPSBiaW5kRWZmZWN0cyhcbiAgICAgICAgICBjb21wb25lbnRQcm9wcyxcbiAgICAgICAgICBmaWVsZFByb3BzLFxuICAgICAgICAgIGV4dGVuZHNFZmZlY3QsXG4gICAgICAgICAgZm9ybS5ub3RpZnlcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNGbihvcHRpb25zLmdldFByb3BzKSkge1xuICAgICAgICBjb25zdCBuZXdQcm9wcyA9IG9wdGlvbnMuZ2V0UHJvcHMoY29tcG9uZW50UHJvcHMsIGZpZWxkUHJvcHMpXG4gICAgICAgIGlmIChpc1ZhbGlkKG5ld1Byb3BzKSkge1xuICAgICAgICAgIGNvbXBvbmVudFByb3BzID0gbmV3UHJvcHMgYXMgYW55XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzQXJyKChwcm9wcyBhcyBJU2NoZW1hKS5lbnVtKSAmJiAhY29tcG9uZW50UHJvcHMuZGF0YVNvdXJjZSkge1xuICAgICAgICBjb21wb25lbnRQcm9wcy5kYXRhU291cmNlID0gY3JlYXRlRW51bSgocHJvcHMgYXMgSVNjaGVtYSkuZW51bSlcbiAgICAgIH0gZWxzZSBpZiAoY29tcG9uZW50UHJvcHMuZGF0YVNvdXJjZSkge1xuICAgICAgICBjb21wb25lbnRQcm9wcy5kYXRhU291cmNlID0gY3JlYXRlRW51bShjb21wb25lbnRQcm9wcy5kYXRhU291cmNlKVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNWYWxpZChjb21wb25lbnRQcm9wcy5lZGl0YWJsZSkpIHtcbiAgICAgICAgZGVsZXRlIGNvbXBvbmVudFByb3BzLmVkaXRhYmxlXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG1lZ2FQcm9wcyA9IHNjaGVtYS5nZXRNZWdhTGF5b3V0UHJvcHMoKVxuICAgICAgY29uc3QgeyBmdWxsLCBzaXplIH0gPSB1c2VMYXlvdXQobWVnYVByb3BzKVxuICAgICAgaWYgKGZ1bGwpIHtcbiAgICAgICAgY29tcG9uZW50UHJvcHMuc3R5bGUgPSB7XG4gICAgICAgICAgLi4uKGNvbXBvbmVudFByb3BzLnN0eWxlIHx8IHt9KSxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGZsZXg6ICcxIDEgMCUnXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHNpemUpIHtcbiAgICAgICAgY29tcG9uZW50UHJvcHMuc2l6ZSA9IHNpemVcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIGlzRm4ob3B0aW9ucy5nZXRDb21wb25lbnQpXG4gICAgICAgICAgPyBvcHRpb25zLmdldENvbXBvbmVudChDb21wb25lbnQsIHByb3BzLCBmaWVsZFByb3BzKVxuICAgICAgICAgIDogQ29tcG9uZW50LFxuICAgICAgICBjb21wb25lbnRQcm9wc1xuICAgICAgKVxuICAgIH0pIGFzIGFueVxuXG4gICAgT2JqZWN0LmFzc2lnbihDb25uZWN0ZWRDb21wb25lbnQsIHtcbiAgICAgIF9fQUxSRUFEWV9DT05ORUNURURfXzogdHJ1ZVxuICAgIH0pXG4gICAgaWYgKENvbXBvbmVudCkge1xuICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3MoQ29ubmVjdGVkQ29tcG9uZW50LCBDb21wb25lbnQpXG4gICAgfVxuXG4gICAgcmV0dXJuIENvbm5lY3RlZENvbXBvbmVudFxuICB9XG59XG4iLCJpbXBvcnQgeyBpc0FyciwgaXNFcXVhbCwgaXNCb29sIH0gZnJvbSAnQGZvcm1pbHkvc2hhcmVkJ1xuXG5leHBvcnQgdHlwZSBJTGlua2FnZUNvbmRpdGlvbiA9IGFueVtdXG5cbmV4cG9ydCBjbGFzcyBKU09OQ29uZGl0aW9uIHtcbiAgcHVibGljIHNvdXJjZTogSUxpbmthZ2VDb25kaXRpb25cbiAgcHVibGljIHZhbHVlOiBhbnlcbiAgY29uc3RydWN0b3IoanNvbjogSUxpbmthZ2VDb25kaXRpb24sIHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLnNvdXJjZSA9IGpzb24gfHwgW11cbiAgICB0aGlzLnZhbHVlID0gdmFsdWVcbiAgfVxuXG4gIGNvbXBsaWVBdG9tID0gKHNvdXJjZSA9IFtdKTogYm9vbGVhbiA9PiB7XG4gICAgc3dpdGNoIChzb3VyY2VbMF0pIHtcbiAgICAgIGNhc2UgJyYmJzpcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgxKS5ldmVyeSh0aGlzLmNvbXBsaWVBdG9tKVxuICAgICAgY2FzZSAnfHwnOlxuICAgICAgICByZXR1cm4gc291cmNlLnNsaWNlKDEpLnNvbWUodGhpcy5jb21wbGllQXRvbSlcbiAgICAgIGNhc2UgJz4nOlxuICAgICAgICByZXR1cm4gTnVtYmVyKHRoaXMudmFsdWUpID4gTnVtYmVyKHNvdXJjZVsxXSlcbiAgICAgIGNhc2UgJzwnOlxuICAgICAgICByZXR1cm4gTnVtYmVyKHRoaXMudmFsdWUpIDwgTnVtYmVyKHNvdXJjZVsxXSlcbiAgICAgIGNhc2UgJz49JzpcbiAgICAgICAgcmV0dXJuIE51bWJlcih0aGlzLnZhbHVlKSA+PSBOdW1iZXIoc291cmNlWzFdKVxuICAgICAgY2FzZSAnPD0nOlxuICAgICAgICByZXR1cm4gTnVtYmVyKHRoaXMudmFsdWUpIDw9IE51bWJlcihzb3VyY2VbMV0pXG4gICAgICBjYXNlICc9JzpcbiAgICAgIGNhc2UgJz09JzpcbiAgICAgICAgcmV0dXJuIGlzRXF1YWwodGhpcy52YWx1ZSwgc291cmNlWzFdKVxuICAgICAgY2FzZSAnIT0nOlxuICAgICAgICByZXR1cm4gIWlzRXF1YWwodGhpcy52YWx1ZSwgc291cmNlWzFdKVxuICAgICAgY2FzZSAnISc6XG4gICAgICAgIHJldHVybiAhdGhpcy52YWx1ZVxuICAgICAgY2FzZSAnaW5jbHVkZXMnOlxuICAgICAgICBpZihpc0Fycih0aGlzLnZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlLmluZGV4T2Yoc291cmNlWzFdKSA+IC0xXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzLnZhbHVlKS5pbmNsdWRlcyhzb3VyY2VbMV0pXG4gICAgICBjYXNlICdwYXR0ZXJuJzpcbiAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoc291cmNlWzFdKS50ZXN0KHRoaXMudmFsdWUpXG4gICAgICBjYXNlICdzdGFydFdpdGgnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHRoaXMudmFsdWUpLnN0YXJ0c1dpdGgoc291cmNlWzFdKVxuICAgICAgY2FzZSAnZW5kV2l0aCc6XG4gICAgICAgIHJldHVybiBTdHJpbmcodGhpcy52YWx1ZSkuZW5kc1dpdGgoc291cmNlWzFdKVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGNvbXBsaWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcGxpZUF0b20odGhpcy5zb3VyY2UpXG4gIH1cblxuICBzdGF0aWMgY2FsY3VsYXRlID0gKGNvbmRpdGlvbjogYW55LCB2YWx1ZTogYW55KSA9PiB7XG4gICAgaWYgKGlzQXJyKGNvbmRpdGlvbikpIHtcbiAgICAgIHJldHVybiBuZXcgSlNPTkNvbmRpdGlvbihjb25kaXRpb24sIHZhbHVlKS5jb21wbGllKClcbiAgICB9XG4gICAgaWYgKGlzQm9vbChjb25kaXRpb24pKSByZXR1cm4gY29uZGl0aW9uXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIGlzUGxhaW5PYmosXG4gIGlzQXJyLFxuICBpc0ZuLFxuICBpc1N0cixcbiAgcmVkdWNlLFxuICBCaWdEYXRhXG59IGZyb20gJ0Bmb3JtaWx5L3NoYXJlZCdcblxuY29uc3QgRXhwUkUgPSAvXlxccypcXHtcXHsoLiopXFx9XFx9XFxzKiQvXG5jb25zdCBhY3Rpb25zU3ltYm9sID0gU3ltYm9sLmZvcihcIl9fUkVWQV9BQ1RJT05TXCIpXG5cbmV4cG9ydCBjb25zdCBjb21wbGllRXhwcmVzc2lvbiA9IDxTb3VyY2UgPSBhbnksIENvbnRleHQgPSBhbnk+KFxuICBzb3VyY2U6IFNvdXJjZSxcbiAgY29udGV4dD86IENvbnRleHQsXG4gIGV4Y2x1ZGU/OiAoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IGJvb2xlYW5cbik6IGFueSA9PiB7XG4gIGNvbnN0IHNlZW5PYmplY3RzID0gW11cbiAgY29uc3QgY29tcGxpZSA9IDxTb3VyY2UgPSBhbnk+KHNvdXJjZTogU291cmNlKSA9PiB7XG4gICAgaWYgKGlzU3RyKHNvdXJjZSkpIHtcbiAgICAgIGNvbnN0IG1hdGNoZWQgPSBzb3VyY2UubWF0Y2goRXhwUkUpXG4gICAgICBpZiAoIW1hdGNoZWQpIHJldHVybiBzb3VyY2VcbiAgICAgIGNvbnN0IHZhcnMgPSBPYmplY3Qua2V5cyhjb250ZXh0IHx8IHt9KVxuICAgICAgY29uc3QgcGFyYW1zID0gdmFycy5tYXAoa2V5ID0+IGNvbnRleHRba2V5XSlcbiAgICAgIHJldHVybiBuZXcgRnVuY3Rpb24oLi4udmFycywgYHJldHVybiAoJHttYXRjaGVkWzFdfSk7YCkoLi4ucGFyYW1zKVxuICAgIH0gZWxzZSBpZiAoaXNBcnIoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5tYXAodmFsdWUgPT4gY29tcGxpZSh2YWx1ZSkpXG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqKHNvdXJjZSkpIHtcbiAgICAgIGlmKCckJHR5cGVvZicgaW4gc291cmNlICYmICdfb3duZXInIGluIHNvdXJjZSl7XG4gICAgICAgIHJldHVybiBzb3VyY2VcbiAgICAgIH1cbiAgICAgIGlmIChzb3VyY2VbYWN0aW9uc1N5bWJvbF0pIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZVxuICAgICAgfVxuICAgICAgaWYgKHNvdXJjZVsnX2lzQU1vbWVudE9iamVjdCddKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2VcbiAgICAgIH1cbiAgICAgIGlmIChzb3VyY2VbJ19pc0pTT05TY2hlbWFPYmplY3QnXSkge1xuICAgICAgICByZXR1cm4gc291cmNlXG4gICAgICB9XG4gICAgICBpZiAoQmlnRGF0YS5pc0JpZ0RhdGEoc291cmNlKSkge1xuICAgICAgICByZXR1cm4gc291cmNlXG4gICAgICB9XG4gICAgICBpZiAoaXNGbihzb3VyY2VbJ3RvSlMnXSkpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZVxuICAgICAgfVxuICAgICAgaWYgKGlzRm4oc291cmNlWyd0b0pTT04nXSkpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZVxuICAgICAgfVxuICAgICAgaWYgKHNlZW5PYmplY3RzLmluY2x1ZGVzKHNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZVxuICAgICAgfVxuICAgICAgc2Vlbk9iamVjdHMucHVzaChzb3VyY2UpXG4gICAgICByZXR1cm4gcmVkdWNlKFxuICAgICAgICBzb3VyY2UsXG4gICAgICAgIChidWYsIHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICBpZiAoaXNGbihleGNsdWRlKSkge1xuICAgICAgICAgICAgaWYgKGV4Y2x1ZGUoa2V5LCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgYnVmW2tleV0gPSB2YWx1ZVxuICAgICAgICAgICAgICByZXR1cm4gYnVmXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChrZXkgPT0gJ3gtbGlua2FnZXMnKSB7XG4gICAgICAgICAgICBidWZba2V5XSA9IHZhbHVlXG4gICAgICAgICAgICByZXR1cm4gYnVmXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZVsnX293bmVyJ10gJiYgdmFsdWVbJyQkdHlwZW9mJ10pIHtcbiAgICAgICAgICAgIGJ1ZltrZXldID0gdmFsdWVcbiAgICAgICAgICAgIHJldHVybiBidWZcbiAgICAgICAgICB9XG4gICAgICAgICAgYnVmW2tleV0gPSBjb21wbGllKHZhbHVlKVxuICAgICAgICAgIHJldHVybiBidWZcbiAgICAgICAgfSxcbiAgICAgICAge31cbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZVxuICB9XG4gIHJldHVybiBjb21wbGllPFNvdXJjZT4oc291cmNlKVxufVxuIiwiaW1wb3J0IHsgSlNPTkNvbmRpdGlvbiB9IGZyb20gJy4uL3NoYXJlZC9jb25kaXRpb24nXG5pbXBvcnQge1xuICBGb3JtRWZmZWN0SG9va3MsXG4gIGNyZWF0ZUZvcm1BY3Rpb25zLFxuICBJRm9ybUFjdGlvbnMsXG4gIElGaWVsZE1lcmdlU3RhdGVcbn0gZnJvbSAnQGZvcm1pbHkvcmVhY3QnXG5pbXBvcnQgeyBpc0ZuLCBpc1N0ciwgaXNBcnIsIEZvcm1QYXRoUGF0dGVybiwgRm9ybVBhdGggfSBmcm9tICdAZm9ybWlseS9zaGFyZWQnXG5pbXBvcnQgeyBJU2NoZW1hRm9ybUFjdGlvbnMgfSBmcm9tICcuLi90eXBlcydcbmltcG9ydCB7IGNvbXBsaWVFeHByZXNzaW9uIH0gZnJvbSAnLi9leHByZXNzaW9uJ1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSAnLi9zY2hlbWEnXG5cbmNvbnN0IHBhdGhFeHBSRSA9IC9cXFtcXHMqKD86KFsrLV0pXFxzKihcXGQrKT8pP1xccypcXF0vZ1xuXG5jb25zdCB0cmFuc2Zvcm1UYXJnZXRQYXRoID0gKFxuICB0YXJnZXQ6IEZvcm1QYXRoUGF0dGVybixcbiAgaW5kZXhlczogbnVtYmVyW10sXG4gIGJhc2VQYXRoOiBGb3JtUGF0aFxuKSA9PiB7XG4gIGlmICghaXNTdHIodGFyZ2V0KSkgcmV0dXJuIHRhcmdldFxuICBsZXQgaW5kZXggPSAwXG4gIGNvbnN0IG5ld1RhcmdldCA9IHRhcmdldFxuICAgIC5yZXBsYWNlKC9eXFxzKihcXC4rKS8sIChfOiBzdHJpbmcsICQxOiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IGRlcHRoID0gJDEubGVuZ3RoXG4gICAgICBsZXQgcGF0aCA9IGJhc2VQYXRoXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlcHRoOyBpKyspIHtcbiAgICAgICAgcGF0aCA9IHBhdGgucGFyZW50KClcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXRoLnRvU3RyaW5nKCkgKyAnLidcbiAgICB9KVxuICAgIC5yZXBsYWNlKHBhdGhFeHBSRSwgKF86IHN0cmluZywgb3BlcmF0b3I6IHN0cmluZywgZGVsdGE6IHN0cmluZykgPT4ge1xuICAgICAgaWYgKGRlbHRhKSB7XG4gICAgICAgIGlmIChvcGVyYXRvciA9PT0gJysnKSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZyhpbmRleGVzW2luZGV4KytdICsgTnVtYmVyKGRlbHRhKSlcbiAgICAgICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gJy0nKSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZyhpbmRleGVzW2luZGV4KytdIC0gTnVtYmVyKGRlbHRhKSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG9wZXJhdG9yID09PSAnKycpIHtcbiAgICAgICAgICByZXR1cm4gU3RyaW5nKGluZGV4ZXNbaW5kZXgrK10gKyAxKVxuICAgICAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSAnLScpIHtcbiAgICAgICAgICByZXR1cm4gU3RyaW5nKGluZGV4ZXNbaW5kZXgrK10gLSAxKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gU3RyaW5nKGluZGV4ZXNbaW5kZXgrK10pXG4gICAgfSlcbiAgcGF0aEV4cFJFLmxhc3RJbmRleCA9IDBcbiAgcmV0dXJuIG5ld1RhcmdldFxufVxuXG5jb25zdCBnZXRQYXRoSW5kZXhlcyA9IChwYXRoOiBhbnkpOiBudW1iZXJbXSA9PiB7XG4gIHJldHVybiBwYXRoLnRyYW5zZm9ybSgvXFxkKy8sICguLi5hcmdzKSA9PiBhcmdzLm1hcChpID0+IE51bWJlcihpKSkpIGFzIGFueVxufVxuXG5leHBvcnQgY29uc3QgcGFyc2VMaW5rYWdlcyA9IChcbiAgZmllbGRTdGF0ZTogSUZpZWxkTWVyZ2VTdGF0ZSxcbiAge1xuICAgIGdldEZpZWxkU3RhdGUsXG4gICAgZ2V0Rm9ybVN0YXRlLFxuICAgIHNjb3BlOiBvdXRlclNjb3BlXG4gIH06IHtcbiAgICBnZXRGaWVsZFN0YXRlPzogSUZvcm1BY3Rpb25zWydnZXRGaWVsZFN0YXRlJ11cbiAgICBnZXRGb3JtU3RhdGU/OiBJRm9ybUFjdGlvbnNbJ2dldEZvcm1TdGF0ZSddXG4gICAgc2NvcGU/OiAoKSA9PiBhbnlcbiAgfSA9IHt9XG4pID0+IHtcbiAgY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYShmaWVsZFN0YXRlLnByb3BzKVxuICBjb25zdCBsaW5rYWdlcyA9IHNjaGVtYS5nZXRFeHRlbmRzTGlua2FnZXMoKVxuICBpZiAoIWlzQXJyKGxpbmthZ2VzKSkgcmV0dXJuIFtdXG4gIGNvbnN0IGZpZWxkTmFtZSA9IEZvcm1QYXRoLnBhcnNlKGZpZWxkU3RhdGUubmFtZSlcbiAgY29uc3QgZmllbGRJbmRleGVzID0gZ2V0UGF0aEluZGV4ZXMoZmllbGROYW1lKVxuICBjb25zdCBmb3JtU3RhdGUgPSBnZXRGb3JtU3RhdGUgPyBnZXRGb3JtU3RhdGUoKSA6IHt9XG4gIHJldHVybiBsaW5rYWdlcy5tYXAoKHsgdGFyZ2V0LCBjb25kaXRpb24sIHNjb3BlLCAuLi5wYXJhbXMgfSkgPT4ge1xuICAgIGNvbnN0IG5ld1RhcmdldCA9IHRyYW5zZm9ybVRhcmdldFBhdGgodGFyZ2V0LCBmaWVsZEluZGV4ZXMsIGZpZWxkTmFtZSlcbiAgICBjb25zdCB0YXJnZXRTdGF0ZSA9IGdldEZpZWxkU3RhdGUgPyBnZXRGaWVsZFN0YXRlKG5ld1RhcmdldCkgOiB7fVxuICAgIGNvbnN0IGZpZWxkVmFsdWUgPSBmaWVsZE5hbWUuZ2V0SW4oZm9ybVN0YXRlLnZhbHVlcylcbiAgICBjb25zdCBfc2NvcGUgPSB7XG4gICAgICAuLi5vdXRlclNjb3BlLFxuICAgICAgLi4uc2NvcGUsXG4gICAgICAkdmFsdWU6IGZpZWxkVmFsdWUsXG4gICAgICAkc2VsZjogZmllbGRTdGF0ZSB8fCB7fSxcbiAgICAgICRmb3JtOiBmb3JtU3RhdGUgfHwge30sXG4gICAgICAkdGFyZ2V0OiB0YXJnZXRTdGF0ZSB8fCB7fVxuICAgIH1cbiAgICBjb25zdCBvcHRpb25zID0gcGFyYW1zXG4gICAgb3B0aW9ucy5jb21wbGllID0gKHBhdGg6IEZvcm1QYXRoUGF0dGVybiA9ICcnLCBzY29wZT86IGFueSkgPT4ge1xuICAgICAgcmV0dXJuIGNvbXBsaWVFeHByZXNzaW9uKEZvcm1QYXRoLmdldEluKHBhcmFtcywgcGF0aCksIHtcbiAgICAgICAgLi4uX3Njb3BlLFxuICAgICAgICAuLi5zY29wZVxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKGNvbmRpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvcHRpb25zLmNvbmRpdGlvbiA9IEpTT05Db25kaXRpb24uY2FsY3VsYXRlKFxuICAgICAgICBjb21wbGllRXhwcmVzc2lvbihjb25kaXRpb24sIF9zY29wZSksXG4gICAgICAgIGZpZWxkVmFsdWVcbiAgICAgIClcbiAgICB9XG4gICAgb3B0aW9ucy50YXJnZXQgPSBuZXdUYXJnZXRcbiAgICByZXR1cm4gb3B0aW9uc1xuICB9KVxufVxuXG50eXBlIExpbmthZ2VQYXJhbXMgPSB7XG4gIHR5cGU6IHN0cmluZ1xuICBjb25kaXRpb246IGFueVxuICBjb21wbGllOiAocGF0aDogRm9ybVBhdGhQYXR0ZXJuLCBzY29wZT86IGFueSkgPT4gYW55XG4gIFtrZXk6IHN0cmluZ106IGFueVxufVxuXG5leHBvcnQgY29uc3QgdXNlVmFsdWVMaW5rYWdlRWZmZWN0ID0gKHtcbiAgdHlwZSxcbiAgcmVzb2x2ZSxcbiAgcmVqZWN0LFxuICBzY29wZVxufToge1xuICB0eXBlPzogc3RyaW5nXG4gIHJlc29sdmU/OiAocGFyYW1zOiBMaW5rYWdlUGFyYW1zLCBhY3Rpb25zOiBJU2NoZW1hRm9ybUFjdGlvbnMpID0+IHZvaWRcbiAgcmVqZWN0PzogKHBhcmFtczogTGlua2FnZVBhcmFtcywgYWN0aW9uczogSVNjaGVtYUZvcm1BY3Rpb25zKSA9PiB2b2lkXG4gIHNjb3BlPzogYW55XG59ID0ge30pID0+IHtcbiAgaWYgKCF0eXBlIHx8ICFpc0ZuKHJlc29sdmUpKSByZXR1cm5cbiAgY29uc3QgYWN0aW9ucyA9IGNyZWF0ZUZvcm1BY3Rpb25zKClcbiAgY29uc3QgeyBnZXRGb3JtU3RhdGUsIGdldEZpZWxkU3RhdGUsIGhhc0NoYW5nZWQgfSA9IGFjdGlvbnNcbiAgY29uc3QgeyBvbkZpZWxkQ2hhbmdlJCB9ID0gRm9ybUVmZmVjdEhvb2tzXG4gIG9uRmllbGRDaGFuZ2UkKCcqJykuc3Vic2NyaWJlKGZpZWxkU3RhdGUgPT4ge1xuICAgIGlmIChcbiAgICAgICFoYXNDaGFuZ2VkKGZpZWxkU3RhdGUsICd2YWx1ZScpICYmXG4gICAgICAhaGFzQ2hhbmdlZChmaWVsZFN0YXRlLCAnaW5pdGlhbGl6ZWQnKSAmJlxuICAgICAgIWhhc0NoYW5nZWQoZmllbGRTdGF0ZSwgJ3Zpc2libGUnKVxuICAgICkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGxpbmthZ2VzID0gcGFyc2VMaW5rYWdlcyhmaWVsZFN0YXRlLCB7XG4gICAgICBnZXRGaWVsZFN0YXRlLFxuICAgICAgZ2V0Rm9ybVN0YXRlLFxuICAgICAgc2NvcGVcbiAgICB9KVxuICAgIGxpbmthZ2VzLmZvckVhY2gob3B0aW9ucyA9PiB7XG4gICAgICBjb25zdCB7IHR5cGU6IGxpbmthZ2VUeXBlLCBjb25kaXRpb24gfSA9IG9wdGlvbnNcbiAgICAgIGlmIChsaW5rYWdlVHlwZSAhPT0gdHlwZSkgcmV0dXJuXG4gICAgICBpZiAoaXNGbihyZXNvbHZlKSkge1xuICAgICAgICBpZiAoY29uZGl0aW9uID09PSB0cnVlIHx8IGNvbmRpdGlvbiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHJlc29sdmUob3B0aW9ucywgYWN0aW9ucylcbiAgICAgIH1cbiAgICAgIGlmIChpc0ZuKHJlamVjdCkpIHtcbiAgICAgICAgaWYgKGNvbmRpdGlvbiA9PT0gZmFsc2UpIHJlamVjdChvcHRpb25zLCBhY3Rpb25zKVxuICAgICAgfVxuICAgIH0pXG4gIH0pXG59XG4iLCJpbXBvcnQgeyB1c2VWYWx1ZUxpbmthZ2VFZmZlY3QgfSBmcm9tICcuLi9zaGFyZWQvbGlua2FnZSdcblxuZXhwb3J0IGNvbnN0IHVzZVZhbHVlVmlzaWJsZUxpbmthZ2VFZmZlY3QgPSAoc2NvcGU/OiBhbnkpID0+XG4gIHVzZVZhbHVlTGlua2FnZUVmZmVjdCh7XG4gICAgdHlwZTogJ3ZhbHVlOnZpc2libGUnLFxuICAgIHJlc29sdmU6ICh7IHRhcmdldCB9LCB7IHNldEZpZWxkU3RhdGUgfSkgPT4ge1xuICAgICAgc2V0RmllbGRTdGF0ZSh0YXJnZXQsIGlubmVyU3RhdGUgPT4ge1xuICAgICAgICBpbm5lclN0YXRlLnZpc2libGUgPSB0cnVlXG4gICAgICB9KVxuICAgIH0sXG4gICAgcmVqZWN0OiAoeyB0YXJnZXQgfSwgeyBzZXRGaWVsZFN0YXRlIH0pID0+IHtcbiAgICAgIHNldEZpZWxkU3RhdGUodGFyZ2V0LCBpbm5lclN0YXRlID0+IHtcbiAgICAgICAgaW5uZXJTdGF0ZS52aXNpYmxlID0gZmFsc2VcbiAgICAgIH0pXG4gICAgfSxcbiAgICBzY29wZVxuICB9KVxuIiwiaW1wb3J0IHsgdXNlVmFsdWVMaW5rYWdlRWZmZWN0IH0gZnJvbSAnLi4vc2hhcmVkL2xpbmthZ2UnXG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gJ0Bmb3JtaWx5L3NoYXJlZCdcbmV4cG9ydCBjb25zdCB1c2VWYWx1ZVNjaGVtYUxpbmthZ2VFZmZlY3QgPSAoc2NvcGU/OiBhbnkpID0+XG4gIHVzZVZhbHVlTGlua2FnZUVmZmVjdCh7XG4gICAgdHlwZTogJ3ZhbHVlOnNjaGVtYScsXG4gICAgcmVzb2x2ZTogKHsgdGFyZ2V0LCBjb21wbGllIH0sIHsgc2V0RmllbGRTdGF0ZSB9KSA9PiB7XG4gICAgICBzZXRGaWVsZFN0YXRlKHRhcmdldCwgaW5uZXJTdGF0ZSA9PiB7XG4gICAgICAgIG1lcmdlKFxuICAgICAgICAgIGlubmVyU3RhdGUucHJvcHMsXG4gICAgICAgICAgY29tcGxpZSgnc2NoZW1hJywge1xuICAgICAgICAgICAgJHRhcmdldDogaW5uZXJTdGF0ZVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGFzc2lnbjogdHJ1ZSxcbiAgICAgICAgICAgIGFycmF5TWVyZ2U6KHRhcmdldCxzb3VyY2UpPT5zb3VyY2VcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgIH0pXG4gICAgfSxcbiAgICByZWplY3Q6ICh7IHRhcmdldCwgb3RoZXJ3aXNlLCBjb21wbGllIH0sIHsgc2V0RmllbGRTdGF0ZSB9KSA9PiB7XG4gICAgICBpZiAoIW90aGVyd2lzZSkgcmV0dXJuXG4gICAgICBzZXRGaWVsZFN0YXRlKHRhcmdldCwgaW5uZXJTdGF0ZSA9PiB7XG4gICAgICAgIG1lcmdlKFxuICAgICAgICAgIGlubmVyU3RhdGUucHJvcHMsXG4gICAgICAgICAgY29tcGxpZSgnb3RoZXJ3aXNlJywge1xuICAgICAgICAgICAgJHRhcmdldDogaW5uZXJTdGF0ZVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGFzc2lnbjogdHJ1ZSxcbiAgICAgICAgICAgIGFycmF5TWVyZ2U6KHRhcmdldCxzb3VyY2UpPT5zb3VyY2VcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgIH0pXG4gICAgfSxcbiAgICBzY29wZVxuICB9KVxuIiwiaW1wb3J0IHsgdXNlVmFsdWVMaW5rYWdlRWZmZWN0IH0gZnJvbSAnLi4vc2hhcmVkL2xpbmthZ2UnXG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gJ0Bmb3JtaWx5L3NoYXJlZCdcbmV4cG9ydCBjb25zdCB1c2VWYWx1ZVN0YXRlTGlua2FnZUVmZmVjdCA9IChzY29wZT86IGFueSkgPT5cbiAgdXNlVmFsdWVMaW5rYWdlRWZmZWN0KHtcbiAgICB0eXBlOiAndmFsdWU6c3RhdGUnLFxuICAgIHJlc29sdmU6ICh7IHRhcmdldCwgY29tcGxpZSB9LCB7IHNldEZpZWxkU3RhdGUgfSkgPT4ge1xuICAgICAgc2V0RmllbGRTdGF0ZSh0YXJnZXQsIGlubmVyU3RhdGUgPT4ge1xuICAgICAgICBtZXJnZShcbiAgICAgICAgICBpbm5lclN0YXRlLFxuICAgICAgICAgIGNvbXBsaWUoJ3N0YXRlJywge1xuICAgICAgICAgICAgJHRhcmdldDogaW5uZXJTdGF0ZVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGFzc2lnbjogdHJ1ZSxcbiAgICAgICAgICAgIGFycmF5TWVyZ2U6ICh0YXJnZXQsIHNvdXJjZSkgPT4gc291cmNlXG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICB9KVxuICAgIH0sXG4gICAgcmVqZWN0OiAoeyB0YXJnZXQsIG90aGVyd2lzZSwgY29tcGxpZSB9LCB7IHNldEZpZWxkU3RhdGUgfSkgPT4ge1xuICAgICAgaWYgKCFvdGhlcndpc2UpIHJldHVyblxuICAgICAgc2V0RmllbGRTdGF0ZSh0YXJnZXQsIGlubmVyU3RhdGUgPT4ge1xuICAgICAgICBtZXJnZShcbiAgICAgICAgICBpbm5lclN0YXRlLFxuICAgICAgICAgIGNvbXBsaWUoJ290aGVyd2lzZScsIHtcbiAgICAgICAgICAgICR0YXJnZXQ6IGlubmVyU3RhdGVcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBhc3NpZ246IHRydWUsXG4gICAgICAgICAgICBhcnJheU1lcmdlOiAodGFyZ2V0LCBzb3VyY2UpID0+IHNvdXJjZVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgfSlcbiAgICB9LFxuICAgIHNjb3BlXG4gIH0pXG4iLCJpbXBvcnQgeyB1c2VNZW1vLCB1c2VSZWYsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZUZvcm0gfSBmcm9tICdAZm9ybWlseS9yZWFjdCdcbmltcG9ydCB7IFNjaGVtYSB9IGZyb20gJy4uL3NoYXJlZC9zY2hlbWEnXG5pbXBvcnQgeyBkZXByZWNhdGUsIGVhY2gsIGxvd2VyY2FzZSwgaXNGbiB9IGZyb20gJ0Bmb3JtaWx5L3NoYXJlZCdcbmltcG9ydCB7IHVzZUV2YSB9IGZyb20gJ3JlYWN0LWV2YSdcbmltcG9ydCB7IElTY2hlbWFGb3JtUHJvcHMgfSBmcm9tICcuLi90eXBlcydcbmltcG9ydCB7IGNyZWF0ZVNjaGVtYUZvcm1BY3Rpb25zIH0gZnJvbSAnLi4vc2hhcmVkL2FjdGlvbnMnXG5pbXBvcnQgeyBnZXRSZWdpc3RyeSB9IGZyb20gJy4uL3NoYXJlZC9yZWdpc3RyeSdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICcuLi9zaGFyZWQvY29ubmVjdCdcbmltcG9ydCB7IHVzZVZhbHVlVmlzaWJsZUxpbmthZ2VFZmZlY3QgfSBmcm9tICcuLi9saW5rYWdlcy92aXNpYmxlJ1xuaW1wb3J0IHsgdXNlVmFsdWVTY2hlbWFMaW5rYWdlRWZmZWN0IH0gZnJvbSAnLi4vbGlua2FnZXMvc2NoZW1hJ1xuaW1wb3J0IHsgdXNlVmFsdWVTdGF0ZUxpbmthZ2VFZmZlY3QgfSBmcm9tICcuLi9saW5rYWdlcy9zdGF0ZSdcblxuY29uc3QgbG93ZXJjYXNlS2V5cyA9IChvYmo6IGFueSkgPT4ge1xuICBjb25zdCByZXN1bHQgPSB7fVxuICBlYWNoKG9iaiwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICByZXN1bHRbbG93ZXJjYXNlKGtleSldID0gdmFsdWVcbiAgfSlcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5jb25zdCBDb25uZWN0ZWRDb21wb25lbnQgPSBTeW1ib2wuZm9yKCdjb25uZWN0ZWQnKVxuXG5jb25zdCB0cmFuc2Zvcm1Db21wb25lbnRzID0gKGNvbXBvbmVudHM6IGFueSkgPT4ge1xuICBjb25zdCBmaWVsZENvbXBvbmVudHMgPSB7fVxuICBjb25zdCB2aXJ0dWFsRmllbGRDb21wb25lbnRzID0ge31cbiAgZWFjaChjb21wb25lbnRzLCAoY29tcG9uZW50OiBhbnksIG5hbWUpID0+IHtcbiAgICBpZiAoIWlzRm4oY29tcG9uZW50KSAmJiAhY29tcG9uZW50WydzdHlsZWRDb21wb25lbnRJZCddKVxuICAgICAgZmllbGRDb21wb25lbnRzW25hbWVdID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgnZGl2Jywge30sICdDYW4gbm90IGZvdW5kIGFueSBjb21wb25lbnQuJylcbiAgICAgIH1cbiAgICBpZiAoY29tcG9uZW50WydfX0FMUkVBRFlfQ09OTkVDVEVEX18nXSB8fCBjb21wb25lbnRbJ2lzRmllbGRDb21wb25lbnQnXSkge1xuICAgICAgZmllbGRDb21wb25lbnRzW25hbWVdID0gY29tcG9uZW50XG4gICAgfSBlbHNlIGlmIChjb21wb25lbnRbJ19fVklSVFVBTF9CT1hfXyddKSB7XG4gICAgICB2aXJ0dWFsRmllbGRDb21wb25lbnRzW2NvbXBvbmVudFsnX19WSVJUVUFMX0JPWF9fJ11bJ2tleSddXSA9XG4gICAgICAgIGNvbXBvbmVudFsnX19WSVJUVUFMX0JPWF9fJ11bJ2NvbXBvbmVudCddXG4gICAgfSBlbHNlIGlmIChjb21wb25lbnRbJ2lzVmlydHVhbEZpZWxkQ29tcG9uZW50J10pIHtcbiAgICAgIHZpcnR1YWxGaWVsZENvbXBvbmVudHNbbmFtZV0gPSBjb21wb25lbnRcbiAgICB9IGVsc2UgaWYgKCFjb21wb25lbnRbQ29ubmVjdGVkQ29tcG9uZW50XSkge1xuICAgICAgY29tcG9uZW50W0Nvbm5lY3RlZENvbXBvbmVudF0gPSBjb25uZWN0KCkoY29tcG9uZW50KVxuICAgICAgZmllbGRDb21wb25lbnRzW25hbWVdID0gY29tcG9uZW50W0Nvbm5lY3RlZENvbXBvbmVudF1cbiAgICB9IGVsc2Uge1xuICAgICAgZmllbGRDb21wb25lbnRzW25hbWVdID0gY29tcG9uZW50W0Nvbm5lY3RlZENvbXBvbmVudF1cbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIHsgZmllbGRDb21wb25lbnRzLCB2aXJ0dWFsRmllbGRDb21wb25lbnRzIH1cbn1cblxuY29uc3QgdXNlSW50ZXJuYWxTY2hlbWFGb3JtID0gKHByb3BzOiBJU2NoZW1hRm9ybVByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBmaWVsZHMsXG4gICAgdmlydHVhbEZpZWxkcyxcbiAgICBjb21wb25lbnRzLFxuICAgIGZvcm1Db21wb25lbnQsXG4gICAgZm9ybUl0ZW1Db21wb25lbnQsXG4gICAgY29tcG9uZW50UHJvcHNJbnRlcmNlcHRvcixcbiAgICBzY2hlbWE6IHByb3BzU2NoZW1hLFxuICAgIGRlZmF1bHRWYWx1ZSxcbiAgICB2YWx1ZSxcbiAgICBpbml0aWFsVmFsdWVzLFxuICAgIGFjdGlvbnMsXG4gICAgZWZmZWN0cyxcbiAgICBvbkNoYW5nZSxcbiAgICBvblN1Ym1pdCxcbiAgICBvblJlc2V0LFxuICAgIG9uVmFsaWRhdGVGYWlsZWQsXG4gICAgdXNlRGlydHksXG4gICAgY2hpbGRyZW4sXG4gICAgZXhwcmVzc2lvblNjb3BlLFxuICAgIGZvcm0sXG4gICAgZWRpdGFibGUsXG4gICAgdmFsaWRhdGVGaXJzdCxcbiAgICAuLi5mb3JtQ29tcG9uZW50UHJvcHNcbiAgfSA9IHByb3BzXG4gIGNvbnN0IHsgaW1wbGVtZW50QWN0aW9ucyB9ID0gdXNlRXZhKHtcbiAgICBhY3Rpb25zXG4gIH0pXG4gIGNvbnN0IHNjaGVtYSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTY2hlbWEocHJvcHNTY2hlbWEpXG4gICAgaW1wbGVtZW50QWN0aW9ucyh7XG4gICAgICBnZXRTY2hlbWE6IGRlcHJlY2F0ZSgoKSA9PiByZXN1bHQsICdQbGVhc2UgdXNlIHRoZSBnZXRGb3JtU2NoZW1hLicpLFxuICAgICAgZ2V0Rm9ybVNjaGVtYTogKCkgPT4gcmVzdWx0XG4gICAgfSlcbiAgICByZXR1cm4gcmVzdWx0XG4gIH0sIFtwcm9wc1NjaGVtYV0pXG4gIGNvbnN0IHJlZ2lzdHJ5ID0gZ2V0UmVnaXN0cnkoKVxuICBjb25zdCB7IGZpZWxkQ29tcG9uZW50cywgdmlydHVhbEZpZWxkQ29tcG9uZW50cyB9ID0gdHJhbnNmb3JtQ29tcG9uZW50cyhcbiAgICBjb21wb25lbnRzXG4gIClcbiAgcmV0dXJuIHtcbiAgICBmb3JtOiB1c2VGb3JtKHtcbiAgICAgIC4uLnByb3BzLFxuICAgICAgZWZmZWN0czogKCQsIGFjdGlvbnMpID0+IHtcbiAgICAgICAgdXNlVmFsdWVWaXNpYmxlTGlua2FnZUVmZmVjdChleHByZXNzaW9uU2NvcGUpXG4gICAgICAgIHVzZVZhbHVlU2NoZW1hTGlua2FnZUVmZmVjdChleHByZXNzaW9uU2NvcGUpXG4gICAgICAgIHVzZVZhbHVlU3RhdGVMaW5rYWdlRWZmZWN0KGV4cHJlc3Npb25TY29wZSlcbiAgICAgICAgaWYgKGlzRm4oZWZmZWN0cykpIHtcbiAgICAgICAgICBlZmZlY3RzKCQsIGFjdGlvbnMpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSxcbiAgICBmb3JtQ29tcG9uZW50UHJvcHM6IHtcbiAgICAgIC4uLmZvcm1Db21wb25lbnRQcm9wcyxcbiAgICAgIC4uLnNjaGVtYS5nZXRFeHRlbmRzQ29tcG9uZW50UHJvcHMoKVxuICAgIH0sXG4gICAgZmllbGRzOiBsb3dlcmNhc2VLZXlzKHtcbiAgICAgIC4uLnJlZ2lzdHJ5LmZpZWxkcyxcbiAgICAgIC4uLmZpZWxkcyxcbiAgICAgIC4uLmZpZWxkQ29tcG9uZW50c1xuICAgIH0pLFxuICAgIHZpcnR1YWxGaWVsZHM6IGxvd2VyY2FzZUtleXMoe1xuICAgICAgLi4ucmVnaXN0cnkudmlydHVhbEZpZWxkcyxcbiAgICAgIC4uLnZpcnR1YWxGaWVsZHMsXG4gICAgICAuLi52aXJ0dWFsRmllbGRDb21wb25lbnRzXG4gICAgfSksXG4gICAgZm9ybUNvbXBvbmVudDogZm9ybUNvbXBvbmVudCA/IGZvcm1Db21wb25lbnQgOiByZWdpc3RyeS5mb3JtQ29tcG9uZW50LFxuICAgIGZvcm1JdGVtQ29tcG9uZW50OiBmb3JtSXRlbUNvbXBvbmVudFxuICAgICAgPyBmb3JtSXRlbUNvbXBvbmVudFxuICAgICAgOiByZWdpc3RyeS5mb3JtSXRlbUNvbXBvbmVudCxcbiAgICBzY2hlbWEsXG4gICAgY29tcG9uZW50UHJvcHNJbnRlcmNlcHRvcixcbiAgICBjaGlsZHJlblxuICB9XG59XG5cbmV4cG9ydCBjb25zdCB1c2VTY2hlbWFGb3JtID0gKHByb3BzOiBJU2NoZW1hRm9ybVByb3BzKSA9PiB7XG4gIGNvbnN0IGFjdGlvbnNSZWYgPSB1c2VSZWY8YW55PihudWxsKVxuICBhY3Rpb25zUmVmLmN1cnJlbnQgPVxuICAgIGFjdGlvbnNSZWYuY3VycmVudCB8fCBwcm9wcy5hY3Rpb25zIHx8IGNyZWF0ZVNjaGVtYUZvcm1BY3Rpb25zKClcbiAgcmV0dXJuIHVzZUludGVybmFsU2NoZW1hRm9ybSh7XG4gICAgLi4ucHJvcHMsXG4gICAgYWN0aW9uczogYWN0aW9uc1JlZi5jdXJyZW50XG4gIH0pXG59XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tICcuL3NjaGVtYSdcbmltcG9ydCB7IElTY2hlbWFGb3JtUmVnaXN0cnksIElTY2hlbWFGaWVsZENvbnRleHRQcm9wcyB9IGZyb20gJy4uL3R5cGVzJ1xuXG5leHBvcnQgY29uc3QgRm9ybUNvbXBvbmVudHNDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxJU2NoZW1hRm9ybVJlZ2lzdHJ5PihudWxsKVxuXG5leHBvcnQgY29uc3QgRm9ybUV4cHJlc3Npb25TY29wZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0PGFueT4oe30pXG5cbmV4cG9ydCBjb25zdCBTY2hlbWFGaWVsZFByb3BzQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8SVNjaGVtYUZpZWxkQ29udGV4dFByb3BzPihcbiAgbnVsbFxuKVxuXG5leHBvcnQgY29uc3QgRm9ybVNjaGVtYUNvbnRleHQgPSBjcmVhdGVDb250ZXh0PFNjaGVtYT4obnVsbClcbiIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFNjaGVtYUZpZWxkUHJvcHNDb250ZXh0IH0gZnJvbSAnLi4vc2hhcmVkL2NvbnRleHQnXG5cbmV4cG9ydCBjb25zdCB1c2VTY2hlbWFQcm9wcyA9ICgpID0+IHVzZUNvbnRleHQoU2NoZW1hRmllbGRQcm9wc0NvbnRleHQpXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEZpZWxkLCBWaXJ0dWFsRmllbGQsIElGaWVsZFN0YXRlIH0gZnJvbSAnQGZvcm1pbHkvcmVhY3QnXG5pbXBvcnQge1xuICBGb3JtUGF0aCxcbiAgaXNGbixcbiAgaXNTdHIsXG4gIGlzRXF1YWwsXG4gIGlzVmFsaWQsXG4gIGxvZyxcbiAgbG93ZXJjYXNlXG59IGZyb20gJ0Bmb3JtaWx5L3NoYXJlZCdcbmltcG9ydCB7XG4gIElTY2hlbWFGaWVsZFByb3BzLFxuICBJU2NoZW1hRmllbGRDb21wb25lbnRQcm9wcyxcbiAgSVNjaGVtYVZpcnR1YWxGaWVsZENvbXBvbmVudFByb3BzXG59IGZyb20gJy4uL3R5cGVzJ1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSAnLi4vc2hhcmVkL3NjaGVtYSdcbmltcG9ydCB7XG4gIEZvcm1TY2hlbWFDb250ZXh0LFxuICBGb3JtQ29tcG9uZW50c0NvbnRleHQsXG4gIEZvcm1FeHByZXNzaW9uU2NvcGVDb250ZXh0LFxuICBTY2hlbWFGaWVsZFByb3BzQ29udGV4dFxufSBmcm9tICcuLi9zaGFyZWQvY29udGV4dCdcbmltcG9ydCB7IGNvbXBsaWVFeHByZXNzaW9uIH0gZnJvbSAnLi4vc2hhcmVkL2V4cHJlc3Npb24nXG5cbmNvbnN0IGNvbXB1dGVTY2hlbWFTdGF0ZSA9IChkcmFmdDogSUZpZWxkU3RhdGUsIHByZXZTdGF0ZTogSUZpZWxkU3RhdGUpID0+IHtcbiAgY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYShkcmFmdC5wcm9wcylcbiAgY29uc3QgcHJldlNjaGVtYSA9IG5ldyBTY2hlbWEocHJldlN0YXRlLnByb3BzKVxuICBjb25zdCBjdXJyZW50UmVxdWlyZWQgPSBzY2hlbWEuZ2V0RXh0ZW5kc1JlcXVpcmVkKClcbiAgY29uc3QgcHJldlJlcXVpcmVkID0gcHJldlNjaGVtYS5nZXRFeHRlbmRzUmVxdWlyZWQoKVxuICBjb25zdCBjdXJyZW50UnVsZXMgPSBzY2hlbWEuZ2V0RXh0ZW5kc1J1bGVzKClcbiAgY29uc3QgcHJldlJ1bGVzID0gcHJldlNjaGVtYS5nZXRFeHRlbmRzUnVsZXMoKVxuICBjb25zdCBjdXJyZW50RWRpdGFibGUgPSBzY2hlbWEuZ2V0RXh0ZW5kc0VkaXRhYmxlKClcbiAgY29uc3QgcHJldkVkaXRhYmxlID0gcHJldlNjaGVtYS5nZXRFeHRlbmRzRWRpdGFibGUoKVxuICBpZiAoaXNWYWxpZChjdXJyZW50UmVxdWlyZWQpICYmICFpc0VxdWFsKGN1cnJlbnRSZXF1aXJlZCwgcHJldlJlcXVpcmVkKSkge1xuICAgIGRyYWZ0LnJlcXVpcmVkID0gY3VycmVudFJlcXVpcmVkXG4gIH1cbiAgaWYgKGlzVmFsaWQoY3VycmVudFJ1bGVzKSAmJiAhaXNFcXVhbChjdXJyZW50UnVsZXMsIHByZXZSdWxlcykpIHtcbiAgICBkcmFmdC5ydWxlcyA9IGN1cnJlbnRSdWxlc1xuICB9XG4gIGlmIChpc1ZhbGlkKGN1cnJlbnRFZGl0YWJsZSkgJiYgIWlzRXF1YWwoY3VycmVudEVkaXRhYmxlLCBwcmV2RWRpdGFibGUpKSB7XG4gICAgZHJhZnQuc2VsZkVkaXRhYmxlID0gY3VycmVudEVkaXRhYmxlXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IFNjaGVtYUZpZWxkOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxJU2NoZW1hRmllbGRQcm9wcz4gPSAoXG4gIHByb3BzOiBJU2NoZW1hRmllbGRQcm9wc1xuKSA9PiB7XG4gIGNvbnN0IHBhdGggPSBGb3JtUGF0aC5wYXJzZShwcm9wcy5wYXRoKVxuICBjb25zdCBmb3JtU2NoZW1hID0gdXNlQ29udGV4dChGb3JtU2NoZW1hQ29udGV4dClcbiAgY29uc3QgZmllbGRTY2hlbWEgPSBuZXcgU2NoZW1hKHByb3BzLnNjaGVtYSB8fCBmb3JtU2NoZW1hLmdldChwYXRoKSlcbiAgY29uc3QgZm9ybVJlZ2lzdHJ5ID0gdXNlQ29udGV4dChGb3JtQ29tcG9uZW50c0NvbnRleHQpXG4gIGNvbnN0IGV4cHJlc3Npb25TY29wZSA9IHVzZUNvbnRleHQoRm9ybUV4cHJlc3Npb25TY29wZUNvbnRleHQpXG4gIGNvbnN0IEVycm9yVGlwUGF0aFN0ciA9IHBhdGgudG9TdHJpbmcoKVxuICBpZiAoIWZpZWxkU2NoZW1hKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW4gbm90IGZvdW5kIHNjaGVtYSBub2RlIGJ5ICR7RXJyb3JUaXBQYXRoU3RyfS5gKVxuICB9XG4gIGlmICghZm9ybVJlZ2lzdHJ5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW4gbm90IGZvdW5kIGFueSBmb3JtIGNvbXBvbmVudHMuYClcbiAgfVxuICBjb25zdCBzY2hlbWFUeXBlID0gZmllbGRTY2hlbWEudHlwZVxuICBjb25zdCBzY2hlbWFDb21wb25lbnQgPSBmaWVsZFNjaGVtYS5nZXRFeHRlbmRzQ29tcG9uZW50KClcbiAgY29uc3Qgc2NoZW1hUmVuZGVyZXIgPSBmaWVsZFNjaGVtYS5nZXRFeHRlbmRzUmVuZGVyZXIoKVxuICBjb25zdCBpbml0aWFsQ29tcG9uZW50ID0gc2NoZW1hQ29tcG9uZW50IHx8IHNjaGVtYVR5cGVcbiAgY29uc3QgcmVuZGVyRmllbGQgPSAoXG4gICAgYWRkdGlvbktleTogc3RyaW5nIHwgbnVtYmVyLFxuICAgIHJlYWN0S2V5Pzogc3RyaW5nIHwgbnVtYmVyXG4gICkgPT4ge1xuICAgIHJldHVybiA8U2NoZW1hRmllbGQga2V5PXtyZWFjdEtleX0gcGF0aD17cGF0aC5jb25jYXQoYWRkdGlvbktleSl9IC8+XG4gIH1cbiAgY29uc3QgZ2V0UHJvcHNGcm9tSW50ZXJjZXB0b3IgPSAoc3RhdGVQcm9wcykgPT4ge1xuICAgIGxldCBpbnRlcmNlcHRvclByb3BzID0ge31cbiAgICBpZiAoaXNGbihmb3JtUmVnaXN0cnkuY29tcG9uZW50UHJvcHNJbnRlcmNlcHRvcikpIHtcbiAgICAgIGludGVyY2VwdG9yUHJvcHMgPSBmb3JtUmVnaXN0cnkuY29tcG9uZW50UHJvcHNJbnRlcmNlcHRvcihwcm9wcykgfHwge31cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnN0YXRlUHJvcHMsXG4gICAgICBbJ3gtY29tcG9uZW50LXByb3BzJ106IHtcbiAgICAgICAgLi4uKHN0YXRlUHJvcHNbJ3gtY29tcG9uZW50LXByb3BzJ10gfHwge30pLFxuICAgICAgICAuLi5pbnRlcmNlcHRvclByb3BzLFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHJlbmRlckZpZWxkRGVsZWdhdGUgPSAoXG4gICAgY2FsbGJhY2s6IChwcm9wczogSVNjaGVtYUZpZWxkQ29tcG9uZW50UHJvcHMpID0+IFJlYWN0LlJlYWN0RWxlbWVudFxuICApID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPEZpZWxkXG4gICAgICAgIHBhdGg9e3BhdGh9XG4gICAgICAgIGluaXRpYWxWYWx1ZT17Y29tcGxpZUV4cHJlc3Npb24oZmllbGRTY2hlbWEuZGVmYXVsdCwgZXhwcmVzc2lvblNjb3BlKX1cbiAgICAgICAgcHJvcHM9e2NvbXBsaWVFeHByZXNzaW9uKFxuICAgICAgICAgIGZpZWxkU2NoZW1hLmdldFNlbGZQcm9wcygpLFxuICAgICAgICAgIGV4cHJlc3Npb25TY29wZSxcbiAgICAgICAgICAoa2V5OiBzdHJpbmcpID0+IGtleSA9PSAneC1saW5rYWdlcydcbiAgICAgICAgKX1cbiAgICAgICAgZGF0YVR5cGU9e2ZpZWxkU2NoZW1hLnR5cGV9XG4gICAgICAgIHRyaWdnZXJUeXBlPXtmaWVsZFNjaGVtYS5nZXRFeHRlbmRzVHJpZ2dlclR5cGUoKX1cbiAgICAgICAgZWRpdGFibGU9e2ZpZWxkU2NoZW1hLmdldEV4dGVuZHNFZGl0YWJsZSgpfVxuICAgICAgICB2aXNpYmxlPXtjb21wbGllRXhwcmVzc2lvbihcbiAgICAgICAgICBmaWVsZFNjaGVtYS5nZXRFeHRlbmRzVmlzaWJsZSgpLFxuICAgICAgICAgIGV4cHJlc3Npb25TY29wZVxuICAgICAgICApfVxuICAgICAgICBkaXNwbGF5PXtjb21wbGllRXhwcmVzc2lvbihcbiAgICAgICAgICBmaWVsZFNjaGVtYS5nZXRFeHRlbmRzRGlzcGxheSgpLFxuICAgICAgICAgIGV4cHJlc3Npb25TY29wZVxuICAgICAgICApfVxuICAgICAgICByZXF1aXJlZD17Y29tcGxpZUV4cHJlc3Npb24oXG4gICAgICAgICAgZmllbGRTY2hlbWEuZ2V0RXh0ZW5kc1JlcXVpcmVkKCksXG4gICAgICAgICAgZXhwcmVzc2lvblNjb3BlXG4gICAgICAgICl9XG4gICAgICAgIHJ1bGVzPXtjb21wbGllRXhwcmVzc2lvbihcbiAgICAgICAgICBmaWVsZFNjaGVtYS5nZXRFeHRlbmRzUnVsZXMoKSxcbiAgICAgICAgICBleHByZXNzaW9uU2NvcGVcbiAgICAgICAgKX1cbiAgICAgICAgY29tcHV0ZVN0YXRlPXtjb21wdXRlU2NoZW1hU3RhdGV9XG4gICAgICA+XG4gICAgICAgIHsoeyBzdGF0ZSwgbXV0YXRvcnMsIGZvcm0gfSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0YXRlUHJvcHMgPSBnZXRQcm9wc0Zyb21JbnRlcmNlcHRvcihzdGF0ZS5wcm9wcylcbiAgICAgICAgICBjb25zdCBwcm9wczogSVNjaGVtYUZpZWxkQ29tcG9uZW50UHJvcHMgPSB7XG4gICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgIHByb3BzOiBzdGF0ZVByb3BzLFxuICAgICAgICAgICAgc2NoZW1hOiBuZXcgU2NoZW1hKGZpZWxkU2NoZW1hKS5tZXJnZShzdGF0ZVByb3BzKSxcbiAgICAgICAgICAgIGZvcm0sXG4gICAgICAgICAgICBtdXRhdG9ycyxcbiAgICAgICAgICAgIHJlbmRlckZpZWxkXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8U2NoZW1hRmllbGRQcm9wc0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3Byb3BzfT5cbiAgICAgICAgICAgICAge2NhbGxiYWNrKHByb3BzKX1cbiAgICAgICAgICAgIDwvU2NoZW1hRmllbGRQcm9wc0NvbnRleHQuUHJvdmlkZXI+XG4gICAgICAgICAgKVxuICAgICAgICB9fVxuICAgICAgPC9GaWVsZD5cbiAgICApXG4gIH1cblxuICBjb25zdCByZW5kZXJWaXJ0dWFsRmllbGREZWxlZ2F0ZSA9IChcbiAgICBjYWxsYmFjazogKHByb3BzOiBJU2NoZW1hVmlydHVhbEZpZWxkQ29tcG9uZW50UHJvcHMpID0+IFJlYWN0LlJlYWN0RWxlbWVudFxuICApID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPFZpcnR1YWxGaWVsZFxuICAgICAgICBwYXRoPXtwYXRofVxuICAgICAgICB2aXNpYmxlPXtjb21wbGllRXhwcmVzc2lvbihcbiAgICAgICAgICBmaWVsZFNjaGVtYS5nZXRFeHRlbmRzVmlzaWJsZSgpLFxuICAgICAgICAgIGV4cHJlc3Npb25TY29wZVxuICAgICAgICApfVxuICAgICAgICBkaXNwbGF5PXtjb21wbGllRXhwcmVzc2lvbihcbiAgICAgICAgICBmaWVsZFNjaGVtYS5nZXRFeHRlbmRzRGlzcGxheSgpLFxuICAgICAgICAgIGV4cHJlc3Npb25TY29wZVxuICAgICAgICApfVxuICAgICAgICBwcm9wcz17Y29tcGxpZUV4cHJlc3Npb24oXG4gICAgICAgICAgZmllbGRTY2hlbWEuZ2V0U2VsZlByb3BzKCksXG4gICAgICAgICAgZXhwcmVzc2lvblNjb3BlLFxuICAgICAgICAgIChrZXk6IHN0cmluZykgPT4ga2V5ID09ICd4LWxpbmthZ2VzJ1xuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICB7KHsgc3RhdGUsIGZvcm0gfSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0YXRlUHJvcHMgPSBnZXRQcm9wc0Zyb21JbnRlcmNlcHRvcihzdGF0ZS5wcm9wcylcbiAgICAgICAgICBjb25zdCBwcm9wczogSVNjaGVtYVZpcnR1YWxGaWVsZENvbXBvbmVudFByb3BzID0ge1xuICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICBwcm9wczogc3RhdGVQcm9wcyxcbiAgICAgICAgICAgIHNjaGVtYTogbmV3IFNjaGVtYShmaWVsZFNjaGVtYSkubWVyZ2Uoc3RhdGVQcm9wcyksXG4gICAgICAgICAgICBmb3JtLFxuICAgICAgICAgICAgcmVuZGVyRmllbGQsXG4gICAgICAgICAgICBjaGlsZHJlbjogZmllbGRTY2hlbWEubWFwUHJvcGVydGllcyhcbiAgICAgICAgICAgICAgKHNjaGVtYTogU2NoZW1hLCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICA8U2NoZW1hRmllbGRcbiAgICAgICAgICAgICAgICAgICAgc2NoZW1hPXtzY2hlbWF9XG4gICAgICAgICAgICAgICAgICAgIGtleT17a2V5fVxuICAgICAgICAgICAgICAgICAgICBwYXRoPXtwYXRoLmNvbmNhdChrZXkpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFNjaGVtYUZpZWxkUHJvcHNDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtwcm9wc30+XG4gICAgICAgICAgICAgIHtjYWxsYmFjayhwcm9wcyl9XG4gICAgICAgICAgICA8L1NjaGVtYUZpZWxkUHJvcHNDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgICAgIClcbiAgICAgICAgfX1cbiAgICAgIDwvVmlydHVhbEZpZWxkPlxuICAgIClcbiAgfVxuXG4gIGNvbnN0IHJlbmRlclByb3BlcnRpZXMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGZpZWxkU2NoZW1hLm1hcFByb3BlcnRpZXMoKHNjaGVtYTogU2NoZW1hLCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3QgY2hpbGRQYXRoID0gcGF0aC5jb25jYXQoa2V5KVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFNjaGVtYUZpZWxkXG4gICAgICAgICAgc2NoZW1hPXtzY2hlbWF9XG4gICAgICAgICAga2V5PXtjaGlsZFBhdGgudG9TdHJpbmcoKX1cbiAgICAgICAgICBwYXRoPXtjaGlsZFBhdGh9XG4gICAgICAgIC8+XG4gICAgICApXG4gICAgfSlcbiAgfVxuXG4gIGlmIChmaWVsZFNjaGVtYS5pc09iamVjdCgpICYmICFzY2hlbWFDb21wb25lbnQpIHtcbiAgICBpZiAocGF0aC5sZW5ndGggPT0gMCB8fCBwcm9wcy5vbmx5UmVuZGVyUHJvcGVydGllcykge1xuICAgICAgcmV0dXJuIDxGcmFnbWVudD57cmVuZGVyUHJvcGVydGllcygpfTwvRnJhZ21lbnQ+XG4gICAgfVxuICAgIHJldHVybiByZW5kZXJGaWVsZERlbGVnYXRlKHByb3BzID0+IHtcbiAgICAgIGNvbnN0IHJlbmRlckNvbXBvbmVudCA9ICgpID0+IHtcbiAgICAgICAgaWYgKCFmb3JtUmVnaXN0cnkuZm9ybUl0ZW1Db21wb25lbnQpIHtcbiAgICAgICAgICBsb2cuZXJyb3IoXG4gICAgICAgICAgICBgQ2FuIG5vdCBmb3VuZCBhbnkgY29tcG9uZW50Lkl0cyBrZXkgaXMgJHtFcnJvclRpcFBhdGhTdHJ9LmBcbiAgICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBmb3JtUmVnaXN0cnkuZm9ybUl0ZW1Db21wb25lbnQsXG4gICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgcmVuZGVyUHJvcGVydGllcygpXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGlmIChpc0ZuKHNjaGVtYVJlbmRlcmVyKSkge1xuICAgICAgICByZXR1cm4gc2NoZW1hUmVuZGVyZXIoeyAuLi5wcm9wcywgcmVuZGVyQ29tcG9uZW50IH0pXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVuZGVyQ29tcG9uZW50KClcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIGlmIChpc1N0cihpbml0aWFsQ29tcG9uZW50KSkge1xuICAgICAgaWYgKGZvcm1SZWdpc3RyeS5maWVsZHNbaW5pdGlhbENvbXBvbmVudF0pIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlckZpZWxkRGVsZWdhdGUocHJvcHMgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0YXRlQ29tcG9uZW50ID0gbG93ZXJjYXNlKFxuICAgICAgICAgICAgcHJvcHMuc2NoZW1hLmdldEV4dGVuZHNDb21wb25lbnQoKSB8fCBwcm9wcy5zY2hlbWEudHlwZVxuICAgICAgICAgIClcbiAgICAgICAgICBpZiAoIWlzU3RyKHN0YXRlQ29tcG9uZW50KSkge1xuICAgICAgICAgICAgbG9nLmVycm9yKFxuICAgICAgICAgICAgICBgQ2FuIG5vdCBmb3VuZCBhbnkgZm9ybSBjb21wb25lbnQgPCR7c3RhdGVDb21wb25lbnR9Pi5JdHMga2V5IGlzICR7RXJyb3JUaXBQYXRoU3RyfS5gXG4gICAgICAgICAgICApXG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCByZW5kZXJDb21wb25lbnQgPSAoKTogUmVhY3QuUmVhY3RFbGVtZW50ID0+IHtcbiAgICAgICAgICAgIGlmICghZm9ybVJlZ2lzdHJ5LmZpZWxkc1tzdGF0ZUNvbXBvbmVudF0pIHtcbiAgICAgICAgICAgICAgbG9nLmVycm9yKFxuICAgICAgICAgICAgICAgIGBDYW4gbm90IGZvdW5kIHRoZSBmaWVsZCBjb21wb25lbnQgPCR7c3RhdGVDb21wb25lbnR9Pi5JdHMga2V5IGlzICR7RXJyb3JUaXBQYXRoU3RyfS5gXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBmb3JtUmVnaXN0cnkuZm9ybUl0ZW1Db21wb25lbnQsXG4gICAgICAgICAgICAgIHByb3BzLFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KGZvcm1SZWdpc3RyeS5maWVsZHNbc3RhdGVDb21wb25lbnRdLCBwcm9wcylcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzRm4oc2NoZW1hUmVuZGVyZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hUmVuZGVyZXIoeyAuLi5wcm9wcywgcmVuZGVyQ29tcG9uZW50IH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZW5kZXJDb21wb25lbnQoKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChmb3JtUmVnaXN0cnkudmlydHVhbEZpZWxkc1tpbml0aWFsQ29tcG9uZW50XSkge1xuICAgICAgICByZXR1cm4gcmVuZGVyVmlydHVhbEZpZWxkRGVsZWdhdGUocHJvcHMgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0YXRlQ29tcG9uZW50ID0gbG93ZXJjYXNlKFxuICAgICAgICAgICAgcHJvcHMuc2NoZW1hLmdldEV4dGVuZHNDb21wb25lbnQoKSB8fCBwcm9wcy5zY2hlbWEudHlwZVxuICAgICAgICAgIClcbiAgICAgICAgICBpZiAoIWlzU3RyKHN0YXRlQ29tcG9uZW50KSkge1xuICAgICAgICAgICAgbG9nLmVycm9yKFxuICAgICAgICAgICAgICBgQ2FuIG5vdCBmb3VuZCBhbnkgdmlydHVhbCBmb3JtIGNvbXBvbmVudCA8JHtzdGF0ZUNvbXBvbmVudH0+Lkl0cyBrZXkgaXMgJHtFcnJvclRpcFBhdGhTdHJ9LmBcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHJlbmRlckNvbXBvbmVudCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghZm9ybVJlZ2lzdHJ5LnZpcnR1YWxGaWVsZHNbc3RhdGVDb21wb25lbnRdKSB7XG4gICAgICAgICAgICAgIGxvZy5lcnJvcihcbiAgICAgICAgICAgICAgICBgQ2FuIG5vdCBmb3VuZCB0aGUgdmlydHVhbCBmaWVsZCBjb21wb25lbnQgPCR7c3RhdGVDb21wb25lbnR9Pi5JdHMga2V5IGlzICR7RXJyb3JUaXBQYXRoU3RyfS5gXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBmb3JtUmVnaXN0cnkudmlydHVhbEZpZWxkc1tzdGF0ZUNvbXBvbmVudF0sXG4gICAgICAgICAgICAgIHByb3BzXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzRm4oc2NoZW1hUmVuZGVyZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hUmVuZGVyZXIoeyAuLi5wcm9wcywgcmVuZGVyQ29tcG9uZW50IH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZW5kZXJDb21wb25lbnQoKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmVycm9yKFxuICAgICAgICAgIGBDYW4gbm90IGZvdW5kIHRoZSBmaWVsZCBjb21wb25lbnQgPCR7aW5pdGlhbENvbXBvbmVudH0+Lkl0cyBrZXkgaXMgJHtFcnJvclRpcFBhdGhTdHJ9LmBcbiAgICAgICAgKVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2cuZXJyb3IoXG4gICAgICAgIGBDYW4gbm90IGZvdW5kIHRoZSBmaWVsZCBjb21wb25lbnQgPCR7aW5pdGlhbENvbXBvbmVudH0+Lkl0cyBrZXkgaXMgJHtFcnJvclRpcFBhdGhTdHJ9LmBcbiAgICAgIClcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBJU2NoZW1hRm9ybVByb3BzIH0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgeyBGb3JtIH0gZnJvbSAnQGZvcm1pbHkvcmVhY3QnXG5pbXBvcnQgeyBTY2hlbWFGaWVsZCB9IGZyb20gJy4vU2NoZW1hRmllbGQnXG5pbXBvcnQgeyB1c2VTY2hlbWFGb3JtIH0gZnJvbSAnLi4vaG9va3MvdXNlU2NoZW1hRm9ybSdcbmltcG9ydCB7XG4gIEZvcm1TY2hlbWFDb250ZXh0LFxuICBGb3JtQ29tcG9uZW50c0NvbnRleHQsXG4gIEZvcm1FeHByZXNzaW9uU2NvcGVDb250ZXh0XG59IGZyb20gJy4uL3NoYXJlZC9jb250ZXh0J1xuaW1wb3J0IHsgbG9nIH0gZnJvbSAnQGZvcm1pbHkvc2hhcmVkJ1xuXG5leHBvcnQgY29uc3QgU2NoZW1hRm9ybTogUmVhY3QuRkM8SVNjaGVtYUZvcm1Qcm9wcz4gPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHtcbiAgICBmaWVsZHMsXG4gICAgdmlydHVhbEZpZWxkcyxcbiAgICBmb3JtQ29tcG9uZW50LFxuICAgIGNvbXBvbmVudFByb3BzSW50ZXJjZXB0b3IsXG4gICAgZm9ybUl0ZW1Db21wb25lbnQsXG4gICAgZm9ybUNvbXBvbmVudFByb3BzLFxuICAgIHNjaGVtYSxcbiAgICBmb3JtLFxuICAgIGNoaWxkcmVuXG4gIH0gPSB1c2VTY2hlbWFGb3JtKHByb3BzKVxuICByZXR1cm4gKFxuICAgIDxGb3JtQ29tcG9uZW50c0NvbnRleHQuUHJvdmlkZXJcbiAgICAgIHZhbHVlPXt7IGZpZWxkcywgdmlydHVhbEZpZWxkcywgZm9ybUNvbXBvbmVudCwgZm9ybUl0ZW1Db21wb25lbnQsIGNvbXBvbmVudFByb3BzSW50ZXJjZXB0b3IgfX1cbiAgICA+XG4gICAgICA8Rm9ybUV4cHJlc3Npb25TY29wZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3Byb3BzLmV4cHJlc3Npb25TY29wZX0+XG4gICAgICAgIDxGb3JtU2NoZW1hQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17c2NoZW1hfT5cbiAgICAgICAgICA8Rm9ybSBmb3JtPXtmb3JtfT5cbiAgICAgICAgICAgIHtSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBmb3JtQ29tcG9uZW50LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLi4uZm9ybUNvbXBvbmVudFByb3BzLFxuICAgICAgICAgICAgICAgIG9uU3VibWl0OiAoZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoZSAmJiBlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgICAgICAgIGlmIChlICYmIGUuc3RvcFByb3BhZ2F0aW9uKSBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgICAgICAgICBmb3JtLnN1Ym1pdCgpLmNhdGNoKGUgPT4gbG9nLndhcm4oZSkpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvblJlc2V0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBmb3JtLnJlc2V0KHsgdmFsaWRhdGU6IGZhbHNlLCBmb3JjZUNsZWFyOiBmYWxzZSB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgPFNjaGVtYUZpZWxkIHNjaGVtYT17c2NoZW1hfSBwYXRoPXsnJ30gLz4sXG4gICAgICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvRm9ybT5cbiAgICAgICAgPC9Gb3JtU2NoZW1hQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgIDwvRm9ybUV4cHJlc3Npb25TY29wZUNvbnRleHQuUHJvdmlkZXI+XG4gICAgPC9Gb3JtQ29tcG9uZW50c0NvbnRleHQuUHJvdmlkZXI+XG4gIClcbn1cblxuU2NoZW1hRm9ybS5kZWZhdWx0UHJvcHMgPSB7XG4gIHNjaGVtYToge31cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2NoZW1hRm9ybVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IGdsb2JhbFRoaXNQb2x5ZmlsbCB9IGZyb20gJ0Bmb3JtaWx5L3NoYXJlZCdcblxuY29uc3QgZW52ID0ge1xuICBwb3J0YWxET006IG51bGxcbn1cblxuZXhwb3J0IGNvbnN0IHJlbmRlciA9IChlbGVtZW50OiBSZWFjdC5SZWFjdEVsZW1lbnQpID0+IHtcbiAgaWYgKGdsb2JhbFRoaXNQb2x5ZmlsbFsnZG9jdW1lbnQnXSkge1xuICAgIGVudi5wb3J0YWxET00gPVxuICAgICAgZW52LnBvcnRhbERPTSB8fCBnbG9iYWxUaGlzUG9seWZpbGxbJ2RvY3VtZW50J10uY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICByZXR1cm4gY3JlYXRlUG9ydGFsKGVsZW1lbnQsIGVudi5wb3J0YWxET00pXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDx0ZW1wbGF0ZT57ZWxlbWVudH08L3RlbXBsYXRlPlxuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQsIGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHJlZ2lzdGVyVmlydHVhbEJveCB9IGZyb20gJy4uL3NoYXJlZC9yZWdpc3RyeSdcbmltcG9ydCB7IFNjaGVtYUZvcm0gfSBmcm9tICcuL1NjaGVtYUZvcm0nXG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tICcuLi9zaGFyZWQvc2NoZW1hJ1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnLi4vc2hhcmVkL3ZpcnR1YWwtcmVuZGVyJ1xuaW1wb3J0IHtcbiAgSVNjaGVtYUZvcm1Qcm9wcyxcbiAgSU1hcmt1cFNjaGVtYUZpZWxkUHJvcHMsXG4gIElTY2hlbWFWaXJ0dWFsRmllbGRDb21wb25lbnRQcm9wcyxcbiAgSVZpcnR1YWxCb3hQcm9wc1xufSBmcm9tICcuLi90eXBlcydcblxuY29uc3QgZW52ID0ge1xuICBub25hbWVJZDogMFxufVxuXG5leHBvcnQgY29uc3QgTWFya3VwQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8U2NoZW1hPihudWxsKVxuXG5jb25zdCBnZXRSYW5kb21OYW1lID0gKCkgPT4ge1xuICByZXR1cm4gYE5PX05BTUVfRklFTERfJCR7ZW52Lm5vbmFtZUlkKyt9YFxufVxuXG5leHBvcnQgY29uc3QgU2NoZW1hTWFya3VwRmllbGQ6IFJlYWN0LkZDPElNYXJrdXBTY2hlbWFGaWVsZFByb3BzPiA9ICh7XG4gIGNoaWxkcmVuLFxuICAuLi5wcm9wc1xufSkgPT4ge1xuICBjb25zdCBwYXJlbnRTY2hlbWEgPSB1c2VDb250ZXh0KE1hcmt1cENvbnRleHQpXG4gIGlmICghcGFyZW50U2NoZW1hKSByZXR1cm4gPEZyYWdtZW50IC8+XG4gIGlmIChwYXJlbnRTY2hlbWEuaXNPYmplY3QoKSkge1xuICAgIHByb3BzLm5hbWUgPSBwcm9wcy5uYW1lIHx8IGdldFJhbmRvbU5hbWUoKVxuICAgIGNvbnN0IHNjaGVtYSA9IHBhcmVudFNjaGVtYS5zZXRQcm9wZXJ0eShwcm9wcy5uYW1lLCBwcm9wcylcbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnc3RyaW5nJykge1xuICAgICAgc2NoZW1hWyd4LWNvbXBvbmVudC1wcm9wcyddLmNoaWxkcmVuID0gY2hpbGRyZW5cbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxNYXJrdXBDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtzY2hlbWF9PntjaGlsZHJlbn08L01hcmt1cENvbnRleHQuUHJvdmlkZXI+XG4gICAgKVxuICB9IGVsc2UgaWYgKHBhcmVudFNjaGVtYS5pc0FycmF5KCkpIHtcbiAgICBjb25zdCBzY2hlbWEgPSBwYXJlbnRTY2hlbWEuc2V0QXJyYXlJdGVtcyhwcm9wcylcbiAgICByZXR1cm4gKFxuICAgICAgPE1hcmt1cENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3NjaGVtYX0+e2NoaWxkcmVufTwvTWFya3VwQ29udGV4dC5Qcm92aWRlcj5cbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChjaGlsZHJlbiBhcyBSZWFjdC5SZWFjdEVsZW1lbnQpIHx8IDxSZWFjdC5GcmFnbWVudCAvPlxuICB9XG59XG5cblNjaGVtYU1hcmt1cEZpZWxkLmRpc3BsYXlOYW1lID0gJ1NjaGVtYU1hcmt1cEZpZWxkJ1xuXG5leHBvcnQgY29uc3QgU2NoZW1hTWFya3VwRm9ybTogUmVhY3QuRkM8SVNjaGVtYUZvcm1Qcm9wcz4gPSBwcm9wcyA9PiB7XG4gIGxldCBhbHJlYWR5SGFzU2NoZW1hID0gZmFsc2VcbiAgbGV0IGZpbmFsU2NoZW1hOiBTY2hlbWFcbiAgaWYgKHByb3BzLnNjaGVtYSkge1xuICAgIGFscmVhZHlIYXNTY2hlbWEgPSB0cnVlXG4gICAgZmluYWxTY2hlbWEgPSBuZXcgU2NoZW1hKHByb3BzLnNjaGVtYSlcbiAgfSBlbHNlIHtcbiAgICBmaW5hbFNjaGVtYSA9IG5ldyBTY2hlbWEoeyB0eXBlOiAnb2JqZWN0JyB9KVxuICB9XG4gIGVudi5ub25hbWVJZCA9IDBcbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICB7IWFscmVhZHlIYXNTY2hlbWEgJiZcbiAgICAgICAgcmVuZGVyKFxuICAgICAgICAgIDxNYXJrdXBDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtmaW5hbFNjaGVtYX0+XG4gICAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgPC9NYXJrdXBDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgICApfVxuICAgICAgPFNjaGVtYUZvcm0gey4uLnByb3BzfSBzY2hlbWE9e2ZpbmFsU2NoZW1hfSAvPlxuICAgIDwvRnJhZ21lbnQ+XG4gIClcbn1cblxuU2NoZW1hTWFya3VwRm9ybS5kaXNwbGF5TmFtZSA9ICdTY2hlbWFNYXJrdXBGb3JtJ1xuXG5jb25zdCBfX1ZJUlRVQUxfQk9YX18gPSAnX19WSVJUVUFMX0JPWF9fJ1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVmlydHVhbEJveDxUID0ge30+KFxuICBrZXk6IHN0cmluZyxcbiAgY29tcG9uZW50PzogUmVhY3QuSlNYRWxlbWVudENvbnN0cnVjdG9yPGFueT5cbikge1xuICBjb25zdCBmaW5hbENvbXBvbmVudCA9IGNvbXBvbmVudFxuICAgID8gKHsgc2NoZW1hLCBjaGlsZHJlbiB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHByb3BzID0gc2NoZW1hLmdldEV4dGVuZHNDb21wb25lbnRQcm9wcygpXG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwge1xuICAgICAgICAgIGNoaWxkcmVuLFxuICAgICAgICAgIC4uLnByb3BzXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgOiAoKSA9PiA8RnJhZ21lbnQgLz5cbiAgcmVnaXN0ZXJWaXJ0dWFsQm94KGtleSwgZmluYWxDb21wb25lbnQpXG4gIGNvbnN0IFZpcnR1YWxCb3g6IFJlYWN0LkZDPElWaXJ0dWFsQm94UHJvcHM8VD4+ID0gKHtcbiAgICBjaGlsZHJlbixcbiAgICBuYW1lLFxuICAgIHZpc2libGUsXG4gICAgZGlzcGxheSxcbiAgICAuLi5wcm9wc1xuICB9KSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxTY2hlbWFNYXJrdXBGaWVsZFxuICAgICAgICB0eXBlPVwib2JqZWN0XCJcbiAgICAgICAgbmFtZT17bmFtZX1cbiAgICAgICAgdmlzaWJsZT17dmlzaWJsZX1cbiAgICAgICAgZGlzcGxheT17ZGlzcGxheX1cbiAgICAgICAgeC1jb21wb25lbnQ9e2tleX1cbiAgICAgICAgeC1jb21wb25lbnQtcHJvcHM9e3Byb3BzfVxuICAgICAgPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1NjaGVtYU1hcmt1cEZpZWxkPlxuICAgIClcbiAgfVxuICBWaXJ0dWFsQm94W19fVklSVFVBTF9CT1hfX10gPSB7IGtleSwgY29tcG9uZW50OiBmaW5hbENvbXBvbmVudCB9XG4gIHJldHVybiBWaXJ0dWFsQm94XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb250cm9sbGVyQm94PFQgPSB7fT4oXG4gIGtleTogc3RyaW5nLFxuICBjb21wb25lbnQ/OiBSZWFjdC5KU1hFbGVtZW50Q29uc3RydWN0b3I8SVNjaGVtYVZpcnR1YWxGaWVsZENvbXBvbmVudFByb3BzPlxuKSB7XG4gIGNvbnN0IGZpbmFsQ29tcG9uZW50ID0gY29tcG9uZW50ID8gY29tcG9uZW50IDogKCkgPT4gPEZyYWdtZW50IC8+XG4gIHJlZ2lzdGVyVmlydHVhbEJveChrZXksIGZpbmFsQ29tcG9uZW50KVxuICBjb25zdCBWaXJ0dWFsQm94OiBSZWFjdC5GQzxJVmlydHVhbEJveFByb3BzPFQ+PiA9ICh7XG4gICAgY2hpbGRyZW4sXG4gICAgbmFtZSxcbiAgICAuLi5wcm9wc1xuICB9KSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxTY2hlbWFNYXJrdXBGaWVsZFxuICAgICAgICB0eXBlPVwib2JqZWN0XCJcbiAgICAgICAgbmFtZT17bmFtZX1cbiAgICAgICAgeC1jb21wb25lbnQ9e2tleX1cbiAgICAgICAgeC1jb21wb25lbnQtcHJvcHM9e3Byb3BzfVxuICAgICAgPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1NjaGVtYU1hcmt1cEZpZWxkPlxuICAgIClcbiAgfVxuICBWaXJ0dWFsQm94W19fVklSVFVBTF9CT1hfX10gPSB7IGtleSwgY29tcG9uZW50OiBmaW5hbENvbXBvbmVudCB9XG4gIHJldHVybiBWaXJ0dWFsQm94XG59XG5cbmV4cG9ydCBjb25zdCBGb3JtU2xvdDogUmVhY3QuRkM8e1xuICBuYW1lPzogc3RyaW5nXG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3RFbGVtZW50XG59PiA9ICh7IG5hbWUsIGNoaWxkcmVuIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8U2NoZW1hTWFya3VwRmllbGRcbiAgICAgIHR5cGU9XCJvYmplY3RcIlxuICAgICAgbmFtZT17bmFtZX1cbiAgICAgIHgtcmVuZGVyPXsoKSA9PiB7XG4gICAgICAgIHJldHVybiA8RnJhZ21lbnQ+e2NoaWxkcmVufTwvRnJhZ21lbnQ+XG4gICAgICB9fVxuICAgIC8+XG4gIClcbn1cbiIsImltcG9ydCB7XG4gIGNyZWF0ZUFzeW5jU2NoZW1hRm9ybUFjdGlvbnMsXG4gIGNyZWF0ZVNjaGVtYUZvcm1BY3Rpb25zXG59IGZyb20gJy4vc2hhcmVkL2FjdGlvbnMnXG5pbXBvcnQge1xuICBGaWVsZCBhcyBJbnRlcm5hbEZpZWxkLFxuICBGb3JtIGFzIEludGVybmFsRm9ybSxcbiAgRmllbGRMaXN0IGFzIEludGVybmFsRmllbGRMaXN0LFxuICBWaXJ0dWFsRmllbGQgYXMgSW50ZXJuYWxWaXJ0dWFsRmllbGQsXG4gIEZvcm1Qcm92aWRlcixcbiAgRm9ybUNvbnN1bWVyLFxuICBGb3JtU3B5LFxuICBjcmVhdGVFZmZlY3RIb29rLFxuICBzZXRWYWxpZGF0aW9uTGFuZ3VhZ2UsXG4gIHNldFZhbGlkYXRpb25Mb2NhbGUsXG4gIHJlZ2lzdGVyVmFsaWRhdGlvbkZvcm1hdHMsXG4gIHJlZ2lzdGVyVmFsaWRhdGlvbk1URW5naW5lLFxuICByZWdpc3RlclZhbGlkYXRpb25SdWxlcyxcbiAgQmlnRGF0YSxcbiAgRm9ybVBhdGgsXG4gIEZvcm1QYXRoUGF0dGVybixcbiAgRm9ybUVmZmVjdEhvb2tzLFxuICB1c2VGaWVsZCxcbiAgdXNlRmllbGRTdGF0ZSxcbiAgdXNlRm9ybSxcbiAgdXNlRm9ybUVmZmVjdHMsXG4gIHVzZUZvcm1TcHksXG4gIHVzZUZvcm1TdGF0ZSxcbiAgdXNlVmlydHVhbEZpZWxkLFxuICB1c2VGb3JtUXVlcnlcbn0gZnJvbSAnQGZvcm1pbHkvcmVhY3QnXG5pbXBvcnQgeyB1c2VTY2hlbWFGb3JtIH0gZnJvbSAnLi9ob29rcy91c2VTY2hlbWFGb3JtJ1xuaW1wb3J0IHsgdXNlU2NoZW1hUHJvcHMgfSBmcm9tICcuL2hvb2tzL3VzZVNjaGVtYVByb3BzJ1xuZXhwb3J0ICogZnJvbSAnLi9jb21wb25lbnRzL1NjaGVtYUZpZWxkJ1xuZXhwb3J0ICogZnJvbSAnLi9jb21wb25lbnRzL1NjaGVtYUZvcm0nXG5leHBvcnQgKiBmcm9tICcuL2NvbXBvbmVudHMvU2NoZW1hTWFya3VwJ1xuZXhwb3J0ICogZnJvbSAnLi9zaGFyZWQvY29udGV4dCdcbmV4cG9ydCAqIGZyb20gJy4vc2hhcmVkL2Nvbm5lY3QnXG5leHBvcnQgKiBmcm9tICcuL3NoYXJlZC9yZWdpc3RyeSdcbmV4cG9ydCAqIGZyb20gJy4vc2hhcmVkL3NjaGVtYSdcbmV4cG9ydCAqIGZyb20gJy4vc2hhcmVkL2NvbmRpdGlvbidcbmV4cG9ydCAqIGZyb20gJy4vc2hhcmVkL2V4cHJlc3Npb24nXG5leHBvcnQgKiBmcm9tICcuL3NoYXJlZC9saW5rYWdlJ1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcydcbmV4cG9ydCBjb25zdCBjcmVhdGVGb3JtQWN0aW9ucyA9IGNyZWF0ZVNjaGVtYUZvcm1BY3Rpb25zXG5leHBvcnQgY29uc3QgY3JlYXRlQXN5bmNGb3JtQWN0aW9ucyA9IGNyZWF0ZUFzeW5jU2NoZW1hRm9ybUFjdGlvbnNcbmV4cG9ydCB7XG4gIEludGVybmFsRmllbGQsXG4gIEludGVybmFsVmlydHVhbEZpZWxkLFxuICBJbnRlcm5hbEZpZWxkTGlzdCxcbiAgSW50ZXJuYWxGb3JtLFxuICBCaWdEYXRhLFxuICBGb3JtU3B5LFxuICBGb3JtUGF0aCxcbiAgRm9ybVByb3ZpZGVyLFxuICBGb3JtQ29uc3VtZXIsXG4gIEZvcm1QYXRoUGF0dGVybixcbiAgRm9ybUVmZmVjdEhvb2tzLFxuICBjcmVhdGVFZmZlY3RIb29rLFxuICBzZXRWYWxpZGF0aW9uTGFuZ3VhZ2UsXG4gIHNldFZhbGlkYXRpb25Mb2NhbGUsXG4gIHJlZ2lzdGVyVmFsaWRhdGlvbkZvcm1hdHMsXG4gIHJlZ2lzdGVyVmFsaWRhdGlvblJ1bGVzLFxuICByZWdpc3RlclZhbGlkYXRpb25NVEVuZ2luZSxcbiAgdXNlRmllbGQsXG4gIHVzZUZpZWxkU3RhdGUsXG4gIHVzZUZvcm0sXG4gIHVzZVNjaGVtYUZvcm0sXG4gIHVzZVNjaGVtYVByb3BzLFxuICB1c2VGb3JtRWZmZWN0cyxcbiAgdXNlRm9ybVNweSxcbiAgdXNlRm9ybVN0YXRlLFxuICB1c2VWaXJ0dWFsRmllbGQsXG4gIHVzZUZvcm1RdWVyeVxufVxuIl0sIm5hbWVzIjpbImlzRnVuY3Rpb25fMSIsImhvc3RSZXBvcnRFcnJvcl8xIiwiY29uZmlnXzEiLCJyZXF1aXJlJCQwIiwicmVxdWlyZSQkMSIsImlzT2JqZWN0XzEiLCJTdWJzY3JpcHRpb25fMSIsImlzQXJyYXlfMSIsInJlcXVpcmUkJDIiLCJVbnN1YnNjcmlwdGlvbkVycm9yXzEiLCJyZXF1aXJlJCQzIiwiX19leHRlbmRzIiwidGhpcyIsIlN1YnNjcmliZXJfMSIsIk9ic2VydmVyXzEiLCJyeFN1YnNjcmliZXJfMSIsInJlcXVpcmUkJDQiLCJyZXF1aXJlJCQ1IiwiY2FuUmVwb3J0RXJyb3JfMSIsInRvU3Vic2NyaWJlcl8xIiwiaWRlbnRpdHlfMSIsInBpcGVfMSIsIk9ic2VydmFibGVfMSIsIm9ic2VydmFibGVfMSIsIlN1YmplY3RTdWJzY3JpcHRpb25fMSIsIlN1YmplY3RfMSIsIk9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEiLCJyZWZDb3VudF8xIiwiQ29ubmVjdGFibGVPYnNlcnZhYmxlXzEiLCJncm91cEJ5XzEiLCJCZWhhdmlvclN1YmplY3RfMSIsIkFjdGlvbl8xIiwiQXN5bmNBY3Rpb25fMSIsIlF1ZXVlQWN0aW9uXzEiLCJTY2hlZHVsZXJfMSIsIkFzeW5jU2NoZWR1bGVyXzEiLCJRdWV1ZVNjaGVkdWxlcl8xIiwiaXNTY2hlZHVsZXJfMSIsInNjaGVkdWxlQXJyYXlfMSIsImZyb21BcnJheV8xIiwic3Vic2NyaWJlVG9BcnJheV8xIiwib2ZfMSIsInRocm93RXJyb3JfMSIsImRpc3BhdGNoIiwib2JzZXJ2ZU9uXzEiLCJOb3RpZmljYXRpb25fMSIsIlJlcGxheVN1YmplY3RfMSIsInF1ZXVlXzEiLCJBc3luY1N1YmplY3RfMSIsIkFzYXBBY3Rpb25fMSIsIkFzYXBTY2hlZHVsZXJfMSIsIkFuaW1hdGlvbkZyYW1lQWN0aW9uXzEiLCJBbmltYXRpb25GcmFtZVNjaGVkdWxlcl8xIiwiVmlydHVhbFRpbWVTY2hlZHVsZXJfMSIsIm5vb3BfMSIsImlzT2JzZXJ2YWJsZV8xIiwibWFwXzEiLCJiaW5kQ2FsbGJhY2tfMSIsImRpc3BhdGNoTmV4dCIsImJpbmROb2RlQ2FsbGJhY2tfMSIsIk91dGVyU3Vic2NyaWJlcl8xIiwiSW5uZXJTdWJzY3JpYmVyXzEiLCJpdGVyYXRvcl8xIiwiaXNQcm9taXNlXzEiLCJpc0FycmF5TGlrZV8xIiwicmVxdWlyZSQkNiIsInJlcXVpcmUkJDciLCJyZXF1aXJlJCQ4Iiwic3Vic2NyaWJlVG9SZXN1bHRfMSIsInN1YnNjcmliZVRvXzEiLCJjb21iaW5lTGF0ZXN0XzEiLCJjb21iaW5lTGF0ZXN0Iiwic2NoZWR1bGVPYnNlcnZhYmxlXzEiLCJzY2hlZHVsZVByb21pc2VfMSIsInNjaGVkdWxlSXRlcmFibGVfMSIsImlzSW50ZXJvcE9ic2VydmFibGVfMSIsImlzSXRlcmFibGVfMSIsInNjaGVkdWxlZF8xIiwiZnJvbV8xIiwiaW5uZXJTdWJzY3JpYmVfMSIsIm1lcmdlTWFwXzEiLCJtZXJnZUFsbF8xIiwiY29uY2F0QWxsXzEiLCJjb25jYXRfMSIsImNvbmNhdCIsImRlZmVyXzEiLCJlbXB0eV8xIiwiZm9ya0pvaW5fMSIsImZyb21FdmVudF8xIiwiZnJvbUV2ZW50UGF0dGVybl8xIiwiZ2VuZXJhdGVfMSIsImlpZl8xIiwiaXNOdW1lcmljXzEiLCJpbnRlcnZhbF8xIiwiYXN5bmNfMSIsIm1lcmdlXzEiLCJtZXJnZSIsIm9uRXJyb3JSZXN1bWVOZXh0XzEiLCJvbkVycm9yUmVzdW1lTmV4dCIsInBhaXJzXzEiLCJub3RfMSIsImZpbHRlcl8xIiwiZmlsdGVyIiwicGFydGl0aW9uXzEiLCJwYXJ0aXRpb24iLCJyYWNlXzEiLCJyYWNlIiwicmFuZ2VfMSIsInRpbWVyXzEiLCJ1c2luZ18xIiwiemlwXzEiLCJ6aXAiLCJhc2FwXzEiLCJyZXF1aXJlJCQ5IiwicmVxdWlyZSQkMTAiLCJyZXF1aXJlJCQxMSIsInJlcXVpcmUkJDEyIiwicmVxdWlyZSQkMTMiLCJyZXF1aXJlJCQxNCIsInJlcXVpcmUkJDE1IiwicmVxdWlyZSQkMTYiLCJyZXF1aXJlJCQxNyIsInJlcXVpcmUkJDE4IiwicmVxdWlyZSQkMTkiLCJyZXF1aXJlJCQyMCIsIkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXzEiLCJyZXF1aXJlJCQyMSIsIkVtcHR5RXJyb3JfMSIsInJlcXVpcmUkJDIyIiwicmVxdWlyZSQkMjMiLCJyZXF1aXJlJCQyNCIsIlRpbWVvdXRFcnJvcl8xIiwicmVxdWlyZSQkMjUiLCJyZXF1aXJlJCQyNiIsInJlcXVpcmUkJDI3IiwicmVxdWlyZSQkMjgiLCJyZXF1aXJlJCQyOSIsInJlcXVpcmUkJDMwIiwicmVxdWlyZSQkMzEiLCJyZXF1aXJlJCQzMiIsInJlcXVpcmUkJDMzIiwicmVxdWlyZSQkMzQiLCJyZXF1aXJlJCQzNSIsInJlcXVpcmUkJDM2IiwicmVxdWlyZSQkMzciLCJyZXF1aXJlJCQzOCIsInJlcXVpcmUkJDM5IiwicmVxdWlyZSQkNDAiLCJyZXF1aXJlJCQ0MSIsInJlcXVpcmUkJDQyIiwicmVxdWlyZSQkNDMiLCJyZXF1aXJlJCQ0NCIsInJlcXVpcmUkJDQ1IiwicmVxdWlyZSQkNDYiLCJyZXF1aXJlJCQ0NyIsInJlcXVpcmUkJDQ4IiwicmVxdWlyZSQkNDkiLCJyZXF1aXJlJCQ1MCIsInJlcXVpcmUkJDUxIiwicmVxdWlyZSQkNTIiLCJTdWJqZWN0IiwiYXVkaXRfMSIsImF1ZGl0VGltZV8xIiwiYnVmZmVyXzEiLCJidWZmZXJDb3VudF8xIiwiYnVmZmVyVGltZV8xIiwiYnVmZmVyVG9nZ2xlXzEiLCJidWZmZXJXaGVuXzEiLCJjYXRjaEVycm9yXzEiLCJjb21iaW5lQWxsXzEiLCJjb21iaW5lTGF0ZXN0XzIiLCJjb25jYXRfMiIsImNvbmNhdE1hcF8xIiwiY29uY2F0TWFwVG9fMSIsImNvdW50XzEiLCJkZWJvdW5jZV8xIiwiZGVib3VuY2VUaW1lXzEiLCJkZWZhdWx0SWZFbXB0eV8xIiwiaXNEYXRlXzEiLCJkZWxheV8xIiwiZGVsYXlXaGVuXzEiLCJkZW1hdGVyaWFsaXplXzEiLCJkaXN0aW5jdF8xIiwiZGlzdGluY3RVbnRpbENoYW5nZWRfMSIsImRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkXzEiLCJ0aHJvd0lmRW1wdHlfMSIsInRha2VfMSIsImVsZW1lbnRBdF8xIiwiZW5kV2l0aF8xIiwiZXZlcnlfMSIsImV4aGF1c3RfMSIsImV4aGF1c3RNYXBfMSIsImV4cGFuZF8xIiwiZmluYWxpemVfMSIsImZpbmRfMSIsImZpbmRJbmRleF8xIiwiZmlyc3RfMSIsImlnbm9yZUVsZW1lbnRzXzEiLCJpc0VtcHR5XzEiLCJ0YWtlTGFzdF8xIiwibGFzdF8xIiwibWFwVG9fMSIsIm1hdGVyaWFsaXplXzEiLCJzY2FuXzEiLCJyZWR1Y2VfMSIsIm1heF8xIiwibWVyZ2VfMiIsIm1lcmdlTWFwVG9fMSIsIm1lcmdlU2Nhbl8xIiwibWluXzEiLCJtdWx0aWNhc3RfMSIsInBhaXJ3aXNlXzEiLCJwbHVja18xIiwicHVibGlzaF8xIiwicHVibGlzaEJlaGF2aW9yXzEiLCJwdWJsaXNoTGFzdF8xIiwicHVibGlzaFJlcGxheV8xIiwicmFjZV8yIiwicmVwZWF0XzEiLCJyZXBlYXRXaGVuXzEiLCJyZXRyeV8xIiwicmV0cnlXaGVuXzEiLCJzYW1wbGVfMSIsInNhbXBsZVRpbWVfMSIsInNlcXVlbmNlRXF1YWxfMSIsInNoYXJlXzEiLCJzaGFyZVJlcGxheV8xIiwic2luZ2xlXzEiLCJza2lwXzEiLCJza2lwTGFzdF8xIiwic2tpcFVudGlsXzEiLCJza2lwV2hpbGVfMSIsInN0YXJ0V2l0aF8xIiwiU3Vic2NyaWJlT25PYnNlcnZhYmxlXzEiLCJzdWJzY3JpYmVPbl8xIiwic3dpdGNoTWFwXzEiLCJzd2l0Y2hBbGxfMSIsInN3aXRjaE1hcFRvXzEiLCJ0YWtlVW50aWxfMSIsInRha2VXaGlsZV8xIiwidGFwXzEiLCJ0aHJvdHRsZVRpbWVfMSIsInRocm90dGxlXzEiLCJ0aW1lSW50ZXJ2YWxfMSIsInRpbWVvdXRXaXRoXzEiLCJ0aW1lb3V0XzEiLCJ0aW1lc3RhbXBfMSIsInRvQXJyYXlfMSIsIndpbmRvd18xIiwid2luZG93IiwiV2luZG93T3BlcmF0b3IiLCJXaW5kb3dTdWJzY3JpYmVyIiwid2luZG93Q291bnRfMSIsIndpbmRvd1RpbWVfMSIsIndpbmRvd1RvZ2dsZV8xIiwid2luZG93V2hlbl8xIiwid2l0aExhdGVzdEZyb21fMSIsInppcF8yIiwiemlwQWxsXzEiLCJyZXF1aXJlJCQ1MyIsInJlcXVpcmUkJDU0IiwicmVxdWlyZSQkNTUiLCJyZXF1aXJlJCQ1NiIsInJlcXVpcmUkJDU3IiwicmVxdWlyZSQkNTgiLCJyZXF1aXJlJCQ1OSIsInJlcXVpcmUkJDYwIiwicmVxdWlyZSQkNjEiLCJyZXF1aXJlJCQ2MiIsInJlcXVpcmUkJDYzIiwicmVxdWlyZSQkNjQiLCJyZXF1aXJlJCQ2NSIsInJlcXVpcmUkJDY2IiwicmVxdWlyZSQkNjciLCJyZXF1aXJlJCQ2OCIsInJlcXVpcmUkJDY5IiwicmVxdWlyZSQkNzAiLCJyZXF1aXJlJCQ3MSIsInJlcXVpcmUkJDcyIiwicmVxdWlyZSQkNzMiLCJyZXF1aXJlJCQ3NCIsInJlcXVpcmUkJDc1IiwicmVxdWlyZSQkNzYiLCJyZXF1aXJlJCQ3NyIsInJlcXVpcmUkJDc4IiwicmVxdWlyZSQkNzkiLCJyZXF1aXJlJCQ4MCIsInJlcXVpcmUkJDgxIiwicmVxdWlyZSQkODIiLCJyZXF1aXJlJCQ4MyIsInJlcXVpcmUkJDg0IiwicmVxdWlyZSQkODUiLCJyZXF1aXJlJCQ4NiIsInJlcXVpcmUkJDg3IiwicmVxdWlyZSQkODgiLCJyZXF1aXJlJCQ4OSIsInJlcXVpcmUkJDkwIiwicmVxdWlyZSQkOTEiLCJyZXF1aXJlJCQ5MiIsInJlcXVpcmUkJDkzIiwicmVxdWlyZSQkOTQiLCJyZXF1aXJlJCQ5NSIsInJlcXVpcmUkJDk2IiwicmVxdWlyZSQkOTciLCJyZXF1aXJlJCQ5OCIsInJlcXVpcmUkJDk5IiwicmVxdWlyZSQkMTAwIiwicmVxdWlyZSQkMTAxIiwicmVxdWlyZSQkMTAyIiwiYWN0aW9uc1N5bWJvbCIsIm1lcmdlQWN0aW9ucyIsImNyZWF0ZUZvcm1BY3Rpb25zIiwiY3JlYXRlQWN0aW9ucyIsImNyZWF0ZUFzeW5jRm9ybUFjdGlvbnMiLCJjcmVhdGVBc3luY0FjdGlvbnMiLCJfX2RlZlByb3AiLCJfX2dldE93blByb3BTeW1ib2xzIiwiX19oYXNPd25Qcm9wIiwiX19wcm9wSXNFbnVtIiwiX19kZWZOb3JtYWxQcm9wIiwiX19zcHJlYWRWYWx1ZXMiLCJfX29ialJlc3QiLCJpc0VtcHR5IiwibWFwIiwiTEFOR1VBR0VTIiwidXBwZXJDYXNlIiwibG93ZXJDYXNlIiwibm9DYXNlIiwiY2FtZWxDYXNlIiwidXBwZXJDYXNlRmlyc3QiLCJpc0ZuIiwicmVkdWNlIiwicmVhY3RJc01vZHVsZSIsIl9fZGVmUHJvcHMiLCJfX2dldE93blByb3BEZXNjcyIsIl9fc3ByZWFkUHJvcHMiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInVzZUV2YSIsImVudiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FDQSxNQUFNLENBQUMsY0FBYyxDQUFDQSxZQUFPLEVB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Q0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztHQUMxRSxRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDOUQsUUFBUSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0dBQ3JDLFFBQVEsSUFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztHQUNsQyxRQUFRLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7R0FDdEMsWUFBWSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMzQyxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFVBQVUsR0FBRyxFQUFFO0dBQzdELFFBQVEsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztHQUNyQyxRQUFRLE9BQU8sUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7R0FDcEMsWUFBWSxJQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7R0FDN0MsWUFBWSxTQUFTLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQ2pELFlBQVksU0FBUyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7R0FDcEMsWUFBWSxTQUFTLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztHQUMxQyxTQUFTO0dBQ1QsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztHQUM3QixRQUFRLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7R0FDaEQsS0FBSyxDQUFDO0dBQ04sSUFBSSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFlBQVk7R0FDN0QsUUFBUSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0dBQ3JDLFFBQVEsT0FBTyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtHQUNwQyxZQUFZLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztHQUM3QyxZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUNwRCxZQUFZLFNBQVMsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDakQsWUFBWSxTQUFTLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztHQUNwQyxZQUFZLFNBQVMsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0dBQzFDLFNBQVM7R0FDVCxRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0dBQzdCLFFBQVEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQzlDLEtBQUssQ0FBQztHQUNOLElBQUksc0JBQXNCLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxVQUFVLFVBQVUsRUFBRSxVQUFVLEVBQUU7R0FDcEYsUUFBUSxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0dBQ2hGLEtBQUssQ0FBQztHQUNOLElBQUksc0JBQXNCLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxVQUFVLFFBQVEsRUFBRTtHQUMxRSxRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0dBQzNDLEtBQUssQ0FBQztHQUNOLElBQUksc0JBQXNCLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxVQUFVLEtBQUssRUFBRTtHQUNuRSxRQUFRLElBQUk7R0FDWixZQUFZLElBQUksZUFBZSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7R0FDdkQsWUFBWSxJQUFJLGVBQWUsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztHQUNwRSxZQUFZLElBQUksZUFBZSxFQUFFO0dBQ2pDLGdCQUFnQixJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0dBQ25ELGFBQWE7R0FDYixTQUFTO0dBQ1QsUUFBUSxPQUFPLEdBQUcsRUFBRTtHQUNwQixZQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDN0IsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksc0JBQXNCLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxVQUFVLE9BQU8sRUFBRTtHQUN0RSxRQUFRLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7R0FDckMsUUFBUSxJQUFJLFFBQVEsSUFBSSxPQUFPLEVBQUU7R0FDakMsWUFBWSxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLFlBQVksR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDO0dBQzdFLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDMUMsWUFBWSxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDMUQsWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0dBQ3RDLFlBQVksWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQ3ZDLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsVUFBVSxlQUFlLEVBQUU7R0FDL0UsUUFBUSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0dBQ3JDLFFBQVEsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0dBQ3hCLFFBQVEsSUFBSSxZQUFZLEdBQUcsSUFBSTlELGdCQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7R0FDN0QsUUFBUSxJQUFJLE9BQU8sR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxDQUFDO0dBQ3JFLFFBQVEsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztHQUMvQixRQUFRLElBQUksaUJBQWlCLEdBQUc4RCxxQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0dBQ3RHLFFBQVEsSUFBSSxDQUFDLGlCQUFpQixJQUFJLGlCQUFpQixDQUFDLE1BQU0sRUFBRTtHQUM1RCxZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7R0FDdEMsU0FBUztHQUNULGFBQWE7R0FDYixZQUFZLGlCQUFpQixDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7R0FDaEQsWUFBWSxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7R0FDeEMsWUFBWSxZQUFZLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7R0FDaEQsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxzQkFBc0IsQ0FBQztHQUNsQyxDQUFDLENBQUNSLG1CQUFpQixDQUFDLGVBQWUsQ0FBQyxDQUFDOzs7O0dDckhyQyxJQUFJakQsV0FBUyxHQUFHLENBQUNDLGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDMkosWUFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUlqSyxnQkFBYyxHQUFHSCxjQUEwQixDQUFDO0dBQ2hELElBQUk0RSxrQkFBZ0IsR0FBRzNFLGdCQUE0QixDQUFDO0dBQ3BELFNBQVMsVUFBVSxDQUFDLGVBQWUsRUFBRTtHQUNyQyxJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUU7R0FDN0IsUUFBUSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0dBQ3BFLEtBQUssQ0FBQztHQUNOLENBQUM7MEJBQ2lCLEdBQUcsV0FBVztHQUNoQyxJQUFJLGtCQUFrQixJQUFJLFlBQVk7R0FDdEMsSUFBSSxTQUFTLGtCQUFrQixDQUFDLGVBQWUsRUFBRTtHQUNqRCxRQUFRLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO0dBQy9DLEtBQUs7R0FDTCxJQUFJLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxVQUFVLEVBQUUsTUFBTSxFQUFFO0dBQ3RFLFFBQVEsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksb0JBQW9CLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0dBQzVGLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxrQkFBa0IsQ0FBQztHQUM5QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ0wsSUFBSSxvQkFBb0IsSUFBSSxVQUFVLE1BQU0sRUFBRTtHQUM5QyxJQUFJTyxXQUFTLENBQUMsb0JBQW9CLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDNUMsSUFBSSxTQUFTLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxlQUFlLEVBQUU7R0FDaEUsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztHQUNoRCxRQUFRLEtBQUssQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0dBQ2xDLFFBQVEsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO0dBQzNCLFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUM1RCxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ2hDLEtBQUssQ0FBQztHQUNOLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0dBQzNELFFBQVEsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztHQUNqQyxRQUFRLElBQUksTUFBTSxFQUFFO0dBQ3BCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDMUMsU0FBUztHQUNULFFBQVEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQzlDLEtBQUssQ0FBQztHQUNOLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxZQUFZO0dBQzlELFFBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7R0FDaEMsUUFBUSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztHQUNqQyxLQUFLLENBQUM7R0FDTixJQUFJLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsWUFBWTtHQUM1RCxRQUFRLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztHQUMxQixLQUFLLENBQUM7R0FDTixJQUFJLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsWUFBWTtHQUNoRSxRQUFRLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtHQUM5QixZQUFZLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUM1QixTQUFTO0dBQ1QsYUFBYTtHQUNiLFlBQVksSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0dBQzlCLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsWUFBWTtHQUM1RCxRQUFRLElBQUksbUJBQW1CLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDO0dBQzNELFFBQVEsSUFBSSxtQkFBbUIsRUFBRTtHQUNqQyxZQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztHQUM3QyxZQUFZLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQzlDLFNBQVM7R0FDVCxRQUFRLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7R0FDakMsUUFBUSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7R0FDekIsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUMxQyxTQUFTO0dBQ1QsUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztHQUN6QixRQUFRLElBQUksZUFBZSxDQUFDO0dBQzVCLFFBQVEsSUFBSTtHQUNaLFlBQVksSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztHQUN2RCxZQUFZLGVBQWUsR0FBRyxlQUFlLEVBQUUsQ0FBQztHQUNoRCxTQUFTO0dBQ1QsUUFBUSxPQUFPLEdBQUcsRUFBRTtHQUNwQixZQUFZLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUNuQyxTQUFTO0dBQ1QsUUFBUSxtQkFBbUIsR0FBRyxJQUFJTCxnQkFBYyxDQUFDLFlBQVksRUFBRSxDQUFDO0dBQ2hFLFFBQVEsSUFBSSxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDO0dBQ3ZELFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0dBQ3RDLFFBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7R0FDaEMsUUFBUSxtQkFBbUIsQ0FBQyxHQUFHLENBQUN5RSxrQkFBZ0IsQ0FBQyxjQUFjLENBQUMsZUFBZSxFQUFFLElBQUlBLGtCQUFnQixDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNwSSxRQUFRLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0dBQ2pDLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxvQkFBb0IsQ0FBQztHQUNoQyxDQUFDLENBQUNBLGtCQUFnQixDQUFDLHFCQUFxQixDQUFDLENBQUM7Ozs7R0M1RjFDLElBQUlwRSxXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUM0SixZQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSXpGLGtCQUFnQixHQUFHNUUsZ0JBQTRCLENBQUM7R0FDcEQsU0FBUyxVQUFVLENBQUMsUUFBUSxFQUFFO0dBQzlCLElBQUksT0FBTyxTQUFTLDBCQUEwQixDQUFDLE1BQU0sRUFBRTtHQUN2RCxRQUFRLElBQUksUUFBUSxHQUFHLElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQ25ELFFBQVEsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztHQUMzQyxRQUFRLFFBQVEsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLEVBQUU7R0FDMUMsS0FBSyxDQUFDO0dBQ04sQ0FBQzswQkFDaUIsR0FBRyxXQUFXO0dBQ2hDLElBQUksYUFBYSxJQUFJLFlBQVk7R0FDakMsSUFBSSxTQUFTLGFBQWEsQ0FBQyxRQUFRLEVBQUU7R0FDckMsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztHQUNqQyxLQUFLO0dBQ0wsSUFBSSxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDakUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxlQUFlLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGFBQWEsQ0FBQztHQUN6QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ0wsSUFBSSxlQUFlLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDekMsSUFBSVEsV0FBUyxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUN2QyxJQUFJLFNBQVMsZUFBZSxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO0dBQzVELFFBQVEsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLElBQUksSUFBSSxDQUFDO0dBQzNELFFBQVEsS0FBSyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7R0FDbEMsUUFBUSxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztHQUM5QixRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLGVBQWUsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsR0FBRyxFQUFFO0dBQ3JELFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7R0FDN0IsWUFBWSxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQztHQUNoQyxZQUFZLElBQUk7R0FDaEIsZ0JBQWdCLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDekQsYUFBYTtHQUNiLFlBQVksT0FBTyxJQUFJLEVBQUU7R0FDekIsZ0JBQWdCLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7R0FDeEQsZ0JBQWdCLE9BQU87R0FDdkIsYUFBYTtHQUNiLFlBQVksSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7R0FDMUMsWUFBWSxJQUFJLGVBQWUsR0FBRyxJQUFJb0Usa0JBQWdCLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDbkYsWUFBWSxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0dBQ3RDLFlBQVksSUFBSSxpQkFBaUIsR0FBR0Esa0JBQWdCLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQztHQUM3RixZQUFZLElBQUksaUJBQWlCLEtBQUssZUFBZSxFQUFFO0dBQ3ZELGdCQUFnQixJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7R0FDNUMsYUFBYTtHQUNiLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sZUFBZSxDQUFDO0dBQzNCLENBQUMsQ0FBQ0Esa0JBQWdCLENBQUMscUJBQXFCLENBQUMsQ0FBQzs7OztHQzVEMUMsTUFBTSxDQUFDLGNBQWMsQ0FBQzBGLFlBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJbkcsaUJBQWUsR0FBR25FLGVBQXNDLENBQUM7R0FDN0QsU0FBUyxVQUFVLENBQUMsT0FBTyxFQUFFO0dBQzdCLElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRSxFQUFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJbUUsaUJBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN6RyxDQUFDOzBCQUNpQixHQUFHOzs7O0dDTHJCLE1BQU0sQ0FBQyxjQUFjLENBQUNvRyxlQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSW5LLFdBQVMsR0FBR0osT0FBMEIsQ0FBQztHQUMzQyxJQUFJbUUsaUJBQWUsR0FBR2xFLGVBQXNDLENBQUM7R0FDN0QsSUFBSTBFLFFBQU0sR0FBR3RFLE1BQTZCLENBQUM7R0FFM0MsU0FBUyxhQUFhLEdBQUc7R0FDekIsSUFBSSxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUM7R0FDekIsSUFBSSxLQUFLLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRTtHQUNsRCxRQUFRLFdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDeEMsS0FBSztHQUNMLElBQUksSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0dBQ3ZCLElBQUksSUFBSSxPQUFPLFdBQVcsQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLFVBQVUsRUFBRTtHQUNuRSxRQUFRLE9BQU8sR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7R0FDcEMsS0FBSztHQUNMLElBQUksSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSUQsV0FBUyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtHQUN2RSxRQUFRLFdBQVcsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7R0FDN0MsS0FBSztHQUNMLElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRSxFQUFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUN1RSxRQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSVIsaUJBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN6SixDQUFDO2dDQUNvQixHQUFHOzs7O0dDbkJ4QixNQUFNLENBQUMsY0FBYyxDQUFDcUcsUUFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUl4RixVQUFRLEdBQUdoRixRQUErQixDQUFDO0dBQy9DLFNBQVMsTUFBTSxHQUFHO0dBQ2xCLElBQUksSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFDO0dBQ3pCLElBQUksS0FBSyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUU7R0FDbEQsUUFBUSxXQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ3hDLEtBQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDZ0YsVUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2SCxDQUFDO2tCQUNhLEdBQUc7Ozs7R0NUakIsTUFBTSxDQUFDLGNBQWMsQ0FBQ3lGLFdBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJNUYsWUFBVSxHQUFHN0UsVUFBcUIsQ0FBQztHQUN2QyxTQUFTLFNBQVMsQ0FBQyxPQUFPLEVBQUUsY0FBYyxFQUFFO0dBQzVDLElBQUksT0FBTzZFLFlBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUMzRCxDQUFDO3dCQUNnQixHQUFHOzs7O0dDTHBCLE1BQU0sQ0FBQyxjQUFjLENBQUM2RixhQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSUQsYUFBVyxHQUFHekssV0FBc0IsQ0FBQztHQUN6QyxTQUFTLFdBQVcsQ0FBQyxlQUFlLEVBQUUsY0FBYyxFQUFFO0dBQ3RELElBQUksT0FBT3lLLGFBQVcsQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLE9BQU8sZUFBZSxDQUFDLEVBQUUsRUFBRSxjQUFjLENBQUMsQ0FBQztHQUMxRixDQUFDOzRCQUNrQixHQUFHOzs7O0dDTHRCLElBQUlqSyxXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUNrSyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSWpLLGNBQVksR0FBR1YsWUFBd0IsQ0FBQztHQUM1QyxTQUFTLEtBQUssQ0FBQyxTQUFTLEVBQUU7R0FDMUIsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksYUFBYSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUMzRixDQUFDO2dCQUNZLEdBQUcsTUFBTTtHQUN0QixJQUFJLGFBQWEsSUFBSSxZQUFZO0dBQ2pDLElBQUksU0FBUyxhQUFhLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRTtHQUM5QyxRQUFRLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0dBQ25DLFFBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7R0FDN0IsS0FBSztHQUNMLElBQUksYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxVQUFVLEVBQUUsTUFBTSxFQUFFO0dBQ2pFLFFBQVEsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksZUFBZSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0dBQzlGLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxhQUFhLENBQUM7R0FDekIsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUksZUFBZSxJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQ3pDLElBQUlRLFdBQVMsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDdkMsSUFBSSxTQUFTLGVBQWUsQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRTtHQUM3RCxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0dBQ3BDLFFBQVEsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7R0FDOUIsUUFBUSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztHQUN4QixRQUFRLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0dBQ3hCLFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUksZUFBZSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDdkQsUUFBUSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7R0FDNUIsWUFBWSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ3RDLFNBQVM7R0FDVCxhQUFhO0dBQ2IsWUFBWSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7R0FDekIsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksZUFBZSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDL0QsUUFBUSxJQUFJLE1BQU0sQ0FBQztHQUNuQixRQUFRLElBQUk7R0FDWixZQUFZLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQ3RFLFNBQVM7R0FDVCxRQUFRLE9BQU8sR0FBRyxFQUFFO0dBQ3BCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDeEMsWUFBWSxPQUFPO0dBQ25CLFNBQVM7R0FDVCxRQUFRLElBQUksTUFBTSxFQUFFO0dBQ3BCLFlBQVksSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0dBQ3pCLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLGVBQWUsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFlBQVk7R0FDdEQsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDMUMsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQ3BDLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxlQUFlLENBQUM7R0FDM0IsQ0FBQyxDQUFDRSxjQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7R0NqRTNCLElBQUlGLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQ21LLFVBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJaEcsa0JBQWdCLEdBQUc1RSxnQkFBNEIsQ0FBQztHQUNwRCxTQUFTLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRTtHQUNwQyxJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQzdGLENBQUM7c0JBQ2UsR0FBRyxTQUFTO0dBQzVCLElBQUksZ0JBQWdCLElBQUksWUFBWTtHQUNwQyxJQUFJLFNBQVMsZ0JBQWdCLENBQUMsZ0JBQWdCLEVBQUU7R0FDaEQsUUFBUSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7R0FDakQsS0FBSztHQUNMLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDcEUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztHQUMzRixLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sZ0JBQWdCLENBQUM7R0FDNUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUksa0JBQWtCLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDNUMsSUFBSVEsV0FBUyxDQUFDLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQzFDLElBQUksU0FBUyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUU7R0FDL0QsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7R0FDbEQsUUFBUSxLQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztHQUMvQixRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDMUQsUUFBUSxJQUFJO0dBQ1osWUFBWSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztHQUNqRSxZQUFZLElBQUksTUFBTSxFQUFFO0dBQ3hCLGdCQUFnQixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztHQUM3QyxhQUFhO0dBQ2IsU0FBUztHQUNULFFBQVEsT0FBTyxHQUFHLEVBQUU7R0FDcEIsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUN4QyxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFlBQVk7R0FDekQsUUFBUSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7R0FDekIsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQ3BDLEtBQUssQ0FBQztHQUNOLElBQUksa0JBQWtCLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxVQUFVLEtBQUssRUFBRSxRQUFRLEVBQUU7R0FDdkUsUUFBUSxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUM7R0FDckQsUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztHQUMzQixRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0dBQzdCLFFBQVEsSUFBSSxZQUFZLEVBQUU7R0FDMUIsWUFBWSxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDdkMsWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0dBQ3RDLFNBQVM7R0FDVCxRQUFRLFlBQVksR0FBR29FLGtCQUFnQixDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsSUFBSUEsa0JBQWdCLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztHQUNuSCxRQUFRLElBQUksWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRTtHQUNsRCxZQUFZLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLFlBQVksQ0FBQyxDQUFDO0dBQy9ELFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsWUFBWTtHQUMxRCxRQUFRLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztHQUN6QixLQUFLLENBQUM7R0FDTixJQUFJLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsWUFBWTtHQUM5RCxRQUFRLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztHQUN6QixLQUFLLENBQUM7R0FDTixJQUFJLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBWTtHQUN6RCxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtHQUMzQixZQUFZLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7R0FDbkMsWUFBWSxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUM7R0FDekQsWUFBWSxJQUFJLFlBQVksRUFBRTtHQUM5QixnQkFBZ0IsSUFBSSxDQUFDLG9CQUFvQixHQUFHLFNBQVMsQ0FBQztHQUN0RCxnQkFBZ0IsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQzNDLGdCQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0dBQzFDLGFBQWE7R0FDYixZQUFZLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDO0dBQ25DLFlBQVksSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7R0FDbEMsWUFBWSxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQ3JELFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sa0JBQWtCLENBQUM7R0FDOUIsQ0FBQyxDQUFDQSxrQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDOzs7O0dDckYxQyxJQUFJcEUsV0FBUyxHQUFHLENBQUNDLGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDb0ssY0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUluSyxjQUFZLEdBQUdWLFlBQXdCLENBQUM7R0FDNUMsSUFBSTJGLFNBQU8sR0FBRzFGLEtBQTZCLENBQUM7R0FDNUMsU0FBUyxZQUFZLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRTtHQUMxQyxJQUFJLElBQUksU0FBUyxLQUFLLEtBQUssQ0FBQyxFQUFFLEVBQUUsU0FBUyxHQUFHMEYsU0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0dBQzVELElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRSxFQUFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUNuRyxDQUFDOzhCQUNtQixHQUFHLGFBQWE7R0FDcEMsSUFBSSxvQkFBb0IsSUFBSSxZQUFZO0dBQ3hDLElBQUksU0FBUyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFO0dBQ3RELFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7R0FDL0IsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztHQUNuQyxLQUFLO0dBQ0wsSUFBSSxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUN4RSxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLHNCQUFzQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0dBQ3RHLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxvQkFBb0IsQ0FBQztHQUNoQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ0wsSUFBSSxzQkFBc0IsSUFBSSxVQUFVLE1BQU0sRUFBRTtHQUNoRCxJQUFJbkYsV0FBUyxDQUFDLHNCQUFzQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQzlDLElBQUksU0FBUyxzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRTtHQUNyRSxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0dBQ2hDLFFBQVEsS0FBSyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7R0FDcEMsUUFBUSxLQUFLLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDO0dBQzNDLFFBQVEsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7R0FDL0IsUUFBUSxLQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztHQUMvQixRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDOUQsUUFBUSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7R0FDN0IsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztHQUMvQixRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0dBQzdCLFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMrQyxjQUFZLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0dBQ3pHLEtBQUssQ0FBQztHQUNOLElBQUksc0JBQXNCLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0dBQzdELFFBQVEsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0dBQzdCLFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUNwQyxLQUFLLENBQUM7R0FDTixJQUFJLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsWUFBWTtHQUNqRSxRQUFRLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztHQUM3QixRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtHQUMzQixZQUFZLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7R0FDM0MsWUFBWSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztHQUNsQyxZQUFZLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0dBQ2xDLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7R0FDN0MsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksc0JBQXNCLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxZQUFZO0dBQ2pFLFFBQVEsSUFBSSxxQkFBcUIsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUM7R0FDL0QsUUFBUSxJQUFJLHFCQUFxQixLQUFLLElBQUksRUFBRTtHQUM1QyxZQUFZLElBQUksQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztHQUMvQyxZQUFZLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQ2hELFlBQVksSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQztHQUM5QyxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLHNCQUFzQixDQUFDO0dBQ2xDLENBQUMsQ0FBQzdDLGNBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFNBQVM2QyxjQUFZLENBQUMsVUFBVSxFQUFFO0dBQ2xDLElBQUksVUFBVSxDQUFDLGFBQWEsRUFBRSxDQUFDO0dBQy9COzs7O0dDekVBLElBQUkvQyxXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUNxSyxnQkFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUlwSyxjQUFZLEdBQUdWLFlBQXdCLENBQUM7R0FDNUMsU0FBUyxjQUFjLENBQUMsWUFBWSxFQUFFO0dBQ3RDLElBQUksSUFBSSxZQUFZLEtBQUssS0FBSyxDQUFDLEVBQUUsRUFBRSxZQUFZLEdBQUcsSUFBSSxDQUFDLEVBQUU7R0FDekQsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksc0JBQXNCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDL0YsQ0FBQztrQ0FDcUIsR0FBRyxlQUFlO0dBQ3hDLElBQUksc0JBQXNCLElBQUksWUFBWTtHQUMxQyxJQUFJLFNBQVMsc0JBQXNCLENBQUMsWUFBWSxFQUFFO0dBQ2xELFFBQVEsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7R0FDekMsS0FBSztHQUNMLElBQUksc0JBQXNCLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDMUUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSx3QkFBd0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLHNCQUFzQixDQUFDO0dBQ2xDLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLHdCQUF3QixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQ2xELElBQUlRLFdBQVMsQ0FBQyx3QkFBd0IsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUNoRCxJQUFJLFNBQVMsd0JBQXdCLENBQUMsV0FBVyxFQUFFLFlBQVksRUFBRTtHQUNqRSxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0dBQzFDLFFBQVEsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7R0FDN0IsUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSx3QkFBd0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQ2hFLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7R0FDN0IsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUNyQyxLQUFLLENBQUM7R0FDTixJQUFJLHdCQUF3QixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBWTtHQUMvRCxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtHQUMxQixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztHQUNyRCxTQUFTO0dBQ1QsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQ3BDLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyx3QkFBd0IsQ0FBQztHQUNwQyxDQUFDLENBQUNFLGNBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQzs7Ozs7O0dDaEQzQixNQUFNLENBQUMsY0FBYyxDQUFDcUssUUFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELFNBQVMsTUFBTSxDQUFDLEtBQUssRUFBRTtHQUN2QixJQUFJLE9BQU8sS0FBSyxZQUFZLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ25ELENBQUM7a0JBQ2EsR0FBRzs7R0NKakIsSUFBSXZLLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQ3VLLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJckYsU0FBTyxHQUFHM0YsS0FBNkIsQ0FBQztHQUM1QyxJQUFJK0ssVUFBUSxHQUFHOUssUUFBeUIsQ0FBQztHQUN6QyxJQUFJUyxjQUFZLEdBQUdMLFlBQXdCLENBQUM7R0FDNUMsSUFBSXFDLGdCQUFjLEdBQUduQyxZQUEwQixDQUFDO0dBQ2hELFNBQVMsS0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7R0FDakMsSUFBSSxJQUFJLFNBQVMsS0FBSyxLQUFLLENBQUMsRUFBRSxFQUFFLFNBQVMsR0FBR29GLFNBQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtHQUM1RCxJQUFJLElBQUksYUFBYSxHQUFHb0YsVUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMvQyxJQUFJLElBQUksUUFBUSxHQUFHLGFBQWEsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUNoRixJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQzdGLENBQUM7Z0JBQ1ksR0FBRyxNQUFNO0dBQ3RCLElBQUksYUFBYSxJQUFJLFlBQVk7R0FDakMsSUFBSSxTQUFTLGFBQWEsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO0dBQzdDLFFBQVEsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7R0FDM0IsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztHQUNuQyxLQUFLO0dBQ0wsSUFBSSxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDakUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxlQUFlLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGFBQWEsQ0FBQztHQUN6QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ0wsSUFBSSxlQUFlLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDekMsSUFBSXZLLFdBQVMsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDdkMsSUFBSSxTQUFTLGVBQWUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtHQUM1RCxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0dBQzVCLFFBQVEsS0FBSyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7R0FDcEMsUUFBUSxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztHQUN6QixRQUFRLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0dBQzdCLFFBQVEsS0FBSyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7R0FDOUIsUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSxlQUFlLENBQUMsUUFBUSxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQ2hELFFBQVEsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztHQUNsQyxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7R0FDakMsUUFBUSxJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO0dBQ3hDLFFBQVEsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztHQUM1QyxRQUFRLE9BQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUU7R0FDM0UsWUFBWSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztHQUM1RCxTQUFTO0dBQ1QsUUFBUSxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0dBQzlCLFlBQVksSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztHQUN2RSxZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0dBQzFDLFNBQVM7R0FDVCxhQUFhO0dBQ2IsWUFBWSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDL0IsWUFBWSxNQUFNLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztHQUNsQyxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxlQUFlLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFVLFNBQVMsRUFBRTtHQUMvRCxRQUFRLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0dBQzNCLFFBQVEsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztHQUMzQyxRQUFRLFdBQVcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUU7R0FDakYsWUFBWSxNQUFNLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxTQUFTO0dBQzdFLFNBQVMsQ0FBQyxDQUFDLENBQUM7R0FDWixLQUFLLENBQUM7R0FDTixJQUFJLGVBQWUsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEdBQUcsVUFBVSxZQUFZLEVBQUU7R0FDN0UsUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxFQUFFO0dBQ25DLFlBQVksT0FBTztHQUNuQixTQUFTO0dBQ1QsUUFBUSxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO0dBQ3ZDLFFBQVEsSUFBSSxPQUFPLEdBQUcsSUFBSSxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7R0FDbkYsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztHQUNqQyxRQUFRLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUU7R0FDbkMsWUFBWSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0dBQ3RDLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLGVBQWUsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQ3ZELFFBQVEsSUFBSSxDQUFDLG9CQUFvQixDQUFDa0MsZ0JBQWMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7R0FDakYsS0FBSyxDQUFDO0dBQ04sSUFBSSxlQUFlLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxVQUFVLEdBQUcsRUFBRTtHQUN0RCxRQUFRLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0dBQzVCLFFBQVEsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7R0FDeEIsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUNwQyxRQUFRLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztHQUMzQixLQUFLLENBQUM7R0FDTixJQUFJLGVBQWUsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFlBQVk7R0FDdEQsUUFBUSxJQUFJLENBQUMsb0JBQW9CLENBQUNBLGdCQUFjLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7R0FDaEYsUUFBUSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDM0IsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGVBQWUsQ0FBQztHQUMzQixDQUFDLENBQUNoQyxjQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztHQUM1QixJQUFJLFlBQVksSUFBSSxZQUFZO0dBQ2hDLElBQUksU0FBUyxZQUFZLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRTtHQUM5QyxRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0dBQ3pCLFFBQVEsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7R0FDekMsS0FBSztHQUNMLElBQUksT0FBTyxZQUFZLENBQUM7R0FDeEIsQ0FBQyxFQUFFLENBQUM7Ozs7R0N0R0osSUFBSUYsV0FBUyxHQUFHLENBQUNDLGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDd0ssV0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUl2SyxjQUFZLEdBQUdWLFlBQXdCLENBQUM7R0FDNUMsSUFBSW1CLGNBQVksR0FBR2xCLFlBQXdCLENBQUM7R0FDNUMsSUFBSXdELG1CQUFpQixHQUFHcEQsaUJBQTZCLENBQUM7R0FDdEQsSUFBSTRELHFCQUFtQixHQUFHMUQsbUJBQW9DLENBQUM7R0FDL0QsU0FBUyxTQUFTLENBQUMscUJBQXFCLEVBQUUsaUJBQWlCLEVBQUU7R0FDN0QsSUFBSSxJQUFJLGlCQUFpQixFQUFFO0dBQzNCLFFBQVEsT0FBTyxVQUFVLE1BQU0sRUFBRTtHQUNqQyxZQUFZLE9BQU8sSUFBSSwyQkFBMkIsQ0FBQyxNQUFNLEVBQUUsaUJBQWlCLENBQUM7R0FDN0UsaUJBQWlCLElBQUksQ0FBQyxJQUFJLGlCQUFpQixDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztHQUNwRSxTQUFTLENBQUM7R0FDVixLQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksaUJBQWlCLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUNuRyxDQUFDO3dCQUNnQixHQUFHLFVBQVU7R0FDOUIsSUFBSSxpQkFBaUIsSUFBSSxZQUFZO0dBQ3JDLElBQUksU0FBUyxpQkFBaUIsQ0FBQyxxQkFBcUIsRUFBRTtHQUN0RCxRQUFRLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxxQkFBcUIsQ0FBQztHQUMzRCxLQUFLO0dBQ0wsSUFBSSxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUNyRSxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLG1CQUFtQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0dBQ2pHLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxpQkFBaUIsQ0FBQztHQUM3QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ0wsSUFBSSxtQkFBbUIsSUFBSSxVQUFVLE1BQU0sRUFBRTtHQUM3QyxJQUFJQyxXQUFTLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDM0MsSUFBSSxTQUFTLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxxQkFBcUIsRUFBRTtHQUNyRSxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxxQkFBcUIsR0FBRyxxQkFBcUIsQ0FBQztHQUM1RCxRQUFRLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0dBQ2hDLFFBQVEsS0FBSyxDQUFDLDBCQUEwQixHQUFHLEVBQUUsQ0FBQztHQUM5QyxRQUFRLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0dBQ3hCLFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxVQUFVLFVBQVUsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUU7R0FDdEgsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztHQUMxQyxRQUFRLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztHQUMxQyxRQUFRLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztHQUMzQixLQUFLLENBQUM7R0FDTixJQUFJLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsVUFBVSxLQUFLLEVBQUUsUUFBUSxFQUFFO0dBQzNFLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMzQixLQUFLLENBQUM7R0FDTixJQUFJLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsVUFBVSxRQUFRLEVBQUU7R0FDdkUsUUFBUSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUM7R0FDdEQsUUFBUSxJQUFJLEtBQUssRUFBRTtHQUNuQixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ3pDLFNBQVM7R0FDVCxRQUFRLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztHQUMzQixLQUFLLENBQUM7R0FDTixJQUFJLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDM0QsUUFBUSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7R0FDakMsUUFBUSxJQUFJO0dBQ1osWUFBWSxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQ3pFLFlBQVksSUFBSSxhQUFhLEVBQUU7R0FDL0IsZ0JBQWdCLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQ3BELGFBQWE7R0FDYixTQUFTO0dBQ1QsUUFBUSxPQUFPLEdBQUcsRUFBRTtHQUNwQixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ3hDLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBWTtHQUMxRCxRQUFRLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0dBQzlCLFFBQVEsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQzNCLFFBQVEsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQzNCLEtBQUssQ0FBQztHQUNOLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLGtCQUFrQixHQUFHLFVBQVUsWUFBWSxFQUFFO0dBQy9FLFFBQVEsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQ25DLFFBQVEsSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztHQUNwRixRQUFRLElBQUksZUFBZSxLQUFLLENBQUMsQ0FBQyxFQUFFO0dBQ3BDLFlBQVksSUFBSSxDQUFDLDBCQUEwQixDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDdkUsU0FBUztHQUNULFFBQVEsT0FBTyxZQUFZLENBQUMsVUFBVSxDQUFDO0dBQ3ZDLEtBQUssQ0FBQztHQUNOLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxVQUFVLGFBQWEsRUFBRSxLQUFLLEVBQUU7R0FDN0UsUUFBUSxJQUFJLG9CQUFvQixHQUFHeUQscUJBQW1CLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztHQUNyRyxRQUFRLElBQUksb0JBQW9CLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUU7R0FDbEUsWUFBWSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0dBQy9DLFlBQVksV0FBVyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0dBQ2xELFlBQVksSUFBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0dBQ3ZFLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsWUFBWTtHQUM1RCxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsMEJBQTBCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtHQUM1RSxZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDeEMsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxtQkFBbUIsQ0FBQztHQUMvQixDQUFDLENBQUNSLG1CQUFpQixDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7R0FDdEMsSUFBSSwyQkFBMkIsSUFBSSxVQUFVLE1BQU0sRUFBRTtHQUNyRCxJQUFJakQsV0FBUyxDQUFDLDJCQUEyQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQ25ELElBQUksU0FBUywyQkFBMkIsQ0FBQyxNQUFNLEVBQUUsaUJBQWlCLEVBQUU7R0FDcEUsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQztHQUM5QyxRQUFRLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0dBQzlCLFFBQVEsS0FBSyxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO0dBQ3BELFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUksMkJBQTJCLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxVQUFVLFVBQVUsRUFBRTtHQUM3RSxRQUFRLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsSUFBSSwyQkFBMkIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7R0FDbkcsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLDJCQUEyQixDQUFDO0dBQ3ZDLENBQUMsQ0FBQ1csY0FBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsSUFBSSwyQkFBMkIsSUFBSSxVQUFVLE1BQU0sRUFBRTtHQUNyRCxJQUFJWCxXQUFTLENBQUMsMkJBQTJCLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDbkQsSUFBSSxTQUFTLDJCQUEyQixDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUU7R0FDekQsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQztHQUM5QyxRQUFRLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0dBQzlCLFFBQVEsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7R0FDOUIsUUFBUSxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO0dBQ3ZDLFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUksMkJBQTJCLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLE1BQU0sRUFBRTtHQUNwRSxRQUFRLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0dBQ2pDLEtBQUssQ0FBQztHQUNOLElBQUksMkJBQTJCLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxVQUFVLEdBQUcsRUFBRTtHQUNsRSxRQUFRLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztHQUMzQixRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQy9CLEtBQUssQ0FBQztHQUNOLElBQUksMkJBQTJCLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0dBQ2xFLFFBQVEsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQzNCLFFBQVEsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7R0FDakMsS0FBSyxDQUFDO0dBQ04sSUFBSSwyQkFBMkIsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEdBQUcsWUFBWTtHQUMxRSxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7R0FDcEMsWUFBWSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO0dBQ3pDLFlBQVksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQy9CLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQy9DLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sMkJBQTJCLENBQUM7R0FDdkMsQ0FBQyxDQUFDRSxjQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7R0MvSTNCLElBQUlGLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQ3lLLGVBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJeEssY0FBWSxHQUFHVixZQUF3QixDQUFDO0dBQzVDLFNBQVMsYUFBYSxHQUFHO0dBQ3pCLElBQUksT0FBTyxTQUFTLDZCQUE2QixDQUFDLE1BQU0sRUFBRTtHQUMxRCxRQUFRLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLHFCQUFxQixFQUFFLENBQUMsQ0FBQztHQUN4RCxLQUFLLENBQUM7R0FDTixDQUFDO2dDQUNvQixHQUFHLGNBQWM7R0FDdEMsSUFBSSxxQkFBcUIsSUFBSSxZQUFZO0dBQ3pDLElBQUksU0FBUyxxQkFBcUIsR0FBRztHQUNyQyxLQUFLO0dBQ0wsSUFBSSxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUN6RSxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7R0FDekUsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLHFCQUFxQixDQUFDO0dBQ2pDLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLHVCQUF1QixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQ2pELElBQUlRLFdBQVMsQ0FBQyx1QkFBdUIsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUMvQyxJQUFJLFNBQVMsdUJBQXVCLENBQUMsV0FBVyxFQUFFO0dBQ2xELFFBQVEsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDdEQsS0FBSztHQUNMLElBQUksdUJBQXVCLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUMvRCxRQUFRLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0dBQ3hDLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyx1QkFBdUIsQ0FBQztHQUNuQyxDQUFDLENBQUNFLGNBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQzs7OztHQ3RDM0IsSUFBSUYsV0FBUyxHQUFHLENBQUNDLGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDMEssVUFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUl2RyxrQkFBZ0IsR0FBRzVFLGdCQUE0QixDQUFDO0dBQ3BELFNBQVMsUUFBUSxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUU7R0FDeEMsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksZ0JBQWdCLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ2pHLENBQUM7c0JBQ2UsR0FBRyxTQUFTO0dBQzVCLElBQUksZ0JBQWdCLElBQUksWUFBWTtHQUNwQyxJQUFJLFNBQVMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRTtHQUNwRCxRQUFRLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0dBQ3ZDLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7R0FDL0IsS0FBSztHQUNMLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDcEUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztHQUNwRyxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sZ0JBQWdCLENBQUM7R0FDNUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUksa0JBQWtCLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDNUMsSUFBSVEsV0FBUyxDQUFDLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQzFDLElBQUksU0FBUyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRTtHQUNuRSxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0dBQ3hDLFFBQVEsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0dBQ2pDLFFBQVEsSUFBSSxPQUFPLEVBQUU7R0FDckIsWUFBWSxLQUFLLENBQUMsR0FBRyxDQUFDb0Usa0JBQWdCLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxJQUFJQSxrQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDbkgsU0FBUztHQUNULFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUksa0JBQWtCLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxZQUFZO0dBQzFELFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztHQUM1QixLQUFLLENBQUM7R0FDTixJQUFJLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDaEUsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQzNCLEtBQUssQ0FBQztHQUNOLElBQUksa0JBQWtCLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUMxRCxRQUFRLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtHQUM5QixZQUFZLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDeEMsU0FBUztHQUNULGFBQWE7R0FDYixZQUFZLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQzdDLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDcEUsUUFBUSxJQUFJLEdBQUcsQ0FBQztHQUNoQixRQUFRLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7R0FDM0MsUUFBUSxJQUFJO0dBQ1osWUFBWSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMxQyxTQUFTO0dBQ1QsUUFBUSxPQUFPLEdBQUcsRUFBRTtHQUNwQixZQUFZLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDbkMsWUFBWSxPQUFPO0dBQ25CLFNBQVM7R0FDVCxRQUFRLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQ3ZDLEtBQUssQ0FBQztHQUNOLElBQUksa0JBQWtCLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxVQUFVLEdBQUcsRUFBRSxLQUFLLEVBQUU7R0FDdkUsUUFBUSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0dBQ2pDLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7R0FDOUIsWUFBWSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQzVCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDekMsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxrQkFBa0IsQ0FBQztHQUM5QixDQUFDLENBQUNBLGtCQUFnQixDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztnQ0FDakIsR0FBRzs7OztHQzNFN0IsSUFBSXBFLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQzJLLHNCQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSTFLLGNBQVksR0FBR1YsWUFBd0IsQ0FBQztHQUM1QyxTQUFTLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUU7R0FDcEQsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksNEJBQTRCLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQzdHLENBQUM7OENBQzJCLEdBQUcscUJBQXFCO0dBQ3BELElBQUksNEJBQTRCLElBQUksWUFBWTtHQUNoRCxJQUFJLFNBQVMsNEJBQTRCLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRTtHQUNoRSxRQUFRLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0dBQy9CLFFBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7R0FDdkMsS0FBSztHQUNMLElBQUksNEJBQTRCLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDaEYsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSw4QkFBOEIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztHQUNoSCxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sNEJBQTRCLENBQUM7R0FDeEMsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUksOEJBQThCLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDeEQsSUFBSVEsV0FBUyxDQUFDLDhCQUE4QixFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQ3RELElBQUksU0FBUyw4QkFBOEIsQ0FBQyxXQUFXLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRTtHQUMvRSxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0dBQ3hDLFFBQVEsS0FBSyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7R0FDN0IsUUFBUSxJQUFJLE9BQU8sT0FBTyxLQUFLLFVBQVUsRUFBRTtHQUMzQyxZQUFZLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0dBQ3BDLFNBQVM7R0FDVCxRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLDhCQUE4QixDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3ZFLFFBQVEsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ3ZCLEtBQUssQ0FBQztHQUNOLElBQUksOEJBQThCLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUN0RSxRQUFRLElBQUksR0FBRyxDQUFDO0dBQ2hCLFFBQVEsSUFBSTtHQUNaLFlBQVksSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztHQUMvQyxZQUFZLEdBQUcsR0FBRyxXQUFXLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQztHQUMzRCxTQUFTO0dBQ1QsUUFBUSxPQUFPLEdBQUcsRUFBRTtHQUNwQixZQUFZLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDL0MsU0FBUztHQUNULFFBQVEsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO0dBQzNCLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO0dBQ3pCLFlBQVksSUFBSTtHQUNoQixnQkFBZ0IsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztHQUMzQyxnQkFBZ0IsTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0dBQ2hELGFBQWE7R0FDYixZQUFZLE9BQU8sR0FBRyxFQUFFO0dBQ3hCLGdCQUFnQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ25ELGFBQWE7R0FDYixTQUFTO0dBQ1QsYUFBYTtHQUNiLFlBQVksSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7R0FDL0IsU0FBUztHQUNULFFBQVEsSUFBSSxDQUFDLE1BQU0sRUFBRTtHQUNyQixZQUFZLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0dBQzNCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDekMsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyw4QkFBOEIsQ0FBQztHQUMxQyxDQUFDLENBQUNFLGNBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQzs7OztHQ3ZFM0IsTUFBTSxDQUFDLGNBQWMsQ0FBQzJLLHlCQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSUQsd0JBQXNCLEdBQUdwTCxzQkFBaUMsQ0FBQztHQUMvRCxTQUFTLHVCQUF1QixDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUU7R0FDL0MsSUFBSSxPQUFPb0wsd0JBQXNCLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsT0FBTyxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQzFJLENBQUM7b0RBQzhCLEdBQUc7Ozs7OztHQ0xsQyxJQUFJNUssV0FBUyxHQUFHLENBQUNDLGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDNkssY0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUkxRCxjQUFZLEdBQUc1SCxVQUE2QixDQUFDO0dBQ2pELElBQUlVLGNBQVksR0FBR1QsWUFBd0IsQ0FBQztHQUM1QyxTQUFTLFlBQVksQ0FBQyxZQUFZLEVBQUU7R0FDcEMsSUFBSSxJQUFJLFlBQVksS0FBSyxLQUFLLENBQUMsRUFBRSxFQUFFLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxFQUFFO0dBQ3hFLElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRTtHQUM3QixRQUFRLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7R0FDbkUsS0FBSyxDQUFDO0dBQ04sQ0FBQzs4QkFDbUIsR0FBRyxhQUFhO0dBQ3BDLElBQUksb0JBQW9CLElBQUksWUFBWTtHQUN4QyxJQUFJLFNBQVMsb0JBQW9CLENBQUMsWUFBWSxFQUFFO0dBQ2hELFFBQVEsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7R0FDekMsS0FBSztHQUNMLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDeEUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxzQkFBc0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7R0FDM0YsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLG9CQUFvQixDQUFDO0dBQ2hDLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLHNCQUFzQixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQ2hELElBQUlPLFdBQVMsQ0FBQyxzQkFBc0IsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUM5QyxJQUFJLFNBQVMsc0JBQXNCLENBQUMsV0FBVyxFQUFFLFlBQVksRUFBRTtHQUMvRCxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0dBQzFDLFFBQVEsS0FBSyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7R0FDL0IsUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQzlELFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7R0FDN0IsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUNyQyxLQUFLLENBQUM7R0FDTixJQUFJLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBWTtHQUM3RCxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO0dBQzVCLFlBQVksSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUM7R0FDN0IsWUFBWSxJQUFJO0dBQ2hCLGdCQUFnQixHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0dBQzFDLGFBQWE7R0FDYixZQUFZLE9BQU8sQ0FBQyxFQUFFO0dBQ3RCLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxDQUFDO0dBQ3hCLGFBQWE7R0FDYixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ3hDLFNBQVM7R0FDVCxhQUFhO0dBQ2IsWUFBWSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDL0MsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxzQkFBc0IsQ0FBQztHQUNsQyxDQUFDLENBQUNFLGNBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFNBQVMsbUJBQW1CLEdBQUc7R0FDL0IsSUFBSSxPQUFPLElBQUlrSCxjQUFZLENBQUMsVUFBVSxFQUFFLENBQUM7R0FDekM7Ozs7R0MvREEsSUFBSXBILFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQzhLLE1BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJN0ssY0FBWSxHQUFHVixZQUF3QixDQUFDO0dBQzVDLElBQUkwSCwyQkFBeUIsR0FBR3pILHVCQUEwQyxDQUFDO0dBQzNFLElBQUlrRixTQUFPLEdBQUc5RSxLQUE4QixDQUFDO0dBQzdDLFNBQVMsSUFBSSxDQUFDLEtBQUssRUFBRTtHQUNyQixJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUU7R0FDN0IsUUFBUSxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7R0FDekIsWUFBWSxPQUFPOEUsU0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0dBQ25DLFNBQVM7R0FDVCxhQUFhO0dBQ2IsWUFBWSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztHQUN4RCxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sQ0FBQztjQUNXLEdBQUcsS0FBSztHQUNwQixJQUFJLFlBQVksSUFBSSxZQUFZO0dBQ2hDLElBQUksU0FBUyxZQUFZLENBQUMsS0FBSyxFQUFFO0dBQ2pDLFFBQVEsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7R0FDM0IsUUFBUSxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFO0dBQzVCLFlBQVksTUFBTSxJQUFJdUMsMkJBQXlCLENBQUMsdUJBQXVCLENBQUM7R0FDeEUsU0FBUztHQUNULEtBQUs7R0FDTCxJQUFJLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUNoRSxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7R0FDNUUsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLFlBQVksQ0FBQztHQUN4QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ0wsSUFBSSxjQUFjLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDeEMsSUFBSWxILFdBQVMsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDdEMsSUFBSSxTQUFTLGNBQWMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFO0dBQ2hELFFBQVEsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLElBQUksSUFBSSxDQUFDO0dBQzNELFFBQVEsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7R0FDNUIsUUFBUSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztHQUN4QixRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLGNBQWMsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQ3RELFFBQVEsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztHQUMvQixRQUFRLElBQUksS0FBSyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQztHQUNqQyxRQUFRLElBQUksS0FBSyxJQUFJLEtBQUssRUFBRTtHQUM1QixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ3pDLFlBQVksSUFBSSxLQUFLLEtBQUssS0FBSyxFQUFFO0dBQ2pDLGdCQUFnQixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQzVDLGdCQUFnQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDbkMsYUFBYTtHQUNiLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sY0FBYyxDQUFDO0dBQzFCLENBQUMsQ0FBQ0UsY0FBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDOztHQzVEM0IsTUFBTSxDQUFDLGNBQWMsQ0FBQzhLLFdBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJOUQsMkJBQXlCLEdBQUcxSCx1QkFBMEMsQ0FBQztHQUMzRSxJQUFJa0csVUFBUSxHQUFHakcsUUFBbUIsQ0FBQztHQUNuQyxJQUFJcUwsZ0JBQWMsR0FBR2pMLGNBQXlCLENBQUM7R0FDL0MsSUFBSXlLLGtCQUFnQixHQUFHdkssZ0JBQTJCLENBQUM7R0FDbkQsSUFBSWdMLFFBQU0sR0FBRzFLLE1BQWlCLENBQUM7R0FDL0IsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtHQUN4QyxJQUFJLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtHQUNuQixRQUFRLE1BQU0sSUFBSTZHLDJCQUF5QixDQUFDLHVCQUF1QixFQUFFLENBQUM7R0FDdEUsS0FBSztHQUNMLElBQUksSUFBSSxlQUFlLEdBQUcsU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUM7R0FDaEQsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDeEIsVUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUVxRixRQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLGVBQWU7R0FDM0ksVUFBVVQsa0JBQWdCLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQztHQUN2RCxVQUFVUSxnQkFBYyxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsT0FBTyxJQUFJNUQsMkJBQXlCLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUMzSCxDQUFDO3dCQUNnQixHQUFHOzs7O0dDZnBCLE1BQU0sQ0FBQyxjQUFjLENBQUMrRCxTQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSXpHLFVBQVEsR0FBR2hGLFFBQStCLENBQUM7R0FDL0MsSUFBSSxJQUFJLEdBQUdDLElBQTJCLENBQUM7R0FDdkMsU0FBUyxPQUFPLEdBQUc7R0FDbkIsSUFBSSxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7R0FDbkIsSUFBSSxLQUFLLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRTtHQUNsRCxRQUFRLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDbEMsS0FBSztHQUNMLElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRSxFQUFFLE9BQU8rRSxVQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUMvRixDQUFDO29CQUNjLEdBQUc7Ozs7R0NWbEIsSUFBSXhFLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQ2lMLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJaEwsY0FBWSxHQUFHVixZQUF3QixDQUFDO0dBQzVDLFNBQVMsS0FBSyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7R0FDbkMsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksYUFBYSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDcEcsQ0FBQztnQkFDWSxHQUFHLE1BQU07R0FDdEIsSUFBSSxhQUFhLElBQUksWUFBWTtHQUNqQyxJQUFJLFNBQVMsYUFBYSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFO0dBQ3ZELFFBQVEsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7R0FDbkMsUUFBUSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztHQUMvQixRQUFRLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0dBQzdCLEtBQUs7R0FDTCxJQUFJLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsUUFBUSxFQUFFLE1BQU0sRUFBRTtHQUMvRCxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGVBQWUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0dBQzFHLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxhQUFhLENBQUM7R0FDekIsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUksZUFBZSxJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQ3pDLElBQUlRLFdBQVMsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDdkMsSUFBSSxTQUFTLGVBQWUsQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUU7R0FDdEUsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztHQUNwQyxRQUFRLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0dBQ2hDLFFBQVEsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7R0FDOUIsUUFBUSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztHQUN4QixRQUFRLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxJQUFJLEtBQUssQ0FBQztHQUN6QyxRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLGVBQWUsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFVBQVUsZUFBZSxFQUFFO0dBQzFFLFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7R0FDL0MsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQ3BDLEtBQUssQ0FBQztHQUNOLElBQUksZUFBZSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDdkQsUUFBUSxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7R0FDM0IsUUFBUSxJQUFJO0dBQ1osWUFBWSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUN6RixTQUFTO0dBQ1QsUUFBUSxPQUFPLEdBQUcsRUFBRTtHQUNwQixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ3hDLFlBQVksT0FBTztHQUNuQixTQUFTO0dBQ1QsUUFBUSxJQUFJLENBQUMsTUFBTSxFQUFFO0dBQ3JCLFlBQVksSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUN2QyxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxlQUFlLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0dBQ3RELFFBQVEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUNsQyxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sZUFBZSxDQUFDO0dBQzNCLENBQUMsQ0FBQ0UsY0FBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7O0dDOUQzQixJQUFJRixXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUNrTCxTQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSS9HLGtCQUFnQixHQUFHNUUsZ0JBQTRCLENBQUM7R0FDcEQsU0FBUyxPQUFPLEdBQUc7R0FDbkIsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUNoRixDQUFDO29CQUNjLEdBQUcsUUFBUTtHQUMxQixJQUFJLG1CQUFtQixJQUFJLFlBQVk7R0FDdkMsSUFBSSxTQUFTLG1CQUFtQixHQUFHO0dBQ25DLEtBQUs7R0FDTCxJQUFJLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxVQUFVLEVBQUUsTUFBTSxFQUFFO0dBQ3ZFLFFBQVEsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUkscUJBQXFCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztHQUN2RSxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sbUJBQW1CLENBQUM7R0FDL0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUkscUJBQXFCLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDL0MsSUFBSVEsV0FBUyxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQzdDLElBQUksU0FBUyxxQkFBcUIsQ0FBQyxXQUFXLEVBQUU7R0FDaEQsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztHQUNuQyxRQUFRLEtBQUssQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0dBQ3RDLFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUkscUJBQXFCLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUM3RCxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO0dBQ25DLFlBQVksSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7R0FDeEMsWUFBWSxJQUFJLENBQUMsR0FBRyxDQUFDb0Usa0JBQWdCLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxJQUFJQSxrQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDL0csU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUkscUJBQXFCLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0dBQzVELFFBQVEsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7R0FDakMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtHQUNuQyxZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDeEMsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUkscUJBQXFCLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxZQUFZO0dBQ2pFLFFBQVEsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7R0FDckMsUUFBUSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7R0FDL0IsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQ3hDLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8scUJBQXFCLENBQUM7R0FDakMsQ0FBQyxDQUFDQSxrQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDOzs7O0dDdEQxQyxJQUFJcEUsV0FBUyxHQUFHLENBQUNDLGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDbUwsWUFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUl2SSxPQUFLLEdBQUdyRCxLQUFnQixDQUFDO0dBQzdCLElBQUkyRSxRQUFNLEdBQUcxRSxNQUE2QixDQUFDO0dBQzNDLElBQUkyRSxrQkFBZ0IsR0FBR3ZFLGdCQUE0QixDQUFDO0dBQ3BELFNBQVMsVUFBVSxDQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUU7R0FDN0MsSUFBSSxJQUFJLGNBQWMsRUFBRTtHQUN4QixRQUFRLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLE9BQU9zRSxRQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUN0QixPQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLE9BQU8sY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdk0sS0FBSztHQUNMLElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRTtHQUM3QixRQUFRLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7R0FDNUQsS0FBSyxDQUFDO0dBQ04sQ0FBQzswQkFDaUIsR0FBRyxXQUFXO0dBQ2hDLElBQUksa0JBQWtCLElBQUksWUFBWTtHQUN0QyxJQUFJLFNBQVMsa0JBQWtCLENBQUMsT0FBTyxFQUFFO0dBQ3pDLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7R0FDL0IsS0FBSztHQUNMLElBQUksa0JBQWtCLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDdEUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7R0FDcEYsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGtCQUFrQixDQUFDO0dBQzlCLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLG9CQUFvQixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQzlDLElBQUk3QyxXQUFTLENBQUMsb0JBQW9CLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDNUMsSUFBSSxTQUFTLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUU7R0FDeEQsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztHQUNoQyxRQUFRLEtBQUssQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0dBQ3RDLFFBQVEsS0FBSyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7R0FDbkMsUUFBUSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztHQUN4QixRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDNUQsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtHQUNuQyxZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDaEMsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxVQUFVLEtBQUssRUFBRTtHQUM5RCxRQUFRLElBQUksTUFBTSxDQUFDO0dBQ25CLFFBQVEsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0dBQ2pDLFFBQVEsSUFBSTtHQUNaLFlBQVksTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQ2hELFNBQVM7R0FDVCxRQUFRLE9BQU8sR0FBRyxFQUFFO0dBQ3BCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDeEMsWUFBWSxPQUFPO0dBQ25CLFNBQVM7R0FDVCxRQUFRLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0dBQ3BDLFFBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUMvQixLQUFLLENBQUM7R0FDTixJQUFJLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsVUFBVSxNQUFNLEVBQUU7R0FDakUsUUFBUSxJQUFJLGVBQWUsR0FBRyxJQUFJb0Usa0JBQWdCLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDL0UsUUFBUSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0dBQzNDLFFBQVEsV0FBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztHQUN6QyxRQUFRLElBQUksaUJBQWlCLEdBQUdBLGtCQUFnQixDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLENBQUM7R0FDekYsUUFBUSxJQUFJLGlCQUFpQixLQUFLLGVBQWUsRUFBRTtHQUNuRCxZQUFZLFdBQVcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztHQUMvQyxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFlBQVk7R0FDM0QsUUFBUSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztHQUNqQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO0dBQ25DLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUN4QyxTQUFTO0dBQ1QsUUFBUSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDM0IsS0FBSyxDQUFDO0dBQ04sSUFBSSxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVUsVUFBVSxFQUFFO0dBQ3RFLFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7R0FDMUMsS0FBSyxDQUFDO0dBQ04sSUFBSSxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFVBQVUsR0FBRyxFQUFFO0dBQ2hFLFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDcEMsS0FBSyxDQUFDO0dBQ04sSUFBSSxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFlBQVk7R0FDaEUsUUFBUSxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztHQUNyQyxRQUFRLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtHQUMvQixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDeEMsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxvQkFBb0IsQ0FBQztHQUNoQyxDQUFDLENBQUNBLGtCQUFnQixDQUFDLHFCQUFxQixDQUFDLENBQUM7Ozs7R0M1RjFDLElBQUlwRSxXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUNvTCxRQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSWpILGtCQUFnQixHQUFHNUUsZ0JBQTRCLENBQUM7R0FDcEQsU0FBUyxNQUFNLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7R0FDaEQsSUFBSSxJQUFJLFVBQVUsS0FBSyxLQUFLLENBQUMsRUFBRSxFQUFFLFVBQVUsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRTtHQUN6RSxJQUFJLFVBQVUsR0FBRyxDQUFDLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxVQUFVLENBQUM7R0FDL0UsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksY0FBYyxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDekcsQ0FBQztrQkFDYSxHQUFHLE9BQU87R0FDeEIsSUFBSSxjQUFjLElBQUksWUFBWTtHQUNsQyxJQUFJLFNBQVMsY0FBYyxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0dBQzVELFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7R0FDL0IsUUFBUSxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztHQUNyQyxRQUFRLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0dBQ25DLEtBQUs7R0FDTCxJQUFJLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUNsRSxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7R0FDakgsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGNBQWMsQ0FBQztHQUMxQixDQUFDLEVBQUUsQ0FBQyxDQUFDOzBCQUNpQixHQUFHLGVBQWU7R0FDeEMsSUFBSSxnQkFBZ0IsSUFBSSxVQUFVLE1BQU0sRUFBRTtHQUMxQyxJQUFJUSxXQUFTLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDeEMsSUFBSSxTQUFTLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtHQUMzRSxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0dBQ2hDLFFBQVEsS0FBSyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7R0FDdEMsUUFBUSxLQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztHQUNwQyxRQUFRLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0dBQ3hCLFFBQVEsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7R0FDekIsUUFBUSxLQUFLLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztHQUNuQyxRQUFRLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRTtHQUNuRCxZQUFZLEtBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0dBQzlCLFNBQVM7R0FDVCxRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLGdCQUFnQixDQUFDLFFBQVEsR0FBRyxVQUFVLEdBQUcsRUFBRTtHQUMvQyxRQUFRLElBQUksVUFBVSxHQUFHLEdBQUcsQ0FBQyxVQUFVLEVBQUUsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7R0FDbkcsUUFBUSxVQUFVLENBQUMscUJBQXFCLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztHQUMvRCxLQUFLLENBQUM7R0FDTixJQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDeEQsUUFBUSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0dBQzNDLFFBQVEsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFO0dBQ2hDLFlBQVksSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0dBQzdCLFlBQVksT0FBTztHQUNuQixTQUFTO0dBQ1QsUUFBUSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7R0FDakMsUUFBUSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRTtHQUMzQyxZQUFZLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDcEMsWUFBWSxJQUFJO0dBQ2hCLGdCQUFnQixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0dBQzNDLGdCQUFnQixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQ25ELGdCQUFnQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtHQUNyQyxvQkFBb0IsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7R0FDckUsaUJBQWlCO0dBQ2pCLHFCQUFxQjtHQUNyQixvQkFBb0IsSUFBSSxLQUFLLEdBQUcsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUM7R0FDakcsb0JBQW9CLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7R0FDekQsb0JBQW9CLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0dBQ3BHLGlCQUFpQjtHQUNqQixhQUFhO0dBQ2IsWUFBWSxPQUFPLENBQUMsRUFBRTtHQUN0QixnQkFBZ0IsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNyQyxhQUFhO0dBQ2IsU0FBUztHQUNULGFBQWE7R0FDYixZQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ3BDLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsR0FBRyxVQUFVLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO0dBQ3ZGLFFBQVEsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0dBQ3RCLFFBQVEsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztHQUMzQyxRQUFRLFdBQVcsQ0FBQyxHQUFHLENBQUNvRSxrQkFBZ0IsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLElBQUlBLGtCQUFnQixDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNuSCxLQUFLLENBQUM7R0FDTixJQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBWTtHQUN2RCxRQUFRLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0dBQ2pDLFFBQVEsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0dBQ3BELFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUN4QyxTQUFTO0dBQ1QsUUFBUSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDM0IsS0FBSyxDQUFDO0dBQ04sSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVUsVUFBVSxFQUFFO0dBQ2xFLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztHQUMvQixLQUFLLENBQUM7R0FDTixJQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsWUFBWTtHQUM1RCxRQUFRLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7R0FDakMsUUFBUSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7R0FDdEIsUUFBUSxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtHQUN6QyxZQUFZLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7R0FDdkMsU0FBUztHQUNULFFBQVEsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0dBQ3BELFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUN4QyxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGdCQUFnQixDQUFDO0dBQzVCLENBQUMsQ0FBQ0Esa0JBQWdCLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDOzRCQUNuQixHQUFHOzs7O0dDNUczQixJQUFJcEUsV0FBUyxHQUFHLENBQUNDLGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDcUwsVUFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUlwTCxjQUFZLEdBQUdWLFlBQXdCLENBQUM7R0FDNUMsSUFBSUcsZ0JBQWMsR0FBR0YsY0FBMEIsQ0FBQztHQUNoRCxTQUFTLFFBQVEsQ0FBQyxRQUFRLEVBQUU7R0FDNUIsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3BGLENBQUM7c0JBQ2UsR0FBRyxTQUFTO0dBQzVCLElBQUksZUFBZSxJQUFJLFlBQVk7R0FDbkMsSUFBSSxTQUFTLGVBQWUsQ0FBQyxRQUFRLEVBQUU7R0FDdkMsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztHQUNqQyxLQUFLO0dBQ0wsSUFBSSxlQUFlLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDbkUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7R0FDbEYsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGVBQWUsQ0FBQztHQUMzQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ0wsSUFBSSxpQkFBaUIsSUFBSSxVQUFVLE1BQU0sRUFBRTtHQUMzQyxJQUFJTyxXQUFTLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDekMsSUFBSSxTQUFTLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUU7R0FDdEQsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUlMLGdCQUFjLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7R0FDN0QsUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSxPQUFPLGlCQUFpQixDQUFDO0dBQzdCLENBQUMsQ0FBQ08sY0FBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7O0dDckMzQixJQUFJRixXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUNzTCxNQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSXJMLGNBQVksR0FBR1YsWUFBd0IsQ0FBQztHQUM1QyxTQUFTLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFO0dBQ2xDLElBQUksSUFBSSxPQUFPLFNBQVMsS0FBSyxVQUFVLEVBQUU7R0FDekMsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLDZCQUE2QixDQUFDLENBQUM7R0FDM0QsS0FBSztHQUNMLElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRSxFQUFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQy9HLENBQUM7Y0FDVyxHQUFHLEtBQUs7R0FDcEIsSUFBSSxpQkFBaUIsSUFBSSxZQUFZO0dBQ3JDLElBQUksU0FBUyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUU7R0FDdkUsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztHQUNuQyxRQUFRLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0dBQzdCLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7R0FDckMsUUFBUSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztHQUMvQixLQUFLO0dBQ0wsSUFBSSxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsUUFBUSxFQUFFLE1BQU0sRUFBRTtHQUNuRSxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztHQUMvSCxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8saUJBQWlCLENBQUM7R0FDN0IsQ0FBQyxFQUFFLENBQUMsQ0FBQzsyQkFDb0IsR0FBRyxrQkFBa0I7R0FDOUMsSUFBSSxtQkFBbUIsSUFBSSxVQUFVLE1BQU0sRUFBRTtHQUM3QyxJQUFJUSxXQUFTLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDM0MsSUFBSSxTQUFTLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUU7R0FDdEYsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztHQUNwQyxRQUFRLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0dBQzlCLFFBQVEsS0FBSyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7R0FDdEMsUUFBUSxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztHQUNoQyxRQUFRLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0dBQ3hCLFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxVQUFVLEtBQUssRUFBRTtHQUNwRSxRQUFRLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7R0FDM0MsUUFBUSxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ2hDLFFBQVEsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQy9CLFFBQVEsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQzNCLEtBQUssQ0FBQztHQUNOLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUMzRCxRQUFRLElBQUksRUFBRSxHQUFHLElBQUksRUFBRSxTQUFTLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxPQUFPLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQztHQUN0RSxRQUFRLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztHQUNqQyxRQUFRLElBQUk7R0FDWixZQUFZLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUNwRixZQUFZLElBQUksTUFBTSxFQUFFO0dBQ3hCLGdCQUFnQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDO0dBQ3JFLGFBQWE7R0FDYixTQUFTO0dBQ1QsUUFBUSxPQUFPLEdBQUcsRUFBRTtHQUNwQixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ3hDLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBWTtHQUMxRCxRQUFRLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztHQUM5RCxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sbUJBQW1CLENBQUM7R0FDL0IsQ0FBQyxDQUFDRSxjQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQzs2QkFDRCxHQUFHOzs7O0dDdEU5QixNQUFNLENBQUMsY0FBYyxDQUFDc0wsV0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUlELFFBQU0sR0FBRy9MLE1BQTRCLENBQUM7R0FDMUMsU0FBUyxTQUFTLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRTtHQUN2QyxJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSStMLFFBQU0sQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUNySCxDQUFDO3dCQUNnQixHQUFHOzs7O0dDTHBCLE1BQU0sQ0FBQyxjQUFjLENBQUNFLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJckUsY0FBWSxHQUFHNUgsVUFBNkIsQ0FBQztHQUNqRCxJQUFJa0csVUFBUSxHQUFHakcsUUFBbUIsQ0FBQztHQUNuQyxJQUFJc0wsUUFBTSxHQUFHbEwsTUFBaUIsQ0FBQztHQUMvQixJQUFJeUssa0JBQWdCLEdBQUd2SyxnQkFBMkIsQ0FBQztHQUNuRCxJQUFJK0ssZ0JBQWMsR0FBR3pLLGNBQXlCLENBQUM7R0FDL0MsSUFBSUksWUFBVSxHQUFHSCxVQUEyQixDQUFDO0dBQzdDLFNBQVMsS0FBSyxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUU7R0FDeEMsSUFBSSxJQUFJLGVBQWUsR0FBRyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQztHQUNoRCxJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHb0YsVUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxPQUFPLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHakYsWUFBVSxDQUFDLFFBQVEsRUFBRXNLLFFBQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsZUFBZSxHQUFHVCxrQkFBZ0IsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLEdBQUdRLGdCQUFjLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxPQUFPLElBQUkxRCxjQUFZLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDblUsQ0FBQztnQkFDWSxHQUFHOzs7O0dDWGhCLElBQUlwSCxXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUN5TCxnQkFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUl4TCxjQUFZLEdBQUdWLFlBQXdCLENBQUM7R0FDNUMsU0FBUyxjQUFjLEdBQUc7R0FDMUIsSUFBSSxPQUFPLFNBQVMsOEJBQThCLENBQUMsTUFBTSxFQUFFO0dBQzNELFFBQVEsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO0dBQ3pELEtBQUssQ0FBQztHQUNOLENBQUM7a0NBQ3FCLEdBQUcsZUFBZTtHQUN4QyxJQUFJLHNCQUFzQixJQUFJLFlBQVk7R0FDMUMsSUFBSSxTQUFTLHNCQUFzQixHQUFHO0dBQ3RDLEtBQUs7R0FDTCxJQUFJLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxVQUFVLEVBQUUsTUFBTSxFQUFFO0dBQzFFLFFBQVEsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksd0JBQXdCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztHQUMxRSxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sc0JBQXNCLENBQUM7R0FDbEMsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUksd0JBQXdCLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDbEQsSUFBSVEsV0FBUyxDQUFDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQ2hELElBQUksU0FBUyx3QkFBd0IsR0FBRztHQUN4QyxRQUFRLE9BQU8sTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDeEUsS0FBSztHQUNMLElBQUksd0JBQXdCLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLE1BQU0sRUFBRTtHQUNqRSxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sd0JBQXdCLENBQUM7R0FDcEMsQ0FBQyxDQUFDRSxjQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7R0NyQzNCLElBQUlGLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQzBMLFNBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJekwsY0FBWSxHQUFHVixZQUF3QixDQUFDO0dBQzVDLFNBQVMsT0FBTyxHQUFHO0dBQ25CLElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRSxFQUFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLGVBQWUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQzVFLENBQUM7b0JBQ2MsR0FBRyxRQUFRO0dBQzFCLElBQUksZUFBZSxJQUFJLFlBQVk7R0FDbkMsSUFBSSxTQUFTLGVBQWUsR0FBRztHQUMvQixLQUFLO0dBQ0wsSUFBSSxlQUFlLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFFBQVEsRUFBRSxNQUFNLEVBQUU7R0FDakUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0dBQ2pFLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxlQUFlLENBQUM7R0FDM0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUksaUJBQWlCLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDM0MsSUFBSVEsV0FBUyxDQUFDLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQ3pDLElBQUksU0FBUyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUU7R0FDNUMsUUFBUSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUN0RCxLQUFLO0dBQ0wsSUFBSSxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFVBQVUsT0FBTyxFQUFFO0dBQ3BFLFFBQVEsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztHQUMzQyxRQUFRLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7R0FDbEMsUUFBUSxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDL0IsS0FBSyxDQUFDO0dBQ04sSUFBSSxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQ3pELFFBQVEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUNuQyxLQUFLLENBQUM7R0FDTixJQUFJLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBWTtHQUN4RCxRQUFRLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDbEMsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGlCQUFpQixDQUFDO0dBQzdCLENBQUMsQ0FBQ0UsY0FBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7Ozs7R0M1QzNCLElBQUlGLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQzJMLFVBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJMUwsY0FBWSxHQUFHVixZQUF3QixDQUFDO0dBQzVDLElBQUkwSCwyQkFBeUIsR0FBR3pILHVCQUEwQyxDQUFDO0dBQzNFLElBQUlrRixTQUFPLEdBQUc5RSxLQUE4QixDQUFDO0dBQzdDLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRTtHQUN6QixJQUFJLE9BQU8sU0FBUyx3QkFBd0IsQ0FBQyxNQUFNLEVBQUU7R0FDckQsUUFBUSxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7R0FDekIsWUFBWSxPQUFPOEUsU0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0dBQ25DLFNBQVM7R0FDVCxhQUFhO0dBQ2IsWUFBWSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0dBQzVELFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixDQUFDO3NCQUNlLEdBQUcsU0FBUztHQUM1QixJQUFJLGdCQUFnQixJQUFJLFlBQVk7R0FDcEMsSUFBSSxTQUFTLGdCQUFnQixDQUFDLEtBQUssRUFBRTtHQUNyQyxRQUFRLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0dBQzNCLFFBQVEsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRTtHQUM1QixZQUFZLE1BQU0sSUFBSXVDLDJCQUF5QixDQUFDLHVCQUF1QixDQUFDO0dBQ3hFLFNBQVM7R0FDVCxLQUFLO0dBQ0wsSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUNwRSxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztHQUNoRixLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sZ0JBQWdCLENBQUM7R0FDNUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUksa0JBQWtCLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDNUMsSUFBSWxILFdBQVMsQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUMxQyxJQUFJLFNBQVMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRTtHQUNwRCxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0dBQzVCLFFBQVEsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO0dBQ2pDLFFBQVEsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7R0FDeEIsUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQzFELFFBQVEsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztHQUM3QixRQUFRLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7R0FDL0IsUUFBUSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7R0FDakMsUUFBUSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxFQUFFO0dBQ2pDLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUM3QixTQUFTO0dBQ1QsYUFBYTtHQUNiLFlBQVksSUFBSSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQztHQUN0QyxZQUFZLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7R0FDaEMsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksa0JBQWtCLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0dBQ3pELFFBQVEsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztHQUMzQyxRQUFRLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7R0FDL0IsUUFBUSxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7R0FDdkIsWUFBWSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0dBQzNFLFlBQVksSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztHQUNqQyxZQUFZLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7R0FDNUMsZ0JBQWdCLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksS0FBSyxDQUFDO0dBQzVDLGdCQUFnQixXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0dBQzVDLGFBQWE7R0FDYixTQUFTO0dBQ1QsUUFBUSxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDL0IsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGtCQUFrQixDQUFDO0dBQzlCLENBQUMsQ0FBQ0UsY0FBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDOztHQzNFM0IsTUFBTSxDQUFDLGNBQWMsQ0FBQzJMLE1BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJekUsY0FBWSxHQUFHNUgsVUFBNkIsQ0FBQztHQUNqRCxJQUFJa0csVUFBUSxHQUFHakcsUUFBbUIsQ0FBQztHQUNuQyxJQUFJbU0sWUFBVSxHQUFHL0wsVUFBcUIsQ0FBQztHQUN2QyxJQUFJaUwsZ0JBQWMsR0FBRy9LLGNBQXlCLENBQUM7R0FDL0MsSUFBSXVLLGtCQUFnQixHQUFHakssZ0JBQTJCLENBQUM7R0FDbkQsSUFBSUksWUFBVSxHQUFHSCxVQUEyQixDQUFDO0dBQzdDLFNBQVMsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUU7R0FDdkMsSUFBSSxJQUFJLGVBQWUsR0FBRyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQztHQUNoRCxJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHb0YsVUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxPQUFPLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHakYsWUFBVSxDQUFDLFFBQVEsRUFBRW1MLFlBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsZUFBZSxHQUFHdEIsa0JBQWdCLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxHQUFHUSxnQkFBYyxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsT0FBTyxJQUFJMUQsY0FBWSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQzNVLENBQUM7Y0FDVyxHQUFHOzs7O0dDWGYsSUFBSXBILFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQzZMLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJNUwsY0FBWSxHQUFHVixZQUF3QixDQUFDO0dBQzVDLFNBQVMsS0FBSyxDQUFDLEtBQUssRUFBRTtHQUN0QixJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDL0UsQ0FBQztnQkFDWSxHQUFHLE1BQU07R0FDdEIsSUFBSSxhQUFhLElBQUksWUFBWTtHQUNqQyxJQUFJLFNBQVMsYUFBYSxDQUFDLEtBQUssRUFBRTtHQUNsQyxRQUFRLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0dBQzNCLEtBQUs7R0FDTCxJQUFJLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUNqRSxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGVBQWUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7R0FDN0UsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGFBQWEsQ0FBQztHQUN6QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ0wsSUFBSSxlQUFlLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDekMsSUFBSVEsV0FBUyxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUN2QyxJQUFJLFNBQVMsZUFBZSxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUU7R0FDakQsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztHQUM1QixRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLGVBQWUsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxFQUFFO0dBQ25ELFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQzFDLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxlQUFlLENBQUM7R0FDM0IsQ0FBQyxDQUFDRSxjQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7R0N2QzNCLElBQUlGLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQzhMLGFBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJN0wsY0FBWSxHQUFHVixZQUF3QixDQUFDO0dBQzVDLElBQUksY0FBYyxHQUFHQyxZQUEwQixDQUFDO0dBQ2hELFNBQVMsV0FBVyxHQUFHO0dBQ3ZCLElBQUksT0FBTyxTQUFTLDJCQUEyQixDQUFDLE1BQU0sRUFBRTtHQUN4RCxRQUFRLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLG1CQUFtQixFQUFFLENBQUMsQ0FBQztHQUN0RCxLQUFLLENBQUM7R0FDTixDQUFDOzRCQUNrQixHQUFHLFlBQVk7R0FDbEMsSUFBSSxtQkFBbUIsSUFBSSxZQUFZO0dBQ3ZDLElBQUksU0FBUyxtQkFBbUIsR0FBRztHQUNuQyxLQUFLO0dBQ0wsSUFBSSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUN2RSxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7R0FDdkUsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLG1CQUFtQixDQUFDO0dBQy9CLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLHFCQUFxQixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQy9DLElBQUlPLFdBQVMsQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUM3QyxJQUFJLFNBQVMscUJBQXFCLENBQUMsV0FBVyxFQUFFO0dBQ2hELFFBQVEsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDdEQsS0FBSztHQUNMLElBQUkscUJBQXFCLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUM3RCxRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7R0FDN0UsS0FBSyxDQUFDO0dBQ04sSUFBSSxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFVBQVUsR0FBRyxFQUFFO0dBQzVELFFBQVEsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztHQUMzQyxRQUFRLFdBQVcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztHQUN2RSxRQUFRLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUMvQixLQUFLLENBQUM7R0FDTixJQUFJLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBWTtHQUM1RCxRQUFRLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7R0FDM0MsUUFBUSxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztHQUN2RSxRQUFRLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUMvQixLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8scUJBQXFCLENBQUM7R0FDakMsQ0FBQyxDQUFDRSxjQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7Ozs7O0dDakQzQixJQUFJRixXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUMrTCxNQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSTlMLGNBQVksR0FBR1YsWUFBd0IsQ0FBQztHQUM1QyxTQUFTLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFO0dBQ2pDLElBQUksSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDO0dBQ3hCLElBQUksSUFBSSxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtHQUMvQixRQUFRLE9BQU8sR0FBRyxJQUFJLENBQUM7R0FDdkIsS0FBSztHQUNMLElBQUksT0FBTyxTQUFTLG9CQUFvQixDQUFDLE1BQU0sRUFBRTtHQUNqRCxRQUFRLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFlBQVksQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7R0FDekUsS0FBSyxDQUFDO0dBQ04sQ0FBQztjQUNXLEdBQUcsS0FBSztHQUNwQixJQUFJLFlBQVksSUFBSSxZQUFZO0dBQ2hDLElBQUksU0FBUyxZQUFZLENBQUMsV0FBVyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUU7R0FDdEQsUUFBUSxJQUFJLE9BQU8sS0FBSyxLQUFLLENBQUMsRUFBRSxFQUFFLE9BQU8sR0FBRyxLQUFLLENBQUMsRUFBRTtHQUNwRCxRQUFRLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0dBQ3ZDLFFBQVEsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7R0FDekIsUUFBUSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztHQUMvQixLQUFLO0dBQ0wsSUFBSSxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDaEUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxjQUFjLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztHQUMzRyxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sWUFBWSxDQUFDO0dBQ3hCLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLGNBQWMsSUFBSSxVQUFVLE1BQU0sRUFBRTtHQUN4QyxJQUFJUSxXQUFTLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQ3RDLElBQUksU0FBUyxjQUFjLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFO0dBQ3RFLFFBQVEsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLElBQUksSUFBSSxDQUFDO0dBQzNELFFBQVEsS0FBSyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7R0FDeEMsUUFBUSxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztHQUM1QixRQUFRLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0dBQ2hDLFFBQVEsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7R0FDeEIsUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFO0dBQzVELFFBQVEsR0FBRyxFQUFFLFlBQVk7R0FDekIsWUFBWSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7R0FDOUIsU0FBUztHQUNULFFBQVEsR0FBRyxFQUFFLFVBQVUsS0FBSyxFQUFFO0dBQzlCLFlBQVksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7R0FDaEMsWUFBWSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztHQUMvQixTQUFTO0dBQ1QsUUFBUSxVQUFVLEVBQUUsSUFBSTtHQUN4QixRQUFRLFlBQVksRUFBRSxJQUFJO0dBQzFCLEtBQUssQ0FBQyxDQUFDO0dBQ1AsSUFBSSxjQUFjLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUN0RCxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO0dBQzNCLFlBQVksSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7R0FDOUIsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUN6QyxTQUFTO0dBQ1QsYUFBYTtHQUNiLFlBQVksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ3hDLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLGNBQWMsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQ3pELFFBQVEsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0dBQ2pDLFFBQVEsSUFBSSxNQUFNLENBQUM7R0FDbkIsUUFBUSxJQUFJO0dBQ1osWUFBWSxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztHQUMvRCxTQUFTO0dBQ1QsUUFBUSxPQUFPLEdBQUcsRUFBRTtHQUNwQixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ3hDLFNBQVM7R0FDVCxRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO0dBQzNCLFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDdEMsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGNBQWMsQ0FBQztHQUMxQixDQUFDLENBQUNFLGNBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQzs7R0NoRjNCLE1BQU0sQ0FBQyxjQUFjLENBQUMrTCxRQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSUQsUUFBTSxHQUFHeE0sTUFBaUIsQ0FBQztHQUMvQixJQUFJb00sWUFBVSxHQUFHbk0sVUFBcUIsQ0FBQztHQUN2QyxJQUFJNkssa0JBQWdCLEdBQUd6SyxnQkFBMkIsQ0FBQztHQUNuRCxJQUFJLE1BQU0sR0FBR0UsTUFBdUIsQ0FBQztHQUNyQyxTQUFTLE1BQU0sQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFO0dBQ25DLElBQUksSUFBSSxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtHQUMvQixRQUFRLE9BQU8sU0FBUyw4QkFBOEIsQ0FBQyxNQUFNLEVBQUU7R0FDL0QsWUFBWSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUNpTSxRQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRUosWUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRXRCLGtCQUFnQixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQ3RJLFNBQVMsQ0FBQztHQUNWLEtBQUs7R0FDTCxJQUFJLE9BQU8sU0FBUyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUU7R0FDbkQsUUFBUSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMwQixRQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxPQUFPLFdBQVcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRUosWUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQ3JKLEtBQUssQ0FBQztHQUNOLENBQUM7a0JBQ2EsR0FBRzs7R0NmakIsTUFBTSxDQUFDLGNBQWMsQ0FBQ00sS0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUlELFVBQVEsR0FBR3pNLFFBQW1CLENBQUM7R0FDbkMsU0FBUyxHQUFHLENBQUMsUUFBUSxFQUFFO0dBQ3ZCLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxPQUFPLFFBQVEsS0FBSyxVQUFVO0dBQzdDLFVBQVUsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsT0FBTyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDaEUsVUFBVSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDcEQsSUFBSSxPQUFPeU0sVUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUNoQyxDQUFDO1lBQ1UsR0FBRzs7OztHQ1JkLE1BQU0sQ0FBQyxjQUFjLENBQUNFLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJL0csU0FBTyxHQUFHNUYsT0FBOEIsQ0FBQztHQUM3QyxTQUFTLEtBQUssR0FBRztHQUNqQixJQUFJLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztHQUN6QixJQUFJLEtBQUssSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFO0dBQ2xELFFBQVEsV0FBVyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUN4QyxLQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzRGLFNBQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDckgsQ0FBQztnQkFDWSxHQUFHOzs7O0dDVGhCLE1BQU0sQ0FBQyxjQUFjLENBQUNnSCxZQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSS9ILFlBQVUsR0FBRzdFLFVBQXFCLENBQUM7R0FDdkMsU0FBUyxVQUFVLENBQUMsZUFBZSxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUU7R0FDakUsSUFBSSxJQUFJLFVBQVUsS0FBSyxLQUFLLENBQUMsRUFBRSxFQUFFLFVBQVUsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRTtHQUN6RSxJQUFJLElBQUksT0FBTyxjQUFjLEtBQUssVUFBVSxFQUFFO0dBQzlDLFFBQVEsT0FBTzZFLFlBQVUsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLE9BQU8sZUFBZSxDQUFDLEVBQUUsRUFBRSxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUM7R0FDeEcsS0FBSztHQUNMLElBQUksSUFBSSxPQUFPLGNBQWMsS0FBSyxRQUFRLEVBQUU7R0FDNUMsUUFBUSxVQUFVLEdBQUcsY0FBYyxDQUFDO0dBQ3BDLEtBQUs7R0FDTCxJQUFJLE9BQU9BLFlBQVUsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLE9BQU8sZUFBZSxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztHQUNwRixDQUFDOzBCQUNpQixHQUFHOzs7O0dDWnJCLElBQUlyRSxXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUNvTSxXQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSWpJLGtCQUFnQixHQUFHNUUsZ0JBQTRCLENBQUM7R0FDcEQsU0FBUyxTQUFTLENBQUMsV0FBVyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7R0FDbEQsSUFBSSxJQUFJLFVBQVUsS0FBSyxLQUFLLENBQUMsRUFBRSxFQUFFLFVBQVUsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRTtHQUN6RSxJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQzNHLENBQUM7d0JBQ2dCLEdBQUcsVUFBVTtHQUM5QixJQUFJLGlCQUFpQixJQUFJLFlBQVk7R0FDckMsSUFBSSxTQUFTLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0dBQzlELFFBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7R0FDdkMsUUFBUSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztHQUN6QixRQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0dBQ3JDLEtBQUs7R0FDTCxJQUFJLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxVQUFVLEVBQUUsTUFBTSxFQUFFO0dBQ3JFLFFBQVEsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksbUJBQW1CLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztHQUNuSCxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8saUJBQWlCLENBQUM7R0FDN0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQ0FDb0IsR0FBRyxrQkFBa0I7R0FDOUMsSUFBSSxtQkFBbUIsSUFBSSxVQUFVLE1BQU0sRUFBRTtHQUM3QyxJQUFJUSxXQUFTLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDM0MsSUFBSSxTQUFTLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRTtHQUM1RSxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0dBQ3hDLFFBQVEsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7R0FDeEIsUUFBUSxLQUFLLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztHQUN0QyxRQUFRLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0dBQy9CLFFBQVEsS0FBSyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7R0FDbkMsUUFBUSxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztHQUMxQixRQUFRLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0dBQ3pCLFFBQVEsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7R0FDeEIsUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQzNELFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUU7R0FDM0MsWUFBWSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7R0FDckMsWUFBWSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0dBQy9DLFlBQVksSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUM7R0FDN0IsWUFBWSxJQUFJO0dBQ2hCLGdCQUFnQixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0dBQ25ELGdCQUFnQixHQUFHLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQzFELGFBQWE7R0FDYixZQUFZLE9BQU8sQ0FBQyxFQUFFO0dBQ3RCLGdCQUFnQixPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDNUMsYUFBYTtHQUNiLFlBQVksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0dBQzFCLFlBQVksSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUNoQyxTQUFTO0dBQ1QsYUFBYTtHQUNiLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDcEMsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFVLEdBQUcsRUFBRTtHQUM3RCxRQUFRLElBQUksZUFBZSxHQUFHLElBQUlvRSxrQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUMvRSxRQUFRLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7R0FDM0MsUUFBUSxXQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0dBQ3pDLFFBQVEsSUFBSSxpQkFBaUIsR0FBR0Esa0JBQWdCLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxlQUFlLENBQUMsQ0FBQztHQUN0RixRQUFRLElBQUksaUJBQWlCLEtBQUssZUFBZSxFQUFFO0dBQ25ELFlBQVksV0FBVyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0dBQy9DLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBWTtHQUMxRCxRQUFRLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0dBQ2pDLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7R0FDM0QsWUFBWSxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssS0FBSyxFQUFFO0dBQ3pDLGdCQUFnQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDaEQsYUFBYTtHQUNiLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUN4QyxTQUFTO0dBQ1QsUUFBUSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDM0IsS0FBSyxDQUFDO0dBQ04sSUFBSSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVUsVUFBVSxFQUFFO0dBQ3JFLFFBQVEsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztHQUMzQyxRQUFRLElBQUksQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDO0dBQzlCLFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7R0FDN0IsUUFBUSxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0dBQ3JDLEtBQUssQ0FBQztHQUNOLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxZQUFZO0dBQy9ELFFBQVEsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztHQUNqQyxRQUFRLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztHQUN0QixRQUFRLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7R0FDL0IsWUFBWSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0dBQ3ZDLFNBQVM7R0FDVCxhQUFhLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtHQUN6RCxZQUFZLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxLQUFLLEVBQUU7R0FDekMsZ0JBQWdCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUNoRCxhQUFhO0dBQ2IsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQ3hDLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sbUJBQW1CLENBQUM7R0FDL0IsQ0FBQyxDQUFDQSxrQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7a0NBQ2hCLEdBQUc7Ozs7R0N6RzlCLE1BQU0sQ0FBQyxjQUFjLENBQUNrSSxLQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSUwsVUFBUSxHQUFHek0sUUFBbUIsQ0FBQztHQUNuQyxTQUFTLEdBQUcsQ0FBQyxRQUFRLEVBQUU7R0FDdkIsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLE9BQU8sUUFBUSxLQUFLLFVBQVU7R0FDN0MsVUFBVSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxPQUFPLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUNoRSxVQUFVLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUNwRCxJQUFJLE9BQU95TSxVQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ2hDLENBQUM7WUFDVSxHQUFHOzs7O0dDUmQsTUFBTSxDQUFDLGNBQWMsQ0FBQ00sV0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUksdUJBQXVCLEdBQUcvTSx1QkFBOEMsQ0FBQztHQUM3RSxTQUFTLFNBQVMsQ0FBQyx1QkFBdUIsRUFBRSxRQUFRLEVBQUU7R0FDdEQsSUFBSSxPQUFPLFNBQVMseUJBQXlCLENBQUMsTUFBTSxFQUFFO0dBQ3RELFFBQVEsSUFBSSxjQUFjLENBQUM7R0FDM0IsUUFBUSxJQUFJLE9BQU8sdUJBQXVCLEtBQUssVUFBVSxFQUFFO0dBQzNELFlBQVksY0FBYyxHQUFHLHVCQUF1QixDQUFDO0dBQ3JELFNBQVM7R0FDVCxhQUFhO0dBQ2IsWUFBWSxjQUFjLEdBQUcsU0FBUyxjQUFjLEdBQUc7R0FDdkQsZ0JBQWdCLE9BQU8sdUJBQXVCLENBQUM7R0FDL0MsYUFBYSxDQUFDO0dBQ2QsU0FBUztHQUNULFFBQVEsSUFBSSxPQUFPLFFBQVEsS0FBSyxVQUFVLEVBQUU7R0FDNUMsWUFBWSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztHQUNoRixTQUFTO0dBQ1QsUUFBUSxJQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSx1QkFBdUIsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0dBQ3pHLFFBQVEsV0FBVyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7R0FDcEMsUUFBUSxXQUFXLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztHQUNwRCxRQUFRLE9BQU8sV0FBVyxDQUFDO0dBQzNCLEtBQUssQ0FBQztHQUNOLENBQUM7d0JBQ2dCLEdBQUcsVUFBVTtHQUM5QixJQUFJLGlCQUFpQixJQUFJLFlBQVk7R0FDckMsSUFBSSxTQUFTLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxRQUFRLEVBQUU7R0FDekQsUUFBUSxJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztHQUM3QyxRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0dBQ2pDLEtBQUs7R0FDTCxJQUFJLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxVQUFVLEVBQUUsTUFBTSxFQUFFO0dBQ3JFLFFBQVEsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztHQUNyQyxRQUFRLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztHQUM1QyxRQUFRLElBQUksWUFBWSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7R0FDbkUsUUFBUSxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztHQUNwRCxRQUFRLE9BQU8sWUFBWSxDQUFDO0dBQzVCLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxpQkFBaUIsQ0FBQztHQUM3QixDQUFDLEVBQUUsQ0FBQyxDQUFDO2dDQUNvQixHQUFHOzs7O0dDckM1QixJQUFJUSxXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUNxRixtQkFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUluQixRQUFNLEdBQUczRSxNQUE2QixDQUFDO0dBQzNDLElBQUlJLFdBQVMsR0FBR0gsT0FBMEIsQ0FBQztHQUMzQyxJQUFJMkUsa0JBQWdCLEdBQUd2RSxnQkFBNEIsQ0FBQztHQUNwRCxTQUFTLGlCQUFpQixHQUFHO0dBQzdCLElBQUksSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFDO0dBQ3pCLElBQUksS0FBSyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUU7R0FDbEQsUUFBUSxXQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ3hDLEtBQUs7R0FDTCxJQUFJLElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUlELFdBQVMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7R0FDdkUsUUFBUSxXQUFXLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ3JDLEtBQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSx5QkFBeUIsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUNqRyxDQUFDO3dDQUN3QixHQUFHLGtCQUFrQjtHQUM5QyxTQUFTLHVCQUF1QixHQUFHO0dBQ25DLElBQUksSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFDO0dBQ3pCLElBQUksS0FBSyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUU7R0FDbEQsUUFBUSxXQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ3hDLEtBQUs7R0FDTCxJQUFJLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztHQUMzQixJQUFJLElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUlBLFdBQVMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7R0FDdkUsUUFBUSxXQUFXLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ3JDLEtBQUs7R0FDTCxJQUFJLE1BQU0sR0FBRyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7R0FDakMsSUFBSSxPQUFPdUUsUUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSx5QkFBeUIsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0dBQ2hGLENBQUM7OENBQzhCLEdBQUcsd0JBQXdCO0dBQzFELElBQUkseUJBQXlCLElBQUksWUFBWTtHQUM3QyxJQUFJLFNBQVMseUJBQXlCLENBQUMsV0FBVyxFQUFFO0dBQ3BELFFBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7R0FDdkMsS0FBSztHQUNMLElBQUkseUJBQXlCLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDN0UsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSwyQkFBMkIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7R0FDL0YsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLHlCQUF5QixDQUFDO0dBQ3JDLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLDJCQUEyQixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQ3JELElBQUluRSxXQUFTLENBQUMsMkJBQTJCLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDbkQsSUFBSSxTQUFTLDJCQUEyQixDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUU7R0FDbkUsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztHQUN4QyxRQUFRLEtBQUssQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0dBQ3hDLFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUksMkJBQTJCLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxZQUFZO0dBQ3BFLFFBQVEsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7R0FDckMsS0FBSyxDQUFDO0dBQ04sSUFBSSwyQkFBMkIsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFlBQVk7R0FDdkUsUUFBUSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztHQUNyQyxLQUFLLENBQUM7R0FDTixJQUFJLDJCQUEyQixDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsVUFBVSxHQUFHLEVBQUU7R0FDbEUsUUFBUSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztHQUNyQyxRQUFRLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztHQUMzQixLQUFLLENBQUM7R0FDTixJQUFJLDJCQUEyQixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBWTtHQUNsRSxRQUFRLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0dBQ3JDLFFBQVEsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQzNCLEtBQUssQ0FBQztHQUNOLElBQUksMkJBQTJCLENBQUMsU0FBUyxDQUFDLHFCQUFxQixHQUFHLFlBQVk7R0FDOUUsUUFBUSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO0dBQzVDLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFO0dBQ3BCLFlBQVksSUFBSSxlQUFlLEdBQUcsSUFBSW9FLGtCQUFnQixDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ25GLFlBQVksSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztHQUMvQyxZQUFZLFdBQVcsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7R0FDN0MsWUFBWSxJQUFJLGlCQUFpQixHQUFHQSxrQkFBZ0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0dBQzNGLFlBQVksSUFBSSxpQkFBaUIsS0FBSyxlQUFlLEVBQUU7R0FDdkQsZ0JBQWdCLFdBQVcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztHQUNuRCxhQUFhO0dBQ2IsU0FBUztHQUNULGFBQWE7R0FDYixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDeEMsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksT0FBTywyQkFBMkIsQ0FBQztHQUN2QyxDQUFDLENBQUNBLGtCQUFnQixDQUFDLHFCQUFxQixDQUFDLENBQUM7Ozs7R0N4RjFDLElBQUlwRSxXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUN1TSxVQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSXRNLGNBQVksR0FBR1YsWUFBd0IsQ0FBQztHQUM1QyxTQUFTLFFBQVEsR0FBRztHQUNwQixJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQzdFLENBQUM7c0JBQ2UsR0FBRyxTQUFTO0dBQzVCLElBQUksZ0JBQWdCLElBQUksWUFBWTtHQUNwQyxJQUFJLFNBQVMsZ0JBQWdCLEdBQUc7R0FDaEMsS0FBSztHQUNMLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDcEUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0dBQ3BFLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxnQkFBZ0IsQ0FBQztHQUM1QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ0wsSUFBSSxrQkFBa0IsSUFBSSxVQUFVLE1BQU0sRUFBRTtHQUM1QyxJQUFJUSxXQUFTLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDMUMsSUFBSSxTQUFTLGtCQUFrQixDQUFDLFdBQVcsRUFBRTtHQUM3QyxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0dBQzlCLFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUksa0JBQWtCLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUMxRCxRQUFRLElBQUksSUFBSSxDQUFDO0dBQ2pCLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO0dBQzFCLFlBQVksSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztHQUN0QyxTQUFTO0dBQ1QsYUFBYTtHQUNiLFlBQVksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7R0FDaEMsU0FBUztHQUNULFFBQVEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7R0FDMUIsUUFBUSxJQUFJLElBQUksRUFBRTtHQUNsQixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ3hDLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sa0JBQWtCLENBQUM7R0FDOUIsQ0FBQyxDQUFDRSxjQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7R0NoRDNCLE1BQU0sQ0FBQyxjQUFjLENBQUMwRixXQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSSxLQUFLLEdBQUdwRyxLQUFzQixDQUFDO0dBQ25DLElBQUlrRyxVQUFRLEdBQUdqRyxRQUFtQixDQUFDO0dBQ25DLFNBQVMsU0FBUyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7R0FDdkMsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTztHQUN0QyxRQUFRaUcsVUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDO0dBQ25ELFFBQVFBLFVBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7R0FDOUQsS0FBSyxDQUFDLEVBQUUsQ0FBQztHQUNULENBQUM7d0JBQ2dCLEdBQUc7Ozs7R0NUcEIsTUFBTSxDQUFDLGNBQWMsQ0FBQytHLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJNUosT0FBSyxHQUFHckQsS0FBZ0IsQ0FBQztHQUM3QixTQUFTLEtBQUssR0FBRztHQUNqQixJQUFJLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQztHQUN4QixJQUFJLEtBQUssSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFO0dBQ2xELFFBQVEsVUFBVSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUN2QyxLQUFLO0dBQ0wsSUFBSSxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0dBQ25DLElBQUksSUFBSSxNQUFNLEtBQUssQ0FBQyxFQUFFO0dBQ3RCLFFBQVEsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0dBQy9ELEtBQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPcUQsT0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLENBQUM7Z0JBQ1ksR0FBRyxNQUFNO0dBQ3RCLFNBQVMsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7R0FDaEMsSUFBSSxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsRUFBRTtHQUM5QixRQUFRLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztHQUM1QixRQUFRLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7R0FDekMsWUFBWSxJQUFJLENBQUMsR0FBRyxXQUFXLElBQUksSUFBSSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUM7R0FDNUUsWUFBWSxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRTtHQUM5QixnQkFBZ0IsV0FBVyxHQUFHLENBQUMsQ0FBQztHQUNoQyxhQUFhO0dBQ2IsaUJBQWlCO0dBQ2pCLGdCQUFnQixPQUFPLFNBQVMsQ0FBQztHQUNqQyxhQUFhO0dBQ2IsU0FBUztHQUNULFFBQVEsT0FBTyxXQUFXLENBQUM7R0FDM0IsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLE1BQU0sQ0FBQztHQUNsQjs7OztHQzdCQSxNQUFNLENBQUMsY0FBYyxDQUFDNkosU0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUk1TCxXQUFTLEdBQUd0QixTQUFxQixDQUFDO0dBQ3RDLElBQUkrTSxhQUFXLEdBQUc5TSxXQUFzQixDQUFDO0dBQ3pDLFNBQVMsT0FBTyxDQUFDLFFBQVEsRUFBRTtHQUMzQixJQUFJLE9BQU8sUUFBUTtHQUNuQixRQUFROE0sYUFBVyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsT0FBTyxJQUFJekwsV0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUM7R0FDeEYsUUFBUXlMLGFBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSXpMLFdBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0dBQ3ZELENBQUM7b0JBQ2MsR0FBRzs7OztHQ1JsQixNQUFNLENBQUMsY0FBYyxDQUFDNkwsaUJBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJLGlCQUFpQixHQUFHbk4saUJBQTZCLENBQUM7R0FDdEQsSUFBSStNLGFBQVcsR0FBRzlNLFdBQXNCLENBQUM7R0FDekMsU0FBUyxlQUFlLENBQUMsS0FBSyxFQUFFO0dBQ2hDLElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRSxFQUFFLE9BQU84TSxhQUFXLENBQUMsU0FBUyxDQUFDLElBQUksaUJBQWlCLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3JILENBQUM7b0NBQ3NCLEdBQUc7Ozs7R0NOMUIsTUFBTSxDQUFDLGNBQWMsQ0FBQ0ssYUFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUksY0FBYyxHQUFHcE4sY0FBMEIsQ0FBQztHQUNoRCxJQUFJK00sYUFBVyxHQUFHOU0sV0FBc0IsQ0FBQztHQUN6QyxTQUFTLFdBQVcsR0FBRztHQUN2QixJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPOE0sYUFBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUMxRyxDQUFDOzRCQUNrQixHQUFHOzs7O0dDTnRCLE1BQU0sQ0FBQyxjQUFjLENBQUNNLGVBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJMUssaUJBQWUsR0FBRzNDLGVBQTJCLENBQUM7R0FDbEQsSUFBSStNLGFBQVcsR0FBRzlNLFdBQXNCLENBQUM7R0FDekMsU0FBUyxhQUFhLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxtQkFBbUIsRUFBRSxTQUFTLEVBQUU7R0FDL0UsSUFBSSxJQUFJLG1CQUFtQixJQUFJLE9BQU8sbUJBQW1CLEtBQUssVUFBVSxFQUFFO0dBQzFFLFFBQVEsU0FBUyxHQUFHLG1CQUFtQixDQUFDO0dBQ3hDLEtBQUs7R0FDTCxJQUFJLElBQUksUUFBUSxHQUFHLE9BQU8sbUJBQW1CLEtBQUssVUFBVSxHQUFHLG1CQUFtQixHQUFHLFNBQVMsQ0FBQztHQUMvRixJQUFJLElBQUksT0FBTyxHQUFHLElBQUkwQyxpQkFBZSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQ3ZGLElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRSxFQUFFLE9BQU9vSyxhQUFXLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxPQUFPLE9BQU8sQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ2xILENBQUM7Z0NBQ29CLEdBQUc7Ozs7R0NYeEIsTUFBTSxDQUFDLGNBQWMsQ0FBQ08sTUFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUksU0FBUyxHQUFHdE4sT0FBMEIsQ0FBQztHQUMzQyxJQUFJc0csUUFBTSxHQUFHckcsTUFBNkIsQ0FBQztHQUMzQyxTQUFTLElBQUksR0FBRztHQUNoQixJQUFJLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztHQUN6QixJQUFJLEtBQUssSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFO0dBQ2xELFFBQVEsV0FBVyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUN4QyxLQUFLO0dBQ0wsSUFBSSxPQUFPLFNBQVMsb0JBQW9CLENBQUMsTUFBTSxFQUFFO0dBQ2pELFFBQVEsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0dBQzNFLFlBQVksV0FBVyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUN6QyxTQUFTO0dBQ1QsUUFBUSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDcUcsUUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ3pGLEtBQUssQ0FBQztHQUNOLENBQUM7Y0FDVyxHQUFHOzs7O0dDZmYsSUFBSTlGLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQzhNLFFBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJN00sY0FBWSxHQUFHVixZQUF3QixDQUFDO0dBQzVDLElBQUksT0FBTyxHQUFHQyxLQUE4QixDQUFDO0dBQzdDLFNBQVMsTUFBTSxDQUFDLEtBQUssRUFBRTtHQUN2QixJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7R0FDekMsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFO0dBQzdCLFFBQVEsSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0dBQ3pCLFlBQVksT0FBTyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7R0FDbkMsU0FBUztHQUNULGFBQWEsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO0dBQzVCLFlBQVksT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7R0FDL0QsU0FBUztHQUNULGFBQWE7R0FDYixZQUFZLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLGNBQWMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7R0FDdEUsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLENBQUM7a0JBQ2EsR0FBRyxPQUFPO0dBQ3hCLElBQUksY0FBYyxJQUFJLFlBQVk7R0FDbEMsSUFBSSxTQUFTLGNBQWMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO0dBQzNDLFFBQVEsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7R0FDM0IsUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztHQUM3QixLQUFLO0dBQ0wsSUFBSSxjQUFjLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDbEUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztHQUMzRixLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sY0FBYyxDQUFDO0dBQzFCLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLGdCQUFnQixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQzFDLElBQUlPLFdBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUN4QyxJQUFJLFNBQVMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7R0FDMUQsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztHQUM1QixRQUFRLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0dBQzlCLFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxZQUFZO0dBQ3RELFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7R0FDN0IsWUFBWSxJQUFJLEVBQUUsR0FBRyxJQUFJLEVBQUUsTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUM7R0FDaEUsWUFBWSxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7R0FDN0IsZ0JBQWdCLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQzVELGFBQWE7R0FDYixpQkFBaUIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDakMsZ0JBQWdCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztHQUN2QyxhQUFhO0dBQ2IsWUFBWSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLENBQUM7R0FDNUQsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxnQkFBZ0IsQ0FBQztHQUM1QixDQUFDLENBQUNFLGNBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQzs7OztHQzlEM0IsSUFBSUYsV0FBUyxHQUFHLENBQUNDLGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDK00sWUFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUlsTSxXQUFTLEdBQUd0QixTQUFxQixDQUFDO0dBQ3RDLElBQUk0RSxrQkFBZ0IsR0FBRzNFLGdCQUE0QixDQUFDO0dBQ3BELFNBQVMsVUFBVSxDQUFDLFFBQVEsRUFBRTtHQUM5QixJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixDQUFDOzBCQUNpQixHQUFHLFdBQVc7R0FDaEMsSUFBSSxrQkFBa0IsSUFBSSxZQUFZO0dBQ3RDLElBQUksU0FBUyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUU7R0FDMUMsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztHQUNqQyxLQUFLO0dBQ0wsSUFBSSxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUN0RSxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGtCQUFrQixDQUFDO0dBQzlCLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLG9CQUFvQixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQzlDLElBQUlPLFdBQVMsQ0FBQyxvQkFBb0IsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUM1QyxJQUFJLFNBQVMsb0JBQW9CLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7R0FDakUsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztHQUNsQyxRQUFRLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0dBQzlCLFFBQVEsS0FBSyxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQztHQUMvQyxRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsWUFBWTtHQUM1RCxRQUFRLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUM7R0FDOUMsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUNwQyxLQUFLLENBQUM7R0FDTixJQUFJLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsWUFBWTtHQUNoRSxRQUFRLElBQUksSUFBSSxDQUFDLHlCQUF5QixLQUFLLEtBQUssRUFBRTtHQUN0RCxZQUFZLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ3hELFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsWUFBWTtHQUMxRCxRQUFRLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxLQUFLLENBQUM7R0FDL0MsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtHQUM3QixZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO0dBQy9CLGdCQUFnQixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztHQUMxQyxhQUFhO0dBQ2IsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixJQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUU7R0FDOUUsZ0JBQWdCLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQzVELGFBQWE7R0FDYixZQUFZLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0dBQzFDLFlBQVksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7R0FDL0MsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxZQUFZO0dBQzlELFFBQVEsSUFBSSxFQUFFLEdBQUcsSUFBSSxFQUFFLGFBQWEsR0FBRyxFQUFFLENBQUMsYUFBYSxFQUFFLG1CQUFtQixHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztHQUN0RyxRQUFRLElBQUksYUFBYSxFQUFFO0dBQzNCLFlBQVksYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQ3hDLFlBQVksSUFBSSxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUM7R0FDM0MsU0FBUztHQUNULFFBQVEsSUFBSSxtQkFBbUIsRUFBRTtHQUNqQyxZQUFZLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQzlDLFlBQVksSUFBSSxDQUFDLG1CQUFtQixHQUFHLFNBQVMsQ0FBQztHQUNqRCxTQUFTO0dBQ1QsUUFBUSxJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztHQUNqQyxLQUFLLENBQUM7R0FDTixJQUFJLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsR0FBRyxZQUFZO0dBQ3hFLFFBQVEsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztHQUM3QyxRQUFRLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0dBQ2pDLFFBQVEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDM0QsUUFBUSxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztHQUN6QyxRQUFRLE9BQU8sSUFBSSxDQUFDO0dBQ3BCLEtBQUssQ0FBQztHQUNOLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLGtCQUFrQixHQUFHLFlBQVk7R0FDcEUsUUFBUSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUljLFdBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztHQUNyRCxRQUFRLElBQUksT0FBTyxDQUFDO0dBQ3BCLFFBQVEsSUFBSTtHQUNaLFlBQVksSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztHQUN6QyxZQUFZLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0dBQ25ELFNBQVM7R0FDVCxRQUFRLE9BQU8sQ0FBQyxFQUFFO0dBQ2xCLFlBQVksT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDeEQsU0FBUztHQUNULFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7R0FDL0IsUUFBUSxJQUFJLENBQUMsbUJBQW1CLEdBQUdzRCxrQkFBZ0IsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLElBQUlBLGtCQUFnQixDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7R0FDOUgsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLG9CQUFvQixDQUFDO0dBQ2hDLENBQUMsQ0FBQ0Esa0JBQWdCLENBQUMscUJBQXFCLENBQUMsQ0FBQzs7OztHQzdGMUMsSUFBSXBFLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQ2dOLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJL00sY0FBWSxHQUFHVixZQUF3QixDQUFDO0dBQzVDLFNBQVMsS0FBSyxDQUFDLEtBQUssRUFBRTtHQUN0QixJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7R0FDekMsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksYUFBYSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixDQUFDO2dCQUNZLEdBQUcsTUFBTTtHQUN0QixJQUFJLGFBQWEsSUFBSSxZQUFZO0dBQ2pDLElBQUksU0FBUyxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtHQUMxQyxRQUFRLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0dBQzNCLFFBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7R0FDN0IsS0FBSztHQUNMLElBQUksYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxVQUFVLEVBQUUsTUFBTSxFQUFFO0dBQ2pFLFFBQVEsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksZUFBZSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0dBQzFGLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxhQUFhLENBQUM7R0FDekIsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUksZUFBZSxJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQ3pDLElBQUlRLFdBQVMsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDdkMsSUFBSSxTQUFTLGVBQWUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRTtHQUN6RCxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0dBQzVCLFFBQVEsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7R0FDOUIsUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSxlQUFlLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEdBQUcsRUFBRTtHQUNyRCxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO0dBQzdCLFlBQVksSUFBSSxFQUFFLEdBQUcsSUFBSSxFQUFFLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO0dBQ2hFLFlBQVksSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0dBQzdCLGdCQUFnQixPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7R0FDOUQsYUFBYTtHQUNiLGlCQUFpQixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRTtHQUNqQyxnQkFBZ0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0dBQ3ZDLGFBQWE7R0FDYixZQUFZLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQztHQUM1RCxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGVBQWUsQ0FBQztHQUMzQixDQUFDLENBQUNFLGNBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQzs7OztHQ25EM0IsSUFBSUYsV0FBUyxHQUFHLENBQUNDLGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDaU4sV0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUlwTSxXQUFTLEdBQUd0QixTQUFxQixDQUFDO0dBQ3RDLElBQUk0RSxrQkFBZ0IsR0FBRzNFLGdCQUE0QixDQUFDO0dBQ3BELFNBQVMsU0FBUyxDQUFDLFFBQVEsRUFBRTtHQUM3QixJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDOUYsQ0FBQzt3QkFDZ0IsR0FBRyxVQUFVO0dBQzlCLElBQUksaUJBQWlCLElBQUksWUFBWTtHQUNyQyxJQUFJLFNBQVMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRTtHQUNqRCxRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0dBQ2pDLFFBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7R0FDN0IsS0FBSztHQUNMLElBQUksaUJBQWlCLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDckUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztHQUNqRyxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8saUJBQWlCLENBQUM7R0FDN0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUksbUJBQW1CLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDN0MsSUFBSU8sV0FBUyxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQzNDLElBQUksU0FBUyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtHQUNoRSxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0dBQ2xDLFFBQVEsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7R0FDOUIsUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsR0FBRyxFQUFFO0dBQ3pELFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7R0FDN0IsWUFBWSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0dBQ3JDLFlBQVksSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztHQUN2QyxZQUFZLElBQUksbUJBQW1CLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDO0dBQy9ELFlBQVksSUFBSSxDQUFDLE9BQU8sRUFBRTtHQUMxQixnQkFBZ0IsTUFBTSxHQUFHLElBQUljLFdBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztHQUNqRCxnQkFBZ0IsSUFBSTtHQUNwQixvQkFBb0IsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztHQUNqRCxvQkFBb0IsT0FBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUMvQyxpQkFBaUI7R0FDakIsZ0JBQWdCLE9BQU8sQ0FBQyxFQUFFO0dBQzFCLG9CQUFvQixPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDaEUsaUJBQWlCO0dBQ2pCLGdCQUFnQixtQkFBbUIsR0FBR3NELGtCQUFnQixDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsSUFBSUEsa0JBQWdCLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztHQUNqSSxhQUFhO0dBQ2IsaUJBQWlCO0dBQ2pCLGdCQUFnQixJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztHQUN4QyxnQkFBZ0IsSUFBSSxDQUFDLG1CQUFtQixHQUFHLFNBQVMsQ0FBQztHQUNyRCxhQUFhO0dBQ2IsWUFBWSxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztHQUMxQyxZQUFZLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0dBQ2pDLFlBQVksSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7R0FDbkMsWUFBWSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsbUJBQW1CLENBQUM7R0FDM0QsWUFBWSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQzdCLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsWUFBWTtHQUM3RCxRQUFRLElBQUksRUFBRSxHQUFHLElBQUksRUFBRSxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxtQkFBbUIsR0FBRyxFQUFFLENBQUMsbUJBQW1CLENBQUM7R0FDeEYsUUFBUSxJQUFJLE1BQU0sRUFBRTtHQUNwQixZQUFZLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztHQUNqQyxZQUFZLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO0dBQ3BDLFNBQVM7R0FDVCxRQUFRLElBQUksbUJBQW1CLEVBQUU7R0FDakMsWUFBWSxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztHQUM5QyxZQUFZLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxTQUFTLENBQUM7R0FDakQsU0FBUztHQUNULFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7R0FDakMsS0FBSyxDQUFDO0dBQ04sSUFBSSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFlBQVk7R0FDM0QsUUFBUSxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0dBQzdDLFFBQVEsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7R0FDakMsUUFBUSxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztHQUN0QyxRQUFRLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0dBQ3pDLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDcEMsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLG1CQUFtQixDQUFDO0dBQy9CLENBQUMsQ0FBQ0Esa0JBQWdCLENBQUMscUJBQXFCLENBQUMsQ0FBQzs7OztHQ3JGMUMsSUFBSXBFLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQ2tOLFFBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJL0ksa0JBQWdCLEdBQUc1RSxnQkFBNEIsQ0FBQztHQUNwRCxTQUFTLE1BQU0sQ0FBQyxRQUFRLEVBQUU7R0FDMUIsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ25GLENBQUM7a0JBQ2EsR0FBRyxPQUFPO0dBQ3hCLElBQUksY0FBYyxJQUFJLFlBQVk7R0FDbEMsSUFBSSxTQUFTLGNBQWMsQ0FBQyxRQUFRLEVBQUU7R0FDdEMsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztHQUNqQyxLQUFLO0dBQ0wsSUFBSSxjQUFjLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDbEUsUUFBUSxJQUFJLGdCQUFnQixHQUFHLElBQUksZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7R0FDaEUsUUFBUSxJQUFJLFlBQVksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7R0FDOUQsUUFBUSxZQUFZLENBQUMsR0FBRyxDQUFDNEUsa0JBQWdCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSUEsa0JBQWdCLENBQUMscUJBQXFCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDdkksUUFBUSxPQUFPLFlBQVksQ0FBQztHQUM1QixLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sY0FBYyxDQUFDO0dBQzFCLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLGdCQUFnQixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQzFDLElBQUlwRSxXQUFTLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDeEMsSUFBSSxTQUFTLGdCQUFnQixHQUFHO0dBQ2hDLFFBQVEsSUFBSSxLQUFLLEdBQUcsTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDN0UsUUFBUSxLQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztHQUMvQixRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDeEQsUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztHQUMzQixRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0dBQzdCLEtBQUssQ0FBQztHQUNOLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxZQUFZO0dBQ3hELFFBQVEsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0dBQ3pCLEtBQUssQ0FBQztHQUNOLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxZQUFZO0dBQzVELFFBQVEsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0dBQ3pCLEtBQUssQ0FBQztHQUNOLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0dBQ3ZELFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO0dBQzNCLFlBQVksSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7R0FDbEMsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDOUMsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxnQkFBZ0IsQ0FBQztHQUM1QixDQUFDLENBQUNvRSxrQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDOzs7O0dDdkQxQyxJQUFJcEUsV0FBUyxHQUFHLENBQUNDLGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDbU4sWUFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUlsTixjQUFZLEdBQUdWLFlBQXdCLENBQUM7R0FDNUMsSUFBSTJGLFNBQU8sR0FBRzFGLEtBQTZCLENBQUM7R0FDNUMsU0FBUyxVQUFVLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRTtHQUN2QyxJQUFJLElBQUksU0FBUyxLQUFLLEtBQUssQ0FBQyxFQUFFLEVBQUUsU0FBUyxHQUFHMEYsU0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0dBQzVELElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRSxFQUFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUNoRyxDQUFDOzBCQUNpQixHQUFHLFdBQVc7R0FDaEMsSUFBSSxrQkFBa0IsSUFBSSxZQUFZO0dBQ3RDLElBQUksU0FBUyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFO0dBQ25ELFFBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7R0FDN0IsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztHQUNuQyxLQUFLO0dBQ0wsSUFBSSxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUN0RSxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0dBQ25HLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxrQkFBa0IsQ0FBQztHQUM5QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ0wsSUFBSSxvQkFBb0IsSUFBSSxVQUFVLE1BQU0sRUFBRTtHQUM5QyxJQUFJbkYsV0FBUyxDQUFDLG9CQUFvQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQzVDLElBQUksU0FBUyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRTtHQUNsRSxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0dBQzlCLFFBQVEsS0FBSyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7R0FDcEMsUUFBUSxLQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztHQUMvQixRQUFRLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDM0csUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQzVELFFBQVEsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7R0FDL0IsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztHQUM3QixLQUFLLENBQUM7R0FDTixJQUFJLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsWUFBWTtHQUM1RCxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtHQUMzQixZQUFZLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0dBQ2xDLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0dBQ2xELFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sb0JBQW9CLENBQUM7R0FDaEMsQ0FBQyxDQUFDRSxjQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztHQUM1QixTQUFTLG9CQUFvQixDQUFDLEtBQUssRUFBRTtHQUNyQyxJQUFJLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLEVBQUUsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7R0FDN0QsSUFBSSxVQUFVLENBQUMsVUFBVSxFQUFFLENBQUM7R0FDNUIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztHQUNqQzs7OztHQ3pEQSxJQUFJRixXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUNvTixlQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSW5OLGNBQVksR0FBR1YsWUFBd0IsQ0FBQztHQUM1QyxTQUFTLGFBQWEsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFO0dBQzlDLElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRSxFQUFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLHFCQUFxQixDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RyxDQUFDO2dDQUNvQixHQUFHLGNBQWM7R0FDdEMsSUFBSSxxQkFBcUIsSUFBSSxZQUFZO0dBQ3pDLElBQUksU0FBUyxxQkFBcUIsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFO0dBQzFELFFBQVEsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7R0FDbkMsUUFBUSxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztHQUNyQyxLQUFLO0dBQ0wsSUFBSSxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUN6RSxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLHVCQUF1QixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0dBQzFHLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxxQkFBcUIsQ0FBQztHQUNqQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO3dDQUN3QixHQUFHLHNCQUFzQjtHQUN0RCxJQUFJLHVCQUF1QixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQ2pELElBQUlRLFdBQVMsQ0FBQyx1QkFBdUIsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUMvQyxJQUFJLFNBQVMsdUJBQXVCLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUU7R0FDekUsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztHQUNwQyxRQUFRLEtBQUssQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0dBQ3RDLFFBQVEsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7R0FDdEIsUUFBUSxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztHQUN0QixRQUFRLEtBQUssQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO0dBQ25DLFFBQVEsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLGdDQUFnQyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDN0csUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQy9ELFFBQVEsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtHQUN2RCxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDN0IsU0FBUztHQUNULGFBQWE7R0FDYixZQUFZLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ2hDLFlBQVksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQy9CLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBWTtHQUM5RCxRQUFRLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtHQUMvQixZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDO0dBQ3BFLFNBQVM7R0FDVCxhQUFhO0dBQ2IsWUFBWSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztHQUNyQyxTQUFTO0dBQ1QsUUFBUSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDM0IsS0FBSyxDQUFDO0dBQ04sSUFBSSx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFlBQVk7R0FDaEUsUUFBUSxJQUFJLEVBQUUsR0FBRyxJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsVUFBVSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUM7R0FDMUUsUUFBUSxPQUFPLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0dBQy9DLFlBQVksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0dBQy9CLFlBQVksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0dBQy9CLFlBQVksSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDO0dBQ2pDLFlBQVksSUFBSTtHQUNoQixnQkFBZ0IsUUFBUSxHQUFHLFVBQVUsR0FBRyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDbkUsYUFBYTtHQUNiLFlBQVksT0FBTyxDQUFDLEVBQUU7R0FDdEIsZ0JBQWdCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQzFDLGFBQWE7R0FDYixZQUFZLElBQUksQ0FBQyxRQUFRLEVBQUU7R0FDM0IsZ0JBQWdCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDakMsYUFBYTtHQUNiLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDOUQsUUFBUSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0dBQzNDLFFBQVEsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUNoQyxRQUFRLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUMvQixLQUFLLENBQUM7R0FDTixJQUFJLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDL0QsUUFBUSxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0dBQ3ZELFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUM3QixTQUFTO0dBQ1QsYUFBYTtHQUNiLFlBQVksSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDaEMsWUFBWSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDL0IsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksdUJBQXVCLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0dBQzlELFFBQVEsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO0dBQy9CLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUM7R0FDcEUsU0FBUztHQUNULGFBQWE7R0FDYixZQUFZLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0dBQ3JDLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sdUJBQXVCLENBQUM7R0FDbkMsQ0FBQyxDQUFDRSxjQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQzswQ0FDRyxHQUFHLHdCQUF3QjtHQUMxRCxJQUFJLGdDQUFnQyxJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQzFELElBQUlGLFdBQVMsQ0FBQyxnQ0FBZ0MsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUN4RCxJQUFJLFNBQVMsZ0NBQWdDLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRTtHQUNuRSxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0dBQzlCLFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUksZ0NBQWdDLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUN4RSxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ2pDLEtBQUssQ0FBQztHQUNOLElBQUksZ0NBQWdDLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxVQUFVLEdBQUcsRUFBRTtHQUN2RSxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQy9CLFFBQVEsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQzNCLEtBQUssQ0FBQztHQUNOLElBQUksZ0NBQWdDLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0dBQ3ZFLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztHQUNoQyxRQUFRLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztHQUMzQixLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sZ0NBQWdDLENBQUM7R0FDNUMsQ0FBQyxDQUFDRSxjQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7R0N6SDNCLE1BQU0sQ0FBQyxjQUFjLENBQUNvTixPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSWYsYUFBVyxHQUFHL00sV0FBc0IsQ0FBQztHQUN6QyxJQUFJd0IsWUFBVSxHQUFHdkIsVUFBcUIsQ0FBQztHQUN2QyxJQUFJcUIsV0FBUyxHQUFHakIsU0FBcUIsQ0FBQztHQUN0QyxTQUFTLG1CQUFtQixHQUFHO0dBQy9CLElBQUksT0FBTyxJQUFJaUIsV0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO0dBQ25DLENBQUM7R0FDRCxTQUFTLEtBQUssR0FBRztHQUNqQixJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPRSxZQUFVLENBQUMsUUFBUSxFQUFFLENBQUN1TCxhQUFXLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDbkgsQ0FBQztnQkFDWSxHQUFHOzs7O0dDVmhCLE1BQU0sQ0FBQyxjQUFjLENBQUNnQixhQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSSxlQUFlLEdBQUcvTixlQUEyQixDQUFDO0dBQ2xELFNBQVMsV0FBVyxDQUFDLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7R0FDaEUsSUFBSSxJQUFJLE1BQU0sQ0FBQztHQUNmLElBQUksSUFBSSxrQkFBa0IsSUFBSSxPQUFPLGtCQUFrQixLQUFLLFFBQVEsRUFBRTtHQUN0RSxRQUFRLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQztHQUNwQyxLQUFLO0dBQ0wsU0FBUztHQUNULFFBQVEsTUFBTSxHQUFHO0dBQ2pCLFlBQVksVUFBVSxFQUFFLGtCQUFrQjtHQUMxQyxZQUFZLFVBQVUsRUFBRSxVQUFVO0dBQ2xDLFlBQVksUUFBUSxFQUFFLEtBQUs7R0FDM0IsWUFBWSxTQUFTLEVBQUUsU0FBUztHQUNoQyxTQUFTLENBQUM7R0FDVixLQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ2xGLENBQUM7NEJBQ2tCLEdBQUcsWUFBWTtHQUNsQyxTQUFTLG1CQUFtQixDQUFDLEVBQUUsRUFBRTtHQUNqQyxJQUFJLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxVQUFVLEVBQUUsVUFBVSxHQUFHLEVBQUUsS0FBSyxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsVUFBVSxFQUFFLFVBQVUsR0FBRyxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixHQUFHLEVBQUUsRUFBRSxXQUFXLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxTQUFTLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQztHQUM1TixJQUFJLElBQUksT0FBTyxDQUFDO0dBQ2hCLElBQUksSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0dBQ3JCLElBQUksSUFBSSxZQUFZLENBQUM7R0FDckIsSUFBSSxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUM7R0FDekIsSUFBSSxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7R0FDM0IsSUFBSSxPQUFPLFNBQVMsb0JBQW9CLENBQUMsTUFBTSxFQUFFO0dBQ2pELFFBQVEsUUFBUSxFQUFFLENBQUM7R0FDbkIsUUFBUSxJQUFJLFFBQVEsQ0FBQztHQUNyQixRQUFRLElBQUksQ0FBQyxPQUFPLElBQUksUUFBUSxFQUFFO0dBQ2xDLFlBQVksUUFBUSxHQUFHLEtBQUssQ0FBQztHQUM3QixZQUFZLE9BQU8sR0FBRyxJQUFJLGVBQWUsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztHQUMzRixZQUFZLFFBQVEsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQy9DLFlBQVksWUFBWSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7R0FDNUMsZ0JBQWdCLElBQUksRUFBRSxVQUFVLEtBQUssRUFBRSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtHQUMvRCxnQkFBZ0IsS0FBSyxFQUFFLFVBQVUsR0FBRyxFQUFFO0dBQ3RDLG9CQUFvQixRQUFRLEdBQUcsSUFBSSxDQUFDO0dBQ3BDLG9CQUFvQixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ3ZDLGlCQUFpQjtHQUNqQixnQkFBZ0IsUUFBUSxFQUFFLFlBQVk7R0FDdEMsb0JBQW9CLFVBQVUsR0FBRyxJQUFJLENBQUM7R0FDdEMsb0JBQW9CLFlBQVksR0FBRyxTQUFTLENBQUM7R0FDN0Msb0JBQW9CLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUN2QyxpQkFBaUI7R0FDakIsYUFBYSxDQUFDLENBQUM7R0FDZixTQUFTO0dBQ1QsYUFBYTtHQUNiLFlBQVksUUFBUSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDL0MsU0FBUztHQUNULFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZO0dBQzdCLFlBQVksUUFBUSxFQUFFLENBQUM7R0FDdkIsWUFBWSxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDbkMsWUFBWSxJQUFJLFlBQVksSUFBSSxDQUFDLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLENBQUMsRUFBRTtHQUM5RSxnQkFBZ0IsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQzNDLGdCQUFnQixZQUFZLEdBQUcsU0FBUyxDQUFDO0dBQ3pDLGdCQUFnQixPQUFPLEdBQUcsU0FBUyxDQUFDO0dBQ3BDLGFBQWE7R0FDYixTQUFTLENBQUMsQ0FBQztHQUNYLEtBQUssQ0FBQztHQUNOOzs7O0dDMURBLElBQUlRLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQ3VOLFFBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJdE4sY0FBWSxHQUFHVixZQUF3QixDQUFDO0dBQzVDLElBQUksWUFBWSxHQUFHQyxVQUE2QixDQUFDO0dBQ2pELFNBQVMsTUFBTSxDQUFDLFNBQVMsRUFBRTtHQUMzQixJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxjQUFjLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQzVGLENBQUM7a0JBQ2EsR0FBRyxPQUFPO0dBQ3hCLElBQUksY0FBYyxJQUFJLFlBQVk7R0FDbEMsSUFBSSxTQUFTLGNBQWMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFO0dBQy9DLFFBQVEsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7R0FDbkMsUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztHQUM3QixLQUFLO0dBQ0wsSUFBSSxjQUFjLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDbEUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztHQUMvRixLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sY0FBYyxDQUFDO0dBQzFCLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLGdCQUFnQixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQzFDLElBQUlPLFdBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUN4QyxJQUFJLFNBQVMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUU7R0FDOUQsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztHQUNwQyxRQUFRLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0dBQzlCLFFBQVEsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7R0FDaEMsUUFBUSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztHQUN4QixRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLEtBQUssRUFBRTtHQUNuRSxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtHQUM1QixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7R0FDOUUsU0FBUztHQUNULGFBQWE7R0FDYixZQUFZLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0dBQ2xDLFlBQVksSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7R0FDckMsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUN4RCxRQUFRLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztHQUNqQyxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtHQUM1QixZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQ3ZDLFNBQVM7R0FDVCxhQUFhO0dBQ2IsWUFBWSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDekMsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxVQUFVLEtBQUssRUFBRSxLQUFLLEVBQUU7R0FDakUsUUFBUSxJQUFJO0dBQ1osWUFBWSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7R0FDM0QsZ0JBQWdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUM3QyxhQUFhO0dBQ2IsU0FBUztHQUNULFFBQVEsT0FBTyxHQUFHLEVBQUU7R0FDcEIsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUN4QyxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFlBQVk7R0FDdkQsUUFBUSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0dBQzNDLFFBQVEsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRTtHQUM1QixZQUFZLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0dBQzVFLFlBQVksV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQ25DLFNBQVM7R0FDVCxhQUFhO0dBQ2IsWUFBWSxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0dBQzNELFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sZ0JBQWdCLENBQUM7R0FDNUIsQ0FBQyxDQUFDRSxjQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7R0MvRTNCLElBQUlGLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQ3dOLE1BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJdk4sY0FBWSxHQUFHVixZQUF3QixDQUFDO0dBQzVDLFNBQVMsSUFBSSxDQUFDLEtBQUssRUFBRTtHQUNyQixJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDOUUsQ0FBQztjQUNXLEdBQUcsS0FBSztHQUNwQixJQUFJLFlBQVksSUFBSSxZQUFZO0dBQ2hDLElBQUksU0FBUyxZQUFZLENBQUMsS0FBSyxFQUFFO0dBQ2pDLFFBQVEsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7R0FDM0IsS0FBSztHQUNMLElBQUksWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxVQUFVLEVBQUUsTUFBTSxFQUFFO0dBQ2hFLFFBQVEsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksY0FBYyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztHQUM1RSxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sWUFBWSxDQUFDO0dBQ3hCLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLGNBQWMsSUFBSSxVQUFVLE1BQU0sRUFBRTtHQUN4QyxJQUFJUSxXQUFTLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQ3RDLElBQUksU0FBUyxjQUFjLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRTtHQUNoRCxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0dBQzVCLFFBQVEsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7R0FDeEIsUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSxjQUFjLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsRUFBRTtHQUNsRCxRQUFRLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7R0FDdkMsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNyQyxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGNBQWMsQ0FBQztHQUMxQixDQUFDLENBQUNFLGNBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQzs7OztHQzFDM0IsSUFBSUYsV0FBUyxHQUFHLENBQUNDLGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDeU4sVUFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUl4TixjQUFZLEdBQUdWLFlBQXdCLENBQUM7R0FDNUMsSUFBSSx5QkFBeUIsR0FBR0MsdUJBQTBDLENBQUM7R0FDM0UsU0FBUyxRQUFRLENBQUMsS0FBSyxFQUFFO0dBQ3pCLElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRSxFQUFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ2xGLENBQUM7c0JBQ2UsR0FBRyxTQUFTO0dBQzVCLElBQUksZ0JBQWdCLElBQUksWUFBWTtHQUNwQyxJQUFJLFNBQVMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFO0dBQzFDLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7R0FDckMsUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxFQUFFO0dBQ2pDLFlBQVksTUFBTSxJQUFJLHlCQUF5QixDQUFDLHVCQUF1QixDQUFDO0dBQ3hFLFNBQVM7R0FDVCxLQUFLO0dBQ0wsSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUNwRSxRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxDQUFDLEVBQUU7R0FDbkMsWUFBWSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSVMsY0FBWSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0dBQzdFLFNBQVM7R0FDVCxhQUFhO0dBQ2IsWUFBWSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7R0FDekYsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxnQkFBZ0IsQ0FBQztHQUM1QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ0wsSUFBSSxrQkFBa0IsSUFBSSxVQUFVLE1BQU0sRUFBRTtHQUM1QyxJQUFJRixXQUFTLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDMUMsSUFBSSxTQUFTLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUU7R0FDekQsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztHQUN0QyxRQUFRLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0dBQ3pCLFFBQVEsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztHQUM1QyxRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDMUQsUUFBUSxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0dBQ3hDLFFBQVEsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0dBQ2xDLFFBQVEsSUFBSSxLQUFLLEdBQUcsU0FBUyxFQUFFO0dBQy9CLFlBQVksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7R0FDdEMsU0FBUztHQUNULGFBQWE7R0FDYixZQUFZLElBQUksWUFBWSxHQUFHLEtBQUssR0FBRyxTQUFTLENBQUM7R0FDakQsWUFBWSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0dBQ2xDLFlBQVksSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0dBQzlDLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEtBQUssQ0FBQztHQUN2QyxZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQzVDLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sa0JBQWtCLENBQUM7R0FDOUIsQ0FBQyxDQUFDRSxjQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7R0M3RDNCLElBQUlGLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQzBOLFdBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJdkosa0JBQWdCLEdBQUc1RSxnQkFBNEIsQ0FBQztHQUNwRCxTQUFTLFNBQVMsQ0FBQyxRQUFRLEVBQUU7R0FDN0IsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdEYsQ0FBQzt3QkFDZ0IsR0FBRyxVQUFVO0dBQzlCLElBQUksaUJBQWlCLElBQUksWUFBWTtHQUNyQyxJQUFJLFNBQVMsaUJBQWlCLENBQUMsUUFBUSxFQUFFO0dBQ3pDLFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7R0FDakMsS0FBSztHQUNMLElBQUksaUJBQWlCLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFdBQVcsRUFBRSxNQUFNLEVBQUU7R0FDdEUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7R0FDckYsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGlCQUFpQixDQUFDO0dBQzdCLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLG1CQUFtQixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQzdDLElBQUlRLFdBQVMsQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUMzQyxJQUFJLFNBQVMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRTtHQUN4RCxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0dBQy9CLFFBQVEsSUFBSSxlQUFlLEdBQUcsSUFBSW9FLGtCQUFnQixDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ2hGLFFBQVEsS0FBSyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztHQUNuQyxRQUFRLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxlQUFlLENBQUM7R0FDbEQsUUFBUSxJQUFJLGlCQUFpQixHQUFHQSxrQkFBZ0IsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0dBQzNGLFFBQVEsSUFBSSxpQkFBaUIsS0FBSyxlQUFlLEVBQUU7R0FDbkQsWUFBWSxLQUFLLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7R0FDekMsWUFBWSxLQUFLLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7R0FDeEQsU0FBUztHQUNULFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUMzRCxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtHQUMzQixZQUFZLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7R0FDckQsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxZQUFZO0dBQzNELFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7R0FDN0IsUUFBUSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtHQUNwQyxZQUFZLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztHQUNqRCxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFlBQVk7R0FDL0QsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLG1CQUFtQixDQUFDO0dBQy9CLENBQUMsQ0FBQ0Esa0JBQWdCLENBQUMscUJBQXFCLENBQUMsQ0FBQzs7OztHQ3pEMUMsSUFBSXBFLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQzJOLFdBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJMU4sY0FBWSxHQUFHVixZQUF3QixDQUFDO0dBQzVDLFNBQVMsU0FBUyxDQUFDLFNBQVMsRUFBRTtHQUM5QixJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixDQUFDO3dCQUNnQixHQUFHLFVBQVU7R0FDOUIsSUFBSSxpQkFBaUIsSUFBSSxZQUFZO0dBQ3JDLElBQUksU0FBUyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUU7R0FDMUMsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztHQUNuQyxLQUFLO0dBQ0wsSUFBSSxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUNyRSxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLG1CQUFtQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztHQUNyRixLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8saUJBQWlCLENBQUM7R0FDN0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUksbUJBQW1CLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDN0MsSUFBSVEsV0FBUyxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQzNDLElBQUksU0FBUyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFO0dBQ3pELFFBQVEsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLElBQUksSUFBSSxDQUFDO0dBQzNELFFBQVEsS0FBSyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7R0FDcEMsUUFBUSxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztHQUM5QixRQUFRLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0dBQ3hCLFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUMzRCxRQUFRLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7R0FDM0MsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7R0FDM0IsWUFBWSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDekMsU0FBUztHQUNULFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7R0FDNUIsWUFBWSxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ3BDLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLEtBQUssRUFBRTtHQUN0RSxRQUFRLElBQUk7R0FDWixZQUFZLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0dBQzdELFlBQVksSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDNUMsU0FBUztHQUNULFFBQVEsT0FBTyxHQUFHLEVBQUU7R0FDcEIsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUN4QyxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLG1CQUFtQixDQUFDO0dBQy9CLENBQUMsQ0FBQ0UsY0FBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7O0dDeEQzQixNQUFNLENBQUMsY0FBYyxDQUFDMk4sV0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUlySixVQUFRLEdBQUdoRixRQUErQixDQUFDO0dBQy9DLElBQUlrQyxlQUFhLEdBQUdqQyxhQUE4QixDQUFDO0dBQ25ELFNBQVMsU0FBUyxHQUFHO0dBQ3JCLElBQUksSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO0dBQ25CLElBQUksS0FBSyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUU7R0FDbEQsUUFBUSxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ2xDLEtBQUs7R0FDTCxJQUFJLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0dBQzVDLElBQUksSUFBSWlDLGVBQWEsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUU7R0FDOUMsUUFBUSxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7R0FDcEIsUUFBUSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTzhDLFVBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsS0FBSztHQUNMLFNBQVM7R0FDVCxRQUFRLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPQSxVQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDNUUsS0FBSztHQUNMLENBQUM7d0JBQ2dCLEdBQUc7Ozs7OztHQ2pCcEIsSUFBSXhFLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQzZOLHVCQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSSxZQUFZLEdBQUd0TyxZQUF3QixDQUFDO0dBQzVDLElBQUksTUFBTSxHQUFHQyxJQUE0QixDQUFDO0dBQzFDLElBQUl3RixhQUFXLEdBQUdwRixXQUE0QixDQUFDO0dBQy9DLElBQUkscUJBQXFCLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDL0MsSUFBSUcsV0FBUyxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQzdDLElBQUksU0FBUyxxQkFBcUIsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRTtHQUNqRSxRQUFRLElBQUksU0FBUyxLQUFLLEtBQUssQ0FBQyxFQUFFLEVBQUUsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQ3BELFFBQVEsSUFBSSxTQUFTLEtBQUssS0FBSyxDQUFDLEVBQUUsRUFBRSxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO0dBQzlELFFBQVEsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDOUMsUUFBUSxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztHQUM5QixRQUFRLEtBQUssQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0dBQ3BDLFFBQVEsS0FBSyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7R0FDcEMsUUFBUSxJQUFJLENBQUNpRixhQUFXLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLFNBQVMsR0FBRyxDQUFDLEVBQUU7R0FDaEUsWUFBWSxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztHQUNoQyxTQUFTO0dBQ1QsUUFBUSxJQUFJLENBQUMsU0FBUyxJQUFJLE9BQU8sU0FBUyxDQUFDLFFBQVEsS0FBSyxVQUFVLEVBQUU7R0FDcEUsWUFBWSxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7R0FDMUMsU0FBUztHQUNULFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUkscUJBQXFCLENBQUMsTUFBTSxHQUFHLFVBQVUsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7R0FDdkUsUUFBUSxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRTtHQUM1QyxRQUFRLElBQUksU0FBUyxLQUFLLEtBQUssQ0FBQyxFQUFFLEVBQUUsU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtHQUM5RCxRQUFRLE9BQU8sSUFBSSxxQkFBcUIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQ25FLEtBQUssQ0FBQztHQUNOLElBQUkscUJBQXFCLENBQUMsUUFBUSxHQUFHLFVBQVUsR0FBRyxFQUFFO0dBQ3BELFFBQVEsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxVQUFVLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQztHQUM3RCxRQUFRLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7R0FDdEQsS0FBSyxDQUFDO0dBQ04sSUFBSSxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVUsVUFBVSxFQUFFO0dBQ3ZFLFFBQVEsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztHQUNuQyxRQUFRLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7R0FDakMsUUFBUSxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO0dBQ3ZDLFFBQVEsT0FBTyxTQUFTLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUU7R0FDekUsWUFBWSxNQUFNLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxVQUFVO0dBQ2xELFNBQVMsQ0FBQyxDQUFDO0dBQ1gsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLHFCQUFxQixDQUFDO0dBQ2pDLENBQUMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztnREFDQyxHQUFHOztHQ3JEaEMsTUFBTSxDQUFDLGNBQWMsQ0FBQzhJLGFBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJLHVCQUF1QixHQUFHdk8sdUJBQThDLENBQUM7R0FDN0UsU0FBUyxXQUFXLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRTtHQUN2QyxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQ3hDLElBQUksT0FBTyxTQUFTLDJCQUEyQixDQUFDLE1BQU0sRUFBRTtHQUN4RCxRQUFRLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0dBQ3RFLEtBQUssQ0FBQztHQUNOLENBQUM7NEJBQ2tCLEdBQUcsWUFBWTtHQUNsQyxJQUFJLG1CQUFtQixJQUFJLFlBQVk7R0FDdkMsSUFBSSxTQUFTLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUU7R0FDbkQsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztHQUNuQyxRQUFRLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0dBQzNCLEtBQUs7R0FDTCxJQUFJLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxVQUFVLEVBQUUsTUFBTSxFQUFFO0dBQ3ZFLFFBQVEsT0FBTyxJQUFJLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7R0FDM0gsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLG1CQUFtQixDQUFDO0dBQy9CLENBQUMsRUFBRSxDQUFDOzs7Ozs7R0NsQkosSUFBSVEsV0FBUyxHQUFHLENBQUNDLGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDK04sV0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUluTCxPQUFLLEdBQUdyRCxLQUFnQixDQUFDO0dBQzdCLElBQUksTUFBTSxHQUFHQyxNQUE2QixDQUFDO0dBQzNDLElBQUkyRSxrQkFBZ0IsR0FBR3ZFLGdCQUE0QixDQUFDO0dBQ3BELFNBQVMsU0FBUyxDQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUU7R0FDNUMsSUFBSSxJQUFJLE9BQU8sY0FBYyxLQUFLLFVBQVUsRUFBRTtHQUM5QyxRQUFRLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDZ0QsT0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxPQUFPLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3RNLEtBQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUNyRixDQUFDO3dCQUNnQixHQUFHLFVBQVU7R0FDOUIsSUFBSSxpQkFBaUIsSUFBSSxZQUFZO0dBQ3JDLElBQUksU0FBUyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUU7R0FDeEMsUUFBUSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztHQUMvQixLQUFLO0dBQ0wsSUFBSSxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUNyRSxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLG1CQUFtQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztHQUNuRixLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8saUJBQWlCLENBQUM7R0FDN0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUksbUJBQW1CLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDN0MsSUFBSTdDLFdBQVMsQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUMzQyxJQUFJLFNBQVMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRTtHQUN2RCxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0dBQ2hDLFFBQVEsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7R0FDeEIsUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQzNELFFBQVEsSUFBSSxNQUFNLENBQUM7R0FDbkIsUUFBUSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7R0FDakMsUUFBUSxJQUFJO0dBQ1osWUFBWSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7R0FDaEQsU0FBUztHQUNULFFBQVEsT0FBTyxLQUFLLEVBQUU7R0FDdEIsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMxQyxZQUFZLE9BQU87R0FDbkIsU0FBUztHQUNULFFBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUMvQixLQUFLLENBQUM7R0FDTixJQUFJLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsVUFBVSxNQUFNLEVBQUU7R0FDaEUsUUFBUSxJQUFJLGlCQUFpQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztHQUN2RCxRQUFRLElBQUksaUJBQWlCLEVBQUU7R0FDL0IsWUFBWSxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztHQUM1QyxTQUFTO0dBQ1QsUUFBUSxJQUFJLGVBQWUsR0FBRyxJQUFJb0Usa0JBQWdCLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDL0UsUUFBUSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0dBQzNDLFFBQVEsV0FBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztHQUN6QyxRQUFRLElBQUksQ0FBQyxpQkFBaUIsR0FBR0Esa0JBQWdCLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQztHQUMxRixRQUFRLElBQUksSUFBSSxDQUFDLGlCQUFpQixLQUFLLGVBQWUsRUFBRTtHQUN4RCxZQUFZLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7R0FDcEQsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0dBQzFELFFBQVEsSUFBSSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUM7R0FDdkQsUUFBUSxJQUFJLENBQUMsaUJBQWlCLElBQUksaUJBQWlCLENBQUMsTUFBTSxFQUFFO0dBQzVELFlBQVksTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ2xELFNBQVM7R0FDVCxRQUFRLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztHQUMzQixLQUFLLENBQUM7R0FDTixJQUFJLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsWUFBWTtHQUM3RCxRQUFRLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLENBQUM7R0FDM0MsS0FBSyxDQUFDO0dBQ04sSUFBSSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFlBQVk7R0FDL0QsUUFBUSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO0dBQzNDLFFBQVEsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO0dBQzVCLFlBQVksTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ2xELFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsVUFBVSxVQUFVLEVBQUU7R0FDckUsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztHQUMxQyxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sbUJBQW1CLENBQUM7R0FDL0IsQ0FBQyxDQUFDQSxrQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDOztHQ3RGMUMsTUFBTSxDQUFDLGNBQWMsQ0FBQzZKLFdBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJRCxhQUFXLEdBQUd4TyxXQUFzQixDQUFDO0dBQ3pDLElBQUksVUFBVSxHQUFHQyxVQUEyQixDQUFDO0dBQzdDLFNBQVMsU0FBUyxHQUFHO0dBQ3JCLElBQUksT0FBT3VPLGFBQVcsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQ3RELENBQUM7d0JBQ2dCLEdBQUc7Ozs7R0NOcEIsTUFBTSxDQUFDLGNBQWMsQ0FBQ0UsYUFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUlGLGFBQVcsR0FBR3hPLFdBQXNCLENBQUM7R0FDekMsU0FBUyxXQUFXLENBQUMsZUFBZSxFQUFFLGNBQWMsRUFBRTtHQUN0RCxJQUFJLE9BQU8sY0FBYyxHQUFHd08sYUFBVyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsT0FBTyxlQUFlLENBQUMsRUFBRSxFQUFFLGNBQWMsQ0FBQyxHQUFHQSxhQUFXLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxPQUFPLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUM1SyxDQUFDOzRCQUNrQixHQUFHOzs7O0dDTHRCLElBQUloTyxXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUNrTyxXQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSS9KLGtCQUFnQixHQUFHNUUsZ0JBQTRCLENBQUM7R0FDcEQsU0FBUyxTQUFTLENBQUMsUUFBUSxFQUFFO0dBQzdCLElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRSxFQUFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3RGLENBQUM7d0JBQ2dCLEdBQUcsVUFBVTtHQUM5QixJQUFJLGlCQUFpQixJQUFJLFlBQVk7R0FDckMsSUFBSSxTQUFTLGlCQUFpQixDQUFDLFFBQVEsRUFBRTtHQUN6QyxRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0dBQ2pDLEtBQUs7R0FDTCxJQUFJLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxVQUFVLEVBQUUsTUFBTSxFQUFFO0dBQ3JFLFFBQVEsSUFBSSxtQkFBbUIsR0FBRyxJQUFJLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0dBQ3RFLFFBQVEsSUFBSSxvQkFBb0IsR0FBRzRFLGtCQUFnQixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUlBLGtCQUFnQixDQUFDLHFCQUFxQixDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztHQUNuSixRQUFRLElBQUksb0JBQW9CLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUU7R0FDcEUsWUFBWSxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztHQUMxRCxZQUFZLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0dBQ3pELFNBQVM7R0FDVCxRQUFRLE9BQU8sbUJBQW1CLENBQUM7R0FDbkMsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGlCQUFpQixDQUFDO0dBQzdCLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLG1CQUFtQixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQzdDLElBQUlwRSxXQUFTLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDM0MsSUFBSSxTQUFTLG1CQUFtQixDQUFDLFdBQVcsRUFBRTtHQUM5QyxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0dBQ2hDLFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxZQUFZO0dBQzNELFFBQVEsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7R0FDOUIsUUFBUSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDeEIsS0FBSyxDQUFDO0dBQ04sSUFBSSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFlBQVk7R0FDL0QsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLG1CQUFtQixDQUFDO0dBQy9CLENBQUMsQ0FBQ29FLGtCQUFnQixDQUFDLHFCQUFxQixDQUFDLENBQUM7Ozs7R0NoRDFDLElBQUlwRSxXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUNtTyxXQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSWxPLGNBQVksR0FBR1YsWUFBd0IsQ0FBQztHQUM1QyxTQUFTLFNBQVMsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFO0dBQ3pDLElBQUksSUFBSSxTQUFTLEtBQUssS0FBSyxDQUFDLEVBQUUsRUFBRSxTQUFTLEdBQUcsS0FBSyxDQUFDLEVBQUU7R0FDcEQsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFO0dBQzdCLFFBQVEsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksaUJBQWlCLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7R0FDeEUsS0FBSyxDQUFDO0dBQ04sQ0FBQzt3QkFDZ0IsR0FBRyxVQUFVO0dBQzlCLElBQUksaUJBQWlCLElBQUksWUFBWTtHQUNyQyxJQUFJLFNBQVMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRTtHQUNyRCxRQUFRLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0dBQ25DLFFBQVEsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7R0FDbkMsS0FBSztHQUNMLElBQUksaUJBQWlCLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDckUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztHQUNyRyxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8saUJBQWlCLENBQUM7R0FDN0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUksbUJBQW1CLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDN0MsSUFBSVEsV0FBUyxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQzNDLElBQUksU0FBUyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRTtHQUNwRSxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0dBQ3BDLFFBQVEsS0FBSyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7R0FDcEMsUUFBUSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztHQUN4QixRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDM0QsUUFBUSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0dBQzNDLFFBQVEsSUFBSSxNQUFNLENBQUM7R0FDbkIsUUFBUSxJQUFJO0dBQ1osWUFBWSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7R0FDekQsU0FBUztHQUNULFFBQVEsT0FBTyxHQUFHLEVBQUU7R0FDcEIsWUFBWSxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ25DLFlBQVksT0FBTztHQUNuQixTQUFTO0dBQ1QsUUFBUSxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztHQUMzQyxLQUFLLENBQUM7R0FDTixJQUFJLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsVUFBVSxLQUFLLEVBQUUsZUFBZSxFQUFFO0dBQ3JGLFFBQVEsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztHQUMzQyxRQUFRLElBQUksT0FBTyxDQUFDLGVBQWUsQ0FBQyxFQUFFO0dBQ3RDLFlBQVksV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUNwQyxTQUFTO0dBQ1QsYUFBYTtHQUNiLFlBQVksSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO0dBQ2hDLGdCQUFnQixXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ3hDLGFBQWE7R0FDYixZQUFZLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUNuQyxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLG1CQUFtQixDQUFDO0dBQy9CLENBQUMsQ0FBQ0UsY0FBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7O0dDbEUzQixJQUFJRixXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUNvTyxLQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSW5PLGNBQVksR0FBR1YsWUFBd0IsQ0FBQztHQUM1QyxJQUFJLE1BQU0sR0FBR0MsTUFBdUIsQ0FBQztHQUNyQyxJQUFJLFlBQVksR0FBR0ksWUFBNkIsQ0FBQztHQUNqRCxTQUFTLEdBQUcsQ0FBQyxjQUFjLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtHQUM5QyxJQUFJLE9BQU8sU0FBUyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUU7R0FDaEQsUUFBUSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxVQUFVLENBQUMsY0FBYyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0dBQzVFLEtBQUssQ0FBQztHQUNOLENBQUM7WUFDVSxHQUFHLElBQUk7R0FDbEIsSUFBSSxVQUFVLElBQUksWUFBWTtHQUM5QixJQUFJLFNBQVMsVUFBVSxDQUFDLGNBQWMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFO0dBQ3pELFFBQVEsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7R0FDN0MsUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztHQUMzQixRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0dBQ2pDLEtBQUs7R0FDTCxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUM5RCxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0dBQy9HLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxVQUFVLENBQUM7R0FDdEIsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUksYUFBYSxJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQ3ZDLElBQUlHLFdBQVMsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDckMsSUFBSSxTQUFTLGFBQWEsQ0FBQyxXQUFXLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUU7R0FDekUsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7R0FDckMsUUFBUSxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7R0FDdEMsUUFBUSxLQUFLLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7R0FDekMsUUFBUSxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDO0dBQy9DLFFBQVEsS0FBSyxDQUFDLFlBQVksR0FBRyxRQUFRLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQztHQUNyRCxRQUFRLElBQUksWUFBWSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsRUFBRTtHQUNyRCxZQUFZLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0dBQ25DLFlBQVksS0FBSyxDQUFDLFFBQVEsR0FBRyxjQUFjLENBQUM7R0FDNUMsU0FBUztHQUNULGFBQWEsSUFBSSxjQUFjLEVBQUU7R0FDakMsWUFBWSxLQUFLLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQztHQUM1QyxZQUFZLEtBQUssQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDO0dBQ2hFLFlBQVksS0FBSyxDQUFDLFNBQVMsR0FBRyxjQUFjLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUM7R0FDbEUsWUFBWSxLQUFLLENBQUMsWUFBWSxHQUFHLGNBQWMsQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQztHQUN4RSxTQUFTO0dBQ1QsUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSxhQUFhLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUNyRCxRQUFRLElBQUk7R0FDWixZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7R0FDckQsU0FBUztHQUNULFFBQVEsT0FBTyxHQUFHLEVBQUU7R0FDcEIsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUN4QyxZQUFZLE9BQU87R0FDbkIsU0FBUztHQUNULFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDckMsS0FBSyxDQUFDO0dBQ04sSUFBSSxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxVQUFVLEdBQUcsRUFBRTtHQUNwRCxRQUFRLElBQUk7R0FDWixZQUFZLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7R0FDcEQsU0FBUztHQUNULFFBQVEsT0FBTyxHQUFHLEVBQUU7R0FDcEIsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUN4QyxZQUFZLE9BQU87R0FDbkIsU0FBUztHQUNULFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDcEMsS0FBSyxDQUFDO0dBQ04sSUFBSSxhQUFhLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0dBQ3BELFFBQVEsSUFBSTtHQUNaLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQ2xELFNBQVM7R0FDVCxRQUFRLE9BQU8sR0FBRyxFQUFFO0dBQ3BCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDeEMsWUFBWSxPQUFPO0dBQ25CLFNBQVM7R0FDVCxRQUFRLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUMzQyxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sYUFBYSxDQUFDO0dBQ3pCLENBQUMsQ0FBQ0UsY0FBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7OztHQ3RGM0IsSUFBSSxTQUFTLEdBQUcsQ0FBQ0QsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLFVBQVUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSSxnQkFBZ0IsR0FBR1QsZ0JBQTRCLENBQUM7R0FDcEQsZ0NBQWdDO0dBQ2hDLElBQUksT0FBTyxFQUFFLElBQUk7R0FDakIsSUFBSSxRQUFRLEVBQUUsS0FBSztHQUNuQixDQUFDLENBQUM7R0FDRixTQUFTLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLEVBQUU7R0FDNUMsSUFBSSxJQUFJLE1BQU0sS0FBSyxLQUFLLENBQUMsRUFBRSxFQUFFLE1BQU0sR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsRUFBRTtHQUN0RSxJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ2xJLENBQUM7R0FDRCxtQkFBbUIsUUFBUSxDQUFDO0dBQzVCLElBQUksZ0JBQWdCLElBQUksWUFBWTtHQUNwQyxJQUFJLFNBQVMsZ0JBQWdCLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRTtHQUNuRSxRQUFRLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztHQUNqRCxRQUFRLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0dBQy9CLFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7R0FDakMsS0FBSztHQUNMLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDcEUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7R0FDeEgsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLGdCQUFnQixDQUFDO0dBQzVCLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLGtCQUFrQixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQzVDLElBQUksU0FBUyxDQUFDLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQzFDLElBQUksU0FBUyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRTtHQUNwRixRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0dBQ3hDLFFBQVEsS0FBSyxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO0dBQ2xELFFBQVEsS0FBSyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7R0FDbEMsUUFBUSxLQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztHQUNwQyxRQUFRLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0dBQ2hDLFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUksa0JBQWtCLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUMxRCxRQUFRLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0dBQzlCLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7R0FDaEMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtHQUM5QixZQUFZLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtHQUMvQixnQkFBZ0IsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0dBQzVCLGFBQWE7R0FDYixpQkFBaUI7R0FDakIsZ0JBQWdCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDckMsYUFBYTtHQUNiLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsWUFBWTtHQUNwRCxRQUFRLElBQUksRUFBRSxHQUFHLElBQUksRUFBRSxTQUFTLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxVQUFVLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQztHQUM1RSxRQUFRLElBQUksU0FBUyxFQUFFO0dBQ3ZCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7R0FDOUMsWUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0dBQ3RDLFNBQVM7R0FDVCxRQUFRLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0dBQy9CLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7R0FDcEMsS0FBSyxDQUFDO0dBQ04sSUFBSSxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQzdELFFBQVEsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ3ZELFFBQVEsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFO0dBQ3hCLFlBQVksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDcEksU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksa0JBQWtCLENBQUMsU0FBUyxDQUFDLG1CQUFtQixHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQ3hFLFFBQVEsSUFBSTtHQUNaLFlBQVksT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDaEQsU0FBUztHQUNULFFBQVEsT0FBTyxHQUFHLEVBQUU7R0FDcEIsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUN4QyxZQUFZLE9BQU8sSUFBSSxDQUFDO0dBQ3hCLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsWUFBWTtHQUM5RCxRQUFRLElBQUksRUFBRSxHQUFHLElBQUksRUFBRSxVQUFVLEdBQUcsRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQztHQUM1RSxRQUFRLElBQUksVUFBVSxFQUFFO0dBQ3hCLFlBQVksVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQ3JDLFNBQVM7R0FDVCxRQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO0dBQ3BDLFFBQVEsSUFBSSxTQUFTLEVBQUU7R0FDdkIsWUFBWSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7R0FDeEIsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksa0JBQWtCLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxZQUFZO0dBQzFELFFBQVEsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0dBQzlCLEtBQUssQ0FBQztHQUNOLElBQUksa0JBQWtCLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxZQUFZO0dBQzlELFFBQVEsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0dBQzlCLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxrQkFBa0IsQ0FBQztHQUM5QixDQUFDLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDOzs7Ozs7R0NuRzNDLElBQUlRLFdBQVMsR0FBRyxDQUFDQyxjQUFJLElBQUlBLGNBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxZQUFZO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ3hDLFFBQVEsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0dBQzdDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN4RixZQUFZLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUN2RixRQUFRLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNuQyxNQUFLO0dBQ0wsSUFBSSxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUMzQixRQUFRLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsUUFBUSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDL0MsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQzdGLEtBQUssQ0FBQztHQUNOLENBQUMsR0FBRyxDQUFDO0dBQ0wsTUFBTSxDQUFDLGNBQWMsQ0FBQ3FPLGNBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJcE8sY0FBWSxHQUFHVixZQUF3QixDQUFDO0dBQzVDLElBQUkyRixTQUFPLEdBQUcxRixLQUE2QixDQUFDO0dBQzVDLElBQUk4TyxZQUFVLEdBQUcxTyxRQUFxQixDQUFDO0dBQ3ZDLFNBQVMsWUFBWSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFO0dBQ25ELElBQUksSUFBSSxTQUFTLEtBQUssS0FBSyxDQUFDLEVBQUUsRUFBRSxTQUFTLEdBQUdzRixTQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7R0FDNUQsSUFBSSxJQUFJLE1BQU0sS0FBSyxLQUFLLENBQUMsRUFBRSxFQUFFLE1BQU0sR0FBR29KLFlBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO0dBQ3pFLElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRSxFQUFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDckksQ0FBQzs4QkFDbUIsR0FBRyxhQUFhO0dBQ3BDLElBQUksb0JBQW9CLElBQUksWUFBWTtHQUN4QyxJQUFJLFNBQVMsb0JBQW9CLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO0dBQzFFLFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7R0FDakMsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztHQUNuQyxRQUFRLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0dBQy9CLFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7R0FDakMsS0FBSztHQUNMLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDeEUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxzQkFBc0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7R0FDcEksS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLG9CQUFvQixDQUFDO0dBQ2hDLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLHNCQUFzQixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQ2hELElBQUl2TyxXQUFTLENBQUMsc0JBQXNCLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDOUMsSUFBSSxTQUFTLHNCQUFzQixDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUU7R0FDekYsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztHQUNsQyxRQUFRLEtBQUssQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0dBQ3BDLFFBQVEsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7R0FDaEMsUUFBUSxLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztHQUNsQyxRQUFRLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7R0FDeEMsUUFBUSxLQUFLLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztHQUNwQyxRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDOUQsUUFBUSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7R0FDNUIsWUFBWSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7R0FDL0IsZ0JBQWdCLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0dBQzVDLGdCQUFnQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO0dBQzlDLGFBQWE7R0FDYixTQUFTO0dBQ1QsYUFBYTtHQUNiLFlBQVksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNsSCxZQUFZLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtHQUM5QixnQkFBZ0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDN0MsYUFBYTtHQUNiLGlCQUFpQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7R0FDcEMsZ0JBQWdCLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0dBQzVDLGdCQUFnQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO0dBQzlDLGFBQWE7R0FDYixTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFlBQVk7R0FDN0QsUUFBUSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtHQUNwQyxZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztHQUN2RCxZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDeEMsU0FBUztHQUNULGFBQWE7R0FDYixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDeEMsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksc0JBQXNCLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxZQUFZO0dBQ2pFLFFBQVEsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztHQUN2QyxRQUFRLElBQUksU0FBUyxFQUFFO0dBQ3ZCLFlBQVksSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtHQUN6RCxnQkFBZ0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0dBQzNELGdCQUFnQixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztHQUMzQyxnQkFBZ0IsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztHQUMvQyxhQUFhO0dBQ2IsWUFBWSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDcEMsWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0dBQ25DLFlBQVksSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7R0FDbEMsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxzQkFBc0IsQ0FBQztHQUNsQyxDQUFDLENBQUNFLGNBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFNBQVMsWUFBWSxDQUFDLEdBQUcsRUFBRTtHQUMzQixJQUFJLElBQUksVUFBVSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUM7R0FDcEMsSUFBSSxVQUFVLENBQUMsYUFBYSxFQUFFLENBQUM7R0FDL0I7Ozs7R0M1RkEsTUFBTSxDQUFDLGNBQWMsQ0FBQ3NPLGNBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJckosU0FBTyxHQUFHM0YsS0FBNkIsQ0FBQztHQUM1QyxJQUFJd00sUUFBTSxHQUFHdk0sTUFBaUIsQ0FBQztHQUMvQixJQUFJLE9BQU8sR0FBR0ksT0FBOEIsQ0FBQztHQUM3QyxJQUFJZ0QsT0FBSyxHQUFHOUMsS0FBZ0IsQ0FBQztHQUM3QixTQUFTLFlBQVksQ0FBQyxTQUFTLEVBQUU7R0FDakMsSUFBSSxJQUFJLFNBQVMsS0FBSyxLQUFLLENBQUMsRUFBRSxFQUFFLFNBQVMsR0FBR29GLFNBQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtHQUM1RCxJQUFJLE9BQU8sVUFBVSxNQUFNLEVBQUUsRUFBRSxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWTtHQUNoRSxRQUFRLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQzZHLFFBQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsS0FBSyxFQUFFO0dBQzVELFlBQVksSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQztHQUNyQyxZQUFZLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFO0dBQy9FLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBRW5KLE9BQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUU7R0FDckcsWUFBWSxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO0dBQ3ZFLFlBQVksT0FBTyxJQUFJLFlBQVksQ0FBQyxLQUFLLEVBQUUsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDO0dBQzNELFNBQVMsQ0FBQyxDQUFDLENBQUM7R0FDWixLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDVixDQUFDOzhCQUNtQixHQUFHLGFBQWE7R0FDcEMsSUFBSSxZQUFZLElBQUksWUFBWTtHQUNoQyxJQUFJLFNBQVMsWUFBWSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7R0FDM0MsUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztHQUMzQixRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0dBQ2pDLEtBQUs7R0FDTCxJQUFJLE9BQU8sWUFBWSxDQUFDO0dBQ3hCLENBQUMsRUFBRSxDQUFDLENBQUM7OEJBQ2UsR0FBRzs7Ozs7O0dDekJ2QixJQUFJN0MsV0FBUyxHQUFHLENBQUNDLGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDd08sYUFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUl0SixTQUFPLEdBQUczRixLQUE2QixDQUFDO0dBQzVDLElBQUksUUFBUSxHQUFHQyxRQUF5QixDQUFDO0dBQ3pDLElBQUkyRSxrQkFBZ0IsR0FBR3ZFLGdCQUE0QixDQUFDO0dBQ3BELFNBQVMsV0FBVyxDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsU0FBUyxFQUFFO0dBQ3JELElBQUksSUFBSSxTQUFTLEtBQUssS0FBSyxDQUFDLEVBQUUsRUFBRSxTQUFTLEdBQUdzRixTQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7R0FDNUQsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFO0dBQzdCLFFBQVEsSUFBSSxlQUFlLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUNuRCxRQUFRLElBQUksT0FBTyxHQUFHLGVBQWUsSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUNqRixRQUFRLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7R0FDekcsS0FBSyxDQUFDO0dBQ04sQ0FBQzs0QkFDa0IsR0FBRyxZQUFZO0dBQ2xDLElBQUksbUJBQW1CLElBQUksWUFBWTtHQUN2QyxJQUFJLFNBQVMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsU0FBUyxFQUFFO0dBQ3RGLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7R0FDL0IsUUFBUSxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztHQUMvQyxRQUFRLElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO0dBQzdDLFFBQVEsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7R0FDbkMsS0FBSztHQUNMLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDdkUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxxQkFBcUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7R0FDaEosS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLG1CQUFtQixDQUFDO0dBQy9CLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLHFCQUFxQixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQy9DLElBQUluRixXQUFTLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDN0MsSUFBSSxTQUFTLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUU7R0FDckcsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztHQUNoRCxRQUFRLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0dBQ2hDLFFBQVEsS0FBSyxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7R0FDOUMsUUFBUSxLQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztHQUNwQyxRQUFRLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztHQUNoQyxRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLHFCQUFxQixDQUFDLGVBQWUsR0FBRyxVQUFVLFVBQVUsRUFBRTtHQUNsRSxRQUFRLElBQUksY0FBYyxHQUFHLFVBQVUsQ0FBQyxjQUFjLENBQUM7R0FDdkQsUUFBUSxVQUFVLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztHQUM1QyxRQUFRLFVBQVUsQ0FBQyxHQUFHLENBQUNvRSxrQkFBZ0IsQ0FBQyxjQUFjLENBQUMsY0FBYyxFQUFFLElBQUlBLGtCQUFnQixDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNoSSxLQUFLLENBQUM7R0FDTixJQUFJLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsWUFBWTtHQUNsRSxRQUFRLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7R0FDakMsUUFBUSxJQUFJLE1BQU0sRUFBRTtHQUNwQixZQUFZLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0dBQzlELFNBQVM7R0FDVCxhQUFhO0dBQ2IsWUFBWSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztHQUN2SCxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQzdELFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7R0FDbkMsWUFBWSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7R0FDbkMsU0FBUztHQUNULFFBQVEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztHQUNqRCxLQUFLLENBQUM7R0FDTixJQUFJLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsWUFBWTtHQUMvRCxRQUFRLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO0dBQ2hDLFFBQVEsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7R0FDOUIsUUFBUSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztHQUNuQyxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8scUJBQXFCLENBQUM7R0FDakMsQ0FBQyxDQUFDQSxrQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDOztHQzNFMUMsTUFBTSxDQUFDLGNBQWMsQ0FBQ3NLLFNBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJdkosU0FBTyxHQUFHM0YsS0FBNkIsQ0FBQztHQUM1QyxJQUFJLGNBQWMsR0FBR0MsWUFBK0IsQ0FBQztHQUNyRCxJQUFJZ1AsZUFBYSxHQUFHNU8sYUFBd0IsQ0FBQztHQUM3QyxJQUFJLFlBQVksR0FBR0UsWUFBbUMsQ0FBQztHQUN2RCxTQUFTLE9BQU8sQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFO0dBQ2pDLElBQUksSUFBSSxTQUFTLEtBQUssS0FBSyxDQUFDLEVBQUUsRUFBRSxTQUFTLEdBQUdvRixTQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7R0FDNUQsSUFBSSxPQUFPc0osZUFBYSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQ2pILENBQUM7b0JBQ2MsR0FBRzs7OztHQ1RsQixNQUFNLENBQUMsY0FBYyxDQUFDRSxXQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSXhKLFNBQU8sR0FBRzNGLEtBQTZCLENBQUM7R0FDNUMsSUFBSXFELE9BQUssR0FBR3BELEtBQWdCLENBQUM7R0FDN0IsU0FBUyxTQUFTLENBQUMsU0FBUyxFQUFFO0dBQzlCLElBQUksSUFBSSxTQUFTLEtBQUssS0FBSyxDQUFDLEVBQUUsRUFBRSxTQUFTLEdBQUcwRixTQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7R0FDNUQsSUFBSSxPQUFPdEMsT0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEtBQUssRUFBRSxFQUFFLE9BQU8sSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ3pGLENBQUM7d0JBQ2dCLEdBQUcsVUFBVTtHQUM5QixJQUFJLFNBQVMsSUFBSSxZQUFZO0dBQzdCLElBQUksU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtHQUN6QyxRQUFRLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0dBQzNCLFFBQVEsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7R0FDbkMsS0FBSztHQUNMLElBQUksT0FBTyxTQUFTLENBQUM7R0FDckIsQ0FBQyxFQUFFLENBQUMsQ0FBQzt3QkFDWSxHQUFHOzs7O0dDZnBCLE1BQU0sQ0FBQyxjQUFjLENBQUMrTCxTQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSTNDLFVBQVEsR0FBR3pNLFFBQW1CLENBQUM7R0FDbkMsU0FBUyxjQUFjLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUU7R0FDMUMsSUFBSSxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7R0FDckIsUUFBUSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDdEIsS0FBSztHQUNMLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUNuQixJQUFJLE9BQU8sR0FBRyxDQUFDO0dBQ2YsQ0FBQztHQUNELFNBQVMsT0FBTyxHQUFHO0dBQ25CLElBQUksT0FBT3lNLFVBQVEsQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQy9DLENBQUM7b0JBQ2MsR0FBRzs7OztHQ1psQixJQUFJak0sV0FBUyxHQUFHLENBQUNDLGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDNE8sUUFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUkvTixXQUFTLEdBQUd0QixTQUFxQixDQUFDO0dBQ3RDLElBQUksZ0JBQWdCLEdBQUdDLGdCQUE0QixDQUFDO0dBQ3BELFNBQVNxUCxRQUFNLENBQUMsZ0JBQWdCLEVBQUU7R0FDbEMsSUFBSSxPQUFPLFNBQVMsc0JBQXNCLENBQUMsTUFBTSxFQUFFO0dBQ25ELFFBQVEsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUlDLGdCQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0dBQ2pFLEtBQUssQ0FBQztHQUNOLENBQUM7a0JBQ2EsR0FBR0QsU0FBTztHQUN4QixJQUFJQyxnQkFBYyxJQUFJLFlBQVk7R0FDbEMsSUFBSSxTQUFTLGNBQWMsQ0FBQyxnQkFBZ0IsRUFBRTtHQUM5QyxRQUFRLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztHQUNqRCxLQUFLO0dBQ0wsSUFBSSxjQUFjLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDbEUsUUFBUSxJQUFJLGdCQUFnQixHQUFHLElBQUlDLGtCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0dBQ2hFLFFBQVEsSUFBSSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7R0FDcEUsUUFBUSxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFO0dBQ3hDLFlBQVksZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUN2SixTQUFTO0dBQ1QsUUFBUSxPQUFPLGtCQUFrQixDQUFDO0dBQ2xDLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxjQUFjLENBQUM7R0FDMUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUlBLGtCQUFnQixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQzFDLElBQUloUCxXQUFTLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDeEMsSUFBSSxTQUFTLGdCQUFnQixDQUFDLFdBQVcsRUFBRTtHQUMzQyxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSWMsV0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO0dBQy9DLFFBQVEsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDdkMsUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFlBQVk7R0FDeEQsUUFBUSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7R0FDMUIsS0FBSyxDQUFDO0dBQ04sSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQzlELFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMzQixLQUFLLENBQUM7R0FDTixJQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsWUFBWTtHQUM1RCxRQUFRLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztHQUN6QixLQUFLLENBQUM7R0FDTixJQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDeEQsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUNoQyxLQUFLLENBQUM7R0FDTixJQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsVUFBVSxHQUFHLEVBQUU7R0FDdkQsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUMvQixRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ3BDLEtBQUssQ0FBQztHQUNOLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0dBQ3ZELFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUMvQixRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDcEMsS0FBSyxDQUFDO0dBQ04sSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsWUFBWSxHQUFHLFlBQVk7R0FDMUQsUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztHQUMzQixLQUFLLENBQUM7R0FDTixJQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsWUFBWTtHQUN4RCxRQUFRLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7R0FDckMsUUFBUSxJQUFJLFVBQVUsRUFBRTtHQUN4QixZQUFZLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUNsQyxTQUFTO0dBQ1QsUUFBUSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0dBQzNDLFFBQVEsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJQSxXQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7R0FDOUQsUUFBUSxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0dBQ3BDLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxnQkFBZ0IsQ0FBQztHQUM1QixDQUFDLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMsQ0FBQzs7OztHQzdFMUMsSUFBSWQsV0FBUyxHQUFHLENBQUNDLGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDZ1AsYUFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUkvTyxjQUFZLEdBQUdWLFlBQXdCLENBQUM7R0FDNUMsSUFBSXNCLFdBQVMsR0FBR3JCLFNBQXFCLENBQUM7R0FDdEMsU0FBUyxXQUFXLENBQUMsVUFBVSxFQUFFLGdCQUFnQixFQUFFO0dBQ25ELElBQUksSUFBSSxnQkFBZ0IsS0FBSyxLQUFLLENBQUMsRUFBRSxFQUFFLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQzlELElBQUksT0FBTyxTQUFTLDJCQUEyQixDQUFDLE1BQU0sRUFBRTtHQUN4RCxRQUFRLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLG1CQUFtQixDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7R0FDbEYsS0FBSyxDQUFDO0dBQ04sQ0FBQzs0QkFDa0IsR0FBRyxZQUFZO0dBQ2xDLElBQUksbUJBQW1CLElBQUksWUFBWTtHQUN2QyxJQUFJLFNBQVMsbUJBQW1CLENBQUMsVUFBVSxFQUFFLGdCQUFnQixFQUFFO0dBQy9ELFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7R0FDckMsUUFBUSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7R0FDakQsS0FBSztHQUNMLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDdkUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxxQkFBcUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0dBQy9HLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxtQkFBbUIsQ0FBQztHQUMvQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ0wsSUFBSSxxQkFBcUIsSUFBSSxVQUFVLE1BQU0sRUFBRTtHQUMvQyxJQUFJTyxXQUFTLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDN0MsSUFBSSxTQUFTLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUU7R0FDOUUsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztHQUN4QyxRQUFRLEtBQUssQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0dBQ3RDLFFBQVEsS0FBSyxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO0dBQ2xELFFBQVEsS0FBSyxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUljLFdBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0dBQ2xELFFBQVEsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7R0FDeEIsUUFBUSxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUMzQyxRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDN0QsUUFBUSxJQUFJLGdCQUFnQixHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztHQUNyRyxRQUFRLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7R0FDM0MsUUFBUSxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0dBQ3pDLFFBQVEsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztHQUNuQyxRQUFRLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7R0FDakMsUUFBUSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtHQUN0RCxZQUFZLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDbkMsU0FBUztHQUNULFFBQVEsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0dBQzVDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxnQkFBZ0IsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO0dBQ2xFLFlBQVksT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQ3ZDLFNBQVM7R0FDVCxRQUFRLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLGdCQUFnQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7R0FDbkUsWUFBWSxJQUFJLFFBQVEsR0FBRyxJQUFJQSxXQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7R0FDbkQsWUFBWSxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQ25DLFlBQVksV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztHQUN2QyxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFVBQVUsR0FBRyxFQUFFO0dBQzVELFFBQVEsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztHQUNuQyxRQUFRLElBQUksT0FBTyxFQUFFO0dBQ3JCLFlBQVksT0FBTyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7R0FDdkQsZ0JBQWdCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDM0MsYUFBYTtHQUNiLFNBQVM7R0FDVCxRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ3BDLEtBQUssQ0FBQztHQUNOLElBQUkscUJBQXFCLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0dBQzVELFFBQVEsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztHQUNuQyxRQUFRLElBQUksT0FBTyxFQUFFO0dBQ3JCLFlBQVksT0FBTyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7R0FDdkQsZ0JBQWdCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUMzQyxhQUFhO0dBQ2IsU0FBUztHQUNULFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUNwQyxLQUFLLENBQUM7R0FDTixJQUFJLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsWUFBWTtHQUMvRCxRQUFRLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0dBQ3ZCLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7R0FDNUIsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLHFCQUFxQixDQUFDO0dBQ2pDLENBQUMsQ0FBQ1osY0FBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7O0dDdkYzQixJQUFJRixXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUNpUCxZQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSXBPLFdBQVMsR0FBR3RCLFNBQXFCLENBQUM7R0FDdEMsSUFBSSxPQUFPLEdBQUdDLEtBQTZCLENBQUM7R0FDNUMsSUFBSSxZQUFZLEdBQUdJLFlBQXdCLENBQUM7R0FDNUMsSUFBSSxXQUFXLEdBQUdFLFdBQTRCLENBQUM7R0FDL0MsSUFBSSxhQUFhLEdBQUdNLGFBQThCLENBQUM7R0FDbkQsU0FBUyxVQUFVLENBQUMsY0FBYyxFQUFFO0dBQ3BDLElBQUksSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztHQUNsQyxJQUFJLElBQUksc0JBQXNCLEdBQUcsSUFBSSxDQUFDO0dBQ3RDLElBQUksSUFBSSxhQUFhLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDO0dBQ2pELElBQUksSUFBSSxhQUFhLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0dBQ2pELFFBQVEsU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNqQyxLQUFLO0dBQ0wsSUFBSSxJQUFJLGFBQWEsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7R0FDakQsUUFBUSxTQUFTLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ2pDLEtBQUs7R0FDTCxTQUFTLElBQUksV0FBVyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtHQUNsRCxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDN0MsS0FBSztHQUNMLElBQUksSUFBSSxhQUFhLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0dBQ2pELFFBQVEsU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNqQyxLQUFLO0dBQ0wsU0FBUyxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7R0FDbEQsUUFBUSxzQkFBc0IsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDdEQsS0FBSztHQUNMLElBQUksT0FBTyxTQUFTLDBCQUEwQixDQUFDLE1BQU0sRUFBRTtHQUN2RCxRQUFRLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLGtCQUFrQixDQUFDLGNBQWMsRUFBRSxzQkFBc0IsRUFBRSxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztHQUNySCxLQUFLLENBQUM7R0FDTixDQUFDOzBCQUNpQixHQUFHLFdBQVc7R0FDaEMsSUFBSSxrQkFBa0IsSUFBSSxZQUFZO0dBQ3RDLElBQUksU0FBUyxrQkFBa0IsQ0FBQyxjQUFjLEVBQUUsc0JBQXNCLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRTtHQUNsRyxRQUFRLElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO0dBQzdDLFFBQVEsSUFBSSxDQUFDLHNCQUFzQixHQUFHLHNCQUFzQixDQUFDO0dBQzdELFFBQVEsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7R0FDM0MsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztHQUNuQyxLQUFLO0dBQ0wsSUFBSSxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUN0RSxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0dBQzVKLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxrQkFBa0IsQ0FBQztHQUM5QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ0wsSUFBSSxjQUFjLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDeEMsSUFBSUwsV0FBUyxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUN0QyxJQUFJLFNBQVMsY0FBYyxHQUFHO0dBQzlCLFFBQVEsSUFBSSxLQUFLLEdBQUcsTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDN0UsUUFBUSxLQUFLLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxDQUFDO0dBQ3hDLFFBQVEsT0FBTyxLQUFLLENBQUM7R0FDckIsS0FBSztHQUNMLElBQUksY0FBYyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDckQsUUFBUSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztHQUNyQyxRQUFRLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7R0FDaEQsS0FBSyxDQUFDO0dBQ04sSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsc0JBQXNCLEVBQUU7R0FDNUUsUUFBUSxHQUFHLEVBQUUsWUFBWTtHQUN6QixZQUFZLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDO0dBQzlDLFNBQVM7R0FDVCxRQUFRLFVBQVUsRUFBRSxJQUFJO0dBQ3hCLFFBQVEsWUFBWSxFQUFFLElBQUk7R0FDMUIsS0FBSyxDQUFDLENBQUM7R0FDUCxJQUFJLE9BQU8sY0FBYyxDQUFDO0dBQzFCLENBQUMsQ0FBQ2MsV0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7R0FDdEIsSUFBSSxvQkFBb0IsSUFBSSxVQUFVLE1BQU0sRUFBRTtHQUM5QyxJQUFJZCxXQUFTLENBQUMsb0JBQW9CLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDNUMsSUFBSSxTQUFTLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxjQUFjLEVBQUUsc0JBQXNCLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRTtHQUNqSCxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0dBQ3hDLFFBQVEsS0FBSyxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7R0FDOUMsUUFBUSxLQUFLLENBQUMsc0JBQXNCLEdBQUcsc0JBQXNCLENBQUM7R0FDOUQsUUFBUSxLQUFLLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztHQUM1QyxRQUFRLEtBQUssQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0dBQ3BDLFFBQVEsS0FBSyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7R0FDM0IsUUFBUSxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7R0FDeEMsUUFBUSxJQUFJLHNCQUFzQixLQUFLLElBQUksSUFBSSxzQkFBc0IsSUFBSSxDQUFDLEVBQUU7R0FDNUUsWUFBWSxJQUFJLFVBQVUsR0FBRyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7R0FDbEYsWUFBWSxJQUFJLGFBQWEsR0FBRyxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsc0JBQXNCLEVBQUUsc0JBQXNCLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLENBQUM7R0FDNUosWUFBWSxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7R0FDM0YsWUFBWSxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsc0JBQXNCLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztHQUN6RyxTQUFTO0dBQ1QsYUFBYTtHQUNiLFlBQVksSUFBSSxpQkFBaUIsR0FBRyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLENBQUM7R0FDMUcsWUFBWSxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsMEJBQTBCLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQztHQUN6RyxTQUFTO0dBQ1QsUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQzVELFFBQVEsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztHQUNuQyxRQUFRLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7R0FDakMsUUFBUSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO0dBQ3RDLFlBQVksSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ3RDLFlBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7R0FDbEMsZ0JBQWdCLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDckMsZ0JBQWdCLElBQUksUUFBUSxDQUFDLG9CQUFvQixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7R0FDekUsb0JBQW9CLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7R0FDL0MsaUJBQWlCO0dBQ2pCLGFBQWE7R0FDYixTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFVBQVUsR0FBRyxFQUFFO0dBQzNELFFBQVEsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztHQUNuQyxRQUFRLE9BQU8sT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7R0FDbkMsWUFBWSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ3ZDLFNBQVM7R0FDVCxRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ3BDLEtBQUssQ0FBQztHQUNOLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0dBQzNELFFBQVEsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztHQUNuQyxRQUFRLE9BQU8sT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7R0FDbkMsWUFBWSxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7R0FDM0MsWUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtHQUNsQyxnQkFBZ0IsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQ3BDLGFBQWE7R0FDYixTQUFTO0dBQ1QsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQ3BDLEtBQUssQ0FBQztHQUNOLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxZQUFZO0dBQzVELFFBQVEsSUFBSSxNQUFNLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztHQUMxQyxRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQ2xDLFFBQVEsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztHQUMzQyxRQUFRLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDakMsUUFBUSxPQUFPLE1BQU0sQ0FBQztHQUN0QixLQUFLLENBQUM7R0FDTixJQUFJLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsVUFBVSxNQUFNLEVBQUU7R0FDbkUsUUFBUSxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDMUIsUUFBUSxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0dBQ25DLFFBQVEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25ELEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyxvQkFBb0IsQ0FBQztHQUNoQyxDQUFDLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7R0FDNUIsU0FBUywwQkFBMEIsQ0FBQyxLQUFLLEVBQUU7R0FDM0MsSUFBSSxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLGNBQWMsR0FBRyxLQUFLLENBQUMsY0FBYyxFQUFFLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0dBQ3BHLElBQUksSUFBSSxNQUFNLEVBQUU7R0FDaEIsUUFBUSxVQUFVLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQ3ZDLEtBQUs7R0FDTCxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDLFVBQVUsRUFBRSxDQUFDO0dBQzNDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLENBQUM7R0FDekMsQ0FBQztHQUNELFNBQVMsc0JBQXNCLENBQUMsS0FBSyxFQUFFO0dBQ3ZDLElBQUksSUFBSSxjQUFjLEdBQUcsS0FBSyxDQUFDLGNBQWMsRUFBRSxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsRUFBRSxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsRUFBRSxzQkFBc0IsR0FBRyxLQUFLLENBQUMsc0JBQXNCLENBQUM7R0FDakssSUFBSSxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsVUFBVSxFQUFFLENBQUM7R0FDekMsSUFBSSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7R0FDdEIsSUFBSSxJQUFJLE9BQU8sR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDO0dBQ3pELElBQUksSUFBSSxhQUFhLEdBQUcsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDO0dBQ3JGLElBQUksT0FBTyxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLGNBQWMsRUFBRSxhQUFhLENBQUMsQ0FBQztHQUNsRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0dBQ3JDLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztHQUNuRCxDQUFDO0dBQ0QsU0FBUyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUU7R0FDcEMsSUFBSSxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0dBQ3RGLElBQUksSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsWUFBWSxFQUFFO0dBQzNELFFBQVEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0dBQ3BELEtBQUs7R0FDTCxJQUFJLFVBQVUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDbkM7Ozs7R0N0S0EsSUFBSUEsV0FBUyxHQUFHLENBQUNDLGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDa1AsY0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUlyTyxXQUFTLEdBQUd0QixTQUFxQixDQUFDO0dBQ3RDLElBQUksY0FBYyxHQUFHQyxjQUEwQixDQUFDO0dBQ2hELElBQUl3RCxtQkFBaUIsR0FBR3BELGlCQUE2QixDQUFDO0dBQ3RELElBQUk0RCxxQkFBbUIsR0FBRzFELG1CQUFvQyxDQUFDO0dBQy9ELFNBQVMsWUFBWSxDQUFDLFFBQVEsRUFBRSxlQUFlLEVBQUU7R0FDakQsSUFBSSxPQUFPLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksb0JBQW9CLENBQUMsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQzFHLENBQUM7OEJBQ21CLEdBQUcsYUFBYTtHQUNwQyxJQUFJLG9CQUFvQixJQUFJLFlBQVk7R0FDeEMsSUFBSSxTQUFTLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxlQUFlLEVBQUU7R0FDN0QsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztHQUNqQyxRQUFRLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO0dBQy9DLEtBQUs7R0FDTCxJQUFJLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxVQUFVLEVBQUUsTUFBTSxFQUFFO0dBQ3hFLFFBQVEsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksc0JBQXNCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7R0FDN0csS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLG9CQUFvQixDQUFDO0dBQ2hDLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLHNCQUFzQixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQ2hELElBQUlDLFdBQVMsQ0FBQyxzQkFBc0IsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUM5QyxJQUFJLFNBQVMsc0JBQXNCLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUU7R0FDNUUsUUFBUSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7R0FDM0QsUUFBUSxLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztHQUNsQyxRQUFRLEtBQUssQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO0dBQ2hELFFBQVEsS0FBSyxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7R0FDNUIsUUFBUSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsR0FBR3lELHFCQUFtQixDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztHQUM3RyxRQUFRLE9BQU8sS0FBSyxDQUFDO0dBQ3JCLEtBQUs7R0FDTCxJQUFJLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUU7R0FDOUQsUUFBUSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0dBQ3JDLFFBQVEsSUFBSSxRQUFRLEVBQUU7R0FDdEIsWUFBWSxJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0dBQ3RDLFlBQVksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtHQUMxQyxnQkFBZ0IsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDL0MsYUFBYTtHQUNiLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsVUFBVSxHQUFHLEVBQUU7R0FDN0QsUUFBUSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0dBQ3JDLFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7R0FDN0IsUUFBUSxJQUFJLFFBQVEsRUFBRTtHQUN0QixZQUFZLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7R0FDdEMsWUFBWSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztHQUMzQixZQUFZLE9BQU8sRUFBRSxLQUFLLEdBQUcsR0FBRyxFQUFFO0dBQ2xDLGdCQUFnQixJQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDaEQsZ0JBQWdCLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQzVDLGdCQUFnQixTQUFTLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQ3JELGFBQWE7R0FDYixTQUFTO0dBQ1QsUUFBUSxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0dBQ2hELEtBQUssQ0FBQztHQUNOLElBQUksc0JBQXNCLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0dBQzdELFFBQVEsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztHQUNyQyxRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0dBQzdCLFFBQVEsSUFBSSxRQUFRLEVBQUU7R0FDdEIsWUFBWSxJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0dBQ3RDLFlBQVksSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7R0FDM0IsWUFBWSxPQUFPLEVBQUUsS0FBSyxHQUFHLEdBQUcsRUFBRTtHQUNsQyxnQkFBZ0IsSUFBSSxTQUFTLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ2hELGdCQUFnQixTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQzVDLGdCQUFnQixTQUFTLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQ3JELGFBQWE7R0FDYixTQUFTO0dBQ1QsUUFBUSxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDOUMsS0FBSyxDQUFDO0dBQ04sSUFBSSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsWUFBWSxHQUFHLFlBQVk7R0FDaEUsUUFBUSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0dBQ3JDLFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7R0FDN0IsUUFBUSxJQUFJLFFBQVEsRUFBRTtHQUN0QixZQUFZLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7R0FDdEMsWUFBWSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztHQUMzQixZQUFZLE9BQU8sRUFBRSxLQUFLLEdBQUcsR0FBRyxFQUFFO0dBQ2xDLGdCQUFnQixJQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDaEQsZ0JBQWdCLFNBQVMsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDL0MsZ0JBQWdCLFNBQVMsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDckQsYUFBYTtHQUNiLFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsVUFBVSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0dBQ3RILFFBQVEsSUFBSSxVQUFVLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRTtHQUMxQyxZQUFZLElBQUksZUFBZSxHQUFHLEtBQUssQ0FBQyxDQUFDO0dBQ3pDLFlBQVksSUFBSTtHQUNoQixnQkFBZ0IsSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztHQUMzRCxnQkFBZ0IsZUFBZSxHQUFHLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztHQUM5RCxhQUFhO0dBQ2IsWUFBWSxPQUFPLENBQUMsRUFBRTtHQUN0QixnQkFBZ0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ3JDLGFBQWE7R0FDYixZQUFZLElBQUksUUFBUSxHQUFHLElBQUkzQyxXQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7R0FDbkQsWUFBWSxJQUFJLFlBQVksR0FBRyxJQUFJLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztHQUNqRSxZQUFZLElBQUksU0FBUyxHQUFHLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLENBQUM7R0FDN0UsWUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztHQUMxQyxZQUFZLElBQUksaUJBQWlCLEdBQUcyQyxxQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQzVHLFlBQVksSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUU7R0FDMUMsZ0JBQWdCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7R0FDM0QsYUFBYTtHQUNiLGlCQUFpQjtHQUNqQixnQkFBZ0IsaUJBQWlCLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztHQUN0RCxnQkFBZ0IsWUFBWSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0dBQ3BELGFBQWE7R0FDYixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQzVDLFNBQVM7R0FDVCxhQUFhO0dBQ2IsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7R0FDaEUsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksc0JBQXNCLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxVQUFVLEdBQUcsRUFBRTtHQUNsRSxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDeEIsS0FBSyxDQUFDO0dBQ04sSUFBSSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQ3ZFLFFBQVEsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLGdCQUFnQixFQUFFO0dBQzdDLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztHQUNuRSxTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQ3BFLFFBQVEsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7R0FDMUIsWUFBWSxPQUFPO0dBQ25CLFNBQVM7R0FDVCxRQUFRLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7R0FDckMsUUFBUSxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDdEMsUUFBUSxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLFlBQVksR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDO0dBQ3pFLFFBQVEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbEMsUUFBUSxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDMUIsUUFBUSxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDbkMsS0FBSyxDQUFDO0dBQ04sSUFBSSxPQUFPLHNCQUFzQixDQUFDO0dBQ2xDLENBQUMsQ0FBQ1IsbUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUM7Ozs7R0M1SXJDLElBQUlqRCxXQUFTLEdBQUcsQ0FBQ0MsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsWUFBWTtHQUN6RCxJQUFJLElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUN4QyxRQUFRLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztHQUM3QyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDeEYsWUFBWSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7R0FDdkYsUUFBUSxPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDbkMsTUFBSztHQUNMLElBQUksT0FBTyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDM0IsUUFBUSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQzVCLFFBQVEsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0dBQy9DLFFBQVEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztHQUM3RixLQUFLLENBQUM7R0FDTixDQUFDLEdBQUcsQ0FBQztHQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUNtUCxZQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSSxTQUFTLEdBQUc1UCxTQUFxQixDQUFDO0dBQ3RDLElBQUl5RCxtQkFBaUIsR0FBR3hELGlCQUE2QixDQUFDO0dBQ3RELElBQUlnRSxxQkFBbUIsR0FBRzVELG1CQUFvQyxDQUFDO0dBQy9ELFNBQVMsVUFBVSxDQUFDLGVBQWUsRUFBRTtHQUNyQyxJQUFJLE9BQU8sU0FBUywwQkFBMEIsQ0FBQyxNQUFNLEVBQUU7R0FDdkQsUUFBUSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztHQUNoRSxLQUFLLENBQUM7R0FDTixDQUFDOzBCQUNpQixHQUFHLFdBQVc7R0FDaEMsSUFBSSxjQUFjLElBQUksWUFBWTtHQUNsQyxJQUFJLFNBQVMsY0FBYyxDQUFDLGVBQWUsRUFBRTtHQUM3QyxRQUFRLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO0dBQy9DLEtBQUs7R0FDTCxJQUFJLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsVUFBVSxFQUFFLE1BQU0sRUFBRTtHQUNsRSxRQUFRLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztHQUN4RixLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sY0FBYyxDQUFDO0dBQzFCLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDTCxJQUFJLGdCQUFnQixJQUFJLFVBQVUsTUFBTSxFQUFFO0dBQzFDLElBQUlHLFdBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUN4QyxJQUFJLFNBQVMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLGVBQWUsRUFBRTtHQUM1RCxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQztHQUMzRCxRQUFRLEtBQUssQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0dBQ3hDLFFBQVEsS0FBSyxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7R0FDaEQsUUFBUSxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7R0FDM0IsUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRTtHQUNwSCxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7R0FDbEMsS0FBSyxDQUFDO0dBQ04sSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFVBQVUsS0FBSyxFQUFFO0dBQzlELFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMzQixLQUFLLENBQUM7R0FDTixJQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsVUFBVSxRQUFRLEVBQUU7R0FDcEUsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQ2xDLEtBQUssQ0FBQztHQUNOLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUN4RCxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ2hDLEtBQUssQ0FBQztHQUNOLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxVQUFVLEdBQUcsRUFBRTtHQUN2RCxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQy9CLFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDcEMsUUFBUSxJQUFJLENBQUMsOEJBQThCLEVBQUUsQ0FBQztHQUM5QyxLQUFLLENBQUM7R0FDTixJQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBWTtHQUN2RCxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDL0IsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQ3BDLFFBQVEsSUFBSSxDQUFDLDhCQUE4QixFQUFFLENBQUM7R0FDOUMsS0FBSyxDQUFDO0dBQ04sSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsOEJBQThCLEdBQUcsWUFBWTtHQUM1RSxRQUFRLElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFO0dBQ3RDLFlBQVksSUFBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQ25ELFNBQVM7R0FDVCxLQUFLLENBQUM7R0FDTixJQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsVUFBVSxRQUFRLEVBQUU7R0FDaEUsUUFBUSxJQUFJLFFBQVEsS0FBSyxLQUFLLENBQUMsRUFBRSxFQUFFLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRTtHQUNyRCxRQUFRLElBQUksUUFBUSxFQUFFO0dBQ3RCLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztHQUNsQyxZQUFZLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztHQUNuQyxTQUFTO0dBQ1QsUUFBUSxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0dBQ3JDLFFBQVEsSUFBSSxVQUFVLEVBQUU7R0FDeEIsWUFBWSxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDbEMsU0FBUztHQUNULFFBQVEsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztHQUMzRCxRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQ3RDLFFBQVEsSUFBSSxlQUFlLENBQUM7R0FDNUIsUUFBUSxJQUFJO0dBQ1osWUFBWSxJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO0dBQ3ZELFlBQVksZUFBZSxHQUFHLGVBQWUsRUFBRSxDQUFDO0dBQ2hELFNBQVM7R0FDVCxRQUFRLE9BQU8sQ0FBQyxFQUFFO0dBQ2xCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDdEMsWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNqQyxZQUFZLE9BQU87R0FDbkIsU0FBUztHQUNULFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEdBQUd5RCxxQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztHQUMxRyxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sZ0JBQWdCLENBQUM7R0FDNUIsQ0FBQyxDQUFDUixtQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQzs7OztHQzdGckMsSUFBSSxTQUFTLEdBQUcsQ0FBQ2hELGNBQUksSUFBSUEsY0FBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDekQsSUFBSSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDeEMsUUFBUSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7R0FDN0MsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3hGLFlBQVksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0dBQ3ZGLFFBQVEsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ25DLE1BQUs7R0FDTCxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQzNCLFFBQVEsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QixRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtHQUMvQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDN0YsS0FBSyxDQUFDO0dBQ04sQ0FBQyxHQUFHLENBQUM7R0FDTCxNQUFNLENBQUMsY0FBYyxDQUFDb1AsZ0JBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxJQUFJLGlCQUFpQixHQUFHN1AsaUJBQTZCLENBQUM7R0FDdEQsSUFBSSxtQkFBbUIsR0FBR0MsbUJBQW9DLENBQUM7R0FDL0QsU0FBUyxjQUFjLEdBQUc7R0FDMUIsSUFBSSxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7R0FDbEIsSUFBSSxLQUFLLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRTtHQUNsRCxRQUFRLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDakMsS0FBSztHQUNMLElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRTtHQUM3QixRQUFRLElBQUksT0FBTyxDQUFDO0dBQ3BCLFFBQVEsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLFVBQVUsRUFBRTtHQUN6RCxZQUFZLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7R0FDakMsU0FBUztHQUNULFFBQVEsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDO0dBQy9CLFFBQVEsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksc0JBQXNCLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7R0FDN0UsS0FBSyxDQUFDO0dBQ04sQ0FBQztrQ0FDcUIsR0FBRyxlQUFlO0dBQ3hDLElBQUksc0JBQXNCLElBQUksWUFBWTtHQUMxQyxJQUFJLFNBQVMsc0JBQXNCLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRTtHQUMxRCxRQUFRLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0dBQ3ZDLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7R0FDL0IsS0FBSztHQUNMLElBQUksc0JBQXNCLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUU7R0FDMUUsUUFBUSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSx3QkFBd0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztHQUMxRyxLQUFLLENBQUM7R0FDTixJQUFJLE9BQU8sc0JBQXNCLENBQUM7R0FDbEMsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNMLElBQUksd0JBQXdCLElBQUksVUFBVSxNQUFNLEVBQUU7R0FDbEQsSUFBSSxTQUFTLENBQUMsd0JBQXdCLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDaEQsSUFBSSxTQUFTLHdCQUF3QixDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFO0dBQ3pFLFFBQVEsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLElBQUksSUFBSSxDQUFDO0dBQzNELFFBQVEsS0FBSyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7R0FDeEMsUUFBUSxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztHQUNoQyxRQUFRLEtBQUssQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0dBQzdCLFFBQVEsSUFBSSxHQUFHLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQztHQUNyQyxRQUFRLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDdEMsUUFBUSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO0dBQ3RDLFlBQVksS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDcEMsU0FBUztHQUNULFFBQVEsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtHQUN0QyxZQUFZLElBQUksVUFBVSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUM1QyxZQUFZLEtBQUssQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUM5RixTQUFTO0dBQ1QsUUFBUSxPQUFPLEtBQUssQ0FBQztHQUNyQixLQUFLO0dBQ0wsSUFBSSx3QkFBd0IsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVUsV0FBVyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7R0FDbkcsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztHQUM3QyxRQUFRLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7R0FDdkMsUUFBUSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0dBQ2xDLFlBQVksSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztHQUN0RCxZQUFZLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO0dBQzlCLGdCQUFnQixTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztHQUMzQyxhQUFhO0dBQ2IsU0FBUztHQUNULEtBQUssQ0FBQztHQUNOLElBQUksd0JBQXdCLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxZQUFZO0dBQ3BFLEtBQUssQ0FBQztHQUNOLElBQUksd0JBQXdCLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRTtHQUNoRSxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0dBQ3pDLFlBQVksSUFBSSxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQ25ELFlBQVksSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO0dBQzlCLGdCQUFnQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ3ZDLGFBQWE7R0FDYixpQkFBaUI7R0FDakIsZ0JBQWdCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQzVDLGFBQWE7R0FDYixTQUFTO0dBQ1QsS0FBSyxDQUFDO0dBQ04sSUFBSSx3QkFBd0IsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFVBQVUsSUFBSSxFQUFFO0dBQ3JFLFFBQVEsSUFBSSxNQUFNLENBQUM7R0FDbkIsUUFBUSxJQUFJO0dBQ1osWUFBWSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0dBQ3BELFNBQVM7R0FDVCxRQUFRLE9BQU8sR0FBRyxFQUFFO0dBQ3BCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDeEMsWUFBWSxPQUFPO0dBQ25CLFNBQVM7R0FDVCxRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQ3RDLEtBQUssQ0FBQztHQUNOLElBQUksT0FBTyx3QkFBd0IsQ0FBQztHQUNwQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUM7Ozs7R0M5RnJDLE1BQU0sQ0FBQyxjQUFjLENBQUM2UCxLQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSW5KLE9BQUssR0FBRzNHLEtBQTRCLENBQUM7R0FDekMsU0FBUyxHQUFHLEdBQUc7R0FDZixJQUFJLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztHQUN6QixJQUFJLEtBQUssSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFO0dBQ2xELFFBQVEsV0FBVyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUN4QyxLQUFLO0dBQ0wsSUFBSSxPQUFPLFNBQVMsbUJBQW1CLENBQUMsTUFBTSxFQUFFO0dBQ2hELFFBQVEsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzJHLE9BQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUN2RixLQUFLLENBQUM7R0FDTixDQUFDO1lBQ1UsR0FBRzs7OztHQ1hkLE1BQU0sQ0FBQyxjQUFjLENBQUNvSixRQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FDOUQsSUFBSXBKLE9BQUssR0FBRzNHLEtBQTRCLENBQUM7R0FDekMsU0FBUyxNQUFNLENBQUMsT0FBTyxFQUFFO0dBQ3pCLElBQUksT0FBTyxVQUFVLE1BQU0sRUFBRSxFQUFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJMkcsT0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztHQUNyRixDQUFDO2tCQUNhLEdBQUc7O0dDTGpCLE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0dBQzlELElBQUksT0FBTyxHQUFHM0csT0FBc0MsQ0FBQztrQkFDeEMsR0FBRyxPQUFPLENBQUMsTUFBTTtHQUM5QixJQUFJLFdBQVcsR0FBR0MsV0FBMEMsQ0FBQztzQkFDNUMsR0FBRyxXQUFXLENBQUMsVUFBVTtHQUMxQyxJQUFJLFFBQVEsR0FBR0ksUUFBdUMsQ0FBQzttQkFDekMsR0FBRyxRQUFRLENBQUMsT0FBTztHQUNqQyxJQUFJLGFBQWEsR0FBR0UsYUFBNEMsQ0FBQzt3QkFDOUMsR0FBRyxhQUFhLENBQUMsWUFBWTtHQUNoRCxJQUFJLFlBQVksR0FBR00sWUFBMkMsQ0FBQzt1QkFDN0MsR0FBRyxZQUFZLENBQUMsV0FBVztHQUM3QyxJQUFJLGNBQWMsR0FBR0MsY0FBNkMsQ0FBQzt5QkFDL0MsR0FBRyxjQUFjLENBQUMsYUFBYTtHQUNuRCxJQUFJLFlBQVksR0FBR2dELFlBQTJDLENBQUM7dUJBQzdDLEdBQUcsWUFBWSxDQUFDLFdBQVc7R0FDN0MsSUFBSSxZQUFZLEdBQUdDLFlBQTJDLENBQUM7dUJBQzdDLEdBQUcsWUFBWSxDQUFDLFdBQVc7R0FDN0MsSUFBSSxZQUFZLEdBQUdDLFlBQTJDLENBQUM7dUJBQzdDLEdBQUcsWUFBWSxDQUFDLFdBQVc7R0FDN0MsSUFBSSxlQUFlLEdBQUc4QyxlQUE4QyxDQUFDOzBCQUNoRCxHQUFHLGVBQWUsQ0FBQyxjQUFjO0dBQ3RELElBQUksUUFBUSxHQUFHQyxRQUF1QyxDQUFDO21CQUN6QyxHQUFHLFFBQVEsQ0FBQyxPQUFPO0dBQ2pDLElBQUksV0FBVyxHQUFHQyxXQUEwQyxDQUFDO3NCQUM1QyxHQUFHLFdBQVcsQ0FBQyxVQUFVO0dBQzFDLElBQUksV0FBVyxHQUFHQyxXQUEwQyxDQUFDO3NCQUM1QyxHQUFHLFdBQVcsQ0FBQyxVQUFVO0dBQzFDLElBQUksYUFBYSxHQUFHQyxhQUE0QyxDQUFDO3dCQUM5QyxHQUFHLGFBQWEsQ0FBQyxZQUFZO0dBQ2hELElBQUksT0FBTyxHQUFHQyxPQUFzQyxDQUFDO2tCQUN4QyxHQUFHLE9BQU8sQ0FBQyxNQUFNO0dBQzlCLElBQUksVUFBVSxHQUFHQyxVQUF5QyxDQUFDO3FCQUMzQyxHQUFHLFVBQVUsQ0FBQyxTQUFTO0dBQ3ZDLElBQUksY0FBYyxHQUFHQyxjQUE2QyxDQUFDO3lCQUMvQyxHQUFHLGNBQWMsQ0FBQyxhQUFhO0dBQ25ELElBQUksZ0JBQWdCLEdBQUdDLGdCQUErQyxDQUFDOzJCQUNqRCxHQUFHLGdCQUFnQixDQUFDLGVBQWU7R0FDekQsSUFBSSxPQUFPLEdBQUdDLE9BQXNDLENBQUM7a0JBQ3hDLEdBQUcsT0FBTyxDQUFDLE1BQU07R0FDOUIsSUFBSSxXQUFXLEdBQUdDLFdBQTBDLENBQUM7c0JBQzVDLEdBQUcsV0FBVyxDQUFDLFVBQVU7R0FDMUMsSUFBSSxlQUFlLEdBQUdDLGVBQThDLENBQUM7MEJBQ2hELEdBQUcsZUFBZSxDQUFDLGNBQWM7R0FDdEQsSUFBSSxVQUFVLEdBQUdFLFVBQXlDLENBQUM7cUJBQzNDLEdBQUcsVUFBVSxDQUFDLFNBQVM7R0FDdkMsSUFBSSxzQkFBc0IsR0FBR0Usc0JBQXFELENBQUM7aUNBQ3ZELEdBQUcsc0JBQXNCLENBQUMscUJBQXFCO0dBQzNFLElBQUkseUJBQXlCLEdBQUdDLHlCQUF3RCxDQUFDO29DQUMxRCxHQUFHLHlCQUF5QixDQUFDLHdCQUF3QjtHQUNwRixJQUFJLFdBQVcsR0FBR0MsV0FBMEMsQ0FBQztzQkFDNUMsR0FBRyxXQUFXLENBQUMsVUFBVTtHQUMxQyxJQUFJLFNBQVMsR0FBR0UsU0FBd0MsQ0FBQztvQkFDMUMsR0FBRyxTQUFTLENBQUMsUUFBUTtHQUNwQyxJQUFJLE9BQU8sR0FBR0MsT0FBc0MsQ0FBQztrQkFDeEMsR0FBRyxPQUFPLENBQUMsTUFBTTtHQUM5QixJQUFJLFNBQVMsR0FBR0MsU0FBd0MsQ0FBQztvQkFDMUMsR0FBRyxTQUFTLENBQUMsUUFBUTtHQUNwQyxJQUFJLFlBQVksR0FBR0MsWUFBMkMsQ0FBQzt1QkFDN0MsR0FBRyxZQUFZLENBQUMsV0FBVztHQUM3QyxJQUFJLFFBQVEsR0FBR0MsUUFBdUMsQ0FBQzttQkFDekMsR0FBRyxRQUFRLENBQUMsT0FBTztHQUNqQyxJQUFJLFFBQVEsR0FBR0MsUUFBdUMsQ0FBQzttQkFDekMsR0FBRyxRQUFRLENBQUMsT0FBTztHQUNqQyxJQUFJLFVBQVUsR0FBR0MsVUFBeUMsQ0FBQztxQkFDM0MsR0FBRyxVQUFVLENBQUMsU0FBUztHQUN2QyxJQUFJLE1BQU0sR0FBR0MsTUFBcUMsQ0FBQztpQkFDdkMsR0FBRyxNQUFNLENBQUMsS0FBSztHQUMzQixJQUFJLFdBQVcsR0FBR0MsV0FBMEMsQ0FBQztzQkFDNUMsR0FBRyxXQUFXLENBQUMsVUFBVTtHQUMxQyxJQUFJLE9BQU8sR0FBR0MsT0FBc0MsQ0FBQztrQkFDeEMsR0FBRyxPQUFPLENBQUMsTUFBTTtHQUM5QixJQUFJLFNBQVMsR0FBR0MsU0FBd0MsQ0FBQztvQkFDMUMsR0FBRyxTQUFTLENBQUMsUUFBUTtHQUNwQyxJQUFJLGdCQUFnQixHQUFHQyxnQkFBK0MsQ0FBQzsyQkFDakQsR0FBRyxnQkFBZ0IsQ0FBQyxlQUFlO0dBQ3pELElBQUksU0FBUyxHQUFHQyxTQUF3QyxDQUFDO29CQUMxQyxHQUFHLFNBQVMsQ0FBQyxRQUFRO0dBQ3BDLElBQUksTUFBTSxHQUFHQyxNQUFxQyxDQUFDO2lCQUN2QyxHQUFHLE1BQU0sQ0FBQyxLQUFLO0dBQzNCLElBQUksS0FBSyxHQUFHQyxLQUFvQyxDQUFDO2dCQUN0QyxHQUFHLEtBQUssQ0FBQyxJQUFJO0dBQ3hCLElBQUksT0FBTyxHQUFHQyxPQUFzQyxDQUFDO2tCQUN4QyxHQUFHLE9BQU8sQ0FBQyxNQUFNO0dBQzlCLElBQUksYUFBYSxHQUFHQyxhQUE0QyxDQUFDO3dCQUM5QyxHQUFHLGFBQWEsQ0FBQyxZQUFZO0dBQ2hELElBQUksS0FBSyxHQUFHQyxLQUFvQyxDQUFDO2dCQUN0QyxHQUFHLEtBQUssQ0FBQyxJQUFJO0dBQ3hCLElBQUksT0FBTyxHQUFHQyxPQUFzQyxDQUFDO2tCQUN4QyxHQUFHLE9BQU8sQ0FBQyxNQUFNO0dBQzlCLElBQUksVUFBVSxHQUFHQyxVQUF5QyxDQUFDO3FCQUMzQyxHQUFHLFVBQVUsQ0FBQyxTQUFTO0dBQ3ZDLElBQUksVUFBVSxHQUFHQyxVQUF5QyxDQUFDO3FCQUMzQyxHQUFHLFVBQVUsQ0FBQyxTQUFTO29CQUN4QixHQUFHLFVBQVUsQ0FBQyxRQUFRO0dBQ3JDLElBQUksWUFBWSxHQUFHQyxZQUEyQyxDQUFDO3VCQUM3QyxHQUFHLFlBQVksQ0FBQyxXQUFXO0dBQzdDLElBQUksV0FBVyxHQUFHQyxXQUEwQyxDQUFDO3NCQUM1QyxHQUFHLFdBQVcsQ0FBQyxVQUFVO0dBQzFDLElBQUksS0FBSyxHQUFHQyxLQUFvQyxDQUFDO2dCQUN0QyxHQUFHLEtBQUssQ0FBQyxJQUFJO0dBQ3hCLElBQUksV0FBVyxHQUFHQyxXQUEwQyxDQUFDO3NCQUM1QyxHQUFHLFdBQVcsQ0FBQyxVQUFVO0dBQzFDLElBQUksV0FBVyxHQUFHQyxXQUEwQyxDQUFDO3NCQUM1QyxHQUFHLFdBQVcsQ0FBQyxVQUFVO0dBQzFDLElBQUksbUJBQW1CLEdBQUdDLG1CQUFrRCxDQUFDOzhCQUNwRCxHQUFHLG1CQUFtQixDQUFDLGtCQUFrQjtHQUNsRSxJQUFJLFVBQVUsR0FBR0MsVUFBeUMsQ0FBQztxQkFDM0MsR0FBRyxVQUFVLENBQUMsU0FBUztHQUN2QyxJQUFJLFdBQVcsR0FBR29HLFdBQTBDLENBQUM7c0JBQzVDLEdBQUcsV0FBVyxDQUFDLFVBQVU7R0FDMUMsSUFBSSxPQUFPLEdBQUdDLE9BQXNDLENBQUM7a0JBQ3hDLEdBQUcsT0FBTyxDQUFDLE1BQU07R0FDOUIsSUFBSSxTQUFTLEdBQUdDLFNBQXdDLENBQUM7b0JBQzFDLEdBQUcsU0FBUyxDQUFDLFFBQVE7R0FDcEMsSUFBSSxpQkFBaUIsR0FBR0MsaUJBQWdELENBQUM7NEJBQ2xELEdBQUcsaUJBQWlCLENBQUMsZ0JBQWdCO0dBQzVELElBQUksYUFBYSxHQUFHQyxhQUE0QyxDQUFDO3dCQUM5QyxHQUFHLGFBQWEsQ0FBQyxZQUFZO0dBQ2hELElBQUksZUFBZSxHQUFHQyxlQUE4QyxDQUFDOzBCQUNoRCxHQUFHLGVBQWUsQ0FBQyxjQUFjO0dBQ3RELElBQUksTUFBTSxHQUFHQyxNQUFxQyxDQUFDO2lCQUN2QyxHQUFHLE1BQU0sQ0FBQyxLQUFLO0dBQzNCLElBQUksUUFBUSxHQUFHQyxRQUF1QyxDQUFDO21CQUN6QyxHQUFHLFFBQVEsQ0FBQyxPQUFPO0dBQ2pDLElBQUksUUFBUSxHQUFHQyxRQUF1QyxDQUFDO21CQUN6QyxHQUFHLFFBQVEsQ0FBQyxPQUFPO0dBQ2pDLElBQUksWUFBWSxHQUFHQyxZQUEyQyxDQUFDO3VCQUM3QyxHQUFHLFlBQVksQ0FBQyxXQUFXO0dBQzdDLElBQUksT0FBTyxHQUFHQyxPQUFzQyxDQUFDO2tCQUN4QyxHQUFHLE9BQU8sQ0FBQyxNQUFNO0dBQzlCLElBQUksV0FBVyxHQUFHQyxXQUEwQyxDQUFDO3NCQUM1QyxHQUFHLFdBQVcsQ0FBQyxVQUFVO0dBQzFDLElBQUksVUFBVSxHQUFHQyxVQUF5QyxDQUFDO3FCQUMzQyxHQUFHLFVBQVUsQ0FBQyxTQUFTO0dBQ3ZDLElBQUksUUFBUSxHQUFHQyxRQUF1QyxDQUFDO21CQUN6QyxHQUFHLFFBQVEsQ0FBQyxPQUFPO0dBQ2pDLElBQUksWUFBWSxHQUFHQyxZQUEyQyxDQUFDO3VCQUM3QyxHQUFHLFlBQVksQ0FBQyxXQUFXO0dBQzdDLElBQUksTUFBTSxHQUFHQyxNQUFxQyxDQUFDO2lCQUN2QyxHQUFHLE1BQU0sQ0FBQyxLQUFLO0dBQzNCLElBQUksZUFBZSxHQUFHQyxlQUE4QyxDQUFDOzBCQUNoRCxHQUFHLGVBQWUsQ0FBQyxjQUFjO0dBQ3RELElBQUksT0FBTyxHQUFHQyxPQUFzQyxDQUFDO2tCQUN4QyxHQUFHLE9BQU8sQ0FBQyxNQUFNO0dBQzlCLElBQUksYUFBYSxHQUFHQyxhQUE0QyxDQUFDO3dCQUM5QyxHQUFHLGFBQWEsQ0FBQyxZQUFZO0dBQ2hELElBQUksUUFBUSxHQUFHQyxRQUF1QyxDQUFDO21CQUN6QyxHQUFHLFFBQVEsQ0FBQyxPQUFPO0dBQ2pDLElBQUksTUFBTSxHQUFHQyxNQUFxQyxDQUFDO2lCQUN2QyxHQUFHLE1BQU0sQ0FBQyxLQUFLO0dBQzNCLElBQUksVUFBVSxHQUFHQyxVQUF5QyxDQUFDO3FCQUMzQyxHQUFHLFVBQVUsQ0FBQyxTQUFTO0dBQ3ZDLElBQUksV0FBVyxHQUFHQyxXQUEwQyxDQUFDO3NCQUM1QyxHQUFHLFdBQVcsQ0FBQyxVQUFVO0dBQzFDLElBQUksV0FBVyxHQUFHQyxXQUEwQyxDQUFDO3NCQUM1QyxHQUFHLFdBQVcsQ0FBQyxVQUFVO0dBQzFDLElBQUksV0FBVyxHQUFHQyxXQUEwQyxDQUFDO3NCQUM1QyxHQUFHLFdBQVcsQ0FBQyxVQUFVO0dBQzFDLElBQUksYUFBYSxHQUFHQyxhQUE0QyxDQUFDO3dCQUM5QyxHQUFHLGFBQWEsQ0FBQyxZQUFZO0dBQ2hELElBQUksV0FBVyxHQUFHQyxXQUEwQyxDQUFDO3NCQUM1QyxHQUFHLFdBQVcsQ0FBQyxVQUFVO0dBQzFDLElBQUksV0FBVyxHQUFHQyxXQUEwQyxDQUFDO3NCQUM1QyxHQUFHLFdBQVcsQ0FBQyxVQUFVO0dBQzFDLElBQUksYUFBYSxHQUFHQyxhQUE0QyxDQUFDO3dCQUM5QyxHQUFHLGFBQWEsQ0FBQyxZQUFZO0dBQ2hELElBQUksTUFBTSxHQUFHQyxNQUFxQyxDQUFDO2lCQUN2QyxHQUFHLE1BQU0sQ0FBQyxLQUFLO0dBQzNCLElBQUksVUFBVSxHQUFHQyxVQUF5QyxDQUFDO3FCQUMzQyxHQUFHLFVBQVUsQ0FBQyxTQUFTO0dBQ3ZDLElBQUksV0FBVyxHQUFHQyxXQUEwQyxDQUFDO3NCQUM1QyxHQUFHLFdBQVcsQ0FBQyxVQUFVO0dBQzFDLElBQUksV0FBVyxHQUFHQyxXQUEwQyxDQUFDO3NCQUM1QyxHQUFHLFdBQVcsQ0FBQyxVQUFVO0dBQzFDLElBQUks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T0FBTyxLQUFLLENBQUMsRUFBRTtBQUNsTjtHQUNBLFNBQVMsdUJBQXVCLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLE9BQU8sR0FBRyxLQUFLLFVBQVUsRUFBRSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxHQUFHLHdCQUF3QixFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLHFCQUFxQixHQUFHLE1BQU0sQ0FBQyxjQUFjLElBQUksTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsRUFBRSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLElBQUksR0FBRyxxQkFBcUIsR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENB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RyxPQUFPLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxxQ0FBc0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsbUNBQW9CLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLCtCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dDQUM5YyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxpQ0FBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsbUNBQW9CLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLHFDQUFzQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxtQ0FBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTs0Q0FDbE4sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxFQUFFLFVBQVUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLEdBQUcsT0FBTyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMs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
